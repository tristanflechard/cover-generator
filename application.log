2025-01-31 15:23:06,553 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2025-01-31 15:23:06,553 - INFO - [33mPress CTRL+C to quit[0m
2025-01-31 15:23:06,553 - INFO -  * Restarting with stat
2025-01-31 15:23:08,351 - WARNING -  * Debugger is active!
2025-01-31 15:23:08,353 - INFO -  * Debugger PIN: 142-961-790
2025-01-31 15:23:13,909 - INFO - Retrieved models: ['Ninho', 'Damso', 'Marine Lepen (French pilitician) - Weights.gg Model', 'Vald600', 'CharlesAznavour', 'JUL_Interview', 'LaFeve', 'Philippe Etchebest', 'Nekfeu250', 'Nekfeu - Weights.gg Model', 'SCH1000', 'NicolasSarkozy_v2_500e', 'Maes_600', 'Laylow - Weights.gg Model', 'KAARIS', 'ClaudeFrancoisV2', 'Josman', 'SoLaLune', 'JohnnyHallyday800', 'Titeuf600', 'Kylian-Mbapp√©', 'Lacrim', 'SCH Interview', 'OrelsanV1', 'Booba', 'kaarism', 'Ademo', 'rick', 'Bassem', 'Wejdene_310Epochs', 'Laylow1000', 'EricZemmour', 'FreezeCorleone', 'macron', 'gazo700', 'Mickey Mouse', 'Angele', 'AlphaWann', 'Eric Cartman', 'hamzaai500v2', 'homerSimpson']
2025-01-31 15:23:13,932 - INFO - 127.0.0.1 - - [31/Jan/2025 15:23:13] "GET / HTTP/1.1" 200 -
2025-01-31 15:23:14,061 - INFO - 127.0.0.1 - - [31/Jan/2025 15:23:14] "[33mGET /favicon.ico HTTP/1.1[0m" 404 -
2025-01-31 15:23:41,364 - INFO - Retrieved models: ['Ninho', 'Damso', 'Marine Lepen (French pilitician) - Weights.gg Model', 'Vald600', 'CharlesAznavour', 'JUL_Interview', 'LaFeve', 'Philippe Etchebest', 'Nekfeu250', 'Nekfeu - Weights.gg Model', 'SCH1000', 'NicolasSarkozy_v2_500e', 'Maes_600', 'Laylow - Weights.gg Model', 'KAARIS', 'ClaudeFrancoisV2', 'Josman', 'SoLaLune', 'JohnnyHallyday800', 'Titeuf600', 'Kylian-Mbapp√©', 'Lacrim', 'SCH Interview', 'OrelsanV1', 'Booba', 'kaarism', 'Ademo', 'rick', 'Bassem', 'Wejdene_310Epochs', 'Laylow1000', 'EricZemmour', 'FreezeCorleone', 'macron', 'gazo700', 'Mickey Mouse', 'Angele', 'AlphaWann', 'Eric Cartman', 'hamzaai500v2', 'homerSimpson']
2025-01-31 15:23:41,367 - INFO - Received YouTube URL for processing: https://www.youtube.com/watch?v=361GUUBHH5Y&list=RD361GUUBHH5Y&start_radio=1
2025-01-31 15:23:41,368 - DEBUG - matched regex search: (?:v=|\/)([0-9A-Za-z_-]{11}).*
2025-01-31 15:23:41,490 - ERROR - An error occurred during processing
Traceback (most recent call last):
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/pytubefix/__main__.py", line 758, in title
    if 'title' in self.vid_info['videoDetails']:
KeyError: 'videoDetails'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/strain/deepVoice/Applio/server.py", line 76, in home
    input_path = youtube_to_wav(youtube_url)
  File "/home/strain/deepVoice/Applio/youtube.py", line 11, in youtube_to_wav
    title = yt.title
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/pytubefix/__main__.py", line 794, in title
    self.check_availability()
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/pytubefix/__main__.py", line 396, in check_availability
    raise exceptions.BotDetection(video_id=self.video_id)
pytubefix.exceptions.BotDetection: 361GUUBHH5Y This request was detected as a bot. Use `use_po_token=True` or switch to WEB client to view. See more details at https://github.com/JuanBindez/pytubefix/pull/209
2025-01-31 15:23:41,493 - INFO - 127.0.0.1 - - [31/Jan/2025 15:23:41] "POST / HTTP/1.1" 200 -
2025-01-31 15:25:03,114 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2025-01-31 15:25:03,114 - INFO - [33mPress CTRL+C to quit[0m
2025-01-31 15:25:03,115 - INFO -  * Restarting with stat
2025-01-31 15:25:04,912 - WARNING -  * Debugger is active!
2025-01-31 15:25:04,912 - INFO -  * Debugger PIN: 142-961-790
2025-01-31 15:25:16,134 - INFO - Retrieved models: ['Ninho', 'Damso', 'Marine Lepen (French pilitician) - Weights.gg Model', 'Vald600', 'CharlesAznavour', 'JUL_Interview', 'LaFeve', 'Philippe Etchebest', 'Nekfeu250', 'Nekfeu - Weights.gg Model', 'SCH1000', 'NicolasSarkozy_v2_500e', 'Maes_600', 'Laylow - Weights.gg Model', 'KAARIS', 'ClaudeFrancoisV2', 'Josman', 'SoLaLune', 'JohnnyHallyday800', 'Titeuf600', 'Kylian-Mbapp√©', 'Lacrim', 'SCH Interview', 'OrelsanV1', 'Booba', 'kaarism', 'Ademo', 'rick', 'Bassem', 'Wejdene_310Epochs', 'Laylow1000', 'EricZemmour', 'FreezeCorleone', 'macron', 'gazo700', 'Mickey Mouse', 'Angele', 'AlphaWann', 'Eric Cartman', 'hamzaai500v2', 'homerSimpson']
2025-01-31 15:25:16,141 - INFO - 127.0.0.1 - - [31/Jan/2025 15:25:16] "GET / HTTP/1.1" 200 -
2025-01-31 15:25:20,936 - INFO - Retrieved models: ['Ninho', 'Damso', 'Marine Lepen (French pilitician) - Weights.gg Model', 'Vald600', 'CharlesAznavour', 'JUL_Interview', 'LaFeve', 'Philippe Etchebest', 'Nekfeu250', 'Nekfeu - Weights.gg Model', 'SCH1000', 'NicolasSarkozy_v2_500e', 'Maes_600', 'Laylow - Weights.gg Model', 'KAARIS', 'ClaudeFrancoisV2', 'Josman', 'SoLaLune', 'JohnnyHallyday800', 'Titeuf600', 'Kylian-Mbapp√©', 'Lacrim', 'SCH Interview', 'OrelsanV1', 'Booba', 'kaarism', 'Ademo', 'rick', 'Bassem', 'Wejdene_310Epochs', 'Laylow1000', 'EricZemmour', 'FreezeCorleone', 'macron', 'gazo700', 'Mickey Mouse', 'Angele', 'AlphaWann', 'Eric Cartman', 'hamzaai500v2', 'homerSimpson']
2025-01-31 15:25:20,939 - INFO - Received YouTube URL for processing: https://www.youtube.com/watch?v=361GUUBHH5Y&list=RD361GUUBHH5Y&start_radio=1
2025-01-31 15:25:20,940 - DEBUG - matched regex search: (?:v=|\/)([0-9A-Za-z_-]{11}).*
2025-01-31 15:25:23,601 - DEBUG - finding initial function name
2025-01-31 15:25:23,606 - DEBUG - Pattern failed: ytplayer\.config\s*=\s*
2025-01-31 15:25:23,606 - DEBUG - Could not parse object.
2025-01-31 15:25:23,636 - DEBUG - finished regex search, matched: (/s/player/[\w\d]+/[\w\d_/.]+/base\.js)
2025-01-31 15:25:27,009 - DEBUG - matched regex search: signatureTimestamp:(\d*)
2025-01-31 15:25:27,009 - DEBUG - The WEB client requires poToken to obtain functional streams
2025-01-31 15:25:27,009 - DEBUG - Automatically generating poToken
2025-01-31 15:25:27,010 - DEBUG - Looking for visitorData in initial_data
2025-01-31 15:25:27,119 - DEBUG - matched regex search: visitor_data[',\"\s]+value['\"]:\s?['\"]([a-zA-Z0-9_%-]+)['\"]
2025-01-31 15:25:27,120 - DEBUG - VisitorData obtained successfully
2025-01-31 15:25:27,120 - DEBUG - Invoking botGuard
2025-01-31 15:25:27,841 - DEBUG - PoToken generated successfully
2025-01-31 15:25:30,105 - DEBUG - Found title in vid_info
2025-01-31 15:25:30,106 - DEBUG - applying descrambler
2025-01-31 15:25:30,106 - DEBUG - Applying poToken
2025-01-31 15:25:30,111 - DEBUG - finding initial function name
2025-01-31 15:25:30,166 - DEBUG - finished regex search, matched: (?P<sig>[a-zA-Z0-9_$]+)\s*=\s*function\(\s*(?P<arg>[a-zA-Z0-9_$]+)\s*\)\s*{\s*(?P=arg)\s*=\s*(?P=arg)\.split\(\s*""\s*\)\s*;\s*[^}]+;\s*return\s+(?P=arg)\.join\(\s*""\s*\)
2025-01-31 15:25:30,166 - DEBUG - Signature cipher function name: WdC
2025-01-31 15:25:30,166 - DEBUG - Finding throttling function name
2025-01-31 15:25:30,235 - DEBUG - finished regex search, matched: (?x)
            (?:
                \.get\("n"\)\)&&\(b=|
                (?:
                    b=String\.fromCharCode\(110\)|
                    (?P<str_idx>[a-zA-Z0-9_$.]+)&&\(b="nn"\[\+(?P=str_idx)\]
                )
                (?:
                    ,[a-zA-Z0-9_$]+\(a\))?,c=a\.
                    (?:
                        get\(b\)|
                        [a-zA-Z0-9_$]+\[b\]\|\|null
                    )\)&&\(c=|
                \b(?P<var>[a-zA-Z0-9_$]+)=
            )(?P<nfunc>[a-zA-Z0-9_$]+)(?:\[(?P<idx>\d+)\])?\([a-zA-Z]\)
            (?(var),[a-zA-Z0-9_$]+\.set\((?:"n+"|[a-zA-Z0-9_$]+)\,(?P=var)\))
2025-01-31 15:25:30,236 - DEBUG - func is: Vl_
2025-01-31 15:25:30,236 - DEBUG - idx is: 0
2025-01-31 15:25:30,236 - DEBUG - Checking throttling function name
2025-01-31 15:25:30,237 - DEBUG - Throttling function name is: lde
2025-01-31 15:25:30,285 - DEBUG - finished descrambling signature for itag=18
2025-01-31 15:25:30,285 - DEBUG - Parameter n is: qgrvtdGHTJKtLsZh9nS
2025-01-31 15:25:30,880 - DEBUG - Parameter n deciphered: n_KOzExSujIDpw
2025-01-31 15:25:30,902 - DEBUG - finished descrambling signature for itag=137
2025-01-31 15:25:30,902 - DEBUG - Parameter n is: 6dfJoJKDyRERym2uTvQ
2025-01-31 15:25:31,482 - DEBUG - Parameter n deciphered: 2-m6UlAOHTqdAg
2025-01-31 15:25:31,504 - DEBUG - finished descrambling signature for itag=248
2025-01-31 15:25:31,504 - DEBUG - Parameter n is: 6dfJoJKDyRERym2uTvQ
2025-01-31 15:25:31,504 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:25:31,504 - DEBUG - Parameter n deciphered: 2-m6UlAOHTqdAg
2025-01-31 15:25:31,526 - DEBUG - finished descrambling signature for itag=399
2025-01-31 15:25:31,526 - DEBUG - Parameter n is: 6dfJoJKDyRERym2uTvQ
2025-01-31 15:25:31,526 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:25:31,526 - DEBUG - Parameter n deciphered: 2-m6UlAOHTqdAg
2025-01-31 15:25:31,548 - DEBUG - finished descrambling signature for itag=136
2025-01-31 15:25:31,548 - DEBUG - Parameter n is: 6dfJoJKDyRERym2uTvQ
2025-01-31 15:25:31,548 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:25:31,548 - DEBUG - Parameter n deciphered: 2-m6UlAOHTqdAg
2025-01-31 15:25:31,570 - DEBUG - finished descrambling signature for itag=247
2025-01-31 15:25:31,570 - DEBUG - Parameter n is: 6dfJoJKDyRERym2uTvQ
2025-01-31 15:25:31,570 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:25:31,570 - DEBUG - Parameter n deciphered: 2-m6UlAOHTqdAg
2025-01-31 15:25:31,592 - DEBUG - finished descrambling signature for itag=398
2025-01-31 15:25:31,592 - DEBUG - Parameter n is: 6dfJoJKDyRERym2uTvQ
2025-01-31 15:25:31,592 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:25:31,592 - DEBUG - Parameter n deciphered: 2-m6UlAOHTqdAg
2025-01-31 15:25:31,614 - DEBUG - finished descrambling signature for itag=135
2025-01-31 15:25:31,614 - DEBUG - Parameter n is: 6dfJoJKDyRERym2uTvQ
2025-01-31 15:25:31,614 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:25:31,614 - DEBUG - Parameter n deciphered: 2-m6UlAOHTqdAg
2025-01-31 15:25:31,636 - DEBUG - finished descrambling signature for itag=244
2025-01-31 15:25:31,636 - DEBUG - Parameter n is: 6dfJoJKDyRERym2uTvQ
2025-01-31 15:25:31,636 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:25:31,636 - DEBUG - Parameter n deciphered: 2-m6UlAOHTqdAg
2025-01-31 15:25:31,658 - DEBUG - finished descrambling signature for itag=397
2025-01-31 15:25:31,658 - DEBUG - Parameter n is: 6dfJoJKDyRERym2uTvQ
2025-01-31 15:25:31,658 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:25:31,658 - DEBUG - Parameter n deciphered: 2-m6UlAOHTqdAg
2025-01-31 15:25:31,680 - DEBUG - finished descrambling signature for itag=134
2025-01-31 15:25:31,680 - DEBUG - Parameter n is: 6dfJoJKDyRERym2uTvQ
2025-01-31 15:25:31,680 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:25:31,680 - DEBUG - Parameter n deciphered: 2-m6UlAOHTqdAg
2025-01-31 15:25:31,702 - DEBUG - finished descrambling signature for itag=243
2025-01-31 15:25:31,702 - DEBUG - Parameter n is: 6dfJoJKDyRERym2uTvQ
2025-01-31 15:25:31,702 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:25:31,702 - DEBUG - Parameter n deciphered: 2-m6UlAOHTqdAg
2025-01-31 15:25:31,724 - DEBUG - finished descrambling signature for itag=396
2025-01-31 15:25:31,724 - DEBUG - Parameter n is: 6dfJoJKDyRERym2uTvQ
2025-01-31 15:25:31,724 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:25:31,724 - DEBUG - Parameter n deciphered: 2-m6UlAOHTqdAg
2025-01-31 15:25:31,746 - DEBUG - finished descrambling signature for itag=133
2025-01-31 15:25:31,746 - DEBUG - Parameter n is: 6dfJoJKDyRERym2uTvQ
2025-01-31 15:25:31,746 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:25:31,746 - DEBUG - Parameter n deciphered: 2-m6UlAOHTqdAg
2025-01-31 15:25:31,768 - DEBUG - finished descrambling signature for itag=242
2025-01-31 15:25:31,768 - DEBUG - Parameter n is: 6dfJoJKDyRERym2uTvQ
2025-01-31 15:25:31,768 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:25:31,768 - DEBUG - Parameter n deciphered: 2-m6UlAOHTqdAg
2025-01-31 15:25:31,790 - DEBUG - finished descrambling signature for itag=395
2025-01-31 15:25:31,790 - DEBUG - Parameter n is: 6dfJoJKDyRERym2uTvQ
2025-01-31 15:25:31,790 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:25:31,790 - DEBUG - Parameter n deciphered: 2-m6UlAOHTqdAg
2025-01-31 15:25:31,812 - DEBUG - finished descrambling signature for itag=160
2025-01-31 15:25:31,812 - DEBUG - Parameter n is: 6dfJoJKDyRERym2uTvQ
2025-01-31 15:25:31,812 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:25:31,812 - DEBUG - Parameter n deciphered: 2-m6UlAOHTqdAg
2025-01-31 15:25:31,834 - DEBUG - finished descrambling signature for itag=278
2025-01-31 15:25:31,834 - DEBUG - Parameter n is: 6dfJoJKDyRERym2uTvQ
2025-01-31 15:25:31,834 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:25:31,834 - DEBUG - Parameter n deciphered: 2-m6UlAOHTqdAg
2025-01-31 15:25:31,855 - DEBUG - finished descrambling signature for itag=394
2025-01-31 15:25:31,856 - DEBUG - Parameter n is: 6dfJoJKDyRERym2uTvQ
2025-01-31 15:25:31,856 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:25:31,856 - DEBUG - Parameter n deciphered: 2-m6UlAOHTqdAg
2025-01-31 15:25:31,877 - DEBUG - finished descrambling signature for itag=140
2025-01-31 15:25:31,878 - DEBUG - Parameter n is: 6dfJoJKDyRERym2uTvQ
2025-01-31 15:25:31,878 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:25:31,878 - DEBUG - Parameter n deciphered: 2-m6UlAOHTqdAg
2025-01-31 15:25:31,899 - DEBUG - finished descrambling signature for itag=249
2025-01-31 15:25:31,899 - DEBUG - Parameter n is: 6dfJoJKDyRERym2uTvQ
2025-01-31 15:25:31,900 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:25:31,900 - DEBUG - Parameter n deciphered: 2-m6UlAOHTqdAg
2025-01-31 15:25:31,921 - DEBUG - finished descrambling signature for itag=250
2025-01-31 15:25:31,921 - DEBUG - Parameter n is: 6dfJoJKDyRERym2uTvQ
2025-01-31 15:25:31,921 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:25:31,921 - DEBUG - Parameter n deciphered: 2-m6UlAOHTqdAg
2025-01-31 15:25:31,943 - DEBUG - finished descrambling signature for itag=251
2025-01-31 15:25:31,943 - DEBUG - Parameter n is: 6dfJoJKDyRERym2uTvQ
2025-01-31 15:25:31,943 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:25:31,943 - DEBUG - Parameter n deciphered: 2-m6UlAOHTqdAg
2025-01-31 15:25:31,944 - DEBUG - downloading (3048795 total bytes) file to /home/strain/deepVoice/Applio/temp_audio
2025-01-31 15:25:32,226 - DEBUG - download remaining: 0
2025-01-31 15:25:32,229 - DEBUG - download finished
2025-01-31 15:25:32,327 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', '/home/strain/deepVoice/Applio/temp_audio', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-31 15:25:32,668 - ERROR - An error occurred during processing
Traceback (most recent call last):
  File "/home/strain/deepVoice/Applio/server.py", line 76, in home
    input_path = youtube_to_wav(youtube_url)
  File "/home/strain/deepVoice/Applio/youtube.py", line 19, in youtube_to_wav
    audio.export(output_path, format="wav")
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/pydub/audio_segment.py", line 867, in export
    out_f, _ = _fd_or_path_or_tempfile(out_f, 'wb+')
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/pydub/utils.py", line 60, in _fd_or_path_or_tempfile
    fd = open(fd, mode=mode)
FileNotFoundError: [Errno 2] No such file or directory: 'yt_audios/Alpha Wann x Nujabes - √áA VA ENSEMBLE II (remix)'
2025-01-31 15:25:32,673 - INFO - 127.0.0.1 - - [31/Jan/2025 15:25:32] "POST / HTTP/1.1" 200 -
2025-01-31 15:26:18,564 - INFO -  * Detected change in '/home/strain/deepVoice/Applio/youtube.py', reloading
2025-01-31 15:26:18,888 - INFO -  * Restarting with stat
2025-01-31 15:26:20,684 - WARNING -  * Debugger is active!
2025-01-31 15:26:20,684 - INFO -  * Debugger PIN: 142-961-790
2025-01-31 15:26:24,091 - INFO - Retrieved models: ['Ninho', 'Damso', 'Marine Lepen (French pilitician) - Weights.gg Model', 'Vald600', 'CharlesAznavour', 'JUL_Interview', 'LaFeve', 'Philippe Etchebest', 'Nekfeu250', 'Nekfeu - Weights.gg Model', 'SCH1000', 'NicolasSarkozy_v2_500e', 'Maes_600', 'Laylow - Weights.gg Model', 'KAARIS', 'ClaudeFrancoisV2', 'Josman', 'SoLaLune', 'JohnnyHallyday800', 'Titeuf600', 'Kylian-Mbapp√©', 'Lacrim', 'SCH Interview', 'OrelsanV1', 'Booba', 'kaarism', 'Ademo', 'rick', 'Bassem', 'Wejdene_310Epochs', 'Laylow1000', 'EricZemmour', 'FreezeCorleone', 'macron', 'gazo700', 'Mickey Mouse', 'Angele', 'AlphaWann', 'Eric Cartman', 'hamzaai500v2', 'homerSimpson']
2025-01-31 15:26:24,091 - INFO - Received YouTube URL for processing: https://www.youtube.com/watch?v=361GUUBHH5Y&list=RD361GUUBHH5Y&start_radio=1
2025-01-31 15:26:24,092 - DEBUG - matched regex search: (?:v=|\/)([0-9A-Za-z_-]{11}).*
2025-01-31 15:26:24,955 - DEBUG - finding initial function name
2025-01-31 15:26:24,960 - DEBUG - Pattern failed: ytplayer\.config\s*=\s*
2025-01-31 15:26:24,960 - DEBUG - Could not parse object.
2025-01-31 15:26:24,992 - DEBUG - finished regex search, matched: (/s/player/[\w\d]+/[\w\d_/.]+/base\.js)
2025-01-31 15:26:25,611 - DEBUG - matched regex search: signatureTimestamp:(\d*)
2025-01-31 15:26:25,612 - DEBUG - The WEB client requires poToken to obtain functional streams
2025-01-31 15:26:25,612 - DEBUG - Automatically generating poToken
2025-01-31 15:26:25,612 - DEBUG - Looking for visitorData in initial_data
2025-01-31 15:26:25,722 - DEBUG - matched regex search: visitor_data[',\"\s]+value['\"]:\s?['\"]([a-zA-Z0-9_%-]+)['\"]
2025-01-31 15:26:25,722 - DEBUG - VisitorData obtained successfully
2025-01-31 15:26:25,722 - DEBUG - Invoking botGuard
2025-01-31 15:26:26,415 - DEBUG - PoToken generated successfully
2025-01-31 15:26:26,764 - DEBUG - Found title in vid_info
2025-01-31 15:26:26,770 - DEBUG - applying descrambler
2025-01-31 15:26:26,770 - DEBUG - Applying poToken
2025-01-31 15:26:26,789 - DEBUG - finding initial function name
2025-01-31 15:26:26,853 - DEBUG - finished regex search, matched: (?P<sig>[a-zA-Z0-9_$]+)\s*=\s*function\(\s*(?P<arg>[a-zA-Z0-9_$]+)\s*\)\s*{\s*(?P=arg)\s*=\s*(?P=arg)\.split\(\s*""\s*\)\s*;\s*[^}]+;\s*return\s+(?P=arg)\.join\(\s*""\s*\)
2025-01-31 15:26:26,853 - DEBUG - Signature cipher function name: ouU
2025-01-31 15:26:26,853 - DEBUG - Finding throttling function name
2025-01-31 15:26:26,922 - DEBUG - finished regex search, matched: (?x)
            (?:
                \.get\("n"\)\)&&\(b=|
                (?:
                    b=String\.fromCharCode\(110\)|
                    (?P<str_idx>[a-zA-Z0-9_$.]+)&&\(b="nn"\[\+(?P=str_idx)\]
                )
                (?:
                    ,[a-zA-Z0-9_$]+\(a\))?,c=a\.
                    (?:
                        get\(b\)|
                        [a-zA-Z0-9_$]+\[b\]\|\|null
                    )\)&&\(c=|
                \b(?P<var>[a-zA-Z0-9_$]+)=
            )(?P<nfunc>[a-zA-Z0-9_$]+)(?:\[(?P<idx>\d+)\])?\([a-zA-Z]\)
            (?(var),[a-zA-Z0-9_$]+\.set\((?:"n+"|[a-zA-Z0-9_$]+)\,(?P=var)\))
2025-01-31 15:26:26,922 - DEBUG - func is: b_N
2025-01-31 15:26:26,922 - DEBUG - idx is: 0
2025-01-31 15:26:26,922 - DEBUG - Checking throttling function name
2025-01-31 15:26:26,924 - DEBUG - Throttling function name is: xyN
2025-01-31 15:26:26,968 - DEBUG - finished descrambling signature for itag=18
2025-01-31 15:26:26,968 - DEBUG - Parameter n is: N8yZpSXNKC7EJwqx0
2025-01-31 15:26:27,476 - DEBUG - Parameter n deciphered: n1jzg1tLWpemWg
2025-01-31 15:26:27,495 - DEBUG - finished descrambling signature for itag=137
2025-01-31 15:26:27,495 - DEBUG - Parameter n is: AQi4i8IOL-r6zeiCS
2025-01-31 15:26:27,987 - DEBUG - Parameter n deciphered: FH78xBLWefYF9Q
2025-01-31 15:26:28,006 - DEBUG - finished descrambling signature for itag=248
2025-01-31 15:26:28,006 - DEBUG - Parameter n is: AQi4i8IOL-r6zeiCS
2025-01-31 15:26:28,006 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:26:28,007 - DEBUG - Parameter n deciphered: FH78xBLWefYF9Q
2025-01-31 15:26:28,026 - DEBUG - finished descrambling signature for itag=399
2025-01-31 15:26:28,026 - DEBUG - Parameter n is: AQi4i8IOL-r6zeiCS
2025-01-31 15:26:28,026 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:26:28,026 - DEBUG - Parameter n deciphered: FH78xBLWefYF9Q
2025-01-31 15:26:28,045 - DEBUG - finished descrambling signature for itag=136
2025-01-31 15:26:28,045 - DEBUG - Parameter n is: AQi4i8IOL-r6zeiCS
2025-01-31 15:26:28,045 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:26:28,045 - DEBUG - Parameter n deciphered: FH78xBLWefYF9Q
2025-01-31 15:26:28,064 - DEBUG - finished descrambling signature for itag=247
2025-01-31 15:26:28,064 - DEBUG - Parameter n is: AQi4i8IOL-r6zeiCS
2025-01-31 15:26:28,064 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:26:28,065 - DEBUG - Parameter n deciphered: FH78xBLWefYF9Q
2025-01-31 15:26:28,084 - DEBUG - finished descrambling signature for itag=398
2025-01-31 15:26:28,084 - DEBUG - Parameter n is: AQi4i8IOL-r6zeiCS
2025-01-31 15:26:28,084 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:26:28,084 - DEBUG - Parameter n deciphered: FH78xBLWefYF9Q
2025-01-31 15:26:28,103 - DEBUG - finished descrambling signature for itag=135
2025-01-31 15:26:28,103 - DEBUG - Parameter n is: AQi4i8IOL-r6zeiCS
2025-01-31 15:26:28,103 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:26:28,103 - DEBUG - Parameter n deciphered: FH78xBLWefYF9Q
2025-01-31 15:26:28,122 - DEBUG - finished descrambling signature for itag=244
2025-01-31 15:26:28,122 - DEBUG - Parameter n is: AQi4i8IOL-r6zeiCS
2025-01-31 15:26:28,122 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:26:28,123 - DEBUG - Parameter n deciphered: FH78xBLWefYF9Q
2025-01-31 15:26:28,142 - DEBUG - finished descrambling signature for itag=397
2025-01-31 15:26:28,142 - DEBUG - Parameter n is: AQi4i8IOL-r6zeiCS
2025-01-31 15:26:28,142 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:26:28,142 - DEBUG - Parameter n deciphered: FH78xBLWefYF9Q
2025-01-31 15:26:28,161 - DEBUG - finished descrambling signature for itag=134
2025-01-31 15:26:28,161 - DEBUG - Parameter n is: AQi4i8IOL-r6zeiCS
2025-01-31 15:26:28,161 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:26:28,161 - DEBUG - Parameter n deciphered: FH78xBLWefYF9Q
2025-01-31 15:26:28,180 - DEBUG - finished descrambling signature for itag=243
2025-01-31 15:26:28,180 - DEBUG - Parameter n is: AQi4i8IOL-r6zeiCS
2025-01-31 15:26:28,180 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:26:28,180 - DEBUG - Parameter n deciphered: FH78xBLWefYF9Q
2025-01-31 15:26:28,200 - DEBUG - finished descrambling signature for itag=396
2025-01-31 15:26:28,200 - DEBUG - Parameter n is: AQi4i8IOL-r6zeiCS
2025-01-31 15:26:28,200 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:26:28,200 - DEBUG - Parameter n deciphered: FH78xBLWefYF9Q
2025-01-31 15:26:28,219 - DEBUG - finished descrambling signature for itag=133
2025-01-31 15:26:28,219 - DEBUG - Parameter n is: AQi4i8IOL-r6zeiCS
2025-01-31 15:26:28,219 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:26:28,219 - DEBUG - Parameter n deciphered: FH78xBLWefYF9Q
2025-01-31 15:26:28,238 - DEBUG - finished descrambling signature for itag=242
2025-01-31 15:26:28,238 - DEBUG - Parameter n is: AQi4i8IOL-r6zeiCS
2025-01-31 15:26:28,238 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:26:28,238 - DEBUG - Parameter n deciphered: FH78xBLWefYF9Q
2025-01-31 15:26:28,257 - DEBUG - finished descrambling signature for itag=395
2025-01-31 15:26:28,258 - DEBUG - Parameter n is: AQi4i8IOL-r6zeiCS
2025-01-31 15:26:28,258 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:26:28,258 - DEBUG - Parameter n deciphered: FH78xBLWefYF9Q
2025-01-31 15:26:28,276 - DEBUG - finished descrambling signature for itag=160
2025-01-31 15:26:28,276 - DEBUG - Parameter n is: AQi4i8IOL-r6zeiCS
2025-01-31 15:26:28,276 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:26:28,276 - DEBUG - Parameter n deciphered: FH78xBLWefYF9Q
2025-01-31 15:26:28,295 - DEBUG - finished descrambling signature for itag=278
2025-01-31 15:26:28,295 - DEBUG - Parameter n is: AQi4i8IOL-r6zeiCS
2025-01-31 15:26:28,295 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:26:28,295 - DEBUG - Parameter n deciphered: FH78xBLWefYF9Q
2025-01-31 15:26:28,314 - DEBUG - finished descrambling signature for itag=394
2025-01-31 15:26:28,314 - DEBUG - Parameter n is: AQi4i8IOL-r6zeiCS
2025-01-31 15:26:28,314 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:26:28,314 - DEBUG - Parameter n deciphered: FH78xBLWefYF9Q
2025-01-31 15:26:28,333 - DEBUG - finished descrambling signature for itag=140
2025-01-31 15:26:28,333 - DEBUG - Parameter n is: AQi4i8IOL-r6zeiCS
2025-01-31 15:26:28,333 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:26:28,333 - DEBUG - Parameter n deciphered: FH78xBLWefYF9Q
2025-01-31 15:26:28,352 - DEBUG - finished descrambling signature for itag=249
2025-01-31 15:26:28,352 - DEBUG - Parameter n is: AQi4i8IOL-r6zeiCS
2025-01-31 15:26:28,352 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:26:28,352 - DEBUG - Parameter n deciphered: FH78xBLWefYF9Q
2025-01-31 15:26:28,370 - DEBUG - finished descrambling signature for itag=250
2025-01-31 15:26:28,370 - DEBUG - Parameter n is: AQi4i8IOL-r6zeiCS
2025-01-31 15:26:28,370 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:26:28,371 - DEBUG - Parameter n deciphered: FH78xBLWefYF9Q
2025-01-31 15:26:28,389 - DEBUG - finished descrambling signature for itag=251
2025-01-31 15:26:28,389 - DEBUG - Parameter n is: AQi4i8IOL-r6zeiCS
2025-01-31 15:26:28,389 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:26:28,389 - DEBUG - Parameter n deciphered: FH78xBLWefYF9Q
2025-01-31 15:26:28,390 - DEBUG - downloading (3048795 total bytes) file to /home/strain/deepVoice/Applio/temp_audio
2025-01-31 15:26:28,390 - ERROR - An error occurred during processing
Traceback (most recent call last):
  File "/home/strain/deepVoice/Applio/server.py", line 76, in home
    input_path = youtube_to_wav(youtube_url)
  File "/home/strain/deepVoice/Applio/youtube.py", line 13, in youtube_to_wav
    audio_file = stream.download(filename="temp_audio")
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/pytubefix/streams.py", line 364, in download
    with open(file_path, "wb") as fh:
IsADirectoryError: [Errno 21] Is a directory: '/home/strain/deepVoice/Applio/temp_audio'
2025-01-31 15:26:28,395 - INFO - 127.0.0.1 - - [31/Jan/2025 15:26:28] "POST / HTTP/1.1" 200 -
2025-01-31 15:26:51,688 - INFO -  * Detected change in '/home/strain/deepVoice/Applio/youtube.py', reloading
2025-01-31 15:26:51,998 - INFO -  * Restarting with stat
2025-01-31 15:26:53,794 - WARNING -  * Debugger is active!
2025-01-31 15:26:53,795 - INFO -  * Debugger PIN: 142-961-790
2025-01-31 15:27:08,290 - INFO - Retrieved models: ['Ninho', 'Damso', 'Marine Lepen (French pilitician) - Weights.gg Model', 'Vald600', 'CharlesAznavour', 'JUL_Interview', 'LaFeve', 'Philippe Etchebest', 'Nekfeu250', 'Nekfeu - Weights.gg Model', 'SCH1000', 'NicolasSarkozy_v2_500e', 'Maes_600', 'Laylow - Weights.gg Model', 'KAARIS', 'ClaudeFrancoisV2', 'Josman', 'SoLaLune', 'JohnnyHallyday800', 'Titeuf600', 'Kylian-Mbapp√©', 'Lacrim', 'SCH Interview', 'OrelsanV1', 'Booba', 'kaarism', 'Ademo', 'rick', 'Bassem', 'Wejdene_310Epochs', 'Laylow1000', 'EricZemmour', 'FreezeCorleone', 'macron', 'gazo700', 'Mickey Mouse', 'Angele', 'AlphaWann', 'Eric Cartman', 'hamzaai500v2', 'homerSimpson']
2025-01-31 15:27:08,292 - INFO - Received YouTube URL for processing: https://www.youtube.com/watch?v=361GUUBHH5Y&list=RD361GUUBHH5Y&start_radio=1
2025-01-31 15:27:08,293 - DEBUG - matched regex search: (?:v=|\/)([0-9A-Za-z_-]{11}).*
2025-01-31 15:27:09,167 - DEBUG - finding initial function name
2025-01-31 15:27:09,169 - DEBUG - Pattern failed: ytplayer\.config\s*=\s*
2025-01-31 15:27:09,169 - DEBUG - Could not parse object.
2025-01-31 15:27:09,192 - DEBUG - finished regex search, matched: (/s/player/[\w\d]+/[\w\d_/.]+/base\.js)
2025-01-31 15:27:10,051 - DEBUG - matched regex search: signatureTimestamp:(\d*)
2025-01-31 15:27:10,051 - DEBUG - The WEB client requires poToken to obtain functional streams
2025-01-31 15:27:10,051 - DEBUG - Automatically generating poToken
2025-01-31 15:27:10,051 - DEBUG - Looking for visitorData in initial_data
2025-01-31 15:27:10,129 - DEBUG - matched regex search: visitor_data[',\"\s]+value['\"]:\s?['\"]([a-zA-Z0-9_%-]+)['\"]
2025-01-31 15:27:10,129 - DEBUG - VisitorData obtained successfully
2025-01-31 15:27:10,129 - DEBUG - Invoking botGuard
2025-01-31 15:27:10,843 - DEBUG - PoToken generated successfully
2025-01-31 15:27:11,179 - DEBUG - Found title in vid_info
2025-01-31 15:27:11,185 - DEBUG - applying descrambler
2025-01-31 15:27:11,185 - DEBUG - Applying poToken
2025-01-31 15:27:11,203 - DEBUG - finding initial function name
2025-01-31 15:27:11,268 - DEBUG - finished regex search, matched: (?P<sig>[a-zA-Z0-9_$]+)\s*=\s*function\(\s*(?P<arg>[a-zA-Z0-9_$]+)\s*\)\s*{\s*(?P=arg)\s*=\s*(?P=arg)\.split\(\s*""\s*\)\s*;\s*[^}]+;\s*return\s+(?P=arg)\.join\(\s*""\s*\)
2025-01-31 15:27:11,268 - DEBUG - Signature cipher function name: ouU
2025-01-31 15:27:11,268 - DEBUG - Finding throttling function name
2025-01-31 15:27:11,337 - DEBUG - finished regex search, matched: (?x)
            (?:
                \.get\("n"\)\)&&\(b=|
                (?:
                    b=String\.fromCharCode\(110\)|
                    (?P<str_idx>[a-zA-Z0-9_$.]+)&&\(b="nn"\[\+(?P=str_idx)\]
                )
                (?:
                    ,[a-zA-Z0-9_$]+\(a\))?,c=a\.
                    (?:
                        get\(b\)|
                        [a-zA-Z0-9_$]+\[b\]\|\|null
                    )\)&&\(c=|
                \b(?P<var>[a-zA-Z0-9_$]+)=
            )(?P<nfunc>[a-zA-Z0-9_$]+)(?:\[(?P<idx>\d+)\])?\([a-zA-Z]\)
            (?(var),[a-zA-Z0-9_$]+\.set\((?:"n+"|[a-zA-Z0-9_$]+)\,(?P=var)\))
2025-01-31 15:27:11,337 - DEBUG - func is: b_N
2025-01-31 15:27:11,337 - DEBUG - idx is: 0
2025-01-31 15:27:11,337 - DEBUG - Checking throttling function name
2025-01-31 15:27:11,339 - DEBUG - Throttling function name is: xyN
2025-01-31 15:27:11,383 - DEBUG - finished descrambling signature for itag=18
2025-01-31 15:27:11,383 - DEBUG - Parameter n is: 89F8tBo4Dj76jnqOm
2025-01-31 15:27:11,884 - DEBUG - Parameter n deciphered: 3bbD9SlxW_5lBg
2025-01-31 15:27:11,903 - DEBUG - finished descrambling signature for itag=137
2025-01-31 15:27:11,903 - DEBUG - Parameter n is: -rAukmj21iR87XIlq
2025-01-31 15:27:12,392 - DEBUG - Parameter n deciphered: cbFGtXM3EPFekQ
2025-01-31 15:27:12,411 - DEBUG - finished descrambling signature for itag=248
2025-01-31 15:27:12,411 - DEBUG - Parameter n is: -rAukmj21iR87XIlq
2025-01-31 15:27:12,411 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:27:12,411 - DEBUG - Parameter n deciphered: cbFGtXM3EPFekQ
2025-01-31 15:27:12,430 - DEBUG - finished descrambling signature for itag=399
2025-01-31 15:27:12,430 - DEBUG - Parameter n is: -rAukmj21iR87XIlq
2025-01-31 15:27:12,430 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:27:12,430 - DEBUG - Parameter n deciphered: cbFGtXM3EPFekQ
2025-01-31 15:27:12,449 - DEBUG - finished descrambling signature for itag=136
2025-01-31 15:27:12,449 - DEBUG - Parameter n is: -rAukmj21iR87XIlq
2025-01-31 15:27:12,449 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:27:12,449 - DEBUG - Parameter n deciphered: cbFGtXM3EPFekQ
2025-01-31 15:27:12,467 - DEBUG - finished descrambling signature for itag=247
2025-01-31 15:27:12,467 - DEBUG - Parameter n is: -rAukmj21iR87XIlq
2025-01-31 15:27:12,467 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:27:12,468 - DEBUG - Parameter n deciphered: cbFGtXM3EPFekQ
2025-01-31 15:27:12,486 - DEBUG - finished descrambling signature for itag=398
2025-01-31 15:27:12,486 - DEBUG - Parameter n is: -rAukmj21iR87XIlq
2025-01-31 15:27:12,486 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:27:12,486 - DEBUG - Parameter n deciphered: cbFGtXM3EPFekQ
2025-01-31 15:27:12,505 - DEBUG - finished descrambling signature for itag=135
2025-01-31 15:27:12,505 - DEBUG - Parameter n is: -rAukmj21iR87XIlq
2025-01-31 15:27:12,505 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:27:12,505 - DEBUG - Parameter n deciphered: cbFGtXM3EPFekQ
2025-01-31 15:27:12,524 - DEBUG - finished descrambling signature for itag=244
2025-01-31 15:27:12,524 - DEBUG - Parameter n is: -rAukmj21iR87XIlq
2025-01-31 15:27:12,524 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:27:12,524 - DEBUG - Parameter n deciphered: cbFGtXM3EPFekQ
2025-01-31 15:27:12,543 - DEBUG - finished descrambling signature for itag=397
2025-01-31 15:27:12,543 - DEBUG - Parameter n is: -rAukmj21iR87XIlq
2025-01-31 15:27:12,543 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:27:12,543 - DEBUG - Parameter n deciphered: cbFGtXM3EPFekQ
2025-01-31 15:27:12,562 - DEBUG - finished descrambling signature for itag=134
2025-01-31 15:27:12,562 - DEBUG - Parameter n is: -rAukmj21iR87XIlq
2025-01-31 15:27:12,562 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:27:12,562 - DEBUG - Parameter n deciphered: cbFGtXM3EPFekQ
2025-01-31 15:27:12,580 - DEBUG - finished descrambling signature for itag=243
2025-01-31 15:27:12,581 - DEBUG - Parameter n is: -rAukmj21iR87XIlq
2025-01-31 15:27:12,581 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:27:12,581 - DEBUG - Parameter n deciphered: cbFGtXM3EPFekQ
2025-01-31 15:27:12,599 - DEBUG - finished descrambling signature for itag=396
2025-01-31 15:27:12,599 - DEBUG - Parameter n is: -rAukmj21iR87XIlq
2025-01-31 15:27:12,599 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:27:12,599 - DEBUG - Parameter n deciphered: cbFGtXM3EPFekQ
2025-01-31 15:27:12,618 - DEBUG - finished descrambling signature for itag=133
2025-01-31 15:27:12,618 - DEBUG - Parameter n is: -rAukmj21iR87XIlq
2025-01-31 15:27:12,618 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:27:12,618 - DEBUG - Parameter n deciphered: cbFGtXM3EPFekQ
2025-01-31 15:27:12,637 - DEBUG - finished descrambling signature for itag=242
2025-01-31 15:27:12,637 - DEBUG - Parameter n is: -rAukmj21iR87XIlq
2025-01-31 15:27:12,637 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:27:12,637 - DEBUG - Parameter n deciphered: cbFGtXM3EPFekQ
2025-01-31 15:27:12,656 - DEBUG - finished descrambling signature for itag=395
2025-01-31 15:27:12,656 - DEBUG - Parameter n is: -rAukmj21iR87XIlq
2025-01-31 15:27:12,656 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:27:12,656 - DEBUG - Parameter n deciphered: cbFGtXM3EPFekQ
2025-01-31 15:27:12,675 - DEBUG - finished descrambling signature for itag=160
2025-01-31 15:27:12,675 - DEBUG - Parameter n is: -rAukmj21iR87XIlq
2025-01-31 15:27:12,675 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:27:12,675 - DEBUG - Parameter n deciphered: cbFGtXM3EPFekQ
2025-01-31 15:27:12,693 - DEBUG - finished descrambling signature for itag=278
2025-01-31 15:27:12,694 - DEBUG - Parameter n is: -rAukmj21iR87XIlq
2025-01-31 15:27:12,694 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:27:12,694 - DEBUG - Parameter n deciphered: cbFGtXM3EPFekQ
2025-01-31 15:27:12,712 - DEBUG - finished descrambling signature for itag=394
2025-01-31 15:27:12,713 - DEBUG - Parameter n is: -rAukmj21iR87XIlq
2025-01-31 15:27:12,713 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:27:12,713 - DEBUG - Parameter n deciphered: cbFGtXM3EPFekQ
2025-01-31 15:27:12,731 - DEBUG - finished descrambling signature for itag=140
2025-01-31 15:27:12,731 - DEBUG - Parameter n is: -rAukmj21iR87XIlq
2025-01-31 15:27:12,731 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:27:12,731 - DEBUG - Parameter n deciphered: cbFGtXM3EPFekQ
2025-01-31 15:27:12,750 - DEBUG - finished descrambling signature for itag=249
2025-01-31 15:27:12,750 - DEBUG - Parameter n is: -rAukmj21iR87XIlq
2025-01-31 15:27:12,750 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:27:12,750 - DEBUG - Parameter n deciphered: cbFGtXM3EPFekQ
2025-01-31 15:27:12,769 - DEBUG - finished descrambling signature for itag=250
2025-01-31 15:27:12,769 - DEBUG - Parameter n is: -rAukmj21iR87XIlq
2025-01-31 15:27:12,769 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:27:12,769 - DEBUG - Parameter n deciphered: cbFGtXM3EPFekQ
2025-01-31 15:27:12,788 - DEBUG - finished descrambling signature for itag=251
2025-01-31 15:27:12,788 - DEBUG - Parameter n is: -rAukmj21iR87XIlq
2025-01-31 15:27:12,788 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:27:12,788 - DEBUG - Parameter n deciphered: cbFGtXM3EPFekQ
2025-01-31 15:27:12,788 - DEBUG - downloading (3048795 total bytes) file to /home/strain/deepVoice/Applio/temp_audio
2025-01-31 15:27:13,042 - DEBUG - download remaining: 0
2025-01-31 15:27:13,045 - DEBUG - download finished
2025-01-31 15:27:13,093 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', '/home/strain/deepVoice/Applio/temp_audio', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-31 15:27:13,413 - ERROR - An error occurred during processing
Traceback (most recent call last):
  File "/home/strain/deepVoice/Applio/server.py", line 76, in home
    input_path = youtube_to_wav(youtube_url)
  File "/home/strain/deepVoice/Applio/youtube.py", line 19, in youtube_to_wav
    audio.export(output_path, format="wav")
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/pydub/audio_segment.py", line 867, in export
    out_f, _ = _fd_or_path_or_tempfile(out_f, 'wb+')
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/pydub/utils.py", line 60, in _fd_or_path_or_tempfile
    fd = open(fd, mode=mode)
FileNotFoundError: [Errno 2] No such file or directory: 'yt_audios/Alpha Wann x Nujabes - √áA VA ENSEMBLE II (remix)'
2025-01-31 15:27:13,421 - INFO - 127.0.0.1 - - [31/Jan/2025 15:27:13] "POST / HTTP/1.1" 200 -
2025-01-31 15:30:39,773 - INFO - Retrieved models: ['Ninho', 'Damso', 'Marine Lepen (French pilitician) - Weights.gg Model', 'Vald600', 'CharlesAznavour', 'JUL_Interview', 'LaFeve', 'Philippe Etchebest', 'Nekfeu250', 'Nekfeu - Weights.gg Model', 'SCH1000', 'NicolasSarkozy_v2_500e', 'Maes_600', 'Laylow - Weights.gg Model', 'KAARIS', 'ClaudeFrancoisV2', 'Josman', 'SoLaLune', 'JohnnyHallyday800', 'Titeuf600', 'Kylian-Mbapp√©', 'Lacrim', 'SCH Interview', 'OrelsanV1', 'Booba', 'kaarism', 'Ademo', 'rick', 'Bassem', 'Wejdene_310Epochs', 'Laylow1000', 'EricZemmour', 'FreezeCorleone', 'macron', 'gazo700', 'Mickey Mouse', 'Angele', 'AlphaWann', 'Eric Cartman', 'hamzaai500v2', 'homerSimpson']
2025-01-31 15:30:39,774 - INFO - Received YouTube URL for processing: https://www.youtube.com/watch?v=Jq-LrzeABss
2025-01-31 15:30:39,774 - DEBUG - matched regex search: (?:v=|\/)([0-9A-Za-z_-]{11}).*
2025-01-31 15:30:40,826 - DEBUG - finding initial function name
2025-01-31 15:30:40,827 - DEBUG - Pattern failed: ytplayer\.config\s*=\s*
2025-01-31 15:30:40,827 - DEBUG - Could not parse object.
2025-01-31 15:30:40,847 - DEBUG - finished regex search, matched: (/s/player/[\w\d]+/[\w\d_/.]+/base\.js)
2025-01-31 15:30:40,848 - DEBUG - matched regex search: signatureTimestamp:(\d*)
2025-01-31 15:30:40,848 - DEBUG - The WEB client requires poToken to obtain functional streams
2025-01-31 15:30:40,848 - DEBUG - Automatically generating poToken
2025-01-31 15:30:40,848 - DEBUG - Looking for visitorData in initial_data
2025-01-31 15:30:40,922 - DEBUG - matched regex search: visitor_data[',\"\s]+value['\"]:\s?['\"]([a-zA-Z0-9_%-]+)['\"]
2025-01-31 15:30:40,922 - DEBUG - VisitorData obtained successfully
2025-01-31 15:30:40,923 - DEBUG - Invoking botGuard
2025-01-31 15:30:41,639 - DEBUG - PoToken generated successfully
2025-01-31 15:30:41,965 - DEBUG - Found title in vid_info
2025-01-31 15:30:41,966 - DEBUG - applying descrambler
2025-01-31 15:30:41,966 - DEBUG - Applying poToken
2025-01-31 15:30:41,986 - DEBUG - finding initial function name
2025-01-31 15:30:42,051 - DEBUG - finished regex search, matched: (?P<sig>[a-zA-Z0-9_$]+)\s*=\s*function\(\s*(?P<arg>[a-zA-Z0-9_$]+)\s*\)\s*{\s*(?P=arg)\s*=\s*(?P=arg)\.split\(\s*""\s*\)\s*;\s*[^}]+;\s*return\s+(?P=arg)\.join\(\s*""\s*\)
2025-01-31 15:30:42,051 - DEBUG - Signature cipher function name: ouU
2025-01-31 15:30:42,051 - DEBUG - Finding throttling function name
2025-01-31 15:30:42,119 - DEBUG - finished regex search, matched: (?x)
            (?:
                \.get\("n"\)\)&&\(b=|
                (?:
                    b=String\.fromCharCode\(110\)|
                    (?P<str_idx>[a-zA-Z0-9_$.]+)&&\(b="nn"\[\+(?P=str_idx)\]
                )
                (?:
                    ,[a-zA-Z0-9_$]+\(a\))?,c=a\.
                    (?:
                        get\(b\)|
                        [a-zA-Z0-9_$]+\[b\]\|\|null
                    )\)&&\(c=|
                \b(?P<var>[a-zA-Z0-9_$]+)=
            )(?P<nfunc>[a-zA-Z0-9_$]+)(?:\[(?P<idx>\d+)\])?\([a-zA-Z]\)
            (?(var),[a-zA-Z0-9_$]+\.set\((?:"n+"|[a-zA-Z0-9_$]+)\,(?P=var)\))
2025-01-31 15:30:42,119 - DEBUG - func is: b_N
2025-01-31 15:30:42,119 - DEBUG - idx is: 0
2025-01-31 15:30:42,119 - DEBUG - Checking throttling function name
2025-01-31 15:30:42,121 - DEBUG - Throttling function name is: xyN
2025-01-31 15:30:42,121 - DEBUG - signature found, skip decipher
2025-01-31 15:30:42,121 - DEBUG - Parameter n is: xDTpo_TIoA4mDrDYb
2025-01-31 15:30:42,610 - DEBUG - Parameter n deciphered: TEwrgCmXTj9Arw
2025-01-31 15:30:42,610 - DEBUG - signature found, skip decipher
2025-01-31 15:30:42,610 - DEBUG - Parameter n is: Pomax5SYFpAH1ST7o
2025-01-31 15:30:43,100 - DEBUG - Parameter n deciphered: quEuhABjnJAecg
2025-01-31 15:30:43,100 - DEBUG - signature found, skip decipher
2025-01-31 15:30:43,100 - DEBUG - Parameter n is: Pomax5SYFpAH1ST7o
2025-01-31 15:30:43,100 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:30:43,100 - DEBUG - Parameter n deciphered: quEuhABjnJAecg
2025-01-31 15:30:43,101 - DEBUG - signature found, skip decipher
2025-01-31 15:30:43,101 - DEBUG - Parameter n is: Pomax5SYFpAH1ST7o
2025-01-31 15:30:43,101 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:30:43,101 - DEBUG - Parameter n deciphered: quEuhABjnJAecg
2025-01-31 15:30:43,101 - DEBUG - signature found, skip decipher
2025-01-31 15:30:43,101 - DEBUG - Parameter n is: Pomax5SYFpAH1ST7o
2025-01-31 15:30:43,101 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:30:43,101 - DEBUG - Parameter n deciphered: quEuhABjnJAecg
2025-01-31 15:30:43,101 - DEBUG - signature found, skip decipher
2025-01-31 15:30:43,101 - DEBUG - Parameter n is: Pomax5SYFpAH1ST7o
2025-01-31 15:30:43,102 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:30:43,102 - DEBUG - Parameter n deciphered: quEuhABjnJAecg
2025-01-31 15:30:43,102 - DEBUG - signature found, skip decipher
2025-01-31 15:30:43,102 - DEBUG - Parameter n is: Pomax5SYFpAH1ST7o
2025-01-31 15:30:43,102 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:30:43,102 - DEBUG - Parameter n deciphered: quEuhABjnJAecg
2025-01-31 15:30:43,102 - DEBUG - signature found, skip decipher
2025-01-31 15:30:43,102 - DEBUG - Parameter n is: Pomax5SYFpAH1ST7o
2025-01-31 15:30:43,102 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:30:43,102 - DEBUG - Parameter n deciphered: quEuhABjnJAecg
2025-01-31 15:30:43,103 - DEBUG - signature found, skip decipher
2025-01-31 15:30:43,103 - DEBUG - Parameter n is: Pomax5SYFpAH1ST7o
2025-01-31 15:30:43,103 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:30:43,103 - DEBUG - Parameter n deciphered: quEuhABjnJAecg
2025-01-31 15:30:43,103 - DEBUG - signature found, skip decipher
2025-01-31 15:30:43,103 - DEBUG - Parameter n is: Pomax5SYFpAH1ST7o
2025-01-31 15:30:43,103 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:30:43,103 - DEBUG - Parameter n deciphered: quEuhABjnJAecg
2025-01-31 15:30:43,104 - DEBUG - signature found, skip decipher
2025-01-31 15:30:43,104 - DEBUG - Parameter n is: Pomax5SYFpAH1ST7o
2025-01-31 15:30:43,104 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:30:43,104 - DEBUG - Parameter n deciphered: quEuhABjnJAecg
2025-01-31 15:30:43,104 - DEBUG - signature found, skip decipher
2025-01-31 15:30:43,104 - DEBUG - Parameter n is: Pomax5SYFpAH1ST7o
2025-01-31 15:30:43,104 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:30:43,104 - DEBUG - Parameter n deciphered: quEuhABjnJAecg
2025-01-31 15:30:43,104 - DEBUG - signature found, skip decipher
2025-01-31 15:30:43,105 - DEBUG - Parameter n is: Pomax5SYFpAH1ST7o
2025-01-31 15:30:43,105 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:30:43,105 - DEBUG - Parameter n deciphered: quEuhABjnJAecg
2025-01-31 15:30:43,105 - DEBUG - signature found, skip decipher
2025-01-31 15:30:43,105 - DEBUG - Parameter n is: Pomax5SYFpAH1ST7o
2025-01-31 15:30:43,105 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:30:43,105 - DEBUG - Parameter n deciphered: quEuhABjnJAecg
2025-01-31 15:30:43,105 - DEBUG - signature found, skip decipher
2025-01-31 15:30:43,105 - DEBUG - Parameter n is: Pomax5SYFpAH1ST7o
2025-01-31 15:30:43,105 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:30:43,105 - DEBUG - Parameter n deciphered: quEuhABjnJAecg
2025-01-31 15:30:43,106 - DEBUG - signature found, skip decipher
2025-01-31 15:30:43,106 - DEBUG - Parameter n is: Pomax5SYFpAH1ST7o
2025-01-31 15:30:43,106 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:30:43,106 - DEBUG - Parameter n deciphered: quEuhABjnJAecg
2025-01-31 15:30:43,106 - DEBUG - signature found, skip decipher
2025-01-31 15:30:43,106 - DEBUG - Parameter n is: Pomax5SYFpAH1ST7o
2025-01-31 15:30:43,106 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:30:43,106 - DEBUG - Parameter n deciphered: quEuhABjnJAecg
2025-01-31 15:30:43,107 - DEBUG - signature found, skip decipher
2025-01-31 15:30:43,107 - DEBUG - Parameter n is: Pomax5SYFpAH1ST7o
2025-01-31 15:30:43,107 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:30:43,107 - DEBUG - Parameter n deciphered: quEuhABjnJAecg
2025-01-31 15:30:43,107 - DEBUG - signature found, skip decipher
2025-01-31 15:30:43,107 - DEBUG - Parameter n is: Pomax5SYFpAH1ST7o
2025-01-31 15:30:43,107 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:30:43,107 - DEBUG - Parameter n deciphered: quEuhABjnJAecg
2025-01-31 15:30:43,108 - DEBUG - signature found, skip decipher
2025-01-31 15:30:43,108 - DEBUG - Parameter n is: Pomax5SYFpAH1ST7o
2025-01-31 15:30:43,108 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:30:43,108 - DEBUG - Parameter n deciphered: quEuhABjnJAecg
2025-01-31 15:30:43,108 - DEBUG - signature found, skip decipher
2025-01-31 15:30:43,108 - DEBUG - Parameter n is: Pomax5SYFpAH1ST7o
2025-01-31 15:30:43,108 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:30:43,108 - DEBUG - Parameter n deciphered: quEuhABjnJAecg
2025-01-31 15:30:43,108 - DEBUG - signature found, skip decipher
2025-01-31 15:30:43,108 - DEBUG - Parameter n is: Pomax5SYFpAH1ST7o
2025-01-31 15:30:43,108 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:30:43,109 - DEBUG - Parameter n deciphered: quEuhABjnJAecg
2025-01-31 15:30:43,109 - DEBUG - signature found, skip decipher
2025-01-31 15:30:43,109 - DEBUG - Parameter n is: Pomax5SYFpAH1ST7o
2025-01-31 15:30:43,109 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:30:43,109 - DEBUG - Parameter n deciphered: quEuhABjnJAecg
2025-01-31 15:30:43,109 - DEBUG - downloading (2080762 total bytes) file to /home/strain/deepVoice/Applio/temp_audio
2025-01-31 15:30:43,498 - DEBUG - download remaining: 0
2025-01-31 15:30:43,503 - DEBUG - download finished
2025-01-31 15:30:43,587 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', '/home/strain/deepVoice/Applio/temp_audio', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-31 15:30:43,808 - ERROR - An error occurred during processing
Traceback (most recent call last):
  File "/home/strain/deepVoice/Applio/server.py", line 76, in home
    input_path = youtube_to_wav(youtube_url)
  File "/home/strain/deepVoice/Applio/youtube.py", line 19, in youtube_to_wav
    audio.export(output_path, format="wav")
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/pydub/audio_segment.py", line 867, in export
    out_f, _ = _fd_or_path_or_tempfile(out_f, 'wb+')
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/pydub/utils.py", line 60, in _fd_or_path_or_tempfile
    fd = open(fd, mode=mode)
FileNotFoundError: [Errno 2] No such file or directory: 'yt_audios/La Feve - Comme des enfants'
2025-01-31 15:30:43,809 - INFO - 127.0.0.1 - - [31/Jan/2025 15:30:43] "POST / HTTP/1.1" 200 -
2025-01-31 15:31:25,702 - INFO -  * Detected change in '/home/strain/deepVoice/Applio/youtube.py', reloading
2025-01-31 15:31:26,026 - INFO -  * Restarting with stat
2025-01-31 15:31:27,818 - WARNING -  * Debugger is active!
2025-01-31 15:31:27,818 - INFO -  * Debugger PIN: 142-961-790
2025-01-31 15:31:30,544 - INFO - Retrieved models: ['Ninho', 'Damso', 'Marine Lepen (French pilitician) - Weights.gg Model', 'Vald600', 'CharlesAznavour', 'JUL_Interview', 'LaFeve', 'Philippe Etchebest', 'Nekfeu250', 'Nekfeu - Weights.gg Model', 'SCH1000', 'NicolasSarkozy_v2_500e', 'Maes_600', 'Laylow - Weights.gg Model', 'KAARIS', 'ClaudeFrancoisV2', 'Josman', 'SoLaLune', 'JohnnyHallyday800', 'Titeuf600', 'Kylian-Mbapp√©', 'Lacrim', 'SCH Interview', 'OrelsanV1', 'Booba', 'kaarism', 'Ademo', 'rick', 'Bassem', 'Wejdene_310Epochs', 'Laylow1000', 'EricZemmour', 'FreezeCorleone', 'macron', 'gazo700', 'Mickey Mouse', 'Angele', 'AlphaWann', 'Eric Cartman', 'hamzaai500v2', 'homerSimpson']
2025-01-31 15:31:30,547 - INFO - Received YouTube URL for processing: https://www.youtube.com/watch?v=Jq-LrzeABss
2025-01-31 15:31:30,547 - DEBUG - matched regex search: (?:v=|\/)([0-9A-Za-z_-]{11}).*
2025-01-31 15:31:31,564 - DEBUG - finding initial function name
2025-01-31 15:31:31,565 - DEBUG - Pattern failed: ytplayer\.config\s*=\s*
2025-01-31 15:31:31,565 - DEBUG - Could not parse object.
2025-01-31 15:31:31,585 - DEBUG - finished regex search, matched: (/s/player/[\w\d]+/[\w\d_/.]+/base\.js)
2025-01-31 15:31:31,838 - DEBUG - matched regex search: signatureTimestamp:(\d*)
2025-01-31 15:31:31,838 - DEBUG - The WEB client requires poToken to obtain functional streams
2025-01-31 15:31:31,838 - DEBUG - Automatically generating poToken
2025-01-31 15:31:31,839 - DEBUG - Looking for visitorData in initial_data
2025-01-31 15:31:31,924 - DEBUG - matched regex search: visitor_data[',\"\s]+value['\"]:\s?['\"]([a-zA-Z0-9_%-]+)['\"]
2025-01-31 15:31:31,924 - DEBUG - VisitorData obtained successfully
2025-01-31 15:31:31,924 - DEBUG - Invoking botGuard
2025-01-31 15:31:32,648 - DEBUG - PoToken generated successfully
2025-01-31 15:31:32,982 - DEBUG - Found title in vid_info
2025-01-31 15:31:32,982 - DEBUG - applying descrambler
2025-01-31 15:31:32,983 - DEBUG - Applying poToken
2025-01-31 15:31:32,996 - DEBUG - finding initial function name
2025-01-31 15:31:33,066 - DEBUG - finished regex search, matched: (?P<sig>[a-zA-Z0-9_$]+)\s*=\s*function\(\s*(?P<arg>[a-zA-Z0-9_$]+)\s*\)\s*{\s*(?P=arg)\s*=\s*(?P=arg)\.split\(\s*""\s*\)\s*;\s*[^}]+;\s*return\s+(?P=arg)\.join\(\s*""\s*\)
2025-01-31 15:31:33,066 - DEBUG - Signature cipher function name: ouU
2025-01-31 15:31:33,066 - DEBUG - Finding throttling function name
2025-01-31 15:31:33,135 - DEBUG - finished regex search, matched: (?x)
            (?:
                \.get\("n"\)\)&&\(b=|
                (?:
                    b=String\.fromCharCode\(110\)|
                    (?P<str_idx>[a-zA-Z0-9_$.]+)&&\(b="nn"\[\+(?P=str_idx)\]
                )
                (?:
                    ,[a-zA-Z0-9_$]+\(a\))?,c=a\.
                    (?:
                        get\(b\)|
                        [a-zA-Z0-9_$]+\[b\]\|\|null
                    )\)&&\(c=|
                \b(?P<var>[a-zA-Z0-9_$]+)=
            )(?P<nfunc>[a-zA-Z0-9_$]+)(?:\[(?P<idx>\d+)\])?\([a-zA-Z]\)
            (?(var),[a-zA-Z0-9_$]+\.set\((?:"n+"|[a-zA-Z0-9_$]+)\,(?P=var)\))
2025-01-31 15:31:33,135 - DEBUG - func is: b_N
2025-01-31 15:31:33,135 - DEBUG - idx is: 0
2025-01-31 15:31:33,135 - DEBUG - Checking throttling function name
2025-01-31 15:31:33,137 - DEBUG - Throttling function name is: xyN
2025-01-31 15:31:33,137 - DEBUG - signature found, skip decipher
2025-01-31 15:31:33,137 - DEBUG - Parameter n is: Hk9UZ2tYeHGGcohUM
2025-01-31 15:31:33,643 - DEBUG - Parameter n deciphered: -OJV4kwqtU6SOA
2025-01-31 15:31:33,643 - DEBUG - signature found, skip decipher
2025-01-31 15:31:33,643 - DEBUG - Parameter n is: DegFKA2h0DWt2hxDx
2025-01-31 15:31:34,132 - DEBUG - Parameter n deciphered: WzH3XIl-JK_EHA
2025-01-31 15:31:34,132 - DEBUG - signature found, skip decipher
2025-01-31 15:31:34,132 - DEBUG - Parameter n is: DegFKA2h0DWt2hxDx
2025-01-31 15:31:34,132 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:31:34,132 - DEBUG - Parameter n deciphered: WzH3XIl-JK_EHA
2025-01-31 15:31:34,132 - DEBUG - signature found, skip decipher
2025-01-31 15:31:34,132 - DEBUG - Parameter n is: DegFKA2h0DWt2hxDx
2025-01-31 15:31:34,132 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:31:34,132 - DEBUG - Parameter n deciphered: WzH3XIl-JK_EHA
2025-01-31 15:31:34,133 - DEBUG - signature found, skip decipher
2025-01-31 15:31:34,133 - DEBUG - Parameter n is: DegFKA2h0DWt2hxDx
2025-01-31 15:31:34,133 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:31:34,133 - DEBUG - Parameter n deciphered: WzH3XIl-JK_EHA
2025-01-31 15:31:34,133 - DEBUG - signature found, skip decipher
2025-01-31 15:31:34,133 - DEBUG - Parameter n is: DegFKA2h0DWt2hxDx
2025-01-31 15:31:34,133 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:31:34,133 - DEBUG - Parameter n deciphered: WzH3XIl-JK_EHA
2025-01-31 15:31:34,134 - DEBUG - signature found, skip decipher
2025-01-31 15:31:34,134 - DEBUG - Parameter n is: DegFKA2h0DWt2hxDx
2025-01-31 15:31:34,134 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:31:34,134 - DEBUG - Parameter n deciphered: WzH3XIl-JK_EHA
2025-01-31 15:31:34,134 - DEBUG - signature found, skip decipher
2025-01-31 15:31:34,134 - DEBUG - Parameter n is: DegFKA2h0DWt2hxDx
2025-01-31 15:31:34,134 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:31:34,134 - DEBUG - Parameter n deciphered: WzH3XIl-JK_EHA
2025-01-31 15:31:34,134 - DEBUG - signature found, skip decipher
2025-01-31 15:31:34,134 - DEBUG - Parameter n is: DegFKA2h0DWt2hxDx
2025-01-31 15:31:34,135 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:31:34,135 - DEBUG - Parameter n deciphered: WzH3XIl-JK_EHA
2025-01-31 15:31:34,135 - DEBUG - signature found, skip decipher
2025-01-31 15:31:34,135 - DEBUG - Parameter n is: DegFKA2h0DWt2hxDx
2025-01-31 15:31:34,135 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:31:34,135 - DEBUG - Parameter n deciphered: WzH3XIl-JK_EHA
2025-01-31 15:31:34,135 - DEBUG - signature found, skip decipher
2025-01-31 15:31:34,135 - DEBUG - Parameter n is: DegFKA2h0DWt2hxDx
2025-01-31 15:31:34,136 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:31:34,136 - DEBUG - Parameter n deciphered: WzH3XIl-JK_EHA
2025-01-31 15:31:34,136 - DEBUG - signature found, skip decipher
2025-01-31 15:31:34,136 - DEBUG - Parameter n is: DegFKA2h0DWt2hxDx
2025-01-31 15:31:34,136 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:31:34,136 - DEBUG - Parameter n deciphered: WzH3XIl-JK_EHA
2025-01-31 15:31:34,136 - DEBUG - signature found, skip decipher
2025-01-31 15:31:34,136 - DEBUG - Parameter n is: DegFKA2h0DWt2hxDx
2025-01-31 15:31:34,136 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:31:34,136 - DEBUG - Parameter n deciphered: WzH3XIl-JK_EHA
2025-01-31 15:31:34,137 - DEBUG - signature found, skip decipher
2025-01-31 15:31:34,137 - DEBUG - Parameter n is: DegFKA2h0DWt2hxDx
2025-01-31 15:31:34,137 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:31:34,137 - DEBUG - Parameter n deciphered: WzH3XIl-JK_EHA
2025-01-31 15:31:34,137 - DEBUG - signature found, skip decipher
2025-01-31 15:31:34,137 - DEBUG - Parameter n is: DegFKA2h0DWt2hxDx
2025-01-31 15:31:34,137 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:31:34,137 - DEBUG - Parameter n deciphered: WzH3XIl-JK_EHA
2025-01-31 15:31:34,138 - DEBUG - signature found, skip decipher
2025-01-31 15:31:34,138 - DEBUG - Parameter n is: DegFKA2h0DWt2hxDx
2025-01-31 15:31:34,138 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:31:34,138 - DEBUG - Parameter n deciphered: WzH3XIl-JK_EHA
2025-01-31 15:31:34,138 - DEBUG - signature found, skip decipher
2025-01-31 15:31:34,138 - DEBUG - Parameter n is: DegFKA2h0DWt2hxDx
2025-01-31 15:31:34,138 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:31:34,138 - DEBUG - Parameter n deciphered: WzH3XIl-JK_EHA
2025-01-31 15:31:34,139 - DEBUG - signature found, skip decipher
2025-01-31 15:31:34,139 - DEBUG - Parameter n is: DegFKA2h0DWt2hxDx
2025-01-31 15:31:34,139 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:31:34,139 - DEBUG - Parameter n deciphered: WzH3XIl-JK_EHA
2025-01-31 15:31:34,139 - DEBUG - signature found, skip decipher
2025-01-31 15:31:34,139 - DEBUG - Parameter n is: DegFKA2h0DWt2hxDx
2025-01-31 15:31:34,139 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:31:34,139 - DEBUG - Parameter n deciphered: WzH3XIl-JK_EHA
2025-01-31 15:31:34,140 - DEBUG - signature found, skip decipher
2025-01-31 15:31:34,140 - DEBUG - Parameter n is: DegFKA2h0DWt2hxDx
2025-01-31 15:31:34,140 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:31:34,140 - DEBUG - Parameter n deciphered: WzH3XIl-JK_EHA
2025-01-31 15:31:34,140 - DEBUG - signature found, skip decipher
2025-01-31 15:31:34,140 - DEBUG - Parameter n is: DegFKA2h0DWt2hxDx
2025-01-31 15:31:34,140 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:31:34,140 - DEBUG - Parameter n deciphered: WzH3XIl-JK_EHA
2025-01-31 15:31:34,140 - DEBUG - signature found, skip decipher
2025-01-31 15:31:34,140 - DEBUG - Parameter n is: DegFKA2h0DWt2hxDx
2025-01-31 15:31:34,140 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:31:34,140 - DEBUG - Parameter n deciphered: WzH3XIl-JK_EHA
2025-01-31 15:31:34,141 - DEBUG - signature found, skip decipher
2025-01-31 15:31:34,141 - DEBUG - Parameter n is: DegFKA2h0DWt2hxDx
2025-01-31 15:31:34,141 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:31:34,141 - DEBUG - Parameter n deciphered: WzH3XIl-JK_EHA
2025-01-31 15:31:34,141 - DEBUG - file /home/strain/deepVoice/Applio/temp_audio already exists, skipping
2025-01-31 15:31:34,142 - DEBUG - download finished
2025-01-31 15:31:34,184 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', '/home/strain/deepVoice/Applio/temp_audio', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-31 15:31:34,430 - INFO - YouTube audio downloaded and converted to WAV: La Feve - Comme des enfants
2025-01-31 15:31:34,430 - INFO - Splitting audio for: La Feve - Comme des enfants
2025-01-31 15:31:34,431 - INFO - Separator version 0.28.5 instantiating with output_dir: None, output_format: WAV
2025-01-31 15:31:34,431 - INFO - Output directory not specified. Using current working directory.
2025-01-31 15:31:34,432 - INFO - Operating System: Linux #53-Ubuntu SMP PREEMPT_DYNAMIC Sat Jan 11 00:06:25 UTC 2025
2025-01-31 15:31:34,432 - INFO - System: Linux Node: server Release: 6.8.0-52-generic Machine: x86_64 Proc: x86_64
2025-01-31 15:31:34,432 - INFO - Python Version: 3.10.16
2025-01-31 15:31:34,432 - INFO - PyTorch Version: 2.3.1+cu121
2025-01-31 15:31:34,472 - INFO - FFmpeg installed: ffmpeg version 6.1.1-3ubuntu5 Copyright (c) 2000-2023 the FFmpeg developers
2025-01-31 15:31:34,472 - INFO - ONNX Runtime CPU package installed with version: 1.20.1
2025-01-31 15:31:34,473 - INFO - No hardware acceleration could be configured, running in CPU mode
2025-01-31 15:31:34,473 - INFO - Loading model UVR-MDX-NET-Inst_HQ_3.onnx...
2025-01-31 15:31:34,844 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Erf', version=13)
2025-01-31 15:31:34,844 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Erf', version=9)
2025-01-31 15:31:34,844 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='HardSigmoid', version=6)
2025-01-31 15:31:34,844 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='HardSigmoid', version=1)
2025-01-31 15:31:34,844 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='HardSwish', version=14)
2025-01-31 15:31:34,844 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='LeakyRelu', version=16)
2025-01-31 15:31:34,844 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='LeakyRelu', version=6)
2025-01-31 15:31:34,844 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='LeakyRelu', version=1)
2025-01-31 15:31:34,844 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='LogSoftmax', version=13)
2025-01-31 15:31:34,844 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='LogSoftmax', version=11)
2025-01-31 15:31:34,844 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='LogSoftmax', version=1)
2025-01-31 15:31:34,844 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Relu', version=14)
2025-01-31 15:31:34,844 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Relu', version=13)
2025-01-31 15:31:34,844 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Relu', version=6)
2025-01-31 15:31:34,844 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='PRelu', version=16)
2025-01-31 15:31:34,844 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='PRelu', version=9)
2025-01-31 15:31:34,844 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='PRelu', version=7)
2025-01-31 15:31:34,844 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Elu', version=6)
2025-01-31 15:31:34,844 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Celu', version=12)
2025-01-31 15:31:34,844 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Selu', version=6)
2025-01-31 15:31:34,844 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sigmoid', version=13)
2025-01-31 15:31:34,844 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sigmoid', version=6)
2025-01-31 15:31:34,844 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sigmoid', version=1)
2025-01-31 15:31:34,844 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Softmax', version=11)
2025-01-31 15:31:34,845 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Softmax', version=1)
2025-01-31 15:31:34,845 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Softmax', version=13)
2025-01-31 15:31:34,845 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Softsign', version=1)
2025-01-31 15:31:34,845 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Softplus', version=1)
2025-01-31 15:31:34,845 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ArgMin', version=13)
2025-01-31 15:31:34,845 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ArgMin', version=12)
2025-01-31 15:31:34,845 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ArgMax', version=13)
2025-01-31 15:31:34,845 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ArgMax', version=12)
2025-01-31 15:31:34,845 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ArgMin', version=11)
2025-01-31 15:31:34,845 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ArgMax', version=11)
2025-01-31 15:31:34,845 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Pad', version=13)
2025-01-31 15:31:34,845 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Pad', version=11)
2025-01-31 15:31:34,845 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Pad', version=2)
2025-01-31 15:31:34,846 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='AveragePool', version=11)
2025-01-31 15:31:34,846 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='AveragePool', version=10)
2025-01-31 15:31:34,846 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='AveragePool', version=7)
2025-01-31 15:31:34,846 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='BatchNormalization', version=9)
2025-01-31 15:31:34,846 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='BatchNormalization', version=14)
2025-01-31 15:31:34,846 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='BatchNormalization', version=15)
2025-01-31 15:31:34,846 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Div', version=14)
2025-01-31 15:31:34,846 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Div', version=13)
2025-01-31 15:31:34,846 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Div', version=7)
2025-01-31 15:31:34,846 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Div', version=6)
2025-01-31 15:31:34,846 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Div', version=1)
2025-01-31 15:31:34,846 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Mul', version=14)
2025-01-31 15:31:34,846 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Mul', version=13)
2025-01-31 15:31:34,846 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Mul', version=7)
2025-01-31 15:31:34,846 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Mul', version=6)
2025-01-31 15:31:34,847 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Mul', version=1)
2025-01-31 15:31:34,847 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sub', version=14)
2025-01-31 15:31:34,847 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sub', version=13)
2025-01-31 15:31:34,847 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sub', version=7)
2025-01-31 15:31:34,847 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sub', version=6)
2025-01-31 15:31:34,847 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sub', version=1)
2025-01-31 15:31:34,847 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Add', version=14)
2025-01-31 15:31:34,847 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Add', version=13)
2025-01-31 15:31:34,847 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Add', version=7)
2025-01-31 15:31:34,847 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Add', version=6)
2025-01-31 15:31:34,847 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Add', version=1)
2025-01-31 15:31:34,847 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Cast', version=13)
2025-01-31 15:31:34,847 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Cast', version=9)
2025-01-31 15:31:34,847 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Clip', version=13)
2025-01-31 15:31:34,847 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Clip', version=12)
2025-01-31 15:31:34,847 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Clip', version=11)
2025-01-31 15:31:34,847 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Clip', version=6)
2025-01-31 15:31:34,848 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='GreaterOrEqual', version=12)
2025-01-31 15:31:34,848 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='LessOrEqual', version=12)
2025-01-31 15:31:34,848 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Greater', version=13)
2025-01-31 15:31:34,848 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Greater', version=9)
2025-01-31 15:31:34,848 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Greater', version=7)
2025-01-31 15:31:34,848 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Less', version=13)
2025-01-31 15:31:34,848 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Less', version=9)
2025-01-31 15:31:34,848 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Less', version=7)
2025-01-31 15:31:34,848 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Equal', version=13)
2025-01-31 15:31:34,848 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Equal', version=11)
2025-01-31 15:31:34,848 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Equal', version=7)
2025-01-31 15:31:34,848 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Concat', version=13)
2025-01-31 15:31:34,848 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Concat', version=11)
2025-01-31 15:31:34,848 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Concat', version=4)
2025-01-31 15:31:34,848 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Constant', version=13)
2025-01-31 15:31:34,848 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Constant', version=12)
2025-01-31 15:31:34,848 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Constant', version=11)
2025-01-31 15:31:34,848 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Constant', version=9)
2025-01-31 15:31:34,849 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ConstantOfShape', version=9)
2025-01-31 15:31:34,849 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ConvTranspose', version=11)
2025-01-31 15:31:34,849 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ConvTranspose', version=1)
2025-01-31 15:31:34,849 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Conv', version=11)
2025-01-31 15:31:34,849 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Conv', version=1)
2025-01-31 15:31:34,849 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='CumSum', version=14)
2025-01-31 15:31:34,849 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='CumSum', version=11)
2025-01-31 15:31:34,849 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='DepthToSpace', version=13)
2025-01-31 15:31:34,849 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='DepthToSpace', version=11)
2025-01-31 15:31:34,849 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Dropout', version=10)
2025-01-31 15:31:34,850 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Dropout', version=13)
2025-01-31 15:31:34,850 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Dropout', version=12)
2025-01-31 15:31:34,850 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Einsum', version=12)
2025-01-31 15:31:34,850 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Expand', version=13)
2025-01-31 15:31:34,850 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Expand', version=8)
2025-01-31 15:31:34,850 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='EyeLike', version=9)
2025-01-31 15:31:34,850 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Flatten', version=9)
2025-01-31 15:31:34,851 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Flatten', version=11)
2025-01-31 15:31:34,851 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Flatten', version=13)
2025-01-31 15:31:34,851 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Tanh', version=6)
2025-01-31 15:31:34,851 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Tanh', version=13)
2025-01-31 15:31:34,851 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Tan', version=7)
2025-01-31 15:31:34,851 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sin', version=7)
2025-01-31 15:31:34,851 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sign', version=9)
2025-01-31 15:31:34,851 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sign', version=13)
2025-01-31 15:31:34,851 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Log', version=6)
2025-01-31 15:31:34,851 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Log', version=13)
2025-01-31 15:31:34,851 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Exp', version=13)
2025-01-31 15:31:34,851 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Exp', version=6)
2025-01-31 15:31:34,851 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Cos', version=7)
2025-01-31 15:31:34,851 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Atan', version=7)
2025-01-31 15:31:34,851 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Asin', version=7)
2025-01-31 15:31:34,851 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Acos', version=7)
2025-01-31 15:31:34,851 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Abs', version=6)
2025-01-31 15:31:34,851 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Abs', version=13)
2025-01-31 15:31:34,852 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Gather', version=13)
2025-01-31 15:31:34,852 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Gather', version=11)
2025-01-31 15:31:34,852 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Gather', version=1)
2025-01-31 15:31:34,852 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='GatherElements', version=13)
2025-01-31 15:31:34,852 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='GatherElements', version=11)
2025-01-31 15:31:34,852 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='GatherND', version=13)
2025-01-31 15:31:34,852 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='GatherND', version=12)
2025-01-31 15:31:34,852 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='GatherND', version=11)
2025-01-31 15:31:34,852 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Gemm', version=13)
2025-01-31 15:31:34,852 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Gemm', version=11)
2025-01-31 15:31:34,852 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Gemm', version=9)
2025-01-31 15:31:34,852 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='GlobalAveragePool', version=1)
2025-01-31 15:31:34,853 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Identity', version=1)
2025-01-31 15:31:34,853 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Identity', version=13)
2025-01-31 15:31:34,853 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Identity', version=14)
2025-01-31 15:31:34,853 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Identity', version=16)
2025-01-31 15:31:34,853 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='InstanceNormalization', version=6)
2025-01-31 15:31:34,853 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='InstanceNormalization', version=1)
2025-01-31 15:31:34,853 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='IsInf', version=10)
2025-01-31 15:31:34,853 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='IsNaN', version=13)
2025-01-31 15:31:34,853 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='LayerNormalization', version=17)
2025-01-31 15:31:34,854 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Or', version=7)
2025-01-31 15:31:34,854 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Or', version=1)
2025-01-31 15:31:34,854 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='And', version=7)
2025-01-31 15:31:34,854 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='And', version=1)
2025-01-31 15:31:34,854 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Xor', version=7)
2025-01-31 15:31:34,854 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Xor', version=1)
2025-01-31 15:31:34,854 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Not', version=1)
2025-01-31 15:31:34,854 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='LRN', version=1)
2025-01-31 15:31:34,854 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='LRN', version=13)
2025-01-31 15:31:34,854 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='MatMul', version=13)
2025-01-31 15:31:34,854 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='MatMul', version=9)
2025-01-31 15:31:34,854 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='MatMul', version=1)
2025-01-31 15:31:34,854 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='MaxPool', version=8)
2025-01-31 15:31:34,854 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='MaxPool', version=10)
2025-01-31 15:31:34,854 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='MaxPool', version=11)
2025-01-31 15:31:34,854 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='MaxPool', version=12)
2025-01-31 15:31:34,855 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Mean', version=13)
2025-01-31 15:31:34,855 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Mean', version=8)
2025-01-31 15:31:34,855 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Max', version=13)
2025-01-31 15:31:34,855 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Max', version=12)
2025-01-31 15:31:34,855 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Max', version=8)
2025-01-31 15:31:34,855 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Min', version=13)
2025-01-31 15:31:34,855 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Min', version=12)
2025-01-31 15:31:34,855 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Min', version=8)
2025-01-31 15:31:34,855 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Mod', version=13)
2025-01-31 15:31:34,855 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Mod', version=10)
2025-01-31 15:31:34,855 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Neg', version=13)
2025-01-31 15:31:34,856 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Neg', version=6)
2025-01-31 15:31:34,856 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Neg', version=1)
2025-01-31 15:31:35,175 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='NonMaxSuppression', version=11)
2025-01-31 15:31:35,175 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='NonMaxSuppression', version=10)
2025-01-31 15:31:35,175 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='NonZero', version=13)
2025-01-31 15:31:35,176 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Pow', version=15)
2025-01-31 15:31:35,176 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Pow', version=13)
2025-01-31 15:31:35,176 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Pow', version=12)
2025-01-31 15:31:35,176 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Pow', version=7)
2025-01-31 15:31:35,176 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Pow', version=1)
2025-01-31 15:31:35,176 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sqrt', version=13)
2025-01-31 15:31:35,176 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sqrt', version=6)
2025-01-31 15:31:35,176 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sqrt', version=1)
2025-01-31 15:31:35,176 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Range', version=11)
2025-01-31 15:31:35,176 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Reciprocal', version=13)
2025-01-31 15:31:35,176 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Reciprocal', version=6)
2025-01-31 15:31:35,177 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Reciprocal', version=1)
2025-01-31 15:31:35,177 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceSumSquare', version=13)
2025-01-31 15:31:35,177 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceSumSquare', version=11)
2025-01-31 15:31:35,177 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceSumSquare', version=1)
2025-01-31 15:31:35,177 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceSum', version=11)
2025-01-31 15:31:35,177 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceSum', version=1)
2025-01-31 15:31:35,177 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceProd', version=13)
2025-01-31 15:31:35,177 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceProd', version=11)
2025-01-31 15:31:35,177 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceProd', version=1)
2025-01-31 15:31:35,177 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceMin', version=13)
2025-01-31 15:31:35,178 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceMin', version=12)
2025-01-31 15:31:35,178 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceMin', version=11)
2025-01-31 15:31:35,178 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceMin', version=1)
2025-01-31 15:31:35,178 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceMean', version=13)
2025-01-31 15:31:35,178 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceMean', version=11)
2025-01-31 15:31:35,178 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceMean', version=1)
2025-01-31 15:31:35,178 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceMax', version=13)
2025-01-31 15:31:35,178 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceMax', version=12)
2025-01-31 15:31:35,178 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceMax', version=11)
2025-01-31 15:31:35,178 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceMax', version=1)
2025-01-31 15:31:35,178 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceLogSumExp', version=13)
2025-01-31 15:31:35,178 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceLogSumExp', version=11)
2025-01-31 15:31:35,178 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceLogSumExp', version=1)
2025-01-31 15:31:35,178 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceLogSum', version=13)
2025-01-31 15:31:35,178 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceLogSum', version=11)
2025-01-31 15:31:35,178 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceLogSum', version=1)
2025-01-31 15:31:35,178 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceL2', version=13)
2025-01-31 15:31:35,178 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceL2', version=11)
2025-01-31 15:31:35,179 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceL2', version=1)
2025-01-31 15:31:35,179 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceL1', version=13)
2025-01-31 15:31:35,179 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceL1', version=11)
2025-01-31 15:31:35,179 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceL1', version=1)
2025-01-31 15:31:35,179 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceSum', version=13)
2025-01-31 15:31:35,179 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Reshape', version=14)
2025-01-31 15:31:35,179 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Reshape', version=13)
2025-01-31 15:31:35,179 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Reshape', version=5)
2025-01-31 15:31:35,179 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Resize', version=10)
2025-01-31 15:31:35,179 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Resize', version=13)
2025-01-31 15:31:35,179 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Resize', version=11)
2025-01-31 15:31:35,180 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='RoiAlign', version=10)
2025-01-31 15:31:35,180 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='RoiAlign', version=16)
2025-01-31 15:31:35,180 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Round', version=11)
2025-01-31 15:31:35,180 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Floor', version=6)
2025-01-31 15:31:35,180 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Floor', version=13)
2025-01-31 15:31:35,180 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Ceil', version=6)
2025-01-31 15:31:35,180 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Ceil', version=13)
2025-01-31 15:31:35,181 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ScatterND', version=16)
2025-01-31 15:31:35,181 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ScatterND', version=13)
2025-01-31 15:31:35,181 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ScatterND', version=11)
2025-01-31 15:31:35,181 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Shape', version=15)
2025-01-31 15:31:35,181 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Shape', version=13)
2025-01-31 15:31:35,181 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Shape', version=1)
2025-01-31 15:31:35,182 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Slice', version=9)
2025-01-31 15:31:35,182 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Slice', version=13)
2025-01-31 15:31:35,182 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Slice', version=11)
2025-01-31 15:31:35,182 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Slice', version=10)
2025-01-31 15:31:35,182 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Split', version=13)
2025-01-31 15:31:35,182 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Split', version=2)
2025-01-31 15:31:35,182 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Split', version=11)
2025-01-31 15:31:35,182 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Squeeze', version=11)
2025-01-31 15:31:35,183 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Squeeze', version=1)
2025-01-31 15:31:35,183 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Squeeze', version=21)
2025-01-31 15:31:35,183 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Squeeze', version=13)
2025-01-31 15:31:35,183 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sum', version=13)
2025-01-31 15:31:35,183 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sum', version=8)
2025-01-31 15:31:35,183 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Tile', version=13)
2025-01-31 15:31:35,183 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Tile', version=6)
2025-01-31 15:31:35,184 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='TopK', version=11)
2025-01-31 15:31:35,184 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='TopK', version=10)
2025-01-31 15:31:35,184 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='TopK', version=1)
2025-01-31 15:31:35,184 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Transpose', version=13)
2025-01-31 15:31:35,184 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Transpose', version=1)
2025-01-31 15:31:35,184 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Unsqueeze', version=11)
2025-01-31 15:31:35,184 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Unsqueeze', version=1)
2025-01-31 15:31:35,184 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Unsqueeze', version=13)
2025-01-31 15:31:35,185 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Where', version=16)
2025-01-31 15:31:35,185 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Where', version=9)
2025-01-31 15:31:35,718 - INFO - Load model duration: 00:00:01
2025-01-31 15:31:35,718 - INFO - Starting separation process for audio_file_path: yt_audios/La Feve - Comme des enfants
2025-01-31 15:31:35,851 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=1141)
           2	LOAD_FAST(arg=0, lineno=1144)
           4	LOAD_CONST(arg=1, lineno=1144)
           6	BINARY_SUBSCR(arg=None, lineno=1144)
           8	STORE_FAST(arg=3, lineno=1144)
          10	LOAD_FAST(arg=1, lineno=1145)
          12	UNARY_NEGATIVE(arg=None, lineno=1145)
          14	LOAD_FAST(arg=3, lineno=1145)
          16	DUP_TOP(arg=None, lineno=1145)
          18	ROT_THREE(arg=None, lineno=1145)
          20	COMPARE_OP(arg=1, lineno=1145)
          22	POP_JUMP_IF_FALSE(arg=17, lineno=1145)
          24	LOAD_FAST(arg=1, lineno=1145)
          26	COMPARE_OP(arg=1, lineno=1145)
          28	POP_JUMP_IF_FALSE(arg=21, lineno=1145)
          30	JUMP_FORWARD(arg=2, lineno=1145)
>         32	POP_TOP(arg=None, lineno=1145)
          34	JUMP_FORWARD(arg=2, lineno=1145)
>         36	LOAD_CONST(arg=1, lineno=1146)
          38	STORE_FAST(arg=3, lineno=1146)
>         40	LOAD_FAST(arg=0, lineno=1148)
          42	LOAD_CONST(arg=2, lineno=1148)
          44	BINARY_SUBSCR(arg=None, lineno=1148)
          46	STORE_FAST(arg=4, lineno=1148)
          48	LOAD_FAST(arg=1, lineno=1149)
          50	UNARY_NEGATIVE(arg=None, lineno=1149)
          52	LOAD_FAST(arg=4, lineno=1149)
          54	DUP_TOP(arg=None, lineno=1149)
          56	ROT_THREE(arg=None, lineno=1149)
          58	COMPARE_OP(arg=1, lineno=1149)
          60	POP_JUMP_IF_FALSE(arg=36, lineno=1149)
          62	LOAD_FAST(arg=1, lineno=1149)
          64	COMPARE_OP(arg=1, lineno=1149)
          66	POP_JUMP_IF_FALSE(arg=40, lineno=1149)
          68	JUMP_FORWARD(arg=2, lineno=1149)
>         70	POP_TOP(arg=None, lineno=1149)
          72	JUMP_FORWARD(arg=2, lineno=1149)
>         74	LOAD_CONST(arg=1, lineno=1150)
          76	STORE_FAST(arg=4, lineno=1150)
>         78	LOAD_FAST(arg=2, lineno=1152)
          80	POP_JUMP_IF_FALSE(arg=52, lineno=1152)
          82	LOAD_GLOBAL(arg=0, lineno=1153)
          84	LOAD_METHOD(arg=1, lineno=1153)
          86	LOAD_FAST(arg=3, lineno=1153)
          88	CALL_METHOD(arg=1, lineno=1153)
          90	LOAD_GLOBAL(arg=0, lineno=1153)
          92	LOAD_METHOD(arg=1, lineno=1153)
          94	LOAD_FAST(arg=4, lineno=1153)
          96	CALL_METHOD(arg=1, lineno=1153)
          98	COMPARE_OP(arg=3, lineno=1153)
         100	RETURN_VALUE(arg=None, lineno=1153)
>        102	LOAD_GLOBAL(arg=0, lineno=1155)
         104	LOAD_METHOD(arg=2, lineno=1155)
         106	LOAD_FAST(arg=3, lineno=1155)
         108	CALL_METHOD(arg=1, lineno=1155)
         110	LOAD_GLOBAL(arg=0, lineno=1155)
         112	LOAD_METHOD(arg=2, lineno=1155)
         114	LOAD_FAST(arg=4, lineno=1155)
         116	CALL_METHOD(arg=1, lineno=1155)
         118	COMPARE_OP(arg=3, lineno=1155)
         120	RETURN_VALUE(arg=None, lineno=1155)
2025-01-31 15:31:35,851 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:31:35,851 - DEBUG - stack: []
2025-01-31 15:31:35,851 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:31:35,851 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=1141)
2025-01-31 15:31:35,851 - DEBUG - stack []
2025-01-31 15:31:35,851 - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1144)
2025-01-31 15:31:35,851 - DEBUG - stack []
2025-01-31 15:31:35,852 - DEBUG - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1144)
2025-01-31 15:31:35,852 - DEBUG - stack ['$x2.0']
2025-01-31 15:31:35,852 - DEBUG - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=1144)
2025-01-31 15:31:35,852 - DEBUG - stack ['$x2.0', '$const4.1']
2025-01-31 15:31:35,852 - DEBUG - dispatch pc=8, inst=STORE_FAST(arg=3, lineno=1144)
2025-01-31 15:31:35,852 - DEBUG - stack ['$6binary_subscr.2']
2025-01-31 15:31:35,852 - DEBUG - dispatch pc=10, inst=LOAD_FAST(arg=1, lineno=1145)
2025-01-31 15:31:35,852 - DEBUG - stack []
2025-01-31 15:31:35,852 - DEBUG - dispatch pc=12, inst=UNARY_NEGATIVE(arg=None, lineno=1145)
2025-01-31 15:31:35,852 - DEBUG - stack ['$threshold10.3']
2025-01-31 15:31:35,852 - DEBUG - dispatch pc=14, inst=LOAD_FAST(arg=3, lineno=1145)
2025-01-31 15:31:35,852 - DEBUG - stack ['$12unary_negative.4']
2025-01-31 15:31:35,852 - DEBUG - dispatch pc=16, inst=DUP_TOP(arg=None, lineno=1145)
2025-01-31 15:31:35,852 - DEBUG - stack ['$12unary_negative.4', '$x014.5']
2025-01-31 15:31:35,852 - DEBUG - dispatch pc=18, inst=ROT_THREE(arg=None, lineno=1145)
2025-01-31 15:31:35,852 - DEBUG - stack ['$12unary_negative.4', '$x014.5', '$16dup_top.6']
2025-01-31 15:31:35,852 - DEBUG - dispatch pc=20, inst=COMPARE_OP(arg=1, lineno=1145)
2025-01-31 15:31:35,852 - DEBUG - stack ['$16dup_top.6', '$12unary_negative.4', '$x014.5']
2025-01-31 15:31:35,852 - DEBUG - dispatch pc=22, inst=POP_JUMP_IF_FALSE(arg=17, lineno=1145)
2025-01-31 15:31:35,852 - DEBUG - stack ['$16dup_top.6', '$20compare_op.7']
2025-01-31 15:31:35,852 - DEBUG - end state. edges=[Edge(pc=24, stack=('$16dup_top.6',), blockstack=(), npush=0), Edge(pc=32, stack=('$16dup_top.6',), blockstack=(), npush=0)]
2025-01-31 15:31:35,852 - DEBUG - pending: deque([State(pc_initial=24 nstack_initial=1), State(pc_initial=32 nstack_initial=1)])
2025-01-31 15:31:35,852 - DEBUG - stack: ['$phi24.0']
2025-01-31 15:31:35,852 - DEBUG - state.pc_initial: State(pc_initial=24 nstack_initial=1)
2025-01-31 15:31:35,852 - DEBUG - dispatch pc=24, inst=LOAD_FAST(arg=1, lineno=1145)
2025-01-31 15:31:35,852 - DEBUG - stack ['$phi24.0']
2025-01-31 15:31:35,852 - DEBUG - dispatch pc=26, inst=COMPARE_OP(arg=1, lineno=1145)
2025-01-31 15:31:35,853 - DEBUG - stack ['$phi24.0', '$threshold24.1']
2025-01-31 15:31:35,853 - DEBUG - dispatch pc=28, inst=POP_JUMP_IF_FALSE(arg=21, lineno=1145)
2025-01-31 15:31:35,853 - DEBUG - stack ['$26compare_op.2']
2025-01-31 15:31:35,853 - DEBUG - end state. edges=[Edge(pc=30, stack=(), blockstack=(), npush=0), Edge(pc=40, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:35,853 - DEBUG - pending: deque([State(pc_initial=32 nstack_initial=1), State(pc_initial=30 nstack_initial=0), State(pc_initial=40 nstack_initial=0)])
2025-01-31 15:31:35,853 - DEBUG - stack: ['$phi32.0']
2025-01-31 15:31:35,853 - DEBUG - state.pc_initial: State(pc_initial=32 nstack_initial=1)
2025-01-31 15:31:35,853 - DEBUG - dispatch pc=32, inst=POP_TOP(arg=None, lineno=1145)
2025-01-31 15:31:35,853 - DEBUG - stack ['$phi32.0']
2025-01-31 15:31:35,853 - DEBUG - dispatch pc=34, inst=JUMP_FORWARD(arg=2, lineno=1145)
2025-01-31 15:31:35,853 - DEBUG - stack []
2025-01-31 15:31:35,853 - DEBUG - end state. edges=[Edge(pc=40, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:35,853 - DEBUG - pending: deque([State(pc_initial=30 nstack_initial=0), State(pc_initial=40 nstack_initial=0), State(pc_initial=40 nstack_initial=0)])
2025-01-31 15:31:35,853 - DEBUG - stack: []
2025-01-31 15:31:35,853 - DEBUG - state.pc_initial: State(pc_initial=30 nstack_initial=0)
2025-01-31 15:31:35,853 - DEBUG - dispatch pc=30, inst=JUMP_FORWARD(arg=2, lineno=1145)
2025-01-31 15:31:35,853 - DEBUG - stack []
2025-01-31 15:31:35,853 - DEBUG - end state. edges=[Edge(pc=36, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:35,853 - DEBUG - pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=40 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2025-01-31 15:31:35,853 - DEBUG - stack: []
2025-01-31 15:31:35,853 - DEBUG - state.pc_initial: State(pc_initial=40 nstack_initial=0)
2025-01-31 15:31:35,853 - DEBUG - dispatch pc=40, inst=LOAD_FAST(arg=0, lineno=1148)
2025-01-31 15:31:35,853 - DEBUG - stack []
2025-01-31 15:31:35,853 - DEBUG - dispatch pc=42, inst=LOAD_CONST(arg=2, lineno=1148)
2025-01-31 15:31:35,853 - DEBUG - stack ['$x40.0']
2025-01-31 15:31:35,853 - DEBUG - dispatch pc=44, inst=BINARY_SUBSCR(arg=None, lineno=1148)
2025-01-31 15:31:35,853 - DEBUG - stack ['$x40.0', '$const42.1']
2025-01-31 15:31:35,853 - DEBUG - dispatch pc=46, inst=STORE_FAST(arg=4, lineno=1148)
2025-01-31 15:31:35,853 - DEBUG - stack ['$44binary_subscr.2']
2025-01-31 15:31:35,854 - DEBUG - dispatch pc=48, inst=LOAD_FAST(arg=1, lineno=1149)
2025-01-31 15:31:35,854 - DEBUG - stack []
2025-01-31 15:31:35,854 - DEBUG - dispatch pc=50, inst=UNARY_NEGATIVE(arg=None, lineno=1149)
2025-01-31 15:31:35,854 - DEBUG - stack ['$threshold48.3']
2025-01-31 15:31:35,854 - DEBUG - dispatch pc=52, inst=LOAD_FAST(arg=4, lineno=1149)
2025-01-31 15:31:35,854 - DEBUG - stack ['$50unary_negative.4']
2025-01-31 15:31:35,854 - DEBUG - dispatch pc=54, inst=DUP_TOP(arg=None, lineno=1149)
2025-01-31 15:31:35,854 - DEBUG - stack ['$50unary_negative.4', '$x152.5']
2025-01-31 15:31:35,854 - DEBUG - dispatch pc=56, inst=ROT_THREE(arg=None, lineno=1149)
2025-01-31 15:31:35,854 - DEBUG - stack ['$50unary_negative.4', '$x152.5', '$54dup_top.6']
2025-01-31 15:31:35,854 - DEBUG - dispatch pc=58, inst=COMPARE_OP(arg=1, lineno=1149)
2025-01-31 15:31:35,854 - DEBUG - stack ['$54dup_top.6', '$50unary_negative.4', '$x152.5']
2025-01-31 15:31:35,854 - DEBUG - dispatch pc=60, inst=POP_JUMP_IF_FALSE(arg=36, lineno=1149)
2025-01-31 15:31:35,854 - DEBUG - stack ['$54dup_top.6', '$58compare_op.7']
2025-01-31 15:31:35,854 - DEBUG - end state. edges=[Edge(pc=62, stack=('$54dup_top.6',), blockstack=(), npush=0), Edge(pc=70, stack=('$54dup_top.6',), blockstack=(), npush=0)]
2025-01-31 15:31:35,854 - DEBUG - pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=36 nstack_initial=0), State(pc_initial=62 nstack_initial=1), State(pc_initial=70 nstack_initial=1)])
2025-01-31 15:31:35,854 - DEBUG - pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=62 nstack_initial=1), State(pc_initial=70 nstack_initial=1)])
2025-01-31 15:31:35,854 - DEBUG - stack: []
2025-01-31 15:31:35,854 - DEBUG - state.pc_initial: State(pc_initial=36 nstack_initial=0)
2025-01-31 15:31:35,854 - DEBUG - dispatch pc=36, inst=LOAD_CONST(arg=1, lineno=1146)
2025-01-31 15:31:35,854 - DEBUG - stack []
2025-01-31 15:31:35,854 - DEBUG - dispatch pc=38, inst=STORE_FAST(arg=3, lineno=1146)
2025-01-31 15:31:35,854 - DEBUG - stack ['$const36.0']
2025-01-31 15:31:35,854 - DEBUG - end state. edges=[Edge(pc=40, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:35,854 - DEBUG - pending: deque([State(pc_initial=62 nstack_initial=1), State(pc_initial=70 nstack_initial=1), State(pc_initial=40 nstack_initial=0)])
2025-01-31 15:31:35,854 - DEBUG - stack: ['$phi62.0']
2025-01-31 15:31:35,854 - DEBUG - state.pc_initial: State(pc_initial=62 nstack_initial=1)
2025-01-31 15:31:35,855 - DEBUG - dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=1149)
2025-01-31 15:31:35,855 - DEBUG - stack ['$phi62.0']
2025-01-31 15:31:35,855 - DEBUG - dispatch pc=64, inst=COMPARE_OP(arg=1, lineno=1149)
2025-01-31 15:31:35,855 - DEBUG - stack ['$phi62.0', '$threshold62.1']
2025-01-31 15:31:35,855 - DEBUG - dispatch pc=66, inst=POP_JUMP_IF_FALSE(arg=40, lineno=1149)
2025-01-31 15:31:35,855 - DEBUG - stack ['$64compare_op.2']
2025-01-31 15:31:35,855 - DEBUG - end state. edges=[Edge(pc=68, stack=(), blockstack=(), npush=0), Edge(pc=78, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:35,855 - DEBUG - pending: deque([State(pc_initial=70 nstack_initial=1), State(pc_initial=40 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2025-01-31 15:31:35,855 - DEBUG - stack: ['$phi70.0']
2025-01-31 15:31:35,855 - DEBUG - state.pc_initial: State(pc_initial=70 nstack_initial=1)
2025-01-31 15:31:35,855 - DEBUG - dispatch pc=70, inst=POP_TOP(arg=None, lineno=1149)
2025-01-31 15:31:35,855 - DEBUG - stack ['$phi70.0']
2025-01-31 15:31:35,855 - DEBUG - dispatch pc=72, inst=JUMP_FORWARD(arg=2, lineno=1149)
2025-01-31 15:31:35,855 - DEBUG - stack []
2025-01-31 15:31:35,855 - DEBUG - end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:35,855 - DEBUG - pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=78 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2025-01-31 15:31:35,855 - DEBUG - pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=78 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2025-01-31 15:31:35,855 - DEBUG - stack: []
2025-01-31 15:31:35,855 - DEBUG - state.pc_initial: State(pc_initial=68 nstack_initial=0)
2025-01-31 15:31:35,855 - DEBUG - dispatch pc=68, inst=JUMP_FORWARD(arg=2, lineno=1149)
2025-01-31 15:31:35,855 - DEBUG - stack []
2025-01-31 15:31:35,855 - DEBUG - end state. edges=[Edge(pc=74, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:35,855 - DEBUG - pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=78 nstack_initial=0), State(pc_initial=74 nstack_initial=0)])
2025-01-31 15:31:35,855 - DEBUG - stack: []
2025-01-31 15:31:35,855 - DEBUG - state.pc_initial: State(pc_initial=78 nstack_initial=0)
2025-01-31 15:31:35,855 - DEBUG - dispatch pc=78, inst=LOAD_FAST(arg=2, lineno=1152)
2025-01-31 15:31:35,855 - DEBUG - stack []
2025-01-31 15:31:35,855 - DEBUG - dispatch pc=80, inst=POP_JUMP_IF_FALSE(arg=52, lineno=1152)
2025-01-31 15:31:35,856 - DEBUG - stack ['$zero_pos78.0']
2025-01-31 15:31:35,856 - DEBUG - end state. edges=[Edge(pc=82, stack=(), blockstack=(), npush=0), Edge(pc=102, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:35,856 - DEBUG - pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=82 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
2025-01-31 15:31:35,856 - DEBUG - pending: deque([State(pc_initial=74 nstack_initial=0), State(pc_initial=82 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
2025-01-31 15:31:35,856 - DEBUG - stack: []
2025-01-31 15:31:35,856 - DEBUG - state.pc_initial: State(pc_initial=74 nstack_initial=0)
2025-01-31 15:31:35,856 - DEBUG - dispatch pc=74, inst=LOAD_CONST(arg=1, lineno=1150)
2025-01-31 15:31:35,856 - DEBUG - stack []
2025-01-31 15:31:35,856 - DEBUG - dispatch pc=76, inst=STORE_FAST(arg=4, lineno=1150)
2025-01-31 15:31:35,856 - DEBUG - stack ['$const74.0']
2025-01-31 15:31:35,856 - DEBUG - end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:35,856 - DEBUG - pending: deque([State(pc_initial=82 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2025-01-31 15:31:35,856 - DEBUG - stack: []
2025-01-31 15:31:35,856 - DEBUG - state.pc_initial: State(pc_initial=82 nstack_initial=0)
2025-01-31 15:31:35,856 - DEBUG - dispatch pc=82, inst=LOAD_GLOBAL(arg=0, lineno=1153)
2025-01-31 15:31:35,856 - DEBUG - stack []
2025-01-31 15:31:35,856 - DEBUG - dispatch pc=84, inst=LOAD_METHOD(arg=1, lineno=1153)
2025-01-31 15:31:35,856 - DEBUG - stack ['$82load_global.0']
2025-01-31 15:31:35,856 - DEBUG - dispatch pc=86, inst=LOAD_FAST(arg=3, lineno=1153)
2025-01-31 15:31:35,856 - DEBUG - stack ['$84load_method.1']
2025-01-31 15:31:35,856 - DEBUG - dispatch pc=88, inst=CALL_METHOD(arg=1, lineno=1153)
2025-01-31 15:31:35,856 - DEBUG - stack ['$84load_method.1', '$x086.2']
2025-01-31 15:31:35,856 - DEBUG - dispatch pc=90, inst=LOAD_GLOBAL(arg=0, lineno=1153)
2025-01-31 15:31:35,856 - DEBUG - stack ['$88call_method.3']
2025-01-31 15:31:35,856 - DEBUG - dispatch pc=92, inst=LOAD_METHOD(arg=1, lineno=1153)
2025-01-31 15:31:35,856 - DEBUG - stack ['$88call_method.3', '$90load_global.4']
2025-01-31 15:31:35,856 - DEBUG - dispatch pc=94, inst=LOAD_FAST(arg=4, lineno=1153)
2025-01-31 15:31:35,857 - DEBUG - stack ['$88call_method.3', '$92load_method.5']
2025-01-31 15:31:35,857 - DEBUG - dispatch pc=96, inst=CALL_METHOD(arg=1, lineno=1153)
2025-01-31 15:31:35,857 - DEBUG - stack ['$88call_method.3', '$92load_method.5', '$x194.6']
2025-01-31 15:31:35,857 - DEBUG - dispatch pc=98, inst=COMPARE_OP(arg=3, lineno=1153)
2025-01-31 15:31:35,857 - DEBUG - stack ['$88call_method.3', '$96call_method.7']
2025-01-31 15:31:35,857 - DEBUG - dispatch pc=100, inst=RETURN_VALUE(arg=None, lineno=1153)
2025-01-31 15:31:35,857 - DEBUG - stack ['$98compare_op.8']
2025-01-31 15:31:35,857 - DEBUG - end state. edges=[]
2025-01-31 15:31:35,857 - DEBUG - pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2025-01-31 15:31:35,857 - DEBUG - stack: []
2025-01-31 15:31:35,857 - DEBUG - state.pc_initial: State(pc_initial=102 nstack_initial=0)
2025-01-31 15:31:35,857 - DEBUG - dispatch pc=102, inst=LOAD_GLOBAL(arg=0, lineno=1155)
2025-01-31 15:31:35,857 - DEBUG - stack []
2025-01-31 15:31:35,857 - DEBUG - dispatch pc=104, inst=LOAD_METHOD(arg=2, lineno=1155)
2025-01-31 15:31:35,857 - DEBUG - stack ['$102load_global.0']
2025-01-31 15:31:35,857 - DEBUG - dispatch pc=106, inst=LOAD_FAST(arg=3, lineno=1155)
2025-01-31 15:31:35,857 - DEBUG - stack ['$104load_method.1']
2025-01-31 15:31:35,857 - DEBUG - dispatch pc=108, inst=CALL_METHOD(arg=1, lineno=1155)
2025-01-31 15:31:35,857 - DEBUG - stack ['$104load_method.1', '$x0106.2']
2025-01-31 15:31:35,857 - DEBUG - dispatch pc=110, inst=LOAD_GLOBAL(arg=0, lineno=1155)
2025-01-31 15:31:35,857 - DEBUG - stack ['$108call_method.3']
2025-01-31 15:31:35,857 - DEBUG - dispatch pc=112, inst=LOAD_METHOD(arg=2, lineno=1155)
2025-01-31 15:31:35,857 - DEBUG - stack ['$108call_method.3', '$110load_global.4']
2025-01-31 15:31:35,857 - DEBUG - dispatch pc=114, inst=LOAD_FAST(arg=4, lineno=1155)
2025-01-31 15:31:35,857 - DEBUG - stack ['$108call_method.3', '$112load_method.5']
2025-01-31 15:31:35,857 - DEBUG - dispatch pc=116, inst=CALL_METHOD(arg=1, lineno=1155)
2025-01-31 15:31:35,857 - DEBUG - stack ['$108call_method.3', '$112load_method.5', '$x1114.6']
2025-01-31 15:31:35,857 - DEBUG - dispatch pc=118, inst=COMPARE_OP(arg=3, lineno=1155)
2025-01-31 15:31:35,857 - DEBUG - stack ['$108call_method.3', '$116call_method.7']
2025-01-31 15:31:35,858 - DEBUG - dispatch pc=120, inst=RETURN_VALUE(arg=None, lineno=1155)
2025-01-31 15:31:35,858 - DEBUG - stack ['$118compare_op.8']
2025-01-31 15:31:35,858 - DEBUG - end state. edges=[]
2025-01-31 15:31:35,858 - DEBUG - pending: deque([State(pc_initial=78 nstack_initial=0)])
2025-01-31 15:31:35,858 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:31:35,858 - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=24 nstack_initial=1): {'$phi24.0'},
             State(pc_initial=30 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=1): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=40 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=1): {'$phi62.0'},
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=1): set(),
             State(pc_initial=74 nstack_initial=0): set(),
             State(pc_initial=78 nstack_initial=0): set(),
             State(pc_initial=82 nstack_initial=0): set(),
             State(pc_initial=102 nstack_initial=0): set()})
2025-01-31 15:31:35,858 - DEBUG - defmap: {'$phi24.0': State(pc_initial=0 nstack_initial=0),
 '$phi32.0': State(pc_initial=0 nstack_initial=0),
 '$phi62.0': State(pc_initial=40 nstack_initial=0),
 '$phi70.0': State(pc_initial=40 nstack_initial=0)}
2025-01-31 15:31:35,858 - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi24.0': {('$16dup_top.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.0': {('$16dup_top.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$54dup_top.6',
                           State(pc_initial=40 nstack_initial=0))},
             '$phi70.0': {('$54dup_top.6',
                           State(pc_initial=40 nstack_initial=0))}})
2025-01-31 15:31:35,859 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi24.0': {('$16dup_top.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.0': {('$16dup_top.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$54dup_top.6',
                           State(pc_initial=40 nstack_initial=0))},
             '$phi70.0': {('$54dup_top.6',
                           State(pc_initial=40 nstack_initial=0))}})
2025-01-31 15:31:35,859 - DEBUG - keep phismap: {'$phi24.0': {('$16dup_top.6', State(pc_initial=0 nstack_initial=0))},
 '$phi62.0': {('$54dup_top.6', State(pc_initial=40 nstack_initial=0))}}
2025-01-31 15:31:35,859 - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi24.0': '$16dup_top.6'},
             State(pc_initial=40 nstack_initial=0): {'$phi62.0': '$54dup_top.6'}})
2025-01-31 15:31:35,859 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:31:35,859 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'value': '$6binary_subscr.2'}), (10, {'res': '$threshold10.3'}), (12, {'value': '$threshold10.3', 'res': '$12unary_negative.4'}), (14, {'res': '$x014.5'}), (16, {'orig': ['$x014.5'], 'duped': ['$16dup_top.6']}), (20, {'lhs': '$12unary_negative.4', 'rhs': '$x014.5', 'res': '$20compare_op.7'}), (22, {'pred': '$20compare_op.7'})), outgoing_phis={'$phi24.0': '$16dup_top.6'}, blockstack=(), active_try_block=None, outgoing_edgepushed={24: ('$16dup_top.6',), 32: ('$16dup_top.6',)})
2025-01-31 15:31:35,859 - DEBUG - block_infos State(pc_initial=24 nstack_initial=1):
AdaptBlockInfo(insts=((24, {'res': '$threshold24.1'}), (26, {'lhs': '$phi24.0', 'rhs': '$threshold24.1', 'res': '$26compare_op.2'}), (28, {'pred': '$26compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: (), 40: ()})
2025-01-31 15:31:35,859 - DEBUG - block_infos State(pc_initial=30 nstack_initial=0):
AdaptBlockInfo(insts=((30, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: ()})
2025-01-31 15:31:35,859 - DEBUG - block_infos State(pc_initial=32 nstack_initial=1):
AdaptBlockInfo(insts=((34, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: ()})
2025-01-31 15:31:35,859 - DEBUG - block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$const36.0'}), (38, {'value': '$const36.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: ()})
2025-01-31 15:31:35,859 - DEBUG - block_infos State(pc_initial=40 nstack_initial=0):
AdaptBlockInfo(insts=((40, {'res': '$x40.0'}), (42, {'res': '$const42.1'}), (44, {'index': '$const42.1', 'target': '$x40.0', 'res': '$44binary_subscr.2'}), (46, {'value': '$44binary_subscr.2'}), (48, {'res': '$threshold48.3'}), (50, {'value': '$threshold48.3', 'res': '$50unary_negative.4'}), (52, {'res': '$x152.5'}), (54, {'orig': ['$x152.5'], 'duped': ['$54dup_top.6']}), (58, {'lhs': '$50unary_negative.4', 'rhs': '$x152.5', 'res': '$58compare_op.7'}), (60, {'pred': '$58compare_op.7'})), outgoing_phis={'$phi62.0': '$54dup_top.6'}, blockstack=(), active_try_block=None, outgoing_edgepushed={62: ('$54dup_top.6',), 70: ('$54dup_top.6',)})
2025-01-31 15:31:35,859 - DEBUG - block_infos State(pc_initial=62 nstack_initial=1):
AdaptBlockInfo(insts=((62, {'res': '$threshold62.1'}), (64, {'lhs': '$phi62.0', 'rhs': '$threshold62.1', 'res': '$64compare_op.2'}), (66, {'pred': '$64compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={68: (), 78: ()})
2025-01-31 15:31:35,859 - DEBUG - block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={74: ()})
2025-01-31 15:31:35,860 - DEBUG - block_infos State(pc_initial=70 nstack_initial=1):
AdaptBlockInfo(insts=((72, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: ()})
2025-01-31 15:31:35,860 - DEBUG - block_infos State(pc_initial=74 nstack_initial=0):
AdaptBlockInfo(insts=((74, {'res': '$const74.0'}), (76, {'value': '$const74.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: ()})
2025-01-31 15:31:35,860 - DEBUG - block_infos State(pc_initial=78 nstack_initial=0):
AdaptBlockInfo(insts=((78, {'res': '$zero_pos78.0'}), (80, {'pred': '$zero_pos78.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={82: (), 102: ()})
2025-01-31 15:31:35,860 - DEBUG - block_infos State(pc_initial=82 nstack_initial=0):
AdaptBlockInfo(insts=((82, {'res': '$82load_global.0'}), (84, {'item': '$82load_global.0', 'res': '$84load_method.1'}), (86, {'res': '$x086.2'}), (88, {'func': '$84load_method.1', 'args': ['$x086.2'], 'res': '$88call_method.3'}), (90, {'res': '$90load_global.4'}), (92, {'item': '$90load_global.4', 'res': '$92load_method.5'}), (94, {'res': '$x194.6'}), (96, {'func': '$92load_method.5', 'args': ['$x194.6'], 'res': '$96call_method.7'}), (98, {'lhs': '$88call_method.3', 'rhs': '$96call_method.7', 'res': '$98compare_op.8'}), (100, {'retval': '$98compare_op.8', 'castval': '$100return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:35,860 - DEBUG - block_infos State(pc_initial=102 nstack_initial=0):
AdaptBlockInfo(insts=((102, {'res': '$102load_global.0'}), (104, {'item': '$102load_global.0', 'res': '$104load_method.1'}), (106, {'res': '$x0106.2'}), (108, {'func': '$104load_method.1', 'args': ['$x0106.2'], 'res': '$108call_method.3'}), (110, {'res': '$110load_global.4'}), (112, {'item': '$110load_global.4', 'res': '$112load_method.5'}), (114, {'res': '$x1114.6'}), (116, {'func': '$112load_method.5', 'args': ['$x1114.6'], 'res': '$116call_method.7'}), (118, {'lhs': '$108call_method.3', 'rhs': '$116call_method.7', 'res': '$118compare_op.8'}), (120, {'retval': '$118compare_op.8', 'castval': '$120return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:35,861 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    threshold = arg(1, name=threshold)       ['threshold']
    zero_pos = arg(2, name=zero_pos)         ['zero_pos']
    $const4.1 = const(int, 0)                ['$const4.1']
    x0 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$const4.1', 'x', 'x0']
    $12unary_negative.4 = unary(fn=<built-in function neg>, value=threshold) ['$12unary_negative.4', 'threshold']
    $20compare_op.7 = $12unary_negative.4 <= x0 ['$12unary_negative.4', '$20compare_op.7', 'x0']
    bool22 = global(bool: <class 'bool'>)    ['bool22']
    $22pred = call bool22($20compare_op.7, func=bool22, args=(Var($20compare_op.7, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None) ['$20compare_op.7', '$22pred', 'bool22']
    $phi24.0 = x0                            ['$phi24.0', 'x0']
    branch $22pred, 24, 32                   ['$22pred']
label 24:
    $26compare_op.2 = $phi24.0 <= threshold  ['$26compare_op.2', '$phi24.0', 'threshold']
    bool28 = global(bool: <class 'bool'>)    ['bool28']
    $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None) ['$26compare_op.2', '$28pred', 'bool28']
    branch $28pred, 30, 40                   ['$28pred']
label 30:
    jump 36                                  []
label 32:
    jump 40                                  []
label 36:
    x0 = const(int, 0)                       ['x0']
    jump 40                                  []
label 40:
    $const42.1 = const(int, -1)              ['$const42.1']
    x1 = getitem(value=x, index=$const42.1, fn=<built-in function getitem>) ['$const42.1', 'x', 'x1']
    $50unary_negative.4 = unary(fn=<built-in function neg>, value=threshold) ['$50unary_negative.4', 'threshold']
    $58compare_op.7 = $50unary_negative.4 <= x1 ['$50unary_negative.4', '$58compare_op.7', 'x1']
    bool60 = global(bool: <class 'bool'>)    ['bool60']
    $60pred = call bool60($58compare_op.7, func=bool60, args=(Var($58compare_op.7, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None) ['$58compare_op.7', '$60pred', 'bool60']
    $phi62.0 = x1                            ['$phi62.0', 'x1']
    branch $60pred, 62, 70                   ['$60pred']
label 62:
    $64compare_op.2 = $phi62.0 <= threshold  ['$64compare_op.2', '$phi62.0', 'threshold']
    bool66 = global(bool: <class 'bool'>)    ['bool66']
    $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None) ['$64compare_op.2', '$66pred', 'bool66']
    branch $66pred, 68, 78                   ['$66pred']
label 68:
    jump 74                                  []
label 70:
    jump 78                                  []
label 74:
    x1 = const(int, 0)                       ['x1']
    jump 78                                  []
label 78:
    bool80 = global(bool: <class 'bool'>)    ['bool80']
    $80pred = call bool80(zero_pos, func=bool80, args=(Var(zero_pos, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None) ['$80pred', 'bool80', 'zero_pos']
    branch $80pred, 82, 102                  ['$80pred']
label 82:
    $82load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>) ['$82load_global.0']
    $84load_method.1 = getattr(value=$82load_global.0, attr=signbit) ['$82load_global.0', '$84load_method.1']
    $88call_method.3 = call $84load_method.1(x0, func=$84load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None) ['$84load_method.1', '$88call_method.3', 'x0']
    $90load_global.4 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>) ['$90load_global.4']
    $92load_method.5 = getattr(value=$90load_global.4, attr=signbit) ['$90load_global.4', '$92load_method.5']
    $96call_method.7 = call $92load_method.5(x1, func=$92load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None) ['$92load_method.5', '$96call_method.7', 'x1']
    $98compare_op.8 = $88call_method.3 != $96call_method.7 ['$88call_method.3', '$96call_method.7', '$98compare_op.8']
    $100return_value.9 = cast(value=$98compare_op.8) ['$100return_value.9', '$98compare_op.8']
    return $100return_value.9                ['$100return_value.9']
label 102:
    $102load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>) ['$102load_global.0']
    $104load_method.1 = getattr(value=$102load_global.0, attr=sign) ['$102load_global.0', '$104load_method.1']
    $108call_method.3 = call $104load_method.1(x0, func=$104load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None) ['$104load_method.1', '$108call_method.3', 'x0']
    $110load_global.4 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>) ['$110load_global.4']
    $112load_method.5 = getattr(value=$110load_global.4, attr=sign) ['$110load_global.4', '$112load_method.5']
    $116call_method.7 = call $112load_method.5(x1, func=$112load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None) ['$112load_method.5', '$116call_method.7', 'x1']
    $118compare_op.8 = $108call_method.3 != $116call_method.7 ['$108call_method.3', '$116call_method.7', '$118compare_op.8']
    $120return_value.9 = cast(value=$118compare_op.8) ['$118compare_op.8', '$120return_value.9']
    return $120return_value.9                ['$120return_value.9']

2025-01-31 15:31:36,062 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=1158)
           2	LOAD_GLOBAL(arg=0, lineno=1174)
           4	LOAD_FAST(arg=0, lineno=1174)
           6	LOAD_FAST(arg=1, lineno=1174)
           8	LOAD_FAST(arg=2, lineno=1174)
          10	CALL_FUNCTION(arg=3, lineno=1174)
          12	LOAD_FAST(arg=3, lineno=1174)
          14	LOAD_CONST(arg=1, lineno=1174)
          16	LOAD_CONST(arg=1, lineno=1174)
          18	BUILD_SLICE(arg=2, lineno=1174)
          20	STORE_SUBSCR(arg=None, lineno=1174)
          22	LOAD_CONST(arg=1, lineno=1174)
          24	RETURN_VALUE(arg=None, lineno=1174)
2025-01-31 15:31:36,063 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:31:36,063 - DEBUG - stack: []
2025-01-31 15:31:36,063 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:31:36,063 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=1158)
2025-01-31 15:31:36,063 - DEBUG - stack []
2025-01-31 15:31:36,063 - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=1174)
2025-01-31 15:31:36,063 - DEBUG - stack []
2025-01-31 15:31:36,063 - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=1174)
2025-01-31 15:31:36,063 - DEBUG - stack ['$2load_global.0']
2025-01-31 15:31:36,063 - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=1174)
2025-01-31 15:31:36,063 - DEBUG - stack ['$2load_global.0', '$x4.1']
2025-01-31 15:31:36,063 - DEBUG - dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=1174)
2025-01-31 15:31:36,063 - DEBUG - stack ['$2load_global.0', '$x4.1', '$threshold6.2']
2025-01-31 15:31:36,063 - DEBUG - dispatch pc=10, inst=CALL_FUNCTION(arg=3, lineno=1174)
2025-01-31 15:31:36,063 - DEBUG - stack ['$2load_global.0', '$x4.1', '$threshold6.2', '$zero_pos8.3']
2025-01-31 15:31:36,063 - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=3, lineno=1174)
2025-01-31 15:31:36,063 - DEBUG - stack ['$10call_function.4']
2025-01-31 15:31:36,063 - DEBUG - dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=1174)
2025-01-31 15:31:36,063 - DEBUG - stack ['$10call_function.4', '$y12.5']
2025-01-31 15:31:36,063 - DEBUG - dispatch pc=16, inst=LOAD_CONST(arg=1, lineno=1174)
2025-01-31 15:31:36,063 - DEBUG - stack ['$10call_function.4', '$y12.5', '$const14.6']
2025-01-31 15:31:36,063 - DEBUG - dispatch pc=18, inst=BUILD_SLICE(arg=2, lineno=1174)
2025-01-31 15:31:36,063 - DEBUG - stack ['$10call_function.4', '$y12.5', '$const14.6', '$const16.7']
2025-01-31 15:31:36,063 - DEBUG - dispatch pc=20, inst=STORE_SUBSCR(arg=None, lineno=1174)
2025-01-31 15:31:36,063 - DEBUG - stack ['$10call_function.4', '$y12.5', '$18build_slice.9']
2025-01-31 15:31:36,063 - DEBUG - dispatch pc=22, inst=LOAD_CONST(arg=1, lineno=1174)
2025-01-31 15:31:36,064 - DEBUG - stack []
2025-01-31 15:31:36,064 - DEBUG - dispatch pc=24, inst=RETURN_VALUE(arg=None, lineno=1174)
2025-01-31 15:31:36,064 - DEBUG - stack ['$const22.10']
2025-01-31 15:31:36,064 - DEBUG - end state. edges=[]
2025-01-31 15:31:36,064 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:31:36,064 - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-01-31 15:31:36,064 - DEBUG - defmap: {}
2025-01-31 15:31:36,064 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:36,064 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:36,064 - DEBUG - keep phismap: {}
2025-01-31 15:31:36,064 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-01-31 15:31:36,064 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:31:36,064 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$x4.1'}), (6, {'res': '$threshold6.2'}), (8, {'res': '$zero_pos8.3'}), (10, {'func': '$2load_global.0', 'args': ['$x4.1', '$threshold6.2', '$zero_pos8.3'], 'res': '$10call_function.4'}), (12, {'res': '$y12.5'}), (14, {'res': '$const14.6'}), (16, {'res': '$const16.7'}), (18, {'start': '$const14.6', 'stop': '$const16.7', 'step': None, 'res': '$18build_slice.9', 'slicevar': '$18build_slice.8'}), (20, {'target': '$y12.5', 'index': '$18build_slice.9', 'value': '$10call_function.4'}), (22, {'res': '$const22.10'}), (24, {'retval': '$const22.10', 'castval': '$24return_value.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:36,064 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    threshold = arg(1, name=threshold)       ['threshold']
    zero_pos = arg(2, name=zero_pos)         ['zero_pos']
    y = arg(3, name=y)                       ['y']
    $2load_global.0 = global(_zc_stencil: <numba.stencils.stencil.StencilFunc object at 0x7c89f0ee5810>) ['$2load_global.0']
    $10call_function.4 = call $2load_global.0(x, threshold, zero_pos, func=$2load_global.0, args=[Var(x, audio.py:1158), Var(threshold, audio.py:1158), Var(zero_pos, audio.py:1158)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', 'threshold', 'x', 'zero_pos']
    $const14.6 = const(NoneType, None)       ['$const14.6']
    $const16.7 = const(NoneType, None)       ['$const16.7']
    $18build_slice.8 = global(slice: <class 'slice'>) ['$18build_slice.8']
    $18build_slice.9 = call $18build_slice.8($const14.6, $const16.7, func=$18build_slice.8, args=(Var($const14.6, audio.py:1174), Var($const16.7, audio.py:1174)), kws=(), vararg=None, varkwarg=None, target=None) ['$18build_slice.8', '$18build_slice.9', '$const14.6', '$const16.7']
    y[$18build_slice.9] = $10call_function.4 ['$10call_function.4', '$18build_slice.9', 'y']
    $const22.10 = const(NoneType, None)      ['$const22.10']
    $24return_value.11 = cast(value=$const22.10) ['$24return_value.11', '$const22.10']
    return $24return_value.11                ['$24return_value.11']

2025-01-31 15:31:36,069 - DEBUG - ==== SSA block analysis pass on 0
2025-01-31 15:31:36,069 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89f0324550>
2025-01-31 15:31:36,069 - DEBUG - on stmt: x = arg(0, name=x)
2025-01-31 15:31:36,069 - DEBUG - on stmt: threshold = arg(1, name=threshold)
2025-01-31 15:31:36,069 - DEBUG - on stmt: zero_pos = arg(2, name=zero_pos)
2025-01-31 15:31:36,069 - DEBUG - on stmt: y = arg(3, name=y)
2025-01-31 15:31:36,069 - DEBUG - on stmt: $2load_global.0 = global(_zc_stencil: <numba.stencils.stencil.StencilFunc object at 0x7c89f0ee5810>)
2025-01-31 15:31:36,069 - DEBUG - on stmt: $10call_function.4 = call $2load_global.0(x, threshold, zero_pos, func=$2load_global.0, args=[Var(x, audio.py:1158), Var(threshold, audio.py:1158), Var(zero_pos, audio.py:1158)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,069 - DEBUG - on stmt: $const14.6 = const(NoneType, None)
2025-01-31 15:31:36,069 - DEBUG - on stmt: $const16.7 = const(NoneType, None)
2025-01-31 15:31:36,069 - DEBUG - on stmt: $18build_slice.8 = global(slice: <class 'slice'>)
2025-01-31 15:31:36,069 - DEBUG - on stmt: $18build_slice.9 = call $18build_slice.8($const14.6, $const16.7, func=$18build_slice.8, args=(Var($const14.6, audio.py:1174), Var($const16.7, audio.py:1174)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,069 - DEBUG - on stmt: y[slice(None, None, None)] = $10call_function.4
2025-01-31 15:31:36,070 - DEBUG - on stmt: $const22.10 = const(NoneType, None)
2025-01-31 15:31:36,070 - DEBUG - on stmt: $24return_value.11 = cast(value=$const22.10)
2025-01-31 15:31:36,070 - DEBUG - on stmt: return $24return_value.11
2025-01-31 15:31:36,070 - DEBUG - defs defaultdict(<class 'list'>,
            {'$10call_function.4': [(<numba.core.ir.Assign object at 0x7c89f03251e0>,
                                     0)],
             '$18build_slice.8': [(<numba.core.ir.Assign object at 0x7c89f0325720>,
                                   0)],
             '$18build_slice.9': [(<numba.core.ir.Assign object at 0x7c89f0325840>,
                                   0)],
             '$24return_value.11': [(<numba.core.ir.Assign object at 0x7c89f0325c00>,
                                     0)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x7c89f0324ca0>,
                                  0)],
             '$const14.6': [(<numba.core.ir.Assign object at 0x7c89f0325420>,
                             0)],
             '$const16.7': [(<numba.core.ir.Assign object at 0x7c89f03255a0>,
                             0)],
             '$const22.10': [(<numba.core.ir.Assign object at 0x7c89f0325a80>,
                              0)],
             'threshold': [(<numba.core.ir.Assign object at 0x7c89f03248e0>,
                            0)],
             'x': [(<numba.core.ir.Assign object at 0x7c89f03240d0>, 0)],
             'y': [(<numba.core.ir.Assign object at 0x7c89f0324b20>, 0)],
             'zero_pos': [(<numba.core.ir.Assign object at 0x7c89f0324a00>,
                           0)]})
2025-01-31 15:31:36,070 - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x7c89f030f370>
2025-01-31 15:31:36,103 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_FAST(arg=0, lineno=2)
           4	LOAD_ATTR(arg=0, lineno=2)
           6	STORE_FAST(arg=3, lineno=2)
           8	LOAD_GLOBAL(arg=1, lineno=3)
          10	LOAD_ATTR(arg=2, lineno=3)
          12	LOAD_FAST(arg=3, lineno=3)
          14	LOAD_GLOBAL(arg=1, lineno=3)
          16	LOAD_ATTR(arg=3, lineno=3)
          18	LOAD_CONST(arg=1, lineno=3)
          20	CALL_FUNCTION_KW(arg=2, lineno=3)
          22	STORE_FAST(arg=4, lineno=3)
          24	LOAD_CONST(arg=2, lineno=4)
          26	LOAD_FAST(arg=4, lineno=4)
          28	LOAD_CONST(arg=0, lineno=4)
          30	LOAD_CONST(arg=3, lineno=4)
          32	BUILD_SLICE(arg=2, lineno=4)
          34	STORE_SUBSCR(arg=None, lineno=4)
          36	LOAD_CONST(arg=2, lineno=5)
          38	LOAD_FAST(arg=4, lineno=5)
          40	LOAD_CONST(arg=2, lineno=5)
          42	LOAD_CONST(arg=0, lineno=5)
          44	BUILD_SLICE(arg=2, lineno=5)
          46	STORE_SUBSCR(arg=None, lineno=5)
          48	LOAD_GLOBAL(arg=4, lineno=6)
          50	LOAD_GLOBAL(arg=5, lineno=6)
          52	LOAD_CONST(arg=2, lineno=6)
          54	LOAD_CONST(arg=4, lineno=6)
          56	CALL_FUNCTION(arg=2, lineno=6)
          58	UNARY_NEGATIVE(arg=None, lineno=6)
          60	LOAD_FAST(arg=3, lineno=6)
          62	LOAD_CONST(arg=2, lineno=6)
          64	BINARY_SUBSCR(arg=None, lineno=6)
          66	LOAD_GLOBAL(arg=6, lineno=6)
          68	LOAD_CONST(arg=2, lineno=6)
          70	LOAD_CONST(arg=2, lineno=6)
          72	CALL_FUNCTION(arg=2, lineno=6)
          74	BINARY_SUBTRACT(arg=None, lineno=6)
          76	CALL_FUNCTION(arg=2, lineno=6)
          78	GET_ITER(arg=None, lineno=6)
>         80	FOR_ITER(arg=4, lineno=6)
          82	STORE_FAST(arg=5, lineno=6)
          84	LOAD_CONST(arg=2, lineno=7)
          86	STORE_FAST(arg=6, lineno=7)
          88	JUMP_ABSOLUTE(arg=41, lineno=7)
>         90	LOAD_FAST(arg=4, lineno=8)
          92	RETURN_VALUE(arg=None, lineno=8)
2025-01-31 15:31:36,103 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:31:36,103 - DEBUG - stack: []
2025-01-31 15:31:36,103 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:31:36,103 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=1)
2025-01-31 15:31:36,103 - DEBUG - stack []
2025-01-31 15:31:36,103 - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=2)
2025-01-31 15:31:36,103 - DEBUG - stack []
2025-01-31 15:31:36,103 - DEBUG - dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=2)
2025-01-31 15:31:36,103 - DEBUG - stack ['$x2.0']
2025-01-31 15:31:36,103 - DEBUG - dispatch pc=6, inst=STORE_FAST(arg=3, lineno=2)
2025-01-31 15:31:36,103 - DEBUG - stack ['$4load_attr.1']
2025-01-31 15:31:36,103 - DEBUG - dispatch pc=8, inst=LOAD_GLOBAL(arg=1, lineno=3)
2025-01-31 15:31:36,103 - DEBUG - stack []
2025-01-31 15:31:36,103 - DEBUG - dispatch pc=10, inst=LOAD_ATTR(arg=2, lineno=3)
2025-01-31 15:31:36,103 - DEBUG - stack ['$8load_global.2']
2025-01-31 15:31:36,103 - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=3, lineno=3)
2025-01-31 15:31:36,103 - DEBUG - stack ['$10load_attr.3']
2025-01-31 15:31:36,103 - DEBUG - dispatch pc=14, inst=LOAD_GLOBAL(arg=1, lineno=3)
2025-01-31 15:31:36,103 - DEBUG - stack ['$10load_attr.3', '$full_shape012.4']
2025-01-31 15:31:36,103 - DEBUG - dispatch pc=16, inst=LOAD_ATTR(arg=3, lineno=3)
2025-01-31 15:31:36,103 - DEBUG - stack ['$10load_attr.3', '$full_shape012.4', '$14load_global.5']
2025-01-31 15:31:36,103 - DEBUG - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=3)
2025-01-31 15:31:36,103 - DEBUG - stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6']
2025-01-31 15:31:36,104 - DEBUG - dispatch pc=20, inst=CALL_FUNCTION_KW(arg=2, lineno=3)
2025-01-31 15:31:36,104 - DEBUG - stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6', '$const18.7']
2025-01-31 15:31:36,104 - DEBUG - dispatch pc=22, inst=STORE_FAST(arg=4, lineno=3)
2025-01-31 15:31:36,104 - DEBUG - stack ['$20call_function_kw.8']
2025-01-31 15:31:36,104 - DEBUG - dispatch pc=24, inst=LOAD_CONST(arg=2, lineno=4)
2025-01-31 15:31:36,104 - DEBUG - stack []
2025-01-31 15:31:36,104 - DEBUG - dispatch pc=26, inst=LOAD_FAST(arg=4, lineno=4)
2025-01-31 15:31:36,104 - DEBUG - stack ['$const24.9']
2025-01-31 15:31:36,104 - DEBUG - dispatch pc=28, inst=LOAD_CONST(arg=0, lineno=4)
2025-01-31 15:31:36,104 - DEBUG - stack ['$const24.9', '$out026.10']
2025-01-31 15:31:36,104 - DEBUG - dispatch pc=30, inst=LOAD_CONST(arg=3, lineno=4)
2025-01-31 15:31:36,104 - DEBUG - stack ['$const24.9', '$out026.10', '$const28.11']
2025-01-31 15:31:36,104 - DEBUG - dispatch pc=32, inst=BUILD_SLICE(arg=2, lineno=4)
2025-01-31 15:31:36,104 - DEBUG - stack ['$const24.9', '$out026.10', '$const28.11', '$const30.12']
2025-01-31 15:31:36,104 - DEBUG - dispatch pc=34, inst=STORE_SUBSCR(arg=None, lineno=4)
2025-01-31 15:31:36,104 - DEBUG - stack ['$const24.9', '$out026.10', '$32build_slice.14']
2025-01-31 15:31:36,104 - DEBUG - dispatch pc=36, inst=LOAD_CONST(arg=2, lineno=5)
2025-01-31 15:31:36,104 - DEBUG - stack []
2025-01-31 15:31:36,104 - DEBUG - dispatch pc=38, inst=LOAD_FAST(arg=4, lineno=5)
2025-01-31 15:31:36,104 - DEBUG - stack ['$const36.15']
2025-01-31 15:31:36,104 - DEBUG - dispatch pc=40, inst=LOAD_CONST(arg=2, lineno=5)
2025-01-31 15:31:36,104 - DEBUG - stack ['$const36.15', '$out038.16']
2025-01-31 15:31:36,104 - DEBUG - dispatch pc=42, inst=LOAD_CONST(arg=0, lineno=5)
2025-01-31 15:31:36,104 - DEBUG - stack ['$const36.15', '$out038.16', '$const40.17']
2025-01-31 15:31:36,104 - DEBUG - dispatch pc=44, inst=BUILD_SLICE(arg=2, lineno=5)
2025-01-31 15:31:36,104 - DEBUG - stack ['$const36.15', '$out038.16', '$const40.17', '$const42.18']
2025-01-31 15:31:36,104 - DEBUG - dispatch pc=46, inst=STORE_SUBSCR(arg=None, lineno=5)
2025-01-31 15:31:36,104 - DEBUG - stack ['$const36.15', '$out038.16', '$44build_slice.20']
2025-01-31 15:31:36,105 - DEBUG - dispatch pc=48, inst=LOAD_GLOBAL(arg=4, lineno=6)
2025-01-31 15:31:36,105 - DEBUG - stack []
2025-01-31 15:31:36,105 - DEBUG - dispatch pc=50, inst=LOAD_GLOBAL(arg=5, lineno=6)
2025-01-31 15:31:36,105 - DEBUG - stack ['$48load_global.21']
2025-01-31 15:31:36,105 - DEBUG - dispatch pc=52, inst=LOAD_CONST(arg=2, lineno=6)
2025-01-31 15:31:36,105 - DEBUG - stack ['$48load_global.21', '$50load_global.22']
2025-01-31 15:31:36,105 - DEBUG - dispatch pc=54, inst=LOAD_CONST(arg=4, lineno=6)
2025-01-31 15:31:36,105 - DEBUG - stack ['$48load_global.21', '$50load_global.22', '$const52.23']
2025-01-31 15:31:36,105 - DEBUG - dispatch pc=56, inst=CALL_FUNCTION(arg=2, lineno=6)
2025-01-31 15:31:36,105 - DEBUG - stack ['$48load_global.21', '$50load_global.22', '$const52.23', '$const54.24']
2025-01-31 15:31:36,105 - DEBUG - dispatch pc=58, inst=UNARY_NEGATIVE(arg=None, lineno=6)
2025-01-31 15:31:36,105 - DEBUG - stack ['$48load_global.21', '$56call_function.25']
2025-01-31 15:31:36,105 - DEBUG - dispatch pc=60, inst=LOAD_FAST(arg=3, lineno=6)
2025-01-31 15:31:36,105 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26']
2025-01-31 15:31:36,105 - DEBUG - dispatch pc=62, inst=LOAD_CONST(arg=2, lineno=6)
2025-01-31 15:31:36,105 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27']
2025-01-31 15:31:36,105 - DEBUG - dispatch pc=64, inst=BINARY_SUBSCR(arg=None, lineno=6)
2025-01-31 15:31:36,105 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27', '$const62.28']
2025-01-31 15:31:36,105 - DEBUG - dispatch pc=66, inst=LOAD_GLOBAL(arg=6, lineno=6)
2025-01-31 15:31:36,105 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29']
2025-01-31 15:31:36,105 - DEBUG - dispatch pc=68, inst=LOAD_CONST(arg=2, lineno=6)
2025-01-31 15:31:36,105 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30']
2025-01-31 15:31:36,105 - DEBUG - dispatch pc=70, inst=LOAD_CONST(arg=2, lineno=6)
2025-01-31 15:31:36,105 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31']
2025-01-31 15:31:36,105 - DEBUG - dispatch pc=72, inst=CALL_FUNCTION(arg=2, lineno=6)
2025-01-31 15:31:36,105 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31', '$const70.32']
2025-01-31 15:31:36,105 - DEBUG - dispatch pc=74, inst=BINARY_SUBTRACT(arg=None, lineno=6)
2025-01-31 15:31:36,105 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$72call_function.33']
2025-01-31 15:31:36,106 - DEBUG - dispatch pc=76, inst=CALL_FUNCTION(arg=2, lineno=6)
2025-01-31 15:31:36,106 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34']
2025-01-31 15:31:36,106 - DEBUG - dispatch pc=78, inst=GET_ITER(arg=None, lineno=6)
2025-01-31 15:31:36,106 - DEBUG - stack ['$76call_function.35']
2025-01-31 15:31:36,106 - DEBUG - end state. edges=[Edge(pc=80, stack=('$78get_iter.36',), blockstack=(), npush=0)]
2025-01-31 15:31:36,106 - DEBUG - pending: deque([State(pc_initial=80 nstack_initial=1)])
2025-01-31 15:31:36,106 - DEBUG - stack: ['$phi80.0']
2025-01-31 15:31:36,106 - DEBUG - state.pc_initial: State(pc_initial=80 nstack_initial=1)
2025-01-31 15:31:36,106 - DEBUG - dispatch pc=80, inst=FOR_ITER(arg=4, lineno=6)
2025-01-31 15:31:36,106 - DEBUG - stack ['$phi80.0']
2025-01-31 15:31:36,106 - DEBUG - end state. edges=[Edge(pc=90, stack=(), blockstack=(), npush=0), Edge(pc=82, stack=('$phi80.0', '$80for_iter.2'), blockstack=(), npush=0)]
2025-01-31 15:31:36,106 - DEBUG - pending: deque([State(pc_initial=90 nstack_initial=0), State(pc_initial=82 nstack_initial=2)])
2025-01-31 15:31:36,106 - DEBUG - stack: []
2025-01-31 15:31:36,106 - DEBUG - state.pc_initial: State(pc_initial=90 nstack_initial=0)
2025-01-31 15:31:36,106 - DEBUG - dispatch pc=90, inst=LOAD_FAST(arg=4, lineno=8)
2025-01-31 15:31:36,106 - DEBUG - stack []
2025-01-31 15:31:36,106 - DEBUG - dispatch pc=92, inst=RETURN_VALUE(arg=None, lineno=8)
2025-01-31 15:31:36,106 - DEBUG - stack ['$out090.0']
2025-01-31 15:31:36,106 - DEBUG - end state. edges=[]
2025-01-31 15:31:36,106 - DEBUG - pending: deque([State(pc_initial=82 nstack_initial=2)])
2025-01-31 15:31:36,106 - DEBUG - stack: ['$phi82.0', '$phi82.1']
2025-01-31 15:31:36,106 - DEBUG - state.pc_initial: State(pc_initial=82 nstack_initial=2)
2025-01-31 15:31:36,106 - DEBUG - dispatch pc=82, inst=STORE_FAST(arg=5, lineno=6)
2025-01-31 15:31:36,106 - DEBUG - stack ['$phi82.0', '$phi82.1']
2025-01-31 15:31:36,106 - DEBUG - dispatch pc=84, inst=LOAD_CONST(arg=2, lineno=7)
2025-01-31 15:31:36,106 - DEBUG - stack ['$phi82.0']
2025-01-31 15:31:36,106 - DEBUG - dispatch pc=86, inst=STORE_FAST(arg=6, lineno=7)
2025-01-31 15:31:36,106 - DEBUG - stack ['$phi82.0', '$const84.2']
2025-01-31 15:31:36,107 - DEBUG - dispatch pc=88, inst=JUMP_ABSOLUTE(arg=41, lineno=7)
2025-01-31 15:31:36,107 - DEBUG - stack ['$phi82.0']
2025-01-31 15:31:36,107 - DEBUG - end state. edges=[Edge(pc=80, stack=('$phi82.0',), blockstack=(), npush=0)]
2025-01-31 15:31:36,107 - DEBUG - pending: deque([State(pc_initial=80 nstack_initial=1)])
2025-01-31 15:31:36,107 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:31:36,107 - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=80 nstack_initial=1): {'$phi80.0'},
             State(pc_initial=82 nstack_initial=2): {'$phi82.1'},
             State(pc_initial=90 nstack_initial=0): set()})
2025-01-31 15:31:36,107 - DEBUG - defmap: {'$phi80.0': State(pc_initial=0 nstack_initial=0),
 '$phi82.1': State(pc_initial=80 nstack_initial=1)}
2025-01-31 15:31:36,107 - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi82.0', State(pc_initial=82 nstack_initial=2))},
             '$phi82.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-01-31 15:31:36,107 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-01-31 15:31:36,107 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-01-31 15:31:36,108 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-01-31 15:31:36,108 - DEBUG - keep phismap: {'$phi80.0': {('$78get_iter.36', State(pc_initial=0 nstack_initial=0))},
 '$phi82.1': {('$80for_iter.2', State(pc_initial=80 nstack_initial=1))}}
2025-01-31 15:31:36,108 - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi80.0': '$78get_iter.36'},
             State(pc_initial=80 nstack_initial=1): {'$phi82.1': '$80for_iter.2'}})
2025-01-31 15:31:36,108 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:31:36,108 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'item': '$x2.0', 'res': '$4load_attr.1'}), (6, {'value': '$4load_attr.1'}), (8, {'res': '$8load_global.2'}), (10, {'item': '$8load_global.2', 'res': '$10load_attr.3'}), (12, {'res': '$full_shape012.4'}), (14, {'res': '$14load_global.5'}), (16, {'item': '$14load_global.5', 'res': '$16load_attr.6'}), (18, {'res': '$const18.7'}), (20, {'func': '$10load_attr.3', 'args': ['$full_shape012.4', '$16load_attr.6'], 'names': '$const18.7', 'res': '$20call_function_kw.8'}), (22, {'value': '$20call_function_kw.8'}), (24, {'res': '$const24.9'}), (26, {'res': '$out026.10'}), (28, {'res': '$const28.11'}), (30, {'res': '$const30.12'}), (32, {'start': '$const28.11', 'stop': '$const30.12', 'step': None, 'res': '$32build_slice.14', 'slicevar': '$32build_slice.13'}), (34, {'target': '$out026.10', 'index': '$32build_slice.14', 'value': '$const24.9'}), (36, {'res': '$const36.15'}), (38, {'res': '$out038.16'}), (40, {'res': '$const40.17'}), (42, {'res': '$const42.18'}), (44, {'start': '$const40.17', 'stop': '$const42.18', 'step': None, 'res': '$44build_slice.20', 'slicevar': '$44build_slice.19'}), (46, {'target': '$out038.16', 'index': '$44build_slice.20', 'value': '$const36.15'}), (48, {'res': '$48load_global.21'}), (50, {'res': '$50load_global.22'}), (52, {'res': '$const52.23'}), (54, {'res': '$const54.24'}), (56, {'func': '$50load_global.22', 'args': ['$const52.23', '$const54.24'], 'res': '$56call_function.25'}), (58, {'value': '$56call_function.25', 'res': '$58unary_negative.26'}), (60, {'res': '$full_shape060.27'}), (62, {'res': '$const62.28'}), (64, {'index': '$const62.28', 'target': '$full_shape060.27', 'res': '$64binary_subscr.29'}), (66, {'res': '$66load_global.30'}), (68, {'res': '$const68.31'}), (70, {'res': '$const70.32'}), (72, {'func': '$66load_global.30', 'args': ['$const68.31', '$const70.32'], 'res': '$72call_function.33'}), (74, {'lhs': '$64binary_subscr.29', 'rhs': '$72call_function.33', 'res': '$74binary_subtract.34'}), (76, {'func': '$48load_global.21', 'args': ['$58unary_negative.26', '$74binary_subtract.34'], 'res': '$76call_function.35'}), (78, {'value': '$76call_function.35', 'res': '$78get_iter.36'})), outgoing_phis={'$phi80.0': '$78get_iter.36'}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$78get_iter.36',)})
2025-01-31 15:31:36,108 - DEBUG - block_infos State(pc_initial=80 nstack_initial=1):
AdaptBlockInfo(insts=((80, {'iterator': '$phi80.0', 'pair': '$80for_iter.1', 'indval': '$80for_iter.2', 'pred': '$80for_iter.3'}),), outgoing_phis={'$phi82.1': '$80for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: (), 82: ('$phi80.0', '$80for_iter.2')})
2025-01-31 15:31:36,108 - DEBUG - block_infos State(pc_initial=82 nstack_initial=2):
AdaptBlockInfo(insts=((82, {'value': '$phi82.1'}), (84, {'res': '$const84.2'}), (86, {'value': '$const84.2'}), (88, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$phi82.0',)})
2025-01-31 15:31:36,108 - DEBUG - block_infos State(pc_initial=90 nstack_initial=0):
AdaptBlockInfo(insts=((90, {'res': '$out090.0'}), (92, {'retval': '$out090.0', 'castval': '$92return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:36,109 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    threshold = arg(1, name=threshold)       ['threshold']
    zero_pos = arg(2, name=zero_pos)         ['zero_pos']
    full_shape0 = getattr(value=x, attr=shape) ['full_shape0', 'x']
    $8load_global.2 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>) ['$8load_global.2']
    $10load_attr.3 = getattr(value=$8load_global.2, attr=empty) ['$10load_attr.3', '$8load_global.2']
    $14load_global.5 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>) ['$14load_global.5']
    $16load_attr.6 = getattr(value=$14load_global.5, attr=bool_) ['$14load_global.5', '$16load_attr.6']
    out0 = call $10load_attr.3(full_shape0, func=$10load_attr.3, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6, <string>:3))], vararg=None, varkwarg=None, target=None) ['$10load_attr.3', '$16load_attr.6', 'full_shape0', 'out0']
    $const24.9 = const(int, 0)               ['$const24.9']
    $const28.11 = const(NoneType, None)      ['$const28.11']
    $const30.12 = const(int, 1)              ['$const30.12']
    $32build_slice.13 = global(slice: <class 'slice'>) ['$32build_slice.13']
    $32build_slice.14 = call $32build_slice.13($const28.11, $const30.12, func=$32build_slice.13, args=(Var($const28.11, <string>:4), Var($const30.12, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None) ['$32build_slice.13', '$32build_slice.14', '$const28.11', '$const30.12']
    out0[$32build_slice.14] = $const24.9     ['$32build_slice.14', '$const24.9', 'out0']
    $const36.15 = const(int, 0)              ['$const36.15']
    $const40.17 = const(int, 0)              ['$const40.17']
    $const42.18 = const(NoneType, None)      ['$const42.18']
    $44build_slice.19 = global(slice: <class 'slice'>) ['$44build_slice.19']
    $44build_slice.20 = call $44build_slice.19($const40.17, $const42.18, func=$44build_slice.19, args=(Var($const40.17, <string>:5), Var($const42.18, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None) ['$44build_slice.19', '$44build_slice.20', '$const40.17', '$const42.18']
    out0[$44build_slice.20] = $const36.15    ['$44build_slice.20', '$const36.15', 'out0']
    $48load_global.21 = global(range: <class 'range'>) ['$48load_global.21']
    $50load_global.22 = global(min: <built-in function min>) ['$50load_global.22']
    $const52.23 = const(int, 0)              ['$const52.23']
    $const54.24 = const(int, -1)             ['$const54.24']
    $56call_function.25 = call $50load_global.22($const52.23, $const54.24, func=$50load_global.22, args=[Var($const52.23, <string>:6), Var($const54.24, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$50load_global.22', '$56call_function.25', '$const52.23', '$const54.24']
    $58unary_negative.26 = unary(fn=<built-in function neg>, value=$56call_function.25) ['$56call_function.25', '$58unary_negative.26']
    $const62.28 = const(int, 0)              ['$const62.28']
    $64binary_subscr.29 = getitem(value=full_shape0, index=$const62.28, fn=<built-in function getitem>) ['$64binary_subscr.29', '$const62.28', 'full_shape0']
    $66load_global.30 = global(max: <built-in function max>) ['$66load_global.30']
    $const68.31 = const(int, 0)              ['$const68.31']
    $const70.32 = const(int, 0)              ['$const70.32']
    $72call_function.33 = call $66load_global.30($const68.31, $const70.32, func=$66load_global.30, args=[Var($const68.31, <string>:6), Var($const70.32, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$66load_global.30', '$72call_function.33', '$const68.31', '$const70.32']
    $74binary_subtract.34 = $64binary_subscr.29 - $72call_function.33 ['$64binary_subscr.29', '$72call_function.33', '$74binary_subtract.34']
    $76call_function.35 = call $48load_global.21($58unary_negative.26, $74binary_subtract.34, func=$48load_global.21, args=[Var($58unary_negative.26, <string>:6), Var($74binary_subtract.34, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34', '$76call_function.35']
    $78get_iter.36 = getiter(value=$76call_function.35) ['$76call_function.35', '$78get_iter.36']
    $phi80.0 = $78get_iter.36                ['$78get_iter.36', '$phi80.0']
    jump 80                                  []
label 80:
    $80for_iter.1 = iternext(value=$phi80.0) ['$80for_iter.1', '$phi80.0']
    $80for_iter.2 = pair_first(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.2']
    $80for_iter.3 = pair_second(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.3']
    $phi82.1 = $80for_iter.2                 ['$80for_iter.2', '$phi82.1']
    branch $80for_iter.3, 82, 90             ['$80for_iter.3']
label 82:
    index00 = $phi82.1                       ['$phi82.1', 'index00']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 80                                  []
label 90:
    $92return_value.1 = cast(value=out0)     ['$92return_value.1', 'out0']
    return $92return_value.1                 ['$92return_value.1']

2025-01-31 15:31:36,121 - DEBUG - ==== SSA block analysis pass on 0
2025-01-31 15:31:36,121 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89f02ff3d0>
2025-01-31 15:31:36,121 - DEBUG - on stmt: x = arg(0, name=x)
2025-01-31 15:31:36,121 - DEBUG - on stmt: threshold = arg(1, name=threshold)
2025-01-31 15:31:36,121 - DEBUG - on stmt: zero_pos = arg(2, name=zero_pos)
2025-01-31 15:31:36,121 - DEBUG - on stmt: full_shape0 = getattr(value=x, attr=shape)
2025-01-31 15:31:36,121 - DEBUG - on stmt: $8load_global.2.1 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,121 - DEBUG - on stmt: $10load_attr.3.1 = getattr(value=$8load_global.2.1, attr=empty)
2025-01-31 15:31:36,121 - DEBUG - on stmt: $14load_global.5.1 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,121 - DEBUG - on stmt: $16load_attr.6.1 = getattr(value=$14load_global.5.1, attr=bool_)
2025-01-31 15:31:36,121 - DEBUG - on stmt: out0 = call $10load_attr.3.1(full_shape0, func=$10load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,122 - DEBUG - on stmt: $const24.9.1 = const(int, 0)
2025-01-31 15:31:36,122 - DEBUG - on stmt: $const28.11.1 = const(NoneType, None)
2025-01-31 15:31:36,122 - DEBUG - on stmt: $const30.12.1 = const(int, 1)
2025-01-31 15:31:36,122 - DEBUG - on stmt: $32build_slice.13.1 = global(slice: <class 'slice'>)
2025-01-31 15:31:36,122 - DEBUG - on stmt: $32build_slice.14.1 = call $32build_slice.13.1($const28.11.1, $const30.12.1, func=$32build_slice.13.1, args=(Var($const28.11.1, <string>:4), Var($const30.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,122 - DEBUG - on stmt: out0[$32build_slice.14.1] = $const24.9.1
2025-01-31 15:31:36,122 - DEBUG - on stmt: $const36.15.1 = const(int, 0)
2025-01-31 15:31:36,122 - DEBUG - on stmt: $const40.17.1 = const(int, 0)
2025-01-31 15:31:36,122 - DEBUG - on stmt: $const42.18.1 = const(NoneType, None)
2025-01-31 15:31:36,122 - DEBUG - on stmt: $44build_slice.19.1 = global(slice: <class 'slice'>)
2025-01-31 15:31:36,122 - DEBUG - on stmt: $44build_slice.20.1 = call $44build_slice.19.1($const40.17.1, $const42.18.1, func=$44build_slice.19.1, args=(Var($const40.17.1, <string>:5), Var($const42.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,122 - DEBUG - on stmt: out0[$44build_slice.20.1] = $const36.15.1
2025-01-31 15:31:36,122 - DEBUG - on stmt: $48load_global.21.1 = global(range: <class 'range'>)
2025-01-31 15:31:36,122 - DEBUG - on stmt: $50load_global.22.1 = global(min: <built-in function min>)
2025-01-31 15:31:36,122 - DEBUG - on stmt: $const52.23.1 = const(int, 0)
2025-01-31 15:31:36,122 - DEBUG - on stmt: $const54.24.1 = const(int, -1)
2025-01-31 15:31:36,122 - DEBUG - on stmt: $56call_function.25.1 = call $50load_global.22.1($const52.23.1, $const54.24.1, func=$50load_global.22.1, args=[Var($const52.23.1, <string>:6), Var($const54.24.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,122 - DEBUG - on stmt: $58unary_negative.26.1 = unary(fn=<built-in function neg>, value=$56call_function.25.1)
2025-01-31 15:31:36,122 - DEBUG - on stmt: $const62.28.1 = const(int, 0)
2025-01-31 15:31:36,123 - DEBUG - on stmt: $64binary_subscr.29.1 = getitem(value=full_shape0, index=$const62.28.1, fn=<built-in function getitem>)
2025-01-31 15:31:36,123 - DEBUG - on stmt: $66load_global.30.1 = global(max: <built-in function max>)
2025-01-31 15:31:36,123 - DEBUG - on stmt: $const68.31.1 = const(int, 0)
2025-01-31 15:31:36,123 - DEBUG - on stmt: $const70.32.1 = const(int, 0)
2025-01-31 15:31:36,123 - DEBUG - on stmt: $72call_function.33.1 = call $66load_global.30.1($const68.31.1, $const70.32.1, func=$66load_global.30.1, args=[Var($const68.31.1, <string>:6), Var($const70.32.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,123 - DEBUG - on stmt: $74binary_subtract.34.1 = $64binary_subscr.29.1 - $72call_function.33.1
2025-01-31 15:31:36,123 - DEBUG - on stmt: $76call_function.35.1 = call $48load_global.21.1($58unary_negative.26.1, $74binary_subtract.34.1, func=$48load_global.21.1, args=[Var($58unary_negative.26.1, <string>:6), Var($74binary_subtract.34.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,123 - DEBUG - on stmt: $78get_iter.36.1 = getiter(value=$76call_function.35.1)
2025-01-31 15:31:36,123 - DEBUG - on stmt: $phi80.0.1 = $78get_iter.36.1
2025-01-31 15:31:36,123 - DEBUG - on stmt: jump 80
2025-01-31 15:31:36,123 - DEBUG - ==== SSA block analysis pass on 80
2025-01-31 15:31:36,123 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89f02ff3d0>
2025-01-31 15:31:36,123 - DEBUG - on stmt: $80for_iter.1.1 = iternext(value=$phi80.0.1)
2025-01-31 15:31:36,123 - DEBUG - on stmt: $80for_iter.2.1 = pair_first(value=$80for_iter.1.1)
2025-01-31 15:31:36,123 - DEBUG - on stmt: $80for_iter.3.1 = pair_second(value=$80for_iter.1.1)
2025-01-31 15:31:36,123 - DEBUG - on stmt: $phi82.1.1 = $80for_iter.2.1
2025-01-31 15:31:36,123 - DEBUG - on stmt: branch $80for_iter.3.1, 82, 194
2025-01-31 15:31:36,123 - DEBUG - ==== SSA block analysis pass on 82
2025-01-31 15:31:36,123 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89f02ff3d0>
2025-01-31 15:31:36,123 - DEBUG - on stmt: index00 = $phi82.1.1
2025-01-31 15:31:36,123 - DEBUG - on stmt: jump 90
2025-01-31 15:31:36,123 - DEBUG - ==== SSA block analysis pass on 194
2025-01-31 15:31:36,123 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89f02ff3d0>
2025-01-31 15:31:36,124 - DEBUG - on stmt: $92return_value.1.1 = cast(value=out0)
2025-01-31 15:31:36,124 - DEBUG - on stmt: return $92return_value.1.1
2025-01-31 15:31:36,124 - DEBUG - ==== SSA block analysis pass on 90
2025-01-31 15:31:36,124 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89f02ff3d0>
2025-01-31 15:31:36,124 - DEBUG - on stmt: $const4.1 = const(int, 0)
2025-01-31 15:31:36,124 - DEBUG - on stmt: stencil_index = $const4.1 + index00
2025-01-31 15:31:36,124 - DEBUG - on stmt: x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-01-31 15:31:36,124 - DEBUG - on stmt: $12unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2025-01-31 15:31:36,124 - DEBUG - on stmt: $20compare_op.7 = $12unary_negative.4 <= x0
2025-01-31 15:31:36,124 - DEBUG - on stmt: bool22 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,124 - DEBUG - on stmt: $22pred = call bool22($20compare_op.7, func=bool22, args=(Var($20compare_op.7, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,124 - DEBUG - on stmt: $phi24.0 = x0
2025-01-31 15:31:36,124 - DEBUG - on stmt: branch $22pred, 91, 123
2025-01-31 15:31:36,124 - DEBUG - ==== SSA block analysis pass on 91
2025-01-31 15:31:36,124 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89f02ff3d0>
2025-01-31 15:31:36,124 - DEBUG - on stmt: $26compare_op.2 = x0 <= threshold
2025-01-31 15:31:36,124 - DEBUG - on stmt: bool28 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,124 - DEBUG - on stmt: $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,124 - DEBUG - on stmt: branch $28pred, 115, 127
2025-01-31 15:31:36,124 - DEBUG - ==== SSA block analysis pass on 115
2025-01-31 15:31:36,124 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89f02ff3d0>
2025-01-31 15:31:36,124 - DEBUG - on stmt: jump 121
2025-01-31 15:31:36,124 - DEBUG - ==== SSA block analysis pass on 123
2025-01-31 15:31:36,124 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89f02ff3d0>
2025-01-31 15:31:36,124 - DEBUG - on stmt: jump 127
2025-01-31 15:31:36,124 - DEBUG - ==== SSA block analysis pass on 121
2025-01-31 15:31:36,125 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89f02ff3d0>
2025-01-31 15:31:36,125 - DEBUG - on stmt: x0 = const(int, 0)
2025-01-31 15:31:36,125 - DEBUG - on stmt: jump 127
2025-01-31 15:31:36,125 - DEBUG - ==== SSA block analysis pass on 127
2025-01-31 15:31:36,125 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89f02ff3d0>
2025-01-31 15:31:36,125 - DEBUG - on stmt: $const42.1 = const(int, -1)
2025-01-31 15:31:36,125 - DEBUG - on stmt: stencil_index = $const42.1 + index00
2025-01-31 15:31:36,125 - DEBUG - on stmt: x1 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-01-31 15:31:36,125 - DEBUG - on stmt: $50unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2025-01-31 15:31:36,125 - DEBUG - on stmt: $58compare_op.7 = $50unary_negative.4 <= x1
2025-01-31 15:31:36,125 - DEBUG - on stmt: bool60 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,125 - DEBUG - on stmt: $60pred = call bool60($58compare_op.7, func=bool60, args=(Var($58compare_op.7, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,125 - DEBUG - on stmt: $phi62.0 = x1
2025-01-31 15:31:36,125 - DEBUG - on stmt: branch $60pred, 131, 161
2025-01-31 15:31:36,125 - DEBUG - ==== SSA block analysis pass on 131
2025-01-31 15:31:36,125 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89f02ff3d0>
2025-01-31 15:31:36,125 - DEBUG - on stmt: $64compare_op.2 = x1 <= threshold
2025-01-31 15:31:36,125 - DEBUG - on stmt: bool66 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,125 - DEBUG - on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,125 - DEBUG - on stmt: branch $66pred, 153, 165
2025-01-31 15:31:36,125 - DEBUG - ==== SSA block analysis pass on 153
2025-01-31 15:31:36,125 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89f02ff3d0>
2025-01-31 15:31:36,125 - DEBUG - on stmt: jump 159
2025-01-31 15:31:36,125 - DEBUG - ==== SSA block analysis pass on 161
2025-01-31 15:31:36,125 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89f02ff3d0>
2025-01-31 15:31:36,125 - DEBUG - on stmt: jump 165
2025-01-31 15:31:36,125 - DEBUG - ==== SSA block analysis pass on 159
2025-01-31 15:31:36,126 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89f02ff3d0>
2025-01-31 15:31:36,126 - DEBUG - on stmt: x1 = const(int, 0)
2025-01-31 15:31:36,126 - DEBUG - on stmt: jump 165
2025-01-31 15:31:36,126 - DEBUG - ==== SSA block analysis pass on 165
2025-01-31 15:31:36,126 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89f02ff3d0>
2025-01-31 15:31:36,126 - DEBUG - on stmt: bool80 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,126 - DEBUG - on stmt: $80pred = call bool80(zero_pos, func=bool80, args=(Var(zero_pos, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,126 - DEBUG - on stmt: branch $80pred, 169, 173
2025-01-31 15:31:36,126 - DEBUG - ==== SSA block analysis pass on 169
2025-01-31 15:31:36,126 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89f02ff3d0>
2025-01-31 15:31:36,126 - DEBUG - on stmt: $82load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,126 - DEBUG - on stmt: $84load_method.1 = getattr(value=$82load_global.0, attr=signbit)
2025-01-31 15:31:36,126 - DEBUG - on stmt: $88call_method.3 = call $84load_method.1(x0, func=$84load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,126 - DEBUG - on stmt: $90load_global.4 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,126 - DEBUG - on stmt: $92load_method.5 = getattr(value=$90load_global.4, attr=signbit)
2025-01-31 15:31:36,126 - DEBUG - on stmt: $96call_method.7 = call $92load_method.5(x1, func=$92load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,126 - DEBUG - on stmt: $98compare_op.8 = $88call_method.3 != $96call_method.7
2025-01-31 15:31:36,126 - DEBUG - on stmt: $100return_value.9 = cast(value=$98compare_op.8)
2025-01-31 15:31:36,126 - DEBUG - on stmt: out0[index00] = $100return_value.9
2025-01-31 15:31:36,126 - DEBUG - on stmt: jump 193
2025-01-31 15:31:36,126 - DEBUG - ==== SSA block analysis pass on 173
2025-01-31 15:31:36,126 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89f02ff3d0>
2025-01-31 15:31:36,126 - DEBUG - on stmt: $102load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,126 - DEBUG - on stmt: $104load_method.1 = getattr(value=$102load_global.0, attr=sign)
2025-01-31 15:31:36,126 - DEBUG - on stmt: $108call_method.3 = call $104load_method.1(x0, func=$104load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,127 - DEBUG - on stmt: $110load_global.4 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,127 - DEBUG - on stmt: $112load_method.5 = getattr(value=$110load_global.4, attr=sign)
2025-01-31 15:31:36,127 - DEBUG - on stmt: $116call_method.7 = call $112load_method.5(x1, func=$112load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,127 - DEBUG - on stmt: $118compare_op.8 = $108call_method.3 != $116call_method.7
2025-01-31 15:31:36,127 - DEBUG - on stmt: $120return_value.9 = cast(value=$118compare_op.8)
2025-01-31 15:31:36,127 - DEBUG - on stmt: out0[index00] = $120return_value.9
2025-01-31 15:31:36,127 - DEBUG - on stmt: jump 193
2025-01-31 15:31:36,127 - DEBUG - ==== SSA block analysis pass on 193
2025-01-31 15:31:36,127 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89f02ff3d0>
2025-01-31 15:31:36,127 - DEBUG - on stmt: jump 80
2025-01-31 15:31:36,128 - DEBUG - defs defaultdict(<class 'list'>,
            {'$100return_value.9': [(<numba.core.ir.Assign object at 0x7c89f02a98d0>,
                                     169)],
             '$102load_global.0': [(<numba.core.ir.Assign object at 0x7c89f02bdcc0>,
                                    173)],
             '$104load_method.1': [(<numba.core.ir.Assign object at 0x7c89f02bdea0>,
                                    173)],
             '$108call_method.3': [(<numba.core.ir.Assign object at 0x7c89f02bfb50>,
                                    173)],
             '$10load_attr.3.1': [(<numba.core.ir.Assign object at 0x7c89f02da860>,
                                   0)],
             '$110load_global.4': [(<numba.core.ir.Assign object at 0x7c89f02bfd30>,
                                    173)],
             '$112load_method.5': [(<numba.core.ir.Assign object at 0x7c89f02c3250>,
                                    173)],
             '$116call_method.7': [(<numba.core.ir.Assign object at 0x7c89f02c8c10>,
                                    173)],
             '$118compare_op.8': [(<numba.core.ir.Assign object at 0x7c89f02c8df0>,
                                   173)],
             '$120return_value.9': [(<numba.core.ir.Assign object at 0x7c89f02ca8c0>,
                                     173)],
             '$12unary_negative.4': [(<numba.core.ir.Assign object at 0x7c89f021f100>,
                                      90)],
             '$14load_global.5.1': [(<numba.core.ir.Assign object at 0x7c89f02da5c0>,
                                     0)],
             '$16load_attr.6.1': [(<numba.core.ir.Assign object at 0x7c89f02da440>,
                                   0)],
             '$20compare_op.7': [(<numba.core.ir.Assign object at 0x7c89f021f2e0>,
                                  90)],
             '$22pred': [(<numba.core.ir.Assign object at 0x7c89f0228310>, 90)],
             '$26compare_op.2': [(<numba.core.ir.Assign object at 0x7c89f02345e0>,
                                  91)],
             '$28pred': [(<numba.core.ir.Assign object at 0x7c89f0236440>, 91)],
             '$32build_slice.13.1': [(<numba.core.ir.Assign object at 0x7c89f02dbb80>,
                                      0)],
             '$32build_slice.14.1': [(<numba.core.ir.Assign object at 0x7c89f02dbca0>,
                                      0)],
             '$44build_slice.19.1': [(<numba.core.ir.Assign object at 0x7c89f02f44c0>,
                                      0)],
             '$44build_slice.20.1': [(<numba.core.ir.Assign object at 0x7c89f02f45e0>,
                                      0)],
             '$48load_global.21.1': [(<numba.core.ir.Assign object at 0x7c89f02f4820>,
                                      0)],
             '$50load_global.22.1': [(<numba.core.ir.Assign object at 0x7c89f02f49a0>,
                                      0)],
             '$50unary_negative.4': [(<numba.core.ir.Assign object at 0x7c89f02557e0>,
                                      127)],
             '$56call_function.25.1': [(<numba.core.ir.Assign object at 0x7c89f02f4e80>,
                                        0)],
             '$58compare_op.7': [(<numba.core.ir.Assign object at 0x7c89f02559c0>,
                                  127)],
             '$58unary_negative.26.1': [(<numba.core.ir.Assign object at 0x7c89f02f4fa0>,
                                         0)],
             '$60pred': [(<numba.core.ir.Assign object at 0x7c89f025e9b0>,
                          127)],
             '$64binary_subscr.29.1': [(<numba.core.ir.Assign object at 0x7c89f02f53f0>,
                                        0)],
             '$64compare_op.2': [(<numba.core.ir.Assign object at 0x7c89f026ee00>,
                                  131)],
             '$66load_global.30.1': [(<numba.core.ir.Assign object at 0x7c89f02f5540>,
                                      0)],
             '$66pred': [(<numba.core.ir.Assign object at 0x7c89f0274b20>,
                          131)],
             '$72call_function.33.1': [(<numba.core.ir.Assign object at 0x7c89f02f5a20>,
                                        0)],
             '$74binary_subtract.34.1': [(<numba.core.ir.Assign object at 0x7c89f02f5b70>,
                                          0)],
             '$76call_function.35.1': [(<numba.core.ir.Assign object at 0x7c89f02f5d20>,
                                        0)],
             '$78get_iter.36.1': [(<numba.core.ir.Assign object at 0x7c89f02f5e40>,
                                   0)],
             '$80for_iter.1.1': [(<numba.core.ir.Assign object at 0x7c89f02f5f30>,
                                  80)],
             '$80for_iter.2.1': [(<numba.core.ir.Assign object at 0x7c89f02f6050>,
                                  80)],
             '$80for_iter.3.1': [(<numba.core.ir.Assign object at 0x7c89f02f6170>,
                                  80)],
             '$80pred': [(<numba.core.ir.Assign object at 0x7c89f028e2c0>,
                          165)],
             '$82load_global.0': [(<numba.core.ir.Assign object at 0x7c89f0298b50>,
                                   169)],
             '$84load_method.1': [(<numba.core.ir.Assign object at 0x7c89f0298f70>,
                                   169)],
             '$88call_method.3': [(<numba.core.ir.Assign object at 0x7c89f029ab60>,
                                   169)],
             '$8load_global.2.1': [(<numba.core.ir.Assign object at 0x7c89f02dab30>,
                                    0)],
             '$90load_global.4': [(<numba.core.ir.Assign object at 0x7c89f029ad40>,
                                   169)],
             '$92load_method.5': [(<numba.core.ir.Assign object at 0x7c89f02a2260>,
                                   169)],
             '$92return_value.1.1': [(<numba.core.ir.Assign object at 0x7c89f02f6aa0>,
                                      194)],
             '$96call_method.7': [(<numba.core.ir.Assign object at 0x7c89f02a3be0>,
                                   169)],
             '$98compare_op.8': [(<numba.core.ir.Assign object at 0x7c89f02a3dc0>,
                                  169)],
             '$const24.9.1': [(<numba.core.ir.Assign object at 0x7c89f02d9c30>,
                               0)],
             '$const28.11.1': [(<numba.core.ir.Assign object at 0x7c89f02db880>,
                                0)],
             '$const30.12.1': [(<numba.core.ir.Assign object at 0x7c89f02dba00>,
                                0)],
             '$const36.15.1': [(<numba.core.ir.Assign object at 0x7c89f02dbee0>,
                                0)],
             '$const4.1': [(<numba.core.ir.Assign object at 0x7c89f0213d30>,
                            90)],
             '$const40.17.1': [(<numba.core.ir.Assign object at 0x7c89f02f41c0>,
                                0)],
             '$const42.1': [(<numba.core.ir.Assign object at 0x7c89f024f970>,
                             127)],
             '$const42.18.1': [(<numba.core.ir.Assign object at 0x7c89f02f4340>,
                                0)],
             '$const52.23.1': [(<numba.core.ir.Assign object at 0x7c89f02f4b20>,
                                0)],
             '$const54.24.1': [(<numba.core.ir.Assign object at 0x7c89f02f4ca0>,
                                0)],
             '$const62.28.1': [(<numba.core.ir.Assign object at 0x7c89f02f5240>,
                                0)],
             '$const68.31.1': [(<numba.core.ir.Assign object at 0x7c89f02f56c0>,
                                0)],
             '$const70.32.1': [(<numba.core.ir.Assign object at 0x7c89f02f5840>,
                                0)],
             '$phi24.0': [(<numba.core.ir.Assign object at 0x7c89f0229c90>,
                           90)],
             '$phi62.0': [(<numba.core.ir.Assign object at 0x7c89f0264370>,
                           127)],
             '$phi80.0.1': [(<numba.core.ir.Assign object at 0x7c89f02daec0>,
                             0)],
             '$phi82.1.1': [(<numba.core.ir.Assign object at 0x7c89f02f50c0>,
                             80)],
             'bool22': [(<numba.core.ir.Assign object at 0x7c89f0220dc0>, 90)],
             'bool28': [(<numba.core.ir.Assign object at 0x7c89f0234760>, 91)],
             'bool60': [(<numba.core.ir.Assign object at 0x7c89f0257460>, 127)],
             'bool66': [(<numba.core.ir.Assign object at 0x7c89f026ed40>, 131)],
             'bool80': [(<numba.core.ir.Assign object at 0x7c89f028e050>, 165)],
             'full_shape0': [(<numba.core.ir.Assign object at 0x7c89f02dadd0>,
                              0)],
             'index00': [(<numba.core.ir.Assign object at 0x7c89f02f6440>, 82)],
             'out0': [(<numba.core.ir.Assign object at 0x7c89f02d9e10>, 0)],
             'stencil_index': [(<numba.core.ir.Assign object at 0x7c89f02d9720>,
                                90),
                               (<numba.core.ir.Assign object at 0x7c89f02d98d0>,
                                127)],
             'threshold': [(<numba.core.ir.Assign object at 0x7c89f02db190>,
                            0)],
             'x': [(<numba.core.ir.Assign object at 0x7c89f02db2b0>, 0)],
             'x0': [(<numba.core.ir.Assign object at 0x7c89f02d97e0>, 90),
                    (<numba.core.ir.Assign object at 0x7c89f024c340>, 121)],
             'x1': [(<numba.core.ir.Assign object at 0x7c89f02d9990>, 127),
                    (<numba.core.ir.Assign object at 0x7c89f02869e0>, 159)],
             'zero_pos': [(<numba.core.ir.Assign object at 0x7c89f02db070>,
                           0)]})
2025-01-31 15:31:36,128 - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x7c89f02ff3d0>
2025-01-31 15:31:36,129 - DEBUG - Fix SSA violator on var stencil_index
2025-01-31 15:31:36,129 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-31 15:31:36,129 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89f02ff580>
2025-01-31 15:31:36,129 - DEBUG - on stmt: x = arg(0, name=x)
2025-01-31 15:31:36,129 - DEBUG - on stmt: threshold = arg(1, name=threshold)
2025-01-31 15:31:36,129 - DEBUG - on stmt: zero_pos = arg(2, name=zero_pos)
2025-01-31 15:31:36,129 - DEBUG - on stmt: full_shape0 = getattr(value=x, attr=shape)
2025-01-31 15:31:36,129 - DEBUG - on stmt: $8load_global.2.1 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,129 - DEBUG - on stmt: $10load_attr.3.1 = getattr(value=$8load_global.2.1, attr=empty)
2025-01-31 15:31:36,129 - DEBUG - on stmt: $14load_global.5.1 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,129 - DEBUG - on stmt: $16load_attr.6.1 = getattr(value=$14load_global.5.1, attr=bool_)
2025-01-31 15:31:36,129 - DEBUG - on stmt: out0 = call $10load_attr.3.1(full_shape0, func=$10load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,129 - DEBUG - on stmt: $const24.9.1 = const(int, 0)
2025-01-31 15:31:36,129 - DEBUG - on stmt: $const28.11.1 = const(NoneType, None)
2025-01-31 15:31:36,129 - DEBUG - on stmt: $const30.12.1 = const(int, 1)
2025-01-31 15:31:36,129 - DEBUG - on stmt: $32build_slice.13.1 = global(slice: <class 'slice'>)
2025-01-31 15:31:36,129 - DEBUG - on stmt: $32build_slice.14.1 = call $32build_slice.13.1($const28.11.1, $const30.12.1, func=$32build_slice.13.1, args=(Var($const28.11.1, <string>:4), Var($const30.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,129 - DEBUG - on stmt: out0[$32build_slice.14.1] = $const24.9.1
2025-01-31 15:31:36,129 - DEBUG - on stmt: $const36.15.1 = const(int, 0)
2025-01-31 15:31:36,129 - DEBUG - on stmt: $const40.17.1 = const(int, 0)
2025-01-31 15:31:36,129 - DEBUG - on stmt: $const42.18.1 = const(NoneType, None)
2025-01-31 15:31:36,129 - DEBUG - on stmt: $44build_slice.19.1 = global(slice: <class 'slice'>)
2025-01-31 15:31:36,129 - DEBUG - on stmt: $44build_slice.20.1 = call $44build_slice.19.1($const40.17.1, $const42.18.1, func=$44build_slice.19.1, args=(Var($const40.17.1, <string>:5), Var($const42.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,129 - DEBUG - on stmt: out0[$44build_slice.20.1] = $const36.15.1
2025-01-31 15:31:36,130 - DEBUG - on stmt: $48load_global.21.1 = global(range: <class 'range'>)
2025-01-31 15:31:36,130 - DEBUG - on stmt: $50load_global.22.1 = global(min: <built-in function min>)
2025-01-31 15:31:36,130 - DEBUG - on stmt: $const52.23.1 = const(int, 0)
2025-01-31 15:31:36,130 - DEBUG - on stmt: $const54.24.1 = const(int, -1)
2025-01-31 15:31:36,130 - DEBUG - on stmt: $56call_function.25.1 = call $50load_global.22.1($const52.23.1, $const54.24.1, func=$50load_global.22.1, args=[Var($const52.23.1, <string>:6), Var($const54.24.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,130 - DEBUG - on stmt: $58unary_negative.26.1 = unary(fn=<built-in function neg>, value=$56call_function.25.1)
2025-01-31 15:31:36,130 - DEBUG - on stmt: $const62.28.1 = const(int, 0)
2025-01-31 15:31:36,130 - DEBUG - on stmt: $64binary_subscr.29.1 = getitem(value=full_shape0, index=$const62.28.1, fn=<built-in function getitem>)
2025-01-31 15:31:36,130 - DEBUG - on stmt: $66load_global.30.1 = global(max: <built-in function max>)
2025-01-31 15:31:36,130 - DEBUG - on stmt: $const68.31.1 = const(int, 0)
2025-01-31 15:31:36,130 - DEBUG - on stmt: $const70.32.1 = const(int, 0)
2025-01-31 15:31:36,130 - DEBUG - on stmt: $72call_function.33.1 = call $66load_global.30.1($const68.31.1, $const70.32.1, func=$66load_global.30.1, args=[Var($const68.31.1, <string>:6), Var($const70.32.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,130 - DEBUG - on stmt: $74binary_subtract.34.1 = $64binary_subscr.29.1 - $72call_function.33.1
2025-01-31 15:31:36,130 - DEBUG - on stmt: $76call_function.35.1 = call $48load_global.21.1($58unary_negative.26.1, $74binary_subtract.34.1, func=$48load_global.21.1, args=[Var($58unary_negative.26.1, <string>:6), Var($74binary_subtract.34.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,130 - DEBUG - on stmt: $78get_iter.36.1 = getiter(value=$76call_function.35.1)
2025-01-31 15:31:36,130 - DEBUG - on stmt: $phi80.0.1 = $78get_iter.36.1
2025-01-31 15:31:36,130 - DEBUG - on stmt: jump 80
2025-01-31 15:31:36,130 - DEBUG - ==== SSA block rewrite pass on 80
2025-01-31 15:31:36,130 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89f02ff580>
2025-01-31 15:31:36,130 - DEBUG - on stmt: $80for_iter.1.1 = iternext(value=$phi80.0.1)
2025-01-31 15:31:36,130 - DEBUG - on stmt: $80for_iter.2.1 = pair_first(value=$80for_iter.1.1)
2025-01-31 15:31:36,130 - DEBUG - on stmt: $80for_iter.3.1 = pair_second(value=$80for_iter.1.1)
2025-01-31 15:31:36,130 - DEBUG - on stmt: $phi82.1.1 = $80for_iter.2.1
2025-01-31 15:31:36,130 - DEBUG - on stmt: branch $80for_iter.3.1, 82, 194
2025-01-31 15:31:36,130 - DEBUG - ==== SSA block rewrite pass on 82
2025-01-31 15:31:36,130 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89f02ff580>
2025-01-31 15:31:36,130 - DEBUG - on stmt: index00 = $phi82.1.1
2025-01-31 15:31:36,130 - DEBUG - on stmt: jump 90
2025-01-31 15:31:36,131 - DEBUG - ==== SSA block rewrite pass on 194
2025-01-31 15:31:36,131 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89f02ff580>
2025-01-31 15:31:36,131 - DEBUG - on stmt: $92return_value.1.1 = cast(value=out0)
2025-01-31 15:31:36,131 - DEBUG - on stmt: return $92return_value.1.1
2025-01-31 15:31:36,131 - DEBUG - ==== SSA block rewrite pass on 90
2025-01-31 15:31:36,131 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89f02ff580>
2025-01-31 15:31:36,131 - DEBUG - on stmt: $const4.1 = const(int, 0)
2025-01-31 15:31:36,131 - DEBUG - on stmt: stencil_index = $const4.1 + index00
2025-01-31 15:31:36,131 - DEBUG - first assign: stencil_index
2025-01-31 15:31:36,131 - DEBUG - replaced with: stencil_index = $const4.1 + index00
2025-01-31 15:31:36,131 - DEBUG - on stmt: x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-01-31 15:31:36,131 - DEBUG - on stmt: $12unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2025-01-31 15:31:36,131 - DEBUG - on stmt: $20compare_op.7 = $12unary_negative.4 <= x0
2025-01-31 15:31:36,131 - DEBUG - on stmt: bool22 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,131 - DEBUG - on stmt: $22pred = call bool22($20compare_op.7, func=bool22, args=(Var($20compare_op.7, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,131 - DEBUG - on stmt: $phi24.0 = x0
2025-01-31 15:31:36,131 - DEBUG - on stmt: branch $22pred, 91, 123
2025-01-31 15:31:36,131 - DEBUG - ==== SSA block rewrite pass on 91
2025-01-31 15:31:36,131 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89f02ff580>
2025-01-31 15:31:36,131 - DEBUG - on stmt: $26compare_op.2 = x0 <= threshold
2025-01-31 15:31:36,131 - DEBUG - on stmt: bool28 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,131 - DEBUG - on stmt: $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,131 - DEBUG - on stmt: branch $28pred, 115, 127
2025-01-31 15:31:36,131 - DEBUG - ==== SSA block rewrite pass on 115
2025-01-31 15:31:36,131 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89f02ff580>
2025-01-31 15:31:36,131 - DEBUG - on stmt: jump 121
2025-01-31 15:31:36,131 - DEBUG - ==== SSA block rewrite pass on 123
2025-01-31 15:31:36,132 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89f02ff580>
2025-01-31 15:31:36,132 - DEBUG - on stmt: jump 127
2025-01-31 15:31:36,132 - DEBUG - ==== SSA block rewrite pass on 121
2025-01-31 15:31:36,132 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89f02ff580>
2025-01-31 15:31:36,132 - DEBUG - on stmt: x0 = const(int, 0)
2025-01-31 15:31:36,132 - DEBUG - on stmt: jump 127
2025-01-31 15:31:36,132 - DEBUG - ==== SSA block rewrite pass on 127
2025-01-31 15:31:36,132 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89f02ff580>
2025-01-31 15:31:36,132 - DEBUG - on stmt: $const42.1 = const(int, -1)
2025-01-31 15:31:36,132 - DEBUG - on stmt: stencil_index = $const42.1 + index00
2025-01-31 15:31:36,132 - DEBUG - replaced with: stencil_index.1 = $const42.1 + index00
2025-01-31 15:31:36,132 - DEBUG - on stmt: x1 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-01-31 15:31:36,132 - DEBUG - on stmt: $50unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2025-01-31 15:31:36,132 - DEBUG - on stmt: $58compare_op.7 = $50unary_negative.4 <= x1
2025-01-31 15:31:36,132 - DEBUG - on stmt: bool60 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,132 - DEBUG - on stmt: $60pred = call bool60($58compare_op.7, func=bool60, args=(Var($58compare_op.7, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,132 - DEBUG - on stmt: $phi62.0 = x1
2025-01-31 15:31:36,132 - DEBUG - on stmt: branch $60pred, 131, 161
2025-01-31 15:31:36,132 - DEBUG - ==== SSA block rewrite pass on 131
2025-01-31 15:31:36,132 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89f02ff580>
2025-01-31 15:31:36,132 - DEBUG - on stmt: $64compare_op.2 = x1 <= threshold
2025-01-31 15:31:36,132 - DEBUG - on stmt: bool66 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,132 - DEBUG - on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,132 - DEBUG - on stmt: branch $66pred, 153, 165
2025-01-31 15:31:36,132 - DEBUG - ==== SSA block rewrite pass on 153
2025-01-31 15:31:36,132 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89f02ff580>
2025-01-31 15:31:36,132 - DEBUG - on stmt: jump 159
2025-01-31 15:31:36,132 - DEBUG - ==== SSA block rewrite pass on 161
2025-01-31 15:31:36,132 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89f02ff580>
2025-01-31 15:31:36,133 - DEBUG - on stmt: jump 165
2025-01-31 15:31:36,133 - DEBUG - ==== SSA block rewrite pass on 159
2025-01-31 15:31:36,133 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89f02ff580>
2025-01-31 15:31:36,133 - DEBUG - on stmt: x1 = const(int, 0)
2025-01-31 15:31:36,133 - DEBUG - on stmt: jump 165
2025-01-31 15:31:36,133 - DEBUG - ==== SSA block rewrite pass on 165
2025-01-31 15:31:36,133 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89f02ff580>
2025-01-31 15:31:36,133 - DEBUG - on stmt: bool80 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,133 - DEBUG - on stmt: $80pred = call bool80(zero_pos, func=bool80, args=(Var(zero_pos, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,133 - DEBUG - on stmt: branch $80pred, 169, 173
2025-01-31 15:31:36,133 - DEBUG - ==== SSA block rewrite pass on 169
2025-01-31 15:31:36,133 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89f02ff580>
2025-01-31 15:31:36,133 - DEBUG - on stmt: $82load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,133 - DEBUG - on stmt: $84load_method.1 = getattr(value=$82load_global.0, attr=signbit)
2025-01-31 15:31:36,133 - DEBUG - on stmt: $88call_method.3 = call $84load_method.1(x0, func=$84load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,133 - DEBUG - on stmt: $90load_global.4 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,133 - DEBUG - on stmt: $92load_method.5 = getattr(value=$90load_global.4, attr=signbit)
2025-01-31 15:31:36,133 - DEBUG - on stmt: $96call_method.7 = call $92load_method.5(x1, func=$92load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,133 - DEBUG - on stmt: $98compare_op.8 = $88call_method.3 != $96call_method.7
2025-01-31 15:31:36,133 - DEBUG - on stmt: $100return_value.9 = cast(value=$98compare_op.8)
2025-01-31 15:31:36,133 - DEBUG - on stmt: out0[index00] = $100return_value.9
2025-01-31 15:31:36,133 - DEBUG - on stmt: jump 193
2025-01-31 15:31:36,133 - DEBUG - ==== SSA block rewrite pass on 173
2025-01-31 15:31:36,133 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89f02ff580>
2025-01-31 15:31:36,133 - DEBUG - on stmt: $102load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,133 - DEBUG - on stmt: $104load_method.1 = getattr(value=$102load_global.0, attr=sign)
2025-01-31 15:31:36,133 - DEBUG - on stmt: $108call_method.3 = call $104load_method.1(x0, func=$104load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,133 - DEBUG - on stmt: $110load_global.4 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,134 - DEBUG - on stmt: $112load_method.5 = getattr(value=$110load_global.4, attr=sign)
2025-01-31 15:31:36,134 - DEBUG - on stmt: $116call_method.7 = call $112load_method.5(x1, func=$112load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,134 - DEBUG - on stmt: $118compare_op.8 = $108call_method.3 != $116call_method.7
2025-01-31 15:31:36,134 - DEBUG - on stmt: $120return_value.9 = cast(value=$118compare_op.8)
2025-01-31 15:31:36,134 - DEBUG - on stmt: out0[index00] = $120return_value.9
2025-01-31 15:31:36,134 - DEBUG - on stmt: jump 193
2025-01-31 15:31:36,134 - DEBUG - ==== SSA block rewrite pass on 193
2025-01-31 15:31:36,134 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89f02ff580>
2025-01-31 15:31:36,134 - DEBUG - on stmt: jump 80
2025-01-31 15:31:36,134 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {90: [<numba.core.ir.Assign object at 0x7c89f02fe0e0>],
             127: [<numba.core.ir.Assign object at 0x7c89f02ff730>]})
2025-01-31 15:31:36,134 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-31 15:31:36,134 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89f02ff580>
2025-01-31 15:31:36,134 - DEBUG - on stmt: x = arg(0, name=x)
2025-01-31 15:31:36,134 - DEBUG - on stmt: threshold = arg(1, name=threshold)
2025-01-31 15:31:36,134 - DEBUG - on stmt: zero_pos = arg(2, name=zero_pos)
2025-01-31 15:31:36,134 - DEBUG - on stmt: full_shape0 = getattr(value=x, attr=shape)
2025-01-31 15:31:36,134 - DEBUG - on stmt: $8load_global.2.1 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,134 - DEBUG - on stmt: $10load_attr.3.1 = getattr(value=$8load_global.2.1, attr=empty)
2025-01-31 15:31:36,134 - DEBUG - on stmt: $14load_global.5.1 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,134 - DEBUG - on stmt: $16load_attr.6.1 = getattr(value=$14load_global.5.1, attr=bool_)
2025-01-31 15:31:36,134 - DEBUG - on stmt: out0 = call $10load_attr.3.1(full_shape0, func=$10load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,134 - DEBUG - on stmt: $const24.9.1 = const(int, 0)
2025-01-31 15:31:36,134 - DEBUG - on stmt: $const28.11.1 = const(NoneType, None)
2025-01-31 15:31:36,134 - DEBUG - on stmt: $const30.12.1 = const(int, 1)
2025-01-31 15:31:36,135 - DEBUG - on stmt: $32build_slice.13.1 = global(slice: <class 'slice'>)
2025-01-31 15:31:36,135 - DEBUG - on stmt: $32build_slice.14.1 = call $32build_slice.13.1($const28.11.1, $const30.12.1, func=$32build_slice.13.1, args=(Var($const28.11.1, <string>:4), Var($const30.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,135 - DEBUG - on stmt: out0[$32build_slice.14.1] = $const24.9.1
2025-01-31 15:31:36,135 - DEBUG - on stmt: $const36.15.1 = const(int, 0)
2025-01-31 15:31:36,135 - DEBUG - on stmt: $const40.17.1 = const(int, 0)
2025-01-31 15:31:36,135 - DEBUG - on stmt: $const42.18.1 = const(NoneType, None)
2025-01-31 15:31:36,135 - DEBUG - on stmt: $44build_slice.19.1 = global(slice: <class 'slice'>)
2025-01-31 15:31:36,135 - DEBUG - on stmt: $44build_slice.20.1 = call $44build_slice.19.1($const40.17.1, $const42.18.1, func=$44build_slice.19.1, args=(Var($const40.17.1, <string>:5), Var($const42.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,135 - DEBUG - on stmt: out0[$44build_slice.20.1] = $const36.15.1
2025-01-31 15:31:36,135 - DEBUG - on stmt: $48load_global.21.1 = global(range: <class 'range'>)
2025-01-31 15:31:36,135 - DEBUG - on stmt: $50load_global.22.1 = global(min: <built-in function min>)
2025-01-31 15:31:36,135 - DEBUG - on stmt: $const52.23.1 = const(int, 0)
2025-01-31 15:31:36,135 - DEBUG - on stmt: $const54.24.1 = const(int, -1)
2025-01-31 15:31:36,135 - DEBUG - on stmt: $56call_function.25.1 = call $50load_global.22.1($const52.23.1, $const54.24.1, func=$50load_global.22.1, args=[Var($const52.23.1, <string>:6), Var($const54.24.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,135 - DEBUG - on stmt: $58unary_negative.26.1 = unary(fn=<built-in function neg>, value=$56call_function.25.1)
2025-01-31 15:31:36,135 - DEBUG - on stmt: $const62.28.1 = const(int, 0)
2025-01-31 15:31:36,135 - DEBUG - on stmt: $64binary_subscr.29.1 = getitem(value=full_shape0, index=$const62.28.1, fn=<built-in function getitem>)
2025-01-31 15:31:36,135 - DEBUG - on stmt: $66load_global.30.1 = global(max: <built-in function max>)
2025-01-31 15:31:36,135 - DEBUG - on stmt: $const68.31.1 = const(int, 0)
2025-01-31 15:31:36,135 - DEBUG - on stmt: $const70.32.1 = const(int, 0)
2025-01-31 15:31:36,135 - DEBUG - on stmt: $72call_function.33.1 = call $66load_global.30.1($const68.31.1, $const70.32.1, func=$66load_global.30.1, args=[Var($const68.31.1, <string>:6), Var($const70.32.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,135 - DEBUG - on stmt: $74binary_subtract.34.1 = $64binary_subscr.29.1 - $72call_function.33.1
2025-01-31 15:31:36,135 - DEBUG - on stmt: $76call_function.35.1 = call $48load_global.21.1($58unary_negative.26.1, $74binary_subtract.34.1, func=$48load_global.21.1, args=[Var($58unary_negative.26.1, <string>:6), Var($74binary_subtract.34.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,136 - DEBUG - on stmt: $78get_iter.36.1 = getiter(value=$76call_function.35.1)
2025-01-31 15:31:36,136 - DEBUG - on stmt: $phi80.0.1 = $78get_iter.36.1
2025-01-31 15:31:36,136 - DEBUG - on stmt: jump 80
2025-01-31 15:31:36,136 - DEBUG - ==== SSA block rewrite pass on 80
2025-01-31 15:31:36,136 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89f02ff580>
2025-01-31 15:31:36,136 - DEBUG - on stmt: $80for_iter.1.1 = iternext(value=$phi80.0.1)
2025-01-31 15:31:36,136 - DEBUG - on stmt: $80for_iter.2.1 = pair_first(value=$80for_iter.1.1)
2025-01-31 15:31:36,136 - DEBUG - on stmt: $80for_iter.3.1 = pair_second(value=$80for_iter.1.1)
2025-01-31 15:31:36,136 - DEBUG - on stmt: $phi82.1.1 = $80for_iter.2.1
2025-01-31 15:31:36,136 - DEBUG - on stmt: branch $80for_iter.3.1, 82, 194
2025-01-31 15:31:36,136 - DEBUG - ==== SSA block rewrite pass on 82
2025-01-31 15:31:36,136 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89f02ff580>
2025-01-31 15:31:36,136 - DEBUG - on stmt: index00 = $phi82.1.1
2025-01-31 15:31:36,136 - DEBUG - on stmt: jump 90
2025-01-31 15:31:36,136 - DEBUG - ==== SSA block rewrite pass on 194
2025-01-31 15:31:36,136 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89f02ff580>
2025-01-31 15:31:36,136 - DEBUG - on stmt: $92return_value.1.1 = cast(value=out0)
2025-01-31 15:31:36,136 - DEBUG - on stmt: return $92return_value.1.1
2025-01-31 15:31:36,136 - DEBUG - ==== SSA block rewrite pass on 90
2025-01-31 15:31:36,136 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89f02ff580>
2025-01-31 15:31:36,136 - DEBUG - on stmt: $const4.1 = const(int, 0)
2025-01-31 15:31:36,136 - DEBUG - on stmt: stencil_index = $const4.1 + index00
2025-01-31 15:31:36,136 - DEBUG - on stmt: x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-01-31 15:31:36,136 - DEBUG - find_def var='stencil_index' stmt=x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-01-31 15:31:36,136 - DEBUG - on stmt: $12unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2025-01-31 15:31:36,136 - DEBUG - on stmt: $20compare_op.7 = $12unary_negative.4 <= x0
2025-01-31 15:31:36,136 - DEBUG - on stmt: bool22 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,136 - DEBUG - on stmt: $22pred = call bool22($20compare_op.7, func=bool22, args=(Var($20compare_op.7, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,137 - DEBUG - on stmt: $phi24.0 = x0
2025-01-31 15:31:36,137 - DEBUG - on stmt: branch $22pred, 91, 123
2025-01-31 15:31:36,137 - DEBUG - ==== SSA block rewrite pass on 91
2025-01-31 15:31:36,137 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89f02ff580>
2025-01-31 15:31:36,137 - DEBUG - on stmt: $26compare_op.2 = x0 <= threshold
2025-01-31 15:31:36,137 - DEBUG - on stmt: bool28 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,137 - DEBUG - on stmt: $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,137 - DEBUG - on stmt: branch $28pred, 115, 127
2025-01-31 15:31:36,137 - DEBUG - ==== SSA block rewrite pass on 115
2025-01-31 15:31:36,137 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89f02ff580>
2025-01-31 15:31:36,137 - DEBUG - on stmt: jump 121
2025-01-31 15:31:36,137 - DEBUG - ==== SSA block rewrite pass on 123
2025-01-31 15:31:36,137 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89f02ff580>
2025-01-31 15:31:36,137 - DEBUG - on stmt: jump 127
2025-01-31 15:31:36,137 - DEBUG - ==== SSA block rewrite pass on 121
2025-01-31 15:31:36,137 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89f02ff580>
2025-01-31 15:31:36,137 - DEBUG - on stmt: x0 = const(int, 0)
2025-01-31 15:31:36,137 - DEBUG - on stmt: jump 127
2025-01-31 15:31:36,137 - DEBUG - ==== SSA block rewrite pass on 127
2025-01-31 15:31:36,137 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89f02ff580>
2025-01-31 15:31:36,137 - DEBUG - on stmt: $const42.1 = const(int, -1)
2025-01-31 15:31:36,137 - DEBUG - on stmt: stencil_index.1 = $const42.1 + index00
2025-01-31 15:31:36,137 - DEBUG - on stmt: x1 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-01-31 15:31:36,137 - DEBUG - find_def var='stencil_index' stmt=x1 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-01-31 15:31:36,137 - DEBUG - replaced with: x1 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2025-01-31 15:31:36,138 - DEBUG - on stmt: $50unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2025-01-31 15:31:36,138 - DEBUG - on stmt: $58compare_op.7 = $50unary_negative.4 <= x1
2025-01-31 15:31:36,138 - DEBUG - on stmt: bool60 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,138 - DEBUG - on stmt: $60pred = call bool60($58compare_op.7, func=bool60, args=(Var($58compare_op.7, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,138 - DEBUG - on stmt: $phi62.0 = x1
2025-01-31 15:31:36,138 - DEBUG - on stmt: branch $60pred, 131, 161
2025-01-31 15:31:36,138 - DEBUG - ==== SSA block rewrite pass on 131
2025-01-31 15:31:36,138 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89f02ff580>
2025-01-31 15:31:36,138 - DEBUG - on stmt: $64compare_op.2 = x1 <= threshold
2025-01-31 15:31:36,138 - DEBUG - on stmt: bool66 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,138 - DEBUG - on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,138 - DEBUG - on stmt: branch $66pred, 153, 165
2025-01-31 15:31:36,138 - DEBUG - ==== SSA block rewrite pass on 153
2025-01-31 15:31:36,138 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89f02ff580>
2025-01-31 15:31:36,138 - DEBUG - on stmt: jump 159
2025-01-31 15:31:36,138 - DEBUG - ==== SSA block rewrite pass on 161
2025-01-31 15:31:36,138 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89f02ff580>
2025-01-31 15:31:36,138 - DEBUG - on stmt: jump 165
2025-01-31 15:31:36,138 - DEBUG - ==== SSA block rewrite pass on 159
2025-01-31 15:31:36,138 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89f02ff580>
2025-01-31 15:31:36,138 - DEBUG - on stmt: x1 = const(int, 0)
2025-01-31 15:31:36,138 - DEBUG - on stmt: jump 165
2025-01-31 15:31:36,138 - DEBUG - ==== SSA block rewrite pass on 165
2025-01-31 15:31:36,138 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89f02ff580>
2025-01-31 15:31:36,138 - DEBUG - on stmt: bool80 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,138 - DEBUG - on stmt: $80pred = call bool80(zero_pos, func=bool80, args=(Var(zero_pos, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,138 - DEBUG - on stmt: branch $80pred, 169, 173
2025-01-31 15:31:36,139 - DEBUG - ==== SSA block rewrite pass on 169
2025-01-31 15:31:36,139 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89f02ff580>
2025-01-31 15:31:36,139 - DEBUG - on stmt: $82load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,139 - DEBUG - on stmt: $84load_method.1 = getattr(value=$82load_global.0, attr=signbit)
2025-01-31 15:31:36,139 - DEBUG - on stmt: $88call_method.3 = call $84load_method.1(x0, func=$84load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,139 - DEBUG - on stmt: $90load_global.4 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,139 - DEBUG - on stmt: $92load_method.5 = getattr(value=$90load_global.4, attr=signbit)
2025-01-31 15:31:36,139 - DEBUG - on stmt: $96call_method.7 = call $92load_method.5(x1, func=$92load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,139 - DEBUG - on stmt: $98compare_op.8 = $88call_method.3 != $96call_method.7
2025-01-31 15:31:36,139 - DEBUG - on stmt: $100return_value.9 = cast(value=$98compare_op.8)
2025-01-31 15:31:36,139 - DEBUG - on stmt: out0[index00] = $100return_value.9
2025-01-31 15:31:36,139 - DEBUG - on stmt: jump 193
2025-01-31 15:31:36,139 - DEBUG - ==== SSA block rewrite pass on 173
2025-01-31 15:31:36,139 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89f02ff580>
2025-01-31 15:31:36,139 - DEBUG - on stmt: $102load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,139 - DEBUG - on stmt: $104load_method.1 = getattr(value=$102load_global.0, attr=sign)
2025-01-31 15:31:36,139 - DEBUG - on stmt: $108call_method.3 = call $104load_method.1(x0, func=$104load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,139 - DEBUG - on stmt: $110load_global.4 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,139 - DEBUG - on stmt: $112load_method.5 = getattr(value=$110load_global.4, attr=sign)
2025-01-31 15:31:36,139 - DEBUG - on stmt: $116call_method.7 = call $112load_method.5(x1, func=$112load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,139 - DEBUG - on stmt: $118compare_op.8 = $108call_method.3 != $116call_method.7
2025-01-31 15:31:36,139 - DEBUG - on stmt: $120return_value.9 = cast(value=$118compare_op.8)
2025-01-31 15:31:36,139 - DEBUG - on stmt: out0[index00] = $120return_value.9
2025-01-31 15:31:36,140 - DEBUG - on stmt: jump 193
2025-01-31 15:31:36,140 - DEBUG - ==== SSA block rewrite pass on 193
2025-01-31 15:31:36,140 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89f02ff580>
2025-01-31 15:31:36,140 - DEBUG - on stmt: jump 80
2025-01-31 15:31:36,140 - DEBUG - Fix SSA violator on var x0
2025-01-31 15:31:36,140 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-31 15:31:36,140 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89f02fde40>
2025-01-31 15:31:36,140 - DEBUG - on stmt: x = arg(0, name=x)
2025-01-31 15:31:36,140 - DEBUG - on stmt: threshold = arg(1, name=threshold)
2025-01-31 15:31:36,140 - DEBUG - on stmt: zero_pos = arg(2, name=zero_pos)
2025-01-31 15:31:36,140 - DEBUG - on stmt: full_shape0 = getattr(value=x, attr=shape)
2025-01-31 15:31:36,140 - DEBUG - on stmt: $8load_global.2.1 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,140 - DEBUG - on stmt: $10load_attr.3.1 = getattr(value=$8load_global.2.1, attr=empty)
2025-01-31 15:31:36,140 - DEBUG - on stmt: $14load_global.5.1 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,140 - DEBUG - on stmt: $16load_attr.6.1 = getattr(value=$14load_global.5.1, attr=bool_)
2025-01-31 15:31:36,140 - DEBUG - on stmt: out0 = call $10load_attr.3.1(full_shape0, func=$10load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,140 - DEBUG - on stmt: $const24.9.1 = const(int, 0)
2025-01-31 15:31:36,140 - DEBUG - on stmt: $const28.11.1 = const(NoneType, None)
2025-01-31 15:31:36,140 - DEBUG - on stmt: $const30.12.1 = const(int, 1)
2025-01-31 15:31:36,140 - DEBUG - on stmt: $32build_slice.13.1 = global(slice: <class 'slice'>)
2025-01-31 15:31:36,140 - DEBUG - on stmt: $32build_slice.14.1 = call $32build_slice.13.1($const28.11.1, $const30.12.1, func=$32build_slice.13.1, args=(Var($const28.11.1, <string>:4), Var($const30.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,140 - DEBUG - on stmt: out0[$32build_slice.14.1] = $const24.9.1
2025-01-31 15:31:36,140 - DEBUG - on stmt: $const36.15.1 = const(int, 0)
2025-01-31 15:31:36,140 - DEBUG - on stmt: $const40.17.1 = const(int, 0)
2025-01-31 15:31:36,140 - DEBUG - on stmt: $const42.18.1 = const(NoneType, None)
2025-01-31 15:31:36,140 - DEBUG - on stmt: $44build_slice.19.1 = global(slice: <class 'slice'>)
2025-01-31 15:31:36,140 - DEBUG - on stmt: $44build_slice.20.1 = call $44build_slice.19.1($const40.17.1, $const42.18.1, func=$44build_slice.19.1, args=(Var($const40.17.1, <string>:5), Var($const42.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,140 - DEBUG - on stmt: out0[$44build_slice.20.1] = $const36.15.1
2025-01-31 15:31:36,140 - DEBUG - on stmt: $48load_global.21.1 = global(range: <class 'range'>)
2025-01-31 15:31:36,141 - DEBUG - on stmt: $50load_global.22.1 = global(min: <built-in function min>)
2025-01-31 15:31:36,141 - DEBUG - on stmt: $const52.23.1 = const(int, 0)
2025-01-31 15:31:36,141 - DEBUG - on stmt: $const54.24.1 = const(int, -1)
2025-01-31 15:31:36,141 - DEBUG - on stmt: $56call_function.25.1 = call $50load_global.22.1($const52.23.1, $const54.24.1, func=$50load_global.22.1, args=[Var($const52.23.1, <string>:6), Var($const54.24.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,141 - DEBUG - on stmt: $58unary_negative.26.1 = unary(fn=<built-in function neg>, value=$56call_function.25.1)
2025-01-31 15:31:36,141 - DEBUG - on stmt: $const62.28.1 = const(int, 0)
2025-01-31 15:31:36,141 - DEBUG - on stmt: $64binary_subscr.29.1 = getitem(value=full_shape0, index=$const62.28.1, fn=<built-in function getitem>)
2025-01-31 15:31:36,141 - DEBUG - on stmt: $66load_global.30.1 = global(max: <built-in function max>)
2025-01-31 15:31:36,141 - DEBUG - on stmt: $const68.31.1 = const(int, 0)
2025-01-31 15:31:36,141 - DEBUG - on stmt: $const70.32.1 = const(int, 0)
2025-01-31 15:31:36,141 - DEBUG - on stmt: $72call_function.33.1 = call $66load_global.30.1($const68.31.1, $const70.32.1, func=$66load_global.30.1, args=[Var($const68.31.1, <string>:6), Var($const70.32.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,141 - DEBUG - on stmt: $74binary_subtract.34.1 = $64binary_subscr.29.1 - $72call_function.33.1
2025-01-31 15:31:36,141 - DEBUG - on stmt: $76call_function.35.1 = call $48load_global.21.1($58unary_negative.26.1, $74binary_subtract.34.1, func=$48load_global.21.1, args=[Var($58unary_negative.26.1, <string>:6), Var($74binary_subtract.34.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,141 - DEBUG - on stmt: $78get_iter.36.1 = getiter(value=$76call_function.35.1)
2025-01-31 15:31:36,141 - DEBUG - on stmt: $phi80.0.1 = $78get_iter.36.1
2025-01-31 15:31:36,141 - DEBUG - on stmt: jump 80
2025-01-31 15:31:36,141 - DEBUG - ==== SSA block rewrite pass on 80
2025-01-31 15:31:36,141 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89f02fde40>
2025-01-31 15:31:36,141 - DEBUG - on stmt: $80for_iter.1.1 = iternext(value=$phi80.0.1)
2025-01-31 15:31:36,141 - DEBUG - on stmt: $80for_iter.2.1 = pair_first(value=$80for_iter.1.1)
2025-01-31 15:31:36,141 - DEBUG - on stmt: $80for_iter.3.1 = pair_second(value=$80for_iter.1.1)
2025-01-31 15:31:36,141 - DEBUG - on stmt: $phi82.1.1 = $80for_iter.2.1
2025-01-31 15:31:36,141 - DEBUG - on stmt: branch $80for_iter.3.1, 82, 194
2025-01-31 15:31:36,141 - DEBUG - ==== SSA block rewrite pass on 82
2025-01-31 15:31:36,141 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89f02fde40>
2025-01-31 15:31:36,141 - DEBUG - on stmt: index00 = $phi82.1.1
2025-01-31 15:31:36,141 - DEBUG - on stmt: jump 90
2025-01-31 15:31:36,141 - DEBUG - ==== SSA block rewrite pass on 194
2025-01-31 15:31:36,141 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89f02fde40>
2025-01-31 15:31:36,142 - DEBUG - on stmt: $92return_value.1.1 = cast(value=out0)
2025-01-31 15:31:36,142 - DEBUG - on stmt: return $92return_value.1.1
2025-01-31 15:31:36,142 - DEBUG - ==== SSA block rewrite pass on 90
2025-01-31 15:31:36,142 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89f02fde40>
2025-01-31 15:31:36,142 - DEBUG - on stmt: $const4.1 = const(int, 0)
2025-01-31 15:31:36,142 - DEBUG - on stmt: stencil_index = $const4.1 + index00
2025-01-31 15:31:36,142 - DEBUG - on stmt: x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-01-31 15:31:36,142 - DEBUG - first assign: x0
2025-01-31 15:31:36,142 - DEBUG - replaced with: x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-01-31 15:31:36,142 - DEBUG - on stmt: $12unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2025-01-31 15:31:36,142 - DEBUG - on stmt: $20compare_op.7 = $12unary_negative.4 <= x0
2025-01-31 15:31:36,142 - DEBUG - on stmt: bool22 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,142 - DEBUG - on stmt: $22pred = call bool22($20compare_op.7, func=bool22, args=(Var($20compare_op.7, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,142 - DEBUG - on stmt: $phi24.0 = x0
2025-01-31 15:31:36,142 - DEBUG - on stmt: branch $22pred, 91, 123
2025-01-31 15:31:36,142 - DEBUG - ==== SSA block rewrite pass on 91
2025-01-31 15:31:36,142 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89f02fde40>
2025-01-31 15:31:36,142 - DEBUG - on stmt: $26compare_op.2 = x0 <= threshold
2025-01-31 15:31:36,142 - DEBUG - on stmt: bool28 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,142 - DEBUG - on stmt: $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,142 - DEBUG - on stmt: branch $28pred, 115, 127
2025-01-31 15:31:36,142 - DEBUG - ==== SSA block rewrite pass on 115
2025-01-31 15:31:36,142 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89f02fde40>
2025-01-31 15:31:36,142 - DEBUG - on stmt: jump 121
2025-01-31 15:31:36,142 - DEBUG - ==== SSA block rewrite pass on 123
2025-01-31 15:31:36,142 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89f02fde40>
2025-01-31 15:31:36,142 - DEBUG - on stmt: jump 127
2025-01-31 15:31:36,142 - DEBUG - ==== SSA block rewrite pass on 121
2025-01-31 15:31:36,142 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89f02fde40>
2025-01-31 15:31:36,143 - DEBUG - on stmt: x0 = const(int, 0)
2025-01-31 15:31:36,143 - DEBUG - replaced with: x0.1 = const(int, 0)
2025-01-31 15:31:36,143 - DEBUG - on stmt: jump 127
2025-01-31 15:31:36,143 - DEBUG - ==== SSA block rewrite pass on 127
2025-01-31 15:31:36,143 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89f02fde40>
2025-01-31 15:31:36,143 - DEBUG - on stmt: $const42.1 = const(int, -1)
2025-01-31 15:31:36,143 - DEBUG - on stmt: stencil_index.1 = $const42.1 + index00
2025-01-31 15:31:36,143 - DEBUG - on stmt: x1 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2025-01-31 15:31:36,143 - DEBUG - on stmt: $50unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2025-01-31 15:31:36,143 - DEBUG - on stmt: $58compare_op.7 = $50unary_negative.4 <= x1
2025-01-31 15:31:36,143 - DEBUG - on stmt: bool60 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,143 - DEBUG - on stmt: $60pred = call bool60($58compare_op.7, func=bool60, args=(Var($58compare_op.7, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,143 - DEBUG - on stmt: $phi62.0 = x1
2025-01-31 15:31:36,143 - DEBUG - on stmt: branch $60pred, 131, 161
2025-01-31 15:31:36,143 - DEBUG - ==== SSA block rewrite pass on 131
2025-01-31 15:31:36,143 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89f02fde40>
2025-01-31 15:31:36,143 - DEBUG - on stmt: $64compare_op.2 = x1 <= threshold
2025-01-31 15:31:36,143 - DEBUG - on stmt: bool66 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,143 - DEBUG - on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,143 - DEBUG - on stmt: branch $66pred, 153, 165
2025-01-31 15:31:36,143 - DEBUG - ==== SSA block rewrite pass on 153
2025-01-31 15:31:36,143 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89f02fde40>
2025-01-31 15:31:36,143 - DEBUG - on stmt: jump 159
2025-01-31 15:31:36,143 - DEBUG - ==== SSA block rewrite pass on 161
2025-01-31 15:31:36,143 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89f02fde40>
2025-01-31 15:31:36,143 - DEBUG - on stmt: jump 165
2025-01-31 15:31:36,143 - DEBUG - ==== SSA block rewrite pass on 159
2025-01-31 15:31:36,143 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89f02fde40>
2025-01-31 15:31:36,143 - DEBUG - on stmt: x1 = const(int, 0)
2025-01-31 15:31:36,143 - DEBUG - on stmt: jump 165
2025-01-31 15:31:36,144 - DEBUG - ==== SSA block rewrite pass on 165
2025-01-31 15:31:36,144 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89f02fde40>
2025-01-31 15:31:36,144 - DEBUG - on stmt: bool80 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,144 - DEBUG - on stmt: $80pred = call bool80(zero_pos, func=bool80, args=(Var(zero_pos, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,144 - DEBUG - on stmt: branch $80pred, 169, 173
2025-01-31 15:31:36,144 - DEBUG - ==== SSA block rewrite pass on 169
2025-01-31 15:31:36,144 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89f02fde40>
2025-01-31 15:31:36,144 - DEBUG - on stmt: $82load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,144 - DEBUG - on stmt: $84load_method.1 = getattr(value=$82load_global.0, attr=signbit)
2025-01-31 15:31:36,144 - DEBUG - on stmt: $88call_method.3 = call $84load_method.1(x0, func=$84load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,144 - DEBUG - on stmt: $90load_global.4 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,144 - DEBUG - on stmt: $92load_method.5 = getattr(value=$90load_global.4, attr=signbit)
2025-01-31 15:31:36,144 - DEBUG - on stmt: $96call_method.7 = call $92load_method.5(x1, func=$92load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,144 - DEBUG - on stmt: $98compare_op.8 = $88call_method.3 != $96call_method.7
2025-01-31 15:31:36,144 - DEBUG - on stmt: $100return_value.9 = cast(value=$98compare_op.8)
2025-01-31 15:31:36,144 - DEBUG - on stmt: out0[index00] = $100return_value.9
2025-01-31 15:31:36,144 - DEBUG - on stmt: jump 193
2025-01-31 15:31:36,144 - DEBUG - ==== SSA block rewrite pass on 173
2025-01-31 15:31:36,144 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89f02fde40>
2025-01-31 15:31:36,144 - DEBUG - on stmt: $102load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,144 - DEBUG - on stmt: $104load_method.1 = getattr(value=$102load_global.0, attr=sign)
2025-01-31 15:31:36,144 - DEBUG - on stmt: $108call_method.3 = call $104load_method.1(x0, func=$104load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,144 - DEBUG - on stmt: $110load_global.4 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,144 - DEBUG - on stmt: $112load_method.5 = getattr(value=$110load_global.4, attr=sign)
2025-01-31 15:31:36,144 - DEBUG - on stmt: $116call_method.7 = call $112load_method.5(x1, func=$112load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,144 - DEBUG - on stmt: $118compare_op.8 = $108call_method.3 != $116call_method.7
2025-01-31 15:31:36,144 - DEBUG - on stmt: $120return_value.9 = cast(value=$118compare_op.8)
2025-01-31 15:31:36,145 - DEBUG - on stmt: out0[index00] = $120return_value.9
2025-01-31 15:31:36,145 - DEBUG - on stmt: jump 193
2025-01-31 15:31:36,145 - DEBUG - ==== SSA block rewrite pass on 193
2025-01-31 15:31:36,145 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89f02fde40>
2025-01-31 15:31:36,145 - DEBUG - on stmt: jump 80
2025-01-31 15:31:36,145 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {90: [<numba.core.ir.Assign object at 0x7c89f02fefe0>],
             121: [<numba.core.ir.Assign object at 0x7c89f02fee60>]})
2025-01-31 15:31:36,145 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-31 15:31:36,145 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89f02fdf90>
2025-01-31 15:31:36,145 - DEBUG - on stmt: x = arg(0, name=x)
2025-01-31 15:31:36,145 - DEBUG - on stmt: threshold = arg(1, name=threshold)
2025-01-31 15:31:36,145 - DEBUG - on stmt: zero_pos = arg(2, name=zero_pos)
2025-01-31 15:31:36,145 - DEBUG - on stmt: full_shape0 = getattr(value=x, attr=shape)
2025-01-31 15:31:36,145 - DEBUG - on stmt: $8load_global.2.1 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,145 - DEBUG - on stmt: $10load_attr.3.1 = getattr(value=$8load_global.2.1, attr=empty)
2025-01-31 15:31:36,145 - DEBUG - on stmt: $14load_global.5.1 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,145 - DEBUG - on stmt: $16load_attr.6.1 = getattr(value=$14load_global.5.1, attr=bool_)
2025-01-31 15:31:36,145 - DEBUG - on stmt: out0 = call $10load_attr.3.1(full_shape0, func=$10load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,145 - DEBUG - on stmt: $const24.9.1 = const(int, 0)
2025-01-31 15:31:36,145 - DEBUG - on stmt: $const28.11.1 = const(NoneType, None)
2025-01-31 15:31:36,145 - DEBUG - on stmt: $const30.12.1 = const(int, 1)
2025-01-31 15:31:36,145 - DEBUG - on stmt: $32build_slice.13.1 = global(slice: <class 'slice'>)
2025-01-31 15:31:36,145 - DEBUG - on stmt: $32build_slice.14.1 = call $32build_slice.13.1($const28.11.1, $const30.12.1, func=$32build_slice.13.1, args=(Var($const28.11.1, <string>:4), Var($const30.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,145 - DEBUG - on stmt: out0[$32build_slice.14.1] = $const24.9.1
2025-01-31 15:31:36,145 - DEBUG - on stmt: $const36.15.1 = const(int, 0)
2025-01-31 15:31:36,145 - DEBUG - on stmt: $const40.17.1 = const(int, 0)
2025-01-31 15:31:36,146 - DEBUG - on stmt: $const42.18.1 = const(NoneType, None)
2025-01-31 15:31:36,146 - DEBUG - on stmt: $44build_slice.19.1 = global(slice: <class 'slice'>)
2025-01-31 15:31:36,146 - DEBUG - on stmt: $44build_slice.20.1 = call $44build_slice.19.1($const40.17.1, $const42.18.1, func=$44build_slice.19.1, args=(Var($const40.17.1, <string>:5), Var($const42.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,146 - DEBUG - on stmt: out0[$44build_slice.20.1] = $const36.15.1
2025-01-31 15:31:36,146 - DEBUG - on stmt: $48load_global.21.1 = global(range: <class 'range'>)
2025-01-31 15:31:36,146 - DEBUG - on stmt: $50load_global.22.1 = global(min: <built-in function min>)
2025-01-31 15:31:36,146 - DEBUG - on stmt: $const52.23.1 = const(int, 0)
2025-01-31 15:31:36,146 - DEBUG - on stmt: $const54.24.1 = const(int, -1)
2025-01-31 15:31:36,146 - DEBUG - on stmt: $56call_function.25.1 = call $50load_global.22.1($const52.23.1, $const54.24.1, func=$50load_global.22.1, args=[Var($const52.23.1, <string>:6), Var($const54.24.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,146 - DEBUG - on stmt: $58unary_negative.26.1 = unary(fn=<built-in function neg>, value=$56call_function.25.1)
2025-01-31 15:31:36,146 - DEBUG - on stmt: $const62.28.1 = const(int, 0)
2025-01-31 15:31:36,146 - DEBUG - on stmt: $64binary_subscr.29.1 = getitem(value=full_shape0, index=$const62.28.1, fn=<built-in function getitem>)
2025-01-31 15:31:36,146 - DEBUG - on stmt: $66load_global.30.1 = global(max: <built-in function max>)
2025-01-31 15:31:36,146 - DEBUG - on stmt: $const68.31.1 = const(int, 0)
2025-01-31 15:31:36,146 - DEBUG - on stmt: $const70.32.1 = const(int, 0)
2025-01-31 15:31:36,146 - DEBUG - on stmt: $72call_function.33.1 = call $66load_global.30.1($const68.31.1, $const70.32.1, func=$66load_global.30.1, args=[Var($const68.31.1, <string>:6), Var($const70.32.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,146 - DEBUG - on stmt: $74binary_subtract.34.1 = $64binary_subscr.29.1 - $72call_function.33.1
2025-01-31 15:31:36,146 - DEBUG - on stmt: $76call_function.35.1 = call $48load_global.21.1($58unary_negative.26.1, $74binary_subtract.34.1, func=$48load_global.21.1, args=[Var($58unary_negative.26.1, <string>:6), Var($74binary_subtract.34.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,146 - DEBUG - on stmt: $78get_iter.36.1 = getiter(value=$76call_function.35.1)
2025-01-31 15:31:36,146 - DEBUG - on stmt: $phi80.0.1 = $78get_iter.36.1
2025-01-31 15:31:36,146 - DEBUG - on stmt: jump 80
2025-01-31 15:31:36,146 - DEBUG - ==== SSA block rewrite pass on 80
2025-01-31 15:31:36,146 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89f02fdf90>
2025-01-31 15:31:36,146 - DEBUG - on stmt: $80for_iter.1.1 = iternext(value=$phi80.0.1)
2025-01-31 15:31:36,146 - DEBUG - on stmt: $80for_iter.2.1 = pair_first(value=$80for_iter.1.1)
2025-01-31 15:31:36,146 - DEBUG - on stmt: $80for_iter.3.1 = pair_second(value=$80for_iter.1.1)
2025-01-31 15:31:36,147 - DEBUG - on stmt: $phi82.1.1 = $80for_iter.2.1
2025-01-31 15:31:36,147 - DEBUG - on stmt: branch $80for_iter.3.1, 82, 194
2025-01-31 15:31:36,147 - DEBUG - ==== SSA block rewrite pass on 82
2025-01-31 15:31:36,147 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89f02fdf90>
2025-01-31 15:31:36,147 - DEBUG - on stmt: index00 = $phi82.1.1
2025-01-31 15:31:36,147 - DEBUG - on stmt: jump 90
2025-01-31 15:31:36,147 - DEBUG - ==== SSA block rewrite pass on 194
2025-01-31 15:31:36,147 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89f02fdf90>
2025-01-31 15:31:36,147 - DEBUG - on stmt: $92return_value.1.1 = cast(value=out0)
2025-01-31 15:31:36,147 - DEBUG - on stmt: return $92return_value.1.1
2025-01-31 15:31:36,147 - DEBUG - ==== SSA block rewrite pass on 90
2025-01-31 15:31:36,147 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89f02fdf90>
2025-01-31 15:31:36,147 - DEBUG - on stmt: $const4.1 = const(int, 0)
2025-01-31 15:31:36,147 - DEBUG - on stmt: stencil_index = $const4.1 + index00
2025-01-31 15:31:36,147 - DEBUG - on stmt: x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-01-31 15:31:36,147 - DEBUG - on stmt: $12unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2025-01-31 15:31:36,147 - DEBUG - on stmt: $20compare_op.7 = $12unary_negative.4 <= x0
2025-01-31 15:31:36,147 - DEBUG - find_def var='x0' stmt=$20compare_op.7 = $12unary_negative.4 <= x0
2025-01-31 15:31:36,147 - DEBUG - on stmt: bool22 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,147 - DEBUG - on stmt: $22pred = call bool22($20compare_op.7, func=bool22, args=(Var($20compare_op.7, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,147 - DEBUG - on stmt: $phi24.0 = x0
2025-01-31 15:31:36,147 - DEBUG - find_def var='x0' stmt=$phi24.0 = x0
2025-01-31 15:31:36,147 - DEBUG - on stmt: branch $22pred, 91, 123
2025-01-31 15:31:36,147 - DEBUG - ==== SSA block rewrite pass on 91
2025-01-31 15:31:36,147 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89f02fdf90>
2025-01-31 15:31:36,147 - DEBUG - on stmt: $26compare_op.2 = x0 <= threshold
2025-01-31 15:31:36,147 - DEBUG - find_def var='x0' stmt=$26compare_op.2 = x0 <= threshold
2025-01-31 15:31:36,147 - DEBUG - find_def_from_top label 91
2025-01-31 15:31:36,148 - DEBUG - idom 90 from label 91
2025-01-31 15:31:36,148 - DEBUG - find_def_from_bottom label 90
2025-01-31 15:31:36,148 - DEBUG - on stmt: bool28 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,148 - DEBUG - on stmt: $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,148 - DEBUG - on stmt: branch $28pred, 115, 127
2025-01-31 15:31:36,148 - DEBUG - ==== SSA block rewrite pass on 115
2025-01-31 15:31:36,148 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89f02fdf90>
2025-01-31 15:31:36,148 - DEBUG - on stmt: jump 121
2025-01-31 15:31:36,148 - DEBUG - ==== SSA block rewrite pass on 123
2025-01-31 15:31:36,148 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89f02fdf90>
2025-01-31 15:31:36,148 - DEBUG - on stmt: jump 127
2025-01-31 15:31:36,148 - DEBUG - ==== SSA block rewrite pass on 121
2025-01-31 15:31:36,148 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89f02fdf90>
2025-01-31 15:31:36,148 - DEBUG - on stmt: x0.1 = const(int, 0)
2025-01-31 15:31:36,148 - DEBUG - on stmt: jump 127
2025-01-31 15:31:36,148 - DEBUG - ==== SSA block rewrite pass on 127
2025-01-31 15:31:36,148 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89f02fdf90>
2025-01-31 15:31:36,148 - DEBUG - on stmt: $const42.1 = const(int, -1)
2025-01-31 15:31:36,148 - DEBUG - on stmt: stencil_index.1 = $const42.1 + index00
2025-01-31 15:31:36,148 - DEBUG - on stmt: x1 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2025-01-31 15:31:36,148 - DEBUG - on stmt: $50unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2025-01-31 15:31:36,148 - DEBUG - on stmt: $58compare_op.7 = $50unary_negative.4 <= x1
2025-01-31 15:31:36,148 - DEBUG - on stmt: bool60 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,148 - DEBUG - on stmt: $60pred = call bool60($58compare_op.7, func=bool60, args=(Var($58compare_op.7, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,148 - DEBUG - on stmt: $phi62.0 = x1
2025-01-31 15:31:36,148 - DEBUG - on stmt: branch $60pred, 131, 161
2025-01-31 15:31:36,148 - DEBUG - ==== SSA block rewrite pass on 131
2025-01-31 15:31:36,148 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89f02fdf90>
2025-01-31 15:31:36,148 - DEBUG - on stmt: $64compare_op.2 = x1 <= threshold
2025-01-31 15:31:36,149 - DEBUG - on stmt: bool66 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,149 - DEBUG - on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,149 - DEBUG - on stmt: branch $66pred, 153, 165
2025-01-31 15:31:36,149 - DEBUG - ==== SSA block rewrite pass on 153
2025-01-31 15:31:36,149 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89f02fdf90>
2025-01-31 15:31:36,149 - DEBUG - on stmt: jump 159
2025-01-31 15:31:36,149 - DEBUG - ==== SSA block rewrite pass on 161
2025-01-31 15:31:36,149 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89f02fdf90>
2025-01-31 15:31:36,149 - DEBUG - on stmt: jump 165
2025-01-31 15:31:36,149 - DEBUG - ==== SSA block rewrite pass on 159
2025-01-31 15:31:36,149 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89f02fdf90>
2025-01-31 15:31:36,149 - DEBUG - on stmt: x1 = const(int, 0)
2025-01-31 15:31:36,149 - DEBUG - on stmt: jump 165
2025-01-31 15:31:36,149 - DEBUG - ==== SSA block rewrite pass on 165
2025-01-31 15:31:36,149 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89f02fdf90>
2025-01-31 15:31:36,149 - DEBUG - on stmt: bool80 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,149 - DEBUG - on stmt: $80pred = call bool80(zero_pos, func=bool80, args=(Var(zero_pos, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,149 - DEBUG - on stmt: branch $80pred, 169, 173
2025-01-31 15:31:36,149 - DEBUG - ==== SSA block rewrite pass on 169
2025-01-31 15:31:36,149 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89f02fdf90>
2025-01-31 15:31:36,149 - DEBUG - on stmt: $82load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,149 - DEBUG - on stmt: $84load_method.1 = getattr(value=$82load_global.0, attr=signbit)
2025-01-31 15:31:36,149 - DEBUG - on stmt: $88call_method.3 = call $84load_method.1(x0, func=$84load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,149 - DEBUG - find_def var='x0' stmt=$88call_method.3 = call $84load_method.1(x0, func=$84load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,149 - DEBUG - find_def_from_top label 169
2025-01-31 15:31:36,149 - DEBUG - idom 165 from label 169
2025-01-31 15:31:36,149 - DEBUG - find_def_from_bottom label 165
2025-01-31 15:31:36,149 - DEBUG - find_def_from_top label 165
2025-01-31 15:31:36,149 - DEBUG - idom 127 from label 165
2025-01-31 15:31:36,150 - DEBUG - find_def_from_bottom label 127
2025-01-31 15:31:36,150 - DEBUG - find_def_from_top label 127
2025-01-31 15:31:36,150 - DEBUG - insert phi node x0.2 = phi(incoming_values=[], incoming_blocks=[]) at 127
2025-01-31 15:31:36,150 - DEBUG - find_def_from_bottom label 123
2025-01-31 15:31:36,150 - DEBUG - find_def_from_top label 123
2025-01-31 15:31:36,150 - DEBUG - idom 90 from label 123
2025-01-31 15:31:36,150 - DEBUG - find_def_from_bottom label 90
2025-01-31 15:31:36,150 - DEBUG - incoming_def x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-01-31 15:31:36,150 - DEBUG - find_def_from_bottom label 121
2025-01-31 15:31:36,150 - DEBUG - incoming_def x0.1 = const(int, 0)
2025-01-31 15:31:36,150 - DEBUG - find_def_from_bottom label 91
2025-01-31 15:31:36,150 - DEBUG - find_def_from_top label 91
2025-01-31 15:31:36,150 - DEBUG - idom 90 from label 91
2025-01-31 15:31:36,150 - DEBUG - find_def_from_bottom label 90
2025-01-31 15:31:36,150 - DEBUG - incoming_def x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-01-31 15:31:36,150 - DEBUG - replaced with: $88call_method.3 = call $84load_method.1(x0.2, func=$84load_method.1, args=[Var(x0.2, audio.py:1153)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,150 - DEBUG - on stmt: $90load_global.4 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,150 - DEBUG - on stmt: $92load_method.5 = getattr(value=$90load_global.4, attr=signbit)
2025-01-31 15:31:36,150 - DEBUG - on stmt: $96call_method.7 = call $92load_method.5(x1, func=$92load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,150 - DEBUG - on stmt: $98compare_op.8 = $88call_method.3 != $96call_method.7
2025-01-31 15:31:36,150 - DEBUG - on stmt: $100return_value.9 = cast(value=$98compare_op.8)
2025-01-31 15:31:36,150 - DEBUG - on stmt: out0[index00] = $100return_value.9
2025-01-31 15:31:36,150 - DEBUG - on stmt: jump 193
2025-01-31 15:31:36,150 - DEBUG - ==== SSA block rewrite pass on 173
2025-01-31 15:31:36,150 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89f02fdf90>
2025-01-31 15:31:36,150 - DEBUG - on stmt: $102load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,150 - DEBUG - on stmt: $104load_method.1 = getattr(value=$102load_global.0, attr=sign)
2025-01-31 15:31:36,151 - DEBUG - on stmt: $108call_method.3 = call $104load_method.1(x0, func=$104load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,151 - DEBUG - find_def var='x0' stmt=$108call_method.3 = call $104load_method.1(x0, func=$104load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,151 - DEBUG - find_def_from_top label 173
2025-01-31 15:31:36,151 - DEBUG - idom 165 from label 173
2025-01-31 15:31:36,151 - DEBUG - find_def_from_bottom label 165
2025-01-31 15:31:36,151 - DEBUG - find_def_from_top label 165
2025-01-31 15:31:36,151 - DEBUG - idom 127 from label 165
2025-01-31 15:31:36,151 - DEBUG - find_def_from_bottom label 127
2025-01-31 15:31:36,151 - DEBUG - replaced with: $108call_method.3 = call $104load_method.1(x0.2, func=$104load_method.1, args=[Var(x0.2, audio.py:1153)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,151 - DEBUG - on stmt: $110load_global.4 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,151 - DEBUG - on stmt: $112load_method.5 = getattr(value=$110load_global.4, attr=sign)
2025-01-31 15:31:36,151 - DEBUG - on stmt: $116call_method.7 = call $112load_method.5(x1, func=$112load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,151 - DEBUG - on stmt: $118compare_op.8 = $108call_method.3 != $116call_method.7
2025-01-31 15:31:36,151 - DEBUG - on stmt: $120return_value.9 = cast(value=$118compare_op.8)
2025-01-31 15:31:36,151 - DEBUG - on stmt: out0[index00] = $120return_value.9
2025-01-31 15:31:36,151 - DEBUG - on stmt: jump 193
2025-01-31 15:31:36,151 - DEBUG - ==== SSA block rewrite pass on 193
2025-01-31 15:31:36,151 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89f02fdf90>
2025-01-31 15:31:36,151 - DEBUG - on stmt: jump 80
2025-01-31 15:31:36,151 - DEBUG - Fix SSA violator on var x1
2025-01-31 15:31:36,151 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-31 15:31:36,151 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89f02fd480>
2025-01-31 15:31:36,151 - DEBUG - on stmt: x = arg(0, name=x)
2025-01-31 15:31:36,151 - DEBUG - on stmt: threshold = arg(1, name=threshold)
2025-01-31 15:31:36,151 - DEBUG - on stmt: zero_pos = arg(2, name=zero_pos)
2025-01-31 15:31:36,151 - DEBUG - on stmt: full_shape0 = getattr(value=x, attr=shape)
2025-01-31 15:31:36,151 - DEBUG - on stmt: $8load_global.2.1 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,152 - DEBUG - on stmt: $10load_attr.3.1 = getattr(value=$8load_global.2.1, attr=empty)
2025-01-31 15:31:36,152 - DEBUG - on stmt: $14load_global.5.1 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,152 - DEBUG - on stmt: $16load_attr.6.1 = getattr(value=$14load_global.5.1, attr=bool_)
2025-01-31 15:31:36,152 - DEBUG - on stmt: out0 = call $10load_attr.3.1(full_shape0, func=$10load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,152 - DEBUG - on stmt: $const24.9.1 = const(int, 0)
2025-01-31 15:31:36,152 - DEBUG - on stmt: $const28.11.1 = const(NoneType, None)
2025-01-31 15:31:36,152 - DEBUG - on stmt: $const30.12.1 = const(int, 1)
2025-01-31 15:31:36,152 - DEBUG - on stmt: $32build_slice.13.1 = global(slice: <class 'slice'>)
2025-01-31 15:31:36,152 - DEBUG - on stmt: $32build_slice.14.1 = call $32build_slice.13.1($const28.11.1, $const30.12.1, func=$32build_slice.13.1, args=(Var($const28.11.1, <string>:4), Var($const30.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,152 - DEBUG - on stmt: out0[$32build_slice.14.1] = $const24.9.1
2025-01-31 15:31:36,152 - DEBUG - on stmt: $const36.15.1 = const(int, 0)
2025-01-31 15:31:36,152 - DEBUG - on stmt: $const40.17.1 = const(int, 0)
2025-01-31 15:31:36,152 - DEBUG - on stmt: $const42.18.1 = const(NoneType, None)
2025-01-31 15:31:36,152 - DEBUG - on stmt: $44build_slice.19.1 = global(slice: <class 'slice'>)
2025-01-31 15:31:36,152 - DEBUG - on stmt: $44build_slice.20.1 = call $44build_slice.19.1($const40.17.1, $const42.18.1, func=$44build_slice.19.1, args=(Var($const40.17.1, <string>:5), Var($const42.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,152 - DEBUG - on stmt: out0[$44build_slice.20.1] = $const36.15.1
2025-01-31 15:31:36,152 - DEBUG - on stmt: $48load_global.21.1 = global(range: <class 'range'>)
2025-01-31 15:31:36,152 - DEBUG - on stmt: $50load_global.22.1 = global(min: <built-in function min>)
2025-01-31 15:31:36,152 - DEBUG - on stmt: $const52.23.1 = const(int, 0)
2025-01-31 15:31:36,152 - DEBUG - on stmt: $const54.24.1 = const(int, -1)
2025-01-31 15:31:36,152 - DEBUG - on stmt: $56call_function.25.1 = call $50load_global.22.1($const52.23.1, $const54.24.1, func=$50load_global.22.1, args=[Var($const52.23.1, <string>:6), Var($const54.24.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,152 - DEBUG - on stmt: $58unary_negative.26.1 = unary(fn=<built-in function neg>, value=$56call_function.25.1)
2025-01-31 15:31:36,152 - DEBUG - on stmt: $const62.28.1 = const(int, 0)
2025-01-31 15:31:36,152 - DEBUG - on stmt: $64binary_subscr.29.1 = getitem(value=full_shape0, index=$const62.28.1, fn=<built-in function getitem>)
2025-01-31 15:31:36,152 - DEBUG - on stmt: $66load_global.30.1 = global(max: <built-in function max>)
2025-01-31 15:31:36,152 - DEBUG - on stmt: $const68.31.1 = const(int, 0)
2025-01-31 15:31:36,152 - DEBUG - on stmt: $const70.32.1 = const(int, 0)
2025-01-31 15:31:36,152 - DEBUG - on stmt: $72call_function.33.1 = call $66load_global.30.1($const68.31.1, $const70.32.1, func=$66load_global.30.1, args=[Var($const68.31.1, <string>:6), Var($const70.32.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,153 - DEBUG - on stmt: $74binary_subtract.34.1 = $64binary_subscr.29.1 - $72call_function.33.1
2025-01-31 15:31:36,153 - DEBUG - on stmt: $76call_function.35.1 = call $48load_global.21.1($58unary_negative.26.1, $74binary_subtract.34.1, func=$48load_global.21.1, args=[Var($58unary_negative.26.1, <string>:6), Var($74binary_subtract.34.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,153 - DEBUG - on stmt: $78get_iter.36.1 = getiter(value=$76call_function.35.1)
2025-01-31 15:31:36,153 - DEBUG - on stmt: $phi80.0.1 = $78get_iter.36.1
2025-01-31 15:31:36,153 - DEBUG - on stmt: jump 80
2025-01-31 15:31:36,153 - DEBUG - ==== SSA block rewrite pass on 80
2025-01-31 15:31:36,153 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89f02fd480>
2025-01-31 15:31:36,153 - DEBUG - on stmt: $80for_iter.1.1 = iternext(value=$phi80.0.1)
2025-01-31 15:31:36,153 - DEBUG - on stmt: $80for_iter.2.1 = pair_first(value=$80for_iter.1.1)
2025-01-31 15:31:36,153 - DEBUG - on stmt: $80for_iter.3.1 = pair_second(value=$80for_iter.1.1)
2025-01-31 15:31:36,153 - DEBUG - on stmt: $phi82.1.1 = $80for_iter.2.1
2025-01-31 15:31:36,153 - DEBUG - on stmt: branch $80for_iter.3.1, 82, 194
2025-01-31 15:31:36,153 - DEBUG - ==== SSA block rewrite pass on 82
2025-01-31 15:31:36,153 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89f02fd480>
2025-01-31 15:31:36,153 - DEBUG - on stmt: index00 = $phi82.1.1
2025-01-31 15:31:36,153 - DEBUG - on stmt: jump 90
2025-01-31 15:31:36,153 - DEBUG - ==== SSA block rewrite pass on 194
2025-01-31 15:31:36,153 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89f02fd480>
2025-01-31 15:31:36,153 - DEBUG - on stmt: $92return_value.1.1 = cast(value=out0)
2025-01-31 15:31:36,153 - DEBUG - on stmt: return $92return_value.1.1
2025-01-31 15:31:36,153 - DEBUG - ==== SSA block rewrite pass on 90
2025-01-31 15:31:36,153 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89f02fd480>
2025-01-31 15:31:36,189 - DEBUG - on stmt: $const4.1 = const(int, 0)
2025-01-31 15:31:36,190 - DEBUG - on stmt: stencil_index = $const4.1 + index00
2025-01-31 15:31:36,190 - DEBUG - on stmt: x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-01-31 15:31:36,190 - DEBUG - on stmt: $12unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2025-01-31 15:31:36,190 - DEBUG - on stmt: $20compare_op.7 = $12unary_negative.4 <= x0
2025-01-31 15:31:36,190 - DEBUG - on stmt: bool22 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,190 - DEBUG - on stmt: $22pred = call bool22($20compare_op.7, func=bool22, args=(Var($20compare_op.7, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,190 - DEBUG - on stmt: $phi24.0 = x0
2025-01-31 15:31:36,190 - DEBUG - on stmt: branch $22pred, 91, 123
2025-01-31 15:31:36,190 - DEBUG - ==== SSA block rewrite pass on 91
2025-01-31 15:31:36,190 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89f02fd480>
2025-01-31 15:31:36,190 - DEBUG - on stmt: $26compare_op.2 = x0 <= threshold
2025-01-31 15:31:36,190 - DEBUG - on stmt: bool28 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,190 - DEBUG - on stmt: $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,190 - DEBUG - on stmt: branch $28pred, 115, 127
2025-01-31 15:31:36,190 - DEBUG - ==== SSA block rewrite pass on 115
2025-01-31 15:31:36,190 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89f02fd480>
2025-01-31 15:31:36,190 - DEBUG - on stmt: jump 121
2025-01-31 15:31:36,190 - DEBUG - ==== SSA block rewrite pass on 123
2025-01-31 15:31:36,190 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89f02fd480>
2025-01-31 15:31:36,190 - DEBUG - on stmt: jump 127
2025-01-31 15:31:36,190 - DEBUG - ==== SSA block rewrite pass on 121
2025-01-31 15:31:36,190 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89f02fd480>
2025-01-31 15:31:36,190 - DEBUG - on stmt: x0.1 = const(int, 0)
2025-01-31 15:31:36,190 - DEBUG - on stmt: jump 127
2025-01-31 15:31:36,190 - DEBUG - ==== SSA block rewrite pass on 127
2025-01-31 15:31:36,190 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89f02fd480>
2025-01-31 15:31:36,190 - DEBUG - on stmt: x0.2 = phi(incoming_values=[Var(x0, audio.py:1144), Var(x0.1, audio.py:1146), Var(x0, audio.py:1144)], incoming_blocks=[123, 121, 91])
2025-01-31 15:31:36,190 - DEBUG - on stmt: $const42.1 = const(int, -1)
2025-01-31 15:31:36,191 - DEBUG - on stmt: stencil_index.1 = $const42.1 + index00
2025-01-31 15:31:36,191 - DEBUG - on stmt: x1 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2025-01-31 15:31:36,191 - DEBUG - first assign: x1
2025-01-31 15:31:36,191 - DEBUG - replaced with: x1 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2025-01-31 15:31:36,191 - DEBUG - on stmt: $50unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2025-01-31 15:31:36,191 - DEBUG - on stmt: $58compare_op.7 = $50unary_negative.4 <= x1
2025-01-31 15:31:36,191 - DEBUG - on stmt: bool60 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,191 - DEBUG - on stmt: $60pred = call bool60($58compare_op.7, func=bool60, args=(Var($58compare_op.7, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,191 - DEBUG - on stmt: $phi62.0 = x1
2025-01-31 15:31:36,191 - DEBUG - on stmt: branch $60pred, 131, 161
2025-01-31 15:31:36,191 - DEBUG - ==== SSA block rewrite pass on 131
2025-01-31 15:31:36,191 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89f02fd480>
2025-01-31 15:31:36,191 - DEBUG - on stmt: $64compare_op.2 = x1 <= threshold
2025-01-31 15:31:36,191 - DEBUG - on stmt: bool66 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,191 - DEBUG - on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,191 - DEBUG - on stmt: branch $66pred, 153, 165
2025-01-31 15:31:36,191 - DEBUG - ==== SSA block rewrite pass on 153
2025-01-31 15:31:36,191 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89f02fd480>
2025-01-31 15:31:36,191 - DEBUG - on stmt: jump 159
2025-01-31 15:31:36,191 - DEBUG - ==== SSA block rewrite pass on 161
2025-01-31 15:31:36,191 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89f02fd480>
2025-01-31 15:31:36,191 - DEBUG - on stmt: jump 165
2025-01-31 15:31:36,191 - DEBUG - ==== SSA block rewrite pass on 159
2025-01-31 15:31:36,191 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89f02fd480>
2025-01-31 15:31:36,191 - DEBUG - on stmt: x1 = const(int, 0)
2025-01-31 15:31:36,191 - DEBUG - replaced with: x1.1 = const(int, 0)
2025-01-31 15:31:36,191 - DEBUG - on stmt: jump 165
2025-01-31 15:31:36,191 - DEBUG - ==== SSA block rewrite pass on 165
2025-01-31 15:31:36,191 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89f02fd480>
2025-01-31 15:31:36,192 - DEBUG - on stmt: bool80 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,192 - DEBUG - on stmt: $80pred = call bool80(zero_pos, func=bool80, args=(Var(zero_pos, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,192 - DEBUG - on stmt: branch $80pred, 169, 173
2025-01-31 15:31:36,192 - DEBUG - ==== SSA block rewrite pass on 169
2025-01-31 15:31:36,192 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89f02fd480>
2025-01-31 15:31:36,192 - DEBUG - on stmt: $82load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,192 - DEBUG - on stmt: $84load_method.1 = getattr(value=$82load_global.0, attr=signbit)
2025-01-31 15:31:36,192 - DEBUG - on stmt: $88call_method.3 = call $84load_method.1(x0.2, func=$84load_method.1, args=[Var(x0.2, audio.py:1153)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,192 - DEBUG - on stmt: $90load_global.4 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,192 - DEBUG - on stmt: $92load_method.5 = getattr(value=$90load_global.4, attr=signbit)
2025-01-31 15:31:36,192 - DEBUG - on stmt: $96call_method.7 = call $92load_method.5(x1, func=$92load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,192 - DEBUG - on stmt: $98compare_op.8 = $88call_method.3 != $96call_method.7
2025-01-31 15:31:36,192 - DEBUG - on stmt: $100return_value.9 = cast(value=$98compare_op.8)
2025-01-31 15:31:36,192 - DEBUG - on stmt: out0[index00] = $100return_value.9
2025-01-31 15:31:36,192 - DEBUG - on stmt: jump 193
2025-01-31 15:31:36,192 - DEBUG - ==== SSA block rewrite pass on 173
2025-01-31 15:31:36,192 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89f02fd480>
2025-01-31 15:31:36,192 - DEBUG - on stmt: $102load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,192 - DEBUG - on stmt: $104load_method.1 = getattr(value=$102load_global.0, attr=sign)
2025-01-31 15:31:36,192 - DEBUG - on stmt: $108call_method.3 = call $104load_method.1(x0.2, func=$104load_method.1, args=[Var(x0.2, audio.py:1153)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,192 - DEBUG - on stmt: $110load_global.4 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,192 - DEBUG - on stmt: $112load_method.5 = getattr(value=$110load_global.4, attr=sign)
2025-01-31 15:31:36,192 - DEBUG - on stmt: $116call_method.7 = call $112load_method.5(x1, func=$112load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,192 - DEBUG - on stmt: $118compare_op.8 = $108call_method.3 != $116call_method.7
2025-01-31 15:31:36,192 - DEBUG - on stmt: $120return_value.9 = cast(value=$118compare_op.8)
2025-01-31 15:31:36,192 - DEBUG - on stmt: out0[index00] = $120return_value.9
2025-01-31 15:31:36,193 - DEBUG - on stmt: jump 193
2025-01-31 15:31:36,193 - DEBUG - ==== SSA block rewrite pass on 193
2025-01-31 15:31:36,193 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89f02fd480>
2025-01-31 15:31:36,193 - DEBUG - on stmt: jump 80
2025-01-31 15:31:36,193 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {127: [<numba.core.ir.Assign object at 0x7c89f02fdf30>],
             159: [<numba.core.ir.Assign object at 0x7c89f02ffa60>]})
2025-01-31 15:31:36,193 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-31 15:31:36,193 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89f02fe470>
2025-01-31 15:31:36,193 - DEBUG - on stmt: x = arg(0, name=x)
2025-01-31 15:31:36,193 - DEBUG - on stmt: threshold = arg(1, name=threshold)
2025-01-31 15:31:36,193 - DEBUG - on stmt: zero_pos = arg(2, name=zero_pos)
2025-01-31 15:31:36,193 - DEBUG - on stmt: full_shape0 = getattr(value=x, attr=shape)
2025-01-31 15:31:36,193 - DEBUG - on stmt: $8load_global.2.1 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,193 - DEBUG - on stmt: $10load_attr.3.1 = getattr(value=$8load_global.2.1, attr=empty)
2025-01-31 15:31:36,193 - DEBUG - on stmt: $14load_global.5.1 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,193 - DEBUG - on stmt: $16load_attr.6.1 = getattr(value=$14load_global.5.1, attr=bool_)
2025-01-31 15:31:36,193 - DEBUG - on stmt: out0 = call $10load_attr.3.1(full_shape0, func=$10load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,193 - DEBUG - on stmt: $const24.9.1 = const(int, 0)
2025-01-31 15:31:36,193 - DEBUG - on stmt: $const28.11.1 = const(NoneType, None)
2025-01-31 15:31:36,193 - DEBUG - on stmt: $const30.12.1 = const(int, 1)
2025-01-31 15:31:36,193 - DEBUG - on stmt: $32build_slice.13.1 = global(slice: <class 'slice'>)
2025-01-31 15:31:36,193 - DEBUG - on stmt: $32build_slice.14.1 = call $32build_slice.13.1($const28.11.1, $const30.12.1, func=$32build_slice.13.1, args=(Var($const28.11.1, <string>:4), Var($const30.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,193 - DEBUG - on stmt: out0[$32build_slice.14.1] = $const24.9.1
2025-01-31 15:31:36,193 - DEBUG - on stmt: $const36.15.1 = const(int, 0)
2025-01-31 15:31:36,193 - DEBUG - on stmt: $const40.17.1 = const(int, 0)
2025-01-31 15:31:36,193 - DEBUG - on stmt: $const42.18.1 = const(NoneType, None)
2025-01-31 15:31:36,193 - DEBUG - on stmt: $44build_slice.19.1 = global(slice: <class 'slice'>)
2025-01-31 15:31:36,194 - DEBUG - on stmt: $44build_slice.20.1 = call $44build_slice.19.1($const40.17.1, $const42.18.1, func=$44build_slice.19.1, args=(Var($const40.17.1, <string>:5), Var($const42.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,194 - DEBUG - on stmt: out0[$44build_slice.20.1] = $const36.15.1
2025-01-31 15:31:36,194 - DEBUG - on stmt: $48load_global.21.1 = global(range: <class 'range'>)
2025-01-31 15:31:36,194 - DEBUG - on stmt: $50load_global.22.1 = global(min: <built-in function min>)
2025-01-31 15:31:36,194 - DEBUG - on stmt: $const52.23.1 = const(int, 0)
2025-01-31 15:31:36,194 - DEBUG - on stmt: $const54.24.1 = const(int, -1)
2025-01-31 15:31:36,194 - DEBUG - on stmt: $56call_function.25.1 = call $50load_global.22.1($const52.23.1, $const54.24.1, func=$50load_global.22.1, args=[Var($const52.23.1, <string>:6), Var($const54.24.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,194 - DEBUG - on stmt: $58unary_negative.26.1 = unary(fn=<built-in function neg>, value=$56call_function.25.1)
2025-01-31 15:31:36,194 - DEBUG - on stmt: $const62.28.1 = const(int, 0)
2025-01-31 15:31:36,194 - DEBUG - on stmt: $64binary_subscr.29.1 = getitem(value=full_shape0, index=$const62.28.1, fn=<built-in function getitem>)
2025-01-31 15:31:36,194 - DEBUG - on stmt: $66load_global.30.1 = global(max: <built-in function max>)
2025-01-31 15:31:36,194 - DEBUG - on stmt: $const68.31.1 = const(int, 0)
2025-01-31 15:31:36,194 - DEBUG - on stmt: $const70.32.1 = const(int, 0)
2025-01-31 15:31:36,194 - DEBUG - on stmt: $72call_function.33.1 = call $66load_global.30.1($const68.31.1, $const70.32.1, func=$66load_global.30.1, args=[Var($const68.31.1, <string>:6), Var($const70.32.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,194 - DEBUG - on stmt: $74binary_subtract.34.1 = $64binary_subscr.29.1 - $72call_function.33.1
2025-01-31 15:31:36,194 - DEBUG - on stmt: $76call_function.35.1 = call $48load_global.21.1($58unary_negative.26.1, $74binary_subtract.34.1, func=$48load_global.21.1, args=[Var($58unary_negative.26.1, <string>:6), Var($74binary_subtract.34.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,194 - DEBUG - on stmt: $78get_iter.36.1 = getiter(value=$76call_function.35.1)
2025-01-31 15:31:36,194 - DEBUG - on stmt: $phi80.0.1 = $78get_iter.36.1
2025-01-31 15:31:36,194 - DEBUG - on stmt: jump 80
2025-01-31 15:31:36,194 - DEBUG - ==== SSA block rewrite pass on 80
2025-01-31 15:31:36,194 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89f02fe470>
2025-01-31 15:31:36,194 - DEBUG - on stmt: $80for_iter.1.1 = iternext(value=$phi80.0.1)
2025-01-31 15:31:36,194 - DEBUG - on stmt: $80for_iter.2.1 = pair_first(value=$80for_iter.1.1)
2025-01-31 15:31:36,194 - DEBUG - on stmt: $80for_iter.3.1 = pair_second(value=$80for_iter.1.1)
2025-01-31 15:31:36,194 - DEBUG - on stmt: $phi82.1.1 = $80for_iter.2.1
2025-01-31 15:31:36,194 - DEBUG - on stmt: branch $80for_iter.3.1, 82, 194
2025-01-31 15:31:36,194 - DEBUG - ==== SSA block rewrite pass on 82
2025-01-31 15:31:36,195 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89f02fe470>
2025-01-31 15:31:36,195 - DEBUG - on stmt: index00 = $phi82.1.1
2025-01-31 15:31:36,195 - DEBUG - on stmt: jump 90
2025-01-31 15:31:36,195 - DEBUG - ==== SSA block rewrite pass on 194
2025-01-31 15:31:36,195 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89f02fe470>
2025-01-31 15:31:36,195 - DEBUG - on stmt: $92return_value.1.1 = cast(value=out0)
2025-01-31 15:31:36,195 - DEBUG - on stmt: return $92return_value.1.1
2025-01-31 15:31:36,195 - DEBUG - ==== SSA block rewrite pass on 90
2025-01-31 15:31:36,195 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89f02fe470>
2025-01-31 15:31:36,195 - DEBUG - on stmt: $const4.1 = const(int, 0)
2025-01-31 15:31:36,195 - DEBUG - on stmt: stencil_index = $const4.1 + index00
2025-01-31 15:31:36,195 - DEBUG - on stmt: x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-01-31 15:31:36,195 - DEBUG - on stmt: $12unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2025-01-31 15:31:36,195 - DEBUG - on stmt: $20compare_op.7 = $12unary_negative.4 <= x0
2025-01-31 15:31:36,195 - DEBUG - on stmt: bool22 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,195 - DEBUG - on stmt: $22pred = call bool22($20compare_op.7, func=bool22, args=(Var($20compare_op.7, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,195 - DEBUG - on stmt: $phi24.0 = x0
2025-01-31 15:31:36,195 - DEBUG - on stmt: branch $22pred, 91, 123
2025-01-31 15:31:36,195 - DEBUG - ==== SSA block rewrite pass on 91
2025-01-31 15:31:36,195 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89f02fe470>
2025-01-31 15:31:36,195 - DEBUG - on stmt: $26compare_op.2 = x0 <= threshold
2025-01-31 15:31:36,195 - DEBUG - on stmt: bool28 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,195 - DEBUG - on stmt: $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,195 - DEBUG - on stmt: branch $28pred, 115, 127
2025-01-31 15:31:36,195 - DEBUG - ==== SSA block rewrite pass on 115
2025-01-31 15:31:36,195 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89f02fe470>
2025-01-31 15:31:36,195 - DEBUG - on stmt: jump 121
2025-01-31 15:31:36,195 - DEBUG - ==== SSA block rewrite pass on 123
2025-01-31 15:31:36,195 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89f02fe470>
2025-01-31 15:31:36,196 - DEBUG - on stmt: jump 127
2025-01-31 15:31:36,196 - DEBUG - ==== SSA block rewrite pass on 121
2025-01-31 15:31:36,196 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89f02fe470>
2025-01-31 15:31:36,196 - DEBUG - on stmt: x0.1 = const(int, 0)
2025-01-31 15:31:36,196 - DEBUG - on stmt: jump 127
2025-01-31 15:31:36,196 - DEBUG - ==== SSA block rewrite pass on 127
2025-01-31 15:31:36,196 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89f02fe470>
2025-01-31 15:31:36,196 - DEBUG - on stmt: x0.2 = phi(incoming_values=[Var(x0, audio.py:1144), Var(x0.1, audio.py:1146), Var(x0, audio.py:1144)], incoming_blocks=[123, 121, 91])
2025-01-31 15:31:36,196 - DEBUG - on stmt: $const42.1 = const(int, -1)
2025-01-31 15:31:36,196 - DEBUG - on stmt: stencil_index.1 = $const42.1 + index00
2025-01-31 15:31:36,196 - DEBUG - on stmt: x1 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2025-01-31 15:31:36,196 - DEBUG - on stmt: $50unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2025-01-31 15:31:36,196 - DEBUG - on stmt: $58compare_op.7 = $50unary_negative.4 <= x1
2025-01-31 15:31:36,196 - DEBUG - find_def var='x1' stmt=$58compare_op.7 = $50unary_negative.4 <= x1
2025-01-31 15:31:36,196 - DEBUG - on stmt: bool60 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,196 - DEBUG - on stmt: $60pred = call bool60($58compare_op.7, func=bool60, args=(Var($58compare_op.7, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,196 - DEBUG - on stmt: $phi62.0 = x1
2025-01-31 15:31:36,196 - DEBUG - find_def var='x1' stmt=$phi62.0 = x1
2025-01-31 15:31:36,196 - DEBUG - on stmt: branch $60pred, 131, 161
2025-01-31 15:31:36,196 - DEBUG - ==== SSA block rewrite pass on 131
2025-01-31 15:31:36,196 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89f02fe470>
2025-01-31 15:31:36,196 - DEBUG - on stmt: $64compare_op.2 = x1 <= threshold
2025-01-31 15:31:36,196 - DEBUG - find_def var='x1' stmt=$64compare_op.2 = x1 <= threshold
2025-01-31 15:31:36,196 - DEBUG - find_def_from_top label 131
2025-01-31 15:31:36,196 - DEBUG - idom 127 from label 131
2025-01-31 15:31:36,196 - DEBUG - find_def_from_bottom label 127
2025-01-31 15:31:36,197 - DEBUG - on stmt: bool66 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,197 - DEBUG - on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,197 - DEBUG - on stmt: branch $66pred, 153, 165
2025-01-31 15:31:36,197 - DEBUG - ==== SSA block rewrite pass on 153
2025-01-31 15:31:36,197 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89f02fe470>
2025-01-31 15:31:36,197 - DEBUG - on stmt: jump 159
2025-01-31 15:31:36,197 - DEBUG - ==== SSA block rewrite pass on 161
2025-01-31 15:31:36,197 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89f02fe470>
2025-01-31 15:31:36,197 - DEBUG - on stmt: jump 165
2025-01-31 15:31:36,197 - DEBUG - ==== SSA block rewrite pass on 159
2025-01-31 15:31:36,197 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89f02fe470>
2025-01-31 15:31:36,197 - DEBUG - on stmt: x1.1 = const(int, 0)
2025-01-31 15:31:36,197 - DEBUG - on stmt: jump 165
2025-01-31 15:31:36,197 - DEBUG - ==== SSA block rewrite pass on 165
2025-01-31 15:31:36,197 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89f02fe470>
2025-01-31 15:31:36,197 - DEBUG - on stmt: bool80 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,197 - DEBUG - on stmt: $80pred = call bool80(zero_pos, func=bool80, args=(Var(zero_pos, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,197 - DEBUG - on stmt: branch $80pred, 169, 173
2025-01-31 15:31:36,197 - DEBUG - ==== SSA block rewrite pass on 169
2025-01-31 15:31:36,197 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89f02fe470>
2025-01-31 15:31:36,197 - DEBUG - on stmt: $82load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,197 - DEBUG - on stmt: $84load_method.1 = getattr(value=$82load_global.0, attr=signbit)
2025-01-31 15:31:36,197 - DEBUG - on stmt: $88call_method.3 = call $84load_method.1(x0.2, func=$84load_method.1, args=[Var(x0.2, audio.py:1153)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,197 - DEBUG - on stmt: $90load_global.4 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,197 - DEBUG - on stmt: $92load_method.5 = getattr(value=$90load_global.4, attr=signbit)
2025-01-31 15:31:36,197 - DEBUG - on stmt: $96call_method.7 = call $92load_method.5(x1, func=$92load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,197 - DEBUG - find_def var='x1' stmt=$96call_method.7 = call $92load_method.5(x1, func=$92load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,198 - DEBUG - find_def_from_top label 169
2025-01-31 15:31:36,198 - DEBUG - idom 165 from label 169
2025-01-31 15:31:36,198 - DEBUG - find_def_from_bottom label 165
2025-01-31 15:31:36,198 - DEBUG - find_def_from_top label 165
2025-01-31 15:31:36,198 - DEBUG - insert phi node x1.2 = phi(incoming_values=[], incoming_blocks=[]) at 165
2025-01-31 15:31:36,198 - DEBUG - find_def_from_bottom label 161
2025-01-31 15:31:36,198 - DEBUG - find_def_from_top label 161
2025-01-31 15:31:36,198 - DEBUG - idom 127 from label 161
2025-01-31 15:31:36,198 - DEBUG - find_def_from_bottom label 127
2025-01-31 15:31:36,198 - DEBUG - incoming_def x1 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2025-01-31 15:31:36,198 - DEBUG - find_def_from_bottom label 131
2025-01-31 15:31:36,198 - DEBUG - find_def_from_top label 131
2025-01-31 15:31:36,198 - DEBUG - idom 127 from label 131
2025-01-31 15:31:36,198 - DEBUG - find_def_from_bottom label 127
2025-01-31 15:31:36,198 - DEBUG - incoming_def x1 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2025-01-31 15:31:36,198 - DEBUG - find_def_from_bottom label 159
2025-01-31 15:31:36,198 - DEBUG - incoming_def x1.1 = const(int, 0)
2025-01-31 15:31:36,198 - DEBUG - replaced with: $96call_method.7 = call $92load_method.5(x1.2, func=$92load_method.5, args=[Var(x1.2, audio.py:1153)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,198 - DEBUG - on stmt: $98compare_op.8 = $88call_method.3 != $96call_method.7
2025-01-31 15:31:36,198 - DEBUG - on stmt: $100return_value.9 = cast(value=$98compare_op.8)
2025-01-31 15:31:36,198 - DEBUG - on stmt: out0[index00] = $100return_value.9
2025-01-31 15:31:36,198 - DEBUG - on stmt: jump 193
2025-01-31 15:31:36,198 - DEBUG - ==== SSA block rewrite pass on 173
2025-01-31 15:31:36,198 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89f02fe470>
2025-01-31 15:31:36,198 - DEBUG - on stmt: $102load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,198 - DEBUG - on stmt: $104load_method.1 = getattr(value=$102load_global.0, attr=sign)
2025-01-31 15:31:36,198 - DEBUG - on stmt: $108call_method.3 = call $104load_method.1(x0.2, func=$104load_method.1, args=[Var(x0.2, audio.py:1153)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,198 - DEBUG - on stmt: $110load_global.4 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,199 - DEBUG - on stmt: $112load_method.5 = getattr(value=$110load_global.4, attr=sign)
2025-01-31 15:31:36,199 - DEBUG - on stmt: $116call_method.7 = call $112load_method.5(x1, func=$112load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,199 - DEBUG - find_def var='x1' stmt=$116call_method.7 = call $112load_method.5(x1, func=$112load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,199 - DEBUG - find_def_from_top label 173
2025-01-31 15:31:36,199 - DEBUG - idom 165 from label 173
2025-01-31 15:31:36,199 - DEBUG - find_def_from_bottom label 165
2025-01-31 15:31:36,199 - DEBUG - replaced with: $116call_method.7 = call $112load_method.5(x1.2, func=$112load_method.5, args=[Var(x1.2, audio.py:1153)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,199 - DEBUG - on stmt: $118compare_op.8 = $108call_method.3 != $116call_method.7
2025-01-31 15:31:36,199 - DEBUG - on stmt: $120return_value.9 = cast(value=$118compare_op.8)
2025-01-31 15:31:36,199 - DEBUG - on stmt: out0[index00] = $120return_value.9
2025-01-31 15:31:36,199 - DEBUG - on stmt: jump 193
2025-01-31 15:31:36,199 - DEBUG - ==== SSA block rewrite pass on 193
2025-01-31 15:31:36,199 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89f02fe470>
2025-01-31 15:31:36,199 - DEBUG - on stmt: jump 80
2025-01-31 15:31:36,204 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=4388)
           2	LOAD_GLOBAL(arg=0, lineno=4389)
           4	LOAD_FAST(arg=0, lineno=4389)
           6	LOAD_FAST(arg=1, lineno=4389)
           8	LOAD_DEREF(arg=0, lineno=4389)
          10	CALL_FUNCTION(arg=3, lineno=4389)
          12	RETURN_VALUE(arg=None, lineno=4389)
2025-01-31 15:31:36,204 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:31:36,204 - DEBUG - stack: []
2025-01-31 15:31:36,204 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:31:36,204 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=4388)
2025-01-31 15:31:36,204 - DEBUG - stack []
2025-01-31 15:31:36,204 - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=4389)
2025-01-31 15:31:36,204 - DEBUG - stack []
2025-01-31 15:31:36,204 - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=4389)
2025-01-31 15:31:36,204 - DEBUG - stack ['$2load_global.0']
2025-01-31 15:31:36,204 - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=4389)
2025-01-31 15:31:36,204 - DEBUG - stack ['$2load_global.0', '$shape4.1']
2025-01-31 15:31:36,204 - DEBUG - dispatch pc=8, inst=LOAD_DEREF(arg=0, lineno=4389)
2025-01-31 15:31:36,204 - DEBUG - stack ['$2load_global.0', '$shape4.1', '$dtype6.2']
2025-01-31 15:31:36,204 - DEBUG - dispatch pc=10, inst=CALL_FUNCTION(arg=3, lineno=4389)
2025-01-31 15:31:36,204 - DEBUG - stack ['$2load_global.0', '$shape4.1', '$dtype6.2', '$8load_deref.3']
2025-01-31 15:31:36,205 - DEBUG - dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=4389)
2025-01-31 15:31:36,205 - DEBUG - stack ['$10call_function.4']
2025-01-31 15:31:36,205 - DEBUG - end state. edges=[]
2025-01-31 15:31:36,205 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:31:36,205 - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-01-31 15:31:36,205 - DEBUG - defmap: {}
2025-01-31 15:31:36,205 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:36,205 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:36,205 - DEBUG - keep phismap: {}
2025-01-31 15:31:36,205 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-01-31 15:31:36,205 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:31:36,205 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$shape4.1'}), (6, {'res': '$dtype6.2'}), (8, {'res': '$8load_deref.3'}), (10, {'func': '$2load_global.0', 'args': ['$shape4.1', '$dtype6.2', '$8load_deref.3'], 'res': '$10call_function.4'}), (12, {'retval': '$10call_function.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:36,205 - DEBUG - label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>) ['$2load_global.0']
    $8load_deref.3 = freevar(retty: array(bool, 1d, C)) ['$8load_deref.3']
    $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4388), Var(dtype, arrayobj.py:4388), Var($8load_deref.3, arrayobj.py:4389)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8load_deref.3', 'dtype', 'shape']
    $12return_value.5 = cast(value=$10call_function.4) ['$10call_function.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2025-01-31 15:31:36,209 - DEBUG - ==== SSA block analysis pass on 0
2025-01-31 15:31:36,209 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89f0131cf0>
2025-01-31 15:31:36,209 - DEBUG - on stmt: shape = arg(0, name=shape)
2025-01-31 15:31:36,209 - DEBUG - on stmt: dtype = arg(1, name=dtype)
2025-01-31 15:31:36,209 - DEBUG - on stmt: $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>)
2025-01-31 15:31:36,209 - DEBUG - on stmt: $8load_deref.3 = freevar(retty: array(bool, 1d, C))
2025-01-31 15:31:36,209 - DEBUG - on stmt: $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4388), Var(dtype, arrayobj.py:4388), Var($8load_deref.3, arrayobj.py:4389)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,209 - DEBUG - on stmt: $12return_value.5 = cast(value=$10call_function.4)
2025-01-31 15:31:36,209 - DEBUG - on stmt: return $12return_value.5
2025-01-31 15:31:36,209 - DEBUG - defs defaultdict(<class 'list'>,
            {'$10call_function.4': [(<numba.core.ir.Assign object at 0x7c89f0132590>,
                                     0)],
             '$12return_value.5': [(<numba.core.ir.Assign object at 0x7c89f0132470>,
                                    0)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x7c89f0132950>,
                                  0)],
             '$8load_deref.3': [(<numba.core.ir.Assign object at 0x7c89f0132770>,
                                 0)],
             'dtype': [(<numba.core.ir.Assign object at 0x7c89f01317e0>, 0)],
             'shape': [(<numba.core.ir.Assign object at 0x7c89f0131e10>, 0)]})
2025-01-31 15:31:36,209 - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x7c89f0131cf0>
2025-01-31 15:31:36,217 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=4264)
           2	LOAD_FAST(arg=0, lineno=4267)
           4	LOAD_METHOD(arg=0, lineno=4267)
           6	LOAD_FAST(arg=1, lineno=4267)
           8	LOAD_FAST(arg=2, lineno=4267)
          10	CALL_METHOD(arg=2, lineno=4267)
          12	RETURN_VALUE(arg=None, lineno=4267)
2025-01-31 15:31:36,217 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:31:36,217 - DEBUG - stack: []
2025-01-31 15:31:36,217 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:31:36,217 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=4264)
2025-01-31 15:31:36,217 - DEBUG - stack []
2025-01-31 15:31:36,217 - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=4267)
2025-01-31 15:31:36,217 - DEBUG - stack []
2025-01-31 15:31:36,217 - DEBUG - dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=4267)
2025-01-31 15:31:36,217 - DEBUG - stack ['$arrtype2.0']
2025-01-31 15:31:36,217 - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=4267)
2025-01-31 15:31:36,217 - DEBUG - stack ['$4load_method.1']
2025-01-31 15:31:36,217 - DEBUG - dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=4267)
2025-01-31 15:31:36,217 - DEBUG - stack ['$4load_method.1', '$size6.2']
2025-01-31 15:31:36,218 - DEBUG - dispatch pc=10, inst=CALL_METHOD(arg=2, lineno=4267)
2025-01-31 15:31:36,218 - DEBUG - stack ['$4load_method.1', '$size6.2', '$align8.3']
2025-01-31 15:31:36,218 - DEBUG - dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=4267)
2025-01-31 15:31:36,218 - DEBUG - stack ['$10call_method.4']
2025-01-31 15:31:36,218 - DEBUG - end state. edges=[]
2025-01-31 15:31:36,218 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:31:36,218 - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-01-31 15:31:36,218 - DEBUG - defmap: {}
2025-01-31 15:31:36,218 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:36,218 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:36,218 - DEBUG - keep phismap: {}
2025-01-31 15:31:36,218 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-01-31 15:31:36,218 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:31:36,219 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arrtype2.0'}), (4, {'item': '$arrtype2.0', 'res': '$4load_method.1'}), (6, {'res': '$size6.2'}), (8, {'res': '$align8.3'}), (10, {'func': '$4load_method.1', 'args': ['$size6.2', '$align8.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:36,219 - DEBUG - label 0:
    arrtype = arg(0, name=arrtype)           ['arrtype']
    size = arg(1, name=size)                 ['size']
    align = arg(2, name=align)               ['align']
    $4load_method.1 = getattr(value=arrtype, attr=_allocate) ['$4load_method.1', 'arrtype']
    $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:4264), Var(align, arrayobj.py:4264)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_method.4', '$4load_method.1', 'align', 'size']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2025-01-31 15:31:36,225 - DEBUG - ==== SSA block analysis pass on 0
2025-01-31 15:31:36,225 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89f0175390>
2025-01-31 15:31:36,225 - DEBUG - on stmt: arrtype = arg(0, name=arrtype)
2025-01-31 15:31:36,225 - DEBUG - on stmt: size = arg(1, name=size)
2025-01-31 15:31:36,225 - DEBUG - on stmt: align = arg(2, name=align)
2025-01-31 15:31:36,225 - DEBUG - on stmt: $4load_method.1 = getattr(value=arrtype, attr=_allocate)
2025-01-31 15:31:36,225 - DEBUG - on stmt: $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:4264), Var(align, arrayobj.py:4264)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,225 - DEBUG - on stmt: $12return_value.5 = cast(value=$10call_method.4)
2025-01-31 15:31:36,226 - DEBUG - on stmt: return $12return_value.5
2025-01-31 15:31:36,226 - DEBUG - defs defaultdict(<class 'list'>,
            {'$10call_method.4': [(<numba.core.ir.Assign object at 0x7c89f0175150>,
                                   0)],
             '$12return_value.5': [(<numba.core.ir.Assign object at 0x7c89f0175240>,
                                    0)],
             '$4load_method.1': [(<numba.core.ir.Assign object at 0x7c89f0174d00>,
                                  0)],
             'align': [(<numba.core.ir.Assign object at 0x7c89f0174a60>, 0)],
             'arrtype': [(<numba.core.ir.Assign object at 0x7c89f0174130>, 0)],
             'size': [(<numba.core.ir.Assign object at 0x7c89f0174040>, 0)]})
2025-01-31 15:31:36,226 - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x7c89f0175390>
2025-01-31 15:31:36,228 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=4259)
           2	LOAD_GLOBAL(arg=0, lineno=4260)
           4	LOAD_FAST(arg=1, lineno=4260)
           6	LOAD_FAST(arg=2, lineno=4260)
           8	CALL_FUNCTION(arg=2, lineno=4260)
          10	RETURN_VALUE(arg=None, lineno=4260)
2025-01-31 15:31:36,228 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:31:36,228 - DEBUG - stack: []
2025-01-31 15:31:36,228 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:31:36,228 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=4259)
2025-01-31 15:31:36,228 - DEBUG - stack []
2025-01-31 15:31:36,228 - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=4260)
2025-01-31 15:31:36,228 - DEBUG - stack []
2025-01-31 15:31:36,228 - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=4260)
2025-01-31 15:31:36,228 - DEBUG - stack ['$2load_global.0']
2025-01-31 15:31:36,228 - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=4260)
2025-01-31 15:31:36,229 - DEBUG - stack ['$2load_global.0', '$allocsize4.1']
2025-01-31 15:31:36,229 - DEBUG - dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=4260)
2025-01-31 15:31:36,229 - DEBUG - stack ['$2load_global.0', '$allocsize4.1', '$align6.2']
2025-01-31 15:31:36,229 - DEBUG - dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=4260)
2025-01-31 15:31:36,229 - DEBUG - stack ['$8call_function.3']
2025-01-31 15:31:36,229 - DEBUG - end state. edges=[]
2025-01-31 15:31:36,229 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:31:36,229 - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-01-31 15:31:36,229 - DEBUG - defmap: {}
2025-01-31 15:31:36,229 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:36,229 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:36,229 - DEBUG - keep phismap: {}
2025-01-31 15:31:36,229 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-01-31 15:31:36,230 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:31:36,230 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$allocsize4.1'}), (6, {'res': '$align6.2'}), (8, {'func': '$2load_global.0', 'args': ['$allocsize4.1', '$align6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:36,230 - DEBUG - label 0:
    cls = arg(0, name=cls)                   ['cls']
    allocsize = arg(1, name=allocsize)       ['allocsize']
    align = arg(2, name=align)               ['align']
    $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:4259), Var(align, arrayobj.py:4259)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$8call_function.3', 'align', 'allocsize']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

2025-01-31 15:31:36,233 - DEBUG - ==== SSA block analysis pass on 0
2025-01-31 15:31:36,233 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89f0176b90>
2025-01-31 15:31:36,233 - DEBUG - on stmt: cls = arg(0, name=cls)
2025-01-31 15:31:36,233 - DEBUG - on stmt: allocsize = arg(1, name=allocsize)
2025-01-31 15:31:36,233 - DEBUG - on stmt: align = arg(2, name=align)
2025-01-31 15:31:36,234 - DEBUG - on stmt: $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>)
2025-01-31 15:31:36,234 - DEBUG - on stmt: $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:4259), Var(align, arrayobj.py:4259)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,234 - DEBUG - on stmt: $10return_value.4 = cast(value=$8call_function.3)
2025-01-31 15:31:36,234 - DEBUG - on stmt: return $10return_value.4
2025-01-31 15:31:36,234 - DEBUG - defs defaultdict(<class 'list'>,
            {'$10return_value.4': [(<numba.core.ir.Assign object at 0x7c89f0177ca0>,
                                    0)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x7c89f0177760>,
                                  0)],
             '$8call_function.3': [(<numba.core.ir.Assign object at 0x7c89f0177b80>,
                                    0)],
             'align': [(<numba.core.ir.Assign object at 0x7c89f01775e0>, 0)],
             'allocsize': [(<numba.core.ir.Assign object at 0x7c89f01764d0>,
                            0)],
             'cls': [(<numba.core.ir.Assign object at 0x7c89f0176b00>, 0)]})
2025-01-31 15:31:36,234 - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x7c89f0176b90>
2025-01-31 15:31:36,291 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=200)
           2	LOAD_FAST(arg=0, lineno=201)
           4	LOAD_DEREF(arg=0, lineno=201)
           6	BINARY_SUBSCR(arg=None, lineno=201)
           8	RETURN_VALUE(arg=None, lineno=201)
2025-01-31 15:31:36,291 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:31:36,291 - DEBUG - stack: []
2025-01-31 15:31:36,291 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:31:36,291 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=200)
2025-01-31 15:31:36,291 - DEBUG - stack []
2025-01-31 15:31:36,291 - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=201)
2025-01-31 15:31:36,291 - DEBUG - stack []
2025-01-31 15:31:36,291 - DEBUG - dispatch pc=4, inst=LOAD_DEREF(arg=0, lineno=201)
2025-01-31 15:31:36,291 - DEBUG - stack ['$tup2.0']
2025-01-31 15:31:36,291 - DEBUG - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=201)
2025-01-31 15:31:36,291 - DEBUG - stack ['$tup2.0', '$4load_deref.1']
2025-01-31 15:31:36,291 - DEBUG - dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=201)
2025-01-31 15:31:36,291 - DEBUG - stack ['$6binary_subscr.2']
2025-01-31 15:31:36,292 - DEBUG - end state. edges=[]
2025-01-31 15:31:36,292 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:31:36,292 - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-01-31 15:31:36,292 - DEBUG - defmap: {}
2025-01-31 15:31:36,292 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:36,292 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:36,292 - DEBUG - keep phismap: {}
2025-01-31 15:31:36,292 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-01-31 15:31:36,292 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:31:36,292 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$tup2.0'}), (4, {'res': '$4load_deref.1'}), (6, {'index': '$4load_deref.1', 'target': '$tup2.0', 'res': '$6binary_subscr.2'}), (8, {'retval': '$6binary_subscr.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:36,292 - DEBUG - label 0:
    tup = arg(0, name=tup)                   ['tup']
    idx = arg(1, name=idx)                   ['idx']
    $4load_deref.1 = freevar(idx_val: 0)     ['$4load_deref.1']
    $6binary_subscr.2 = getitem(value=tup, index=$4load_deref.1, fn=<built-in function getitem>) ['$4load_deref.1', '$6binary_subscr.2', 'tup']
    $8return_value.3 = cast(value=$6binary_subscr.2) ['$6binary_subscr.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2025-01-31 15:31:36,295 - DEBUG - ==== SSA block analysis pass on 0
2025-01-31 15:31:36,295 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89f00bdf90>
2025-01-31 15:31:36,295 - DEBUG - on stmt: tup = arg(0, name=tup)
2025-01-31 15:31:36,295 - DEBUG - on stmt: idx = arg(1, name=idx)
2025-01-31 15:31:36,296 - DEBUG - on stmt: $4load_deref.1 = freevar(idx_val: 0)
2025-01-31 15:31:36,296 - DEBUG - on stmt: $6binary_subscr.2 = static_getitem(value=tup, index=0, index_var=$4load_deref.1, fn=<built-in function getitem>)
2025-01-31 15:31:36,296 - DEBUG - on stmt: $8return_value.3 = cast(value=$6binary_subscr.2)
2025-01-31 15:31:36,296 - DEBUG - on stmt: return $8return_value.3
2025-01-31 15:31:36,296 - DEBUG - defs defaultdict(<class 'list'>,
            {'$4load_deref.1': [(<numba.core.ir.Assign object at 0x7c89f00bd210>,
                                 0)],
             '$6binary_subscr.2': [(<numba.core.ir.Assign object at 0x7c89f00bdd80>,
                                    0)],
             '$8return_value.3': [(<numba.core.ir.Assign object at 0x7c89f00bd510>,
                                   0)],
             'idx': [(<numba.core.ir.Assign object at 0x7c89f00bc4f0>, 0)],
             'tup': [(<numba.core.ir.Assign object at 0x7c89f00bc490>, 0)]})
2025-01-31 15:31:36,296 - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x7c89f00bdf90>
2025-01-31 15:31:36,523 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=1158)
           2	LOAD_GLOBAL(arg=0, lineno=1174)
           4	LOAD_FAST(arg=0, lineno=1174)
           6	LOAD_FAST(arg=1, lineno=1174)
           8	LOAD_FAST(arg=2, lineno=1174)
          10	CALL_FUNCTION(arg=3, lineno=1174)
          12	LOAD_FAST(arg=3, lineno=1174)
          14	LOAD_CONST(arg=1, lineno=1174)
          16	LOAD_CONST(arg=1, lineno=1174)
          18	BUILD_SLICE(arg=2, lineno=1174)
          20	STORE_SUBSCR(arg=None, lineno=1174)
          22	LOAD_CONST(arg=1, lineno=1174)
          24	RETURN_VALUE(arg=None, lineno=1174)
2025-01-31 15:31:36,523 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:31:36,523 - DEBUG - stack: []
2025-01-31 15:31:36,523 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:31:36,523 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=1158)
2025-01-31 15:31:36,523 - DEBUG - stack []
2025-01-31 15:31:36,523 - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=1174)
2025-01-31 15:31:36,523 - DEBUG - stack []
2025-01-31 15:31:36,523 - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=1174)
2025-01-31 15:31:36,523 - DEBUG - stack ['$2load_global.0']
2025-01-31 15:31:36,523 - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=1174)
2025-01-31 15:31:36,523 - DEBUG - stack ['$2load_global.0', '$x4.1']
2025-01-31 15:31:36,523 - DEBUG - dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=1174)
2025-01-31 15:31:36,523 - DEBUG - stack ['$2load_global.0', '$x4.1', '$threshold6.2']
2025-01-31 15:31:36,523 - DEBUG - dispatch pc=10, inst=CALL_FUNCTION(arg=3, lineno=1174)
2025-01-31 15:31:36,523 - DEBUG - stack ['$2load_global.0', '$x4.1', '$threshold6.2', '$zero_pos8.3']
2025-01-31 15:31:36,523 - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=3, lineno=1174)
2025-01-31 15:31:36,523 - DEBUG - stack ['$10call_function.4']
2025-01-31 15:31:36,523 - DEBUG - dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=1174)
2025-01-31 15:31:36,523 - DEBUG - stack ['$10call_function.4', '$y12.5']
2025-01-31 15:31:36,523 - DEBUG - dispatch pc=16, inst=LOAD_CONST(arg=1, lineno=1174)
2025-01-31 15:31:36,523 - DEBUG - stack ['$10call_function.4', '$y12.5', '$const14.6']
2025-01-31 15:31:36,524 - DEBUG - dispatch pc=18, inst=BUILD_SLICE(arg=2, lineno=1174)
2025-01-31 15:31:36,524 - DEBUG - stack ['$10call_function.4', '$y12.5', '$const14.6', '$const16.7']
2025-01-31 15:31:36,524 - DEBUG - dispatch pc=20, inst=STORE_SUBSCR(arg=None, lineno=1174)
2025-01-31 15:31:36,524 - DEBUG - stack ['$10call_function.4', '$y12.5', '$18build_slice.9']
2025-01-31 15:31:36,524 - DEBUG - dispatch pc=22, inst=LOAD_CONST(arg=1, lineno=1174)
2025-01-31 15:31:36,524 - DEBUG - stack []
2025-01-31 15:31:36,524 - DEBUG - dispatch pc=24, inst=RETURN_VALUE(arg=None, lineno=1174)
2025-01-31 15:31:36,524 - DEBUG - stack ['$const22.10']
2025-01-31 15:31:36,524 - DEBUG - end state. edges=[]
2025-01-31 15:31:36,524 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:31:36,524 - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-01-31 15:31:36,524 - DEBUG - defmap: {}
2025-01-31 15:31:36,524 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:36,524 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:36,524 - DEBUG - keep phismap: {}
2025-01-31 15:31:36,524 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-01-31 15:31:36,524 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:31:36,524 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$x4.1'}), (6, {'res': '$threshold6.2'}), (8, {'res': '$zero_pos8.3'}), (10, {'func': '$2load_global.0', 'args': ['$x4.1', '$threshold6.2', '$zero_pos8.3'], 'res': '$10call_function.4'}), (12, {'res': '$y12.5'}), (14, {'res': '$const14.6'}), (16, {'res': '$const16.7'}), (18, {'start': '$const14.6', 'stop': '$const16.7', 'step': None, 'res': '$18build_slice.9', 'slicevar': '$18build_slice.8'}), (20, {'target': '$y12.5', 'index': '$18build_slice.9', 'value': '$10call_function.4'}), (22, {'res': '$const22.10'}), (24, {'retval': '$const22.10', 'castval': '$24return_value.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:36,525 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    threshold = arg(1, name=threshold)       ['threshold']
    zero_pos = arg(2, name=zero_pos)         ['zero_pos']
    y = arg(3, name=y)                       ['y']
    $2load_global.0 = global(_zc_stencil: <numba.stencils.stencil.StencilFunc object at 0x7c89f0ee5810>) ['$2load_global.0']
    $10call_function.4 = call $2load_global.0(x, threshold, zero_pos, func=$2load_global.0, args=[Var(x, audio.py:1158), Var(threshold, audio.py:1158), Var(zero_pos, audio.py:1158)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', 'threshold', 'x', 'zero_pos']
    $const14.6 = const(NoneType, None)       ['$const14.6']
    $const16.7 = const(NoneType, None)       ['$const16.7']
    $18build_slice.8 = global(slice: <class 'slice'>) ['$18build_slice.8']
    $18build_slice.9 = call $18build_slice.8($const14.6, $const16.7, func=$18build_slice.8, args=(Var($const14.6, audio.py:1174), Var($const16.7, audio.py:1174)), kws=(), vararg=None, varkwarg=None, target=None) ['$18build_slice.8', '$18build_slice.9', '$const14.6', '$const16.7']
    y[$18build_slice.9] = $10call_function.4 ['$10call_function.4', '$18build_slice.9', 'y']
    $const22.10 = const(NoneType, None)      ['$const22.10']
    $24return_value.11 = cast(value=$const22.10) ['$24return_value.11', '$const22.10']
    return $24return_value.11                ['$24return_value.11']

2025-01-31 15:31:36,528 - DEBUG - ==== SSA block analysis pass on 0
2025-01-31 15:31:36,528 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89ebce7a90>
2025-01-31 15:31:36,528 - DEBUG - on stmt: x = arg(0, name=x)
2025-01-31 15:31:36,529 - DEBUG - on stmt: threshold = arg(1, name=threshold)
2025-01-31 15:31:36,529 - DEBUG - on stmt: zero_pos = arg(2, name=zero_pos)
2025-01-31 15:31:36,529 - DEBUG - on stmt: y = arg(3, name=y)
2025-01-31 15:31:36,529 - DEBUG - on stmt: $2load_global.0 = global(_zc_stencil: <numba.stencils.stencil.StencilFunc object at 0x7c89f0ee5810>)
2025-01-31 15:31:36,529 - DEBUG - on stmt: $10call_function.4 = call $2load_global.0(x, threshold, zero_pos, func=$2load_global.0, args=[Var(x, audio.py:1158), Var(threshold, audio.py:1158), Var(zero_pos, audio.py:1158)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,529 - DEBUG - on stmt: $const14.6 = const(NoneType, None)
2025-01-31 15:31:36,529 - DEBUG - on stmt: $const16.7 = const(NoneType, None)
2025-01-31 15:31:36,529 - DEBUG - on stmt: $18build_slice.8 = global(slice: <class 'slice'>)
2025-01-31 15:31:36,529 - DEBUG - on stmt: $18build_slice.9 = call $18build_slice.8($const14.6, $const16.7, func=$18build_slice.8, args=(Var($const14.6, audio.py:1174), Var($const16.7, audio.py:1174)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,529 - DEBUG - on stmt: y[slice(None, None, None)] = $10call_function.4
2025-01-31 15:31:36,529 - DEBUG - on stmt: $const22.10 = const(NoneType, None)
2025-01-31 15:31:36,529 - DEBUG - on stmt: $24return_value.11 = cast(value=$const22.10)
2025-01-31 15:31:36,529 - DEBUG - on stmt: return $24return_value.11
2025-01-31 15:31:36,529 - DEBUG - defs defaultdict(<class 'list'>,
            {'$10call_function.4': [(<numba.core.ir.Assign object at 0x7c89ebd1cf10>,
                                     0)],
             '$18build_slice.8': [(<numba.core.ir.Assign object at 0x7c89ebd1d450>,
                                   0)],
             '$18build_slice.9': [(<numba.core.ir.Assign object at 0x7c89ebd1d570>,
                                   0)],
             '$24return_value.11': [(<numba.core.ir.Assign object at 0x7c89ebd1d930>,
                                     0)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x7c89ebd1c9d0>,
                                  0)],
             '$const14.6': [(<numba.core.ir.Assign object at 0x7c89ebd1d150>,
                             0)],
             '$const16.7': [(<numba.core.ir.Assign object at 0x7c89ebd1d2d0>,
                             0)],
             '$const22.10': [(<numba.core.ir.Assign object at 0x7c89ebd1d7b0>,
                              0)],
             'threshold': [(<numba.core.ir.Assign object at 0x7c89ebd1c070>,
                            0)],
             'x': [(<numba.core.ir.Assign object at 0x7c89ebd1c190>, 0)],
             'y': [(<numba.core.ir.Assign object at 0x7c89ebd1c850>, 0)],
             'zero_pos': [(<numba.core.ir.Assign object at 0x7c89ebd1c730>,
                           0)]})
2025-01-31 15:31:36,529 - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x7c89ebce7a90>
2025-01-31 15:31:36,558 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_FAST(arg=0, lineno=2)
           4	LOAD_ATTR(arg=0, lineno=2)
           6	STORE_FAST(arg=3, lineno=2)
           8	LOAD_GLOBAL(arg=1, lineno=3)
          10	LOAD_ATTR(arg=2, lineno=3)
          12	LOAD_FAST(arg=3, lineno=3)
          14	LOAD_GLOBAL(arg=1, lineno=3)
          16	LOAD_ATTR(arg=3, lineno=3)
          18	LOAD_CONST(arg=1, lineno=3)
          20	CALL_FUNCTION_KW(arg=2, lineno=3)
          22	STORE_FAST(arg=4, lineno=3)
          24	LOAD_CONST(arg=2, lineno=4)
          26	LOAD_FAST(arg=4, lineno=4)
          28	LOAD_CONST(arg=0, lineno=4)
          30	LOAD_CONST(arg=3, lineno=4)
          32	BUILD_SLICE(arg=2, lineno=4)
          34	STORE_SUBSCR(arg=None, lineno=4)
          36	LOAD_CONST(arg=2, lineno=5)
          38	LOAD_FAST(arg=4, lineno=5)
          40	LOAD_CONST(arg=2, lineno=5)
          42	LOAD_CONST(arg=0, lineno=5)
          44	BUILD_SLICE(arg=2, lineno=5)
          46	STORE_SUBSCR(arg=None, lineno=5)
          48	LOAD_GLOBAL(arg=4, lineno=6)
          50	LOAD_GLOBAL(arg=5, lineno=6)
          52	LOAD_CONST(arg=2, lineno=6)
          54	LOAD_CONST(arg=4, lineno=6)
          56	CALL_FUNCTION(arg=2, lineno=6)
          58	UNARY_NEGATIVE(arg=None, lineno=6)
          60	LOAD_FAST(arg=3, lineno=6)
          62	LOAD_CONST(arg=2, lineno=6)
          64	BINARY_SUBSCR(arg=None, lineno=6)
          66	LOAD_GLOBAL(arg=6, lineno=6)
          68	LOAD_CONST(arg=2, lineno=6)
          70	LOAD_CONST(arg=2, lineno=6)
          72	CALL_FUNCTION(arg=2, lineno=6)
          74	BINARY_SUBTRACT(arg=None, lineno=6)
          76	CALL_FUNCTION(arg=2, lineno=6)
          78	GET_ITER(arg=None, lineno=6)
>         80	FOR_ITER(arg=4, lineno=6)
          82	STORE_FAST(arg=5, lineno=6)
          84	LOAD_CONST(arg=2, lineno=7)
          86	STORE_FAST(arg=6, lineno=7)
          88	JUMP_ABSOLUTE(arg=41, lineno=7)
>         90	LOAD_FAST(arg=4, lineno=8)
          92	RETURN_VALUE(arg=None, lineno=8)
2025-01-31 15:31:36,558 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:31:36,558 - DEBUG - stack: []
2025-01-31 15:31:36,558 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:31:36,558 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=1)
2025-01-31 15:31:36,558 - DEBUG - stack []
2025-01-31 15:31:36,558 - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=2)
2025-01-31 15:31:36,558 - DEBUG - stack []
2025-01-31 15:31:36,558 - DEBUG - dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=2)
2025-01-31 15:31:36,558 - DEBUG - stack ['$x2.0']
2025-01-31 15:31:36,558 - DEBUG - dispatch pc=6, inst=STORE_FAST(arg=3, lineno=2)
2025-01-31 15:31:36,558 - DEBUG - stack ['$4load_attr.1']
2025-01-31 15:31:36,558 - DEBUG - dispatch pc=8, inst=LOAD_GLOBAL(arg=1, lineno=3)
2025-01-31 15:31:36,558 - DEBUG - stack []
2025-01-31 15:31:36,558 - DEBUG - dispatch pc=10, inst=LOAD_ATTR(arg=2, lineno=3)
2025-01-31 15:31:36,558 - DEBUG - stack ['$8load_global.2']
2025-01-31 15:31:36,558 - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=3, lineno=3)
2025-01-31 15:31:36,558 - DEBUG - stack ['$10load_attr.3']
2025-01-31 15:31:36,559 - DEBUG - dispatch pc=14, inst=LOAD_GLOBAL(arg=1, lineno=3)
2025-01-31 15:31:36,559 - DEBUG - stack ['$10load_attr.3', '$full_shape012.4']
2025-01-31 15:31:36,559 - DEBUG - dispatch pc=16, inst=LOAD_ATTR(arg=3, lineno=3)
2025-01-31 15:31:36,559 - DEBUG - stack ['$10load_attr.3', '$full_shape012.4', '$14load_global.5']
2025-01-31 15:31:36,559 - DEBUG - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=3)
2025-01-31 15:31:36,559 - DEBUG - stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6']
2025-01-31 15:31:36,559 - DEBUG - dispatch pc=20, inst=CALL_FUNCTION_KW(arg=2, lineno=3)
2025-01-31 15:31:36,559 - DEBUG - stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6', '$const18.7']
2025-01-31 15:31:36,559 - DEBUG - dispatch pc=22, inst=STORE_FAST(arg=4, lineno=3)
2025-01-31 15:31:36,559 - DEBUG - stack ['$20call_function_kw.8']
2025-01-31 15:31:36,559 - DEBUG - dispatch pc=24, inst=LOAD_CONST(arg=2, lineno=4)
2025-01-31 15:31:36,559 - DEBUG - stack []
2025-01-31 15:31:36,559 - DEBUG - dispatch pc=26, inst=LOAD_FAST(arg=4, lineno=4)
2025-01-31 15:31:36,559 - DEBUG - stack ['$const24.9']
2025-01-31 15:31:36,559 - DEBUG - dispatch pc=28, inst=LOAD_CONST(arg=0, lineno=4)
2025-01-31 15:31:36,559 - DEBUG - stack ['$const24.9', '$out026.10']
2025-01-31 15:31:36,559 - DEBUG - dispatch pc=30, inst=LOAD_CONST(arg=3, lineno=4)
2025-01-31 15:31:36,559 - DEBUG - stack ['$const24.9', '$out026.10', '$const28.11']
2025-01-31 15:31:36,559 - DEBUG - dispatch pc=32, inst=BUILD_SLICE(arg=2, lineno=4)
2025-01-31 15:31:36,559 - DEBUG - stack ['$const24.9', '$out026.10', '$const28.11', '$const30.12']
2025-01-31 15:31:36,559 - DEBUG - dispatch pc=34, inst=STORE_SUBSCR(arg=None, lineno=4)
2025-01-31 15:31:36,559 - DEBUG - stack ['$const24.9', '$out026.10', '$32build_slice.14']
2025-01-31 15:31:36,559 - DEBUG - dispatch pc=36, inst=LOAD_CONST(arg=2, lineno=5)
2025-01-31 15:31:36,559 - DEBUG - stack []
2025-01-31 15:31:36,559 - DEBUG - dispatch pc=38, inst=LOAD_FAST(arg=4, lineno=5)
2025-01-31 15:31:36,559 - DEBUG - stack ['$const36.15']
2025-01-31 15:31:36,559 - DEBUG - dispatch pc=40, inst=LOAD_CONST(arg=2, lineno=5)
2025-01-31 15:31:36,559 - DEBUG - stack ['$const36.15', '$out038.16']
2025-01-31 15:31:36,559 - DEBUG - dispatch pc=42, inst=LOAD_CONST(arg=0, lineno=5)
2025-01-31 15:31:36,560 - DEBUG - stack ['$const36.15', '$out038.16', '$const40.17']
2025-01-31 15:31:36,560 - DEBUG - dispatch pc=44, inst=BUILD_SLICE(arg=2, lineno=5)
2025-01-31 15:31:36,560 - DEBUG - stack ['$const36.15', '$out038.16', '$const40.17', '$const42.18']
2025-01-31 15:31:36,560 - DEBUG - dispatch pc=46, inst=STORE_SUBSCR(arg=None, lineno=5)
2025-01-31 15:31:36,560 - DEBUG - stack ['$const36.15', '$out038.16', '$44build_slice.20']
2025-01-31 15:31:36,560 - DEBUG - dispatch pc=48, inst=LOAD_GLOBAL(arg=4, lineno=6)
2025-01-31 15:31:36,560 - DEBUG - stack []
2025-01-31 15:31:36,560 - DEBUG - dispatch pc=50, inst=LOAD_GLOBAL(arg=5, lineno=6)
2025-01-31 15:31:36,560 - DEBUG - stack ['$48load_global.21']
2025-01-31 15:31:36,560 - DEBUG - dispatch pc=52, inst=LOAD_CONST(arg=2, lineno=6)
2025-01-31 15:31:36,560 - DEBUG - stack ['$48load_global.21', '$50load_global.22']
2025-01-31 15:31:36,560 - DEBUG - dispatch pc=54, inst=LOAD_CONST(arg=4, lineno=6)
2025-01-31 15:31:36,560 - DEBUG - stack ['$48load_global.21', '$50load_global.22', '$const52.23']
2025-01-31 15:31:36,560 - DEBUG - dispatch pc=56, inst=CALL_FUNCTION(arg=2, lineno=6)
2025-01-31 15:31:36,560 - DEBUG - stack ['$48load_global.21', '$50load_global.22', '$const52.23', '$const54.24']
2025-01-31 15:31:36,560 - DEBUG - dispatch pc=58, inst=UNARY_NEGATIVE(arg=None, lineno=6)
2025-01-31 15:31:36,560 - DEBUG - stack ['$48load_global.21', '$56call_function.25']
2025-01-31 15:31:36,560 - DEBUG - dispatch pc=60, inst=LOAD_FAST(arg=3, lineno=6)
2025-01-31 15:31:36,560 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26']
2025-01-31 15:31:36,560 - DEBUG - dispatch pc=62, inst=LOAD_CONST(arg=2, lineno=6)
2025-01-31 15:31:36,560 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27']
2025-01-31 15:31:36,560 - DEBUG - dispatch pc=64, inst=BINARY_SUBSCR(arg=None, lineno=6)
2025-01-31 15:31:36,560 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27', '$const62.28']
2025-01-31 15:31:36,560 - DEBUG - dispatch pc=66, inst=LOAD_GLOBAL(arg=6, lineno=6)
2025-01-31 15:31:36,560 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29']
2025-01-31 15:31:36,560 - DEBUG - dispatch pc=68, inst=LOAD_CONST(arg=2, lineno=6)
2025-01-31 15:31:36,560 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30']
2025-01-31 15:31:36,560 - DEBUG - dispatch pc=70, inst=LOAD_CONST(arg=2, lineno=6)
2025-01-31 15:31:36,561 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31']
2025-01-31 15:31:36,561 - DEBUG - dispatch pc=72, inst=CALL_FUNCTION(arg=2, lineno=6)
2025-01-31 15:31:36,561 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31', '$const70.32']
2025-01-31 15:31:36,561 - DEBUG - dispatch pc=74, inst=BINARY_SUBTRACT(arg=None, lineno=6)
2025-01-31 15:31:36,561 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$72call_function.33']
2025-01-31 15:31:36,561 - DEBUG - dispatch pc=76, inst=CALL_FUNCTION(arg=2, lineno=6)
2025-01-31 15:31:36,561 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34']
2025-01-31 15:31:36,561 - DEBUG - dispatch pc=78, inst=GET_ITER(arg=None, lineno=6)
2025-01-31 15:31:36,561 - DEBUG - stack ['$76call_function.35']
2025-01-31 15:31:36,561 - DEBUG - end state. edges=[Edge(pc=80, stack=('$78get_iter.36',), blockstack=(), npush=0)]
2025-01-31 15:31:36,561 - DEBUG - pending: deque([State(pc_initial=80 nstack_initial=1)])
2025-01-31 15:31:36,561 - DEBUG - stack: ['$phi80.0']
2025-01-31 15:31:36,561 - DEBUG - state.pc_initial: State(pc_initial=80 nstack_initial=1)
2025-01-31 15:31:36,561 - DEBUG - dispatch pc=80, inst=FOR_ITER(arg=4, lineno=6)
2025-01-31 15:31:36,561 - DEBUG - stack ['$phi80.0']
2025-01-31 15:31:36,561 - DEBUG - end state. edges=[Edge(pc=90, stack=(), blockstack=(), npush=0), Edge(pc=82, stack=('$phi80.0', '$80for_iter.2'), blockstack=(), npush=0)]
2025-01-31 15:31:36,561 - DEBUG - pending: deque([State(pc_initial=90 nstack_initial=0), State(pc_initial=82 nstack_initial=2)])
2025-01-31 15:31:36,561 - DEBUG - stack: []
2025-01-31 15:31:36,561 - DEBUG - state.pc_initial: State(pc_initial=90 nstack_initial=0)
2025-01-31 15:31:36,561 - DEBUG - dispatch pc=90, inst=LOAD_FAST(arg=4, lineno=8)
2025-01-31 15:31:36,561 - DEBUG - stack []
2025-01-31 15:31:36,561 - DEBUG - dispatch pc=92, inst=RETURN_VALUE(arg=None, lineno=8)
2025-01-31 15:31:36,561 - DEBUG - stack ['$out090.0']
2025-01-31 15:31:36,561 - DEBUG - end state. edges=[]
2025-01-31 15:31:36,561 - DEBUG - pending: deque([State(pc_initial=82 nstack_initial=2)])
2025-01-31 15:31:36,561 - DEBUG - stack: ['$phi82.0', '$phi82.1']
2025-01-31 15:31:36,561 - DEBUG - state.pc_initial: State(pc_initial=82 nstack_initial=2)
2025-01-31 15:31:36,562 - DEBUG - dispatch pc=82, inst=STORE_FAST(arg=5, lineno=6)
2025-01-31 15:31:36,562 - DEBUG - stack ['$phi82.0', '$phi82.1']
2025-01-31 15:31:36,562 - DEBUG - dispatch pc=84, inst=LOAD_CONST(arg=2, lineno=7)
2025-01-31 15:31:36,562 - DEBUG - stack ['$phi82.0']
2025-01-31 15:31:36,562 - DEBUG - dispatch pc=86, inst=STORE_FAST(arg=6, lineno=7)
2025-01-31 15:31:36,562 - DEBUG - stack ['$phi82.0', '$const84.2']
2025-01-31 15:31:36,562 - DEBUG - dispatch pc=88, inst=JUMP_ABSOLUTE(arg=41, lineno=7)
2025-01-31 15:31:36,562 - DEBUG - stack ['$phi82.0']
2025-01-31 15:31:36,562 - DEBUG - end state. edges=[Edge(pc=80, stack=('$phi82.0',), blockstack=(), npush=0)]
2025-01-31 15:31:36,562 - DEBUG - pending: deque([State(pc_initial=80 nstack_initial=1)])
2025-01-31 15:31:36,562 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:31:36,562 - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=80 nstack_initial=1): {'$phi80.0'},
             State(pc_initial=82 nstack_initial=2): {'$phi82.1'},
             State(pc_initial=90 nstack_initial=0): set()})
2025-01-31 15:31:36,562 - DEBUG - defmap: {'$phi80.0': State(pc_initial=0 nstack_initial=0),
 '$phi82.1': State(pc_initial=80 nstack_initial=1)}
2025-01-31 15:31:36,562 - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi82.0', State(pc_initial=82 nstack_initial=2))},
             '$phi82.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-01-31 15:31:36,562 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-01-31 15:31:36,563 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-01-31 15:31:36,563 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-01-31 15:31:36,563 - DEBUG - keep phismap: {'$phi80.0': {('$78get_iter.36', State(pc_initial=0 nstack_initial=0))},
 '$phi82.1': {('$80for_iter.2', State(pc_initial=80 nstack_initial=1))}}
2025-01-31 15:31:36,563 - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi80.0': '$78get_iter.36'},
             State(pc_initial=80 nstack_initial=1): {'$phi82.1': '$80for_iter.2'}})
2025-01-31 15:31:36,563 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:31:36,563 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'item': '$x2.0', 'res': '$4load_attr.1'}), (6, {'value': '$4load_attr.1'}), (8, {'res': '$8load_global.2'}), (10, {'item': '$8load_global.2', 'res': '$10load_attr.3'}), (12, {'res': '$full_shape012.4'}), (14, {'res': '$14load_global.5'}), (16, {'item': '$14load_global.5', 'res': '$16load_attr.6'}), (18, {'res': '$const18.7'}), (20, {'func': '$10load_attr.3', 'args': ['$full_shape012.4', '$16load_attr.6'], 'names': '$const18.7', 'res': '$20call_function_kw.8'}), (22, {'value': '$20call_function_kw.8'}), (24, {'res': '$const24.9'}), (26, {'res': '$out026.10'}), (28, {'res': '$const28.11'}), (30, {'res': '$const30.12'}), (32, {'start': '$const28.11', 'stop': '$const30.12', 'step': None, 'res': '$32build_slice.14', 'slicevar': '$32build_slice.13'}), (34, {'target': '$out026.10', 'index': '$32build_slice.14', 'value': '$const24.9'}), (36, {'res': '$const36.15'}), (38, {'res': '$out038.16'}), (40, {'res': '$const40.17'}), (42, {'res': '$const42.18'}), (44, {'start': '$const40.17', 'stop': '$const42.18', 'step': None, 'res': '$44build_slice.20', 'slicevar': '$44build_slice.19'}), (46, {'target': '$out038.16', 'index': '$44build_slice.20', 'value': '$const36.15'}), (48, {'res': '$48load_global.21'}), (50, {'res': '$50load_global.22'}), (52, {'res': '$const52.23'}), (54, {'res': '$const54.24'}), (56, {'func': '$50load_global.22', 'args': ['$const52.23', '$const54.24'], 'res': '$56call_function.25'}), (58, {'value': '$56call_function.25', 'res': '$58unary_negative.26'}), (60, {'res': '$full_shape060.27'}), (62, {'res': '$const62.28'}), (64, {'index': '$const62.28', 'target': '$full_shape060.27', 'res': '$64binary_subscr.29'}), (66, {'res': '$66load_global.30'}), (68, {'res': '$const68.31'}), (70, {'res': '$const70.32'}), (72, {'func': '$66load_global.30', 'args': ['$const68.31', '$const70.32'], 'res': '$72call_function.33'}), (74, {'lhs': '$64binary_subscr.29', 'rhs': '$72call_function.33', 'res': '$74binary_subtract.34'}), (76, {'func': '$48load_global.21', 'args': ['$58unary_negative.26', '$74binary_subtract.34'], 'res': '$76call_function.35'}), (78, {'value': '$76call_function.35', 'res': '$78get_iter.36'})), outgoing_phis={'$phi80.0': '$78get_iter.36'}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$78get_iter.36',)})
2025-01-31 15:31:36,563 - DEBUG - block_infos State(pc_initial=80 nstack_initial=1):
AdaptBlockInfo(insts=((80, {'iterator': '$phi80.0', 'pair': '$80for_iter.1', 'indval': '$80for_iter.2', 'pred': '$80for_iter.3'}),), outgoing_phis={'$phi82.1': '$80for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: (), 82: ('$phi80.0', '$80for_iter.2')})
2025-01-31 15:31:36,563 - DEBUG - block_infos State(pc_initial=82 nstack_initial=2):
AdaptBlockInfo(insts=((82, {'value': '$phi82.1'}), (84, {'res': '$const84.2'}), (86, {'value': '$const84.2'}), (88, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$phi82.0',)})
2025-01-31 15:31:36,563 - DEBUG - block_infos State(pc_initial=90 nstack_initial=0):
AdaptBlockInfo(insts=((90, {'res': '$out090.0'}), (92, {'retval': '$out090.0', 'castval': '$92return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:36,564 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    threshold = arg(1, name=threshold)       ['threshold']
    zero_pos = arg(2, name=zero_pos)         ['zero_pos']
    full_shape0 = getattr(value=x, attr=shape) ['full_shape0', 'x']
    $8load_global.2 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>) ['$8load_global.2']
    $10load_attr.3 = getattr(value=$8load_global.2, attr=empty) ['$10load_attr.3', '$8load_global.2']
    $14load_global.5 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>) ['$14load_global.5']
    $16load_attr.6 = getattr(value=$14load_global.5, attr=bool_) ['$14load_global.5', '$16load_attr.6']
    out0 = call $10load_attr.3(full_shape0, func=$10load_attr.3, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6, <string>:3))], vararg=None, varkwarg=None, target=None) ['$10load_attr.3', '$16load_attr.6', 'full_shape0', 'out0']
    $const24.9 = const(int, 0)               ['$const24.9']
    $const28.11 = const(NoneType, None)      ['$const28.11']
    $const30.12 = const(int, 1)              ['$const30.12']
    $32build_slice.13 = global(slice: <class 'slice'>) ['$32build_slice.13']
    $32build_slice.14 = call $32build_slice.13($const28.11, $const30.12, func=$32build_slice.13, args=(Var($const28.11, <string>:4), Var($const30.12, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None) ['$32build_slice.13', '$32build_slice.14', '$const28.11', '$const30.12']
    out0[$32build_slice.14] = $const24.9     ['$32build_slice.14', '$const24.9', 'out0']
    $const36.15 = const(int, 0)              ['$const36.15']
    $const40.17 = const(int, 0)              ['$const40.17']
    $const42.18 = const(NoneType, None)      ['$const42.18']
    $44build_slice.19 = global(slice: <class 'slice'>) ['$44build_slice.19']
    $44build_slice.20 = call $44build_slice.19($const40.17, $const42.18, func=$44build_slice.19, args=(Var($const40.17, <string>:5), Var($const42.18, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None) ['$44build_slice.19', '$44build_slice.20', '$const40.17', '$const42.18']
    out0[$44build_slice.20] = $const36.15    ['$44build_slice.20', '$const36.15', 'out0']
    $48load_global.21 = global(range: <class 'range'>) ['$48load_global.21']
    $50load_global.22 = global(min: <built-in function min>) ['$50load_global.22']
    $const52.23 = const(int, 0)              ['$const52.23']
    $const54.24 = const(int, -1)             ['$const54.24']
    $56call_function.25 = call $50load_global.22($const52.23, $const54.24, func=$50load_global.22, args=[Var($const52.23, <string>:6), Var($const54.24, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$50load_global.22', '$56call_function.25', '$const52.23', '$const54.24']
    $58unary_negative.26 = unary(fn=<built-in function neg>, value=$56call_function.25) ['$56call_function.25', '$58unary_negative.26']
    $const62.28 = const(int, 0)              ['$const62.28']
    $64binary_subscr.29 = getitem(value=full_shape0, index=$const62.28, fn=<built-in function getitem>) ['$64binary_subscr.29', '$const62.28', 'full_shape0']
    $66load_global.30 = global(max: <built-in function max>) ['$66load_global.30']
    $const68.31 = const(int, 0)              ['$const68.31']
    $const70.32 = const(int, 0)              ['$const70.32']
    $72call_function.33 = call $66load_global.30($const68.31, $const70.32, func=$66load_global.30, args=[Var($const68.31, <string>:6), Var($const70.32, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$66load_global.30', '$72call_function.33', '$const68.31', '$const70.32']
    $74binary_subtract.34 = $64binary_subscr.29 - $72call_function.33 ['$64binary_subscr.29', '$72call_function.33', '$74binary_subtract.34']
    $76call_function.35 = call $48load_global.21($58unary_negative.26, $74binary_subtract.34, func=$48load_global.21, args=[Var($58unary_negative.26, <string>:6), Var($74binary_subtract.34, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34', '$76call_function.35']
    $78get_iter.36 = getiter(value=$76call_function.35) ['$76call_function.35', '$78get_iter.36']
    $phi80.0 = $78get_iter.36                ['$78get_iter.36', '$phi80.0']
    jump 80                                  []
label 80:
    $80for_iter.1 = iternext(value=$phi80.0) ['$80for_iter.1', '$phi80.0']
    $80for_iter.2 = pair_first(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.2']
    $80for_iter.3 = pair_second(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.3']
    $phi82.1 = $80for_iter.2                 ['$80for_iter.2', '$phi82.1']
    branch $80for_iter.3, 82, 90             ['$80for_iter.3']
label 82:
    index00 = $phi82.1                       ['$phi82.1', 'index00']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 80                                  []
label 90:
    $92return_value.1 = cast(value=out0)     ['$92return_value.1', 'out0']
    return $92return_value.1                 ['$92return_value.1']

2025-01-31 15:31:36,576 - DEBUG - ==== SSA block analysis pass on 0
2025-01-31 15:31:36,576 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89ebbfabc0>
2025-01-31 15:31:36,576 - DEBUG - on stmt: x = arg(0, name=x)
2025-01-31 15:31:36,576 - DEBUG - on stmt: threshold = arg(1, name=threshold)
2025-01-31 15:31:36,577 - DEBUG - on stmt: zero_pos = arg(2, name=zero_pos)
2025-01-31 15:31:36,577 - DEBUG - on stmt: full_shape0 = getattr(value=x, attr=shape)
2025-01-31 15:31:36,577 - DEBUG - on stmt: $8load_global.2.1 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,577 - DEBUG - on stmt: $10load_attr.3.1 = getattr(value=$8load_global.2.1, attr=empty)
2025-01-31 15:31:36,577 - DEBUG - on stmt: $14load_global.5.1 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,577 - DEBUG - on stmt: $16load_attr.6.1 = getattr(value=$14load_global.5.1, attr=bool_)
2025-01-31 15:31:36,577 - DEBUG - on stmt: out0 = call $10load_attr.3.1(full_shape0, func=$10load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,577 - DEBUG - on stmt: $const24.9.1 = const(int, 0)
2025-01-31 15:31:36,577 - DEBUG - on stmt: $const28.11.1 = const(NoneType, None)
2025-01-31 15:31:36,577 - DEBUG - on stmt: $const30.12.1 = const(int, 1)
2025-01-31 15:31:36,577 - DEBUG - on stmt: $32build_slice.13.1 = global(slice: <class 'slice'>)
2025-01-31 15:31:36,577 - DEBUG - on stmt: $32build_slice.14.1 = call $32build_slice.13.1($const28.11.1, $const30.12.1, func=$32build_slice.13.1, args=(Var($const28.11.1, <string>:4), Var($const30.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,577 - DEBUG - on stmt: out0[$32build_slice.14.1] = $const24.9.1
2025-01-31 15:31:36,577 - DEBUG - on stmt: $const36.15.1 = const(int, 0)
2025-01-31 15:31:36,577 - DEBUG - on stmt: $const40.17.1 = const(int, 0)
2025-01-31 15:31:36,577 - DEBUG - on stmt: $const42.18.1 = const(NoneType, None)
2025-01-31 15:31:36,577 - DEBUG - on stmt: $44build_slice.19.1 = global(slice: <class 'slice'>)
2025-01-31 15:31:36,577 - DEBUG - on stmt: $44build_slice.20.1 = call $44build_slice.19.1($const40.17.1, $const42.18.1, func=$44build_slice.19.1, args=(Var($const40.17.1, <string>:5), Var($const42.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,577 - DEBUG - on stmt: out0[$44build_slice.20.1] = $const36.15.1
2025-01-31 15:31:36,577 - DEBUG - on stmt: $48load_global.21.1 = global(range: <class 'range'>)
2025-01-31 15:31:36,577 - DEBUG - on stmt: $50load_global.22.1 = global(min: <built-in function min>)
2025-01-31 15:31:36,577 - DEBUG - on stmt: $const52.23.1 = const(int, 0)
2025-01-31 15:31:36,577 - DEBUG - on stmt: $const54.24.1 = const(int, -1)
2025-01-31 15:31:36,577 - DEBUG - on stmt: $56call_function.25.1 = call $50load_global.22.1($const52.23.1, $const54.24.1, func=$50load_global.22.1, args=[Var($const52.23.1, <string>:6), Var($const54.24.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,578 - DEBUG - on stmt: $58unary_negative.26.1 = unary(fn=<built-in function neg>, value=$56call_function.25.1)
2025-01-31 15:31:36,578 - DEBUG - on stmt: $const62.28.1 = const(int, 0)
2025-01-31 15:31:36,578 - DEBUG - on stmt: $64binary_subscr.29.1 = getitem(value=full_shape0, index=$const62.28.1, fn=<built-in function getitem>)
2025-01-31 15:31:36,578 - DEBUG - on stmt: $66load_global.30.1 = global(max: <built-in function max>)
2025-01-31 15:31:36,578 - DEBUG - on stmt: $const68.31.1 = const(int, 0)
2025-01-31 15:31:36,578 - DEBUG - on stmt: $const70.32.1 = const(int, 0)
2025-01-31 15:31:36,578 - DEBUG - on stmt: $72call_function.33.1 = call $66load_global.30.1($const68.31.1, $const70.32.1, func=$66load_global.30.1, args=[Var($const68.31.1, <string>:6), Var($const70.32.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,578 - DEBUG - on stmt: $74binary_subtract.34.1 = $64binary_subscr.29.1 - $72call_function.33.1
2025-01-31 15:31:36,578 - DEBUG - on stmt: $76call_function.35.1 = call $48load_global.21.1($58unary_negative.26.1, $74binary_subtract.34.1, func=$48load_global.21.1, args=[Var($58unary_negative.26.1, <string>:6), Var($74binary_subtract.34.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,578 - DEBUG - on stmt: $78get_iter.36.1 = getiter(value=$76call_function.35.1)
2025-01-31 15:31:36,578 - DEBUG - on stmt: $phi80.0.1 = $78get_iter.36.1
2025-01-31 15:31:36,578 - DEBUG - on stmt: jump 80
2025-01-31 15:31:36,578 - DEBUG - ==== SSA block analysis pass on 80
2025-01-31 15:31:36,578 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89ebbfabc0>
2025-01-31 15:31:36,578 - DEBUG - on stmt: $80for_iter.1.1 = iternext(value=$phi80.0.1)
2025-01-31 15:31:36,578 - DEBUG - on stmt: $80for_iter.2.1 = pair_first(value=$80for_iter.1.1)
2025-01-31 15:31:36,578 - DEBUG - on stmt: $80for_iter.3.1 = pair_second(value=$80for_iter.1.1)
2025-01-31 15:31:36,578 - DEBUG - on stmt: $phi82.1.1 = $80for_iter.2.1
2025-01-31 15:31:36,578 - DEBUG - on stmt: branch $80for_iter.3.1, 82, 194
2025-01-31 15:31:36,578 - DEBUG - ==== SSA block analysis pass on 82
2025-01-31 15:31:36,578 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89ebbfabc0>
2025-01-31 15:31:36,578 - DEBUG - on stmt: index00 = $phi82.1.1
2025-01-31 15:31:36,578 - DEBUG - on stmt: jump 90
2025-01-31 15:31:36,578 - DEBUG - ==== SSA block analysis pass on 194
2025-01-31 15:31:36,578 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89ebbfabc0>
2025-01-31 15:31:36,578 - DEBUG - on stmt: $92return_value.1.1 = cast(value=out0)
2025-01-31 15:31:36,579 - DEBUG - on stmt: return $92return_value.1.1
2025-01-31 15:31:36,579 - DEBUG - ==== SSA block analysis pass on 90
2025-01-31 15:31:36,579 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89ebbfabc0>
2025-01-31 15:31:36,579 - DEBUG - on stmt: $const4.1 = const(int, 0)
2025-01-31 15:31:36,579 - DEBUG - on stmt: stencil_index = $const4.1 + index00
2025-01-31 15:31:36,579 - DEBUG - on stmt: x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-01-31 15:31:36,579 - DEBUG - on stmt: $12unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2025-01-31 15:31:36,579 - DEBUG - on stmt: $20compare_op.7 = $12unary_negative.4 <= x0
2025-01-31 15:31:36,579 - DEBUG - on stmt: bool22 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,579 - DEBUG - on stmt: $22pred = call bool22($20compare_op.7, func=bool22, args=(Var($20compare_op.7, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,579 - DEBUG - on stmt: $phi24.0 = x0
2025-01-31 15:31:36,579 - DEBUG - on stmt: branch $22pred, 91, 123
2025-01-31 15:31:36,579 - DEBUG - ==== SSA block analysis pass on 91
2025-01-31 15:31:36,579 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89ebbfabc0>
2025-01-31 15:31:36,579 - DEBUG - on stmt: $26compare_op.2 = x0 <= threshold
2025-01-31 15:31:36,579 - DEBUG - on stmt: bool28 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,579 - DEBUG - on stmt: $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,579 - DEBUG - on stmt: branch $28pred, 115, 127
2025-01-31 15:31:36,579 - DEBUG - ==== SSA block analysis pass on 115
2025-01-31 15:31:36,579 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89ebbfabc0>
2025-01-31 15:31:36,579 - DEBUG - on stmt: jump 121
2025-01-31 15:31:36,579 - DEBUG - ==== SSA block analysis pass on 123
2025-01-31 15:31:36,579 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89ebbfabc0>
2025-01-31 15:31:36,579 - DEBUG - on stmt: jump 127
2025-01-31 15:31:36,579 - DEBUG - ==== SSA block analysis pass on 121
2025-01-31 15:31:36,579 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89ebbfabc0>
2025-01-31 15:31:36,579 - DEBUG - on stmt: x0 = const(int, 0)
2025-01-31 15:31:36,580 - DEBUG - on stmt: jump 127
2025-01-31 15:31:36,580 - DEBUG - ==== SSA block analysis pass on 127
2025-01-31 15:31:36,580 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89ebbfabc0>
2025-01-31 15:31:36,580 - DEBUG - on stmt: $const42.1 = const(int, -1)
2025-01-31 15:31:36,580 - DEBUG - on stmt: stencil_index = $const42.1 + index00
2025-01-31 15:31:36,580 - DEBUG - on stmt: x1 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-01-31 15:31:36,580 - DEBUG - on stmt: $50unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2025-01-31 15:31:36,580 - DEBUG - on stmt: $58compare_op.7 = $50unary_negative.4 <= x1
2025-01-31 15:31:36,580 - DEBUG - on stmt: bool60 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,580 - DEBUG - on stmt: $60pred = call bool60($58compare_op.7, func=bool60, args=(Var($58compare_op.7, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,580 - DEBUG - on stmt: $phi62.0 = x1
2025-01-31 15:31:36,580 - DEBUG - on stmt: branch $60pred, 131, 161
2025-01-31 15:31:36,580 - DEBUG - ==== SSA block analysis pass on 131
2025-01-31 15:31:36,580 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89ebbfabc0>
2025-01-31 15:31:36,580 - DEBUG - on stmt: $64compare_op.2 = x1 <= threshold
2025-01-31 15:31:36,580 - DEBUG - on stmt: bool66 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,580 - DEBUG - on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,580 - DEBUG - on stmt: branch $66pred, 153, 165
2025-01-31 15:31:36,580 - DEBUG - ==== SSA block analysis pass on 153
2025-01-31 15:31:36,580 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89ebbfabc0>
2025-01-31 15:31:36,580 - DEBUG - on stmt: jump 159
2025-01-31 15:31:36,580 - DEBUG - ==== SSA block analysis pass on 161
2025-01-31 15:31:36,580 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89ebbfabc0>
2025-01-31 15:31:36,580 - DEBUG - on stmt: jump 165
2025-01-31 15:31:36,580 - DEBUG - ==== SSA block analysis pass on 159
2025-01-31 15:31:36,580 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89ebbfabc0>
2025-01-31 15:31:36,580 - DEBUG - on stmt: x1 = const(int, 0)
2025-01-31 15:31:36,581 - DEBUG - on stmt: jump 165
2025-01-31 15:31:36,581 - DEBUG - ==== SSA block analysis pass on 165
2025-01-31 15:31:36,581 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89ebbfabc0>
2025-01-31 15:31:36,581 - DEBUG - on stmt: bool80 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,581 - DEBUG - on stmt: $80pred = call bool80(zero_pos, func=bool80, args=(Var(zero_pos, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,581 - DEBUG - on stmt: branch $80pred, 169, 173
2025-01-31 15:31:36,581 - DEBUG - ==== SSA block analysis pass on 169
2025-01-31 15:31:36,581 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89ebbfabc0>
2025-01-31 15:31:36,581 - DEBUG - on stmt: $82load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,581 - DEBUG - on stmt: $84load_method.1 = getattr(value=$82load_global.0, attr=signbit)
2025-01-31 15:31:36,581 - DEBUG - on stmt: $88call_method.3 = call $84load_method.1(x0, func=$84load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,581 - DEBUG - on stmt: $90load_global.4 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,581 - DEBUG - on stmt: $92load_method.5 = getattr(value=$90load_global.4, attr=signbit)
2025-01-31 15:31:36,581 - DEBUG - on stmt: $96call_method.7 = call $92load_method.5(x1, func=$92load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,581 - DEBUG - on stmt: $98compare_op.8 = $88call_method.3 != $96call_method.7
2025-01-31 15:31:36,581 - DEBUG - on stmt: $100return_value.9 = cast(value=$98compare_op.8)
2025-01-31 15:31:36,581 - DEBUG - on stmt: out0[index00] = $100return_value.9
2025-01-31 15:31:36,581 - DEBUG - on stmt: jump 193
2025-01-31 15:31:36,581 - DEBUG - ==== SSA block analysis pass on 173
2025-01-31 15:31:36,581 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89ebbfabc0>
2025-01-31 15:31:36,581 - DEBUG - on stmt: $102load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,581 - DEBUG - on stmt: $104load_method.1 = getattr(value=$102load_global.0, attr=sign)
2025-01-31 15:31:36,582 - DEBUG - on stmt: $108call_method.3 = call $104load_method.1(x0, func=$104load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,582 - DEBUG - on stmt: $110load_global.4 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,582 - DEBUG - on stmt: $112load_method.5 = getattr(value=$110load_global.4, attr=sign)
2025-01-31 15:31:36,582 - DEBUG - on stmt: $116call_method.7 = call $112load_method.5(x1, func=$112load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,582 - DEBUG - on stmt: $118compare_op.8 = $108call_method.3 != $116call_method.7
2025-01-31 15:31:36,582 - DEBUG - on stmt: $120return_value.9 = cast(value=$118compare_op.8)
2025-01-31 15:31:36,582 - DEBUG - on stmt: out0[index00] = $120return_value.9
2025-01-31 15:31:36,582 - DEBUG - on stmt: jump 193
2025-01-31 15:31:36,582 - DEBUG - ==== SSA block analysis pass on 193
2025-01-31 15:31:36,582 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89ebbfabc0>
2025-01-31 15:31:36,582 - DEBUG - on stmt: jump 80
2025-01-31 15:31:36,583 - DEBUG - defs defaultdict(<class 'list'>,
            {'$100return_value.9': [(<numba.core.ir.Assign object at 0x7c89ebbb9510>,
                                     169)],
             '$102load_global.0': [(<numba.core.ir.Assign object at 0x7c89ebbc5780>,
                                    173)],
             '$104load_method.1': [(<numba.core.ir.Assign object at 0x7c89ebbc5ba0>,
                                    173)],
             '$108call_method.3': [(<numba.core.ir.Assign object at 0x7c89ebbc7790>,
                                    173)],
             '$10load_attr.3.1': [(<numba.core.ir.Assign object at 0x7c89ebbe6080>,
                                   0)],
             '$110load_global.4': [(<numba.core.ir.Assign object at 0x7c89ebbc7970>,
                                    173)],
             '$112load_method.5': [(<numba.core.ir.Assign object at 0x7c89ebbcae90>,
                                    173)],
             '$116call_method.7': [(<numba.core.ir.Assign object at 0x7c89ebbd4850>,
                                    173)],
             '$118compare_op.8': [(<numba.core.ir.Assign object at 0x7c89ebbd4a30>,
                                   173)],
             '$120return_value.9': [(<numba.core.ir.Assign object at 0x7c89ebbd6500>,
                                     173)],
             '$12unary_negative.4': [(<numba.core.ir.Assign object at 0x7c89ebd35900>,
                                      90)],
             '$14load_global.5.1': [(<numba.core.ir.Assign object at 0x7c89ebbe5de0>,
                                     0)],
             '$16load_attr.6.1': [(<numba.core.ir.Assign object at 0x7c89ebbe5c60>,
                                   0)],
             '$20compare_op.7': [(<numba.core.ir.Assign object at 0x7c89ebd35ae0>,
                                  90)],
             '$22pred': [(<numba.core.ir.Assign object at 0x7c89ebd46ad0>, 90)],
             '$26compare_op.2': [(<numba.core.ir.Assign object at 0x7c89ebd52f20>,
                                  91)],
             '$28pred': [(<numba.core.ir.Assign object at 0x7c89ebd58c40>, 91)],
             '$32build_slice.13.1': [(<numba.core.ir.Assign object at 0x7c89ebbe73a0>,
                                      0)],
             '$32build_slice.14.1': [(<numba.core.ir.Assign object at 0x7c89ebbe74c0>,
                                      0)],
             '$44build_slice.19.1': [(<numba.core.ir.Assign object at 0x7c89ebbe7ca0>,
                                      0)],
             '$44build_slice.20.1': [(<numba.core.ir.Assign object at 0x7c89ebbe7dc0>,
                                      0)],
             '$48load_global.21.1': [(<numba.core.ir.Assign object at 0x7c89ebbf0040>,
                                      0)],
             '$50load_global.22.1': [(<numba.core.ir.Assign object at 0x7c89ebbf01c0>,
                                      0)],
             '$50unary_negative.4': [(<numba.core.ir.Assign object at 0x7c89ebd77f70>,
                                      127)],
             '$56call_function.25.1': [(<numba.core.ir.Assign object at 0x7c89ebbf06a0>,
                                        0)],
             '$58compare_op.7': [(<numba.core.ir.Assign object at 0x7c89ebd78190>,
                                  127)],
             '$58unary_negative.26.1': [(<numba.core.ir.Assign object at 0x7c89ebbf07c0>,
                                         0)],
             '$60pred': [(<numba.core.ir.Assign object at 0x7c89ebce77c0>,
                          127)],
             '$64binary_subscr.29.1': [(<numba.core.ir.Assign object at 0x7c89ebbf0c10>,
                                        0)],
             '$64compare_op.2': [(<numba.core.ir.Assign object at 0x7c89ebd82a40>,
                                  131)],
             '$66load_global.30.1': [(<numba.core.ir.Assign object at 0x7c89ebbf0d60>,
                                      0)],
             '$66pred': [(<numba.core.ir.Assign object at 0x7c89ebd84760>,
                          131)],
             '$72call_function.33.1': [(<numba.core.ir.Assign object at 0x7c89ebbf1240>,
                                        0)],
             '$74binary_subtract.34.1': [(<numba.core.ir.Assign object at 0x7c89ebbf1390>,
                                          0)],
             '$76call_function.35.1': [(<numba.core.ir.Assign object at 0x7c89ebbf1540>,
                                        0)],
             '$78get_iter.36.1': [(<numba.core.ir.Assign object at 0x7c89ebbf1660>,
                                   0)],
             '$80for_iter.1.1': [(<numba.core.ir.Assign object at 0x7c89ebbf1750>,
                                  80)],
             '$80for_iter.2.1': [(<numba.core.ir.Assign object at 0x7c89ebbf1870>,
                                  80)],
             '$80for_iter.3.1': [(<numba.core.ir.Assign object at 0x7c89ebbf1990>,
                                  80)],
             '$80pred': [(<numba.core.ir.Assign object at 0x7c89ebb99f00>,
                          165)],
             '$82load_global.0': [(<numba.core.ir.Assign object at 0x7c89ebba4790>,
                                   169)],
             '$84load_method.1': [(<numba.core.ir.Assign object at 0x7c89ebba4bb0>,
                                   169)],
             '$88call_method.3': [(<numba.core.ir.Assign object at 0x7c89ebba67a0>,
                                   169)],
             '$8load_global.2.1': [(<numba.core.ir.Assign object at 0x7c89ebbe6350>,
                                    0)],
             '$90load_global.4': [(<numba.core.ir.Assign object at 0x7c89ebba6980>,
                                   169)],
             '$92load_method.5': [(<numba.core.ir.Assign object at 0x7c89ebbb1ea0>,
                                   169)],
             '$92return_value.1.1': [(<numba.core.ir.Assign object at 0x7c89ebbf22c0>,
                                      194)],
             '$96call_method.7': [(<numba.core.ir.Assign object at 0x7c89ebbb3820>,
                                   169)],
             '$98compare_op.8': [(<numba.core.ir.Assign object at 0x7c89ebbb3a00>,
                                  169)],
             '$const24.9.1': [(<numba.core.ir.Assign object at 0x7c89ebbe5450>,
                               0)],
             '$const28.11.1': [(<numba.core.ir.Assign object at 0x7c89ebbe70a0>,
                                0)],
             '$const30.12.1': [(<numba.core.ir.Assign object at 0x7c89ebbe7220>,
                                0)],
             '$const36.15.1': [(<numba.core.ir.Assign object at 0x7c89ebbe7700>,
                                0)],
             '$const4.1': [(<numba.core.ir.Assign object at 0x7c89ebd32530>,
                            90)],
             '$const40.17.1': [(<numba.core.ir.Assign object at 0x7c89ebbe79a0>,
                                0)],
             '$const42.1': [(<numba.core.ir.Assign object at 0x7c89ebd76140>,
                             127)],
             '$const42.18.1': [(<numba.core.ir.Assign object at 0x7c89ebbe7b20>,
                                0)],
             '$const52.23.1': [(<numba.core.ir.Assign object at 0x7c89ebbf0340>,
                                0)],
             '$const54.24.1': [(<numba.core.ir.Assign object at 0x7c89ebbf04c0>,
                                0)],
             '$const62.28.1': [(<numba.core.ir.Assign object at 0x7c89ebbf0a60>,
                                0)],
             '$const68.31.1': [(<numba.core.ir.Assign object at 0x7c89ebbf0ee0>,
                                0)],
             '$const70.32.1': [(<numba.core.ir.Assign object at 0x7c89ebbf1060>,
                                0)],
             '$phi24.0': [(<numba.core.ir.Assign object at 0x7c89ebd48490>,
                           90)],
             '$phi62.0': [(<numba.core.ir.Assign object at 0x7c89ebe65ab0>,
                           127)],
             '$phi80.0.1': [(<numba.core.ir.Assign object at 0x7c89ebbe66e0>,
                             0)],
             '$phi82.1.1': [(<numba.core.ir.Assign object at 0x7c89ebbf08e0>,
                             80)],
             'bool22': [(<numba.core.ir.Assign object at 0x7c89ebd37580>, 90)],
             'bool28': [(<numba.core.ir.Assign object at 0x7c89ebd52e60>, 91)],
             'bool60': [(<numba.core.ir.Assign object at 0x7c89ebd79c30>, 127)],
             'bool66': [(<numba.core.ir.Assign object at 0x7c89ebd82980>, 131)],
             'bool80': [(<numba.core.ir.Assign object at 0x7c89ebb99c90>, 165)],
             'full_shape0': [(<numba.core.ir.Assign object at 0x7c89ebbe65f0>,
                              0)],
             'index00': [(<numba.core.ir.Assign object at 0x7c89ebbf1c60>, 82)],
             'out0': [(<numba.core.ir.Assign object at 0x7c89ebbe5630>, 0)],
             'stencil_index': [(<numba.core.ir.Assign object at 0x7c89ebbe4f40>,
                                90),
                               (<numba.core.ir.Assign object at 0x7c89ebbe50f0>,
                                127)],
             'threshold': [(<numba.core.ir.Assign object at 0x7c89ebbe69b0>,
                            0)],
             'x': [(<numba.core.ir.Assign object at 0x7c89ebbe6ad0>, 0)],
             'x0': [(<numba.core.ir.Assign object at 0x7c89ebbe5000>, 90),
                    (<numba.core.ir.Assign object at 0x7c89ebd6ab00>, 121)],
             'x1': [(<numba.core.ir.Assign object at 0x7c89ebbe51b0>, 127),
                    (<numba.core.ir.Assign object at 0x7c89ebb96620>, 159)],
             'zero_pos': [(<numba.core.ir.Assign object at 0x7c89ebbe6890>,
                           0)]})
2025-01-31 15:31:36,583 - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x7c89ebb9b880>
2025-01-31 15:31:36,584 - DEBUG - Fix SSA violator on var stencil_index
2025-01-31 15:31:36,584 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-31 15:31:36,584 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89ebbfa950>
2025-01-31 15:31:36,584 - DEBUG - on stmt: x = arg(0, name=x)
2025-01-31 15:31:36,584 - DEBUG - on stmt: threshold = arg(1, name=threshold)
2025-01-31 15:31:36,584 - DEBUG - on stmt: zero_pos = arg(2, name=zero_pos)
2025-01-31 15:31:36,584 - DEBUG - on stmt: full_shape0 = getattr(value=x, attr=shape)
2025-01-31 15:31:36,584 - DEBUG - on stmt: $8load_global.2.1 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,584 - DEBUG - on stmt: $10load_attr.3.1 = getattr(value=$8load_global.2.1, attr=empty)
2025-01-31 15:31:36,584 - DEBUG - on stmt: $14load_global.5.1 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,584 - DEBUG - on stmt: $16load_attr.6.1 = getattr(value=$14load_global.5.1, attr=bool_)
2025-01-31 15:31:36,584 - DEBUG - on stmt: out0 = call $10load_attr.3.1(full_shape0, func=$10load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,584 - DEBUG - on stmt: $const24.9.1 = const(int, 0)
2025-01-31 15:31:36,584 - DEBUG - on stmt: $const28.11.1 = const(NoneType, None)
2025-01-31 15:31:36,584 - DEBUG - on stmt: $const30.12.1 = const(int, 1)
2025-01-31 15:31:36,584 - DEBUG - on stmt: $32build_slice.13.1 = global(slice: <class 'slice'>)
2025-01-31 15:31:36,584 - DEBUG - on stmt: $32build_slice.14.1 = call $32build_slice.13.1($const28.11.1, $const30.12.1, func=$32build_slice.13.1, args=(Var($const28.11.1, <string>:4), Var($const30.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,584 - DEBUG - on stmt: out0[$32build_slice.14.1] = $const24.9.1
2025-01-31 15:31:36,584 - DEBUG - on stmt: $const36.15.1 = const(int, 0)
2025-01-31 15:31:36,584 - DEBUG - on stmt: $const40.17.1 = const(int, 0)
2025-01-31 15:31:36,584 - DEBUG - on stmt: $const42.18.1 = const(NoneType, None)
2025-01-31 15:31:36,584 - DEBUG - on stmt: $44build_slice.19.1 = global(slice: <class 'slice'>)
2025-01-31 15:31:36,584 - DEBUG - on stmt: $44build_slice.20.1 = call $44build_slice.19.1($const40.17.1, $const42.18.1, func=$44build_slice.19.1, args=(Var($const40.17.1, <string>:5), Var($const42.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,584 - DEBUG - on stmt: out0[$44build_slice.20.1] = $const36.15.1
2025-01-31 15:31:36,584 - DEBUG - on stmt: $48load_global.21.1 = global(range: <class 'range'>)
2025-01-31 15:31:36,584 - DEBUG - on stmt: $50load_global.22.1 = global(min: <built-in function min>)
2025-01-31 15:31:36,584 - DEBUG - on stmt: $const52.23.1 = const(int, 0)
2025-01-31 15:31:36,585 - DEBUG - on stmt: $const54.24.1 = const(int, -1)
2025-01-31 15:31:36,585 - DEBUG - on stmt: $56call_function.25.1 = call $50load_global.22.1($const52.23.1, $const54.24.1, func=$50load_global.22.1, args=[Var($const52.23.1, <string>:6), Var($const54.24.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,585 - DEBUG - on stmt: $58unary_negative.26.1 = unary(fn=<built-in function neg>, value=$56call_function.25.1)
2025-01-31 15:31:36,585 - DEBUG - on stmt: $const62.28.1 = const(int, 0)
2025-01-31 15:31:36,585 - DEBUG - on stmt: $64binary_subscr.29.1 = getitem(value=full_shape0, index=$const62.28.1, fn=<built-in function getitem>)
2025-01-31 15:31:36,585 - DEBUG - on stmt: $66load_global.30.1 = global(max: <built-in function max>)
2025-01-31 15:31:36,585 - DEBUG - on stmt: $const68.31.1 = const(int, 0)
2025-01-31 15:31:36,585 - DEBUG - on stmt: $const70.32.1 = const(int, 0)
2025-01-31 15:31:36,585 - DEBUG - on stmt: $72call_function.33.1 = call $66load_global.30.1($const68.31.1, $const70.32.1, func=$66load_global.30.1, args=[Var($const68.31.1, <string>:6), Var($const70.32.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,585 - DEBUG - on stmt: $74binary_subtract.34.1 = $64binary_subscr.29.1 - $72call_function.33.1
2025-01-31 15:31:36,585 - DEBUG - on stmt: $76call_function.35.1 = call $48load_global.21.1($58unary_negative.26.1, $74binary_subtract.34.1, func=$48load_global.21.1, args=[Var($58unary_negative.26.1, <string>:6), Var($74binary_subtract.34.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,585 - DEBUG - on stmt: $78get_iter.36.1 = getiter(value=$76call_function.35.1)
2025-01-31 15:31:36,585 - DEBUG - on stmt: $phi80.0.1 = $78get_iter.36.1
2025-01-31 15:31:36,585 - DEBUG - on stmt: jump 80
2025-01-31 15:31:36,585 - DEBUG - ==== SSA block rewrite pass on 80
2025-01-31 15:31:36,585 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89ebbfa950>
2025-01-31 15:31:36,585 - DEBUG - on stmt: $80for_iter.1.1 = iternext(value=$phi80.0.1)
2025-01-31 15:31:36,585 - DEBUG - on stmt: $80for_iter.2.1 = pair_first(value=$80for_iter.1.1)
2025-01-31 15:31:36,585 - DEBUG - on stmt: $80for_iter.3.1 = pair_second(value=$80for_iter.1.1)
2025-01-31 15:31:36,585 - DEBUG - on stmt: $phi82.1.1 = $80for_iter.2.1
2025-01-31 15:31:36,585 - DEBUG - on stmt: branch $80for_iter.3.1, 82, 194
2025-01-31 15:31:36,585 - DEBUG - ==== SSA block rewrite pass on 82
2025-01-31 15:31:36,585 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89ebbfa950>
2025-01-31 15:31:36,585 - DEBUG - on stmt: index00 = $phi82.1.1
2025-01-31 15:31:36,585 - DEBUG - on stmt: jump 90
2025-01-31 15:31:36,585 - DEBUG - ==== SSA block rewrite pass on 194
2025-01-31 15:31:36,585 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89ebbfa950>
2025-01-31 15:31:36,585 - DEBUG - on stmt: $92return_value.1.1 = cast(value=out0)
2025-01-31 15:31:36,585 - DEBUG - on stmt: return $92return_value.1.1
2025-01-31 15:31:36,586 - DEBUG - ==== SSA block rewrite pass on 90
2025-01-31 15:31:36,586 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89ebbfa950>
2025-01-31 15:31:36,586 - DEBUG - on stmt: $const4.1 = const(int, 0)
2025-01-31 15:31:36,586 - DEBUG - on stmt: stencil_index = $const4.1 + index00
2025-01-31 15:31:36,586 - DEBUG - first assign: stencil_index
2025-01-31 15:31:36,586 - DEBUG - replaced with: stencil_index = $const4.1 + index00
2025-01-31 15:31:36,586 - DEBUG - on stmt: x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-01-31 15:31:36,586 - DEBUG - on stmt: $12unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2025-01-31 15:31:36,586 - DEBUG - on stmt: $20compare_op.7 = $12unary_negative.4 <= x0
2025-01-31 15:31:36,586 - DEBUG - on stmt: bool22 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,586 - DEBUG - on stmt: $22pred = call bool22($20compare_op.7, func=bool22, args=(Var($20compare_op.7, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,586 - DEBUG - on stmt: $phi24.0 = x0
2025-01-31 15:31:36,586 - DEBUG - on stmt: branch $22pred, 91, 123
2025-01-31 15:31:36,586 - DEBUG - ==== SSA block rewrite pass on 91
2025-01-31 15:31:36,586 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89ebbfa950>
2025-01-31 15:31:36,586 - DEBUG - on stmt: $26compare_op.2 = x0 <= threshold
2025-01-31 15:31:36,586 - DEBUG - on stmt: bool28 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,586 - DEBUG - on stmt: $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,586 - DEBUG - on stmt: branch $28pred, 115, 127
2025-01-31 15:31:36,586 - DEBUG - ==== SSA block rewrite pass on 115
2025-01-31 15:31:36,586 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89ebbfa950>
2025-01-31 15:31:36,586 - DEBUG - on stmt: jump 121
2025-01-31 15:31:36,586 - DEBUG - ==== SSA block rewrite pass on 123
2025-01-31 15:31:36,586 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89ebbfa950>
2025-01-31 15:31:36,586 - DEBUG - on stmt: jump 127
2025-01-31 15:31:36,586 - DEBUG - ==== SSA block rewrite pass on 121
2025-01-31 15:31:36,586 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89ebbfa950>
2025-01-31 15:31:36,586 - DEBUG - on stmt: x0 = const(int, 0)
2025-01-31 15:31:36,586 - DEBUG - on stmt: jump 127
2025-01-31 15:31:36,587 - DEBUG - ==== SSA block rewrite pass on 127
2025-01-31 15:31:36,587 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89ebbfa950>
2025-01-31 15:31:36,587 - DEBUG - on stmt: $const42.1 = const(int, -1)
2025-01-31 15:31:36,587 - DEBUG - on stmt: stencil_index = $const42.1 + index00
2025-01-31 15:31:36,587 - DEBUG - replaced with: stencil_index.1 = $const42.1 + index00
2025-01-31 15:31:36,587 - DEBUG - on stmt: x1 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-01-31 15:31:36,587 - DEBUG - on stmt: $50unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2025-01-31 15:31:36,587 - DEBUG - on stmt: $58compare_op.7 = $50unary_negative.4 <= x1
2025-01-31 15:31:36,587 - DEBUG - on stmt: bool60 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,587 - DEBUG - on stmt: $60pred = call bool60($58compare_op.7, func=bool60, args=(Var($58compare_op.7, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,587 - DEBUG - on stmt: $phi62.0 = x1
2025-01-31 15:31:36,587 - DEBUG - on stmt: branch $60pred, 131, 161
2025-01-31 15:31:36,587 - DEBUG - ==== SSA block rewrite pass on 131
2025-01-31 15:31:36,587 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89ebbfa950>
2025-01-31 15:31:36,587 - DEBUG - on stmt: $64compare_op.2 = x1 <= threshold
2025-01-31 15:31:36,587 - DEBUG - on stmt: bool66 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,587 - DEBUG - on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,587 - DEBUG - on stmt: branch $66pred, 153, 165
2025-01-31 15:31:36,587 - DEBUG - ==== SSA block rewrite pass on 153
2025-01-31 15:31:36,587 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89ebbfa950>
2025-01-31 15:31:36,587 - DEBUG - on stmt: jump 159
2025-01-31 15:31:36,587 - DEBUG - ==== SSA block rewrite pass on 161
2025-01-31 15:31:36,587 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89ebbfa950>
2025-01-31 15:31:36,587 - DEBUG - on stmt: jump 165
2025-01-31 15:31:36,587 - DEBUG - ==== SSA block rewrite pass on 159
2025-01-31 15:31:36,587 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89ebbfa950>
2025-01-31 15:31:36,587 - DEBUG - on stmt: x1 = const(int, 0)
2025-01-31 15:31:36,587 - DEBUG - on stmt: jump 165
2025-01-31 15:31:36,587 - DEBUG - ==== SSA block rewrite pass on 165
2025-01-31 15:31:36,588 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89ebbfa950>
2025-01-31 15:31:36,588 - DEBUG - on stmt: bool80 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,588 - DEBUG - on stmt: $80pred = call bool80(zero_pos, func=bool80, args=(Var(zero_pos, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,588 - DEBUG - on stmt: branch $80pred, 169, 173
2025-01-31 15:31:36,588 - DEBUG - ==== SSA block rewrite pass on 169
2025-01-31 15:31:36,588 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89ebbfa950>
2025-01-31 15:31:36,588 - DEBUG - on stmt: $82load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,588 - DEBUG - on stmt: $84load_method.1 = getattr(value=$82load_global.0, attr=signbit)
2025-01-31 15:31:36,588 - DEBUG - on stmt: $88call_method.3 = call $84load_method.1(x0, func=$84load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,588 - DEBUG - on stmt: $90load_global.4 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,588 - DEBUG - on stmt: $92load_method.5 = getattr(value=$90load_global.4, attr=signbit)
2025-01-31 15:31:36,588 - DEBUG - on stmt: $96call_method.7 = call $92load_method.5(x1, func=$92load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,588 - DEBUG - on stmt: $98compare_op.8 = $88call_method.3 != $96call_method.7
2025-01-31 15:31:36,588 - DEBUG - on stmt: $100return_value.9 = cast(value=$98compare_op.8)
2025-01-31 15:31:36,588 - DEBUG - on stmt: out0[index00] = $100return_value.9
2025-01-31 15:31:36,588 - DEBUG - on stmt: jump 193
2025-01-31 15:31:36,588 - DEBUG - ==== SSA block rewrite pass on 173
2025-01-31 15:31:36,588 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89ebbfa950>
2025-01-31 15:31:36,588 - DEBUG - on stmt: $102load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,588 - DEBUG - on stmt: $104load_method.1 = getattr(value=$102load_global.0, attr=sign)
2025-01-31 15:31:36,588 - DEBUG - on stmt: $108call_method.3 = call $104load_method.1(x0, func=$104load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,588 - DEBUG - on stmt: $110load_global.4 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,588 - DEBUG - on stmt: $112load_method.5 = getattr(value=$110load_global.4, attr=sign)
2025-01-31 15:31:36,588 - DEBUG - on stmt: $116call_method.7 = call $112load_method.5(x1, func=$112load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,588 - DEBUG - on stmt: $118compare_op.8 = $108call_method.3 != $116call_method.7
2025-01-31 15:31:36,588 - DEBUG - on stmt: $120return_value.9 = cast(value=$118compare_op.8)
2025-01-31 15:31:36,589 - DEBUG - on stmt: out0[index00] = $120return_value.9
2025-01-31 15:31:36,589 - DEBUG - on stmt: jump 193
2025-01-31 15:31:36,589 - DEBUG - ==== SSA block rewrite pass on 193
2025-01-31 15:31:36,589 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89ebbfa950>
2025-01-31 15:31:36,589 - DEBUG - on stmt: jump 80
2025-01-31 15:31:36,589 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {90: [<numba.core.ir.Assign object at 0x7c89ebbfb040>],
             127: [<numba.core.ir.Assign object at 0x7c89ebbfb3a0>]})
2025-01-31 15:31:36,589 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-31 15:31:36,589 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89ebbfa950>
2025-01-31 15:31:36,589 - DEBUG - on stmt: x = arg(0, name=x)
2025-01-31 15:31:36,589 - DEBUG - on stmt: threshold = arg(1, name=threshold)
2025-01-31 15:31:36,589 - DEBUG - on stmt: zero_pos = arg(2, name=zero_pos)
2025-01-31 15:31:36,589 - DEBUG - on stmt: full_shape0 = getattr(value=x, attr=shape)
2025-01-31 15:31:36,589 - DEBUG - on stmt: $8load_global.2.1 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,589 - DEBUG - on stmt: $10load_attr.3.1 = getattr(value=$8load_global.2.1, attr=empty)
2025-01-31 15:31:36,589 - DEBUG - on stmt: $14load_global.5.1 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,589 - DEBUG - on stmt: $16load_attr.6.1 = getattr(value=$14load_global.5.1, attr=bool_)
2025-01-31 15:31:36,589 - DEBUG - on stmt: out0 = call $10load_attr.3.1(full_shape0, func=$10load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,589 - DEBUG - on stmt: $const24.9.1 = const(int, 0)
2025-01-31 15:31:36,589 - DEBUG - on stmt: $const28.11.1 = const(NoneType, None)
2025-01-31 15:31:36,589 - DEBUG - on stmt: $const30.12.1 = const(int, 1)
2025-01-31 15:31:36,589 - DEBUG - on stmt: $32build_slice.13.1 = global(slice: <class 'slice'>)
2025-01-31 15:31:36,589 - DEBUG - on stmt: $32build_slice.14.1 = call $32build_slice.13.1($const28.11.1, $const30.12.1, func=$32build_slice.13.1, args=(Var($const28.11.1, <string>:4), Var($const30.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,589 - DEBUG - on stmt: out0[$32build_slice.14.1] = $const24.9.1
2025-01-31 15:31:36,589 - DEBUG - on stmt: $const36.15.1 = const(int, 0)
2025-01-31 15:31:36,589 - DEBUG - on stmt: $const40.17.1 = const(int, 0)
2025-01-31 15:31:36,590 - DEBUG - on stmt: $const42.18.1 = const(NoneType, None)
2025-01-31 15:31:36,590 - DEBUG - on stmt: $44build_slice.19.1 = global(slice: <class 'slice'>)
2025-01-31 15:31:36,590 - DEBUG - on stmt: $44build_slice.20.1 = call $44build_slice.19.1($const40.17.1, $const42.18.1, func=$44build_slice.19.1, args=(Var($const40.17.1, <string>:5), Var($const42.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,590 - DEBUG - on stmt: out0[$44build_slice.20.1] = $const36.15.1
2025-01-31 15:31:36,590 - DEBUG - on stmt: $48load_global.21.1 = global(range: <class 'range'>)
2025-01-31 15:31:36,590 - DEBUG - on stmt: $50load_global.22.1 = global(min: <built-in function min>)
2025-01-31 15:31:36,590 - DEBUG - on stmt: $const52.23.1 = const(int, 0)
2025-01-31 15:31:36,590 - DEBUG - on stmt: $const54.24.1 = const(int, -1)
2025-01-31 15:31:36,590 - DEBUG - on stmt: $56call_function.25.1 = call $50load_global.22.1($const52.23.1, $const54.24.1, func=$50load_global.22.1, args=[Var($const52.23.1, <string>:6), Var($const54.24.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,590 - DEBUG - on stmt: $58unary_negative.26.1 = unary(fn=<built-in function neg>, value=$56call_function.25.1)
2025-01-31 15:31:36,590 - DEBUG - on stmt: $const62.28.1 = const(int, 0)
2025-01-31 15:31:36,590 - DEBUG - on stmt: $64binary_subscr.29.1 = getitem(value=full_shape0, index=$const62.28.1, fn=<built-in function getitem>)
2025-01-31 15:31:36,590 - DEBUG - on stmt: $66load_global.30.1 = global(max: <built-in function max>)
2025-01-31 15:31:36,590 - DEBUG - on stmt: $const68.31.1 = const(int, 0)
2025-01-31 15:31:36,590 - DEBUG - on stmt: $const70.32.1 = const(int, 0)
2025-01-31 15:31:36,590 - DEBUG - on stmt: $72call_function.33.1 = call $66load_global.30.1($const68.31.1, $const70.32.1, func=$66load_global.30.1, args=[Var($const68.31.1, <string>:6), Var($const70.32.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,590 - DEBUG - on stmt: $74binary_subtract.34.1 = $64binary_subscr.29.1 - $72call_function.33.1
2025-01-31 15:31:36,590 - DEBUG - on stmt: $76call_function.35.1 = call $48load_global.21.1($58unary_negative.26.1, $74binary_subtract.34.1, func=$48load_global.21.1, args=[Var($58unary_negative.26.1, <string>:6), Var($74binary_subtract.34.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,590 - DEBUG - on stmt: $78get_iter.36.1 = getiter(value=$76call_function.35.1)
2025-01-31 15:31:36,590 - DEBUG - on stmt: $phi80.0.1 = $78get_iter.36.1
2025-01-31 15:31:36,590 - DEBUG - on stmt: jump 80
2025-01-31 15:31:36,590 - DEBUG - ==== SSA block rewrite pass on 80
2025-01-31 15:31:36,590 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89ebbfa950>
2025-01-31 15:31:36,590 - DEBUG - on stmt: $80for_iter.1.1 = iternext(value=$phi80.0.1)
2025-01-31 15:31:36,590 - DEBUG - on stmt: $80for_iter.2.1 = pair_first(value=$80for_iter.1.1)
2025-01-31 15:31:36,591 - DEBUG - on stmt: $80for_iter.3.1 = pair_second(value=$80for_iter.1.1)
2025-01-31 15:31:36,591 - DEBUG - on stmt: $phi82.1.1 = $80for_iter.2.1
2025-01-31 15:31:36,591 - DEBUG - on stmt: branch $80for_iter.3.1, 82, 194
2025-01-31 15:31:36,591 - DEBUG - ==== SSA block rewrite pass on 82
2025-01-31 15:31:36,591 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89ebbfa950>
2025-01-31 15:31:36,591 - DEBUG - on stmt: index00 = $phi82.1.1
2025-01-31 15:31:36,591 - DEBUG - on stmt: jump 90
2025-01-31 15:31:36,591 - DEBUG - ==== SSA block rewrite pass on 194
2025-01-31 15:31:36,591 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89ebbfa950>
2025-01-31 15:31:36,591 - DEBUG - on stmt: $92return_value.1.1 = cast(value=out0)
2025-01-31 15:31:36,591 - DEBUG - on stmt: return $92return_value.1.1
2025-01-31 15:31:36,591 - DEBUG - ==== SSA block rewrite pass on 90
2025-01-31 15:31:36,591 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89ebbfa950>
2025-01-31 15:31:36,591 - DEBUG - on stmt: $const4.1 = const(int, 0)
2025-01-31 15:31:36,591 - DEBUG - on stmt: stencil_index = $const4.1 + index00
2025-01-31 15:31:36,591 - DEBUG - on stmt: x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-01-31 15:31:36,591 - DEBUG - find_def var='stencil_index' stmt=x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-01-31 15:31:36,591 - DEBUG - on stmt: $12unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2025-01-31 15:31:36,591 - DEBUG - on stmt: $20compare_op.7 = $12unary_negative.4 <= x0
2025-01-31 15:31:36,591 - DEBUG - on stmt: bool22 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,591 - DEBUG - on stmt: $22pred = call bool22($20compare_op.7, func=bool22, args=(Var($20compare_op.7, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,591 - DEBUG - on stmt: $phi24.0 = x0
2025-01-31 15:31:36,591 - DEBUG - on stmt: branch $22pred, 91, 123
2025-01-31 15:31:36,591 - DEBUG - ==== SSA block rewrite pass on 91
2025-01-31 15:31:36,591 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89ebbfa950>
2025-01-31 15:31:36,591 - DEBUG - on stmt: $26compare_op.2 = x0 <= threshold
2025-01-31 15:31:36,591 - DEBUG - on stmt: bool28 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,592 - DEBUG - on stmt: $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,592 - DEBUG - on stmt: branch $28pred, 115, 127
2025-01-31 15:31:36,592 - DEBUG - ==== SSA block rewrite pass on 115
2025-01-31 15:31:36,592 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89ebbfa950>
2025-01-31 15:31:36,592 - DEBUG - on stmt: jump 121
2025-01-31 15:31:36,592 - DEBUG - ==== SSA block rewrite pass on 123
2025-01-31 15:31:36,592 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89ebbfa950>
2025-01-31 15:31:36,592 - DEBUG - on stmt: jump 127
2025-01-31 15:31:36,592 - DEBUG - ==== SSA block rewrite pass on 121
2025-01-31 15:31:36,592 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89ebbfa950>
2025-01-31 15:31:36,592 - DEBUG - on stmt: x0 = const(int, 0)
2025-01-31 15:31:36,592 - DEBUG - on stmt: jump 127
2025-01-31 15:31:36,592 - DEBUG - ==== SSA block rewrite pass on 127
2025-01-31 15:31:36,592 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89ebbfa950>
2025-01-31 15:31:36,592 - DEBUG - on stmt: $const42.1 = const(int, -1)
2025-01-31 15:31:36,592 - DEBUG - on stmt: stencil_index.1 = $const42.1 + index00
2025-01-31 15:31:36,592 - DEBUG - on stmt: x1 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-01-31 15:31:36,592 - DEBUG - find_def var='stencil_index' stmt=x1 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-01-31 15:31:36,592 - DEBUG - replaced with: x1 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2025-01-31 15:31:36,592 - DEBUG - on stmt: $50unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2025-01-31 15:31:36,592 - DEBUG - on stmt: $58compare_op.7 = $50unary_negative.4 <= x1
2025-01-31 15:31:36,592 - DEBUG - on stmt: bool60 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,592 - DEBUG - on stmt: $60pred = call bool60($58compare_op.7, func=bool60, args=(Var($58compare_op.7, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,592 - DEBUG - on stmt: $phi62.0 = x1
2025-01-31 15:31:36,592 - DEBUG - on stmt: branch $60pred, 131, 161
2025-01-31 15:31:36,592 - DEBUG - ==== SSA block rewrite pass on 131
2025-01-31 15:31:36,593 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89ebbfa950>
2025-01-31 15:31:36,593 - DEBUG - on stmt: $64compare_op.2 = x1 <= threshold
2025-01-31 15:31:36,593 - DEBUG - on stmt: bool66 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,593 - DEBUG - on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,593 - DEBUG - on stmt: branch $66pred, 153, 165
2025-01-31 15:31:36,593 - DEBUG - ==== SSA block rewrite pass on 153
2025-01-31 15:31:36,593 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89ebbfa950>
2025-01-31 15:31:36,593 - DEBUG - on stmt: jump 159
2025-01-31 15:31:36,593 - DEBUG - ==== SSA block rewrite pass on 161
2025-01-31 15:31:36,593 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89ebbfa950>
2025-01-31 15:31:36,593 - DEBUG - on stmt: jump 165
2025-01-31 15:31:36,593 - DEBUG - ==== SSA block rewrite pass on 159
2025-01-31 15:31:36,593 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89ebbfa950>
2025-01-31 15:31:36,593 - DEBUG - on stmt: x1 = const(int, 0)
2025-01-31 15:31:36,593 - DEBUG - on stmt: jump 165
2025-01-31 15:31:36,593 - DEBUG - ==== SSA block rewrite pass on 165
2025-01-31 15:31:36,593 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89ebbfa950>
2025-01-31 15:31:36,593 - DEBUG - on stmt: bool80 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,593 - DEBUG - on stmt: $80pred = call bool80(zero_pos, func=bool80, args=(Var(zero_pos, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,593 - DEBUG - on stmt: branch $80pred, 169, 173
2025-01-31 15:31:36,593 - DEBUG - ==== SSA block rewrite pass on 169
2025-01-31 15:31:36,593 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89ebbfa950>
2025-01-31 15:31:36,593 - DEBUG - on stmt: $82load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,593 - DEBUG - on stmt: $84load_method.1 = getattr(value=$82load_global.0, attr=signbit)
2025-01-31 15:31:36,593 - DEBUG - on stmt: $88call_method.3 = call $84load_method.1(x0, func=$84load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,593 - DEBUG - on stmt: $90load_global.4 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,593 - DEBUG - on stmt: $92load_method.5 = getattr(value=$90load_global.4, attr=signbit)
2025-01-31 15:31:36,594 - DEBUG - on stmt: $96call_method.7 = call $92load_method.5(x1, func=$92load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,594 - DEBUG - on stmt: $98compare_op.8 = $88call_method.3 != $96call_method.7
2025-01-31 15:31:36,594 - DEBUG - on stmt: $100return_value.9 = cast(value=$98compare_op.8)
2025-01-31 15:31:36,594 - DEBUG - on stmt: out0[index00] = $100return_value.9
2025-01-31 15:31:36,594 - DEBUG - on stmt: jump 193
2025-01-31 15:31:36,594 - DEBUG - ==== SSA block rewrite pass on 173
2025-01-31 15:31:36,594 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89ebbfa950>
2025-01-31 15:31:36,594 - DEBUG - on stmt: $102load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,594 - DEBUG - on stmt: $104load_method.1 = getattr(value=$102load_global.0, attr=sign)
2025-01-31 15:31:36,594 - DEBUG - on stmt: $108call_method.3 = call $104load_method.1(x0, func=$104load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,594 - DEBUG - on stmt: $110load_global.4 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,594 - DEBUG - on stmt: $112load_method.5 = getattr(value=$110load_global.4, attr=sign)
2025-01-31 15:31:36,594 - DEBUG - on stmt: $116call_method.7 = call $112load_method.5(x1, func=$112load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,594 - DEBUG - on stmt: $118compare_op.8 = $108call_method.3 != $116call_method.7
2025-01-31 15:31:36,594 - DEBUG - on stmt: $120return_value.9 = cast(value=$118compare_op.8)
2025-01-31 15:31:36,594 - DEBUG - on stmt: out0[index00] = $120return_value.9
2025-01-31 15:31:36,594 - DEBUG - on stmt: jump 193
2025-01-31 15:31:36,594 - DEBUG - ==== SSA block rewrite pass on 193
2025-01-31 15:31:36,594 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89ebbfa950>
2025-01-31 15:31:36,594 - DEBUG - on stmt: jump 80
2025-01-31 15:31:36,594 - DEBUG - Fix SSA violator on var x0
2025-01-31 15:31:36,594 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-31 15:31:36,594 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89ebbf9b70>
2025-01-31 15:31:36,594 - DEBUG - on stmt: x = arg(0, name=x)
2025-01-31 15:31:36,594 - DEBUG - on stmt: threshold = arg(1, name=threshold)
2025-01-31 15:31:36,595 - DEBUG - on stmt: zero_pos = arg(2, name=zero_pos)
2025-01-31 15:31:36,595 - DEBUG - on stmt: full_shape0 = getattr(value=x, attr=shape)
2025-01-31 15:31:36,595 - DEBUG - on stmt: $8load_global.2.1 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,595 - DEBUG - on stmt: $10load_attr.3.1 = getattr(value=$8load_global.2.1, attr=empty)
2025-01-31 15:31:36,595 - DEBUG - on stmt: $14load_global.5.1 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,595 - DEBUG - on stmt: $16load_attr.6.1 = getattr(value=$14load_global.5.1, attr=bool_)
2025-01-31 15:31:36,595 - DEBUG - on stmt: out0 = call $10load_attr.3.1(full_shape0, func=$10load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,595 - DEBUG - on stmt: $const24.9.1 = const(int, 0)
2025-01-31 15:31:36,595 - DEBUG - on stmt: $const28.11.1 = const(NoneType, None)
2025-01-31 15:31:36,595 - DEBUG - on stmt: $const30.12.1 = const(int, 1)
2025-01-31 15:31:36,595 - DEBUG - on stmt: $32build_slice.13.1 = global(slice: <class 'slice'>)
2025-01-31 15:31:36,595 - DEBUG - on stmt: $32build_slice.14.1 = call $32build_slice.13.1($const28.11.1, $const30.12.1, func=$32build_slice.13.1, args=(Var($const28.11.1, <string>:4), Var($const30.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,595 - DEBUG - on stmt: out0[$32build_slice.14.1] = $const24.9.1
2025-01-31 15:31:36,595 - DEBUG - on stmt: $const36.15.1 = const(int, 0)
2025-01-31 15:31:36,595 - DEBUG - on stmt: $const40.17.1 = const(int, 0)
2025-01-31 15:31:36,595 - DEBUG - on stmt: $const42.18.1 = const(NoneType, None)
2025-01-31 15:31:36,595 - DEBUG - on stmt: $44build_slice.19.1 = global(slice: <class 'slice'>)
2025-01-31 15:31:36,595 - DEBUG - on stmt: $44build_slice.20.1 = call $44build_slice.19.1($const40.17.1, $const42.18.1, func=$44build_slice.19.1, args=(Var($const40.17.1, <string>:5), Var($const42.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,595 - DEBUG - on stmt: out0[$44build_slice.20.1] = $const36.15.1
2025-01-31 15:31:36,595 - DEBUG - on stmt: $48load_global.21.1 = global(range: <class 'range'>)
2025-01-31 15:31:36,595 - DEBUG - on stmt: $50load_global.22.1 = global(min: <built-in function min>)
2025-01-31 15:31:36,595 - DEBUG - on stmt: $const52.23.1 = const(int, 0)
2025-01-31 15:31:36,595 - DEBUG - on stmt: $const54.24.1 = const(int, -1)
2025-01-31 15:31:36,595 - DEBUG - on stmt: $56call_function.25.1 = call $50load_global.22.1($const52.23.1, $const54.24.1, func=$50load_global.22.1, args=[Var($const52.23.1, <string>:6), Var($const54.24.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,595 - DEBUG - on stmt: $58unary_negative.26.1 = unary(fn=<built-in function neg>, value=$56call_function.25.1)
2025-01-31 15:31:36,595 - DEBUG - on stmt: $const62.28.1 = const(int, 0)
2025-01-31 15:31:36,595 - DEBUG - on stmt: $64binary_subscr.29.1 = getitem(value=full_shape0, index=$const62.28.1, fn=<built-in function getitem>)
2025-01-31 15:31:36,596 - DEBUG - on stmt: $66load_global.30.1 = global(max: <built-in function max>)
2025-01-31 15:31:36,596 - DEBUG - on stmt: $const68.31.1 = const(int, 0)
2025-01-31 15:31:36,596 - DEBUG - on stmt: $const70.32.1 = const(int, 0)
2025-01-31 15:31:36,596 - DEBUG - on stmt: $72call_function.33.1 = call $66load_global.30.1($const68.31.1, $const70.32.1, func=$66load_global.30.1, args=[Var($const68.31.1, <string>:6), Var($const70.32.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,596 - DEBUG - on stmt: $74binary_subtract.34.1 = $64binary_subscr.29.1 - $72call_function.33.1
2025-01-31 15:31:36,596 - DEBUG - on stmt: $76call_function.35.1 = call $48load_global.21.1($58unary_negative.26.1, $74binary_subtract.34.1, func=$48load_global.21.1, args=[Var($58unary_negative.26.1, <string>:6), Var($74binary_subtract.34.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,596 - DEBUG - on stmt: $78get_iter.36.1 = getiter(value=$76call_function.35.1)
2025-01-31 15:31:36,596 - DEBUG - on stmt: $phi80.0.1 = $78get_iter.36.1
2025-01-31 15:31:36,596 - DEBUG - on stmt: jump 80
2025-01-31 15:31:36,596 - DEBUG - ==== SSA block rewrite pass on 80
2025-01-31 15:31:36,596 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89ebbf9b70>
2025-01-31 15:31:36,596 - DEBUG - on stmt: $80for_iter.1.1 = iternext(value=$phi80.0.1)
2025-01-31 15:31:36,596 - DEBUG - on stmt: $80for_iter.2.1 = pair_first(value=$80for_iter.1.1)
2025-01-31 15:31:36,596 - DEBUG - on stmt: $80for_iter.3.1 = pair_second(value=$80for_iter.1.1)
2025-01-31 15:31:36,596 - DEBUG - on stmt: $phi82.1.1 = $80for_iter.2.1
2025-01-31 15:31:36,596 - DEBUG - on stmt: branch $80for_iter.3.1, 82, 194
2025-01-31 15:31:36,596 - DEBUG - ==== SSA block rewrite pass on 82
2025-01-31 15:31:36,596 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89ebbf9b70>
2025-01-31 15:31:36,596 - DEBUG - on stmt: index00 = $phi82.1.1
2025-01-31 15:31:36,596 - DEBUG - on stmt: jump 90
2025-01-31 15:31:36,596 - DEBUG - ==== SSA block rewrite pass on 194
2025-01-31 15:31:36,596 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89ebbf9b70>
2025-01-31 15:31:36,596 - DEBUG - on stmt: $92return_value.1.1 = cast(value=out0)
2025-01-31 15:31:36,596 - DEBUG - on stmt: return $92return_value.1.1
2025-01-31 15:31:36,596 - DEBUG - ==== SSA block rewrite pass on 90
2025-01-31 15:31:36,596 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89ebbf9b70>
2025-01-31 15:31:36,596 - DEBUG - on stmt: $const4.1 = const(int, 0)
2025-01-31 15:31:36,596 - DEBUG - on stmt: stencil_index = $const4.1 + index00
2025-01-31 15:31:36,596 - DEBUG - on stmt: x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-01-31 15:31:36,596 - DEBUG - first assign: x0
2025-01-31 15:31:36,597 - DEBUG - replaced with: x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-01-31 15:31:36,597 - DEBUG - on stmt: $12unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2025-01-31 15:31:36,597 - DEBUG - on stmt: $20compare_op.7 = $12unary_negative.4 <= x0
2025-01-31 15:31:36,597 - DEBUG - on stmt: bool22 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,597 - DEBUG - on stmt: $22pred = call bool22($20compare_op.7, func=bool22, args=(Var($20compare_op.7, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,597 - DEBUG - on stmt: $phi24.0 = x0
2025-01-31 15:31:36,597 - DEBUG - on stmt: branch $22pred, 91, 123
2025-01-31 15:31:36,597 - DEBUG - ==== SSA block rewrite pass on 91
2025-01-31 15:31:36,597 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89ebbf9b70>
2025-01-31 15:31:36,597 - DEBUG - on stmt: $26compare_op.2 = x0 <= threshold
2025-01-31 15:31:36,597 - DEBUG - on stmt: bool28 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,597 - DEBUG - on stmt: $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,597 - DEBUG - on stmt: branch $28pred, 115, 127
2025-01-31 15:31:36,597 - DEBUG - ==== SSA block rewrite pass on 115
2025-01-31 15:31:36,597 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89ebbf9b70>
2025-01-31 15:31:36,597 - DEBUG - on stmt: jump 121
2025-01-31 15:31:36,597 - DEBUG - ==== SSA block rewrite pass on 123
2025-01-31 15:31:36,597 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89ebbf9b70>
2025-01-31 15:31:36,597 - DEBUG - on stmt: jump 127
2025-01-31 15:31:36,597 - DEBUG - ==== SSA block rewrite pass on 121
2025-01-31 15:31:36,597 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89ebbf9b70>
2025-01-31 15:31:36,597 - DEBUG - on stmt: x0 = const(int, 0)
2025-01-31 15:31:36,597 - DEBUG - replaced with: x0.1 = const(int, 0)
2025-01-31 15:31:36,597 - DEBUG - on stmt: jump 127
2025-01-31 15:31:36,597 - DEBUG - ==== SSA block rewrite pass on 127
2025-01-31 15:31:36,597 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89ebbf9b70>
2025-01-31 15:31:36,597 - DEBUG - on stmt: $const42.1 = const(int, -1)
2025-01-31 15:31:36,597 - DEBUG - on stmt: stencil_index.1 = $const42.1 + index00
2025-01-31 15:31:36,597 - DEBUG - on stmt: x1 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2025-01-31 15:31:36,598 - DEBUG - on stmt: $50unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2025-01-31 15:31:36,598 - DEBUG - on stmt: $58compare_op.7 = $50unary_negative.4 <= x1
2025-01-31 15:31:36,598 - DEBUG - on stmt: bool60 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,598 - DEBUG - on stmt: $60pred = call bool60($58compare_op.7, func=bool60, args=(Var($58compare_op.7, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,598 - DEBUG - on stmt: $phi62.0 = x1
2025-01-31 15:31:36,598 - DEBUG - on stmt: branch $60pred, 131, 161
2025-01-31 15:31:36,598 - DEBUG - ==== SSA block rewrite pass on 131
2025-01-31 15:31:36,598 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89ebbf9b70>
2025-01-31 15:31:36,598 - DEBUG - on stmt: $64compare_op.2 = x1 <= threshold
2025-01-31 15:31:36,598 - DEBUG - on stmt: bool66 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,598 - DEBUG - on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,598 - DEBUG - on stmt: branch $66pred, 153, 165
2025-01-31 15:31:36,598 - DEBUG - ==== SSA block rewrite pass on 153
2025-01-31 15:31:36,598 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89ebbf9b70>
2025-01-31 15:31:36,598 - DEBUG - on stmt: jump 159
2025-01-31 15:31:36,598 - DEBUG - ==== SSA block rewrite pass on 161
2025-01-31 15:31:36,598 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89ebbf9b70>
2025-01-31 15:31:36,598 - DEBUG - on stmt: jump 165
2025-01-31 15:31:36,598 - DEBUG - ==== SSA block rewrite pass on 159
2025-01-31 15:31:36,598 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89ebbf9b70>
2025-01-31 15:31:36,598 - DEBUG - on stmt: x1 = const(int, 0)
2025-01-31 15:31:36,598 - DEBUG - on stmt: jump 165
2025-01-31 15:31:36,598 - DEBUG - ==== SSA block rewrite pass on 165
2025-01-31 15:31:36,598 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89ebbf9b70>
2025-01-31 15:31:36,598 - DEBUG - on stmt: bool80 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,598 - DEBUG - on stmt: $80pred = call bool80(zero_pos, func=bool80, args=(Var(zero_pos, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,598 - DEBUG - on stmt: branch $80pred, 169, 173
2025-01-31 15:31:36,598 - DEBUG - ==== SSA block rewrite pass on 169
2025-01-31 15:31:36,598 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89ebbf9b70>
2025-01-31 15:31:36,599 - DEBUG - on stmt: $82load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,599 - DEBUG - on stmt: $84load_method.1 = getattr(value=$82load_global.0, attr=signbit)
2025-01-31 15:31:36,599 - DEBUG - on stmt: $88call_method.3 = call $84load_method.1(x0, func=$84load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,599 - DEBUG - on stmt: $90load_global.4 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,599 - DEBUG - on stmt: $92load_method.5 = getattr(value=$90load_global.4, attr=signbit)
2025-01-31 15:31:36,599 - DEBUG - on stmt: $96call_method.7 = call $92load_method.5(x1, func=$92load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,599 - DEBUG - on stmt: $98compare_op.8 = $88call_method.3 != $96call_method.7
2025-01-31 15:31:36,599 - DEBUG - on stmt: $100return_value.9 = cast(value=$98compare_op.8)
2025-01-31 15:31:36,599 - DEBUG - on stmt: out0[index00] = $100return_value.9
2025-01-31 15:31:36,599 - DEBUG - on stmt: jump 193
2025-01-31 15:31:36,599 - DEBUG - ==== SSA block rewrite pass on 173
2025-01-31 15:31:36,599 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89ebbf9b70>
2025-01-31 15:31:36,599 - DEBUG - on stmt: $102load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,599 - DEBUG - on stmt: $104load_method.1 = getattr(value=$102load_global.0, attr=sign)
2025-01-31 15:31:36,599 - DEBUG - on stmt: $108call_method.3 = call $104load_method.1(x0, func=$104load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,599 - DEBUG - on stmt: $110load_global.4 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,599 - DEBUG - on stmt: $112load_method.5 = getattr(value=$110load_global.4, attr=sign)
2025-01-31 15:31:36,599 - DEBUG - on stmt: $116call_method.7 = call $112load_method.5(x1, func=$112load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,599 - DEBUG - on stmt: $118compare_op.8 = $108call_method.3 != $116call_method.7
2025-01-31 15:31:36,599 - DEBUG - on stmt: $120return_value.9 = cast(value=$118compare_op.8)
2025-01-31 15:31:36,599 - DEBUG - on stmt: out0[index00] = $120return_value.9
2025-01-31 15:31:36,599 - DEBUG - on stmt: jump 193
2025-01-31 15:31:36,599 - DEBUG - ==== SSA block rewrite pass on 193
2025-01-31 15:31:36,599 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89ebbf9b70>
2025-01-31 15:31:36,599 - DEBUG - on stmt: jump 80
2025-01-31 15:31:36,599 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {90: [<numba.core.ir.Assign object at 0x7c89ebbfa110>],
             121: [<numba.core.ir.Assign object at 0x7c89ebbfa650>]})
2025-01-31 15:31:36,600 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-31 15:31:36,600 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89ebbfab60>
2025-01-31 15:31:36,600 - DEBUG - on stmt: x = arg(0, name=x)
2025-01-31 15:31:36,600 - DEBUG - on stmt: threshold = arg(1, name=threshold)
2025-01-31 15:31:36,600 - DEBUG - on stmt: zero_pos = arg(2, name=zero_pos)
2025-01-31 15:31:36,600 - DEBUG - on stmt: full_shape0 = getattr(value=x, attr=shape)
2025-01-31 15:31:36,600 - DEBUG - on stmt: $8load_global.2.1 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,600 - DEBUG - on stmt: $10load_attr.3.1 = getattr(value=$8load_global.2.1, attr=empty)
2025-01-31 15:31:36,600 - DEBUG - on stmt: $14load_global.5.1 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,600 - DEBUG - on stmt: $16load_attr.6.1 = getattr(value=$14load_global.5.1, attr=bool_)
2025-01-31 15:31:36,600 - DEBUG - on stmt: out0 = call $10load_attr.3.1(full_shape0, func=$10load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,600 - DEBUG - on stmt: $const24.9.1 = const(int, 0)
2025-01-31 15:31:36,600 - DEBUG - on stmt: $const28.11.1 = const(NoneType, None)
2025-01-31 15:31:36,600 - DEBUG - on stmt: $const30.12.1 = const(int, 1)
2025-01-31 15:31:36,600 - DEBUG - on stmt: $32build_slice.13.1 = global(slice: <class 'slice'>)
2025-01-31 15:31:36,600 - DEBUG - on stmt: $32build_slice.14.1 = call $32build_slice.13.1($const28.11.1, $const30.12.1, func=$32build_slice.13.1, args=(Var($const28.11.1, <string>:4), Var($const30.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,600 - DEBUG - on stmt: out0[$32build_slice.14.1] = $const24.9.1
2025-01-31 15:31:36,600 - DEBUG - on stmt: $const36.15.1 = const(int, 0)
2025-01-31 15:31:36,600 - DEBUG - on stmt: $const40.17.1 = const(int, 0)
2025-01-31 15:31:36,600 - DEBUG - on stmt: $const42.18.1 = const(NoneType, None)
2025-01-31 15:31:36,600 - DEBUG - on stmt: $44build_slice.19.1 = global(slice: <class 'slice'>)
2025-01-31 15:31:36,600 - DEBUG - on stmt: $44build_slice.20.1 = call $44build_slice.19.1($const40.17.1, $const42.18.1, func=$44build_slice.19.1, args=(Var($const40.17.1, <string>:5), Var($const42.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,600 - DEBUG - on stmt: out0[$44build_slice.20.1] = $const36.15.1
2025-01-31 15:31:36,600 - DEBUG - on stmt: $48load_global.21.1 = global(range: <class 'range'>)
2025-01-31 15:31:36,600 - DEBUG - on stmt: $50load_global.22.1 = global(min: <built-in function min>)
2025-01-31 15:31:36,600 - DEBUG - on stmt: $const52.23.1 = const(int, 0)
2025-01-31 15:31:36,600 - DEBUG - on stmt: $const54.24.1 = const(int, -1)
2025-01-31 15:31:36,600 - DEBUG - on stmt: $56call_function.25.1 = call $50load_global.22.1($const52.23.1, $const54.24.1, func=$50load_global.22.1, args=[Var($const52.23.1, <string>:6), Var($const54.24.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,601 - DEBUG - on stmt: $58unary_negative.26.1 = unary(fn=<built-in function neg>, value=$56call_function.25.1)
2025-01-31 15:31:36,601 - DEBUG - on stmt: $const62.28.1 = const(int, 0)
2025-01-31 15:31:36,601 - DEBUG - on stmt: $64binary_subscr.29.1 = getitem(value=full_shape0, index=$const62.28.1, fn=<built-in function getitem>)
2025-01-31 15:31:36,601 - DEBUG - on stmt: $66load_global.30.1 = global(max: <built-in function max>)
2025-01-31 15:31:36,601 - DEBUG - on stmt: $const68.31.1 = const(int, 0)
2025-01-31 15:31:36,601 - DEBUG - on stmt: $const70.32.1 = const(int, 0)
2025-01-31 15:31:36,601 - DEBUG - on stmt: $72call_function.33.1 = call $66load_global.30.1($const68.31.1, $const70.32.1, func=$66load_global.30.1, args=[Var($const68.31.1, <string>:6), Var($const70.32.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,601 - DEBUG - on stmt: $74binary_subtract.34.1 = $64binary_subscr.29.1 - $72call_function.33.1
2025-01-31 15:31:36,601 - DEBUG - on stmt: $76call_function.35.1 = call $48load_global.21.1($58unary_negative.26.1, $74binary_subtract.34.1, func=$48load_global.21.1, args=[Var($58unary_negative.26.1, <string>:6), Var($74binary_subtract.34.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,601 - DEBUG - on stmt: $78get_iter.36.1 = getiter(value=$76call_function.35.1)
2025-01-31 15:31:36,601 - DEBUG - on stmt: $phi80.0.1 = $78get_iter.36.1
2025-01-31 15:31:36,601 - DEBUG - on stmt: jump 80
2025-01-31 15:31:36,601 - DEBUG - ==== SSA block rewrite pass on 80
2025-01-31 15:31:36,601 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89ebbfab60>
2025-01-31 15:31:36,601 - DEBUG - on stmt: $80for_iter.1.1 = iternext(value=$phi80.0.1)
2025-01-31 15:31:36,601 - DEBUG - on stmt: $80for_iter.2.1 = pair_first(value=$80for_iter.1.1)
2025-01-31 15:31:36,601 - DEBUG - on stmt: $80for_iter.3.1 = pair_second(value=$80for_iter.1.1)
2025-01-31 15:31:36,601 - DEBUG - on stmt: $phi82.1.1 = $80for_iter.2.1
2025-01-31 15:31:36,601 - DEBUG - on stmt: branch $80for_iter.3.1, 82, 194
2025-01-31 15:31:36,601 - DEBUG - ==== SSA block rewrite pass on 82
2025-01-31 15:31:36,601 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89ebbfab60>
2025-01-31 15:31:36,601 - DEBUG - on stmt: index00 = $phi82.1.1
2025-01-31 15:31:36,601 - DEBUG - on stmt: jump 90
2025-01-31 15:31:36,601 - DEBUG - ==== SSA block rewrite pass on 194
2025-01-31 15:31:36,601 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89ebbfab60>
2025-01-31 15:31:36,601 - DEBUG - on stmt: $92return_value.1.1 = cast(value=out0)
2025-01-31 15:31:36,601 - DEBUG - on stmt: return $92return_value.1.1
2025-01-31 15:31:36,602 - DEBUG - ==== SSA block rewrite pass on 90
2025-01-31 15:31:36,602 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89ebbfab60>
2025-01-31 15:31:36,602 - DEBUG - on stmt: $const4.1 = const(int, 0)
2025-01-31 15:31:36,602 - DEBUG - on stmt: stencil_index = $const4.1 + index00
2025-01-31 15:31:36,602 - DEBUG - on stmt: x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-01-31 15:31:36,602 - DEBUG - on stmt: $12unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2025-01-31 15:31:36,602 - DEBUG - on stmt: $20compare_op.7 = $12unary_negative.4 <= x0
2025-01-31 15:31:36,602 - DEBUG - find_def var='x0' stmt=$20compare_op.7 = $12unary_negative.4 <= x0
2025-01-31 15:31:36,602 - DEBUG - on stmt: bool22 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,602 - DEBUG - on stmt: $22pred = call bool22($20compare_op.7, func=bool22, args=(Var($20compare_op.7, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,602 - DEBUG - on stmt: $phi24.0 = x0
2025-01-31 15:31:36,602 - DEBUG - find_def var='x0' stmt=$phi24.0 = x0
2025-01-31 15:31:36,602 - DEBUG - on stmt: branch $22pred, 91, 123
2025-01-31 15:31:36,602 - DEBUG - ==== SSA block rewrite pass on 91
2025-01-31 15:31:36,602 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89ebbfab60>
2025-01-31 15:31:36,602 - DEBUG - on stmt: $26compare_op.2 = x0 <= threshold
2025-01-31 15:31:36,602 - DEBUG - find_def var='x0' stmt=$26compare_op.2 = x0 <= threshold
2025-01-31 15:31:36,602 - DEBUG - find_def_from_top label 91
2025-01-31 15:31:36,602 - DEBUG - idom 90 from label 91
2025-01-31 15:31:36,602 - DEBUG - find_def_from_bottom label 90
2025-01-31 15:31:36,602 - DEBUG - on stmt: bool28 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,602 - DEBUG - on stmt: $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,602 - DEBUG - on stmt: branch $28pred, 115, 127
2025-01-31 15:31:36,602 - DEBUG - ==== SSA block rewrite pass on 115
2025-01-31 15:31:36,602 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89ebbfab60>
2025-01-31 15:31:36,602 - DEBUG - on stmt: jump 121
2025-01-31 15:31:36,602 - DEBUG - ==== SSA block rewrite pass on 123
2025-01-31 15:31:36,602 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89ebbfab60>
2025-01-31 15:31:36,603 - DEBUG - on stmt: jump 127
2025-01-31 15:31:36,603 - DEBUG - ==== SSA block rewrite pass on 121
2025-01-31 15:31:36,603 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89ebbfab60>
2025-01-31 15:31:36,603 - DEBUG - on stmt: x0.1 = const(int, 0)
2025-01-31 15:31:36,603 - DEBUG - on stmt: jump 127
2025-01-31 15:31:36,603 - DEBUG - ==== SSA block rewrite pass on 127
2025-01-31 15:31:36,603 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89ebbfab60>
2025-01-31 15:31:36,603 - DEBUG - on stmt: $const42.1 = const(int, -1)
2025-01-31 15:31:36,603 - DEBUG - on stmt: stencil_index.1 = $const42.1 + index00
2025-01-31 15:31:36,603 - DEBUG - on stmt: x1 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2025-01-31 15:31:36,603 - DEBUG - on stmt: $50unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2025-01-31 15:31:36,603 - DEBUG - on stmt: $58compare_op.7 = $50unary_negative.4 <= x1
2025-01-31 15:31:36,603 - DEBUG - on stmt: bool60 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,603 - DEBUG - on stmt: $60pred = call bool60($58compare_op.7, func=bool60, args=(Var($58compare_op.7, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,603 - DEBUG - on stmt: $phi62.0 = x1
2025-01-31 15:31:36,603 - DEBUG - on stmt: branch $60pred, 131, 161
2025-01-31 15:31:36,603 - DEBUG - ==== SSA block rewrite pass on 131
2025-01-31 15:31:36,603 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89ebbfab60>
2025-01-31 15:31:36,603 - DEBUG - on stmt: $64compare_op.2 = x1 <= threshold
2025-01-31 15:31:36,603 - DEBUG - on stmt: bool66 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,603 - DEBUG - on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,603 - DEBUG - on stmt: branch $66pred, 153, 165
2025-01-31 15:31:36,603 - DEBUG - ==== SSA block rewrite pass on 153
2025-01-31 15:31:36,603 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89ebbfab60>
2025-01-31 15:31:36,603 - DEBUG - on stmt: jump 159
2025-01-31 15:31:36,603 - DEBUG - ==== SSA block rewrite pass on 161
2025-01-31 15:31:36,603 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89ebbfab60>
2025-01-31 15:31:36,603 - DEBUG - on stmt: jump 165
2025-01-31 15:31:36,604 - DEBUG - ==== SSA block rewrite pass on 159
2025-01-31 15:31:36,604 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89ebbfab60>
2025-01-31 15:31:36,604 - DEBUG - on stmt: x1 = const(int, 0)
2025-01-31 15:31:36,604 - DEBUG - on stmt: jump 165
2025-01-31 15:31:36,604 - DEBUG - ==== SSA block rewrite pass on 165
2025-01-31 15:31:36,604 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89ebbfab60>
2025-01-31 15:31:36,604 - DEBUG - on stmt: bool80 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,604 - DEBUG - on stmt: $80pred = call bool80(zero_pos, func=bool80, args=(Var(zero_pos, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,604 - DEBUG - on stmt: branch $80pred, 169, 173
2025-01-31 15:31:36,604 - DEBUG - ==== SSA block rewrite pass on 169
2025-01-31 15:31:36,604 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89ebbfab60>
2025-01-31 15:31:36,604 - DEBUG - on stmt: $82load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,604 - DEBUG - on stmt: $84load_method.1 = getattr(value=$82load_global.0, attr=signbit)
2025-01-31 15:31:36,604 - DEBUG - on stmt: $88call_method.3 = call $84load_method.1(x0, func=$84load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,604 - DEBUG - find_def var='x0' stmt=$88call_method.3 = call $84load_method.1(x0, func=$84load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,604 - DEBUG - find_def_from_top label 169
2025-01-31 15:31:36,604 - DEBUG - idom 165 from label 169
2025-01-31 15:31:36,604 - DEBUG - find_def_from_bottom label 165
2025-01-31 15:31:36,604 - DEBUG - find_def_from_top label 165
2025-01-31 15:31:36,604 - DEBUG - idom 127 from label 165
2025-01-31 15:31:36,604 - DEBUG - find_def_from_bottom label 127
2025-01-31 15:31:36,604 - DEBUG - find_def_from_top label 127
2025-01-31 15:31:36,604 - DEBUG - insert phi node x0.2 = phi(incoming_values=[], incoming_blocks=[]) at 127
2025-01-31 15:31:36,604 - DEBUG - find_def_from_bottom label 123
2025-01-31 15:31:36,604 - DEBUG - find_def_from_top label 123
2025-01-31 15:31:36,604 - DEBUG - idom 90 from label 123
2025-01-31 15:31:36,604 - DEBUG - find_def_from_bottom label 90
2025-01-31 15:31:36,604 - DEBUG - incoming_def x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-01-31 15:31:36,604 - DEBUG - find_def_from_bottom label 121
2025-01-31 15:31:36,604 - DEBUG - incoming_def x0.1 = const(int, 0)
2025-01-31 15:31:36,605 - DEBUG - find_def_from_bottom label 91
2025-01-31 15:31:36,605 - DEBUG - find_def_from_top label 91
2025-01-31 15:31:36,605 - DEBUG - idom 90 from label 91
2025-01-31 15:31:36,605 - DEBUG - find_def_from_bottom label 90
2025-01-31 15:31:36,605 - DEBUG - incoming_def x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-01-31 15:31:36,605 - DEBUG - replaced with: $88call_method.3 = call $84load_method.1(x0.2, func=$84load_method.1, args=[Var(x0.2, audio.py:1153)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,605 - DEBUG - on stmt: $90load_global.4 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,605 - DEBUG - on stmt: $92load_method.5 = getattr(value=$90load_global.4, attr=signbit)
2025-01-31 15:31:36,605 - DEBUG - on stmt: $96call_method.7 = call $92load_method.5(x1, func=$92load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,605 - DEBUG - on stmt: $98compare_op.8 = $88call_method.3 != $96call_method.7
2025-01-31 15:31:36,605 - DEBUG - on stmt: $100return_value.9 = cast(value=$98compare_op.8)
2025-01-31 15:31:36,605 - DEBUG - on stmt: out0[index00] = $100return_value.9
2025-01-31 15:31:36,605 - DEBUG - on stmt: jump 193
2025-01-31 15:31:36,605 - DEBUG - ==== SSA block rewrite pass on 173
2025-01-31 15:31:36,605 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89ebbfab60>
2025-01-31 15:31:36,605 - DEBUG - on stmt: $102load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,605 - DEBUG - on stmt: $104load_method.1 = getattr(value=$102load_global.0, attr=sign)
2025-01-31 15:31:36,605 - DEBUG - on stmt: $108call_method.3 = call $104load_method.1(x0, func=$104load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,605 - DEBUG - find_def var='x0' stmt=$108call_method.3 = call $104load_method.1(x0, func=$104load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,605 - DEBUG - find_def_from_top label 173
2025-01-31 15:31:36,605 - DEBUG - idom 165 from label 173
2025-01-31 15:31:36,605 - DEBUG - find_def_from_bottom label 165
2025-01-31 15:31:36,605 - DEBUG - find_def_from_top label 165
2025-01-31 15:31:36,605 - DEBUG - idom 127 from label 165
2025-01-31 15:31:36,605 - DEBUG - find_def_from_bottom label 127
2025-01-31 15:31:36,605 - DEBUG - replaced with: $108call_method.3 = call $104load_method.1(x0.2, func=$104load_method.1, args=[Var(x0.2, audio.py:1153)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,606 - DEBUG - on stmt: $110load_global.4 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,606 - DEBUG - on stmt: $112load_method.5 = getattr(value=$110load_global.4, attr=sign)
2025-01-31 15:31:36,606 - DEBUG - on stmt: $116call_method.7 = call $112load_method.5(x1, func=$112load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,683 - DEBUG - on stmt: $118compare_op.8 = $108call_method.3 != $116call_method.7
2025-01-31 15:31:36,684 - DEBUG - on stmt: $120return_value.9 = cast(value=$118compare_op.8)
2025-01-31 15:31:36,684 - DEBUG - on stmt: out0[index00] = $120return_value.9
2025-01-31 15:31:36,684 - DEBUG - on stmt: jump 193
2025-01-31 15:31:36,684 - DEBUG - ==== SSA block rewrite pass on 193
2025-01-31 15:31:36,685 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89ebbfab60>
2025-01-31 15:31:36,685 - DEBUG - on stmt: jump 80
2025-01-31 15:31:36,685 - DEBUG - Fix SSA violator on var x1
2025-01-31 15:31:36,685 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-31 15:31:36,685 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89ebbfa050>
2025-01-31 15:31:36,686 - DEBUG - on stmt: x = arg(0, name=x)
2025-01-31 15:31:36,686 - DEBUG - on stmt: threshold = arg(1, name=threshold)
2025-01-31 15:31:36,686 - DEBUG - on stmt: zero_pos = arg(2, name=zero_pos)
2025-01-31 15:31:36,686 - DEBUG - on stmt: full_shape0 = getattr(value=x, attr=shape)
2025-01-31 15:31:36,686 - DEBUG - on stmt: $8load_global.2.1 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,686 - DEBUG - on stmt: $10load_attr.3.1 = getattr(value=$8load_global.2.1, attr=empty)
2025-01-31 15:31:36,687 - DEBUG - on stmt: $14load_global.5.1 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,687 - DEBUG - on stmt: $16load_attr.6.1 = getattr(value=$14load_global.5.1, attr=bool_)
2025-01-31 15:31:36,687 - DEBUG - on stmt: out0 = call $10load_attr.3.1(full_shape0, func=$10load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,687 - DEBUG - on stmt: $const24.9.1 = const(int, 0)
2025-01-31 15:31:36,688 - DEBUG - on stmt: $const28.11.1 = const(NoneType, None)
2025-01-31 15:31:36,688 - DEBUG - on stmt: $const30.12.1 = const(int, 1)
2025-01-31 15:31:36,688 - DEBUG - on stmt: $32build_slice.13.1 = global(slice: <class 'slice'>)
2025-01-31 15:31:36,688 - DEBUG - on stmt: $32build_slice.14.1 = call $32build_slice.13.1($const28.11.1, $const30.12.1, func=$32build_slice.13.1, args=(Var($const28.11.1, <string>:4), Var($const30.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,688 - DEBUG - on stmt: out0[$32build_slice.14.1] = $const24.9.1
2025-01-31 15:31:36,689 - DEBUG - on stmt: $const36.15.1 = const(int, 0)
2025-01-31 15:31:36,689 - DEBUG - on stmt: $const40.17.1 = const(int, 0)
2025-01-31 15:31:36,689 - DEBUG - on stmt: $const42.18.1 = const(NoneType, None)
2025-01-31 15:31:36,689 - DEBUG - on stmt: $44build_slice.19.1 = global(slice: <class 'slice'>)
2025-01-31 15:31:36,689 - DEBUG - on stmt: $44build_slice.20.1 = call $44build_slice.19.1($const40.17.1, $const42.18.1, func=$44build_slice.19.1, args=(Var($const40.17.1, <string>:5), Var($const42.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,689 - DEBUG - on stmt: out0[$44build_slice.20.1] = $const36.15.1
2025-01-31 15:31:36,690 - DEBUG - on stmt: $48load_global.21.1 = global(range: <class 'range'>)
2025-01-31 15:31:36,690 - DEBUG - on stmt: $50load_global.22.1 = global(min: <built-in function min>)
2025-01-31 15:31:36,690 - DEBUG - on stmt: $const52.23.1 = const(int, 0)
2025-01-31 15:31:36,690 - DEBUG - on stmt: $const54.24.1 = const(int, -1)
2025-01-31 15:31:36,690 - DEBUG - on stmt: $56call_function.25.1 = call $50load_global.22.1($const52.23.1, $const54.24.1, func=$50load_global.22.1, args=[Var($const52.23.1, <string>:6), Var($const54.24.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,691 - DEBUG - on stmt: $58unary_negative.26.1 = unary(fn=<built-in function neg>, value=$56call_function.25.1)
2025-01-31 15:31:36,691 - DEBUG - on stmt: $const62.28.1 = const(int, 0)
2025-01-31 15:31:36,691 - DEBUG - on stmt: $64binary_subscr.29.1 = getitem(value=full_shape0, index=$const62.28.1, fn=<built-in function getitem>)
2025-01-31 15:31:36,691 - DEBUG - on stmt: $66load_global.30.1 = global(max: <built-in function max>)
2025-01-31 15:31:36,691 - DEBUG - on stmt: $const68.31.1 = const(int, 0)
2025-01-31 15:31:36,692 - DEBUG - on stmt: $const70.32.1 = const(int, 0)
2025-01-31 15:31:36,692 - DEBUG - on stmt: $72call_function.33.1 = call $66load_global.30.1($const68.31.1, $const70.32.1, func=$66load_global.30.1, args=[Var($const68.31.1, <string>:6), Var($const70.32.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,692 - DEBUG - on stmt: $74binary_subtract.34.1 = $64binary_subscr.29.1 - $72call_function.33.1
2025-01-31 15:31:36,692 - DEBUG - on stmt: $76call_function.35.1 = call $48load_global.21.1($58unary_negative.26.1, $74binary_subtract.34.1, func=$48load_global.21.1, args=[Var($58unary_negative.26.1, <string>:6), Var($74binary_subtract.34.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,693 - DEBUG - on stmt: $78get_iter.36.1 = getiter(value=$76call_function.35.1)
2025-01-31 15:31:36,693 - DEBUG - on stmt: $phi80.0.1 = $78get_iter.36.1
2025-01-31 15:31:36,693 - DEBUG - on stmt: jump 80
2025-01-31 15:31:36,693 - DEBUG - ==== SSA block rewrite pass on 80
2025-01-31 15:31:36,693 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89ebbfa050>
2025-01-31 15:31:36,693 - DEBUG - on stmt: $80for_iter.1.1 = iternext(value=$phi80.0.1)
2025-01-31 15:31:36,694 - DEBUG - on stmt: $80for_iter.2.1 = pair_first(value=$80for_iter.1.1)
2025-01-31 15:31:36,694 - DEBUG - on stmt: $80for_iter.3.1 = pair_second(value=$80for_iter.1.1)
2025-01-31 15:31:36,694 - DEBUG - on stmt: $phi82.1.1 = $80for_iter.2.1
2025-01-31 15:31:36,694 - DEBUG - on stmt: branch $80for_iter.3.1, 82, 194
2025-01-31 15:31:36,694 - DEBUG - ==== SSA block rewrite pass on 82
2025-01-31 15:31:36,694 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89ebbfa050>
2025-01-31 15:31:36,695 - DEBUG - on stmt: index00 = $phi82.1.1
2025-01-31 15:31:36,695 - DEBUG - on stmt: jump 90
2025-01-31 15:31:36,695 - DEBUG - ==== SSA block rewrite pass on 194
2025-01-31 15:31:36,695 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89ebbfa050>
2025-01-31 15:31:36,695 - DEBUG - on stmt: $92return_value.1.1 = cast(value=out0)
2025-01-31 15:31:36,695 - DEBUG - on stmt: return $92return_value.1.1
2025-01-31 15:31:36,696 - DEBUG - ==== SSA block rewrite pass on 90
2025-01-31 15:31:36,696 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89ebbfa050>
2025-01-31 15:31:36,696 - DEBUG - on stmt: $const4.1 = const(int, 0)
2025-01-31 15:31:36,696 - DEBUG - on stmt: stencil_index = $const4.1 + index00
2025-01-31 15:31:36,696 - DEBUG - on stmt: x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-01-31 15:31:36,696 - DEBUG - on stmt: $12unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2025-01-31 15:31:36,697 - DEBUG - on stmt: $20compare_op.7 = $12unary_negative.4 <= x0
2025-01-31 15:31:36,697 - DEBUG - on stmt: bool22 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,697 - DEBUG - on stmt: $22pred = call bool22($20compare_op.7, func=bool22, args=(Var($20compare_op.7, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,697 - DEBUG - on stmt: $phi24.0 = x0
2025-01-31 15:31:36,698 - DEBUG - on stmt: branch $22pred, 91, 123
2025-01-31 15:31:36,698 - DEBUG - ==== SSA block rewrite pass on 91
2025-01-31 15:31:36,698 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89ebbfa050>
2025-01-31 15:31:36,698 - DEBUG - on stmt: $26compare_op.2 = x0 <= threshold
2025-01-31 15:31:36,698 - DEBUG - on stmt: bool28 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,698 - DEBUG - on stmt: $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,699 - DEBUG - on stmt: branch $28pred, 115, 127
2025-01-31 15:31:36,699 - DEBUG - ==== SSA block rewrite pass on 115
2025-01-31 15:31:36,699 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89ebbfa050>
2025-01-31 15:31:36,699 - DEBUG - on stmt: jump 121
2025-01-31 15:31:36,699 - DEBUG - ==== SSA block rewrite pass on 123
2025-01-31 15:31:36,699 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89ebbfa050>
2025-01-31 15:31:36,700 - DEBUG - on stmt: jump 127
2025-01-31 15:31:36,700 - DEBUG - ==== SSA block rewrite pass on 121
2025-01-31 15:31:36,700 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89ebbfa050>
2025-01-31 15:31:36,700 - DEBUG - on stmt: x0.1 = const(int, 0)
2025-01-31 15:31:36,700 - DEBUG - on stmt: jump 127
2025-01-31 15:31:36,700 - DEBUG - ==== SSA block rewrite pass on 127
2025-01-31 15:31:36,701 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89ebbfa050>
2025-01-31 15:31:36,701 - DEBUG - on stmt: x0.2 = phi(incoming_values=[Var(x0, audio.py:1144), Var(x0.1, audio.py:1146), Var(x0, audio.py:1144)], incoming_blocks=[123, 121, 91])
2025-01-31 15:31:36,701 - DEBUG - on stmt: $const42.1 = const(int, -1)
2025-01-31 15:31:36,701 - DEBUG - on stmt: stencil_index.1 = $const42.1 + index00
2025-01-31 15:31:36,701 - DEBUG - on stmt: x1 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2025-01-31 15:31:36,702 - DEBUG - first assign: x1
2025-01-31 15:31:36,702 - DEBUG - replaced with: x1 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2025-01-31 15:31:36,702 - DEBUG - on stmt: $50unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2025-01-31 15:31:36,702 - DEBUG - on stmt: $58compare_op.7 = $50unary_negative.4 <= x1
2025-01-31 15:31:36,702 - DEBUG - on stmt: bool60 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,703 - DEBUG - on stmt: $60pred = call bool60($58compare_op.7, func=bool60, args=(Var($58compare_op.7, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,703 - DEBUG - on stmt: $phi62.0 = x1
2025-01-31 15:31:36,703 - DEBUG - on stmt: branch $60pred, 131, 161
2025-01-31 15:31:36,703 - DEBUG - ==== SSA block rewrite pass on 131
2025-01-31 15:31:36,703 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89ebbfa050>
2025-01-31 15:31:36,703 - DEBUG - on stmt: $64compare_op.2 = x1 <= threshold
2025-01-31 15:31:36,704 - DEBUG - on stmt: bool66 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,704 - DEBUG - on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,704 - DEBUG - on stmt: branch $66pred, 153, 165
2025-01-31 15:31:36,704 - DEBUG - ==== SSA block rewrite pass on 153
2025-01-31 15:31:36,704 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89ebbfa050>
2025-01-31 15:31:36,705 - DEBUG - on stmt: jump 159
2025-01-31 15:31:36,705 - DEBUG - ==== SSA block rewrite pass on 161
2025-01-31 15:31:36,705 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89ebbfa050>
2025-01-31 15:31:36,705 - DEBUG - on stmt: jump 165
2025-01-31 15:31:36,705 - DEBUG - ==== SSA block rewrite pass on 159
2025-01-31 15:31:36,705 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89ebbfa050>
2025-01-31 15:31:36,706 - DEBUG - on stmt: x1 = const(int, 0)
2025-01-31 15:31:36,706 - DEBUG - replaced with: x1.1 = const(int, 0)
2025-01-31 15:31:36,706 - DEBUG - on stmt: jump 165
2025-01-31 15:31:36,706 - DEBUG - ==== SSA block rewrite pass on 165
2025-01-31 15:31:36,706 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89ebbfa050>
2025-01-31 15:31:36,706 - DEBUG - on stmt: bool80 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,707 - DEBUG - on stmt: $80pred = call bool80(zero_pos, func=bool80, args=(Var(zero_pos, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,707 - DEBUG - on stmt: branch $80pred, 169, 173
2025-01-31 15:31:36,707 - DEBUG - ==== SSA block rewrite pass on 169
2025-01-31 15:31:36,707 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89ebbfa050>
2025-01-31 15:31:36,707 - DEBUG - on stmt: $82load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,708 - DEBUG - on stmt: $84load_method.1 = getattr(value=$82load_global.0, attr=signbit)
2025-01-31 15:31:36,708 - DEBUG - on stmt: $88call_method.3 = call $84load_method.1(x0.2, func=$84load_method.1, args=[Var(x0.2, audio.py:1153)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,708 - DEBUG - on stmt: $90load_global.4 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,708 - DEBUG - on stmt: $92load_method.5 = getattr(value=$90load_global.4, attr=signbit)
2025-01-31 15:31:36,708 - DEBUG - on stmt: $96call_method.7 = call $92load_method.5(x1, func=$92load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,709 - DEBUG - on stmt: $98compare_op.8 = $88call_method.3 != $96call_method.7
2025-01-31 15:31:36,709 - DEBUG - on stmt: $100return_value.9 = cast(value=$98compare_op.8)
2025-01-31 15:31:36,709 - DEBUG - on stmt: out0[index00] = $100return_value.9
2025-01-31 15:31:36,709 - DEBUG - on stmt: jump 193
2025-01-31 15:31:36,709 - DEBUG - ==== SSA block rewrite pass on 173
2025-01-31 15:31:36,710 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89ebbfa050>
2025-01-31 15:31:36,710 - DEBUG - on stmt: $102load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,710 - DEBUG - on stmt: $104load_method.1 = getattr(value=$102load_global.0, attr=sign)
2025-01-31 15:31:36,710 - DEBUG - on stmt: $108call_method.3 = call $104load_method.1(x0.2, func=$104load_method.1, args=[Var(x0.2, audio.py:1153)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,710 - DEBUG - on stmt: $110load_global.4 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,711 - DEBUG - on stmt: $112load_method.5 = getattr(value=$110load_global.4, attr=sign)
2025-01-31 15:31:36,711 - DEBUG - on stmt: $116call_method.7 = call $112load_method.5(x1, func=$112load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,711 - DEBUG - on stmt: $118compare_op.8 = $108call_method.3 != $116call_method.7
2025-01-31 15:31:36,711 - DEBUG - on stmt: $120return_value.9 = cast(value=$118compare_op.8)
2025-01-31 15:31:36,712 - DEBUG - on stmt: out0[index00] = $120return_value.9
2025-01-31 15:31:36,712 - DEBUG - on stmt: jump 193
2025-01-31 15:31:36,712 - DEBUG - ==== SSA block rewrite pass on 193
2025-01-31 15:31:36,712 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89ebbfa050>
2025-01-31 15:31:36,712 - DEBUG - on stmt: jump 80
2025-01-31 15:31:36,713 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {127: [<numba.core.ir.Assign object at 0x7c89ebbfb520>],
             159: [<numba.core.ir.Assign object at 0x7c89ebbf99f0>]})
2025-01-31 15:31:36,713 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-31 15:31:36,713 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89ebbfa8c0>
2025-01-31 15:31:36,713 - DEBUG - on stmt: x = arg(0, name=x)
2025-01-31 15:31:36,713 - DEBUG - on stmt: threshold = arg(1, name=threshold)
2025-01-31 15:31:36,714 - DEBUG - on stmt: zero_pos = arg(2, name=zero_pos)
2025-01-31 15:31:36,714 - DEBUG - on stmt: full_shape0 = getattr(value=x, attr=shape)
2025-01-31 15:31:36,714 - DEBUG - on stmt: $8load_global.2.1 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,714 - DEBUG - on stmt: $10load_attr.3.1 = getattr(value=$8load_global.2.1, attr=empty)
2025-01-31 15:31:36,714 - DEBUG - on stmt: $14load_global.5.1 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,715 - DEBUG - on stmt: $16load_attr.6.1 = getattr(value=$14load_global.5.1, attr=bool_)
2025-01-31 15:31:36,715 - DEBUG - on stmt: out0 = call $10load_attr.3.1(full_shape0, func=$10load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,715 - DEBUG - on stmt: $const24.9.1 = const(int, 0)
2025-01-31 15:31:36,715 - DEBUG - on stmt: $const28.11.1 = const(NoneType, None)
2025-01-31 15:31:36,715 - DEBUG - on stmt: $const30.12.1 = const(int, 1)
2025-01-31 15:31:36,716 - DEBUG - on stmt: $32build_slice.13.1 = global(slice: <class 'slice'>)
2025-01-31 15:31:36,716 - DEBUG - on stmt: $32build_slice.14.1 = call $32build_slice.13.1($const28.11.1, $const30.12.1, func=$32build_slice.13.1, args=(Var($const28.11.1, <string>:4), Var($const30.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,716 - DEBUG - on stmt: out0[$32build_slice.14.1] = $const24.9.1
2025-01-31 15:31:36,716 - DEBUG - on stmt: $const36.15.1 = const(int, 0)
2025-01-31 15:31:36,716 - DEBUG - on stmt: $const40.17.1 = const(int, 0)
2025-01-31 15:31:36,717 - DEBUG - on stmt: $const42.18.1 = const(NoneType, None)
2025-01-31 15:31:36,717 - DEBUG - on stmt: $44build_slice.19.1 = global(slice: <class 'slice'>)
2025-01-31 15:31:36,717 - DEBUG - on stmt: $44build_slice.20.1 = call $44build_slice.19.1($const40.17.1, $const42.18.1, func=$44build_slice.19.1, args=(Var($const40.17.1, <string>:5), Var($const42.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,717 - DEBUG - on stmt: out0[$44build_slice.20.1] = $const36.15.1
2025-01-31 15:31:36,717 - DEBUG - on stmt: $48load_global.21.1 = global(range: <class 'range'>)
2025-01-31 15:31:36,717 - DEBUG - on stmt: $50load_global.22.1 = global(min: <built-in function min>)
2025-01-31 15:31:36,717 - DEBUG - on stmt: $const52.23.1 = const(int, 0)
2025-01-31 15:31:36,718 - DEBUG - on stmt: $const54.24.1 = const(int, -1)
2025-01-31 15:31:36,718 - DEBUG - on stmt: $56call_function.25.1 = call $50load_global.22.1($const52.23.1, $const54.24.1, func=$50load_global.22.1, args=[Var($const52.23.1, <string>:6), Var($const54.24.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,718 - DEBUG - on stmt: $58unary_negative.26.1 = unary(fn=<built-in function neg>, value=$56call_function.25.1)
2025-01-31 15:31:36,718 - DEBUG - on stmt: $const62.28.1 = const(int, 0)
2025-01-31 15:31:36,718 - DEBUG - on stmt: $64binary_subscr.29.1 = getitem(value=full_shape0, index=$const62.28.1, fn=<built-in function getitem>)
2025-01-31 15:31:36,718 - DEBUG - on stmt: $66load_global.30.1 = global(max: <built-in function max>)
2025-01-31 15:31:36,718 - DEBUG - on stmt: $const68.31.1 = const(int, 0)
2025-01-31 15:31:36,719 - DEBUG - on stmt: $const70.32.1 = const(int, 0)
2025-01-31 15:31:36,719 - DEBUG - on stmt: $72call_function.33.1 = call $66load_global.30.1($const68.31.1, $const70.32.1, func=$66load_global.30.1, args=[Var($const68.31.1, <string>:6), Var($const70.32.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,719 - DEBUG - on stmt: $74binary_subtract.34.1 = $64binary_subscr.29.1 - $72call_function.33.1
2025-01-31 15:31:36,719 - DEBUG - on stmt: $76call_function.35.1 = call $48load_global.21.1($58unary_negative.26.1, $74binary_subtract.34.1, func=$48load_global.21.1, args=[Var($58unary_negative.26.1, <string>:6), Var($74binary_subtract.34.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,719 - DEBUG - on stmt: $78get_iter.36.1 = getiter(value=$76call_function.35.1)
2025-01-31 15:31:36,719 - DEBUG - on stmt: $phi80.0.1 = $78get_iter.36.1
2025-01-31 15:31:36,720 - DEBUG - on stmt: jump 80
2025-01-31 15:31:36,720 - DEBUG - ==== SSA block rewrite pass on 80
2025-01-31 15:31:36,720 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89ebbfa8c0>
2025-01-31 15:31:36,720 - DEBUG - on stmt: $80for_iter.1.1 = iternext(value=$phi80.0.1)
2025-01-31 15:31:36,720 - DEBUG - on stmt: $80for_iter.2.1 = pair_first(value=$80for_iter.1.1)
2025-01-31 15:31:36,720 - DEBUG - on stmt: $80for_iter.3.1 = pair_second(value=$80for_iter.1.1)
2025-01-31 15:31:36,720 - DEBUG - on stmt: $phi82.1.1 = $80for_iter.2.1
2025-01-31 15:31:36,720 - DEBUG - on stmt: branch $80for_iter.3.1, 82, 194
2025-01-31 15:31:36,721 - DEBUG - ==== SSA block rewrite pass on 82
2025-01-31 15:31:36,721 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89ebbfa8c0>
2025-01-31 15:31:36,721 - DEBUG - on stmt: index00 = $phi82.1.1
2025-01-31 15:31:36,721 - DEBUG - on stmt: jump 90
2025-01-31 15:31:36,721 - DEBUG - ==== SSA block rewrite pass on 194
2025-01-31 15:31:36,721 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89ebbfa8c0>
2025-01-31 15:31:36,721 - DEBUG - on stmt: $92return_value.1.1 = cast(value=out0)
2025-01-31 15:31:36,721 - DEBUG - on stmt: return $92return_value.1.1
2025-01-31 15:31:36,722 - DEBUG - ==== SSA block rewrite pass on 90
2025-01-31 15:31:36,722 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89ebbfa8c0>
2025-01-31 15:31:36,722 - DEBUG - on stmt: $const4.1 = const(int, 0)
2025-01-31 15:31:36,722 - DEBUG - on stmt: stencil_index = $const4.1 + index00
2025-01-31 15:31:36,722 - DEBUG - on stmt: x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-01-31 15:31:36,722 - DEBUG - on stmt: $12unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2025-01-31 15:31:36,722 - DEBUG - on stmt: $20compare_op.7 = $12unary_negative.4 <= x0
2025-01-31 15:31:36,722 - DEBUG - on stmt: bool22 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,722 - DEBUG - on stmt: $22pred = call bool22($20compare_op.7, func=bool22, args=(Var($20compare_op.7, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,723 - DEBUG - on stmt: $phi24.0 = x0
2025-01-31 15:31:36,723 - DEBUG - on stmt: branch $22pred, 91, 123
2025-01-31 15:31:36,723 - DEBUG - ==== SSA block rewrite pass on 91
2025-01-31 15:31:36,723 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89ebbfa8c0>
2025-01-31 15:31:36,723 - DEBUG - on stmt: $26compare_op.2 = x0 <= threshold
2025-01-31 15:31:36,723 - DEBUG - on stmt: bool28 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,723 - DEBUG - on stmt: $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,723 - DEBUG - on stmt: branch $28pred, 115, 127
2025-01-31 15:31:36,723 - DEBUG - ==== SSA block rewrite pass on 115
2025-01-31 15:31:36,723 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89ebbfa8c0>
2025-01-31 15:31:36,724 - DEBUG - on stmt: jump 121
2025-01-31 15:31:36,724 - DEBUG - ==== SSA block rewrite pass on 123
2025-01-31 15:31:36,724 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89ebbfa8c0>
2025-01-31 15:31:36,724 - DEBUG - on stmt: jump 127
2025-01-31 15:31:36,724 - DEBUG - ==== SSA block rewrite pass on 121
2025-01-31 15:31:36,724 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89ebbfa8c0>
2025-01-31 15:31:36,724 - DEBUG - on stmt: x0.1 = const(int, 0)
2025-01-31 15:31:36,724 - DEBUG - on stmt: jump 127
2025-01-31 15:31:36,724 - DEBUG - ==== SSA block rewrite pass on 127
2025-01-31 15:31:36,724 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89ebbfa8c0>
2025-01-31 15:31:36,724 - DEBUG - on stmt: x0.2 = phi(incoming_values=[Var(x0, audio.py:1144), Var(x0.1, audio.py:1146), Var(x0, audio.py:1144)], incoming_blocks=[123, 121, 91])
2025-01-31 15:31:36,725 - DEBUG - on stmt: $const42.1 = const(int, -1)
2025-01-31 15:31:36,725 - DEBUG - on stmt: stencil_index.1 = $const42.1 + index00
2025-01-31 15:31:36,725 - DEBUG - on stmt: x1 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2025-01-31 15:31:36,725 - DEBUG - on stmt: $50unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2025-01-31 15:31:36,725 - DEBUG - on stmt: $58compare_op.7 = $50unary_negative.4 <= x1
2025-01-31 15:31:36,725 - DEBUG - find_def var='x1' stmt=$58compare_op.7 = $50unary_negative.4 <= x1
2025-01-31 15:31:36,725 - DEBUG - on stmt: bool60 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,725 - DEBUG - on stmt: $60pred = call bool60($58compare_op.7, func=bool60, args=(Var($58compare_op.7, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,725 - DEBUG - on stmt: $phi62.0 = x1
2025-01-31 15:31:36,726 - DEBUG - find_def var='x1' stmt=$phi62.0 = x1
2025-01-31 15:31:36,726 - DEBUG - on stmt: branch $60pred, 131, 161
2025-01-31 15:31:36,726 - DEBUG - ==== SSA block rewrite pass on 131
2025-01-31 15:31:36,726 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89ebbfa8c0>
2025-01-31 15:31:36,726 - DEBUG - on stmt: $64compare_op.2 = x1 <= threshold
2025-01-31 15:31:36,726 - DEBUG - find_def var='x1' stmt=$64compare_op.2 = x1 <= threshold
2025-01-31 15:31:36,726 - DEBUG - find_def_from_top label 131
2025-01-31 15:31:36,726 - DEBUG - idom 127 from label 131
2025-01-31 15:31:36,726 - DEBUG - find_def_from_bottom label 127
2025-01-31 15:31:36,726 - DEBUG - on stmt: bool66 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,727 - DEBUG - on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,727 - DEBUG - on stmt: branch $66pred, 153, 165
2025-01-31 15:31:36,727 - DEBUG - ==== SSA block rewrite pass on 153
2025-01-31 15:31:36,727 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89ebbfa8c0>
2025-01-31 15:31:36,727 - DEBUG - on stmt: jump 159
2025-01-31 15:31:36,727 - DEBUG - ==== SSA block rewrite pass on 161
2025-01-31 15:31:36,727 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89ebbfa8c0>
2025-01-31 15:31:36,727 - DEBUG - on stmt: jump 165
2025-01-31 15:31:36,727 - DEBUG - ==== SSA block rewrite pass on 159
2025-01-31 15:31:36,727 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89ebbfa8c0>
2025-01-31 15:31:36,727 - DEBUG - on stmt: x1.1 = const(int, 0)
2025-01-31 15:31:36,727 - DEBUG - on stmt: jump 165
2025-01-31 15:31:36,727 - DEBUG - ==== SSA block rewrite pass on 165
2025-01-31 15:31:36,728 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89ebbfa8c0>
2025-01-31 15:31:36,728 - DEBUG - on stmt: bool80 = global(bool: <class 'bool'>)
2025-01-31 15:31:36,728 - DEBUG - on stmt: $80pred = call bool80(zero_pos, func=bool80, args=(Var(zero_pos, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,728 - DEBUG - on stmt: branch $80pred, 169, 173
2025-01-31 15:31:36,728 - DEBUG - ==== SSA block rewrite pass on 169
2025-01-31 15:31:36,728 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89ebbfa8c0>
2025-01-31 15:31:36,728 - DEBUG - on stmt: $82load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,728 - DEBUG - on stmt: $84load_method.1 = getattr(value=$82load_global.0, attr=signbit)
2025-01-31 15:31:36,728 - DEBUG - on stmt: $88call_method.3 = call $84load_method.1(x0.2, func=$84load_method.1, args=[Var(x0.2, audio.py:1153)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,728 - DEBUG - on stmt: $90load_global.4 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,728 - DEBUG - on stmt: $92load_method.5 = getattr(value=$90load_global.4, attr=signbit)
2025-01-31 15:31:36,728 - DEBUG - on stmt: $96call_method.7 = call $92load_method.5(x1, func=$92load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,729 - DEBUG - find_def var='x1' stmt=$96call_method.7 = call $92load_method.5(x1, func=$92load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,729 - DEBUG - find_def_from_top label 169
2025-01-31 15:31:36,729 - DEBUG - idom 165 from label 169
2025-01-31 15:31:36,729 - DEBUG - find_def_from_bottom label 165
2025-01-31 15:31:36,729 - DEBUG - find_def_from_top label 165
2025-01-31 15:31:36,729 - DEBUG - insert phi node x1.2 = phi(incoming_values=[], incoming_blocks=[]) at 165
2025-01-31 15:31:36,729 - DEBUG - find_def_from_bottom label 161
2025-01-31 15:31:36,729 - DEBUG - find_def_from_top label 161
2025-01-31 15:31:36,729 - DEBUG - idom 127 from label 161
2025-01-31 15:31:36,729 - DEBUG - find_def_from_bottom label 127
2025-01-31 15:31:36,729 - DEBUG - incoming_def x1 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2025-01-31 15:31:36,729 - DEBUG - find_def_from_bottom label 131
2025-01-31 15:31:36,730 - DEBUG - find_def_from_top label 131
2025-01-31 15:31:36,730 - DEBUG - idom 127 from label 131
2025-01-31 15:31:36,730 - DEBUG - find_def_from_bottom label 127
2025-01-31 15:31:36,730 - DEBUG - incoming_def x1 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2025-01-31 15:31:36,730 - DEBUG - find_def_from_bottom label 159
2025-01-31 15:31:36,730 - DEBUG - incoming_def x1.1 = const(int, 0)
2025-01-31 15:31:36,730 - DEBUG - replaced with: $96call_method.7 = call $92load_method.5(x1.2, func=$92load_method.5, args=[Var(x1.2, audio.py:1153)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,730 - DEBUG - on stmt: $98compare_op.8 = $88call_method.3 != $96call_method.7
2025-01-31 15:31:36,730 - DEBUG - on stmt: $100return_value.9 = cast(value=$98compare_op.8)
2025-01-31 15:31:36,730 - DEBUG - on stmt: out0[index00] = $100return_value.9
2025-01-31 15:31:36,730 - DEBUG - on stmt: jump 193
2025-01-31 15:31:36,730 - DEBUG - ==== SSA block rewrite pass on 173
2025-01-31 15:31:36,731 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89ebbfa8c0>
2025-01-31 15:31:36,731 - DEBUG - on stmt: $102load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,731 - DEBUG - on stmt: $104load_method.1 = getattr(value=$102load_global.0, attr=sign)
2025-01-31 15:31:36,731 - DEBUG - on stmt: $108call_method.3 = call $104load_method.1(x0.2, func=$104load_method.1, args=[Var(x0.2, audio.py:1153)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,731 - DEBUG - on stmt: $110load_global.4 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:36,731 - DEBUG - on stmt: $112load_method.5 = getattr(value=$110load_global.4, attr=sign)
2025-01-31 15:31:36,731 - DEBUG - on stmt: $116call_method.7 = call $112load_method.5(x1, func=$112load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,731 - DEBUG - find_def var='x1' stmt=$116call_method.7 = call $112load_method.5(x1, func=$112load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,731 - DEBUG - find_def_from_top label 173
2025-01-31 15:31:36,731 - DEBUG - idom 165 from label 173
2025-01-31 15:31:36,731 - DEBUG - find_def_from_bottom label 165
2025-01-31 15:31:36,732 - DEBUG - replaced with: $116call_method.7 = call $112load_method.5(x1.2, func=$112load_method.5, args=[Var(x1.2, audio.py:1153)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:36,732 - DEBUG - on stmt: $118compare_op.8 = $108call_method.3 != $116call_method.7
2025-01-31 15:31:36,732 - DEBUG - on stmt: $120return_value.9 = cast(value=$118compare_op.8)
2025-01-31 15:31:36,732 - DEBUG - on stmt: out0[index00] = $120return_value.9
2025-01-31 15:31:36,732 - DEBUG - on stmt: jump 193
2025-01-31 15:31:36,732 - DEBUG - ==== SSA block rewrite pass on 193
2025-01-31 15:31:36,732 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89ebbfa8c0>
2025-01-31 15:31:36,732 - DEBUG - on stmt: jump 80
2025-01-31 15:31:37,217 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=1039)
           2	LOAD_FAST(arg=0, lineno=1042)
           4	LOAD_CONST(arg=1, lineno=1042)
           6	BINARY_SUBSCR(arg=None, lineno=1042)
           8	LOAD_FAST(arg=0, lineno=1042)
          10	LOAD_CONST(arg=2, lineno=1042)
          12	BINARY_SUBSCR(arg=None, lineno=1042)
          14	COMPARE_OP(arg=4, lineno=1042)
          16	LOAD_FAST(arg=0, lineno=1042)
          18	LOAD_CONST(arg=1, lineno=1042)
          20	BINARY_SUBSCR(arg=None, lineno=1042)
          22	LOAD_FAST(arg=0, lineno=1042)
          24	LOAD_CONST(arg=3, lineno=1042)
          26	BINARY_SUBSCR(arg=None, lineno=1042)
          28	COMPARE_OP(arg=5, lineno=1042)
          30	BINARY_AND(arg=None, lineno=1042)
          32	RETURN_VALUE(arg=None, lineno=1042)
2025-01-31 15:31:37,218 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:31:37,218 - DEBUG - stack: []
2025-01-31 15:31:37,218 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:31:37,218 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=1039)
2025-01-31 15:31:37,218 - DEBUG - stack []
2025-01-31 15:31:37,218 - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1042)
2025-01-31 15:31:37,218 - DEBUG - stack []
2025-01-31 15:31:37,218 - DEBUG - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1042)
2025-01-31 15:31:37,218 - DEBUG - stack ['$x2.0']
2025-01-31 15:31:37,218 - DEBUG - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=1042)
2025-01-31 15:31:37,218 - DEBUG - stack ['$x2.0', '$const4.1']
2025-01-31 15:31:37,218 - DEBUG - dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=1042)
2025-01-31 15:31:37,218 - DEBUG - stack ['$6binary_subscr.2']
2025-01-31 15:31:37,218 - DEBUG - dispatch pc=10, inst=LOAD_CONST(arg=2, lineno=1042)
2025-01-31 15:31:37,218 - DEBUG - stack ['$6binary_subscr.2', '$x8.3']
2025-01-31 15:31:37,218 - DEBUG - dispatch pc=12, inst=BINARY_SUBSCR(arg=None, lineno=1042)
2025-01-31 15:31:37,218 - DEBUG - stack ['$6binary_subscr.2', '$x8.3', '$const10.4']
2025-01-31 15:31:37,218 - DEBUG - dispatch pc=14, inst=COMPARE_OP(arg=4, lineno=1042)
2025-01-31 15:31:37,218 - DEBUG - stack ['$6binary_subscr.2', '$12binary_subscr.5']
2025-01-31 15:31:37,218 - DEBUG - dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=1042)
2025-01-31 15:31:37,218 - DEBUG - stack ['$14compare_op.6']
2025-01-31 15:31:37,218 - DEBUG - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1042)
2025-01-31 15:31:37,218 - DEBUG - stack ['$14compare_op.6', '$x16.7']
2025-01-31 15:31:37,218 - DEBUG - dispatch pc=20, inst=BINARY_SUBSCR(arg=None, lineno=1042)
2025-01-31 15:31:37,218 - DEBUG - stack ['$14compare_op.6', '$x16.7', '$const18.8']
2025-01-31 15:31:37,218 - DEBUG - dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=1042)
2025-01-31 15:31:37,218 - DEBUG - stack ['$14compare_op.6', '$20binary_subscr.9']
2025-01-31 15:31:37,219 - DEBUG - dispatch pc=24, inst=LOAD_CONST(arg=3, lineno=1042)
2025-01-31 15:31:37,219 - DEBUG - stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10']
2025-01-31 15:31:37,219 - DEBUG - dispatch pc=26, inst=BINARY_SUBSCR(arg=None, lineno=1042)
2025-01-31 15:31:37,219 - DEBUG - stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10', '$const24.11']
2025-01-31 15:31:37,219 - DEBUG - dispatch pc=28, inst=COMPARE_OP(arg=5, lineno=1042)
2025-01-31 15:31:37,219 - DEBUG - stack ['$14compare_op.6', '$20binary_subscr.9', '$26binary_subscr.12']
2025-01-31 15:31:37,219 - DEBUG - dispatch pc=30, inst=BINARY_AND(arg=None, lineno=1042)
2025-01-31 15:31:37,219 - DEBUG - stack ['$14compare_op.6', '$28compare_op.13']
2025-01-31 15:31:37,219 - DEBUG - dispatch pc=32, inst=RETURN_VALUE(arg=None, lineno=1042)
2025-01-31 15:31:37,219 - DEBUG - stack ['$30binary_and.14']
2025-01-31 15:31:37,219 - DEBUG - end state. edges=[]
2025-01-31 15:31:37,219 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:31:37,219 - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-01-31 15:31:37,219 - DEBUG - defmap: {}
2025-01-31 15:31:37,219 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:37,219 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:37,219 - DEBUG - keep phismap: {}
2025-01-31 15:31:37,219 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-01-31 15:31:37,219 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:31:37,219 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'res': '$x8.3'}), (10, {'res': '$const10.4'}), (12, {'index': '$const10.4', 'target': '$x8.3', 'res': '$12binary_subscr.5'}), (14, {'lhs': '$6binary_subscr.2', 'rhs': '$12binary_subscr.5', 'res': '$14compare_op.6'}), (16, {'res': '$x16.7'}), (18, {'res': '$const18.8'}), (20, {'index': '$const18.8', 'target': '$x16.7', 'res': '$20binary_subscr.9'}), (22, {'res': '$x22.10'}), (24, {'res': '$const24.11'}), (26, {'index': '$const24.11', 'target': '$x22.10', 'res': '$26binary_subscr.12'}), (28, {'lhs': '$20binary_subscr.9', 'rhs': '$26binary_subscr.12', 'res': '$28compare_op.13'}), (30, {'lhs': '$14compare_op.6', 'rhs': '$28compare_op.13', 'res': '$30binary_and.14'}), (32, {'retval': '$30binary_and.14', 'castval': '$32return_value.15'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:37,220 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6binary_subscr.2 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$6binary_subscr.2', '$const4.1', 'x']
    $const10.4 = const(int, -1)              ['$const10.4']
    $12binary_subscr.5 = getitem(value=x, index=$const10.4, fn=<built-in function getitem>) ['$12binary_subscr.5', '$const10.4', 'x']
    $14compare_op.6 = $6binary_subscr.2 > $12binary_subscr.5 ['$12binary_subscr.5', '$14compare_op.6', '$6binary_subscr.2']
    $const18.8 = const(int, 0)               ['$const18.8']
    $20binary_subscr.9 = getitem(value=x, index=$const18.8, fn=<built-in function getitem>) ['$20binary_subscr.9', '$const18.8', 'x']
    $const24.11 = const(int, 1)              ['$const24.11']
    $26binary_subscr.12 = getitem(value=x, index=$const24.11, fn=<built-in function getitem>) ['$26binary_subscr.12', '$const24.11', 'x']
    $28compare_op.13 = $20binary_subscr.9 >= $26binary_subscr.12 ['$20binary_subscr.9', '$26binary_subscr.12', '$28compare_op.13']
    $30binary_and.14 = $14compare_op.6 & $28compare_op.13 ['$14compare_op.6', '$28compare_op.13', '$30binary_and.14']
    $32return_value.15 = cast(value=$30binary_and.14) ['$30binary_and.14', '$32return_value.15']
    return $32return_value.15                ['$32return_value.15']

2025-01-31 15:31:37,220 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=1045)
           2	LOAD_FAST(arg=0, lineno=1048)
           4	LOAD_CONST(arg=1, lineno=1048)
           6	BINARY_SUBSCR(arg=None, lineno=1048)
           8	LOAD_FAST(arg=0, lineno=1048)
          10	LOAD_CONST(arg=2, lineno=1048)
          12	BINARY_SUBSCR(arg=None, lineno=1048)
          14	COMPARE_OP(arg=0, lineno=1048)
          16	LOAD_FAST(arg=0, lineno=1048)
          18	LOAD_CONST(arg=1, lineno=1048)
          20	BINARY_SUBSCR(arg=None, lineno=1048)
          22	LOAD_FAST(arg=0, lineno=1048)
          24	LOAD_CONST(arg=3, lineno=1048)
          26	BINARY_SUBSCR(arg=None, lineno=1048)
          28	COMPARE_OP(arg=1, lineno=1048)
          30	BINARY_AND(arg=None, lineno=1048)
          32	RETURN_VALUE(arg=None, lineno=1048)
2025-01-31 15:31:37,220 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:31:37,220 - DEBUG - stack: []
2025-01-31 15:31:37,220 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:31:37,220 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=1045)
2025-01-31 15:31:37,220 - DEBUG - stack []
2025-01-31 15:31:37,221 - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1048)
2025-01-31 15:31:37,221 - DEBUG - stack []
2025-01-31 15:31:37,221 - DEBUG - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1048)
2025-01-31 15:31:37,221 - DEBUG - stack ['$x2.0']
2025-01-31 15:31:37,221 - DEBUG - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=1048)
2025-01-31 15:31:37,221 - DEBUG - stack ['$x2.0', '$const4.1']
2025-01-31 15:31:37,221 - DEBUG - dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=1048)
2025-01-31 15:31:37,221 - DEBUG - stack ['$6binary_subscr.2']
2025-01-31 15:31:37,221 - DEBUG - dispatch pc=10, inst=LOAD_CONST(arg=2, lineno=1048)
2025-01-31 15:31:37,221 - DEBUG - stack ['$6binary_subscr.2', '$x8.3']
2025-01-31 15:31:37,221 - DEBUG - dispatch pc=12, inst=BINARY_SUBSCR(arg=None, lineno=1048)
2025-01-31 15:31:37,221 - DEBUG - stack ['$6binary_subscr.2', '$x8.3', '$const10.4']
2025-01-31 15:31:37,221 - DEBUG - dispatch pc=14, inst=COMPARE_OP(arg=0, lineno=1048)
2025-01-31 15:31:37,221 - DEBUG - stack ['$6binary_subscr.2', '$12binary_subscr.5']
2025-01-31 15:31:37,221 - DEBUG - dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=1048)
2025-01-31 15:31:37,221 - DEBUG - stack ['$14compare_op.6']
2025-01-31 15:31:37,221 - DEBUG - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1048)
2025-01-31 15:31:37,221 - DEBUG - stack ['$14compare_op.6', '$x16.7']
2025-01-31 15:31:37,221 - DEBUG - dispatch pc=20, inst=BINARY_SUBSCR(arg=None, lineno=1048)
2025-01-31 15:31:37,221 - DEBUG - stack ['$14compare_op.6', '$x16.7', '$const18.8']
2025-01-31 15:31:37,221 - DEBUG - dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=1048)
2025-01-31 15:31:37,221 - DEBUG - stack ['$14compare_op.6', '$20binary_subscr.9']
2025-01-31 15:31:37,221 - DEBUG - dispatch pc=24, inst=LOAD_CONST(arg=3, lineno=1048)
2025-01-31 15:31:37,221 - DEBUG - stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10']
2025-01-31 15:31:37,221 - DEBUG - dispatch pc=26, inst=BINARY_SUBSCR(arg=None, lineno=1048)
2025-01-31 15:31:37,221 - DEBUG - stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10', '$const24.11']
2025-01-31 15:31:37,221 - DEBUG - dispatch pc=28, inst=COMPARE_OP(arg=1, lineno=1048)
2025-01-31 15:31:37,221 - DEBUG - stack ['$14compare_op.6', '$20binary_subscr.9', '$26binary_subscr.12']
2025-01-31 15:31:37,222 - DEBUG - dispatch pc=30, inst=BINARY_AND(arg=None, lineno=1048)
2025-01-31 15:31:37,222 - DEBUG - stack ['$14compare_op.6', '$28compare_op.13']
2025-01-31 15:31:37,222 - DEBUG - dispatch pc=32, inst=RETURN_VALUE(arg=None, lineno=1048)
2025-01-31 15:31:37,222 - DEBUG - stack ['$30binary_and.14']
2025-01-31 15:31:37,222 - DEBUG - end state. edges=[]
2025-01-31 15:31:37,222 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:31:37,222 - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-01-31 15:31:37,222 - DEBUG - defmap: {}
2025-01-31 15:31:37,222 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:37,222 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:37,222 - DEBUG - keep phismap: {}
2025-01-31 15:31:37,222 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-01-31 15:31:37,222 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:31:37,222 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'res': '$x8.3'}), (10, {'res': '$const10.4'}), (12, {'index': '$const10.4', 'target': '$x8.3', 'res': '$12binary_subscr.5'}), (14, {'lhs': '$6binary_subscr.2', 'rhs': '$12binary_subscr.5', 'res': '$14compare_op.6'}), (16, {'res': '$x16.7'}), (18, {'res': '$const18.8'}), (20, {'index': '$const18.8', 'target': '$x16.7', 'res': '$20binary_subscr.9'}), (22, {'res': '$x22.10'}), (24, {'res': '$const24.11'}), (26, {'index': '$const24.11', 'target': '$x22.10', 'res': '$26binary_subscr.12'}), (28, {'lhs': '$20binary_subscr.9', 'rhs': '$26binary_subscr.12', 'res': '$28compare_op.13'}), (30, {'lhs': '$14compare_op.6', 'rhs': '$28compare_op.13', 'res': '$30binary_and.14'}), (32, {'retval': '$30binary_and.14', 'castval': '$32return_value.15'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:37,223 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6binary_subscr.2 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$6binary_subscr.2', '$const4.1', 'x']
    $const10.4 = const(int, -1)              ['$const10.4']
    $12binary_subscr.5 = getitem(value=x, index=$const10.4, fn=<built-in function getitem>) ['$12binary_subscr.5', '$const10.4', 'x']
    $14compare_op.6 = $6binary_subscr.2 < $12binary_subscr.5 ['$12binary_subscr.5', '$14compare_op.6', '$6binary_subscr.2']
    $const18.8 = const(int, 0)               ['$const18.8']
    $20binary_subscr.9 = getitem(value=x, index=$const18.8, fn=<built-in function getitem>) ['$20binary_subscr.9', '$const18.8', 'x']
    $const24.11 = const(int, 1)              ['$const24.11']
    $26binary_subscr.12 = getitem(value=x, index=$const24.11, fn=<built-in function getitem>) ['$26binary_subscr.12', '$const24.11', 'x']
    $28compare_op.13 = $20binary_subscr.9 <= $26binary_subscr.12 ['$20binary_subscr.9', '$26binary_subscr.12', '$28compare_op.13']
    $30binary_and.14 = $14compare_op.6 & $28compare_op.13 ['$14compare_op.6', '$28compare_op.13', '$30binary_and.14']
    $32return_value.15 = cast(value=$30binary_and.14) ['$30binary_and.14', '$32return_value.15']
    return $32return_value.15                ['$32return_value.15']

2025-01-31 15:31:37,224 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=1051)
           2	LOAD_GLOBAL(arg=0, lineno=1065)
           4	LOAD_FAST(arg=0, lineno=1065)
           6	CALL_FUNCTION(arg=1, lineno=1065)
           8	LOAD_FAST(arg=1, lineno=1065)
          10	LOAD_CONST(arg=1, lineno=1065)
          12	LOAD_CONST(arg=1, lineno=1065)
          14	BUILD_SLICE(arg=2, lineno=1065)
          16	STORE_SUBSCR(arg=None, lineno=1065)
          18	LOAD_CONST(arg=1, lineno=1065)
          20	RETURN_VALUE(arg=None, lineno=1065)
2025-01-31 15:31:37,224 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:31:37,224 - DEBUG - stack: []
2025-01-31 15:31:37,224 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:31:37,224 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=1051)
2025-01-31 15:31:37,225 - DEBUG - stack []
2025-01-31 15:31:37,225 - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=1065)
2025-01-31 15:31:37,225 - DEBUG - stack []
2025-01-31 15:31:37,225 - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=1065)
2025-01-31 15:31:37,225 - DEBUG - stack ['$2load_global.0']
2025-01-31 15:31:37,225 - DEBUG - dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=1065)
2025-01-31 15:31:37,225 - DEBUG - stack ['$2load_global.0', '$x4.1']
2025-01-31 15:31:37,225 - DEBUG - dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=1065)
2025-01-31 15:31:37,225 - DEBUG - stack ['$6call_function.2']
2025-01-31 15:31:37,225 - DEBUG - dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=1065)
2025-01-31 15:31:37,225 - DEBUG - stack ['$6call_function.2', '$y8.3']
2025-01-31 15:31:37,225 - DEBUG - dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=1065)
2025-01-31 15:31:37,225 - DEBUG - stack ['$6call_function.2', '$y8.3', '$const10.4']
2025-01-31 15:31:37,225 - DEBUG - dispatch pc=14, inst=BUILD_SLICE(arg=2, lineno=1065)
2025-01-31 15:31:37,225 - DEBUG - stack ['$6call_function.2', '$y8.3', '$const10.4', '$const12.5']
2025-01-31 15:31:37,225 - DEBUG - dispatch pc=16, inst=STORE_SUBSCR(arg=None, lineno=1065)
2025-01-31 15:31:37,225 - DEBUG - stack ['$6call_function.2', '$y8.3', '$14build_slice.7']
2025-01-31 15:31:37,225 - DEBUG - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1065)
2025-01-31 15:31:37,225 - DEBUG - stack []
2025-01-31 15:31:37,225 - DEBUG - dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=1065)
2025-01-31 15:31:37,225 - DEBUG - stack ['$const18.8']
2025-01-31 15:31:37,225 - DEBUG - end state. edges=[]
2025-01-31 15:31:37,225 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:31:37,225 - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-01-31 15:31:37,225 - DEBUG - defmap: {}
2025-01-31 15:31:37,225 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:37,225 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:37,226 - DEBUG - keep phismap: {}
2025-01-31 15:31:37,226 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-01-31 15:31:37,226 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:31:37,226 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$x4.1'}), (6, {'func': '$2load_global.0', 'args': ['$x4.1'], 'res': '$6call_function.2'}), (8, {'res': '$y8.3'}), (10, {'res': '$const10.4'}), (12, {'res': '$const12.5'}), (14, {'start': '$const10.4', 'stop': '$const12.5', 'step': None, 'res': '$14build_slice.7', 'slicevar': '$14build_slice.6'}), (16, {'target': '$y8.3', 'index': '$14build_slice.7', 'value': '$6call_function.2'}), (18, {'res': '$const18.8'}), (20, {'retval': '$const18.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:37,226 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    y = arg(1, name=y)                       ['y']
    $2load_global.0 = global(_localmax_sten: <numba.stencils.stencil.StencilFunc object at 0x7c89eba2d4b0>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, utils.py:1051)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$6call_function.2', 'x']
    $const10.4 = const(NoneType, None)       ['$const10.4']
    $const12.5 = const(NoneType, None)       ['$const12.5']
    $14build_slice.6 = global(slice: <class 'slice'>) ['$14build_slice.6']
    $14build_slice.7 = call $14build_slice.6($const10.4, $const12.5, func=$14build_slice.6, args=(Var($const10.4, utils.py:1065), Var($const12.5, utils.py:1065)), kws=(), vararg=None, varkwarg=None, target=None) ['$14build_slice.6', '$14build_slice.7', '$const10.4', '$const12.5']
    y[$14build_slice.7] = $6call_function.2  ['$14build_slice.7', '$6call_function.2', 'y']
    $const18.8 = const(NoneType, None)       ['$const18.8']
    $20return_value.9 = cast(value=$const18.8) ['$20return_value.9', '$const18.8']
    return $20return_value.9                 ['$20return_value.9']

2025-01-31 15:31:37,230 - DEBUG - ==== SSA block analysis pass on 0
2025-01-31 15:31:37,230 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89eba5ec20>
2025-01-31 15:31:37,230 - DEBUG - on stmt: x = arg(0, name=x)
2025-01-31 15:31:37,230 - DEBUG - on stmt: y = arg(1, name=y)
2025-01-31 15:31:37,230 - DEBUG - on stmt: $2load_global.0 = global(_localmax_sten: <numba.stencils.stencil.StencilFunc object at 0x7c89eba2d4b0>)
2025-01-31 15:31:37,230 - DEBUG - on stmt: $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, utils.py:1051)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:37,230 - DEBUG - on stmt: $const10.4 = const(NoneType, None)
2025-01-31 15:31:37,230 - DEBUG - on stmt: $const12.5 = const(NoneType, None)
2025-01-31 15:31:37,230 - DEBUG - on stmt: $14build_slice.6 = global(slice: <class 'slice'>)
2025-01-31 15:31:37,230 - DEBUG - on stmt: $14build_slice.7 = call $14build_slice.6($const10.4, $const12.5, func=$14build_slice.6, args=(Var($const10.4, utils.py:1065), Var($const12.5, utils.py:1065)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:37,230 - DEBUG - on stmt: y[slice(None, None, None)] = $6call_function.2
2025-01-31 15:31:37,230 - DEBUG - on stmt: $const18.8 = const(NoneType, None)
2025-01-31 15:31:37,230 - DEBUG - on stmt: $20return_value.9 = cast(value=$const18.8)
2025-01-31 15:31:37,230 - DEBUG - on stmt: return $20return_value.9
2025-01-31 15:31:37,231 - DEBUG - defs defaultdict(<class 'list'>,
            {'$14build_slice.6': [(<numba.core.ir.Assign object at 0x7c89eba706a0>,
                                   0)],
             '$14build_slice.7': [(<numba.core.ir.Assign object at 0x7c89eba707c0>,
                                   0)],
             '$20return_value.9': [(<numba.core.ir.Assign object at 0x7c89eba70b80>,
                                    0)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x7c89eba5fe20>,
                                  0)],
             '$6call_function.2': [(<numba.core.ir.Assign object at 0x7c89eba70160>,
                                    0)],
             '$const10.4': [(<numba.core.ir.Assign object at 0x7c89eba703a0>,
                             0)],
             '$const12.5': [(<numba.core.ir.Assign object at 0x7c89eba70520>,
                             0)],
             '$const18.8': [(<numba.core.ir.Assign object at 0x7c89eba70a00>,
                             0)],
             'x': [(<numba.core.ir.Assign object at 0x7c89eba5f2e0>, 0)],
             'y': [(<numba.core.ir.Assign object at 0x7c89eba5ecb0>, 0)]})
2025-01-31 15:31:37,231 - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x7c89eba5ec20>
2025-01-31 15:31:37,245 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_FAST(arg=0, lineno=2)
           4	LOAD_ATTR(arg=0, lineno=2)
           6	STORE_FAST(arg=1, lineno=2)
           8	LOAD_GLOBAL(arg=1, lineno=3)
          10	LOAD_ATTR(arg=2, lineno=3)
          12	LOAD_FAST(arg=1, lineno=3)
          14	LOAD_GLOBAL(arg=1, lineno=3)
          16	LOAD_ATTR(arg=3, lineno=3)
          18	LOAD_CONST(arg=1, lineno=3)
          20	CALL_FUNCTION_KW(arg=2, lineno=3)
          22	STORE_FAST(arg=2, lineno=3)
          24	LOAD_CONST(arg=2, lineno=4)
          26	LOAD_FAST(arg=2, lineno=4)
          28	LOAD_CONST(arg=0, lineno=4)
          30	LOAD_CONST(arg=3, lineno=4)
          32	BUILD_SLICE(arg=2, lineno=4)
          34	STORE_SUBSCR(arg=None, lineno=4)
          36	LOAD_CONST(arg=2, lineno=5)
          38	LOAD_FAST(arg=2, lineno=5)
          40	LOAD_CONST(arg=4, lineno=5)
          42	LOAD_CONST(arg=0, lineno=5)
          44	BUILD_SLICE(arg=2, lineno=5)
          46	STORE_SUBSCR(arg=None, lineno=5)
          48	LOAD_GLOBAL(arg=4, lineno=6)
          50	LOAD_GLOBAL(arg=5, lineno=6)
          52	LOAD_CONST(arg=2, lineno=6)
          54	LOAD_CONST(arg=4, lineno=6)
          56	CALL_FUNCTION(arg=2, lineno=6)
          58	UNARY_NEGATIVE(arg=None, lineno=6)
          60	LOAD_FAST(arg=1, lineno=6)
          62	LOAD_CONST(arg=2, lineno=6)
          64	BINARY_SUBSCR(arg=None, lineno=6)
          66	LOAD_GLOBAL(arg=6, lineno=6)
          68	LOAD_CONST(arg=2, lineno=6)
          70	LOAD_CONST(arg=3, lineno=6)
          72	CALL_FUNCTION(arg=2, lineno=6)
          74	BINARY_SUBTRACT(arg=None, lineno=6)
          76	CALL_FUNCTION(arg=2, lineno=6)
          78	GET_ITER(arg=None, lineno=6)
>         80	FOR_ITER(arg=4, lineno=6)
          82	STORE_FAST(arg=3, lineno=6)
          84	LOAD_CONST(arg=2, lineno=7)
          86	STORE_FAST(arg=4, lineno=7)
          88	JUMP_ABSOLUTE(arg=41, lineno=7)
>         90	LOAD_FAST(arg=2, lineno=8)
          92	RETURN_VALUE(arg=None, lineno=8)
2025-01-31 15:31:37,245 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:31:37,245 - DEBUG - stack: []
2025-01-31 15:31:37,245 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:31:37,245 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=1)
2025-01-31 15:31:37,245 - DEBUG - stack []
2025-01-31 15:31:37,245 - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=2)
2025-01-31 15:31:37,245 - DEBUG - stack []
2025-01-31 15:31:37,245 - DEBUG - dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=2)
2025-01-31 15:31:37,245 - DEBUG - stack ['$x2.0']
2025-01-31 15:31:37,245 - DEBUG - dispatch pc=6, inst=STORE_FAST(arg=1, lineno=2)
2025-01-31 15:31:37,245 - DEBUG - stack ['$4load_attr.1']
2025-01-31 15:31:37,245 - DEBUG - dispatch pc=8, inst=LOAD_GLOBAL(arg=1, lineno=3)
2025-01-31 15:31:37,245 - DEBUG - stack []
2025-01-31 15:31:37,245 - DEBUG - dispatch pc=10, inst=LOAD_ATTR(arg=2, lineno=3)
2025-01-31 15:31:37,245 - DEBUG - stack ['$8load_global.2']
2025-01-31 15:31:37,245 - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=3)
2025-01-31 15:31:37,245 - DEBUG - stack ['$10load_attr.3']
2025-01-31 15:31:37,245 - DEBUG - dispatch pc=14, inst=LOAD_GLOBAL(arg=1, lineno=3)
2025-01-31 15:31:37,245 - DEBUG - stack ['$10load_attr.3', '$full_shape012.4']
2025-01-31 15:31:37,245 - DEBUG - dispatch pc=16, inst=LOAD_ATTR(arg=3, lineno=3)
2025-01-31 15:31:37,246 - DEBUG - stack ['$10load_attr.3', '$full_shape012.4', '$14load_global.5']
2025-01-31 15:31:37,246 - DEBUG - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=3)
2025-01-31 15:31:37,246 - DEBUG - stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6']
2025-01-31 15:31:37,246 - DEBUG - dispatch pc=20, inst=CALL_FUNCTION_KW(arg=2, lineno=3)
2025-01-31 15:31:37,246 - DEBUG - stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6', '$const18.7']
2025-01-31 15:31:37,246 - DEBUG - dispatch pc=22, inst=STORE_FAST(arg=2, lineno=3)
2025-01-31 15:31:37,246 - DEBUG - stack ['$20call_function_kw.8']
2025-01-31 15:31:37,246 - DEBUG - dispatch pc=24, inst=LOAD_CONST(arg=2, lineno=4)
2025-01-31 15:31:37,246 - DEBUG - stack []
2025-01-31 15:31:37,246 - DEBUG - dispatch pc=26, inst=LOAD_FAST(arg=2, lineno=4)
2025-01-31 15:31:37,246 - DEBUG - stack ['$const24.9']
2025-01-31 15:31:37,246 - DEBUG - dispatch pc=28, inst=LOAD_CONST(arg=0, lineno=4)
2025-01-31 15:31:37,246 - DEBUG - stack ['$const24.9', '$out026.10']
2025-01-31 15:31:37,246 - DEBUG - dispatch pc=30, inst=LOAD_CONST(arg=3, lineno=4)
2025-01-31 15:31:37,246 - DEBUG - stack ['$const24.9', '$out026.10', '$const28.11']
2025-01-31 15:31:37,246 - DEBUG - dispatch pc=32, inst=BUILD_SLICE(arg=2, lineno=4)
2025-01-31 15:31:37,246 - DEBUG - stack ['$const24.9', '$out026.10', '$const28.11', '$const30.12']
2025-01-31 15:31:37,246 - DEBUG - dispatch pc=34, inst=STORE_SUBSCR(arg=None, lineno=4)
2025-01-31 15:31:37,246 - DEBUG - stack ['$const24.9', '$out026.10', '$32build_slice.14']
2025-01-31 15:31:37,246 - DEBUG - dispatch pc=36, inst=LOAD_CONST(arg=2, lineno=5)
2025-01-31 15:31:37,246 - DEBUG - stack []
2025-01-31 15:31:37,246 - DEBUG - dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=5)
2025-01-31 15:31:37,246 - DEBUG - stack ['$const36.15']
2025-01-31 15:31:37,246 - DEBUG - dispatch pc=40, inst=LOAD_CONST(arg=4, lineno=5)
2025-01-31 15:31:37,246 - DEBUG - stack ['$const36.15', '$out038.16']
2025-01-31 15:31:37,246 - DEBUG - dispatch pc=42, inst=LOAD_CONST(arg=0, lineno=5)
2025-01-31 15:31:37,246 - DEBUG - stack ['$const36.15', '$out038.16', '$const40.17']
2025-01-31 15:31:37,246 - DEBUG - dispatch pc=44, inst=BUILD_SLICE(arg=2, lineno=5)
2025-01-31 15:31:37,246 - DEBUG - stack ['$const36.15', '$out038.16', '$const40.17', '$const42.18']
2025-01-31 15:31:37,247 - DEBUG - dispatch pc=46, inst=STORE_SUBSCR(arg=None, lineno=5)
2025-01-31 15:31:37,247 - DEBUG - stack ['$const36.15', '$out038.16', '$44build_slice.20']
2025-01-31 15:31:37,247 - DEBUG - dispatch pc=48, inst=LOAD_GLOBAL(arg=4, lineno=6)
2025-01-31 15:31:37,247 - DEBUG - stack []
2025-01-31 15:31:37,247 - DEBUG - dispatch pc=50, inst=LOAD_GLOBAL(arg=5, lineno=6)
2025-01-31 15:31:37,247 - DEBUG - stack ['$48load_global.21']
2025-01-31 15:31:37,247 - DEBUG - dispatch pc=52, inst=LOAD_CONST(arg=2, lineno=6)
2025-01-31 15:31:37,247 - DEBUG - stack ['$48load_global.21', '$50load_global.22']
2025-01-31 15:31:37,247 - DEBUG - dispatch pc=54, inst=LOAD_CONST(arg=4, lineno=6)
2025-01-31 15:31:37,247 - DEBUG - stack ['$48load_global.21', '$50load_global.22', '$const52.23']
2025-01-31 15:31:37,247 - DEBUG - dispatch pc=56, inst=CALL_FUNCTION(arg=2, lineno=6)
2025-01-31 15:31:37,247 - DEBUG - stack ['$48load_global.21', '$50load_global.22', '$const52.23', '$const54.24']
2025-01-31 15:31:37,247 - DEBUG - dispatch pc=58, inst=UNARY_NEGATIVE(arg=None, lineno=6)
2025-01-31 15:31:37,247 - DEBUG - stack ['$48load_global.21', '$56call_function.25']
2025-01-31 15:31:37,247 - DEBUG - dispatch pc=60, inst=LOAD_FAST(arg=1, lineno=6)
2025-01-31 15:31:37,247 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26']
2025-01-31 15:31:37,247 - DEBUG - dispatch pc=62, inst=LOAD_CONST(arg=2, lineno=6)
2025-01-31 15:31:37,247 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27']
2025-01-31 15:31:37,247 - DEBUG - dispatch pc=64, inst=BINARY_SUBSCR(arg=None, lineno=6)
2025-01-31 15:31:37,247 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27', '$const62.28']
2025-01-31 15:31:37,247 - DEBUG - dispatch pc=66, inst=LOAD_GLOBAL(arg=6, lineno=6)
2025-01-31 15:31:37,247 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29']
2025-01-31 15:31:37,247 - DEBUG - dispatch pc=68, inst=LOAD_CONST(arg=2, lineno=6)
2025-01-31 15:31:37,247 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30']
2025-01-31 15:31:37,247 - DEBUG - dispatch pc=70, inst=LOAD_CONST(arg=3, lineno=6)
2025-01-31 15:31:37,247 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31']
2025-01-31 15:31:37,247 - DEBUG - dispatch pc=72, inst=CALL_FUNCTION(arg=2, lineno=6)
2025-01-31 15:31:37,247 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31', '$const70.32']
2025-01-31 15:31:37,247 - DEBUG - dispatch pc=74, inst=BINARY_SUBTRACT(arg=None, lineno=6)
2025-01-31 15:31:37,248 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$72call_function.33']
2025-01-31 15:31:37,248 - DEBUG - dispatch pc=76, inst=CALL_FUNCTION(arg=2, lineno=6)
2025-01-31 15:31:37,248 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34']
2025-01-31 15:31:37,248 - DEBUG - dispatch pc=78, inst=GET_ITER(arg=None, lineno=6)
2025-01-31 15:31:37,248 - DEBUG - stack ['$76call_function.35']
2025-01-31 15:31:37,248 - DEBUG - end state. edges=[Edge(pc=80, stack=('$78get_iter.36',), blockstack=(), npush=0)]
2025-01-31 15:31:37,248 - DEBUG - pending: deque([State(pc_initial=80 nstack_initial=1)])
2025-01-31 15:31:37,248 - DEBUG - stack: ['$phi80.0']
2025-01-31 15:31:37,248 - DEBUG - state.pc_initial: State(pc_initial=80 nstack_initial=1)
2025-01-31 15:31:37,248 - DEBUG - dispatch pc=80, inst=FOR_ITER(arg=4, lineno=6)
2025-01-31 15:31:37,248 - DEBUG - stack ['$phi80.0']
2025-01-31 15:31:37,248 - DEBUG - end state. edges=[Edge(pc=90, stack=(), blockstack=(), npush=0), Edge(pc=82, stack=('$phi80.0', '$80for_iter.2'), blockstack=(), npush=0)]
2025-01-31 15:31:37,248 - DEBUG - pending: deque([State(pc_initial=90 nstack_initial=0), State(pc_initial=82 nstack_initial=2)])
2025-01-31 15:31:37,248 - DEBUG - stack: []
2025-01-31 15:31:37,248 - DEBUG - state.pc_initial: State(pc_initial=90 nstack_initial=0)
2025-01-31 15:31:37,248 - DEBUG - dispatch pc=90, inst=LOAD_FAST(arg=2, lineno=8)
2025-01-31 15:31:37,248 - DEBUG - stack []
2025-01-31 15:31:37,248 - DEBUG - dispatch pc=92, inst=RETURN_VALUE(arg=None, lineno=8)
2025-01-31 15:31:37,248 - DEBUG - stack ['$out090.0']
2025-01-31 15:31:37,248 - DEBUG - end state. edges=[]
2025-01-31 15:31:37,248 - DEBUG - pending: deque([State(pc_initial=82 nstack_initial=2)])
2025-01-31 15:31:37,248 - DEBUG - stack: ['$phi82.0', '$phi82.1']
2025-01-31 15:31:37,248 - DEBUG - state.pc_initial: State(pc_initial=82 nstack_initial=2)
2025-01-31 15:31:37,248 - DEBUG - dispatch pc=82, inst=STORE_FAST(arg=3, lineno=6)
2025-01-31 15:31:37,248 - DEBUG - stack ['$phi82.0', '$phi82.1']
2025-01-31 15:31:37,248 - DEBUG - dispatch pc=84, inst=LOAD_CONST(arg=2, lineno=7)
2025-01-31 15:31:37,248 - DEBUG - stack ['$phi82.0']
2025-01-31 15:31:37,248 - DEBUG - dispatch pc=86, inst=STORE_FAST(arg=4, lineno=7)
2025-01-31 15:31:37,249 - DEBUG - stack ['$phi82.0', '$const84.2']
2025-01-31 15:31:37,249 - DEBUG - dispatch pc=88, inst=JUMP_ABSOLUTE(arg=41, lineno=7)
2025-01-31 15:31:37,249 - DEBUG - stack ['$phi82.0']
2025-01-31 15:31:37,249 - DEBUG - end state. edges=[Edge(pc=80, stack=('$phi82.0',), blockstack=(), npush=0)]
2025-01-31 15:31:37,249 - DEBUG - pending: deque([State(pc_initial=80 nstack_initial=1)])
2025-01-31 15:31:37,249 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:31:37,249 - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=80 nstack_initial=1): {'$phi80.0'},
             State(pc_initial=82 nstack_initial=2): {'$phi82.1'},
             State(pc_initial=90 nstack_initial=0): set()})
2025-01-31 15:31:37,249 - DEBUG - defmap: {'$phi80.0': State(pc_initial=0 nstack_initial=0),
 '$phi82.1': State(pc_initial=80 nstack_initial=1)}
2025-01-31 15:31:37,249 - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi82.0', State(pc_initial=82 nstack_initial=2))},
             '$phi82.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-01-31 15:31:37,249 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-01-31 15:31:37,249 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-01-31 15:31:37,250 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-01-31 15:31:37,250 - DEBUG - keep phismap: {'$phi80.0': {('$78get_iter.36', State(pc_initial=0 nstack_initial=0))},
 '$phi82.1': {('$80for_iter.2', State(pc_initial=80 nstack_initial=1))}}
2025-01-31 15:31:37,250 - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi80.0': '$78get_iter.36'},
             State(pc_initial=80 nstack_initial=1): {'$phi82.1': '$80for_iter.2'}})
2025-01-31 15:31:37,250 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:31:37,250 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'item': '$x2.0', 'res': '$4load_attr.1'}), (6, {'value': '$4load_attr.1'}), (8, {'res': '$8load_global.2'}), (10, {'item': '$8load_global.2', 'res': '$10load_attr.3'}), (12, {'res': '$full_shape012.4'}), (14, {'res': '$14load_global.5'}), (16, {'item': '$14load_global.5', 'res': '$16load_attr.6'}), (18, {'res': '$const18.7'}), (20, {'func': '$10load_attr.3', 'args': ['$full_shape012.4', '$16load_attr.6'], 'names': '$const18.7', 'res': '$20call_function_kw.8'}), (22, {'value': '$20call_function_kw.8'}), (24, {'res': '$const24.9'}), (26, {'res': '$out026.10'}), (28, {'res': '$const28.11'}), (30, {'res': '$const30.12'}), (32, {'start': '$const28.11', 'stop': '$const30.12', 'step': None, 'res': '$32build_slice.14', 'slicevar': '$32build_slice.13'}), (34, {'target': '$out026.10', 'index': '$32build_slice.14', 'value': '$const24.9'}), (36, {'res': '$const36.15'}), (38, {'res': '$out038.16'}), (40, {'res': '$const40.17'}), (42, {'res': '$const42.18'}), (44, {'start': '$const40.17', 'stop': '$const42.18', 'step': None, 'res': '$44build_slice.20', 'slicevar': '$44build_slice.19'}), (46, {'target': '$out038.16', 'index': '$44build_slice.20', 'value': '$const36.15'}), (48, {'res': '$48load_global.21'}), (50, {'res': '$50load_global.22'}), (52, {'res': '$const52.23'}), (54, {'res': '$const54.24'}), (56, {'func': '$50load_global.22', 'args': ['$const52.23', '$const54.24'], 'res': '$56call_function.25'}), (58, {'value': '$56call_function.25', 'res': '$58unary_negative.26'}), (60, {'res': '$full_shape060.27'}), (62, {'res': '$const62.28'}), (64, {'index': '$const62.28', 'target': '$full_shape060.27', 'res': '$64binary_subscr.29'}), (66, {'res': '$66load_global.30'}), (68, {'res': '$const68.31'}), (70, {'res': '$const70.32'}), (72, {'func': '$66load_global.30', 'args': ['$const68.31', '$const70.32'], 'res': '$72call_function.33'}), (74, {'lhs': '$64binary_subscr.29', 'rhs': '$72call_function.33', 'res': '$74binary_subtract.34'}), (76, {'func': '$48load_global.21', 'args': ['$58unary_negative.26', '$74binary_subtract.34'], 'res': '$76call_function.35'}), (78, {'value': '$76call_function.35', 'res': '$78get_iter.36'})), outgoing_phis={'$phi80.0': '$78get_iter.36'}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$78get_iter.36',)})
2025-01-31 15:31:37,250 - DEBUG - block_infos State(pc_initial=80 nstack_initial=1):
AdaptBlockInfo(insts=((80, {'iterator': '$phi80.0', 'pair': '$80for_iter.1', 'indval': '$80for_iter.2', 'pred': '$80for_iter.3'}),), outgoing_phis={'$phi82.1': '$80for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: (), 82: ('$phi80.0', '$80for_iter.2')})
2025-01-31 15:31:37,250 - DEBUG - block_infos State(pc_initial=82 nstack_initial=2):
AdaptBlockInfo(insts=((82, {'value': '$phi82.1'}), (84, {'res': '$const84.2'}), (86, {'value': '$const84.2'}), (88, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$phi82.0',)})
2025-01-31 15:31:37,250 - DEBUG - block_infos State(pc_initial=90 nstack_initial=0):
AdaptBlockInfo(insts=((90, {'res': '$out090.0'}), (92, {'retval': '$out090.0', 'castval': '$92return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:37,251 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    full_shape0 = getattr(value=x, attr=shape) ['full_shape0', 'x']
    $8load_global.2 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>) ['$8load_global.2']
    $10load_attr.3 = getattr(value=$8load_global.2, attr=empty) ['$10load_attr.3', '$8load_global.2']
    $14load_global.5 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>) ['$14load_global.5']
    $16load_attr.6 = getattr(value=$14load_global.5, attr=bool_) ['$14load_global.5', '$16load_attr.6']
    out0 = call $10load_attr.3(full_shape0, func=$10load_attr.3, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6, <string>:3))], vararg=None, varkwarg=None, target=None) ['$10load_attr.3', '$16load_attr.6', 'full_shape0', 'out0']
    $const24.9 = const(int, 0)               ['$const24.9']
    $const28.11 = const(NoneType, None)      ['$const28.11']
    $const30.12 = const(int, 1)              ['$const30.12']
    $32build_slice.13 = global(slice: <class 'slice'>) ['$32build_slice.13']
    $32build_slice.14 = call $32build_slice.13($const28.11, $const30.12, func=$32build_slice.13, args=(Var($const28.11, <string>:4), Var($const30.12, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None) ['$32build_slice.13', '$32build_slice.14', '$const28.11', '$const30.12']
    out0[$32build_slice.14] = $const24.9     ['$32build_slice.14', '$const24.9', 'out0']
    $const36.15 = const(int, 0)              ['$const36.15']
    $const40.17 = const(int, -1)             ['$const40.17']
    $const42.18 = const(NoneType, None)      ['$const42.18']
    $44build_slice.19 = global(slice: <class 'slice'>) ['$44build_slice.19']
    $44build_slice.20 = call $44build_slice.19($const40.17, $const42.18, func=$44build_slice.19, args=(Var($const40.17, <string>:5), Var($const42.18, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None) ['$44build_slice.19', '$44build_slice.20', '$const40.17', '$const42.18']
    out0[$44build_slice.20] = $const36.15    ['$44build_slice.20', '$const36.15', 'out0']
    $48load_global.21 = global(range: <class 'range'>) ['$48load_global.21']
    $50load_global.22 = global(min: <built-in function min>) ['$50load_global.22']
    $const52.23 = const(int, 0)              ['$const52.23']
    $const54.24 = const(int, -1)             ['$const54.24']
    $56call_function.25 = call $50load_global.22($const52.23, $const54.24, func=$50load_global.22, args=[Var($const52.23, <string>:6), Var($const54.24, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$50load_global.22', '$56call_function.25', '$const52.23', '$const54.24']
    $58unary_negative.26 = unary(fn=<built-in function neg>, value=$56call_function.25) ['$56call_function.25', '$58unary_negative.26']
    $const62.28 = const(int, 0)              ['$const62.28']
    $64binary_subscr.29 = getitem(value=full_shape0, index=$const62.28, fn=<built-in function getitem>) ['$64binary_subscr.29', '$const62.28', 'full_shape0']
    $66load_global.30 = global(max: <built-in function max>) ['$66load_global.30']
    $const68.31 = const(int, 0)              ['$const68.31']
    $const70.32 = const(int, 1)              ['$const70.32']
    $72call_function.33 = call $66load_global.30($const68.31, $const70.32, func=$66load_global.30, args=[Var($const68.31, <string>:6), Var($const70.32, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$66load_global.30', '$72call_function.33', '$const68.31', '$const70.32']
    $74binary_subtract.34 = $64binary_subscr.29 - $72call_function.33 ['$64binary_subscr.29', '$72call_function.33', '$74binary_subtract.34']
    $76call_function.35 = call $48load_global.21($58unary_negative.26, $74binary_subtract.34, func=$48load_global.21, args=[Var($58unary_negative.26, <string>:6), Var($74binary_subtract.34, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34', '$76call_function.35']
    $78get_iter.36 = getiter(value=$76call_function.35) ['$76call_function.35', '$78get_iter.36']
    $phi80.0 = $78get_iter.36                ['$78get_iter.36', '$phi80.0']
    jump 80                                  []
label 80:
    $80for_iter.1 = iternext(value=$phi80.0) ['$80for_iter.1', '$phi80.0']
    $80for_iter.2 = pair_first(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.2']
    $80for_iter.3 = pair_second(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.3']
    $phi82.1 = $80for_iter.2                 ['$80for_iter.2', '$phi82.1']
    branch $80for_iter.3, 82, 90             ['$80for_iter.3']
label 82:
    index00 = $phi82.1                       ['$phi82.1', 'index00']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 80                                  []
label 90:
    $92return_value.1 = cast(value=out0)     ['$92return_value.1', 'out0']
    return $92return_value.1                 ['$92return_value.1']

2025-01-31 15:31:37,259 - DEBUG - ==== SSA block analysis pass on 0
2025-01-31 15:31:37,259 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89ebb5b430>
2025-01-31 15:31:37,259 - DEBUG - on stmt: x = arg(0, name=x)
2025-01-31 15:31:37,259 - DEBUG - on stmt: full_shape0 = getattr(value=x, attr=shape)
2025-01-31 15:31:37,259 - DEBUG - on stmt: $8load_global.2.1 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:37,259 - DEBUG - on stmt: $10load_attr.3.1 = getattr(value=$8load_global.2.1, attr=empty)
2025-01-31 15:31:37,259 - DEBUG - on stmt: $14load_global.5.1 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:37,259 - DEBUG - on stmt: $16load_attr.6.1 = getattr(value=$14load_global.5.1, attr=bool_)
2025-01-31 15:31:37,259 - DEBUG - on stmt: out0 = call $10load_attr.3.1(full_shape0, func=$10load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:37,259 - DEBUG - on stmt: $const24.9.1 = const(int, 0)
2025-01-31 15:31:37,259 - DEBUG - on stmt: $const28.11.1 = const(NoneType, None)
2025-01-31 15:31:37,259 - DEBUG - on stmt: $const30.12.1 = const(int, 1)
2025-01-31 15:31:37,259 - DEBUG - on stmt: $32build_slice.13.1 = global(slice: <class 'slice'>)
2025-01-31 15:31:37,259 - DEBUG - on stmt: $32build_slice.14.1 = call $32build_slice.13.1($const28.11.1, $const30.12.1, func=$32build_slice.13.1, args=(Var($const28.11.1, <string>:4), Var($const30.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:37,259 - DEBUG - on stmt: out0[$32build_slice.14.1] = $const24.9.1
2025-01-31 15:31:37,259 - DEBUG - on stmt: $const36.15.1 = const(int, 0)
2025-01-31 15:31:37,259 - DEBUG - on stmt: $const40.17.1 = const(int, -1)
2025-01-31 15:31:37,259 - DEBUG - on stmt: $const42.18.1 = const(NoneType, None)
2025-01-31 15:31:37,259 - DEBUG - on stmt: $44build_slice.19.1 = global(slice: <class 'slice'>)
2025-01-31 15:31:37,259 - DEBUG - on stmt: $44build_slice.20.1 = call $44build_slice.19.1($const40.17.1, $const42.18.1, func=$44build_slice.19.1, args=(Var($const40.17.1, <string>:5), Var($const42.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:37,260 - DEBUG - on stmt: out0[$44build_slice.20.1] = $const36.15.1
2025-01-31 15:31:37,260 - DEBUG - on stmt: $48load_global.21.1 = global(range: <class 'range'>)
2025-01-31 15:31:37,260 - DEBUG - on stmt: $50load_global.22.1 = global(min: <built-in function min>)
2025-01-31 15:31:37,260 - DEBUG - on stmt: $const52.23.1 = const(int, 0)
2025-01-31 15:31:37,260 - DEBUG - on stmt: $const54.24.1 = const(int, -1)
2025-01-31 15:31:37,260 - DEBUG - on stmt: $56call_function.25.1 = call $50load_global.22.1($const52.23.1, $const54.24.1, func=$50load_global.22.1, args=[Var($const52.23.1, <string>:6), Var($const54.24.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:37,260 - DEBUG - on stmt: $58unary_negative.26.1 = unary(fn=<built-in function neg>, value=$56call_function.25.1)
2025-01-31 15:31:37,260 - DEBUG - on stmt: $const62.28.1 = const(int, 0)
2025-01-31 15:31:37,260 - DEBUG - on stmt: $64binary_subscr.29.1 = getitem(value=full_shape0, index=$const62.28.1, fn=<built-in function getitem>)
2025-01-31 15:31:37,260 - DEBUG - on stmt: $66load_global.30.1 = global(max: <built-in function max>)
2025-01-31 15:31:37,260 - DEBUG - on stmt: $const68.31.1 = const(int, 0)
2025-01-31 15:31:37,260 - DEBUG - on stmt: $const70.32.1 = const(int, 1)
2025-01-31 15:31:37,260 - DEBUG - on stmt: $72call_function.33.1 = call $66load_global.30.1($const68.31.1, $const70.32.1, func=$66load_global.30.1, args=[Var($const68.31.1, <string>:6), Var($const70.32.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:37,260 - DEBUG - on stmt: $74binary_subtract.34.1 = $64binary_subscr.29.1 - $72call_function.33.1
2025-01-31 15:31:37,260 - DEBUG - on stmt: $76call_function.35.1 = call $48load_global.21.1($58unary_negative.26.1, $74binary_subtract.34.1, func=$48load_global.21.1, args=[Var($58unary_negative.26.1, <string>:6), Var($74binary_subtract.34.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:37,260 - DEBUG - on stmt: $78get_iter.36.1 = getiter(value=$76call_function.35.1)
2025-01-31 15:31:37,260 - DEBUG - on stmt: $phi80.0.1 = $78get_iter.36.1
2025-01-31 15:31:37,260 - DEBUG - on stmt: jump 80
2025-01-31 15:31:37,260 - DEBUG - ==== SSA block analysis pass on 80
2025-01-31 15:31:37,260 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89ebb5b430>
2025-01-31 15:31:37,260 - DEBUG - on stmt: $80for_iter.1.1 = iternext(value=$phi80.0.1)
2025-01-31 15:31:37,260 - DEBUG - on stmt: $80for_iter.2.1 = pair_first(value=$80for_iter.1.1)
2025-01-31 15:31:37,260 - DEBUG - on stmt: $80for_iter.3.1 = pair_second(value=$80for_iter.1.1)
2025-01-31 15:31:37,260 - DEBUG - on stmt: $phi82.1.1 = $80for_iter.2.1
2025-01-31 15:31:37,261 - DEBUG - on stmt: branch $80for_iter.3.1, 82, 92
2025-01-31 15:31:37,261 - DEBUG - ==== SSA block analysis pass on 82
2025-01-31 15:31:37,261 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89ebb5b430>
2025-01-31 15:31:37,261 - DEBUG - on stmt: index00 = $phi82.1.1
2025-01-31 15:31:37,261 - DEBUG - on stmt: jump 90
2025-01-31 15:31:37,261 - DEBUG - ==== SSA block analysis pass on 92
2025-01-31 15:31:37,261 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89ebb5b430>
2025-01-31 15:31:37,261 - DEBUG - on stmt: $92return_value.1.1 = cast(value=out0)
2025-01-31 15:31:37,261 - DEBUG - on stmt: return $92return_value.1.1
2025-01-31 15:31:37,261 - DEBUG - ==== SSA block analysis pass on 90
2025-01-31 15:31:37,261 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89ebb5b430>
2025-01-31 15:31:37,261 - DEBUG - on stmt: $const4.1 = const(int, 0)
2025-01-31 15:31:37,261 - DEBUG - on stmt: stencil_index = $const4.1 + index00
2025-01-31 15:31:37,261 - DEBUG - on stmt: $6binary_subscr.2 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-01-31 15:31:37,261 - DEBUG - on stmt: $const10.4 = const(int, -1)
2025-01-31 15:31:37,261 - DEBUG - on stmt: stencil_index.1 = $const10.4 + index00
2025-01-31 15:31:37,261 - DEBUG - on stmt: $12binary_subscr.5 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2025-01-31 15:31:37,261 - DEBUG - on stmt: $14compare_op.6 = $6binary_subscr.2 > $12binary_subscr.5
2025-01-31 15:31:37,261 - DEBUG - on stmt: $const18.8 = const(int, 0)
2025-01-31 15:31:37,261 - DEBUG - on stmt: stencil_index.2 = $const18.8 + index00
2025-01-31 15:31:37,261 - DEBUG - on stmt: $20binary_subscr.9 = getitem(value=x, index=stencil_index.2, fn=<built-in function getitem>)
2025-01-31 15:31:37,261 - DEBUG - on stmt: $const24.11 = const(int, 1)
2025-01-31 15:31:37,261 - DEBUG - on stmt: stencil_index.3 = $const24.11 + index00
2025-01-31 15:31:37,261 - DEBUG - on stmt: $26binary_subscr.12 = getitem(value=x, index=stencil_index.3, fn=<built-in function getitem>)
2025-01-31 15:31:37,261 - DEBUG - on stmt: $28compare_op.13 = $20binary_subscr.9 >= $26binary_subscr.12
2025-01-31 15:31:37,261 - DEBUG - on stmt: $30binary_and.14 = $14compare_op.6 & $28compare_op.13
2025-01-31 15:31:37,262 - DEBUG - on stmt: $32return_value.15 = cast(value=$30binary_and.14)
2025-01-31 15:31:37,262 - DEBUG - on stmt: out0[index00] = $32return_value.15
2025-01-31 15:31:37,262 - DEBUG - on stmt: jump 91
2025-01-31 15:31:37,262 - DEBUG - ==== SSA block analysis pass on 91
2025-01-31 15:31:37,262 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89ebb5b430>
2025-01-31 15:31:37,262 - DEBUG - on stmt: jump 80
2025-01-31 15:31:37,263 - DEBUG - defs defaultdict(<class 'list'>,
            {'$10load_attr.3.1': [(<numba.core.ir.Assign object at 0x7c89eba18430>,
                                   0)],
             '$12binary_subscr.5': [(<numba.core.ir.Assign object at 0x7c89eba1b310>,
                                     90)],
             '$14compare_op.6': [(<numba.core.ir.Assign object at 0x7c89eba099c0>,
                                  90)],
             '$14load_global.5.1': [(<numba.core.ir.Assign object at 0x7c89eba18340>,
                                     0)],
             '$16load_attr.6.1': [(<numba.core.ir.Assign object at 0x7c89eba18b20>,
                                   0)],
             '$20binary_subscr.9': [(<numba.core.ir.Assign object at 0x7c89eba192d0>,
                                     90)],
             '$26binary_subscr.12': [(<numba.core.ir.Assign object at 0x7c89eba19150>,
                                      90)],
             '$28compare_op.13': [(<numba.core.ir.Assign object at 0x7c89eba0a7d0>,
                                   90)],
             '$30binary_and.14': [(<numba.core.ir.Assign object at 0x7c89eba2c040>,
                                   90)],
             '$32build_slice.13.1': [(<numba.core.ir.Assign object at 0x7c89eb9f73d0>,
                                      0)],
             '$32build_slice.14.1': [(<numba.core.ir.Assign object at 0x7c89eb9f7490>,
                                      0)],
             '$32return_value.15': [(<numba.core.ir.Assign object at 0x7c89eba2c490>,
                                     90)],
             '$44build_slice.19.1': [(<numba.core.ir.Assign object at 0x7c89eb9f7c70>,
                                      0)],
             '$44build_slice.20.1': [(<numba.core.ir.Assign object at 0x7c89eb9f7280>,
                                      0)],
             '$48load_global.21.1': [(<numba.core.ir.Assign object at 0x7c89eb9f6980>,
                                      0)],
             '$50load_global.22.1': [(<numba.core.ir.Assign object at 0x7c89eb9f6830>,
                                      0)],
             '$56call_function.25.1': [(<numba.core.ir.Assign object at 0x7c89eb9f6170>,
                                        0)],
             '$58unary_negative.26.1': [(<numba.core.ir.Assign object at 0x7c89eb9f6140>,
                                         0)],
             '$64binary_subscr.29.1': [(<numba.core.ir.Assign object at 0x7c89eb9f5cf0>,
                                        0)],
             '$66load_global.30.1': [(<numba.core.ir.Assign object at 0x7c89eb9f5c00>,
                                      0)],
             '$6binary_subscr.2': [(<numba.core.ir.Assign object at 0x7c89eba1b100>,
                                    90)],
             '$72call_function.33.1': [(<numba.core.ir.Assign object at 0x7c89eb9f55a0>,
                                        0)],
             '$74binary_subtract.34.1': [(<numba.core.ir.Assign object at 0x7c89eb9f53c0>,
                                          0)],
             '$76call_function.35.1': [(<numba.core.ir.Assign object at 0x7c89eb9f52d0>,
                                        0)],
             '$78get_iter.36.1': [(<numba.core.ir.Assign object at 0x7c89eb9f5000>,
                                   0)],
             '$80for_iter.1.1': [(<numba.core.ir.Assign object at 0x7c89eb9f5030>,
                                  80)],
             '$80for_iter.2.1': [(<numba.core.ir.Assign object at 0x7c89eb9f4e50>,
                                  80)],
             '$80for_iter.3.1': [(<numba.core.ir.Assign object at 0x7c89eb9f4be0>,
                                  80)],
             '$8load_global.2.1': [(<numba.core.ir.Assign object at 0x7c89eba18130>,
                                    0)],
             '$92return_value.1.1': [(<numba.core.ir.Assign object at 0x7c89eb9f41f0>,
                                      92)],
             '$const10.4': [(<numba.core.ir.Assign object at 0x7c89eba0be50>,
                             90)],
             '$const18.8': [(<numba.core.ir.Assign object at 0x7c89eba0a170>,
                             90)],
             '$const24.11': [(<numba.core.ir.Assign object at 0x7c89eba0b790>,
                              90)],
             '$const24.9.1': [(<numba.core.ir.Assign object at 0x7c89eba18730>,
                               0)],
             '$const28.11.1': [(<numba.core.ir.Assign object at 0x7c89eb9f7f70>,
                                0)],
             '$const30.12.1': [(<numba.core.ir.Assign object at 0x7c89eb9f7310>,
                                0)],
             '$const36.15.1': [(<numba.core.ir.Assign object at 0x7c89eb9f76d0>,
                                0)],
             '$const4.1': [(<numba.core.ir.Assign object at 0x7c89eba73100>,
                            90)],
             '$const40.17.1': [(<numba.core.ir.Assign object at 0x7c89eb9f7970>,
                                0)],
             '$const42.18.1': [(<numba.core.ir.Assign object at 0x7c89eb9f7af0>,
                                0)],
             '$const52.23.1': [(<numba.core.ir.Assign object at 0x7c89eb9f66e0>,
                                0)],
             '$const54.24.1': [(<numba.core.ir.Assign object at 0x7c89eb9f70d0>,
                                0)],
             '$const62.28.1': [(<numba.core.ir.Assign object at 0x7c89eb9f6260>,
                                0)],
             '$const68.31.1': [(<numba.core.ir.Assign object at 0x7c89eb9f5720>,
                                0)],
             '$const70.32.1': [(<numba.core.ir.Assign object at 0x7c89eb9f5780>,
                                0)],
             '$phi80.0.1': [(<numba.core.ir.Assign object at 0x7c89eba08af0>,
                             0)],
             '$phi82.1.1': [(<numba.core.ir.Assign object at 0x7c89eb9f5fc0>,
                             80)],
             'full_shape0': [(<numba.core.ir.Assign object at 0x7c89eba1a440>,
                              0)],
             'index00': [(<numba.core.ir.Assign object at 0x7c89eb9f4b20>, 82)],
             'out0': [(<numba.core.ir.Assign object at 0x7c89eba19300>, 0)],
             'stencil_index': [(<numba.core.ir.Assign object at 0x7c89eba1a8c0>,
                                90)],
             'stencil_index.1': [(<numba.core.ir.Assign object at 0x7c89eba1b4f0>,
                                  90)],
             'stencil_index.2': [(<numba.core.ir.Assign object at 0x7c89eba19e10>,
                                  90)],
             'stencil_index.3': [(<numba.core.ir.Assign object at 0x7c89eba19270>,
                                  90)],
             'x': [(<numba.core.ir.Assign object at 0x7c89eba18c10>, 0)]})
2025-01-31 15:31:37,263 - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x7c89eb9f6560>
2025-01-31 15:31:37,445 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=1051)
           2	LOAD_GLOBAL(arg=0, lineno=1065)
           4	LOAD_FAST(arg=0, lineno=1065)
           6	CALL_FUNCTION(arg=1, lineno=1065)
           8	LOAD_FAST(arg=1, lineno=1065)
          10	LOAD_CONST(arg=1, lineno=1065)
          12	LOAD_CONST(arg=1, lineno=1065)
          14	BUILD_SLICE(arg=2, lineno=1065)
          16	STORE_SUBSCR(arg=None, lineno=1065)
          18	LOAD_CONST(arg=1, lineno=1065)
          20	RETURN_VALUE(arg=None, lineno=1065)
2025-01-31 15:31:37,445 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:31:37,445 - DEBUG - stack: []
2025-01-31 15:31:37,445 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:31:37,445 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=1051)
2025-01-31 15:31:37,445 - DEBUG - stack []
2025-01-31 15:31:37,445 - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=1065)
2025-01-31 15:31:37,445 - DEBUG - stack []
2025-01-31 15:31:37,445 - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=1065)
2025-01-31 15:31:37,445 - DEBUG - stack ['$2load_global.0']
2025-01-31 15:31:37,445 - DEBUG - dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=1065)
2025-01-31 15:31:37,445 - DEBUG - stack ['$2load_global.0', '$x4.1']
2025-01-31 15:31:37,446 - DEBUG - dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=1065)
2025-01-31 15:31:37,446 - DEBUG - stack ['$6call_function.2']
2025-01-31 15:31:37,446 - DEBUG - dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=1065)
2025-01-31 15:31:37,446 - DEBUG - stack ['$6call_function.2', '$y8.3']
2025-01-31 15:31:37,446 - DEBUG - dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=1065)
2025-01-31 15:31:37,446 - DEBUG - stack ['$6call_function.2', '$y8.3', '$const10.4']
2025-01-31 15:31:37,446 - DEBUG - dispatch pc=14, inst=BUILD_SLICE(arg=2, lineno=1065)
2025-01-31 15:31:37,446 - DEBUG - stack ['$6call_function.2', '$y8.3', '$const10.4', '$const12.5']
2025-01-31 15:31:37,446 - DEBUG - dispatch pc=16, inst=STORE_SUBSCR(arg=None, lineno=1065)
2025-01-31 15:31:37,446 - DEBUG - stack ['$6call_function.2', '$y8.3', '$14build_slice.7']
2025-01-31 15:31:37,446 - DEBUG - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1065)
2025-01-31 15:31:37,446 - DEBUG - stack []
2025-01-31 15:31:37,446 - DEBUG - dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=1065)
2025-01-31 15:31:37,446 - DEBUG - stack ['$const18.8']
2025-01-31 15:31:37,446 - DEBUG - end state. edges=[]
2025-01-31 15:31:37,446 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:31:37,446 - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-01-31 15:31:37,446 - DEBUG - defmap: {}
2025-01-31 15:31:37,446 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:37,446 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:37,446 - DEBUG - keep phismap: {}
2025-01-31 15:31:37,446 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-01-31 15:31:37,446 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:31:37,446 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$x4.1'}), (6, {'func': '$2load_global.0', 'args': ['$x4.1'], 'res': '$6call_function.2'}), (8, {'res': '$y8.3'}), (10, {'res': '$const10.4'}), (12, {'res': '$const12.5'}), (14, {'start': '$const10.4', 'stop': '$const12.5', 'step': None, 'res': '$14build_slice.7', 'slicevar': '$14build_slice.6'}), (16, {'target': '$y8.3', 'index': '$14build_slice.7', 'value': '$6call_function.2'}), (18, {'res': '$const18.8'}), (20, {'retval': '$const18.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:37,447 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    y = arg(1, name=y)                       ['y']
    $2load_global.0 = global(_localmax_sten: <numba.stencils.stencil.StencilFunc object at 0x7c89eba2d4b0>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, utils.py:1051)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$6call_function.2', 'x']
    $const10.4 = const(NoneType, None)       ['$const10.4']
    $const12.5 = const(NoneType, None)       ['$const12.5']
    $14build_slice.6 = global(slice: <class 'slice'>) ['$14build_slice.6']
    $14build_slice.7 = call $14build_slice.6($const10.4, $const12.5, func=$14build_slice.6, args=(Var($const10.4, utils.py:1065), Var($const12.5, utils.py:1065)), kws=(), vararg=None, varkwarg=None, target=None) ['$14build_slice.6', '$14build_slice.7', '$const10.4', '$const12.5']
    y[$14build_slice.7] = $6call_function.2  ['$14build_slice.7', '$6call_function.2', 'y']
    $const18.8 = const(NoneType, None)       ['$const18.8']
    $20return_value.9 = cast(value=$const18.8) ['$20return_value.9', '$const18.8']
    return $20return_value.9                 ['$20return_value.9']

2025-01-31 15:31:37,450 - DEBUG - ==== SSA block analysis pass on 0
2025-01-31 15:31:37,450 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89eba5e5c0>
2025-01-31 15:31:37,450 - DEBUG - on stmt: x = arg(0, name=x)
2025-01-31 15:31:37,450 - DEBUG - on stmt: y = arg(1, name=y)
2025-01-31 15:31:37,451 - DEBUG - on stmt: $2load_global.0 = global(_localmax_sten: <numba.stencils.stencil.StencilFunc object at 0x7c89eba2d4b0>)
2025-01-31 15:31:37,451 - DEBUG - on stmt: $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, utils.py:1051)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:37,451 - DEBUG - on stmt: $const10.4 = const(NoneType, None)
2025-01-31 15:31:37,451 - DEBUG - on stmt: $const12.5 = const(NoneType, None)
2025-01-31 15:31:37,451 - DEBUG - on stmt: $14build_slice.6 = global(slice: <class 'slice'>)
2025-01-31 15:31:37,451 - DEBUG - on stmt: $14build_slice.7 = call $14build_slice.6($const10.4, $const12.5, func=$14build_slice.6, args=(Var($const10.4, utils.py:1065), Var($const12.5, utils.py:1065)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:37,451 - DEBUG - on stmt: y[slice(None, None, None)] = $6call_function.2
2025-01-31 15:31:37,451 - DEBUG - on stmt: $const18.8 = const(NoneType, None)
2025-01-31 15:31:37,451 - DEBUG - on stmt: $20return_value.9 = cast(value=$const18.8)
2025-01-31 15:31:37,451 - DEBUG - on stmt: return $20return_value.9
2025-01-31 15:31:37,451 - DEBUG - defs defaultdict(<class 'list'>,
            {'$14build_slice.6': [(<numba.core.ir.Assign object at 0x7c89e8c6e680>,
                                   0)],
             '$14build_slice.7': [(<numba.core.ir.Assign object at 0x7c89e8c6e7a0>,
                                   0)],
             '$20return_value.9': [(<numba.core.ir.Assign object at 0x7c89e8c6eb60>,
                                    0)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x7c89e8c6de40>,
                                  0)],
             '$6call_function.2': [(<numba.core.ir.Assign object at 0x7c89e8c6e140>,
                                    0)],
             '$const10.4': [(<numba.core.ir.Assign object at 0x7c89e8c6e380>,
                             0)],
             '$const12.5': [(<numba.core.ir.Assign object at 0x7c89e8c6e500>,
                             0)],
             '$const18.8': [(<numba.core.ir.Assign object at 0x7c89e8c6e9e0>,
                             0)],
             'x': [(<numba.core.ir.Assign object at 0x7c89e8c6d5d0>, 0)],
             'y': [(<numba.core.ir.Assign object at 0x7c89e8c6d360>, 0)]})
2025-01-31 15:31:37,451 - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x7c89eba5e5c0>
2025-01-31 15:31:37,464 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_FAST(arg=0, lineno=2)
           4	LOAD_ATTR(arg=0, lineno=2)
           6	STORE_FAST(arg=1, lineno=2)
           8	LOAD_GLOBAL(arg=1, lineno=3)
          10	LOAD_ATTR(arg=2, lineno=3)
          12	LOAD_FAST(arg=1, lineno=3)
          14	LOAD_GLOBAL(arg=1, lineno=3)
          16	LOAD_ATTR(arg=3, lineno=3)
          18	LOAD_CONST(arg=1, lineno=3)
          20	CALL_FUNCTION_KW(arg=2, lineno=3)
          22	STORE_FAST(arg=2, lineno=3)
          24	LOAD_CONST(arg=2, lineno=4)
          26	LOAD_FAST(arg=2, lineno=4)
          28	LOAD_CONST(arg=0, lineno=4)
          30	LOAD_CONST(arg=3, lineno=4)
          32	BUILD_SLICE(arg=2, lineno=4)
          34	STORE_SUBSCR(arg=None, lineno=4)
          36	LOAD_CONST(arg=2, lineno=5)
          38	LOAD_FAST(arg=2, lineno=5)
          40	LOAD_CONST(arg=4, lineno=5)
          42	LOAD_CONST(arg=0, lineno=5)
          44	BUILD_SLICE(arg=2, lineno=5)
          46	STORE_SUBSCR(arg=None, lineno=5)
          48	LOAD_GLOBAL(arg=4, lineno=6)
          50	LOAD_GLOBAL(arg=5, lineno=6)
          52	LOAD_CONST(arg=2, lineno=6)
          54	LOAD_CONST(arg=4, lineno=6)
          56	CALL_FUNCTION(arg=2, lineno=6)
          58	UNARY_NEGATIVE(arg=None, lineno=6)
          60	LOAD_FAST(arg=1, lineno=6)
          62	LOAD_CONST(arg=2, lineno=6)
          64	BINARY_SUBSCR(arg=None, lineno=6)
          66	LOAD_GLOBAL(arg=6, lineno=6)
          68	LOAD_CONST(arg=2, lineno=6)
          70	LOAD_CONST(arg=3, lineno=6)
          72	CALL_FUNCTION(arg=2, lineno=6)
          74	BINARY_SUBTRACT(arg=None, lineno=6)
          76	CALL_FUNCTION(arg=2, lineno=6)
          78	GET_ITER(arg=None, lineno=6)
>         80	FOR_ITER(arg=4, lineno=6)
          82	STORE_FAST(arg=3, lineno=6)
          84	LOAD_CONST(arg=2, lineno=7)
          86	STORE_FAST(arg=4, lineno=7)
          88	JUMP_ABSOLUTE(arg=41, lineno=7)
>         90	LOAD_FAST(arg=2, lineno=8)
          92	RETURN_VALUE(arg=None, lineno=8)
2025-01-31 15:31:37,464 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:31:37,464 - DEBUG - stack: []
2025-01-31 15:31:37,464 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:31:37,464 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=1)
2025-01-31 15:31:37,464 - DEBUG - stack []
2025-01-31 15:31:37,464 - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=2)
2025-01-31 15:31:37,464 - DEBUG - stack []
2025-01-31 15:31:37,464 - DEBUG - dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=2)
2025-01-31 15:31:37,464 - DEBUG - stack ['$x2.0']
2025-01-31 15:31:37,465 - DEBUG - dispatch pc=6, inst=STORE_FAST(arg=1, lineno=2)
2025-01-31 15:31:37,465 - DEBUG - stack ['$4load_attr.1']
2025-01-31 15:31:37,465 - DEBUG - dispatch pc=8, inst=LOAD_GLOBAL(arg=1, lineno=3)
2025-01-31 15:31:37,465 - DEBUG - stack []
2025-01-31 15:31:37,465 - DEBUG - dispatch pc=10, inst=LOAD_ATTR(arg=2, lineno=3)
2025-01-31 15:31:37,465 - DEBUG - stack ['$8load_global.2']
2025-01-31 15:31:37,465 - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=3)
2025-01-31 15:31:37,465 - DEBUG - stack ['$10load_attr.3']
2025-01-31 15:31:37,465 - DEBUG - dispatch pc=14, inst=LOAD_GLOBAL(arg=1, lineno=3)
2025-01-31 15:31:37,465 - DEBUG - stack ['$10load_attr.3', '$full_shape012.4']
2025-01-31 15:31:37,465 - DEBUG - dispatch pc=16, inst=LOAD_ATTR(arg=3, lineno=3)
2025-01-31 15:31:37,465 - DEBUG - stack ['$10load_attr.3', '$full_shape012.4', '$14load_global.5']
2025-01-31 15:31:37,465 - DEBUG - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=3)
2025-01-31 15:31:37,465 - DEBUG - stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6']
2025-01-31 15:31:37,465 - DEBUG - dispatch pc=20, inst=CALL_FUNCTION_KW(arg=2, lineno=3)
2025-01-31 15:31:37,465 - DEBUG - stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6', '$const18.7']
2025-01-31 15:31:37,465 - DEBUG - dispatch pc=22, inst=STORE_FAST(arg=2, lineno=3)
2025-01-31 15:31:37,465 - DEBUG - stack ['$20call_function_kw.8']
2025-01-31 15:31:37,465 - DEBUG - dispatch pc=24, inst=LOAD_CONST(arg=2, lineno=4)
2025-01-31 15:31:37,465 - DEBUG - stack []
2025-01-31 15:31:37,465 - DEBUG - dispatch pc=26, inst=LOAD_FAST(arg=2, lineno=4)
2025-01-31 15:31:37,465 - DEBUG - stack ['$const24.9']
2025-01-31 15:31:37,465 - DEBUG - dispatch pc=28, inst=LOAD_CONST(arg=0, lineno=4)
2025-01-31 15:31:37,465 - DEBUG - stack ['$const24.9', '$out026.10']
2025-01-31 15:31:37,465 - DEBUG - dispatch pc=30, inst=LOAD_CONST(arg=3, lineno=4)
2025-01-31 15:31:37,465 - DEBUG - stack ['$const24.9', '$out026.10', '$const28.11']
2025-01-31 15:31:37,465 - DEBUG - dispatch pc=32, inst=BUILD_SLICE(arg=2, lineno=4)
2025-01-31 15:31:37,465 - DEBUG - stack ['$const24.9', '$out026.10', '$const28.11', '$const30.12']
2025-01-31 15:31:37,465 - DEBUG - dispatch pc=34, inst=STORE_SUBSCR(arg=None, lineno=4)
2025-01-31 15:31:37,466 - DEBUG - stack ['$const24.9', '$out026.10', '$32build_slice.14']
2025-01-31 15:31:37,466 - DEBUG - dispatch pc=36, inst=LOAD_CONST(arg=2, lineno=5)
2025-01-31 15:31:37,466 - DEBUG - stack []
2025-01-31 15:31:37,466 - DEBUG - dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=5)
2025-01-31 15:31:37,466 - DEBUG - stack ['$const36.15']
2025-01-31 15:31:37,466 - DEBUG - dispatch pc=40, inst=LOAD_CONST(arg=4, lineno=5)
2025-01-31 15:31:37,466 - DEBUG - stack ['$const36.15', '$out038.16']
2025-01-31 15:31:37,466 - DEBUG - dispatch pc=42, inst=LOAD_CONST(arg=0, lineno=5)
2025-01-31 15:31:37,466 - DEBUG - stack ['$const36.15', '$out038.16', '$const40.17']
2025-01-31 15:31:37,466 - DEBUG - dispatch pc=44, inst=BUILD_SLICE(arg=2, lineno=5)
2025-01-31 15:31:37,466 - DEBUG - stack ['$const36.15', '$out038.16', '$const40.17', '$const42.18']
2025-01-31 15:31:37,466 - DEBUG - dispatch pc=46, inst=STORE_SUBSCR(arg=None, lineno=5)
2025-01-31 15:31:37,466 - DEBUG - stack ['$const36.15', '$out038.16', '$44build_slice.20']
2025-01-31 15:31:37,466 - DEBUG - dispatch pc=48, inst=LOAD_GLOBAL(arg=4, lineno=6)
2025-01-31 15:31:37,466 - DEBUG - stack []
2025-01-31 15:31:37,466 - DEBUG - dispatch pc=50, inst=LOAD_GLOBAL(arg=5, lineno=6)
2025-01-31 15:31:37,466 - DEBUG - stack ['$48load_global.21']
2025-01-31 15:31:37,466 - DEBUG - dispatch pc=52, inst=LOAD_CONST(arg=2, lineno=6)
2025-01-31 15:31:37,466 - DEBUG - stack ['$48load_global.21', '$50load_global.22']
2025-01-31 15:31:37,466 - DEBUG - dispatch pc=54, inst=LOAD_CONST(arg=4, lineno=6)
2025-01-31 15:31:37,466 - DEBUG - stack ['$48load_global.21', '$50load_global.22', '$const52.23']
2025-01-31 15:31:37,466 - DEBUG - dispatch pc=56, inst=CALL_FUNCTION(arg=2, lineno=6)
2025-01-31 15:31:37,466 - DEBUG - stack ['$48load_global.21', '$50load_global.22', '$const52.23', '$const54.24']
2025-01-31 15:31:37,466 - DEBUG - dispatch pc=58, inst=UNARY_NEGATIVE(arg=None, lineno=6)
2025-01-31 15:31:37,466 - DEBUG - stack ['$48load_global.21', '$56call_function.25']
2025-01-31 15:31:37,466 - DEBUG - dispatch pc=60, inst=LOAD_FAST(arg=1, lineno=6)
2025-01-31 15:31:37,466 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26']
2025-01-31 15:31:37,466 - DEBUG - dispatch pc=62, inst=LOAD_CONST(arg=2, lineno=6)
2025-01-31 15:31:37,466 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27']
2025-01-31 15:31:37,467 - DEBUG - dispatch pc=64, inst=BINARY_SUBSCR(arg=None, lineno=6)
2025-01-31 15:31:37,467 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27', '$const62.28']
2025-01-31 15:31:37,467 - DEBUG - dispatch pc=66, inst=LOAD_GLOBAL(arg=6, lineno=6)
2025-01-31 15:31:37,467 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29']
2025-01-31 15:31:37,467 - DEBUG - dispatch pc=68, inst=LOAD_CONST(arg=2, lineno=6)
2025-01-31 15:31:37,467 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30']
2025-01-31 15:31:37,467 - DEBUG - dispatch pc=70, inst=LOAD_CONST(arg=3, lineno=6)
2025-01-31 15:31:37,467 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31']
2025-01-31 15:31:37,467 - DEBUG - dispatch pc=72, inst=CALL_FUNCTION(arg=2, lineno=6)
2025-01-31 15:31:37,467 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31', '$const70.32']
2025-01-31 15:31:37,467 - DEBUG - dispatch pc=74, inst=BINARY_SUBTRACT(arg=None, lineno=6)
2025-01-31 15:31:37,467 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$72call_function.33']
2025-01-31 15:31:37,467 - DEBUG - dispatch pc=76, inst=CALL_FUNCTION(arg=2, lineno=6)
2025-01-31 15:31:37,467 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34']
2025-01-31 15:31:37,467 - DEBUG - dispatch pc=78, inst=GET_ITER(arg=None, lineno=6)
2025-01-31 15:31:37,467 - DEBUG - stack ['$76call_function.35']
2025-01-31 15:31:37,467 - DEBUG - end state. edges=[Edge(pc=80, stack=('$78get_iter.36',), blockstack=(), npush=0)]
2025-01-31 15:31:37,467 - DEBUG - pending: deque([State(pc_initial=80 nstack_initial=1)])
2025-01-31 15:31:37,467 - DEBUG - stack: ['$phi80.0']
2025-01-31 15:31:37,467 - DEBUG - state.pc_initial: State(pc_initial=80 nstack_initial=1)
2025-01-31 15:31:37,467 - DEBUG - dispatch pc=80, inst=FOR_ITER(arg=4, lineno=6)
2025-01-31 15:31:37,467 - DEBUG - stack ['$phi80.0']
2025-01-31 15:31:37,467 - DEBUG - end state. edges=[Edge(pc=90, stack=(), blockstack=(), npush=0), Edge(pc=82, stack=('$phi80.0', '$80for_iter.2'), blockstack=(), npush=0)]
2025-01-31 15:31:37,467 - DEBUG - pending: deque([State(pc_initial=90 nstack_initial=0), State(pc_initial=82 nstack_initial=2)])
2025-01-31 15:31:37,467 - DEBUG - stack: []
2025-01-31 15:31:37,467 - DEBUG - state.pc_initial: State(pc_initial=90 nstack_initial=0)
2025-01-31 15:31:37,467 - DEBUG - dispatch pc=90, inst=LOAD_FAST(arg=2, lineno=8)
2025-01-31 15:31:37,468 - DEBUG - stack []
2025-01-31 15:31:37,468 - DEBUG - dispatch pc=92, inst=RETURN_VALUE(arg=None, lineno=8)
2025-01-31 15:31:37,468 - DEBUG - stack ['$out090.0']
2025-01-31 15:31:37,468 - DEBUG - end state. edges=[]
2025-01-31 15:31:37,468 - DEBUG - pending: deque([State(pc_initial=82 nstack_initial=2)])
2025-01-31 15:31:37,468 - DEBUG - stack: ['$phi82.0', '$phi82.1']
2025-01-31 15:31:37,468 - DEBUG - state.pc_initial: State(pc_initial=82 nstack_initial=2)
2025-01-31 15:31:37,468 - DEBUG - dispatch pc=82, inst=STORE_FAST(arg=3, lineno=6)
2025-01-31 15:31:37,468 - DEBUG - stack ['$phi82.0', '$phi82.1']
2025-01-31 15:31:37,468 - DEBUG - dispatch pc=84, inst=LOAD_CONST(arg=2, lineno=7)
2025-01-31 15:31:37,468 - DEBUG - stack ['$phi82.0']
2025-01-31 15:31:37,468 - DEBUG - dispatch pc=86, inst=STORE_FAST(arg=4, lineno=7)
2025-01-31 15:31:37,468 - DEBUG - stack ['$phi82.0', '$const84.2']
2025-01-31 15:31:37,468 - DEBUG - dispatch pc=88, inst=JUMP_ABSOLUTE(arg=41, lineno=7)
2025-01-31 15:31:37,468 - DEBUG - stack ['$phi82.0']
2025-01-31 15:31:37,468 - DEBUG - end state. edges=[Edge(pc=80, stack=('$phi82.0',), blockstack=(), npush=0)]
2025-01-31 15:31:37,468 - DEBUG - pending: deque([State(pc_initial=80 nstack_initial=1)])
2025-01-31 15:31:37,468 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:31:37,468 - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=80 nstack_initial=1): {'$phi80.0'},
             State(pc_initial=82 nstack_initial=2): {'$phi82.1'},
             State(pc_initial=90 nstack_initial=0): set()})
2025-01-31 15:31:37,468 - DEBUG - defmap: {'$phi80.0': State(pc_initial=0 nstack_initial=0),
 '$phi82.1': State(pc_initial=80 nstack_initial=1)}
2025-01-31 15:31:37,468 - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi82.0', State(pc_initial=82 nstack_initial=2))},
             '$phi82.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-01-31 15:31:37,469 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-01-31 15:31:37,469 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-01-31 15:31:37,469 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-01-31 15:31:37,469 - DEBUG - keep phismap: {'$phi80.0': {('$78get_iter.36', State(pc_initial=0 nstack_initial=0))},
 '$phi82.1': {('$80for_iter.2', State(pc_initial=80 nstack_initial=1))}}
2025-01-31 15:31:37,469 - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi80.0': '$78get_iter.36'},
             State(pc_initial=80 nstack_initial=1): {'$phi82.1': '$80for_iter.2'}})
2025-01-31 15:31:37,469 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:31:37,469 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'item': '$x2.0', 'res': '$4load_attr.1'}), (6, {'value': '$4load_attr.1'}), (8, {'res': '$8load_global.2'}), (10, {'item': '$8load_global.2', 'res': '$10load_attr.3'}), (12, {'res': '$full_shape012.4'}), (14, {'res': '$14load_global.5'}), (16, {'item': '$14load_global.5', 'res': '$16load_attr.6'}), (18, {'res': '$const18.7'}), (20, {'func': '$10load_attr.3', 'args': ['$full_shape012.4', '$16load_attr.6'], 'names': '$const18.7', 'res': '$20call_function_kw.8'}), (22, {'value': '$20call_function_kw.8'}), (24, {'res': '$const24.9'}), (26, {'res': '$out026.10'}), (28, {'res': '$const28.11'}), (30, {'res': '$const30.12'}), (32, {'start': '$const28.11', 'stop': '$const30.12', 'step': None, 'res': '$32build_slice.14', 'slicevar': '$32build_slice.13'}), (34, {'target': '$out026.10', 'index': '$32build_slice.14', 'value': '$const24.9'}), (36, {'res': '$const36.15'}), (38, {'res': '$out038.16'}), (40, {'res': '$const40.17'}), (42, {'res': '$const42.18'}), (44, {'start': '$const40.17', 'stop': '$const42.18', 'step': None, 'res': '$44build_slice.20', 'slicevar': '$44build_slice.19'}), (46, {'target': '$out038.16', 'index': '$44build_slice.20', 'value': '$const36.15'}), (48, {'res': '$48load_global.21'}), (50, {'res': '$50load_global.22'}), (52, {'res': '$const52.23'}), (54, {'res': '$const54.24'}), (56, {'func': '$50load_global.22', 'args': ['$const52.23', '$const54.24'], 'res': '$56call_function.25'}), (58, {'value': '$56call_function.25', 'res': '$58unary_negative.26'}), (60, {'res': '$full_shape060.27'}), (62, {'res': '$const62.28'}), (64, {'index': '$const62.28', 'target': '$full_shape060.27', 'res': '$64binary_subscr.29'}), (66, {'res': '$66load_global.30'}), (68, {'res': '$const68.31'}), (70, {'res': '$const70.32'}), (72, {'func': '$66load_global.30', 'args': ['$const68.31', '$const70.32'], 'res': '$72call_function.33'}), (74, {'lhs': '$64binary_subscr.29', 'rhs': '$72call_function.33', 'res': '$74binary_subtract.34'}), (76, {'func': '$48load_global.21', 'args': ['$58unary_negative.26', '$74binary_subtract.34'], 'res': '$76call_function.35'}), (78, {'value': '$76call_function.35', 'res': '$78get_iter.36'})), outgoing_phis={'$phi80.0': '$78get_iter.36'}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$78get_iter.36',)})
2025-01-31 15:31:37,470 - DEBUG - block_infos State(pc_initial=80 nstack_initial=1):
AdaptBlockInfo(insts=((80, {'iterator': '$phi80.0', 'pair': '$80for_iter.1', 'indval': '$80for_iter.2', 'pred': '$80for_iter.3'}),), outgoing_phis={'$phi82.1': '$80for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: (), 82: ('$phi80.0', '$80for_iter.2')})
2025-01-31 15:31:37,470 - DEBUG - block_infos State(pc_initial=82 nstack_initial=2):
AdaptBlockInfo(insts=((82, {'value': '$phi82.1'}), (84, {'res': '$const84.2'}), (86, {'value': '$const84.2'}), (88, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$phi82.0',)})
2025-01-31 15:31:37,470 - DEBUG - block_infos State(pc_initial=90 nstack_initial=0):
AdaptBlockInfo(insts=((90, {'res': '$out090.0'}), (92, {'retval': '$out090.0', 'castval': '$92return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:37,471 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    full_shape0 = getattr(value=x, attr=shape) ['full_shape0', 'x']
    $8load_global.2 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>) ['$8load_global.2']
    $10load_attr.3 = getattr(value=$8load_global.2, attr=empty) ['$10load_attr.3', '$8load_global.2']
    $14load_global.5 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>) ['$14load_global.5']
    $16load_attr.6 = getattr(value=$14load_global.5, attr=bool_) ['$14load_global.5', '$16load_attr.6']
    out0 = call $10load_attr.3(full_shape0, func=$10load_attr.3, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6, <string>:3))], vararg=None, varkwarg=None, target=None) ['$10load_attr.3', '$16load_attr.6', 'full_shape0', 'out0']
    $const24.9 = const(int, 0)               ['$const24.9']
    $const28.11 = const(NoneType, None)      ['$const28.11']
    $const30.12 = const(int, 1)              ['$const30.12']
    $32build_slice.13 = global(slice: <class 'slice'>) ['$32build_slice.13']
    $32build_slice.14 = call $32build_slice.13($const28.11, $const30.12, func=$32build_slice.13, args=(Var($const28.11, <string>:4), Var($const30.12, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None) ['$32build_slice.13', '$32build_slice.14', '$const28.11', '$const30.12']
    out0[$32build_slice.14] = $const24.9     ['$32build_slice.14', '$const24.9', 'out0']
    $const36.15 = const(int, 0)              ['$const36.15']
    $const40.17 = const(int, -1)             ['$const40.17']
    $const42.18 = const(NoneType, None)      ['$const42.18']
    $44build_slice.19 = global(slice: <class 'slice'>) ['$44build_slice.19']
    $44build_slice.20 = call $44build_slice.19($const40.17, $const42.18, func=$44build_slice.19, args=(Var($const40.17, <string>:5), Var($const42.18, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None) ['$44build_slice.19', '$44build_slice.20', '$const40.17', '$const42.18']
    out0[$44build_slice.20] = $const36.15    ['$44build_slice.20', '$const36.15', 'out0']
    $48load_global.21 = global(range: <class 'range'>) ['$48load_global.21']
    $50load_global.22 = global(min: <built-in function min>) ['$50load_global.22']
    $const52.23 = const(int, 0)              ['$const52.23']
    $const54.24 = const(int, -1)             ['$const54.24']
    $56call_function.25 = call $50load_global.22($const52.23, $const54.24, func=$50load_global.22, args=[Var($const52.23, <string>:6), Var($const54.24, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$50load_global.22', '$56call_function.25', '$const52.23', '$const54.24']
    $58unary_negative.26 = unary(fn=<built-in function neg>, value=$56call_function.25) ['$56call_function.25', '$58unary_negative.26']
    $const62.28 = const(int, 0)              ['$const62.28']
    $64binary_subscr.29 = getitem(value=full_shape0, index=$const62.28, fn=<built-in function getitem>) ['$64binary_subscr.29', '$const62.28', 'full_shape0']
    $66load_global.30 = global(max: <built-in function max>) ['$66load_global.30']
    $const68.31 = const(int, 0)              ['$const68.31']
    $const70.32 = const(int, 1)              ['$const70.32']
    $72call_function.33 = call $66load_global.30($const68.31, $const70.32, func=$66load_global.30, args=[Var($const68.31, <string>:6), Var($const70.32, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$66load_global.30', '$72call_function.33', '$const68.31', '$const70.32']
    $74binary_subtract.34 = $64binary_subscr.29 - $72call_function.33 ['$64binary_subscr.29', '$72call_function.33', '$74binary_subtract.34']
    $76call_function.35 = call $48load_global.21($58unary_negative.26, $74binary_subtract.34, func=$48load_global.21, args=[Var($58unary_negative.26, <string>:6), Var($74binary_subtract.34, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34', '$76call_function.35']
    $78get_iter.36 = getiter(value=$76call_function.35) ['$76call_function.35', '$78get_iter.36']
    $phi80.0 = $78get_iter.36                ['$78get_iter.36', '$phi80.0']
    jump 80                                  []
label 80:
    $80for_iter.1 = iternext(value=$phi80.0) ['$80for_iter.1', '$phi80.0']
    $80for_iter.2 = pair_first(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.2']
    $80for_iter.3 = pair_second(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.3']
    $phi82.1 = $80for_iter.2                 ['$80for_iter.2', '$phi82.1']
    branch $80for_iter.3, 82, 90             ['$80for_iter.3']
label 82:
    index00 = $phi82.1                       ['$phi82.1', 'index00']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 80                                  []
label 90:
    $92return_value.1 = cast(value=out0)     ['$92return_value.1', 'out0']
    return $92return_value.1                 ['$92return_value.1']

2025-01-31 15:31:37,478 - DEBUG - ==== SSA block analysis pass on 0
2025-01-31 15:31:37,478 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8cda6e0>
2025-01-31 15:31:37,478 - DEBUG - on stmt: x = arg(0, name=x)
2025-01-31 15:31:37,478 - DEBUG - on stmt: full_shape0 = getattr(value=x, attr=shape)
2025-01-31 15:31:37,478 - DEBUG - on stmt: $8load_global.2.1 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:37,478 - DEBUG - on stmt: $10load_attr.3.1 = getattr(value=$8load_global.2.1, attr=empty)
2025-01-31 15:31:37,478 - DEBUG - on stmt: $14load_global.5.1 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:37,478 - DEBUG - on stmt: $16load_attr.6.1 = getattr(value=$14load_global.5.1, attr=bool_)
2025-01-31 15:31:37,478 - DEBUG - on stmt: out0 = call $10load_attr.3.1(full_shape0, func=$10load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:37,478 - DEBUG - on stmt: $const24.9.1 = const(int, 0)
2025-01-31 15:31:37,478 - DEBUG - on stmt: $const28.11.1 = const(NoneType, None)
2025-01-31 15:31:37,478 - DEBUG - on stmt: $const30.12.1 = const(int, 1)
2025-01-31 15:31:37,479 - DEBUG - on stmt: $32build_slice.13.1 = global(slice: <class 'slice'>)
2025-01-31 15:31:37,479 - DEBUG - on stmt: $32build_slice.14.1 = call $32build_slice.13.1($const28.11.1, $const30.12.1, func=$32build_slice.13.1, args=(Var($const28.11.1, <string>:4), Var($const30.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:37,479 - DEBUG - on stmt: out0[$32build_slice.14.1] = $const24.9.1
2025-01-31 15:31:37,479 - DEBUG - on stmt: $const36.15.1 = const(int, 0)
2025-01-31 15:31:37,479 - DEBUG - on stmt: $const40.17.1 = const(int, -1)
2025-01-31 15:31:37,479 - DEBUG - on stmt: $const42.18.1 = const(NoneType, None)
2025-01-31 15:31:37,479 - DEBUG - on stmt: $44build_slice.19.1 = global(slice: <class 'slice'>)
2025-01-31 15:31:37,479 - DEBUG - on stmt: $44build_slice.20.1 = call $44build_slice.19.1($const40.17.1, $const42.18.1, func=$44build_slice.19.1, args=(Var($const40.17.1, <string>:5), Var($const42.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:37,479 - DEBUG - on stmt: out0[$44build_slice.20.1] = $const36.15.1
2025-01-31 15:31:37,479 - DEBUG - on stmt: $48load_global.21.1 = global(range: <class 'range'>)
2025-01-31 15:31:37,479 - DEBUG - on stmt: $50load_global.22.1 = global(min: <built-in function min>)
2025-01-31 15:31:37,479 - DEBUG - on stmt: $const52.23.1 = const(int, 0)
2025-01-31 15:31:37,479 - DEBUG - on stmt: $const54.24.1 = const(int, -1)
2025-01-31 15:31:37,479 - DEBUG - on stmt: $56call_function.25.1 = call $50load_global.22.1($const52.23.1, $const54.24.1, func=$50load_global.22.1, args=[Var($const52.23.1, <string>:6), Var($const54.24.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:37,479 - DEBUG - on stmt: $58unary_negative.26.1 = unary(fn=<built-in function neg>, value=$56call_function.25.1)
2025-01-31 15:31:37,479 - DEBUG - on stmt: $const62.28.1 = const(int, 0)
2025-01-31 15:31:37,479 - DEBUG - on stmt: $64binary_subscr.29.1 = getitem(value=full_shape0, index=$const62.28.1, fn=<built-in function getitem>)
2025-01-31 15:31:37,479 - DEBUG - on stmt: $66load_global.30.1 = global(max: <built-in function max>)
2025-01-31 15:31:37,479 - DEBUG - on stmt: $const68.31.1 = const(int, 0)
2025-01-31 15:31:37,479 - DEBUG - on stmt: $const70.32.1 = const(int, 1)
2025-01-31 15:31:37,479 - DEBUG - on stmt: $72call_function.33.1 = call $66load_global.30.1($const68.31.1, $const70.32.1, func=$66load_global.30.1, args=[Var($const68.31.1, <string>:6), Var($const70.32.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:37,479 - DEBUG - on stmt: $74binary_subtract.34.1 = $64binary_subscr.29.1 - $72call_function.33.1
2025-01-31 15:31:37,479 - DEBUG - on stmt: $76call_function.35.1 = call $48load_global.21.1($58unary_negative.26.1, $74binary_subtract.34.1, func=$48load_global.21.1, args=[Var($58unary_negative.26.1, <string>:6), Var($74binary_subtract.34.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:37,480 - DEBUG - on stmt: $78get_iter.36.1 = getiter(value=$76call_function.35.1)
2025-01-31 15:31:37,480 - DEBUG - on stmt: $phi80.0.1 = $78get_iter.36.1
2025-01-31 15:31:37,480 - DEBUG - on stmt: jump 80
2025-01-31 15:31:37,480 - DEBUG - ==== SSA block analysis pass on 80
2025-01-31 15:31:37,480 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8cda6e0>
2025-01-31 15:31:37,480 - DEBUG - on stmt: $80for_iter.1.1 = iternext(value=$phi80.0.1)
2025-01-31 15:31:37,480 - DEBUG - on stmt: $80for_iter.2.1 = pair_first(value=$80for_iter.1.1)
2025-01-31 15:31:37,480 - DEBUG - on stmt: $80for_iter.3.1 = pair_second(value=$80for_iter.1.1)
2025-01-31 15:31:37,480 - DEBUG - on stmt: $phi82.1.1 = $80for_iter.2.1
2025-01-31 15:31:37,480 - DEBUG - on stmt: branch $80for_iter.3.1, 82, 92
2025-01-31 15:31:37,480 - DEBUG - ==== SSA block analysis pass on 82
2025-01-31 15:31:37,480 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8cda6e0>
2025-01-31 15:31:37,480 - DEBUG - on stmt: index00 = $phi82.1.1
2025-01-31 15:31:37,480 - DEBUG - on stmt: jump 90
2025-01-31 15:31:37,480 - DEBUG - ==== SSA block analysis pass on 92
2025-01-31 15:31:37,480 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8cda6e0>
2025-01-31 15:31:37,480 - DEBUG - on stmt: $92return_value.1.1 = cast(value=out0)
2025-01-31 15:31:37,480 - DEBUG - on stmt: return $92return_value.1.1
2025-01-31 15:31:37,480 - DEBUG - ==== SSA block analysis pass on 90
2025-01-31 15:31:37,480 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8cda6e0>
2025-01-31 15:31:37,480 - DEBUG - on stmt: $const4.1 = const(int, 0)
2025-01-31 15:31:37,480 - DEBUG - on stmt: stencil_index = $const4.1 + index00
2025-01-31 15:31:37,480 - DEBUG - on stmt: $6binary_subscr.2 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-01-31 15:31:37,480 - DEBUG - on stmt: $const10.4 = const(int, -1)
2025-01-31 15:31:37,480 - DEBUG - on stmt: stencil_index.1 = $const10.4 + index00
2025-01-31 15:31:37,480 - DEBUG - on stmt: $12binary_subscr.5 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2025-01-31 15:31:37,480 - DEBUG - on stmt: $14compare_op.6 = $6binary_subscr.2 > $12binary_subscr.5
2025-01-31 15:31:37,480 - DEBUG - on stmt: $const18.8 = const(int, 0)
2025-01-31 15:31:37,481 - DEBUG - on stmt: stencil_index.2 = $const18.8 + index00
2025-01-31 15:31:37,481 - DEBUG - on stmt: $20binary_subscr.9 = getitem(value=x, index=stencil_index.2, fn=<built-in function getitem>)
2025-01-31 15:31:37,481 - DEBUG - on stmt: $const24.11 = const(int, 1)
2025-01-31 15:31:37,481 - DEBUG - on stmt: stencil_index.3 = $const24.11 + index00
2025-01-31 15:31:37,481 - DEBUG - on stmt: $26binary_subscr.12 = getitem(value=x, index=stencil_index.3, fn=<built-in function getitem>)
2025-01-31 15:31:37,481 - DEBUG - on stmt: $28compare_op.13 = $20binary_subscr.9 >= $26binary_subscr.12
2025-01-31 15:31:37,481 - DEBUG - on stmt: $30binary_and.14 = $14compare_op.6 & $28compare_op.13
2025-01-31 15:31:37,481 - DEBUG - on stmt: $32return_value.15 = cast(value=$30binary_and.14)
2025-01-31 15:31:37,481 - DEBUG - on stmt: out0[index00] = $32return_value.15
2025-01-31 15:31:37,481 - DEBUG - on stmt: jump 91
2025-01-31 15:31:37,481 - DEBUG - ==== SSA block analysis pass on 91
2025-01-31 15:31:37,481 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8cda6e0>
2025-01-31 15:31:37,481 - DEBUG - on stmt: jump 80
2025-01-31 15:31:37,482 - DEBUG - defs defaultdict(<class 'list'>,
            {'$10load_attr.3.1': [(<numba.core.ir.Assign object at 0x7c89e8cc23e0>,
                                   0)],
             '$12binary_subscr.5': [(<numba.core.ir.Assign object at 0x7c89e8cc0f10>,
                                     90)],
             '$14compare_op.6': [(<numba.core.ir.Assign object at 0x7c89e8c6f8b0>,
                                  90)],
             '$14load_global.5.1': [(<numba.core.ir.Assign object at 0x7c89e8cc1ff0>,
                                     0)],
             '$16load_attr.6.1': [(<numba.core.ir.Assign object at 0x7c89e8cc1e70>,
                                   0)],
             '$20binary_subscr.9': [(<numba.core.ir.Assign object at 0x7c89e8cc1150>,
                                     90)],
             '$26binary_subscr.12': [(<numba.core.ir.Assign object at 0x7c89e8cc1390>,
                                      90)],
             '$28compare_op.13': [(<numba.core.ir.Assign object at 0x7c89e8cb5570>,
                                   90)],
             '$30binary_and.14': [(<numba.core.ir.Assign object at 0x7c89e8cb5c30>,
                                   90)],
             '$32build_slice.13.1': [(<numba.core.ir.Assign object at 0x7c89e8cc3100>,
                                      0)],
             '$32build_slice.14.1': [(<numba.core.ir.Assign object at 0x7c89e8cc3220>,
                                      0)],
             '$32return_value.15': [(<numba.core.ir.Assign object at 0x7c89e8cb6620>,
                                     90)],
             '$44build_slice.19.1': [(<numba.core.ir.Assign object at 0x7c89e8cc3a00>,
                                      0)],
             '$44build_slice.20.1': [(<numba.core.ir.Assign object at 0x7c89e8cc3b20>,
                                      0)],
             '$48load_global.21.1': [(<numba.core.ir.Assign object at 0x7c89e8cc3d60>,
                                      0)],
             '$50load_global.22.1': [(<numba.core.ir.Assign object at 0x7c89e8cc3ee0>,
                                      0)],
             '$56call_function.25.1': [(<numba.core.ir.Assign object at 0x7c89e8cd0400>,
                                        0)],
             '$58unary_negative.26.1': [(<numba.core.ir.Assign object at 0x7c89e8cd0520>,
                                         0)],
             '$64binary_subscr.29.1': [(<numba.core.ir.Assign object at 0x7c89e8cd0970>,
                                        0)],
             '$66load_global.30.1': [(<numba.core.ir.Assign object at 0x7c89e8cd0ac0>,
                                      0)],
             '$6binary_subscr.2': [(<numba.core.ir.Assign object at 0x7c89e8cb5480>,
                                    90)],
             '$72call_function.33.1': [(<numba.core.ir.Assign object at 0x7c89e8cd0fa0>,
                                        0)],
             '$74binary_subtract.34.1': [(<numba.core.ir.Assign object at 0x7c89e8cd10f0>,
                                          0)],
             '$76call_function.35.1': [(<numba.core.ir.Assign object at 0x7c89e8cd12a0>,
                                        0)],
             '$78get_iter.36.1': [(<numba.core.ir.Assign object at 0x7c89e8cd13c0>,
                                   0)],
             '$80for_iter.1.1': [(<numba.core.ir.Assign object at 0x7c89e8cd14b0>,
                                  80)],
             '$80for_iter.2.1': [(<numba.core.ir.Assign object at 0x7c89e8cd15d0>,
                                  80)],
             '$80for_iter.3.1': [(<numba.core.ir.Assign object at 0x7c89e8cd16f0>,
                                  80)],
             '$8load_global.2.1': [(<numba.core.ir.Assign object at 0x7c89e8cc2560>,
                                    0)],
             '$92return_value.1.1': [(<numba.core.ir.Assign object at 0x7c89e8cd2020>,
                                      92)],
             '$const10.4': [(<numba.core.ir.Assign object at 0x7c89e8c6f8e0>,
                             90)],
             '$const18.8': [(<numba.core.ir.Assign object at 0x7c89e8c6fb50>,
                             90)],
             '$const24.11': [(<numba.core.ir.Assign object at 0x7c89e8cb43d0>,
                              90)],
             '$const24.9.1': [(<numba.core.ir.Assign object at 0x7c89e8cc1720>,
                               0)],
             '$const28.11.1': [(<numba.core.ir.Assign object at 0x7c89e8cc13f0>,
                                0)],
             '$const30.12.1': [(<numba.core.ir.Assign object at 0x7c89e8cc2f80>,
                                0)],
             '$const36.15.1': [(<numba.core.ir.Assign object at 0x7c89e8cc3460>,
                                0)],
             '$const4.1': [(<numba.core.ir.Assign object at 0x7c89e8caddb0>,
                            90)],
             '$const40.17.1': [(<numba.core.ir.Assign object at 0x7c89e8cc3700>,
                                0)],
             '$const42.18.1': [(<numba.core.ir.Assign object at 0x7c89e8cc3880>,
                                0)],
             '$const52.23.1': [(<numba.core.ir.Assign object at 0x7c89e8cd00a0>,
                                0)],
             '$const54.24.1': [(<numba.core.ir.Assign object at 0x7c89e8cd0220>,
                                0)],
             '$const62.28.1': [(<numba.core.ir.Assign object at 0x7c89e8cd07c0>,
                                0)],
             '$const68.31.1': [(<numba.core.ir.Assign object at 0x7c89e8cd0c40>,
                                0)],
             '$const70.32.1': [(<numba.core.ir.Assign object at 0x7c89e8cd0dc0>,
                                0)],
             '$phi80.0.1': [(<numba.core.ir.Assign object at 0x7c89e8cc28f0>,
                             0)],
             '$phi82.1.1': [(<numba.core.ir.Assign object at 0x7c89e8cd0640>,
                             80)],
             'full_shape0': [(<numba.core.ir.Assign object at 0x7c89e8cc2800>,
                              0)],
             'index00': [(<numba.core.ir.Assign object at 0x7c89e8cd19c0>, 82)],
             'out0': [(<numba.core.ir.Assign object at 0x7c89e8cc18a0>, 0)],
             'stencil_index': [(<numba.core.ir.Assign object at 0x7c89e8cb7df0>,
                                90)],
             'stencil_index.1': [(<numba.core.ir.Assign object at 0x7c89e8cc0e50>,
                                  90)],
             'stencil_index.2': [(<numba.core.ir.Assign object at 0x7c89e8cc1090>,
                                  90)],
             'stencil_index.3': [(<numba.core.ir.Assign object at 0x7c89e8cc12d0>,
                                  90)],
             'x': [(<numba.core.ir.Assign object at 0x7c89e8cc2aa0>, 0)]})
2025-01-31 15:31:37,482 - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x7c89e8cd2b00>
2025-01-31 15:31:37,664 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=1051)
           2	LOAD_GLOBAL(arg=0, lineno=1065)
           4	LOAD_FAST(arg=0, lineno=1065)
           6	CALL_FUNCTION(arg=1, lineno=1065)
           8	LOAD_FAST(arg=1, lineno=1065)
          10	LOAD_CONST(arg=1, lineno=1065)
          12	LOAD_CONST(arg=1, lineno=1065)
          14	BUILD_SLICE(arg=2, lineno=1065)
          16	STORE_SUBSCR(arg=None, lineno=1065)
          18	LOAD_CONST(arg=1, lineno=1065)
          20	RETURN_VALUE(arg=None, lineno=1065)
2025-01-31 15:31:37,664 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:31:37,664 - DEBUG - stack: []
2025-01-31 15:31:37,664 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:31:37,664 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=1051)
2025-01-31 15:31:37,664 - DEBUG - stack []
2025-01-31 15:31:37,664 - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=1065)
2025-01-31 15:31:37,664 - DEBUG - stack []
2025-01-31 15:31:37,664 - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=1065)
2025-01-31 15:31:37,664 - DEBUG - stack ['$2load_global.0']
2025-01-31 15:31:37,664 - DEBUG - dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=1065)
2025-01-31 15:31:37,664 - DEBUG - stack ['$2load_global.0', '$x4.1']
2025-01-31 15:31:37,664 - DEBUG - dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=1065)
2025-01-31 15:31:37,664 - DEBUG - stack ['$6call_function.2']
2025-01-31 15:31:37,664 - DEBUG - dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=1065)
2025-01-31 15:31:37,664 - DEBUG - stack ['$6call_function.2', '$y8.3']
2025-01-31 15:31:37,664 - DEBUG - dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=1065)
2025-01-31 15:31:37,664 - DEBUG - stack ['$6call_function.2', '$y8.3', '$const10.4']
2025-01-31 15:31:37,665 - DEBUG - dispatch pc=14, inst=BUILD_SLICE(arg=2, lineno=1065)
2025-01-31 15:31:37,665 - DEBUG - stack ['$6call_function.2', '$y8.3', '$const10.4', '$const12.5']
2025-01-31 15:31:37,665 - DEBUG - dispatch pc=16, inst=STORE_SUBSCR(arg=None, lineno=1065)
2025-01-31 15:31:37,665 - DEBUG - stack ['$6call_function.2', '$y8.3', '$14build_slice.7']
2025-01-31 15:31:37,665 - DEBUG - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1065)
2025-01-31 15:31:37,665 - DEBUG - stack []
2025-01-31 15:31:37,665 - DEBUG - dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=1065)
2025-01-31 15:31:37,665 - DEBUG - stack ['$const18.8']
2025-01-31 15:31:37,665 - DEBUG - end state. edges=[]
2025-01-31 15:31:37,665 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:31:37,665 - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-01-31 15:31:37,665 - DEBUG - defmap: {}
2025-01-31 15:31:37,665 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:37,665 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:37,665 - DEBUG - keep phismap: {}
2025-01-31 15:31:37,665 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-01-31 15:31:37,665 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:31:37,665 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$x4.1'}), (6, {'func': '$2load_global.0', 'args': ['$x4.1'], 'res': '$6call_function.2'}), (8, {'res': '$y8.3'}), (10, {'res': '$const10.4'}), (12, {'res': '$const12.5'}), (14, {'start': '$const10.4', 'stop': '$const12.5', 'step': None, 'res': '$14build_slice.7', 'slicevar': '$14build_slice.6'}), (16, {'target': '$y8.3', 'index': '$14build_slice.7', 'value': '$6call_function.2'}), (18, {'res': '$const18.8'}), (20, {'retval': '$const18.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:37,666 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    y = arg(1, name=y)                       ['y']
    $2load_global.0 = global(_localmax_sten: <numba.stencils.stencil.StencilFunc object at 0x7c89eba2d4b0>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, utils.py:1051)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$6call_function.2', 'x']
    $const10.4 = const(NoneType, None)       ['$const10.4']
    $const12.5 = const(NoneType, None)       ['$const12.5']
    $14build_slice.6 = global(slice: <class 'slice'>) ['$14build_slice.6']
    $14build_slice.7 = call $14build_slice.6($const10.4, $const12.5, func=$14build_slice.6, args=(Var($const10.4, utils.py:1065), Var($const12.5, utils.py:1065)), kws=(), vararg=None, varkwarg=None, target=None) ['$14build_slice.6', '$14build_slice.7', '$const10.4', '$const12.5']
    y[$14build_slice.7] = $6call_function.2  ['$14build_slice.7', '$6call_function.2', 'y']
    $const18.8 = const(NoneType, None)       ['$const18.8']
    $20return_value.9 = cast(value=$const18.8) ['$20return_value.9', '$const18.8']
    return $20return_value.9                 ['$20return_value.9']

2025-01-31 15:31:37,669 - DEBUG - ==== SSA block analysis pass on 0
2025-01-31 15:31:37,669 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8c6d120>
2025-01-31 15:31:37,669 - DEBUG - on stmt: x = arg(0, name=x)
2025-01-31 15:31:37,669 - DEBUG - on stmt: y = arg(1, name=y)
2025-01-31 15:31:37,669 - DEBUG - on stmt: $2load_global.0 = global(_localmax_sten: <numba.stencils.stencil.StencilFunc object at 0x7c89eba2d4b0>)
2025-01-31 15:31:37,669 - DEBUG - on stmt: $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, utils.py:1051)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:37,670 - DEBUG - on stmt: $const10.4 = const(NoneType, None)
2025-01-31 15:31:37,670 - DEBUG - on stmt: $const12.5 = const(NoneType, None)
2025-01-31 15:31:37,670 - DEBUG - on stmt: $14build_slice.6 = global(slice: <class 'slice'>)
2025-01-31 15:31:37,670 - DEBUG - on stmt: $14build_slice.7 = call $14build_slice.6($const10.4, $const12.5, func=$14build_slice.6, args=(Var($const10.4, utils.py:1065), Var($const12.5, utils.py:1065)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:37,670 - DEBUG - on stmt: y[slice(None, None, None)] = $6call_function.2
2025-01-31 15:31:37,670 - DEBUG - on stmt: $const18.8 = const(NoneType, None)
2025-01-31 15:31:37,670 - DEBUG - on stmt: $20return_value.9 = cast(value=$const18.8)
2025-01-31 15:31:37,670 - DEBUG - on stmt: return $20return_value.9
2025-01-31 15:31:37,670 - DEBUG - defs defaultdict(<class 'list'>,
            {'$14build_slice.6': [(<numba.core.ir.Assign object at 0x7c89e8ad8220>,
                                   0)],
             '$14build_slice.7': [(<numba.core.ir.Assign object at 0x7c89e8ad8340>,
                                   0)],
             '$20return_value.9': [(<numba.core.ir.Assign object at 0x7c89e8ad8700>,
                                    0)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x7c89e8abf9a0>,
                                  0)],
             '$6call_function.2': [(<numba.core.ir.Assign object at 0x7c89e8abfca0>,
                                    0)],
             '$const10.4': [(<numba.core.ir.Assign object at 0x7c89e8abfee0>,
                             0)],
             '$const12.5': [(<numba.core.ir.Assign object at 0x7c89e8ad80a0>,
                             0)],
             '$const18.8': [(<numba.core.ir.Assign object at 0x7c89e8ad8580>,
                             0)],
             'x': [(<numba.core.ir.Assign object at 0x7c89e8abf130>, 0)],
             'y': [(<numba.core.ir.Assign object at 0x7c89e8abeec0>, 0)]})
2025-01-31 15:31:37,670 - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x7c89e8c6d120>
2025-01-31 15:31:37,771 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_FAST(arg=0, lineno=2)
           4	LOAD_ATTR(arg=0, lineno=2)
           6	STORE_FAST(arg=1, lineno=2)
           8	LOAD_GLOBAL(arg=1, lineno=3)
          10	LOAD_ATTR(arg=2, lineno=3)
          12	LOAD_FAST(arg=1, lineno=3)
          14	LOAD_GLOBAL(arg=1, lineno=3)
          16	LOAD_ATTR(arg=3, lineno=3)
          18	LOAD_CONST(arg=1, lineno=3)
          20	CALL_FUNCTION_KW(arg=2, lineno=3)
          22	STORE_FAST(arg=2, lineno=3)
          24	LOAD_CONST(arg=2, lineno=4)
          26	LOAD_FAST(arg=2, lineno=4)
          28	LOAD_CONST(arg=0, lineno=4)
          30	LOAD_CONST(arg=3, lineno=4)
          32	BUILD_SLICE(arg=2, lineno=4)
          34	STORE_SUBSCR(arg=None, lineno=4)
          36	LOAD_CONST(arg=2, lineno=5)
          38	LOAD_FAST(arg=2, lineno=5)
          40	LOAD_CONST(arg=4, lineno=5)
          42	LOAD_CONST(arg=0, lineno=5)
          44	BUILD_SLICE(arg=2, lineno=5)
          46	STORE_SUBSCR(arg=None, lineno=5)
          48	LOAD_GLOBAL(arg=4, lineno=6)
          50	LOAD_GLOBAL(arg=5, lineno=6)
          52	LOAD_CONST(arg=2, lineno=6)
          54	LOAD_CONST(arg=4, lineno=6)
          56	CALL_FUNCTION(arg=2, lineno=6)
          58	UNARY_NEGATIVE(arg=None, lineno=6)
          60	LOAD_FAST(arg=1, lineno=6)
          62	LOAD_CONST(arg=2, lineno=6)
          64	BINARY_SUBSCR(arg=None, lineno=6)
          66	LOAD_GLOBAL(arg=6, lineno=6)
          68	LOAD_CONST(arg=2, lineno=6)
          70	LOAD_CONST(arg=3, lineno=6)
          72	CALL_FUNCTION(arg=2, lineno=6)
          74	BINARY_SUBTRACT(arg=None, lineno=6)
          76	CALL_FUNCTION(arg=2, lineno=6)
          78	GET_ITER(arg=None, lineno=6)
>         80	FOR_ITER(arg=4, lineno=6)
          82	STORE_FAST(arg=3, lineno=6)
          84	LOAD_CONST(arg=2, lineno=7)
          86	STORE_FAST(arg=4, lineno=7)
          88	JUMP_ABSOLUTE(arg=41, lineno=7)
>         90	LOAD_FAST(arg=2, lineno=8)
          92	RETURN_VALUE(arg=None, lineno=8)
2025-01-31 15:31:37,771 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:31:37,771 - DEBUG - stack: []
2025-01-31 15:31:37,771 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:31:37,771 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=1)
2025-01-31 15:31:37,771 - DEBUG - stack []
2025-01-31 15:31:37,771 - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=2)
2025-01-31 15:31:37,771 - DEBUG - stack []
2025-01-31 15:31:37,771 - DEBUG - dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=2)
2025-01-31 15:31:37,771 - DEBUG - stack ['$x2.0']
2025-01-31 15:31:37,771 - DEBUG - dispatch pc=6, inst=STORE_FAST(arg=1, lineno=2)
2025-01-31 15:31:37,771 - DEBUG - stack ['$4load_attr.1']
2025-01-31 15:31:37,771 - DEBUG - dispatch pc=8, inst=LOAD_GLOBAL(arg=1, lineno=3)
2025-01-31 15:31:37,771 - DEBUG - stack []
2025-01-31 15:31:37,771 - DEBUG - dispatch pc=10, inst=LOAD_ATTR(arg=2, lineno=3)
2025-01-31 15:31:37,771 - DEBUG - stack ['$8load_global.2']
2025-01-31 15:31:37,771 - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=3)
2025-01-31 15:31:37,771 - DEBUG - stack ['$10load_attr.3']
2025-01-31 15:31:37,771 - DEBUG - dispatch pc=14, inst=LOAD_GLOBAL(arg=1, lineno=3)
2025-01-31 15:31:37,771 - DEBUG - stack ['$10load_attr.3', '$full_shape012.4']
2025-01-31 15:31:37,771 - DEBUG - dispatch pc=16, inst=LOAD_ATTR(arg=3, lineno=3)
2025-01-31 15:31:37,771 - DEBUG - stack ['$10load_attr.3', '$full_shape012.4', '$14load_global.5']
2025-01-31 15:31:37,772 - DEBUG - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=3)
2025-01-31 15:31:37,772 - DEBUG - stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6']
2025-01-31 15:31:37,772 - DEBUG - dispatch pc=20, inst=CALL_FUNCTION_KW(arg=2, lineno=3)
2025-01-31 15:31:37,772 - DEBUG - stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6', '$const18.7']
2025-01-31 15:31:37,772 - DEBUG - dispatch pc=22, inst=STORE_FAST(arg=2, lineno=3)
2025-01-31 15:31:37,772 - DEBUG - stack ['$20call_function_kw.8']
2025-01-31 15:31:37,772 - DEBUG - dispatch pc=24, inst=LOAD_CONST(arg=2, lineno=4)
2025-01-31 15:31:37,772 - DEBUG - stack []
2025-01-31 15:31:37,772 - DEBUG - dispatch pc=26, inst=LOAD_FAST(arg=2, lineno=4)
2025-01-31 15:31:37,772 - DEBUG - stack ['$const24.9']
2025-01-31 15:31:37,772 - DEBUG - dispatch pc=28, inst=LOAD_CONST(arg=0, lineno=4)
2025-01-31 15:31:37,772 - DEBUG - stack ['$const24.9', '$out026.10']
2025-01-31 15:31:37,772 - DEBUG - dispatch pc=30, inst=LOAD_CONST(arg=3, lineno=4)
2025-01-31 15:31:37,772 - DEBUG - stack ['$const24.9', '$out026.10', '$const28.11']
2025-01-31 15:31:37,772 - DEBUG - dispatch pc=32, inst=BUILD_SLICE(arg=2, lineno=4)
2025-01-31 15:31:37,772 - DEBUG - stack ['$const24.9', '$out026.10', '$const28.11', '$const30.12']
2025-01-31 15:31:37,772 - DEBUG - dispatch pc=34, inst=STORE_SUBSCR(arg=None, lineno=4)
2025-01-31 15:31:37,772 - DEBUG - stack ['$const24.9', '$out026.10', '$32build_slice.14']
2025-01-31 15:31:37,772 - DEBUG - dispatch pc=36, inst=LOAD_CONST(arg=2, lineno=5)
2025-01-31 15:31:37,772 - DEBUG - stack []
2025-01-31 15:31:37,772 - DEBUG - dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=5)
2025-01-31 15:31:37,772 - DEBUG - stack ['$const36.15']
2025-01-31 15:31:37,772 - DEBUG - dispatch pc=40, inst=LOAD_CONST(arg=4, lineno=5)
2025-01-31 15:31:37,772 - DEBUG - stack ['$const36.15', '$out038.16']
2025-01-31 15:31:37,772 - DEBUG - dispatch pc=42, inst=LOAD_CONST(arg=0, lineno=5)
2025-01-31 15:31:37,772 - DEBUG - stack ['$const36.15', '$out038.16', '$const40.17']
2025-01-31 15:31:37,772 - DEBUG - dispatch pc=44, inst=BUILD_SLICE(arg=2, lineno=5)
2025-01-31 15:31:37,772 - DEBUG - stack ['$const36.15', '$out038.16', '$const40.17', '$const42.18']
2025-01-31 15:31:37,772 - DEBUG - dispatch pc=46, inst=STORE_SUBSCR(arg=None, lineno=5)
2025-01-31 15:31:37,773 - DEBUG - stack ['$const36.15', '$out038.16', '$44build_slice.20']
2025-01-31 15:31:37,773 - DEBUG - dispatch pc=48, inst=LOAD_GLOBAL(arg=4, lineno=6)
2025-01-31 15:31:37,773 - DEBUG - stack []
2025-01-31 15:31:37,773 - DEBUG - dispatch pc=50, inst=LOAD_GLOBAL(arg=5, lineno=6)
2025-01-31 15:31:37,773 - DEBUG - stack ['$48load_global.21']
2025-01-31 15:31:37,773 - DEBUG - dispatch pc=52, inst=LOAD_CONST(arg=2, lineno=6)
2025-01-31 15:31:37,773 - DEBUG - stack ['$48load_global.21', '$50load_global.22']
2025-01-31 15:31:37,773 - DEBUG - dispatch pc=54, inst=LOAD_CONST(arg=4, lineno=6)
2025-01-31 15:31:37,773 - DEBUG - stack ['$48load_global.21', '$50load_global.22', '$const52.23']
2025-01-31 15:31:37,773 - DEBUG - dispatch pc=56, inst=CALL_FUNCTION(arg=2, lineno=6)
2025-01-31 15:31:37,773 - DEBUG - stack ['$48load_global.21', '$50load_global.22', '$const52.23', '$const54.24']
2025-01-31 15:31:37,773 - DEBUG - dispatch pc=58, inst=UNARY_NEGATIVE(arg=None, lineno=6)
2025-01-31 15:31:37,773 - DEBUG - stack ['$48load_global.21', '$56call_function.25']
2025-01-31 15:31:37,773 - DEBUG - dispatch pc=60, inst=LOAD_FAST(arg=1, lineno=6)
2025-01-31 15:31:37,773 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26']
2025-01-31 15:31:37,773 - DEBUG - dispatch pc=62, inst=LOAD_CONST(arg=2, lineno=6)
2025-01-31 15:31:37,773 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27']
2025-01-31 15:31:37,773 - DEBUG - dispatch pc=64, inst=BINARY_SUBSCR(arg=None, lineno=6)
2025-01-31 15:31:37,773 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27', '$const62.28']
2025-01-31 15:31:37,773 - DEBUG - dispatch pc=66, inst=LOAD_GLOBAL(arg=6, lineno=6)
2025-01-31 15:31:37,773 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29']
2025-01-31 15:31:37,773 - DEBUG - dispatch pc=68, inst=LOAD_CONST(arg=2, lineno=6)
2025-01-31 15:31:37,773 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30']
2025-01-31 15:31:37,773 - DEBUG - dispatch pc=70, inst=LOAD_CONST(arg=3, lineno=6)
2025-01-31 15:31:37,773 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31']
2025-01-31 15:31:37,773 - DEBUG - dispatch pc=72, inst=CALL_FUNCTION(arg=2, lineno=6)
2025-01-31 15:31:37,773 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31', '$const70.32']
2025-01-31 15:31:37,773 - DEBUG - dispatch pc=74, inst=BINARY_SUBTRACT(arg=None, lineno=6)
2025-01-31 15:31:37,773 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$72call_function.33']
2025-01-31 15:31:37,774 - DEBUG - dispatch pc=76, inst=CALL_FUNCTION(arg=2, lineno=6)
2025-01-31 15:31:37,774 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34']
2025-01-31 15:31:37,774 - DEBUG - dispatch pc=78, inst=GET_ITER(arg=None, lineno=6)
2025-01-31 15:31:37,774 - DEBUG - stack ['$76call_function.35']
2025-01-31 15:31:37,774 - DEBUG - end state. edges=[Edge(pc=80, stack=('$78get_iter.36',), blockstack=(), npush=0)]
2025-01-31 15:31:37,774 - DEBUG - pending: deque([State(pc_initial=80 nstack_initial=1)])
2025-01-31 15:31:37,774 - DEBUG - stack: ['$phi80.0']
2025-01-31 15:31:37,774 - DEBUG - state.pc_initial: State(pc_initial=80 nstack_initial=1)
2025-01-31 15:31:37,774 - DEBUG - dispatch pc=80, inst=FOR_ITER(arg=4, lineno=6)
2025-01-31 15:31:37,774 - DEBUG - stack ['$phi80.0']
2025-01-31 15:31:37,774 - DEBUG - end state. edges=[Edge(pc=90, stack=(), blockstack=(), npush=0), Edge(pc=82, stack=('$phi80.0', '$80for_iter.2'), blockstack=(), npush=0)]
2025-01-31 15:31:37,774 - DEBUG - pending: deque([State(pc_initial=90 nstack_initial=0), State(pc_initial=82 nstack_initial=2)])
2025-01-31 15:31:37,774 - DEBUG - stack: []
2025-01-31 15:31:37,774 - DEBUG - state.pc_initial: State(pc_initial=90 nstack_initial=0)
2025-01-31 15:31:37,774 - DEBUG - dispatch pc=90, inst=LOAD_FAST(arg=2, lineno=8)
2025-01-31 15:31:37,774 - DEBUG - stack []
2025-01-31 15:31:37,774 - DEBUG - dispatch pc=92, inst=RETURN_VALUE(arg=None, lineno=8)
2025-01-31 15:31:37,774 - DEBUG - stack ['$out090.0']
2025-01-31 15:31:37,774 - DEBUG - end state. edges=[]
2025-01-31 15:31:37,774 - DEBUG - pending: deque([State(pc_initial=82 nstack_initial=2)])
2025-01-31 15:31:37,774 - DEBUG - stack: ['$phi82.0', '$phi82.1']
2025-01-31 15:31:37,774 - DEBUG - state.pc_initial: State(pc_initial=82 nstack_initial=2)
2025-01-31 15:31:37,774 - DEBUG - dispatch pc=82, inst=STORE_FAST(arg=3, lineno=6)
2025-01-31 15:31:37,774 - DEBUG - stack ['$phi82.0', '$phi82.1']
2025-01-31 15:31:37,774 - DEBUG - dispatch pc=84, inst=LOAD_CONST(arg=2, lineno=7)
2025-01-31 15:31:37,774 - DEBUG - stack ['$phi82.0']
2025-01-31 15:31:37,774 - DEBUG - dispatch pc=86, inst=STORE_FAST(arg=4, lineno=7)
2025-01-31 15:31:37,774 - DEBUG - stack ['$phi82.0', '$const84.2']
2025-01-31 15:31:37,774 - DEBUG - dispatch pc=88, inst=JUMP_ABSOLUTE(arg=41, lineno=7)
2025-01-31 15:31:37,775 - DEBUG - stack ['$phi82.0']
2025-01-31 15:31:37,775 - DEBUG - end state. edges=[Edge(pc=80, stack=('$phi82.0',), blockstack=(), npush=0)]
2025-01-31 15:31:37,775 - DEBUG - pending: deque([State(pc_initial=80 nstack_initial=1)])
2025-01-31 15:31:37,775 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:31:37,775 - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=80 nstack_initial=1): {'$phi80.0'},
             State(pc_initial=82 nstack_initial=2): {'$phi82.1'},
             State(pc_initial=90 nstack_initial=0): set()})
2025-01-31 15:31:37,775 - DEBUG - defmap: {'$phi80.0': State(pc_initial=0 nstack_initial=0),
 '$phi82.1': State(pc_initial=80 nstack_initial=1)}
2025-01-31 15:31:37,775 - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi82.0', State(pc_initial=82 nstack_initial=2))},
             '$phi82.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-01-31 15:31:37,775 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-01-31 15:31:37,775 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-01-31 15:31:37,775 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-01-31 15:31:37,776 - DEBUG - keep phismap: {'$phi80.0': {('$78get_iter.36', State(pc_initial=0 nstack_initial=0))},
 '$phi82.1': {('$80for_iter.2', State(pc_initial=80 nstack_initial=1))}}
2025-01-31 15:31:37,776 - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi80.0': '$78get_iter.36'},
             State(pc_initial=80 nstack_initial=1): {'$phi82.1': '$80for_iter.2'}})
2025-01-31 15:31:37,776 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:31:37,776 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'item': '$x2.0', 'res': '$4load_attr.1'}), (6, {'value': '$4load_attr.1'}), (8, {'res': '$8load_global.2'}), (10, {'item': '$8load_global.2', 'res': '$10load_attr.3'}), (12, {'res': '$full_shape012.4'}), (14, {'res': '$14load_global.5'}), (16, {'item': '$14load_global.5', 'res': '$16load_attr.6'}), (18, {'res': '$const18.7'}), (20, {'func': '$10load_attr.3', 'args': ['$full_shape012.4', '$16load_attr.6'], 'names': '$const18.7', 'res': '$20call_function_kw.8'}), (22, {'value': '$20call_function_kw.8'}), (24, {'res': '$const24.9'}), (26, {'res': '$out026.10'}), (28, {'res': '$const28.11'}), (30, {'res': '$const30.12'}), (32, {'start': '$const28.11', 'stop': '$const30.12', 'step': None, 'res': '$32build_slice.14', 'slicevar': '$32build_slice.13'}), (34, {'target': '$out026.10', 'index': '$32build_slice.14', 'value': '$const24.9'}), (36, {'res': '$const36.15'}), (38, {'res': '$out038.16'}), (40, {'res': '$const40.17'}), (42, {'res': '$const42.18'}), (44, {'start': '$const40.17', 'stop': '$const42.18', 'step': None, 'res': '$44build_slice.20', 'slicevar': '$44build_slice.19'}), (46, {'target': '$out038.16', 'index': '$44build_slice.20', 'value': '$const36.15'}), (48, {'res': '$48load_global.21'}), (50, {'res': '$50load_global.22'}), (52, {'res': '$const52.23'}), (54, {'res': '$const54.24'}), (56, {'func': '$50load_global.22', 'args': ['$const52.23', '$const54.24'], 'res': '$56call_function.25'}), (58, {'value': '$56call_function.25', 'res': '$58unary_negative.26'}), (60, {'res': '$full_shape060.27'}), (62, {'res': '$const62.28'}), (64, {'index': '$const62.28', 'target': '$full_shape060.27', 'res': '$64binary_subscr.29'}), (66, {'res': '$66load_global.30'}), (68, {'res': '$const68.31'}), (70, {'res': '$const70.32'}), (72, {'func': '$66load_global.30', 'args': ['$const68.31', '$const70.32'], 'res': '$72call_function.33'}), (74, {'lhs': '$64binary_subscr.29', 'rhs': '$72call_function.33', 'res': '$74binary_subtract.34'}), (76, {'func': '$48load_global.21', 'args': ['$58unary_negative.26', '$74binary_subtract.34'], 'res': '$76call_function.35'}), (78, {'value': '$76call_function.35', 'res': '$78get_iter.36'})), outgoing_phis={'$phi80.0': '$78get_iter.36'}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$78get_iter.36',)})
2025-01-31 15:31:37,776 - DEBUG - block_infos State(pc_initial=80 nstack_initial=1):
AdaptBlockInfo(insts=((80, {'iterator': '$phi80.0', 'pair': '$80for_iter.1', 'indval': '$80for_iter.2', 'pred': '$80for_iter.3'}),), outgoing_phis={'$phi82.1': '$80for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: (), 82: ('$phi80.0', '$80for_iter.2')})
2025-01-31 15:31:37,776 - DEBUG - block_infos State(pc_initial=82 nstack_initial=2):
AdaptBlockInfo(insts=((82, {'value': '$phi82.1'}), (84, {'res': '$const84.2'}), (86, {'value': '$const84.2'}), (88, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$phi82.0',)})
2025-01-31 15:31:37,776 - DEBUG - block_infos State(pc_initial=90 nstack_initial=0):
AdaptBlockInfo(insts=((90, {'res': '$out090.0'}), (92, {'retval': '$out090.0', 'castval': '$92return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:37,777 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    full_shape0 = getattr(value=x, attr=shape) ['full_shape0', 'x']
    $8load_global.2 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>) ['$8load_global.2']
    $10load_attr.3 = getattr(value=$8load_global.2, attr=empty) ['$10load_attr.3', '$8load_global.2']
    $14load_global.5 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>) ['$14load_global.5']
    $16load_attr.6 = getattr(value=$14load_global.5, attr=bool_) ['$14load_global.5', '$16load_attr.6']
    out0 = call $10load_attr.3(full_shape0, func=$10load_attr.3, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6, <string>:3))], vararg=None, varkwarg=None, target=None) ['$10load_attr.3', '$16load_attr.6', 'full_shape0', 'out0']
    $const24.9 = const(int, 0)               ['$const24.9']
    $const28.11 = const(NoneType, None)      ['$const28.11']
    $const30.12 = const(int, 1)              ['$const30.12']
    $32build_slice.13 = global(slice: <class 'slice'>) ['$32build_slice.13']
    $32build_slice.14 = call $32build_slice.13($const28.11, $const30.12, func=$32build_slice.13, args=(Var($const28.11, <string>:4), Var($const30.12, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None) ['$32build_slice.13', '$32build_slice.14', '$const28.11', '$const30.12']
    out0[$32build_slice.14] = $const24.9     ['$32build_slice.14', '$const24.9', 'out0']
    $const36.15 = const(int, 0)              ['$const36.15']
    $const40.17 = const(int, -1)             ['$const40.17']
    $const42.18 = const(NoneType, None)      ['$const42.18']
    $44build_slice.19 = global(slice: <class 'slice'>) ['$44build_slice.19']
    $44build_slice.20 = call $44build_slice.19($const40.17, $const42.18, func=$44build_slice.19, args=(Var($const40.17, <string>:5), Var($const42.18, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None) ['$44build_slice.19', '$44build_slice.20', '$const40.17', '$const42.18']
    out0[$44build_slice.20] = $const36.15    ['$44build_slice.20', '$const36.15', 'out0']
    $48load_global.21 = global(range: <class 'range'>) ['$48load_global.21']
    $50load_global.22 = global(min: <built-in function min>) ['$50load_global.22']
    $const52.23 = const(int, 0)              ['$const52.23']
    $const54.24 = const(int, -1)             ['$const54.24']
    $56call_function.25 = call $50load_global.22($const52.23, $const54.24, func=$50load_global.22, args=[Var($const52.23, <string>:6), Var($const54.24, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$50load_global.22', '$56call_function.25', '$const52.23', '$const54.24']
    $58unary_negative.26 = unary(fn=<built-in function neg>, value=$56call_function.25) ['$56call_function.25', '$58unary_negative.26']
    $const62.28 = const(int, 0)              ['$const62.28']
    $64binary_subscr.29 = getitem(value=full_shape0, index=$const62.28, fn=<built-in function getitem>) ['$64binary_subscr.29', '$const62.28', 'full_shape0']
    $66load_global.30 = global(max: <built-in function max>) ['$66load_global.30']
    $const68.31 = const(int, 0)              ['$const68.31']
    $const70.32 = const(int, 1)              ['$const70.32']
    $72call_function.33 = call $66load_global.30($const68.31, $const70.32, func=$66load_global.30, args=[Var($const68.31, <string>:6), Var($const70.32, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$66load_global.30', '$72call_function.33', '$const68.31', '$const70.32']
    $74binary_subtract.34 = $64binary_subscr.29 - $72call_function.33 ['$64binary_subscr.29', '$72call_function.33', '$74binary_subtract.34']
    $76call_function.35 = call $48load_global.21($58unary_negative.26, $74binary_subtract.34, func=$48load_global.21, args=[Var($58unary_negative.26, <string>:6), Var($74binary_subtract.34, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34', '$76call_function.35']
    $78get_iter.36 = getiter(value=$76call_function.35) ['$76call_function.35', '$78get_iter.36']
    $phi80.0 = $78get_iter.36                ['$78get_iter.36', '$phi80.0']
    jump 80                                  []
label 80:
    $80for_iter.1 = iternext(value=$phi80.0) ['$80for_iter.1', '$phi80.0']
    $80for_iter.2 = pair_first(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.2']
    $80for_iter.3 = pair_second(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.3']
    $phi82.1 = $80for_iter.2                 ['$80for_iter.2', '$phi82.1']
    branch $80for_iter.3, 82, 90             ['$80for_iter.3']
label 82:
    index00 = $phi82.1                       ['$phi82.1', 'index00']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 80                                  []
label 90:
    $92return_value.1 = cast(value=out0)     ['$92return_value.1', 'out0']
    return $92return_value.1                 ['$92return_value.1']

2025-01-31 15:31:37,785 - DEBUG - ==== SSA block analysis pass on 0
2025-01-31 15:31:37,785 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8b6b130>
2025-01-31 15:31:37,785 - DEBUG - on stmt: x = arg(0, name=x)
2025-01-31 15:31:37,785 - DEBUG - on stmt: full_shape0 = getattr(value=x, attr=shape)
2025-01-31 15:31:37,785 - DEBUG - on stmt: $8load_global.2.1 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:37,785 - DEBUG - on stmt: $10load_attr.3.1 = getattr(value=$8load_global.2.1, attr=empty)
2025-01-31 15:31:37,785 - DEBUG - on stmt: $14load_global.5.1 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:37,785 - DEBUG - on stmt: $16load_attr.6.1 = getattr(value=$14load_global.5.1, attr=bool_)
2025-01-31 15:31:37,785 - DEBUG - on stmt: out0 = call $10load_attr.3.1(full_shape0, func=$10load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:37,785 - DEBUG - on stmt: $const24.9.1 = const(int, 0)
2025-01-31 15:31:37,785 - DEBUG - on stmt: $const28.11.1 = const(NoneType, None)
2025-01-31 15:31:37,785 - DEBUG - on stmt: $const30.12.1 = const(int, 1)
2025-01-31 15:31:37,785 - DEBUG - on stmt: $32build_slice.13.1 = global(slice: <class 'slice'>)
2025-01-31 15:31:37,785 - DEBUG - on stmt: $32build_slice.14.1 = call $32build_slice.13.1($const28.11.1, $const30.12.1, func=$32build_slice.13.1, args=(Var($const28.11.1, <string>:4), Var($const30.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:37,785 - DEBUG - on stmt: out0[$32build_slice.14.1] = $const24.9.1
2025-01-31 15:31:37,785 - DEBUG - on stmt: $const36.15.1 = const(int, 0)
2025-01-31 15:31:37,785 - DEBUG - on stmt: $const40.17.1 = const(int, -1)
2025-01-31 15:31:37,785 - DEBUG - on stmt: $const42.18.1 = const(NoneType, None)
2025-01-31 15:31:37,786 - DEBUG - on stmt: $44build_slice.19.1 = global(slice: <class 'slice'>)
2025-01-31 15:31:37,786 - DEBUG - on stmt: $44build_slice.20.1 = call $44build_slice.19.1($const40.17.1, $const42.18.1, func=$44build_slice.19.1, args=(Var($const40.17.1, <string>:5), Var($const42.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:37,786 - DEBUG - on stmt: out0[$44build_slice.20.1] = $const36.15.1
2025-01-31 15:31:37,786 - DEBUG - on stmt: $48load_global.21.1 = global(range: <class 'range'>)
2025-01-31 15:31:37,786 - DEBUG - on stmt: $50load_global.22.1 = global(min: <built-in function min>)
2025-01-31 15:31:37,786 - DEBUG - on stmt: $const52.23.1 = const(int, 0)
2025-01-31 15:31:37,786 - DEBUG - on stmt: $const54.24.1 = const(int, -1)
2025-01-31 15:31:37,786 - DEBUG - on stmt: $56call_function.25.1 = call $50load_global.22.1($const52.23.1, $const54.24.1, func=$50load_global.22.1, args=[Var($const52.23.1, <string>:6), Var($const54.24.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:37,786 - DEBUG - on stmt: $58unary_negative.26.1 = unary(fn=<built-in function neg>, value=$56call_function.25.1)
2025-01-31 15:31:37,786 - DEBUG - on stmt: $const62.28.1 = const(int, 0)
2025-01-31 15:31:37,786 - DEBUG - on stmt: $64binary_subscr.29.1 = getitem(value=full_shape0, index=$const62.28.1, fn=<built-in function getitem>)
2025-01-31 15:31:37,786 - DEBUG - on stmt: $66load_global.30.1 = global(max: <built-in function max>)
2025-01-31 15:31:37,786 - DEBUG - on stmt: $const68.31.1 = const(int, 0)
2025-01-31 15:31:37,786 - DEBUG - on stmt: $const70.32.1 = const(int, 1)
2025-01-31 15:31:37,786 - DEBUG - on stmt: $72call_function.33.1 = call $66load_global.30.1($const68.31.1, $const70.32.1, func=$66load_global.30.1, args=[Var($const68.31.1, <string>:6), Var($const70.32.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:37,786 - DEBUG - on stmt: $74binary_subtract.34.1 = $64binary_subscr.29.1 - $72call_function.33.1
2025-01-31 15:31:37,786 - DEBUG - on stmt: $76call_function.35.1 = call $48load_global.21.1($58unary_negative.26.1, $74binary_subtract.34.1, func=$48load_global.21.1, args=[Var($58unary_negative.26.1, <string>:6), Var($74binary_subtract.34.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:37,786 - DEBUG - on stmt: $78get_iter.36.1 = getiter(value=$76call_function.35.1)
2025-01-31 15:31:37,786 - DEBUG - on stmt: $phi80.0.1 = $78get_iter.36.1
2025-01-31 15:31:37,786 - DEBUG - on stmt: jump 80
2025-01-31 15:31:37,786 - DEBUG - ==== SSA block analysis pass on 80
2025-01-31 15:31:37,786 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8b6b130>
2025-01-31 15:31:37,786 - DEBUG - on stmt: $80for_iter.1.1 = iternext(value=$phi80.0.1)
2025-01-31 15:31:37,786 - DEBUG - on stmt: $80for_iter.2.1 = pair_first(value=$80for_iter.1.1)
2025-01-31 15:31:37,786 - DEBUG - on stmt: $80for_iter.3.1 = pair_second(value=$80for_iter.1.1)
2025-01-31 15:31:37,787 - DEBUG - on stmt: $phi82.1.1 = $80for_iter.2.1
2025-01-31 15:31:37,787 - DEBUG - on stmt: branch $80for_iter.3.1, 82, 92
2025-01-31 15:31:37,787 - DEBUG - ==== SSA block analysis pass on 82
2025-01-31 15:31:37,787 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8b6b130>
2025-01-31 15:31:37,787 - DEBUG - on stmt: index00 = $phi82.1.1
2025-01-31 15:31:37,787 - DEBUG - on stmt: jump 90
2025-01-31 15:31:37,787 - DEBUG - ==== SSA block analysis pass on 92
2025-01-31 15:31:37,787 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8b6b130>
2025-01-31 15:31:37,787 - DEBUG - on stmt: $92return_value.1.1 = cast(value=out0)
2025-01-31 15:31:37,787 - DEBUG - on stmt: return $92return_value.1.1
2025-01-31 15:31:37,787 - DEBUG - ==== SSA block analysis pass on 90
2025-01-31 15:31:37,787 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8b6b130>
2025-01-31 15:31:37,787 - DEBUG - on stmt: $const4.1 = const(int, 0)
2025-01-31 15:31:37,787 - DEBUG - on stmt: stencil_index = $const4.1 + index00
2025-01-31 15:31:37,787 - DEBUG - on stmt: $6binary_subscr.2 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-01-31 15:31:37,787 - DEBUG - on stmt: $const10.4 = const(int, -1)
2025-01-31 15:31:37,787 - DEBUG - on stmt: stencil_index.1 = $const10.4 + index00
2025-01-31 15:31:37,787 - DEBUG - on stmt: $12binary_subscr.5 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2025-01-31 15:31:37,787 - DEBUG - on stmt: $14compare_op.6 = $6binary_subscr.2 > $12binary_subscr.5
2025-01-31 15:31:37,787 - DEBUG - on stmt: $const18.8 = const(int, 0)
2025-01-31 15:31:37,787 - DEBUG - on stmt: stencil_index.2 = $const18.8 + index00
2025-01-31 15:31:37,787 - DEBUG - on stmt: $20binary_subscr.9 = getitem(value=x, index=stencil_index.2, fn=<built-in function getitem>)
2025-01-31 15:31:37,787 - DEBUG - on stmt: $const24.11 = const(int, 1)
2025-01-31 15:31:37,787 - DEBUG - on stmt: stencil_index.3 = $const24.11 + index00
2025-01-31 15:31:37,787 - DEBUG - on stmt: $26binary_subscr.12 = getitem(value=x, index=stencil_index.3, fn=<built-in function getitem>)
2025-01-31 15:31:37,787 - DEBUG - on stmt: $28compare_op.13 = $20binary_subscr.9 >= $26binary_subscr.12
2025-01-31 15:31:37,788 - DEBUG - on stmt: $30binary_and.14 = $14compare_op.6 & $28compare_op.13
2025-01-31 15:31:37,788 - DEBUG - on stmt: $32return_value.15 = cast(value=$30binary_and.14)
2025-01-31 15:31:37,788 - DEBUG - on stmt: out0[index00] = $32return_value.15
2025-01-31 15:31:37,788 - DEBUG - on stmt: jump 91
2025-01-31 15:31:37,788 - DEBUG - ==== SSA block analysis pass on 91
2025-01-31 15:31:37,788 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8b6b130>
2025-01-31 15:31:37,788 - DEBUG - on stmt: jump 80
2025-01-31 15:31:37,789 - DEBUG - defs defaultdict(<class 'list'>,
            {'$10load_attr.3.1': [(<numba.core.ir.Assign object at 0x7c89e8c1ee00>,
                                   0)],
             '$12binary_subscr.5': [(<numba.core.ir.Assign object at 0x7c89e8c1d2a0>,
                                     90)],
             '$14compare_op.6': [(<numba.core.ir.Assign object at 0x7c89e8abd060>,
                                  90)],
             '$14load_global.5.1': [(<numba.core.ir.Assign object at 0x7c89e8c1f070>,
                                     0)],
             '$16load_attr.6.1': [(<numba.core.ir.Assign object at 0x7c89e8c1f7f0>,
                                   0)],
             '$20binary_subscr.9': [(<numba.core.ir.Assign object at 0x7c89e8c1d6f0>,
                                     90)],
             '$26binary_subscr.12': [(<numba.core.ir.Assign object at 0x7c89e8c1d150>,
                                      90)],
             '$28compare_op.13': [(<numba.core.ir.Assign object at 0x7c89e8ab29b0>,
                                   90)],
             '$30binary_and.14': [(<numba.core.ir.Assign object at 0x7c89e8ab2320>,
                                   90)],
             '$32build_slice.13.1': [(<numba.core.ir.Assign object at 0x7c89e8c1d630>,
                                      0)],
             '$32build_slice.14.1': [(<numba.core.ir.Assign object at 0x7c89e8c1e8c0>,
                                      0)],
             '$32return_value.15': [(<numba.core.ir.Assign object at 0x7c89e8c1c2e0>,
                                     90)],
             '$44build_slice.19.1': [(<numba.core.ir.Assign object at 0x7c89e8b51b70>,
                                      0)],
             '$44build_slice.20.1': [(<numba.core.ir.Assign object at 0x7c89e8b51c90>,
                                      0)],
             '$48load_global.21.1': [(<numba.core.ir.Assign object at 0x7c89e8b521a0>,
                                      0)],
             '$50load_global.22.1': [(<numba.core.ir.Assign object at 0x7c89e8b510c0>,
                                      0)],
             '$56call_function.25.1': [(<numba.core.ir.Assign object at 0x7c89e8b51600>,
                                        0)],
             '$58unary_negative.26.1': [(<numba.core.ir.Assign object at 0x7c89e8b51720>,
                                         0)],
             '$64binary_subscr.29.1': [(<numba.core.ir.Assign object at 0x7c89e8b50e50>,
                                        0)],
             '$66load_global.30.1': [(<numba.core.ir.Assign object at 0x7c89e8b50340>,
                                      0)],
             '$6binary_subscr.2': [(<numba.core.ir.Assign object at 0x7c89e8c1ccd0>,
                                    90)],
             '$72call_function.33.1': [(<numba.core.ir.Assign object at 0x7c89e8b52950>,
                                        0)],
             '$74binary_subtract.34.1': [(<numba.core.ir.Assign object at 0x7c89e8b528c0>,
                                          0)],
             '$76call_function.35.1': [(<numba.core.ir.Assign object at 0x7c89e8b52e60>,
                                        0)],
             '$78get_iter.36.1': [(<numba.core.ir.Assign object at 0x7c89e8b53040>,
                                   0)],
             '$80for_iter.1.1': [(<numba.core.ir.Assign object at 0x7c89e8b53160>,
                                  80)],
             '$80for_iter.2.1': [(<numba.core.ir.Assign object at 0x7c89e8b53220>,
                                  80)],
             '$80for_iter.3.1': [(<numba.core.ir.Assign object at 0x7c89e8b53370>,
                                  80)],
             '$8load_global.2.1': [(<numba.core.ir.Assign object at 0x7c89e8c1e7a0>,
                                    0)],
             '$92return_value.1.1': [(<numba.core.ir.Assign object at 0x7c89e8b53ca0>,
                                      92)],
             '$const10.4': [(<numba.core.ir.Assign object at 0x7c89e8abd570>,
                             90)],
             '$const18.8': [(<numba.core.ir.Assign object at 0x7c89e8abc9d0>,
                             90)],
             '$const24.11': [(<numba.core.ir.Assign object at 0x7c89e8ab3f40>,
                              90)],
             '$const24.9.1': [(<numba.core.ir.Assign object at 0x7c89e8c1caf0>,
                               0)],
             '$const28.11.1': [(<numba.core.ir.Assign object at 0x7c89e8c1d0f0>,
                                0)],
             '$const30.12.1': [(<numba.core.ir.Assign object at 0x7c89e8c1e0e0>,
                                0)],
             '$const36.15.1': [(<numba.core.ir.Assign object at 0x7c89e8b52b30>,
                                0)],
             '$const4.1': [(<numba.core.ir.Assign object at 0x7c89e8abe680>,
                            90)],
             '$const40.17.1': [(<numba.core.ir.Assign object at 0x7c89e8b51e10>,
                                0)],
             '$const42.18.1': [(<numba.core.ir.Assign object at 0x7c89e8b51a80>,
                                0)],
             '$const52.23.1': [(<numba.core.ir.Assign object at 0x7c89e8b50ac0>,
                                0)],
             '$const54.24.1': [(<numba.core.ir.Assign object at 0x7c89e8b51480>,
                                0)],
             '$const62.28.1': [(<numba.core.ir.Assign object at 0x7c89e8b51990>,
                                0)],
             '$const68.31.1': [(<numba.core.ir.Assign object at 0x7c89e8b50640>,
                                0)],
             '$const70.32.1': [(<numba.core.ir.Assign object at 0x7c89e8b50130>,
                                0)],
             '$phi80.0.1': [(<numba.core.ir.Assign object at 0x7c89e8c1e4a0>,
                             0)],
             '$phi82.1.1': [(<numba.core.ir.Assign object at 0x7c89e8b51840>,
                             80)],
             'full_shape0': [(<numba.core.ir.Assign object at 0x7c89e8c1e6b0>,
                              0)],
             'index00': [(<numba.core.ir.Assign object at 0x7c89e8b53640>, 82)],
             'out0': [(<numba.core.ir.Assign object at 0x7c89e8c1f4c0>, 0)],
             'stencil_index': [(<numba.core.ir.Assign object at 0x7c89e8c1c9a0>,
                                90)],
             'stencil_index.1': [(<numba.core.ir.Assign object at 0x7c89e8c1d360>,
                                  90)],
             'stencil_index.2': [(<numba.core.ir.Assign object at 0x7c89e8c1ea40>,
                                  90)],
             'stencil_index.3': [(<numba.core.ir.Assign object at 0x7c89e8c1ea70>,
                                  90)],
             'x': [(<numba.core.ir.Assign object at 0x7c89e8c1e3e0>, 0)]})
2025-01-31 15:31:37,789 - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x7c89e8b6b130>
2025-01-31 15:31:37,971 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=1051)
           2	LOAD_GLOBAL(arg=0, lineno=1065)
           4	LOAD_FAST(arg=0, lineno=1065)
           6	CALL_FUNCTION(arg=1, lineno=1065)
           8	LOAD_FAST(arg=1, lineno=1065)
          10	LOAD_CONST(arg=1, lineno=1065)
          12	LOAD_CONST(arg=1, lineno=1065)
          14	BUILD_SLICE(arg=2, lineno=1065)
          16	STORE_SUBSCR(arg=None, lineno=1065)
          18	LOAD_CONST(arg=1, lineno=1065)
          20	RETURN_VALUE(arg=None, lineno=1065)
2025-01-31 15:31:37,971 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:31:37,971 - DEBUG - stack: []
2025-01-31 15:31:37,971 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:31:37,971 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=1051)
2025-01-31 15:31:37,971 - DEBUG - stack []
2025-01-31 15:31:37,971 - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=1065)
2025-01-31 15:31:37,971 - DEBUG - stack []
2025-01-31 15:31:37,971 - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=1065)
2025-01-31 15:31:37,971 - DEBUG - stack ['$2load_global.0']
2025-01-31 15:31:37,971 - DEBUG - dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=1065)
2025-01-31 15:31:37,971 - DEBUG - stack ['$2load_global.0', '$x4.1']
2025-01-31 15:31:37,971 - DEBUG - dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=1065)
2025-01-31 15:31:37,971 - DEBUG - stack ['$6call_function.2']
2025-01-31 15:31:37,971 - DEBUG - dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=1065)
2025-01-31 15:31:37,971 - DEBUG - stack ['$6call_function.2', '$y8.3']
2025-01-31 15:31:37,971 - DEBUG - dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=1065)
2025-01-31 15:31:37,971 - DEBUG - stack ['$6call_function.2', '$y8.3', '$const10.4']
2025-01-31 15:31:37,971 - DEBUG - dispatch pc=14, inst=BUILD_SLICE(arg=2, lineno=1065)
2025-01-31 15:31:37,971 - DEBUG - stack ['$6call_function.2', '$y8.3', '$const10.4', '$const12.5']
2025-01-31 15:31:37,971 - DEBUG - dispatch pc=16, inst=STORE_SUBSCR(arg=None, lineno=1065)
2025-01-31 15:31:37,971 - DEBUG - stack ['$6call_function.2', '$y8.3', '$14build_slice.7']
2025-01-31 15:31:37,971 - DEBUG - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1065)
2025-01-31 15:31:37,972 - DEBUG - stack []
2025-01-31 15:31:37,972 - DEBUG - dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=1065)
2025-01-31 15:31:37,972 - DEBUG - stack ['$const18.8']
2025-01-31 15:31:37,972 - DEBUG - end state. edges=[]
2025-01-31 15:31:37,972 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:31:37,972 - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-01-31 15:31:37,972 - DEBUG - defmap: {}
2025-01-31 15:31:37,972 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:37,972 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:37,972 - DEBUG - keep phismap: {}
2025-01-31 15:31:37,972 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-01-31 15:31:37,972 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:31:37,972 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$x4.1'}), (6, {'func': '$2load_global.0', 'args': ['$x4.1'], 'res': '$6call_function.2'}), (8, {'res': '$y8.3'}), (10, {'res': '$const10.4'}), (12, {'res': '$const12.5'}), (14, {'start': '$const10.4', 'stop': '$const12.5', 'step': None, 'res': '$14build_slice.7', 'slicevar': '$14build_slice.6'}), (16, {'target': '$y8.3', 'index': '$14build_slice.7', 'value': '$6call_function.2'}), (18, {'res': '$const18.8'}), (20, {'retval': '$const18.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:37,972 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    y = arg(1, name=y)                       ['y']
    $2load_global.0 = global(_localmax_sten: <numba.stencils.stencil.StencilFunc object at 0x7c89eba2d4b0>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, utils.py:1051)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$6call_function.2', 'x']
    $const10.4 = const(NoneType, None)       ['$const10.4']
    $const12.5 = const(NoneType, None)       ['$const12.5']
    $14build_slice.6 = global(slice: <class 'slice'>) ['$14build_slice.6']
    $14build_slice.7 = call $14build_slice.6($const10.4, $const12.5, func=$14build_slice.6, args=(Var($const10.4, utils.py:1065), Var($const12.5, utils.py:1065)), kws=(), vararg=None, varkwarg=None, target=None) ['$14build_slice.6', '$14build_slice.7', '$const10.4', '$const12.5']
    y[$14build_slice.7] = $6call_function.2  ['$14build_slice.7', '$6call_function.2', 'y']
    $const18.8 = const(NoneType, None)       ['$const18.8']
    $20return_value.9 = cast(value=$const18.8) ['$20return_value.9', '$const18.8']
    return $20return_value.9                 ['$20return_value.9']

2025-01-31 15:31:37,976 - DEBUG - ==== SSA block analysis pass on 0
2025-01-31 15:31:37,976 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89ebc84310>
2025-01-31 15:31:37,976 - DEBUG - on stmt: x = arg(0, name=x)
2025-01-31 15:31:37,976 - DEBUG - on stmt: y = arg(1, name=y)
2025-01-31 15:31:37,976 - DEBUG - on stmt: $2load_global.0 = global(_localmax_sten: <numba.stencils.stencil.StencilFunc object at 0x7c89eba2d4b0>)
2025-01-31 15:31:37,976 - DEBUG - on stmt: $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, utils.py:1051)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:37,976 - DEBUG - on stmt: $const10.4 = const(NoneType, None)
2025-01-31 15:31:37,976 - DEBUG - on stmt: $const12.5 = const(NoneType, None)
2025-01-31 15:31:37,976 - DEBUG - on stmt: $14build_slice.6 = global(slice: <class 'slice'>)
2025-01-31 15:31:37,976 - DEBUG - on stmt: $14build_slice.7 = call $14build_slice.6($const10.4, $const12.5, func=$14build_slice.6, args=(Var($const10.4, utils.py:1065), Var($const12.5, utils.py:1065)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:37,976 - DEBUG - on stmt: y[slice(None, None, None)] = $6call_function.2
2025-01-31 15:31:37,976 - DEBUG - on stmt: $const18.8 = const(NoneType, None)
2025-01-31 15:31:37,976 - DEBUG - on stmt: $20return_value.9 = cast(value=$const18.8)
2025-01-31 15:31:37,977 - DEBUG - on stmt: return $20return_value.9
2025-01-31 15:31:37,977 - DEBUG - defs defaultdict(<class 'list'>,
            {'$14build_slice.6': [(<numba.core.ir.Assign object at 0x7c89ebc84a30>,
                                   0)],
             '$14build_slice.7': [(<numba.core.ir.Assign object at 0x7c89ebc84820>,
                                   0)],
             '$20return_value.9': [(<numba.core.ir.Assign object at 0x7c89ebc85540>,
                                    0)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x7c89ebc86410>,
                                  0)],
             '$6call_function.2': [(<numba.core.ir.Assign object at 0x7c89ebc84df0>,
                                    0)],
             '$const10.4': [(<numba.core.ir.Assign object at 0x7c89ebc86650>,
                             0)],
             '$const12.5': [(<numba.core.ir.Assign object at 0x7c89ebc84910>,
                             0)],
             '$const18.8': [(<numba.core.ir.Assign object at 0x7c89ebc84850>,
                             0)],
             'x': [(<numba.core.ir.Assign object at 0x7c89ebc846d0>, 0)],
             'y': [(<numba.core.ir.Assign object at 0x7c89ebc85c90>, 0)]})
2025-01-31 15:31:37,977 - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x7c89ebc84310>
2025-01-31 15:31:37,990 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_FAST(arg=0, lineno=2)
           4	LOAD_ATTR(arg=0, lineno=2)
           6	STORE_FAST(arg=1, lineno=2)
           8	LOAD_GLOBAL(arg=1, lineno=3)
          10	LOAD_ATTR(arg=2, lineno=3)
          12	LOAD_FAST(arg=1, lineno=3)
          14	LOAD_GLOBAL(arg=1, lineno=3)
          16	LOAD_ATTR(arg=3, lineno=3)
          18	LOAD_CONST(arg=1, lineno=3)
          20	CALL_FUNCTION_KW(arg=2, lineno=3)
          22	STORE_FAST(arg=2, lineno=3)
          24	LOAD_CONST(arg=2, lineno=4)
          26	LOAD_FAST(arg=2, lineno=4)
          28	LOAD_CONST(arg=0, lineno=4)
          30	LOAD_CONST(arg=3, lineno=4)
          32	BUILD_SLICE(arg=2, lineno=4)
          34	STORE_SUBSCR(arg=None, lineno=4)
          36	LOAD_CONST(arg=2, lineno=5)
          38	LOAD_FAST(arg=2, lineno=5)
          40	LOAD_CONST(arg=4, lineno=5)
          42	LOAD_CONST(arg=0, lineno=5)
          44	BUILD_SLICE(arg=2, lineno=5)
          46	STORE_SUBSCR(arg=None, lineno=5)
          48	LOAD_GLOBAL(arg=4, lineno=6)
          50	LOAD_GLOBAL(arg=5, lineno=6)
          52	LOAD_CONST(arg=2, lineno=6)
          54	LOAD_CONST(arg=4, lineno=6)
          56	CALL_FUNCTION(arg=2, lineno=6)
          58	UNARY_NEGATIVE(arg=None, lineno=6)
          60	LOAD_FAST(arg=1, lineno=6)
          62	LOAD_CONST(arg=2, lineno=6)
          64	BINARY_SUBSCR(arg=None, lineno=6)
          66	LOAD_GLOBAL(arg=6, lineno=6)
          68	LOAD_CONST(arg=2, lineno=6)
          70	LOAD_CONST(arg=3, lineno=6)
          72	CALL_FUNCTION(arg=2, lineno=6)
          74	BINARY_SUBTRACT(arg=None, lineno=6)
          76	CALL_FUNCTION(arg=2, lineno=6)
          78	GET_ITER(arg=None, lineno=6)
>         80	FOR_ITER(arg=4, lineno=6)
          82	STORE_FAST(arg=3, lineno=6)
          84	LOAD_CONST(arg=2, lineno=7)
          86	STORE_FAST(arg=4, lineno=7)
          88	JUMP_ABSOLUTE(arg=41, lineno=7)
>         90	LOAD_FAST(arg=2, lineno=8)
          92	RETURN_VALUE(arg=None, lineno=8)
2025-01-31 15:31:37,990 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:31:37,990 - DEBUG - stack: []
2025-01-31 15:31:37,990 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:31:37,990 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=1)
2025-01-31 15:31:37,990 - DEBUG - stack []
2025-01-31 15:31:37,990 - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=2)
2025-01-31 15:31:37,990 - DEBUG - stack []
2025-01-31 15:31:37,990 - DEBUG - dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=2)
2025-01-31 15:31:37,990 - DEBUG - stack ['$x2.0']
2025-01-31 15:31:37,990 - DEBUG - dispatch pc=6, inst=STORE_FAST(arg=1, lineno=2)
2025-01-31 15:31:37,990 - DEBUG - stack ['$4load_attr.1']
2025-01-31 15:31:37,991 - DEBUG - dispatch pc=8, inst=LOAD_GLOBAL(arg=1, lineno=3)
2025-01-31 15:31:37,991 - DEBUG - stack []
2025-01-31 15:31:37,991 - DEBUG - dispatch pc=10, inst=LOAD_ATTR(arg=2, lineno=3)
2025-01-31 15:31:37,991 - DEBUG - stack ['$8load_global.2']
2025-01-31 15:31:37,991 - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=3)
2025-01-31 15:31:37,991 - DEBUG - stack ['$10load_attr.3']
2025-01-31 15:31:37,991 - DEBUG - dispatch pc=14, inst=LOAD_GLOBAL(arg=1, lineno=3)
2025-01-31 15:31:37,991 - DEBUG - stack ['$10load_attr.3', '$full_shape012.4']
2025-01-31 15:31:37,991 - DEBUG - dispatch pc=16, inst=LOAD_ATTR(arg=3, lineno=3)
2025-01-31 15:31:37,991 - DEBUG - stack ['$10load_attr.3', '$full_shape012.4', '$14load_global.5']
2025-01-31 15:31:37,991 - DEBUG - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=3)
2025-01-31 15:31:37,991 - DEBUG - stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6']
2025-01-31 15:31:37,991 - DEBUG - dispatch pc=20, inst=CALL_FUNCTION_KW(arg=2, lineno=3)
2025-01-31 15:31:37,991 - DEBUG - stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6', '$const18.7']
2025-01-31 15:31:37,991 - DEBUG - dispatch pc=22, inst=STORE_FAST(arg=2, lineno=3)
2025-01-31 15:31:37,991 - DEBUG - stack ['$20call_function_kw.8']
2025-01-31 15:31:37,991 - DEBUG - dispatch pc=24, inst=LOAD_CONST(arg=2, lineno=4)
2025-01-31 15:31:37,991 - DEBUG - stack []
2025-01-31 15:31:37,991 - DEBUG - dispatch pc=26, inst=LOAD_FAST(arg=2, lineno=4)
2025-01-31 15:31:37,991 - DEBUG - stack ['$const24.9']
2025-01-31 15:31:37,991 - DEBUG - dispatch pc=28, inst=LOAD_CONST(arg=0, lineno=4)
2025-01-31 15:31:37,991 - DEBUG - stack ['$const24.9', '$out026.10']
2025-01-31 15:31:37,991 - DEBUG - dispatch pc=30, inst=LOAD_CONST(arg=3, lineno=4)
2025-01-31 15:31:37,991 - DEBUG - stack ['$const24.9', '$out026.10', '$const28.11']
2025-01-31 15:31:37,991 - DEBUG - dispatch pc=32, inst=BUILD_SLICE(arg=2, lineno=4)
2025-01-31 15:31:37,991 - DEBUG - stack ['$const24.9', '$out026.10', '$const28.11', '$const30.12']
2025-01-31 15:31:37,991 - DEBUG - dispatch pc=34, inst=STORE_SUBSCR(arg=None, lineno=4)
2025-01-31 15:31:37,991 - DEBUG - stack ['$const24.9', '$out026.10', '$32build_slice.14']
2025-01-31 15:31:37,991 - DEBUG - dispatch pc=36, inst=LOAD_CONST(arg=2, lineno=5)
2025-01-31 15:31:37,992 - DEBUG - stack []
2025-01-31 15:31:37,992 - DEBUG - dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=5)
2025-01-31 15:31:37,992 - DEBUG - stack ['$const36.15']
2025-01-31 15:31:37,992 - DEBUG - dispatch pc=40, inst=LOAD_CONST(arg=4, lineno=5)
2025-01-31 15:31:37,992 - DEBUG - stack ['$const36.15', '$out038.16']
2025-01-31 15:31:37,992 - DEBUG - dispatch pc=42, inst=LOAD_CONST(arg=0, lineno=5)
2025-01-31 15:31:37,992 - DEBUG - stack ['$const36.15', '$out038.16', '$const40.17']
2025-01-31 15:31:37,992 - DEBUG - dispatch pc=44, inst=BUILD_SLICE(arg=2, lineno=5)
2025-01-31 15:31:37,992 - DEBUG - stack ['$const36.15', '$out038.16', '$const40.17', '$const42.18']
2025-01-31 15:31:37,992 - DEBUG - dispatch pc=46, inst=STORE_SUBSCR(arg=None, lineno=5)
2025-01-31 15:31:37,992 - DEBUG - stack ['$const36.15', '$out038.16', '$44build_slice.20']
2025-01-31 15:31:37,992 - DEBUG - dispatch pc=48, inst=LOAD_GLOBAL(arg=4, lineno=6)
2025-01-31 15:31:37,992 - DEBUG - stack []
2025-01-31 15:31:37,992 - DEBUG - dispatch pc=50, inst=LOAD_GLOBAL(arg=5, lineno=6)
2025-01-31 15:31:37,992 - DEBUG - stack ['$48load_global.21']
2025-01-31 15:31:37,992 - DEBUG - dispatch pc=52, inst=LOAD_CONST(arg=2, lineno=6)
2025-01-31 15:31:37,992 - DEBUG - stack ['$48load_global.21', '$50load_global.22']
2025-01-31 15:31:37,992 - DEBUG - dispatch pc=54, inst=LOAD_CONST(arg=4, lineno=6)
2025-01-31 15:31:37,992 - DEBUG - stack ['$48load_global.21', '$50load_global.22', '$const52.23']
2025-01-31 15:31:37,992 - DEBUG - dispatch pc=56, inst=CALL_FUNCTION(arg=2, lineno=6)
2025-01-31 15:31:37,992 - DEBUG - stack ['$48load_global.21', '$50load_global.22', '$const52.23', '$const54.24']
2025-01-31 15:31:37,992 - DEBUG - dispatch pc=58, inst=UNARY_NEGATIVE(arg=None, lineno=6)
2025-01-31 15:31:37,992 - DEBUG - stack ['$48load_global.21', '$56call_function.25']
2025-01-31 15:31:37,992 - DEBUG - dispatch pc=60, inst=LOAD_FAST(arg=1, lineno=6)
2025-01-31 15:31:37,992 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26']
2025-01-31 15:31:37,992 - DEBUG - dispatch pc=62, inst=LOAD_CONST(arg=2, lineno=6)
2025-01-31 15:31:37,992 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27']
2025-01-31 15:31:37,992 - DEBUG - dispatch pc=64, inst=BINARY_SUBSCR(arg=None, lineno=6)
2025-01-31 15:31:37,992 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27', '$const62.28']
2025-01-31 15:31:37,993 - DEBUG - dispatch pc=66, inst=LOAD_GLOBAL(arg=6, lineno=6)
2025-01-31 15:31:37,993 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29']
2025-01-31 15:31:37,993 - DEBUG - dispatch pc=68, inst=LOAD_CONST(arg=2, lineno=6)
2025-01-31 15:31:37,993 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30']
2025-01-31 15:31:37,993 - DEBUG - dispatch pc=70, inst=LOAD_CONST(arg=3, lineno=6)
2025-01-31 15:31:37,993 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31']
2025-01-31 15:31:37,993 - DEBUG - dispatch pc=72, inst=CALL_FUNCTION(arg=2, lineno=6)
2025-01-31 15:31:37,993 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31', '$const70.32']
2025-01-31 15:31:37,993 - DEBUG - dispatch pc=74, inst=BINARY_SUBTRACT(arg=None, lineno=6)
2025-01-31 15:31:37,993 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$72call_function.33']
2025-01-31 15:31:37,993 - DEBUG - dispatch pc=76, inst=CALL_FUNCTION(arg=2, lineno=6)
2025-01-31 15:31:37,993 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34']
2025-01-31 15:31:37,993 - DEBUG - dispatch pc=78, inst=GET_ITER(arg=None, lineno=6)
2025-01-31 15:31:37,993 - DEBUG - stack ['$76call_function.35']
2025-01-31 15:31:37,993 - DEBUG - end state. edges=[Edge(pc=80, stack=('$78get_iter.36',), blockstack=(), npush=0)]
2025-01-31 15:31:37,993 - DEBUG - pending: deque([State(pc_initial=80 nstack_initial=1)])
2025-01-31 15:31:37,993 - DEBUG - stack: ['$phi80.0']
2025-01-31 15:31:37,993 - DEBUG - state.pc_initial: State(pc_initial=80 nstack_initial=1)
2025-01-31 15:31:37,993 - DEBUG - dispatch pc=80, inst=FOR_ITER(arg=4, lineno=6)
2025-01-31 15:31:37,993 - DEBUG - stack ['$phi80.0']
2025-01-31 15:31:37,993 - DEBUG - end state. edges=[Edge(pc=90, stack=(), blockstack=(), npush=0), Edge(pc=82, stack=('$phi80.0', '$80for_iter.2'), blockstack=(), npush=0)]
2025-01-31 15:31:37,993 - DEBUG - pending: deque([State(pc_initial=90 nstack_initial=0), State(pc_initial=82 nstack_initial=2)])
2025-01-31 15:31:37,993 - DEBUG - stack: []
2025-01-31 15:31:37,993 - DEBUG - state.pc_initial: State(pc_initial=90 nstack_initial=0)
2025-01-31 15:31:37,993 - DEBUG - dispatch pc=90, inst=LOAD_FAST(arg=2, lineno=8)
2025-01-31 15:31:37,993 - DEBUG - stack []
2025-01-31 15:31:37,993 - DEBUG - dispatch pc=92, inst=RETURN_VALUE(arg=None, lineno=8)
2025-01-31 15:31:37,993 - DEBUG - stack ['$out090.0']
2025-01-31 15:31:37,994 - DEBUG - end state. edges=[]
2025-01-31 15:31:37,994 - DEBUG - pending: deque([State(pc_initial=82 nstack_initial=2)])
2025-01-31 15:31:37,994 - DEBUG - stack: ['$phi82.0', '$phi82.1']
2025-01-31 15:31:37,994 - DEBUG - state.pc_initial: State(pc_initial=82 nstack_initial=2)
2025-01-31 15:31:37,994 - DEBUG - dispatch pc=82, inst=STORE_FAST(arg=3, lineno=6)
2025-01-31 15:31:37,994 - DEBUG - stack ['$phi82.0', '$phi82.1']
2025-01-31 15:31:37,994 - DEBUG - dispatch pc=84, inst=LOAD_CONST(arg=2, lineno=7)
2025-01-31 15:31:37,994 - DEBUG - stack ['$phi82.0']
2025-01-31 15:31:37,994 - DEBUG - dispatch pc=86, inst=STORE_FAST(arg=4, lineno=7)
2025-01-31 15:31:37,994 - DEBUG - stack ['$phi82.0', '$const84.2']
2025-01-31 15:31:37,994 - DEBUG - dispatch pc=88, inst=JUMP_ABSOLUTE(arg=41, lineno=7)
2025-01-31 15:31:37,994 - DEBUG - stack ['$phi82.0']
2025-01-31 15:31:37,994 - DEBUG - end state. edges=[Edge(pc=80, stack=('$phi82.0',), blockstack=(), npush=0)]
2025-01-31 15:31:37,994 - DEBUG - pending: deque([State(pc_initial=80 nstack_initial=1)])
2025-01-31 15:31:37,994 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:31:37,994 - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=80 nstack_initial=1): {'$phi80.0'},
             State(pc_initial=82 nstack_initial=2): {'$phi82.1'},
             State(pc_initial=90 nstack_initial=0): set()})
2025-01-31 15:31:37,994 - DEBUG - defmap: {'$phi80.0': State(pc_initial=0 nstack_initial=0),
 '$phi82.1': State(pc_initial=80 nstack_initial=1)}
2025-01-31 15:31:37,994 - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi82.0', State(pc_initial=82 nstack_initial=2))},
             '$phi82.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-01-31 15:31:37,995 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-01-31 15:31:37,995 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-01-31 15:31:37,995 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-01-31 15:31:37,995 - DEBUG - keep phismap: {'$phi80.0': {('$78get_iter.36', State(pc_initial=0 nstack_initial=0))},
 '$phi82.1': {('$80for_iter.2', State(pc_initial=80 nstack_initial=1))}}
2025-01-31 15:31:37,995 - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi80.0': '$78get_iter.36'},
             State(pc_initial=80 nstack_initial=1): {'$phi82.1': '$80for_iter.2'}})
2025-01-31 15:31:37,995 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:31:37,995 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'item': '$x2.0', 'res': '$4load_attr.1'}), (6, {'value': '$4load_attr.1'}), (8, {'res': '$8load_global.2'}), (10, {'item': '$8load_global.2', 'res': '$10load_attr.3'}), (12, {'res': '$full_shape012.4'}), (14, {'res': '$14load_global.5'}), (16, {'item': '$14load_global.5', 'res': '$16load_attr.6'}), (18, {'res': '$const18.7'}), (20, {'func': '$10load_attr.3', 'args': ['$full_shape012.4', '$16load_attr.6'], 'names': '$const18.7', 'res': '$20call_function_kw.8'}), (22, {'value': '$20call_function_kw.8'}), (24, {'res': '$const24.9'}), (26, {'res': '$out026.10'}), (28, {'res': '$const28.11'}), (30, {'res': '$const30.12'}), (32, {'start': '$const28.11', 'stop': '$const30.12', 'step': None, 'res': '$32build_slice.14', 'slicevar': '$32build_slice.13'}), (34, {'target': '$out026.10', 'index': '$32build_slice.14', 'value': '$const24.9'}), (36, {'res': '$const36.15'}), (38, {'res': '$out038.16'}), (40, {'res': '$const40.17'}), (42, {'res': '$const42.18'}), (44, {'start': '$const40.17', 'stop': '$const42.18', 'step': None, 'res': '$44build_slice.20', 'slicevar': '$44build_slice.19'}), (46, {'target': '$out038.16', 'index': '$44build_slice.20', 'value': '$const36.15'}), (48, {'res': '$48load_global.21'}), (50, {'res': '$50load_global.22'}), (52, {'res': '$const52.23'}), (54, {'res': '$const54.24'}), (56, {'func': '$50load_global.22', 'args': ['$const52.23', '$const54.24'], 'res': '$56call_function.25'}), (58, {'value': '$56call_function.25', 'res': '$58unary_negative.26'}), (60, {'res': '$full_shape060.27'}), (62, {'res': '$const62.28'}), (64, {'index': '$const62.28', 'target': '$full_shape060.27', 'res': '$64binary_subscr.29'}), (66, {'res': '$66load_global.30'}), (68, {'res': '$const68.31'}), (70, {'res': '$const70.32'}), (72, {'func': '$66load_global.30', 'args': ['$const68.31', '$const70.32'], 'res': '$72call_function.33'}), (74, {'lhs': '$64binary_subscr.29', 'rhs': '$72call_function.33', 'res': '$74binary_subtract.34'}), (76, {'func': '$48load_global.21', 'args': ['$58unary_negative.26', '$74binary_subtract.34'], 'res': '$76call_function.35'}), (78, {'value': '$76call_function.35', 'res': '$78get_iter.36'})), outgoing_phis={'$phi80.0': '$78get_iter.36'}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$78get_iter.36',)})
2025-01-31 15:31:37,995 - DEBUG - block_infos State(pc_initial=80 nstack_initial=1):
AdaptBlockInfo(insts=((80, {'iterator': '$phi80.0', 'pair': '$80for_iter.1', 'indval': '$80for_iter.2', 'pred': '$80for_iter.3'}),), outgoing_phis={'$phi82.1': '$80for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: (), 82: ('$phi80.0', '$80for_iter.2')})
2025-01-31 15:31:37,995 - DEBUG - block_infos State(pc_initial=82 nstack_initial=2):
AdaptBlockInfo(insts=((82, {'value': '$phi82.1'}), (84, {'res': '$const84.2'}), (86, {'value': '$const84.2'}), (88, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$phi82.0',)})
2025-01-31 15:31:37,996 - DEBUG - block_infos State(pc_initial=90 nstack_initial=0):
AdaptBlockInfo(insts=((90, {'res': '$out090.0'}), (92, {'retval': '$out090.0', 'castval': '$92return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:37,996 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    full_shape0 = getattr(value=x, attr=shape) ['full_shape0', 'x']
    $8load_global.2 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>) ['$8load_global.2']
    $10load_attr.3 = getattr(value=$8load_global.2, attr=empty) ['$10load_attr.3', '$8load_global.2']
    $14load_global.5 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>) ['$14load_global.5']
    $16load_attr.6 = getattr(value=$14load_global.5, attr=bool_) ['$14load_global.5', '$16load_attr.6']
    out0 = call $10load_attr.3(full_shape0, func=$10load_attr.3, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6, <string>:3))], vararg=None, varkwarg=None, target=None) ['$10load_attr.3', '$16load_attr.6', 'full_shape0', 'out0']
    $const24.9 = const(int, 0)               ['$const24.9']
    $const28.11 = const(NoneType, None)      ['$const28.11']
    $const30.12 = const(int, 1)              ['$const30.12']
    $32build_slice.13 = global(slice: <class 'slice'>) ['$32build_slice.13']
    $32build_slice.14 = call $32build_slice.13($const28.11, $const30.12, func=$32build_slice.13, args=(Var($const28.11, <string>:4), Var($const30.12, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None) ['$32build_slice.13', '$32build_slice.14', '$const28.11', '$const30.12']
    out0[$32build_slice.14] = $const24.9     ['$32build_slice.14', '$const24.9', 'out0']
    $const36.15 = const(int, 0)              ['$const36.15']
    $const40.17 = const(int, -1)             ['$const40.17']
    $const42.18 = const(NoneType, None)      ['$const42.18']
    $44build_slice.19 = global(slice: <class 'slice'>) ['$44build_slice.19']
    $44build_slice.20 = call $44build_slice.19($const40.17, $const42.18, func=$44build_slice.19, args=(Var($const40.17, <string>:5), Var($const42.18, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None) ['$44build_slice.19', '$44build_slice.20', '$const40.17', '$const42.18']
    out0[$44build_slice.20] = $const36.15    ['$44build_slice.20', '$const36.15', 'out0']
    $48load_global.21 = global(range: <class 'range'>) ['$48load_global.21']
    $50load_global.22 = global(min: <built-in function min>) ['$50load_global.22']
    $const52.23 = const(int, 0)              ['$const52.23']
    $const54.24 = const(int, -1)             ['$const54.24']
    $56call_function.25 = call $50load_global.22($const52.23, $const54.24, func=$50load_global.22, args=[Var($const52.23, <string>:6), Var($const54.24, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$50load_global.22', '$56call_function.25', '$const52.23', '$const54.24']
    $58unary_negative.26 = unary(fn=<built-in function neg>, value=$56call_function.25) ['$56call_function.25', '$58unary_negative.26']
    $const62.28 = const(int, 0)              ['$const62.28']
    $64binary_subscr.29 = getitem(value=full_shape0, index=$const62.28, fn=<built-in function getitem>) ['$64binary_subscr.29', '$const62.28', 'full_shape0']
    $66load_global.30 = global(max: <built-in function max>) ['$66load_global.30']
    $const68.31 = const(int, 0)              ['$const68.31']
    $const70.32 = const(int, 1)              ['$const70.32']
    $72call_function.33 = call $66load_global.30($const68.31, $const70.32, func=$66load_global.30, args=[Var($const68.31, <string>:6), Var($const70.32, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$66load_global.30', '$72call_function.33', '$const68.31', '$const70.32']
    $74binary_subtract.34 = $64binary_subscr.29 - $72call_function.33 ['$64binary_subscr.29', '$72call_function.33', '$74binary_subtract.34']
    $76call_function.35 = call $48load_global.21($58unary_negative.26, $74binary_subtract.34, func=$48load_global.21, args=[Var($58unary_negative.26, <string>:6), Var($74binary_subtract.34, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34', '$76call_function.35']
    $78get_iter.36 = getiter(value=$76call_function.35) ['$76call_function.35', '$78get_iter.36']
    $phi80.0 = $78get_iter.36                ['$78get_iter.36', '$phi80.0']
    jump 80                                  []
label 80:
    $80for_iter.1 = iternext(value=$phi80.0) ['$80for_iter.1', '$phi80.0']
    $80for_iter.2 = pair_first(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.2']
    $80for_iter.3 = pair_second(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.3']
    $phi82.1 = $80for_iter.2                 ['$80for_iter.2', '$phi82.1']
    branch $80for_iter.3, 82, 90             ['$80for_iter.3']
label 82:
    index00 = $phi82.1                       ['$phi82.1', 'index00']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 80                                  []
label 90:
    $92return_value.1 = cast(value=out0)     ['$92return_value.1', 'out0']
    return $92return_value.1                 ['$92return_value.1']

2025-01-31 15:31:38,004 - DEBUG - ==== SSA block analysis pass on 0
2025-01-31 15:31:38,004 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89eb9daf20>
2025-01-31 15:31:38,004 - DEBUG - on stmt: x = arg(0, name=x)
2025-01-31 15:31:38,004 - DEBUG - on stmt: full_shape0 = getattr(value=x, attr=shape)
2025-01-31 15:31:38,004 - DEBUG - on stmt: $8load_global.2.1 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:38,004 - DEBUG - on stmt: $10load_attr.3.1 = getattr(value=$8load_global.2.1, attr=empty)
2025-01-31 15:31:38,004 - DEBUG - on stmt: $14load_global.5.1 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:38,004 - DEBUG - on stmt: $16load_attr.6.1 = getattr(value=$14load_global.5.1, attr=bool_)
2025-01-31 15:31:38,004 - DEBUG - on stmt: out0 = call $10load_attr.3.1(full_shape0, func=$10load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:38,004 - DEBUG - on stmt: $const24.9.1 = const(int, 0)
2025-01-31 15:31:38,004 - DEBUG - on stmt: $const28.11.1 = const(NoneType, None)
2025-01-31 15:31:38,004 - DEBUG - on stmt: $const30.12.1 = const(int, 1)
2025-01-31 15:31:38,004 - DEBUG - on stmt: $32build_slice.13.1 = global(slice: <class 'slice'>)
2025-01-31 15:31:38,004 - DEBUG - on stmt: $32build_slice.14.1 = call $32build_slice.13.1($const28.11.1, $const30.12.1, func=$32build_slice.13.1, args=(Var($const28.11.1, <string>:4), Var($const30.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:38,005 - DEBUG - on stmt: out0[$32build_slice.14.1] = $const24.9.1
2025-01-31 15:31:38,005 - DEBUG - on stmt: $const36.15.1 = const(int, 0)
2025-01-31 15:31:38,005 - DEBUG - on stmt: $const40.17.1 = const(int, -1)
2025-01-31 15:31:38,005 - DEBUG - on stmt: $const42.18.1 = const(NoneType, None)
2025-01-31 15:31:38,005 - DEBUG - on stmt: $44build_slice.19.1 = global(slice: <class 'slice'>)
2025-01-31 15:31:38,005 - DEBUG - on stmt: $44build_slice.20.1 = call $44build_slice.19.1($const40.17.1, $const42.18.1, func=$44build_slice.19.1, args=(Var($const40.17.1, <string>:5), Var($const42.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:38,005 - DEBUG - on stmt: out0[$44build_slice.20.1] = $const36.15.1
2025-01-31 15:31:38,005 - DEBUG - on stmt: $48load_global.21.1 = global(range: <class 'range'>)
2025-01-31 15:31:38,005 - DEBUG - on stmt: $50load_global.22.1 = global(min: <built-in function min>)
2025-01-31 15:31:38,005 - DEBUG - on stmt: $const52.23.1 = const(int, 0)
2025-01-31 15:31:38,005 - DEBUG - on stmt: $const54.24.1 = const(int, -1)
2025-01-31 15:31:38,005 - DEBUG - on stmt: $56call_function.25.1 = call $50load_global.22.1($const52.23.1, $const54.24.1, func=$50load_global.22.1, args=[Var($const52.23.1, <string>:6), Var($const54.24.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:38,005 - DEBUG - on stmt: $58unary_negative.26.1 = unary(fn=<built-in function neg>, value=$56call_function.25.1)
2025-01-31 15:31:38,005 - DEBUG - on stmt: $const62.28.1 = const(int, 0)
2025-01-31 15:31:38,005 - DEBUG - on stmt: $64binary_subscr.29.1 = getitem(value=full_shape0, index=$const62.28.1, fn=<built-in function getitem>)
2025-01-31 15:31:38,005 - DEBUG - on stmt: $66load_global.30.1 = global(max: <built-in function max>)
2025-01-31 15:31:38,005 - DEBUG - on stmt: $const68.31.1 = const(int, 0)
2025-01-31 15:31:38,005 - DEBUG - on stmt: $const70.32.1 = const(int, 1)
2025-01-31 15:31:38,005 - DEBUG - on stmt: $72call_function.33.1 = call $66load_global.30.1($const68.31.1, $const70.32.1, func=$66load_global.30.1, args=[Var($const68.31.1, <string>:6), Var($const70.32.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:38,005 - DEBUG - on stmt: $74binary_subtract.34.1 = $64binary_subscr.29.1 - $72call_function.33.1
2025-01-31 15:31:38,005 - DEBUG - on stmt: $76call_function.35.1 = call $48load_global.21.1($58unary_negative.26.1, $74binary_subtract.34.1, func=$48load_global.21.1, args=[Var($58unary_negative.26.1, <string>:6), Var($74binary_subtract.34.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:38,005 - DEBUG - on stmt: $78get_iter.36.1 = getiter(value=$76call_function.35.1)
2025-01-31 15:31:38,005 - DEBUG - on stmt: $phi80.0.1 = $78get_iter.36.1
2025-01-31 15:31:38,005 - DEBUG - on stmt: jump 80
2025-01-31 15:31:38,005 - DEBUG - ==== SSA block analysis pass on 80
2025-01-31 15:31:38,006 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89eb9daf20>
2025-01-31 15:31:38,006 - DEBUG - on stmt: $80for_iter.1.1 = iternext(value=$phi80.0.1)
2025-01-31 15:31:38,006 - DEBUG - on stmt: $80for_iter.2.1 = pair_first(value=$80for_iter.1.1)
2025-01-31 15:31:38,006 - DEBUG - on stmt: $80for_iter.3.1 = pair_second(value=$80for_iter.1.1)
2025-01-31 15:31:38,006 - DEBUG - on stmt: $phi82.1.1 = $80for_iter.2.1
2025-01-31 15:31:38,006 - DEBUG - on stmt: branch $80for_iter.3.1, 82, 92
2025-01-31 15:31:38,006 - DEBUG - ==== SSA block analysis pass on 82
2025-01-31 15:31:38,006 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89eb9daf20>
2025-01-31 15:31:38,006 - DEBUG - on stmt: index00 = $phi82.1.1
2025-01-31 15:31:38,006 - DEBUG - on stmt: jump 90
2025-01-31 15:31:38,006 - DEBUG - ==== SSA block analysis pass on 92
2025-01-31 15:31:38,006 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89eb9daf20>
2025-01-31 15:31:38,006 - DEBUG - on stmt: $92return_value.1.1 = cast(value=out0)
2025-01-31 15:31:38,006 - DEBUG - on stmt: return $92return_value.1.1
2025-01-31 15:31:38,006 - DEBUG - ==== SSA block analysis pass on 90
2025-01-31 15:31:38,006 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89eb9daf20>
2025-01-31 15:31:38,006 - DEBUG - on stmt: $const4.1 = const(int, 0)
2025-01-31 15:31:38,006 - DEBUG - on stmt: stencil_index = $const4.1 + index00
2025-01-31 15:31:38,006 - DEBUG - on stmt: $6binary_subscr.2 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-01-31 15:31:38,006 - DEBUG - on stmt: $const10.4 = const(int, -1)
2025-01-31 15:31:38,006 - DEBUG - on stmt: stencil_index.1 = $const10.4 + index00
2025-01-31 15:31:38,006 - DEBUG - on stmt: $12binary_subscr.5 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2025-01-31 15:31:38,006 - DEBUG - on stmt: $14compare_op.6 = $6binary_subscr.2 > $12binary_subscr.5
2025-01-31 15:31:38,006 - DEBUG - on stmt: $const18.8 = const(int, 0)
2025-01-31 15:31:38,006 - DEBUG - on stmt: stencil_index.2 = $const18.8 + index00
2025-01-31 15:31:38,006 - DEBUG - on stmt: $20binary_subscr.9 = getitem(value=x, index=stencil_index.2, fn=<built-in function getitem>)
2025-01-31 15:31:38,006 - DEBUG - on stmt: $const24.11 = const(int, 1)
2025-01-31 15:31:38,007 - DEBUG - on stmt: stencil_index.3 = $const24.11 + index00
2025-01-31 15:31:38,007 - DEBUG - on stmt: $26binary_subscr.12 = getitem(value=x, index=stencil_index.3, fn=<built-in function getitem>)
2025-01-31 15:31:38,007 - DEBUG - on stmt: $28compare_op.13 = $20binary_subscr.9 >= $26binary_subscr.12
2025-01-31 15:31:38,007 - DEBUG - on stmt: $30binary_and.14 = $14compare_op.6 & $28compare_op.13
2025-01-31 15:31:38,007 - DEBUG - on stmt: $32return_value.15 = cast(value=$30binary_and.14)
2025-01-31 15:31:38,007 - DEBUG - on stmt: out0[index00] = $32return_value.15
2025-01-31 15:31:38,007 - DEBUG - on stmt: jump 91
2025-01-31 15:31:38,007 - DEBUG - ==== SSA block analysis pass on 91
2025-01-31 15:31:38,007 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89eb9daf20>
2025-01-31 15:31:38,007 - DEBUG - on stmt: jump 80
2025-01-31 15:31:38,008 - DEBUG - defs defaultdict(<class 'list'>,
            {'$10load_attr.3.1': [(<numba.core.ir.Assign object at 0x7c89eb9eb970>,
                                   0)],
             '$12binary_subscr.5': [(<numba.core.ir.Assign object at 0x7c89ebbfbd30>,
                                     90)],
             '$14compare_op.6': [(<numba.core.ir.Assign object at 0x7c89ebd61450>,
                                  90)],
             '$14load_global.5.1': [(<numba.core.ir.Assign object at 0x7c89eb9e9720>,
                                     0)],
             '$16load_attr.6.1': [(<numba.core.ir.Assign object at 0x7c89eb9e8f70>,
                                   0)],
             '$20binary_subscr.9': [(<numba.core.ir.Assign object at 0x7c89ebbfbc70>,
                                     90)],
             '$26binary_subscr.12': [(<numba.core.ir.Assign object at 0x7c89ebbf9750>,
                                      90)],
             '$28compare_op.13': [(<numba.core.ir.Assign object at 0x7c89ebd5a800>,
                                   90)],
             '$30binary_and.14': [(<numba.core.ir.Assign object at 0x7c89ebbf2230>,
                                   90)],
             '$32build_slice.13.1': [(<numba.core.ir.Assign object at 0x7c89eb9e8be0>,
                                      0)],
             '$32build_slice.14.1': [(<numba.core.ir.Assign object at 0x7c89eb9e8970>,
                                      0)],
             '$32return_value.15': [(<numba.core.ir.Assign object at 0x7c89ebbf2380>,
                                     90)],
             '$44build_slice.19.1': [(<numba.core.ir.Assign object at 0x7c89eb9e91e0>,
                                      0)],
             '$44build_slice.20.1': [(<numba.core.ir.Assign object at 0x7c89eb9e9780>,
                                      0)],
             '$48load_global.21.1': [(<numba.core.ir.Assign object at 0x7c89eb9ea440>,
                                      0)],
             '$50load_global.22.1': [(<numba.core.ir.Assign object at 0x7c89eb9e9c00>,
                                      0)],
             '$56call_function.25.1': [(<numba.core.ir.Assign object at 0x7c89eb9ea530>,
                                        0)],
             '$58unary_negative.26.1': [(<numba.core.ir.Assign object at 0x7c89eb9eabc0>,
                                         0)],
             '$64binary_subscr.29.1': [(<numba.core.ir.Assign object at 0x7c89eb9eadd0>,
                                        0)],
             '$66load_global.30.1': [(<numba.core.ir.Assign object at 0x7c89eb9eb100>,
                                      0)],
             '$6binary_subscr.2': [(<numba.core.ir.Assign object at 0x7c89ebbfa7d0>,
                                    90)],
             '$72call_function.33.1': [(<numba.core.ir.Assign object at 0x7c89eb9eb6d0>,
                                        0)],
             '$74binary_subtract.34.1': [(<numba.core.ir.Assign object at 0x7c89eb9ea380>,
                                          0)],
             '$76call_function.35.1': [(<numba.core.ir.Assign object at 0x7c89eb9eb5e0>,
                                        0)],
             '$78get_iter.36.1': [(<numba.core.ir.Assign object at 0x7c89eb9e9f00>,
                                   0)],
             '$80for_iter.1.1': [(<numba.core.ir.Assign object at 0x7c89eb9e93c0>,
                                  80)],
             '$80for_iter.2.1': [(<numba.core.ir.Assign object at 0x7c89eb9ea950>,
                                  80)],
             '$80for_iter.3.1': [(<numba.core.ir.Assign object at 0x7c89eb9eb370>,
                                  80)],
             '$8load_global.2.1': [(<numba.core.ir.Assign object at 0x7c89ebb94520>,
                                    0)],
             '$92return_value.1.1': [(<numba.core.ir.Assign object at 0x7c89eb9d85b0>,
                                      92)],
             '$const10.4': [(<numba.core.ir.Assign object at 0x7c89ebb94610>,
                             90)],
             '$const18.8': [(<numba.core.ir.Assign object at 0x7c89ebd61270>,
                             90)],
             '$const24.11': [(<numba.core.ir.Assign object at 0x7c89ebd62e60>,
                              90)],
             '$const24.9.1': [(<numba.core.ir.Assign object at 0x7c89eb9eacb0>,
                               0)],
             '$const28.11.1': [(<numba.core.ir.Assign object at 0x7c89eb9e8ca0>,
                                0)],
             '$const30.12.1': [(<numba.core.ir.Assign object at 0x7c89eb9e9900>,
                                0)],
             '$const36.15.1': [(<numba.core.ir.Assign object at 0x7c89eb9e95d0>,
                                0)],
             '$const4.1': [(<numba.core.ir.Assign object at 0x7c89ebb963b0>,
                            90)],
             '$const40.17.1': [(<numba.core.ir.Assign object at 0x7c89eb9e9ed0>,
                                0)],
             '$const42.18.1': [(<numba.core.ir.Assign object at 0x7c89eb9e92a0>,
                                0)],
             '$const52.23.1': [(<numba.core.ir.Assign object at 0x7c89eb9ea1a0>,
                                0)],
             '$const54.24.1': [(<numba.core.ir.Assign object at 0x7c89eb9ea2f0>,
                                0)],
             '$const62.28.1': [(<numba.core.ir.Assign object at 0x7c89eb9eaf20>,
                                0)],
             '$const68.31.1': [(<numba.core.ir.Assign object at 0x7c89eb9eb250>,
                                0)],
             '$const70.32.1': [(<numba.core.ir.Assign object at 0x7c89eb9ebb50>,
                                0)],
             '$phi80.0.1': [(<numba.core.ir.Assign object at 0x7c89ebbfae90>,
                             0)],
             '$phi82.1.1': [(<numba.core.ir.Assign object at 0x7c89eb9ea890>,
                             80)],
             'full_shape0': [(<numba.core.ir.Assign object at 0x7c89ebbfa440>,
                              0)],
             'index00': [(<numba.core.ir.Assign object at 0x7c89eb9e8640>, 82)],
             'out0': [(<numba.core.ir.Assign object at 0x7c89eb9ea860>, 0)],
             'stencil_index': [(<numba.core.ir.Assign object at 0x7c89ebbfa1a0>,
                                90)],
             'stencil_index.1': [(<numba.core.ir.Assign object at 0x7c89ebbf9570>,
                                  90)],
             'stencil_index.2': [(<numba.core.ir.Assign object at 0x7c89ebbfbf70>,
                                  90)],
             'stencil_index.3': [(<numba.core.ir.Assign object at 0x7c89ebbfa290>,
                                  90)],
             'x': [(<numba.core.ir.Assign object at 0x7c89ebbf92a0>, 0)]})
2025-01-31 15:31:38,008 - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x7c89eb9daf20>
2025-01-31 15:31:38,192 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=1051)
           2	LOAD_GLOBAL(arg=0, lineno=1065)
           4	LOAD_FAST(arg=0, lineno=1065)
           6	CALL_FUNCTION(arg=1, lineno=1065)
           8	LOAD_FAST(arg=1, lineno=1065)
          10	LOAD_CONST(arg=1, lineno=1065)
          12	LOAD_CONST(arg=1, lineno=1065)
          14	BUILD_SLICE(arg=2, lineno=1065)
          16	STORE_SUBSCR(arg=None, lineno=1065)
          18	LOAD_CONST(arg=1, lineno=1065)
          20	RETURN_VALUE(arg=None, lineno=1065)
2025-01-31 15:31:38,192 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:31:38,192 - DEBUG - stack: []
2025-01-31 15:31:38,192 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:31:38,192 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=1051)
2025-01-31 15:31:38,192 - DEBUG - stack []
2025-01-31 15:31:38,192 - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=1065)
2025-01-31 15:31:38,192 - DEBUG - stack []
2025-01-31 15:31:38,192 - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=1065)
2025-01-31 15:31:38,192 - DEBUG - stack ['$2load_global.0']
2025-01-31 15:31:38,192 - DEBUG - dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=1065)
2025-01-31 15:31:38,192 - DEBUG - stack ['$2load_global.0', '$x4.1']
2025-01-31 15:31:38,192 - DEBUG - dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=1065)
2025-01-31 15:31:38,192 - DEBUG - stack ['$6call_function.2']
2025-01-31 15:31:38,192 - DEBUG - dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=1065)
2025-01-31 15:31:38,193 - DEBUG - stack ['$6call_function.2', '$y8.3']
2025-01-31 15:31:38,193 - DEBUG - dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=1065)
2025-01-31 15:31:38,193 - DEBUG - stack ['$6call_function.2', '$y8.3', '$const10.4']
2025-01-31 15:31:38,193 - DEBUG - dispatch pc=14, inst=BUILD_SLICE(arg=2, lineno=1065)
2025-01-31 15:31:38,193 - DEBUG - stack ['$6call_function.2', '$y8.3', '$const10.4', '$const12.5']
2025-01-31 15:31:38,193 - DEBUG - dispatch pc=16, inst=STORE_SUBSCR(arg=None, lineno=1065)
2025-01-31 15:31:38,193 - DEBUG - stack ['$6call_function.2', '$y8.3', '$14build_slice.7']
2025-01-31 15:31:38,193 - DEBUG - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1065)
2025-01-31 15:31:38,193 - DEBUG - stack []
2025-01-31 15:31:38,193 - DEBUG - dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=1065)
2025-01-31 15:31:38,193 - DEBUG - stack ['$const18.8']
2025-01-31 15:31:38,193 - DEBUG - end state. edges=[]
2025-01-31 15:31:38,193 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:31:38,193 - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-01-31 15:31:38,193 - DEBUG - defmap: {}
2025-01-31 15:31:38,193 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:38,193 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:38,193 - DEBUG - keep phismap: {}
2025-01-31 15:31:38,193 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-01-31 15:31:38,193 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:31:38,193 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$x4.1'}), (6, {'func': '$2load_global.0', 'args': ['$x4.1'], 'res': '$6call_function.2'}), (8, {'res': '$y8.3'}), (10, {'res': '$const10.4'}), (12, {'res': '$const12.5'}), (14, {'start': '$const10.4', 'stop': '$const12.5', 'step': None, 'res': '$14build_slice.7', 'slicevar': '$14build_slice.6'}), (16, {'target': '$y8.3', 'index': '$14build_slice.7', 'value': '$6call_function.2'}), (18, {'res': '$const18.8'}), (20, {'retval': '$const18.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:38,194 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    y = arg(1, name=y)                       ['y']
    $2load_global.0 = global(_localmax_sten: <numba.stencils.stencil.StencilFunc object at 0x7c89eba2d4b0>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, utils.py:1051)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$6call_function.2', 'x']
    $const10.4 = const(NoneType, None)       ['$const10.4']
    $const12.5 = const(NoneType, None)       ['$const12.5']
    $14build_slice.6 = global(slice: <class 'slice'>) ['$14build_slice.6']
    $14build_slice.7 = call $14build_slice.6($const10.4, $const12.5, func=$14build_slice.6, args=(Var($const10.4, utils.py:1065), Var($const12.5, utils.py:1065)), kws=(), vararg=None, varkwarg=None, target=None) ['$14build_slice.6', '$14build_slice.7', '$const10.4', '$const12.5']
    y[$14build_slice.7] = $6call_function.2  ['$14build_slice.7', '$6call_function.2', 'y']
    $const18.8 = const(NoneType, None)       ['$const18.8']
    $20return_value.9 = cast(value=$const18.8) ['$20return_value.9', '$const18.8']
    return $20return_value.9                 ['$20return_value.9']

2025-01-31 15:31:38,197 - DEBUG - ==== SSA block analysis pass on 0
2025-01-31 15:31:38,197 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89f030fa90>
2025-01-31 15:31:38,197 - DEBUG - on stmt: x = arg(0, name=x)
2025-01-31 15:31:38,197 - DEBUG - on stmt: y = arg(1, name=y)
2025-01-31 15:31:38,197 - DEBUG - on stmt: $2load_global.0 = global(_localmax_sten: <numba.stencils.stencil.StencilFunc object at 0x7c89eba2d4b0>)
2025-01-31 15:31:38,198 - DEBUG - on stmt: $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, utils.py:1051)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:38,198 - DEBUG - on stmt: $const10.4 = const(NoneType, None)
2025-01-31 15:31:38,198 - DEBUG - on stmt: $const12.5 = const(NoneType, None)
2025-01-31 15:31:38,198 - DEBUG - on stmt: $14build_slice.6 = global(slice: <class 'slice'>)
2025-01-31 15:31:38,198 - DEBUG - on stmt: $14build_slice.7 = call $14build_slice.6($const10.4, $const12.5, func=$14build_slice.6, args=(Var($const10.4, utils.py:1065), Var($const12.5, utils.py:1065)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:38,198 - DEBUG - on stmt: y[slice(None, None, None)] = $6call_function.2
2025-01-31 15:31:38,198 - DEBUG - on stmt: $const18.8 = const(NoneType, None)
2025-01-31 15:31:38,198 - DEBUG - on stmt: $20return_value.9 = cast(value=$const18.8)
2025-01-31 15:31:38,198 - DEBUG - on stmt: return $20return_value.9
2025-01-31 15:31:38,198 - DEBUG - defs defaultdict(<class 'list'>,
            {'$14build_slice.6': [(<numba.core.ir.Assign object at 0x7c89f02fe2c0>,
                                   0)],
             '$14build_slice.7': [(<numba.core.ir.Assign object at 0x7c89f02fd240>,
                                   0)],
             '$20return_value.9': [(<numba.core.ir.Assign object at 0x7c89f02fdc90>,
                                    0)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x7c89f02ffee0>,
                                  0)],
             '$6call_function.2': [(<numba.core.ir.Assign object at 0x7c89f02fe380>,
                                    0)],
             '$const10.4': [(<numba.core.ir.Assign object at 0x7c89f02fd180>,
                             0)],
             '$const12.5': [(<numba.core.ir.Assign object at 0x7c89f02fd1b0>,
                             0)],
             '$const18.8': [(<numba.core.ir.Assign object at 0x7c89f02fd1e0>,
                             0)],
             'x': [(<numba.core.ir.Assign object at 0x7c89f030fc40>, 0)],
             'y': [(<numba.core.ir.Assign object at 0x7c89ebb969e0>, 0)]})
2025-01-31 15:31:38,198 - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x7c89f030fa90>
2025-01-31 15:31:38,212 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_FAST(arg=0, lineno=2)
           4	LOAD_ATTR(arg=0, lineno=2)
           6	STORE_FAST(arg=1, lineno=2)
           8	LOAD_GLOBAL(arg=1, lineno=3)
          10	LOAD_ATTR(arg=2, lineno=3)
          12	LOAD_FAST(arg=1, lineno=3)
          14	LOAD_GLOBAL(arg=1, lineno=3)
          16	LOAD_ATTR(arg=3, lineno=3)
          18	LOAD_CONST(arg=1, lineno=3)
          20	CALL_FUNCTION_KW(arg=2, lineno=3)
          22	STORE_FAST(arg=2, lineno=3)
          24	LOAD_CONST(arg=2, lineno=4)
          26	LOAD_FAST(arg=2, lineno=4)
          28	LOAD_CONST(arg=0, lineno=4)
          30	LOAD_CONST(arg=3, lineno=4)
          32	BUILD_SLICE(arg=2, lineno=4)
          34	STORE_SUBSCR(arg=None, lineno=4)
          36	LOAD_CONST(arg=2, lineno=5)
          38	LOAD_FAST(arg=2, lineno=5)
          40	LOAD_CONST(arg=4, lineno=5)
          42	LOAD_CONST(arg=0, lineno=5)
          44	BUILD_SLICE(arg=2, lineno=5)
          46	STORE_SUBSCR(arg=None, lineno=5)
          48	LOAD_GLOBAL(arg=4, lineno=6)
          50	LOAD_GLOBAL(arg=5, lineno=6)
          52	LOAD_CONST(arg=2, lineno=6)
          54	LOAD_CONST(arg=4, lineno=6)
          56	CALL_FUNCTION(arg=2, lineno=6)
          58	UNARY_NEGATIVE(arg=None, lineno=6)
          60	LOAD_FAST(arg=1, lineno=6)
          62	LOAD_CONST(arg=2, lineno=6)
          64	BINARY_SUBSCR(arg=None, lineno=6)
          66	LOAD_GLOBAL(arg=6, lineno=6)
          68	LOAD_CONST(arg=2, lineno=6)
          70	LOAD_CONST(arg=3, lineno=6)
          72	CALL_FUNCTION(arg=2, lineno=6)
          74	BINARY_SUBTRACT(arg=None, lineno=6)
          76	CALL_FUNCTION(arg=2, lineno=6)
          78	GET_ITER(arg=None, lineno=6)
>         80	FOR_ITER(arg=4, lineno=6)
          82	STORE_FAST(arg=3, lineno=6)
          84	LOAD_CONST(arg=2, lineno=7)
          86	STORE_FAST(arg=4, lineno=7)
          88	JUMP_ABSOLUTE(arg=41, lineno=7)
>         90	LOAD_FAST(arg=2, lineno=8)
          92	RETURN_VALUE(arg=None, lineno=8)
2025-01-31 15:31:38,212 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:31:38,212 - DEBUG - stack: []
2025-01-31 15:31:38,212 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:31:38,212 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=1)
2025-01-31 15:31:38,212 - DEBUG - stack []
2025-01-31 15:31:38,212 - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=2)
2025-01-31 15:31:38,212 - DEBUG - stack []
2025-01-31 15:31:38,212 - DEBUG - dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=2)
2025-01-31 15:31:38,212 - DEBUG - stack ['$x2.0']
2025-01-31 15:31:38,213 - DEBUG - dispatch pc=6, inst=STORE_FAST(arg=1, lineno=2)
2025-01-31 15:31:38,213 - DEBUG - stack ['$4load_attr.1']
2025-01-31 15:31:38,213 - DEBUG - dispatch pc=8, inst=LOAD_GLOBAL(arg=1, lineno=3)
2025-01-31 15:31:38,213 - DEBUG - stack []
2025-01-31 15:31:38,213 - DEBUG - dispatch pc=10, inst=LOAD_ATTR(arg=2, lineno=3)
2025-01-31 15:31:38,213 - DEBUG - stack ['$8load_global.2']
2025-01-31 15:31:38,213 - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=3)
2025-01-31 15:31:38,213 - DEBUG - stack ['$10load_attr.3']
2025-01-31 15:31:38,213 - DEBUG - dispatch pc=14, inst=LOAD_GLOBAL(arg=1, lineno=3)
2025-01-31 15:31:38,213 - DEBUG - stack ['$10load_attr.3', '$full_shape012.4']
2025-01-31 15:31:38,213 - DEBUG - dispatch pc=16, inst=LOAD_ATTR(arg=3, lineno=3)
2025-01-31 15:31:38,213 - DEBUG - stack ['$10load_attr.3', '$full_shape012.4', '$14load_global.5']
2025-01-31 15:31:38,213 - DEBUG - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=3)
2025-01-31 15:31:38,213 - DEBUG - stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6']
2025-01-31 15:31:38,213 - DEBUG - dispatch pc=20, inst=CALL_FUNCTION_KW(arg=2, lineno=3)
2025-01-31 15:31:38,213 - DEBUG - stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6', '$const18.7']
2025-01-31 15:31:38,213 - DEBUG - dispatch pc=22, inst=STORE_FAST(arg=2, lineno=3)
2025-01-31 15:31:38,213 - DEBUG - stack ['$20call_function_kw.8']
2025-01-31 15:31:38,213 - DEBUG - dispatch pc=24, inst=LOAD_CONST(arg=2, lineno=4)
2025-01-31 15:31:38,213 - DEBUG - stack []
2025-01-31 15:31:38,213 - DEBUG - dispatch pc=26, inst=LOAD_FAST(arg=2, lineno=4)
2025-01-31 15:31:38,213 - DEBUG - stack ['$const24.9']
2025-01-31 15:31:38,213 - DEBUG - dispatch pc=28, inst=LOAD_CONST(arg=0, lineno=4)
2025-01-31 15:31:38,213 - DEBUG - stack ['$const24.9', '$out026.10']
2025-01-31 15:31:38,213 - DEBUG - dispatch pc=30, inst=LOAD_CONST(arg=3, lineno=4)
2025-01-31 15:31:38,213 - DEBUG - stack ['$const24.9', '$out026.10', '$const28.11']
2025-01-31 15:31:38,213 - DEBUG - dispatch pc=32, inst=BUILD_SLICE(arg=2, lineno=4)
2025-01-31 15:31:38,213 - DEBUG - stack ['$const24.9', '$out026.10', '$const28.11', '$const30.12']
2025-01-31 15:31:38,213 - DEBUG - dispatch pc=34, inst=STORE_SUBSCR(arg=None, lineno=4)
2025-01-31 15:31:38,213 - DEBUG - stack ['$const24.9', '$out026.10', '$32build_slice.14']
2025-01-31 15:31:38,214 - DEBUG - dispatch pc=36, inst=LOAD_CONST(arg=2, lineno=5)
2025-01-31 15:31:38,214 - DEBUG - stack []
2025-01-31 15:31:38,214 - DEBUG - dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=5)
2025-01-31 15:31:38,214 - DEBUG - stack ['$const36.15']
2025-01-31 15:31:38,214 - DEBUG - dispatch pc=40, inst=LOAD_CONST(arg=4, lineno=5)
2025-01-31 15:31:38,214 - DEBUG - stack ['$const36.15', '$out038.16']
2025-01-31 15:31:38,214 - DEBUG - dispatch pc=42, inst=LOAD_CONST(arg=0, lineno=5)
2025-01-31 15:31:38,214 - DEBUG - stack ['$const36.15', '$out038.16', '$const40.17']
2025-01-31 15:31:38,214 - DEBUG - dispatch pc=44, inst=BUILD_SLICE(arg=2, lineno=5)
2025-01-31 15:31:38,214 - DEBUG - stack ['$const36.15', '$out038.16', '$const40.17', '$const42.18']
2025-01-31 15:31:38,214 - DEBUG - dispatch pc=46, inst=STORE_SUBSCR(arg=None, lineno=5)
2025-01-31 15:31:38,214 - DEBUG - stack ['$const36.15', '$out038.16', '$44build_slice.20']
2025-01-31 15:31:38,214 - DEBUG - dispatch pc=48, inst=LOAD_GLOBAL(arg=4, lineno=6)
2025-01-31 15:31:38,214 - DEBUG - stack []
2025-01-31 15:31:38,214 - DEBUG - dispatch pc=50, inst=LOAD_GLOBAL(arg=5, lineno=6)
2025-01-31 15:31:38,214 - DEBUG - stack ['$48load_global.21']
2025-01-31 15:31:38,214 - DEBUG - dispatch pc=52, inst=LOAD_CONST(arg=2, lineno=6)
2025-01-31 15:31:38,214 - DEBUG - stack ['$48load_global.21', '$50load_global.22']
2025-01-31 15:31:38,214 - DEBUG - dispatch pc=54, inst=LOAD_CONST(arg=4, lineno=6)
2025-01-31 15:31:38,214 - DEBUG - stack ['$48load_global.21', '$50load_global.22', '$const52.23']
2025-01-31 15:31:38,214 - DEBUG - dispatch pc=56, inst=CALL_FUNCTION(arg=2, lineno=6)
2025-01-31 15:31:38,214 - DEBUG - stack ['$48load_global.21', '$50load_global.22', '$const52.23', '$const54.24']
2025-01-31 15:31:38,214 - DEBUG - dispatch pc=58, inst=UNARY_NEGATIVE(arg=None, lineno=6)
2025-01-31 15:31:38,214 - DEBUG - stack ['$48load_global.21', '$56call_function.25']
2025-01-31 15:31:38,214 - DEBUG - dispatch pc=60, inst=LOAD_FAST(arg=1, lineno=6)
2025-01-31 15:31:38,214 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26']
2025-01-31 15:31:38,214 - DEBUG - dispatch pc=62, inst=LOAD_CONST(arg=2, lineno=6)
2025-01-31 15:31:38,214 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27']
2025-01-31 15:31:38,214 - DEBUG - dispatch pc=64, inst=BINARY_SUBSCR(arg=None, lineno=6)
2025-01-31 15:31:38,215 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27', '$const62.28']
2025-01-31 15:31:38,215 - DEBUG - dispatch pc=66, inst=LOAD_GLOBAL(arg=6, lineno=6)
2025-01-31 15:31:38,215 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29']
2025-01-31 15:31:38,215 - DEBUG - dispatch pc=68, inst=LOAD_CONST(arg=2, lineno=6)
2025-01-31 15:31:38,215 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30']
2025-01-31 15:31:38,215 - DEBUG - dispatch pc=70, inst=LOAD_CONST(arg=3, lineno=6)
2025-01-31 15:31:38,215 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31']
2025-01-31 15:31:38,215 - DEBUG - dispatch pc=72, inst=CALL_FUNCTION(arg=2, lineno=6)
2025-01-31 15:31:38,215 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31', '$const70.32']
2025-01-31 15:31:38,215 - DEBUG - dispatch pc=74, inst=BINARY_SUBTRACT(arg=None, lineno=6)
2025-01-31 15:31:38,215 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$72call_function.33']
2025-01-31 15:31:38,215 - DEBUG - dispatch pc=76, inst=CALL_FUNCTION(arg=2, lineno=6)
2025-01-31 15:31:38,215 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34']
2025-01-31 15:31:38,215 - DEBUG - dispatch pc=78, inst=GET_ITER(arg=None, lineno=6)
2025-01-31 15:31:38,215 - DEBUG - stack ['$76call_function.35']
2025-01-31 15:31:38,215 - DEBUG - end state. edges=[Edge(pc=80, stack=('$78get_iter.36',), blockstack=(), npush=0)]
2025-01-31 15:31:38,215 - DEBUG - pending: deque([State(pc_initial=80 nstack_initial=1)])
2025-01-31 15:31:38,215 - DEBUG - stack: ['$phi80.0']
2025-01-31 15:31:38,215 - DEBUG - state.pc_initial: State(pc_initial=80 nstack_initial=1)
2025-01-31 15:31:38,215 - DEBUG - dispatch pc=80, inst=FOR_ITER(arg=4, lineno=6)
2025-01-31 15:31:38,215 - DEBUG - stack ['$phi80.0']
2025-01-31 15:31:38,215 - DEBUG - end state. edges=[Edge(pc=90, stack=(), blockstack=(), npush=0), Edge(pc=82, stack=('$phi80.0', '$80for_iter.2'), blockstack=(), npush=0)]
2025-01-31 15:31:38,215 - DEBUG - pending: deque([State(pc_initial=90 nstack_initial=0), State(pc_initial=82 nstack_initial=2)])
2025-01-31 15:31:38,215 - DEBUG - stack: []
2025-01-31 15:31:38,215 - DEBUG - state.pc_initial: State(pc_initial=90 nstack_initial=0)
2025-01-31 15:31:38,215 - DEBUG - dispatch pc=90, inst=LOAD_FAST(arg=2, lineno=8)
2025-01-31 15:31:38,215 - DEBUG - stack []
2025-01-31 15:31:38,215 - DEBUG - dispatch pc=92, inst=RETURN_VALUE(arg=None, lineno=8)
2025-01-31 15:31:38,216 - DEBUG - stack ['$out090.0']
2025-01-31 15:31:38,216 - DEBUG - end state. edges=[]
2025-01-31 15:31:38,216 - DEBUG - pending: deque([State(pc_initial=82 nstack_initial=2)])
2025-01-31 15:31:38,216 - DEBUG - stack: ['$phi82.0', '$phi82.1']
2025-01-31 15:31:38,216 - DEBUG - state.pc_initial: State(pc_initial=82 nstack_initial=2)
2025-01-31 15:31:38,216 - DEBUG - dispatch pc=82, inst=STORE_FAST(arg=3, lineno=6)
2025-01-31 15:31:38,216 - DEBUG - stack ['$phi82.0', '$phi82.1']
2025-01-31 15:31:38,216 - DEBUG - dispatch pc=84, inst=LOAD_CONST(arg=2, lineno=7)
2025-01-31 15:31:38,216 - DEBUG - stack ['$phi82.0']
2025-01-31 15:31:38,216 - DEBUG - dispatch pc=86, inst=STORE_FAST(arg=4, lineno=7)
2025-01-31 15:31:38,216 - DEBUG - stack ['$phi82.0', '$const84.2']
2025-01-31 15:31:38,216 - DEBUG - dispatch pc=88, inst=JUMP_ABSOLUTE(arg=41, lineno=7)
2025-01-31 15:31:38,216 - DEBUG - stack ['$phi82.0']
2025-01-31 15:31:38,216 - DEBUG - end state. edges=[Edge(pc=80, stack=('$phi82.0',), blockstack=(), npush=0)]
2025-01-31 15:31:38,216 - DEBUG - pending: deque([State(pc_initial=80 nstack_initial=1)])
2025-01-31 15:31:38,216 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:31:38,216 - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=80 nstack_initial=1): {'$phi80.0'},
             State(pc_initial=82 nstack_initial=2): {'$phi82.1'},
             State(pc_initial=90 nstack_initial=0): set()})
2025-01-31 15:31:38,216 - DEBUG - defmap: {'$phi80.0': State(pc_initial=0 nstack_initial=0),
 '$phi82.1': State(pc_initial=80 nstack_initial=1)}
2025-01-31 15:31:38,216 - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi82.0', State(pc_initial=82 nstack_initial=2))},
             '$phi82.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-01-31 15:31:38,216 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-01-31 15:31:38,217 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-01-31 15:31:38,217 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-01-31 15:31:38,217 - DEBUG - keep phismap: {'$phi80.0': {('$78get_iter.36', State(pc_initial=0 nstack_initial=0))},
 '$phi82.1': {('$80for_iter.2', State(pc_initial=80 nstack_initial=1))}}
2025-01-31 15:31:38,217 - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi80.0': '$78get_iter.36'},
             State(pc_initial=80 nstack_initial=1): {'$phi82.1': '$80for_iter.2'}})
2025-01-31 15:31:38,217 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:31:38,217 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'item': '$x2.0', 'res': '$4load_attr.1'}), (6, {'value': '$4load_attr.1'}), (8, {'res': '$8load_global.2'}), (10, {'item': '$8load_global.2', 'res': '$10load_attr.3'}), (12, {'res': '$full_shape012.4'}), (14, {'res': '$14load_global.5'}), (16, {'item': '$14load_global.5', 'res': '$16load_attr.6'}), (18, {'res': '$const18.7'}), (20, {'func': '$10load_attr.3', 'args': ['$full_shape012.4', '$16load_attr.6'], 'names': '$const18.7', 'res': '$20call_function_kw.8'}), (22, {'value': '$20call_function_kw.8'}), (24, {'res': '$const24.9'}), (26, {'res': '$out026.10'}), (28, {'res': '$const28.11'}), (30, {'res': '$const30.12'}), (32, {'start': '$const28.11', 'stop': '$const30.12', 'step': None, 'res': '$32build_slice.14', 'slicevar': '$32build_slice.13'}), (34, {'target': '$out026.10', 'index': '$32build_slice.14', 'value': '$const24.9'}), (36, {'res': '$const36.15'}), (38, {'res': '$out038.16'}), (40, {'res': '$const40.17'}), (42, {'res': '$const42.18'}), (44, {'start': '$const40.17', 'stop': '$const42.18', 'step': None, 'res': '$44build_slice.20', 'slicevar': '$44build_slice.19'}), (46, {'target': '$out038.16', 'index': '$44build_slice.20', 'value': '$const36.15'}), (48, {'res': '$48load_global.21'}), (50, {'res': '$50load_global.22'}), (52, {'res': '$const52.23'}), (54, {'res': '$const54.24'}), (56, {'func': '$50load_global.22', 'args': ['$const52.23', '$const54.24'], 'res': '$56call_function.25'}), (58, {'value': '$56call_function.25', 'res': '$58unary_negative.26'}), (60, {'res': '$full_shape060.27'}), (62, {'res': '$const62.28'}), (64, {'index': '$const62.28', 'target': '$full_shape060.27', 'res': '$64binary_subscr.29'}), (66, {'res': '$66load_global.30'}), (68, {'res': '$const68.31'}), (70, {'res': '$const70.32'}), (72, {'func': '$66load_global.30', 'args': ['$const68.31', '$const70.32'], 'res': '$72call_function.33'}), (74, {'lhs': '$64binary_subscr.29', 'rhs': '$72call_function.33', 'res': '$74binary_subtract.34'}), (76, {'func': '$48load_global.21', 'args': ['$58unary_negative.26', '$74binary_subtract.34'], 'res': '$76call_function.35'}), (78, {'value': '$76call_function.35', 'res': '$78get_iter.36'})), outgoing_phis={'$phi80.0': '$78get_iter.36'}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$78get_iter.36',)})
2025-01-31 15:31:38,217 - DEBUG - block_infos State(pc_initial=80 nstack_initial=1):
AdaptBlockInfo(insts=((80, {'iterator': '$phi80.0', 'pair': '$80for_iter.1', 'indval': '$80for_iter.2', 'pred': '$80for_iter.3'}),), outgoing_phis={'$phi82.1': '$80for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: (), 82: ('$phi80.0', '$80for_iter.2')})
2025-01-31 15:31:38,217 - DEBUG - block_infos State(pc_initial=82 nstack_initial=2):
AdaptBlockInfo(insts=((82, {'value': '$phi82.1'}), (84, {'res': '$const84.2'}), (86, {'value': '$const84.2'}), (88, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$phi82.0',)})
2025-01-31 15:31:38,218 - DEBUG - block_infos State(pc_initial=90 nstack_initial=0):
AdaptBlockInfo(insts=((90, {'res': '$out090.0'}), (92, {'retval': '$out090.0', 'castval': '$92return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:38,219 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    full_shape0 = getattr(value=x, attr=shape) ['full_shape0', 'x']
    $8load_global.2 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>) ['$8load_global.2']
    $10load_attr.3 = getattr(value=$8load_global.2, attr=empty) ['$10load_attr.3', '$8load_global.2']
    $14load_global.5 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>) ['$14load_global.5']
    $16load_attr.6 = getattr(value=$14load_global.5, attr=bool_) ['$14load_global.5', '$16load_attr.6']
    out0 = call $10load_attr.3(full_shape0, func=$10load_attr.3, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6, <string>:3))], vararg=None, varkwarg=None, target=None) ['$10load_attr.3', '$16load_attr.6', 'full_shape0', 'out0']
    $const24.9 = const(int, 0)               ['$const24.9']
    $const28.11 = const(NoneType, None)      ['$const28.11']
    $const30.12 = const(int, 1)              ['$const30.12']
    $32build_slice.13 = global(slice: <class 'slice'>) ['$32build_slice.13']
    $32build_slice.14 = call $32build_slice.13($const28.11, $const30.12, func=$32build_slice.13, args=(Var($const28.11, <string>:4), Var($const30.12, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None) ['$32build_slice.13', '$32build_slice.14', '$const28.11', '$const30.12']
    out0[$32build_slice.14] = $const24.9     ['$32build_slice.14', '$const24.9', 'out0']
    $const36.15 = const(int, 0)              ['$const36.15']
    $const40.17 = const(int, -1)             ['$const40.17']
    $const42.18 = const(NoneType, None)      ['$const42.18']
    $44build_slice.19 = global(slice: <class 'slice'>) ['$44build_slice.19']
    $44build_slice.20 = call $44build_slice.19($const40.17, $const42.18, func=$44build_slice.19, args=(Var($const40.17, <string>:5), Var($const42.18, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None) ['$44build_slice.19', '$44build_slice.20', '$const40.17', '$const42.18']
    out0[$44build_slice.20] = $const36.15    ['$44build_slice.20', '$const36.15', 'out0']
    $48load_global.21 = global(range: <class 'range'>) ['$48load_global.21']
    $50load_global.22 = global(min: <built-in function min>) ['$50load_global.22']
    $const52.23 = const(int, 0)              ['$const52.23']
    $const54.24 = const(int, -1)             ['$const54.24']
    $56call_function.25 = call $50load_global.22($const52.23, $const54.24, func=$50load_global.22, args=[Var($const52.23, <string>:6), Var($const54.24, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$50load_global.22', '$56call_function.25', '$const52.23', '$const54.24']
    $58unary_negative.26 = unary(fn=<built-in function neg>, value=$56call_function.25) ['$56call_function.25', '$58unary_negative.26']
    $const62.28 = const(int, 0)              ['$const62.28']
    $64binary_subscr.29 = getitem(value=full_shape0, index=$const62.28, fn=<built-in function getitem>) ['$64binary_subscr.29', '$const62.28', 'full_shape0']
    $66load_global.30 = global(max: <built-in function max>) ['$66load_global.30']
    $const68.31 = const(int, 0)              ['$const68.31']
    $const70.32 = const(int, 1)              ['$const70.32']
    $72call_function.33 = call $66load_global.30($const68.31, $const70.32, func=$66load_global.30, args=[Var($const68.31, <string>:6), Var($const70.32, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$66load_global.30', '$72call_function.33', '$const68.31', '$const70.32']
    $74binary_subtract.34 = $64binary_subscr.29 - $72call_function.33 ['$64binary_subscr.29', '$72call_function.33', '$74binary_subtract.34']
    $76call_function.35 = call $48load_global.21($58unary_negative.26, $74binary_subtract.34, func=$48load_global.21, args=[Var($58unary_negative.26, <string>:6), Var($74binary_subtract.34, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34', '$76call_function.35']
    $78get_iter.36 = getiter(value=$76call_function.35) ['$76call_function.35', '$78get_iter.36']
    $phi80.0 = $78get_iter.36                ['$78get_iter.36', '$phi80.0']
    jump 80                                  []
label 80:
    $80for_iter.1 = iternext(value=$phi80.0) ['$80for_iter.1', '$phi80.0']
    $80for_iter.2 = pair_first(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.2']
    $80for_iter.3 = pair_second(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.3']
    $phi82.1 = $80for_iter.2                 ['$80for_iter.2', '$phi82.1']
    branch $80for_iter.3, 82, 90             ['$80for_iter.3']
label 82:
    index00 = $phi82.1                       ['$phi82.1', 'index00']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 80                                  []
label 90:
    $92return_value.1 = cast(value=out0)     ['$92return_value.1', 'out0']
    return $92return_value.1                 ['$92return_value.1']

2025-01-31 15:31:38,226 - DEBUG - ==== SSA block analysis pass on 0
2025-01-31 15:31:38,226 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89f0242740>
2025-01-31 15:31:38,226 - DEBUG - on stmt: x = arg(0, name=x)
2025-01-31 15:31:38,226 - DEBUG - on stmt: full_shape0 = getattr(value=x, attr=shape)
2025-01-31 15:31:38,226 - DEBUG - on stmt: $8load_global.2.1 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:38,226 - DEBUG - on stmt: $10load_attr.3.1 = getattr(value=$8load_global.2.1, attr=empty)
2025-01-31 15:31:38,226 - DEBUG - on stmt: $14load_global.5.1 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:38,226 - DEBUG - on stmt: $16load_attr.6.1 = getattr(value=$14load_global.5.1, attr=bool_)
2025-01-31 15:31:38,226 - DEBUG - on stmt: out0 = call $10load_attr.3.1(full_shape0, func=$10load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:38,227 - DEBUG - on stmt: $const24.9.1 = const(int, 0)
2025-01-31 15:31:38,227 - DEBUG - on stmt: $const28.11.1 = const(NoneType, None)
2025-01-31 15:31:38,227 - DEBUG - on stmt: $const30.12.1 = const(int, 1)
2025-01-31 15:31:38,227 - DEBUG - on stmt: $32build_slice.13.1 = global(slice: <class 'slice'>)
2025-01-31 15:31:38,227 - DEBUG - on stmt: $32build_slice.14.1 = call $32build_slice.13.1($const28.11.1, $const30.12.1, func=$32build_slice.13.1, args=(Var($const28.11.1, <string>:4), Var($const30.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:38,227 - DEBUG - on stmt: out0[$32build_slice.14.1] = $const24.9.1
2025-01-31 15:31:38,227 - DEBUG - on stmt: $const36.15.1 = const(int, 0)
2025-01-31 15:31:38,227 - DEBUG - on stmt: $const40.17.1 = const(int, -1)
2025-01-31 15:31:38,227 - DEBUG - on stmt: $const42.18.1 = const(NoneType, None)
2025-01-31 15:31:38,227 - DEBUG - on stmt: $44build_slice.19.1 = global(slice: <class 'slice'>)
2025-01-31 15:31:38,227 - DEBUG - on stmt: $44build_slice.20.1 = call $44build_slice.19.1($const40.17.1, $const42.18.1, func=$44build_slice.19.1, args=(Var($const40.17.1, <string>:5), Var($const42.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:38,227 - DEBUG - on stmt: out0[$44build_slice.20.1] = $const36.15.1
2025-01-31 15:31:38,227 - DEBUG - on stmt: $48load_global.21.1 = global(range: <class 'range'>)
2025-01-31 15:31:38,227 - DEBUG - on stmt: $50load_global.22.1 = global(min: <built-in function min>)
2025-01-31 15:31:38,227 - DEBUG - on stmt: $const52.23.1 = const(int, 0)
2025-01-31 15:31:38,227 - DEBUG - on stmt: $const54.24.1 = const(int, -1)
2025-01-31 15:31:38,227 - DEBUG - on stmt: $56call_function.25.1 = call $50load_global.22.1($const52.23.1, $const54.24.1, func=$50load_global.22.1, args=[Var($const52.23.1, <string>:6), Var($const54.24.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:38,227 - DEBUG - on stmt: $58unary_negative.26.1 = unary(fn=<built-in function neg>, value=$56call_function.25.1)
2025-01-31 15:31:38,227 - DEBUG - on stmt: $const62.28.1 = const(int, 0)
2025-01-31 15:31:38,227 - DEBUG - on stmt: $64binary_subscr.29.1 = getitem(value=full_shape0, index=$const62.28.1, fn=<built-in function getitem>)
2025-01-31 15:31:38,227 - DEBUG - on stmt: $66load_global.30.1 = global(max: <built-in function max>)
2025-01-31 15:31:38,227 - DEBUG - on stmt: $const68.31.1 = const(int, 0)
2025-01-31 15:31:38,227 - DEBUG - on stmt: $const70.32.1 = const(int, 1)
2025-01-31 15:31:38,227 - DEBUG - on stmt: $72call_function.33.1 = call $66load_global.30.1($const68.31.1, $const70.32.1, func=$66load_global.30.1, args=[Var($const68.31.1, <string>:6), Var($const70.32.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:38,228 - DEBUG - on stmt: $74binary_subtract.34.1 = $64binary_subscr.29.1 - $72call_function.33.1
2025-01-31 15:31:38,228 - DEBUG - on stmt: $76call_function.35.1 = call $48load_global.21.1($58unary_negative.26.1, $74binary_subtract.34.1, func=$48load_global.21.1, args=[Var($58unary_negative.26.1, <string>:6), Var($74binary_subtract.34.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:38,228 - DEBUG - on stmt: $78get_iter.36.1 = getiter(value=$76call_function.35.1)
2025-01-31 15:31:38,228 - DEBUG - on stmt: $phi80.0.1 = $78get_iter.36.1
2025-01-31 15:31:38,228 - DEBUG - on stmt: jump 80
2025-01-31 15:31:38,228 - DEBUG - ==== SSA block analysis pass on 80
2025-01-31 15:31:38,228 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89f0242740>
2025-01-31 15:31:38,228 - DEBUG - on stmt: $80for_iter.1.1 = iternext(value=$phi80.0.1)
2025-01-31 15:31:38,228 - DEBUG - on stmt: $80for_iter.2.1 = pair_first(value=$80for_iter.1.1)
2025-01-31 15:31:38,228 - DEBUG - on stmt: $80for_iter.3.1 = pair_second(value=$80for_iter.1.1)
2025-01-31 15:31:38,228 - DEBUG - on stmt: $phi82.1.1 = $80for_iter.2.1
2025-01-31 15:31:38,228 - DEBUG - on stmt: branch $80for_iter.3.1, 82, 92
2025-01-31 15:31:38,228 - DEBUG - ==== SSA block analysis pass on 82
2025-01-31 15:31:38,228 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89f0242740>
2025-01-31 15:31:38,228 - DEBUG - on stmt: index00 = $phi82.1.1
2025-01-31 15:31:38,228 - DEBUG - on stmt: jump 90
2025-01-31 15:31:38,228 - DEBUG - ==== SSA block analysis pass on 92
2025-01-31 15:31:38,228 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89f0242740>
2025-01-31 15:31:38,228 - DEBUG - on stmt: $92return_value.1.1 = cast(value=out0)
2025-01-31 15:31:38,228 - DEBUG - on stmt: return $92return_value.1.1
2025-01-31 15:31:38,228 - DEBUG - ==== SSA block analysis pass on 90
2025-01-31 15:31:38,228 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89f0242740>
2025-01-31 15:31:38,228 - DEBUG - on stmt: $const4.1 = const(int, 0)
2025-01-31 15:31:38,228 - DEBUG - on stmt: stencil_index = $const4.1 + index00
2025-01-31 15:31:38,228 - DEBUG - on stmt: $6binary_subscr.2 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-01-31 15:31:38,228 - DEBUG - on stmt: $const10.4 = const(int, -1)
2025-01-31 15:31:38,228 - DEBUG - on stmt: stencil_index.1 = $const10.4 + index00
2025-01-31 15:31:38,228 - DEBUG - on stmt: $12binary_subscr.5 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2025-01-31 15:31:38,229 - DEBUG - on stmt: $14compare_op.6 = $6binary_subscr.2 > $12binary_subscr.5
2025-01-31 15:31:38,229 - DEBUG - on stmt: $const18.8 = const(int, 0)
2025-01-31 15:31:38,229 - DEBUG - on stmt: stencil_index.2 = $const18.8 + index00
2025-01-31 15:31:38,229 - DEBUG - on stmt: $20binary_subscr.9 = getitem(value=x, index=stencil_index.2, fn=<built-in function getitem>)
2025-01-31 15:31:38,229 - DEBUG - on stmt: $const24.11 = const(int, 1)
2025-01-31 15:31:38,229 - DEBUG - on stmt: stencil_index.3 = $const24.11 + index00
2025-01-31 15:31:38,229 - DEBUG - on stmt: $26binary_subscr.12 = getitem(value=x, index=stencil_index.3, fn=<built-in function getitem>)
2025-01-31 15:31:38,229 - DEBUG - on stmt: $28compare_op.13 = $20binary_subscr.9 >= $26binary_subscr.12
2025-01-31 15:31:38,229 - DEBUG - on stmt: $30binary_and.14 = $14compare_op.6 & $28compare_op.13
2025-01-31 15:31:38,229 - DEBUG - on stmt: $32return_value.15 = cast(value=$30binary_and.14)
2025-01-31 15:31:38,229 - DEBUG - on stmt: out0[index00] = $32return_value.15
2025-01-31 15:31:38,229 - DEBUG - on stmt: jump 91
2025-01-31 15:31:38,229 - DEBUG - ==== SSA block analysis pass on 91
2025-01-31 15:31:38,229 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89f0242740>
2025-01-31 15:31:38,229 - DEBUG - on stmt: jump 80
2025-01-31 15:31:38,230 - DEBUG - defs defaultdict(<class 'list'>,
            {'$10load_attr.3.1': [(<numba.core.ir.Assign object at 0x7c89f00828c0>,
                                   0)],
             '$12binary_subscr.5': [(<numba.core.ir.Assign object at 0x7c89f0081030>,
                                     90)],
             '$14compare_op.6': [(<numba.core.ir.Assign object at 0x7c89f0233160>,
                                  90)],
             '$14load_global.5.1': [(<numba.core.ir.Assign object at 0x7c89f0083700>,
                                     0)],
             '$16load_attr.6.1': [(<numba.core.ir.Assign object at 0x7c89f0082e00>,
                                   0)],
             '$20binary_subscr.9': [(<numba.core.ir.Assign object at 0x7c89f0080df0>,
                                     90)],
             '$26binary_subscr.12': [(<numba.core.ir.Assign object at 0x7c89f0080b80>,
                                      90)],
             '$28compare_op.13': [(<numba.core.ir.Assign object at 0x7c89f024ce50>,
                                   90)],
             '$30binary_and.14': [(<numba.core.ir.Assign object at 0x7c89f024cc70>,
                                   90)],
             '$32build_slice.13.1': [(<numba.core.ir.Assign object at 0x7c89f0082bc0>,
                                      0)],
             '$32build_slice.14.1': [(<numba.core.ir.Assign object at 0x7c89f0082650>,
                                      0)],
             '$32return_value.15': [(<numba.core.ir.Assign object at 0x7c89f00bf9d0>,
                                     90)],
             '$44build_slice.19.1': [(<numba.core.ir.Assign object at 0x7c89f00838b0>,
                                      0)],
             '$44build_slice.20.1': [(<numba.core.ir.Assign object at 0x7c89f0082f50>,
                                      0)],
             '$48load_global.21.1': [(<numba.core.ir.Assign object at 0x7c89f00812d0>,
                                      0)],
             '$50load_global.22.1': [(<numba.core.ir.Assign object at 0x7c89f0080670>,
                                      0)],
             '$56call_function.25.1': [(<numba.core.ir.Assign object at 0x7c89f0083010>,
                                        0)],
             '$58unary_negative.26.1': [(<numba.core.ir.Assign object at 0x7c89ebdafa00>,
                                         0)],
             '$64binary_subscr.29.1': [(<numba.core.ir.Assign object at 0x7c89ebdbc460>,
                                        0)],
             '$66load_global.30.1': [(<numba.core.ir.Assign object at 0x7c89ebdbc3a0>,
                                      0)],
             '$6binary_subscr.2': [(<numba.core.ir.Assign object at 0x7c89f0081090>,
                                    90)],
             '$72call_function.33.1': [(<numba.core.ir.Assign object at 0x7c89ebdbefb0>,
                                        0)],
             '$74binary_subtract.34.1': [(<numba.core.ir.Assign object at 0x7c89ebdbf310>,
                                          0)],
             '$76call_function.35.1': [(<numba.core.ir.Assign object at 0x7c89ebdbf640>,
                                        0)],
             '$78get_iter.36.1': [(<numba.core.ir.Assign object at 0x7c89ebdbf790>,
                                   0)],
             '$80for_iter.1.1': [(<numba.core.ir.Assign object at 0x7c89ebdbf820>,
                                  80)],
             '$80for_iter.2.1': [(<numba.core.ir.Assign object at 0x7c89ebdbf970>,
                                  80)],
             '$80for_iter.3.1': [(<numba.core.ir.Assign object at 0x7c89ebdbf910>,
                                  80)],
             '$8load_global.2.1': [(<numba.core.ir.Assign object at 0x7c89f00835e0>,
                                    0)],
             '$92return_value.1.1': [(<numba.core.ir.Assign object at 0x7c89ebdbcc10>,
                                      92)],
             '$const10.4': [(<numba.core.ir.Assign object at 0x7c89ebca3640>,
                             90)],
             '$const18.8': [(<numba.core.ir.Assign object at 0x7c89f02333a0>,
                             90)],
             '$const24.11': [(<numba.core.ir.Assign object at 0x7c89f0232bf0>,
                              90)],
             '$const24.9.1': [(<numba.core.ir.Assign object at 0x7c89f0080700>,
                               0)],
             '$const28.11.1': [(<numba.core.ir.Assign object at 0x7c89f0080ac0>,
                                0)],
             '$const30.12.1': [(<numba.core.ir.Assign object at 0x7c89f00820b0>,
                                0)],
             '$const36.15.1': [(<numba.core.ir.Assign object at 0x7c89f00834f0>,
                                0)],
             '$const4.1': [(<numba.core.ir.Assign object at 0x7c89f02ff250>,
                            90)],
             '$const40.17.1': [(<numba.core.ir.Assign object at 0x7c89f0082320>,
                                0)],
             '$const42.18.1': [(<numba.core.ir.Assign object at 0x7c89f0083c10>,
                                0)],
             '$const52.23.1': [(<numba.core.ir.Assign object at 0x7c89f00812a0>,
                                0)],
             '$const54.24.1': [(<numba.core.ir.Assign object at 0x7c89f0081e10>,
                                0)],
             '$const62.28.1': [(<numba.core.ir.Assign object at 0x7c89ebdbc790>,
                                0)],
             '$const68.31.1': [(<numba.core.ir.Assign object at 0x7c89ebdbc070>,
                                0)],
             '$const70.32.1': [(<numba.core.ir.Assign object at 0x7c89ebdbf190>,
                                0)],
             '$phi80.0.1': [(<numba.core.ir.Assign object at 0x7c89ebdad180>,
                             0)],
             '$phi82.1.1': [(<numba.core.ir.Assign object at 0x7c89f0082980>,
                             80)],
             'full_shape0': [(<numba.core.ir.Assign object at 0x7c89f00839d0>,
                              0)],
             'index00': [(<numba.core.ir.Assign object at 0x7c89ebdbfd90>, 82)],
             'out0': [(<numba.core.ir.Assign object at 0x7c89f0083220>, 0)],
             'stencil_index': [(<numba.core.ir.Assign object at 0x7c89f00be650>,
                                90)],
             'stencil_index.1': [(<numba.core.ir.Assign object at 0x7c89f0080ee0>,
                                  90)],
             'stencil_index.2': [(<numba.core.ir.Assign object at 0x7c89f0080e80>,
                                  90)],
             'stencil_index.3': [(<numba.core.ir.Assign object at 0x7c89f0080cd0>,
                                  90)],
             'x': [(<numba.core.ir.Assign object at 0x7c89f0083250>, 0)]})
2025-01-31 15:31:38,230 - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x7c89f0242740>
2025-01-31 15:31:38,779 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=1068)
           2	LOAD_GLOBAL(arg=0, lineno=1082)
           4	LOAD_FAST(arg=0, lineno=1082)
           6	CALL_FUNCTION(arg=1, lineno=1082)
           8	LOAD_FAST(arg=1, lineno=1082)
          10	LOAD_CONST(arg=1, lineno=1082)
          12	LOAD_CONST(arg=1, lineno=1082)
          14	BUILD_SLICE(arg=2, lineno=1082)
          16	STORE_SUBSCR(arg=None, lineno=1082)
          18	LOAD_CONST(arg=1, lineno=1082)
          20	RETURN_VALUE(arg=None, lineno=1082)
2025-01-31 15:31:38,779 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:31:38,779 - DEBUG - stack: []
2025-01-31 15:31:38,779 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:31:38,779 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=1068)
2025-01-31 15:31:38,779 - DEBUG - stack []
2025-01-31 15:31:38,779 - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=1082)
2025-01-31 15:31:38,779 - DEBUG - stack []
2025-01-31 15:31:38,779 - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=1082)
2025-01-31 15:31:38,779 - DEBUG - stack ['$2load_global.0']
2025-01-31 15:31:38,779 - DEBUG - dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=1082)
2025-01-31 15:31:38,779 - DEBUG - stack ['$2load_global.0', '$x4.1']
2025-01-31 15:31:38,779 - DEBUG - dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=1082)
2025-01-31 15:31:38,779 - DEBUG - stack ['$6call_function.2']
2025-01-31 15:31:38,779 - DEBUG - dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=1082)
2025-01-31 15:31:38,779 - DEBUG - stack ['$6call_function.2', '$y8.3']
2025-01-31 15:31:38,779 - DEBUG - dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=1082)
2025-01-31 15:31:38,779 - DEBUG - stack ['$6call_function.2', '$y8.3', '$const10.4']
2025-01-31 15:31:38,779 - DEBUG - dispatch pc=14, inst=BUILD_SLICE(arg=2, lineno=1082)
2025-01-31 15:31:38,779 - DEBUG - stack ['$6call_function.2', '$y8.3', '$const10.4', '$const12.5']
2025-01-31 15:31:38,780 - DEBUG - dispatch pc=16, inst=STORE_SUBSCR(arg=None, lineno=1082)
2025-01-31 15:31:38,780 - DEBUG - stack ['$6call_function.2', '$y8.3', '$14build_slice.7']
2025-01-31 15:31:38,780 - DEBUG - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1082)
2025-01-31 15:31:38,780 - DEBUG - stack []
2025-01-31 15:31:38,780 - DEBUG - dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=1082)
2025-01-31 15:31:38,780 - DEBUG - stack ['$const18.8']
2025-01-31 15:31:38,780 - DEBUG - end state. edges=[]
2025-01-31 15:31:38,780 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:31:38,780 - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-01-31 15:31:38,780 - DEBUG - defmap: {}
2025-01-31 15:31:38,780 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:38,780 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:38,780 - DEBUG - keep phismap: {}
2025-01-31 15:31:38,780 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-01-31 15:31:38,780 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:31:38,780 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$x4.1'}), (6, {'func': '$2load_global.0', 'args': ['$x4.1'], 'res': '$6call_function.2'}), (8, {'res': '$y8.3'}), (10, {'res': '$const10.4'}), (12, {'res': '$const12.5'}), (14, {'start': '$const10.4', 'stop': '$const12.5', 'step': None, 'res': '$14build_slice.7', 'slicevar': '$14build_slice.6'}), (16, {'target': '$y8.3', 'index': '$14build_slice.7', 'value': '$6call_function.2'}), (18, {'res': '$const18.8'}), (20, {'retval': '$const18.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:38,780 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    y = arg(1, name=y)                       ['y']
    $2load_global.0 = global(_localmin_sten: <numba.stencils.stencil.StencilFunc object at 0x7c89eba2d810>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, utils.py:1068)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$6call_function.2', 'x']
    $const10.4 = const(NoneType, None)       ['$const10.4']
    $const12.5 = const(NoneType, None)       ['$const12.5']
    $14build_slice.6 = global(slice: <class 'slice'>) ['$14build_slice.6']
    $14build_slice.7 = call $14build_slice.6($const10.4, $const12.5, func=$14build_slice.6, args=(Var($const10.4, utils.py:1082), Var($const12.5, utils.py:1082)), kws=(), vararg=None, varkwarg=None, target=None) ['$14build_slice.6', '$14build_slice.7', '$const10.4', '$const12.5']
    y[$14build_slice.7] = $6call_function.2  ['$14build_slice.7', '$6call_function.2', 'y']
    $const18.8 = const(NoneType, None)       ['$const18.8']
    $20return_value.9 = cast(value=$const18.8) ['$20return_value.9', '$const18.8']
    return $20return_value.9                 ['$20return_value.9']

2025-01-31 15:31:38,784 - DEBUG - ==== SSA block analysis pass on 0
2025-01-31 15:31:38,784 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89ebc806a0>
2025-01-31 15:31:38,784 - DEBUG - on stmt: x = arg(0, name=x)
2025-01-31 15:31:38,784 - DEBUG - on stmt: y = arg(1, name=y)
2025-01-31 15:31:38,784 - DEBUG - on stmt: $2load_global.0 = global(_localmin_sten: <numba.stencils.stencil.StencilFunc object at 0x7c89eba2d810>)
2025-01-31 15:31:38,784 - DEBUG - on stmt: $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, utils.py:1068)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:38,784 - DEBUG - on stmt: $const10.4 = const(NoneType, None)
2025-01-31 15:31:38,784 - DEBUG - on stmt: $const12.5 = const(NoneType, None)
2025-01-31 15:31:38,784 - DEBUG - on stmt: $14build_slice.6 = global(slice: <class 'slice'>)
2025-01-31 15:31:38,784 - DEBUG - on stmt: $14build_slice.7 = call $14build_slice.6($const10.4, $const12.5, func=$14build_slice.6, args=(Var($const10.4, utils.py:1082), Var($const12.5, utils.py:1082)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:38,784 - DEBUG - on stmt: y[slice(None, None, None)] = $6call_function.2
2025-01-31 15:31:38,785 - DEBUG - on stmt: $const18.8 = const(NoneType, None)
2025-01-31 15:31:38,785 - DEBUG - on stmt: $20return_value.9 = cast(value=$const18.8)
2025-01-31 15:31:38,785 - DEBUG - on stmt: return $20return_value.9
2025-01-31 15:31:38,785 - DEBUG - defs defaultdict(<class 'list'>,
            {'$14build_slice.6': [(<numba.core.ir.Assign object at 0x7c89ebc0cd00>,
                                   0)],
             '$14build_slice.7': [(<numba.core.ir.Assign object at 0x7c89ebc0c130>,
                                   0)],
             '$20return_value.9': [(<numba.core.ir.Assign object at 0x7c89ebc79e70>,
                                    0)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x7c89f030f880>,
                                  0)],
             '$6call_function.2': [(<numba.core.ir.Assign object at 0x7c89f01303d0>,
                                    0)],
             '$const10.4': [(<numba.core.ir.Assign object at 0x7c89ebc0c580>,
                             0)],
             '$const12.5': [(<numba.core.ir.Assign object at 0x7c89ebc0d0c0>,
                             0)],
             '$const18.8': [(<numba.core.ir.Assign object at 0x7c89ebc0cb20>,
                             0)],
             'x': [(<numba.core.ir.Assign object at 0x7c89ebc80c40>, 0)],
             'y': [(<numba.core.ir.Assign object at 0x7c89ebc804c0>, 0)]})
2025-01-31 15:31:38,785 - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x7c89ebc806a0>
2025-01-31 15:31:38,798 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_FAST(arg=0, lineno=2)
           4	LOAD_ATTR(arg=0, lineno=2)
           6	STORE_FAST(arg=1, lineno=2)
           8	LOAD_GLOBAL(arg=1, lineno=3)
          10	LOAD_ATTR(arg=2, lineno=3)
          12	LOAD_FAST(arg=1, lineno=3)
          14	LOAD_GLOBAL(arg=1, lineno=3)
          16	LOAD_ATTR(arg=3, lineno=3)
          18	LOAD_CONST(arg=1, lineno=3)
          20	CALL_FUNCTION_KW(arg=2, lineno=3)
          22	STORE_FAST(arg=2, lineno=3)
          24	LOAD_CONST(arg=2, lineno=4)
          26	LOAD_FAST(arg=2, lineno=4)
          28	LOAD_CONST(arg=0, lineno=4)
          30	LOAD_CONST(arg=3, lineno=4)
          32	BUILD_SLICE(arg=2, lineno=4)
          34	STORE_SUBSCR(arg=None, lineno=4)
          36	LOAD_CONST(arg=2, lineno=5)
          38	LOAD_FAST(arg=2, lineno=5)
          40	LOAD_CONST(arg=4, lineno=5)
          42	LOAD_CONST(arg=0, lineno=5)
          44	BUILD_SLICE(arg=2, lineno=5)
          46	STORE_SUBSCR(arg=None, lineno=5)
          48	LOAD_GLOBAL(arg=4, lineno=6)
          50	LOAD_GLOBAL(arg=5, lineno=6)
          52	LOAD_CONST(arg=2, lineno=6)
          54	LOAD_CONST(arg=4, lineno=6)
          56	CALL_FUNCTION(arg=2, lineno=6)
          58	UNARY_NEGATIVE(arg=None, lineno=6)
          60	LOAD_FAST(arg=1, lineno=6)
          62	LOAD_CONST(arg=2, lineno=6)
          64	BINARY_SUBSCR(arg=None, lineno=6)
          66	LOAD_GLOBAL(arg=6, lineno=6)
          68	LOAD_CONST(arg=2, lineno=6)
          70	LOAD_CONST(arg=3, lineno=6)
          72	CALL_FUNCTION(arg=2, lineno=6)
          74	BINARY_SUBTRACT(arg=None, lineno=6)
          76	CALL_FUNCTION(arg=2, lineno=6)
          78	GET_ITER(arg=None, lineno=6)
>         80	FOR_ITER(arg=4, lineno=6)
          82	STORE_FAST(arg=3, lineno=6)
          84	LOAD_CONST(arg=2, lineno=7)
          86	STORE_FAST(arg=4, lineno=7)
          88	JUMP_ABSOLUTE(arg=41, lineno=7)
>         90	LOAD_FAST(arg=2, lineno=8)
          92	RETURN_VALUE(arg=None, lineno=8)
2025-01-31 15:31:38,798 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:31:38,798 - DEBUG - stack: []
2025-01-31 15:31:38,798 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:31:38,798 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=1)
2025-01-31 15:31:38,798 - DEBUG - stack []
2025-01-31 15:31:38,798 - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=2)
2025-01-31 15:31:38,798 - DEBUG - stack []
2025-01-31 15:31:38,798 - DEBUG - dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=2)
2025-01-31 15:31:38,798 - DEBUG - stack ['$x2.0']
2025-01-31 15:31:38,798 - DEBUG - dispatch pc=6, inst=STORE_FAST(arg=1, lineno=2)
2025-01-31 15:31:38,798 - DEBUG - stack ['$4load_attr.1']
2025-01-31 15:31:38,798 - DEBUG - dispatch pc=8, inst=LOAD_GLOBAL(arg=1, lineno=3)
2025-01-31 15:31:38,798 - DEBUG - stack []
2025-01-31 15:31:38,798 - DEBUG - dispatch pc=10, inst=LOAD_ATTR(arg=2, lineno=3)
2025-01-31 15:31:38,798 - DEBUG - stack ['$8load_global.2']
2025-01-31 15:31:38,799 - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=3)
2025-01-31 15:31:38,799 - DEBUG - stack ['$10load_attr.3']
2025-01-31 15:31:38,799 - DEBUG - dispatch pc=14, inst=LOAD_GLOBAL(arg=1, lineno=3)
2025-01-31 15:31:38,799 - DEBUG - stack ['$10load_attr.3', '$full_shape012.4']
2025-01-31 15:31:38,799 - DEBUG - dispatch pc=16, inst=LOAD_ATTR(arg=3, lineno=3)
2025-01-31 15:31:38,799 - DEBUG - stack ['$10load_attr.3', '$full_shape012.4', '$14load_global.5']
2025-01-31 15:31:38,799 - DEBUG - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=3)
2025-01-31 15:31:38,799 - DEBUG - stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6']
2025-01-31 15:31:38,799 - DEBUG - dispatch pc=20, inst=CALL_FUNCTION_KW(arg=2, lineno=3)
2025-01-31 15:31:38,799 - DEBUG - stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6', '$const18.7']
2025-01-31 15:31:38,799 - DEBUG - dispatch pc=22, inst=STORE_FAST(arg=2, lineno=3)
2025-01-31 15:31:38,799 - DEBUG - stack ['$20call_function_kw.8']
2025-01-31 15:31:38,799 - DEBUG - dispatch pc=24, inst=LOAD_CONST(arg=2, lineno=4)
2025-01-31 15:31:38,799 - DEBUG - stack []
2025-01-31 15:31:38,799 - DEBUG - dispatch pc=26, inst=LOAD_FAST(arg=2, lineno=4)
2025-01-31 15:31:38,799 - DEBUG - stack ['$const24.9']
2025-01-31 15:31:38,799 - DEBUG - dispatch pc=28, inst=LOAD_CONST(arg=0, lineno=4)
2025-01-31 15:31:38,799 - DEBUG - stack ['$const24.9', '$out026.10']
2025-01-31 15:31:38,799 - DEBUG - dispatch pc=30, inst=LOAD_CONST(arg=3, lineno=4)
2025-01-31 15:31:38,799 - DEBUG - stack ['$const24.9', '$out026.10', '$const28.11']
2025-01-31 15:31:38,799 - DEBUG - dispatch pc=32, inst=BUILD_SLICE(arg=2, lineno=4)
2025-01-31 15:31:38,799 - DEBUG - stack ['$const24.9', '$out026.10', '$const28.11', '$const30.12']
2025-01-31 15:31:38,799 - DEBUG - dispatch pc=34, inst=STORE_SUBSCR(arg=None, lineno=4)
2025-01-31 15:31:38,799 - DEBUG - stack ['$const24.9', '$out026.10', '$32build_slice.14']
2025-01-31 15:31:38,799 - DEBUG - dispatch pc=36, inst=LOAD_CONST(arg=2, lineno=5)
2025-01-31 15:31:38,799 - DEBUG - stack []
2025-01-31 15:31:38,799 - DEBUG - dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=5)
2025-01-31 15:31:38,799 - DEBUG - stack ['$const36.15']
2025-01-31 15:31:38,799 - DEBUG - dispatch pc=40, inst=LOAD_CONST(arg=4, lineno=5)
2025-01-31 15:31:38,800 - DEBUG - stack ['$const36.15', '$out038.16']
2025-01-31 15:31:38,800 - DEBUG - dispatch pc=42, inst=LOAD_CONST(arg=0, lineno=5)
2025-01-31 15:31:38,800 - DEBUG - stack ['$const36.15', '$out038.16', '$const40.17']
2025-01-31 15:31:38,800 - DEBUG - dispatch pc=44, inst=BUILD_SLICE(arg=2, lineno=5)
2025-01-31 15:31:38,800 - DEBUG - stack ['$const36.15', '$out038.16', '$const40.17', '$const42.18']
2025-01-31 15:31:38,800 - DEBUG - dispatch pc=46, inst=STORE_SUBSCR(arg=None, lineno=5)
2025-01-31 15:31:38,800 - DEBUG - stack ['$const36.15', '$out038.16', '$44build_slice.20']
2025-01-31 15:31:38,800 - DEBUG - dispatch pc=48, inst=LOAD_GLOBAL(arg=4, lineno=6)
2025-01-31 15:31:38,800 - DEBUG - stack []
2025-01-31 15:31:38,800 - DEBUG - dispatch pc=50, inst=LOAD_GLOBAL(arg=5, lineno=6)
2025-01-31 15:31:38,800 - DEBUG - stack ['$48load_global.21']
2025-01-31 15:31:38,800 - DEBUG - dispatch pc=52, inst=LOAD_CONST(arg=2, lineno=6)
2025-01-31 15:31:38,800 - DEBUG - stack ['$48load_global.21', '$50load_global.22']
2025-01-31 15:31:38,800 - DEBUG - dispatch pc=54, inst=LOAD_CONST(arg=4, lineno=6)
2025-01-31 15:31:38,800 - DEBUG - stack ['$48load_global.21', '$50load_global.22', '$const52.23']
2025-01-31 15:31:38,800 - DEBUG - dispatch pc=56, inst=CALL_FUNCTION(arg=2, lineno=6)
2025-01-31 15:31:38,800 - DEBUG - stack ['$48load_global.21', '$50load_global.22', '$const52.23', '$const54.24']
2025-01-31 15:31:38,800 - DEBUG - dispatch pc=58, inst=UNARY_NEGATIVE(arg=None, lineno=6)
2025-01-31 15:31:38,800 - DEBUG - stack ['$48load_global.21', '$56call_function.25']
2025-01-31 15:31:38,800 - DEBUG - dispatch pc=60, inst=LOAD_FAST(arg=1, lineno=6)
2025-01-31 15:31:38,800 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26']
2025-01-31 15:31:38,800 - DEBUG - dispatch pc=62, inst=LOAD_CONST(arg=2, lineno=6)
2025-01-31 15:31:38,800 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27']
2025-01-31 15:31:38,800 - DEBUG - dispatch pc=64, inst=BINARY_SUBSCR(arg=None, lineno=6)
2025-01-31 15:31:38,800 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27', '$const62.28']
2025-01-31 15:31:38,800 - DEBUG - dispatch pc=66, inst=LOAD_GLOBAL(arg=6, lineno=6)
2025-01-31 15:31:38,800 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29']
2025-01-31 15:31:38,800 - DEBUG - dispatch pc=68, inst=LOAD_CONST(arg=2, lineno=6)
2025-01-31 15:31:38,800 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30']
2025-01-31 15:31:38,801 - DEBUG - dispatch pc=70, inst=LOAD_CONST(arg=3, lineno=6)
2025-01-31 15:31:38,801 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31']
2025-01-31 15:31:38,801 - DEBUG - dispatch pc=72, inst=CALL_FUNCTION(arg=2, lineno=6)
2025-01-31 15:31:38,801 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31', '$const70.32']
2025-01-31 15:31:38,801 - DEBUG - dispatch pc=74, inst=BINARY_SUBTRACT(arg=None, lineno=6)
2025-01-31 15:31:38,801 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$72call_function.33']
2025-01-31 15:31:38,801 - DEBUG - dispatch pc=76, inst=CALL_FUNCTION(arg=2, lineno=6)
2025-01-31 15:31:38,801 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34']
2025-01-31 15:31:38,801 - DEBUG - dispatch pc=78, inst=GET_ITER(arg=None, lineno=6)
2025-01-31 15:31:38,801 - DEBUG - stack ['$76call_function.35']
2025-01-31 15:31:38,801 - DEBUG - end state. edges=[Edge(pc=80, stack=('$78get_iter.36',), blockstack=(), npush=0)]
2025-01-31 15:31:38,801 - DEBUG - pending: deque([State(pc_initial=80 nstack_initial=1)])
2025-01-31 15:31:38,801 - DEBUG - stack: ['$phi80.0']
2025-01-31 15:31:38,801 - DEBUG - state.pc_initial: State(pc_initial=80 nstack_initial=1)
2025-01-31 15:31:38,801 - DEBUG - dispatch pc=80, inst=FOR_ITER(arg=4, lineno=6)
2025-01-31 15:31:38,801 - DEBUG - stack ['$phi80.0']
2025-01-31 15:31:38,801 - DEBUG - end state. edges=[Edge(pc=90, stack=(), blockstack=(), npush=0), Edge(pc=82, stack=('$phi80.0', '$80for_iter.2'), blockstack=(), npush=0)]
2025-01-31 15:31:38,801 - DEBUG - pending: deque([State(pc_initial=90 nstack_initial=0), State(pc_initial=82 nstack_initial=2)])
2025-01-31 15:31:38,801 - DEBUG - stack: []
2025-01-31 15:31:38,801 - DEBUG - state.pc_initial: State(pc_initial=90 nstack_initial=0)
2025-01-31 15:31:38,801 - DEBUG - dispatch pc=90, inst=LOAD_FAST(arg=2, lineno=8)
2025-01-31 15:31:38,801 - DEBUG - stack []
2025-01-31 15:31:38,801 - DEBUG - dispatch pc=92, inst=RETURN_VALUE(arg=None, lineno=8)
2025-01-31 15:31:38,801 - DEBUG - stack ['$out090.0']
2025-01-31 15:31:38,801 - DEBUG - end state. edges=[]
2025-01-31 15:31:38,801 - DEBUG - pending: deque([State(pc_initial=82 nstack_initial=2)])
2025-01-31 15:31:38,801 - DEBUG - stack: ['$phi82.0', '$phi82.1']
2025-01-31 15:31:38,802 - DEBUG - state.pc_initial: State(pc_initial=82 nstack_initial=2)
2025-01-31 15:31:38,802 - DEBUG - dispatch pc=82, inst=STORE_FAST(arg=3, lineno=6)
2025-01-31 15:31:38,802 - DEBUG - stack ['$phi82.0', '$phi82.1']
2025-01-31 15:31:38,802 - DEBUG - dispatch pc=84, inst=LOAD_CONST(arg=2, lineno=7)
2025-01-31 15:31:38,802 - DEBUG - stack ['$phi82.0']
2025-01-31 15:31:38,802 - DEBUG - dispatch pc=86, inst=STORE_FAST(arg=4, lineno=7)
2025-01-31 15:31:38,802 - DEBUG - stack ['$phi82.0', '$const84.2']
2025-01-31 15:31:38,802 - DEBUG - dispatch pc=88, inst=JUMP_ABSOLUTE(arg=41, lineno=7)
2025-01-31 15:31:38,802 - DEBUG - stack ['$phi82.0']
2025-01-31 15:31:38,802 - DEBUG - end state. edges=[Edge(pc=80, stack=('$phi82.0',), blockstack=(), npush=0)]
2025-01-31 15:31:38,802 - DEBUG - pending: deque([State(pc_initial=80 nstack_initial=1)])
2025-01-31 15:31:38,802 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:31:38,802 - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=80 nstack_initial=1): {'$phi80.0'},
             State(pc_initial=82 nstack_initial=2): {'$phi82.1'},
             State(pc_initial=90 nstack_initial=0): set()})
2025-01-31 15:31:38,802 - DEBUG - defmap: {'$phi80.0': State(pc_initial=0 nstack_initial=0),
 '$phi82.1': State(pc_initial=80 nstack_initial=1)}
2025-01-31 15:31:38,802 - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi82.0', State(pc_initial=82 nstack_initial=2))},
             '$phi82.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-01-31 15:31:38,802 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-01-31 15:31:38,803 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-01-31 15:31:38,803 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-01-31 15:31:38,803 - DEBUG - keep phismap: {'$phi80.0': {('$78get_iter.36', State(pc_initial=0 nstack_initial=0))},
 '$phi82.1': {('$80for_iter.2', State(pc_initial=80 nstack_initial=1))}}
2025-01-31 15:31:38,803 - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi80.0': '$78get_iter.36'},
             State(pc_initial=80 nstack_initial=1): {'$phi82.1': '$80for_iter.2'}})
2025-01-31 15:31:38,803 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:31:38,803 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'item': '$x2.0', 'res': '$4load_attr.1'}), (6, {'value': '$4load_attr.1'}), (8, {'res': '$8load_global.2'}), (10, {'item': '$8load_global.2', 'res': '$10load_attr.3'}), (12, {'res': '$full_shape012.4'}), (14, {'res': '$14load_global.5'}), (16, {'item': '$14load_global.5', 'res': '$16load_attr.6'}), (18, {'res': '$const18.7'}), (20, {'func': '$10load_attr.3', 'args': ['$full_shape012.4', '$16load_attr.6'], 'names': '$const18.7', 'res': '$20call_function_kw.8'}), (22, {'value': '$20call_function_kw.8'}), (24, {'res': '$const24.9'}), (26, {'res': '$out026.10'}), (28, {'res': '$const28.11'}), (30, {'res': '$const30.12'}), (32, {'start': '$const28.11', 'stop': '$const30.12', 'step': None, 'res': '$32build_slice.14', 'slicevar': '$32build_slice.13'}), (34, {'target': '$out026.10', 'index': '$32build_slice.14', 'value': '$const24.9'}), (36, {'res': '$const36.15'}), (38, {'res': '$out038.16'}), (40, {'res': '$const40.17'}), (42, {'res': '$const42.18'}), (44, {'start': '$const40.17', 'stop': '$const42.18', 'step': None, 'res': '$44build_slice.20', 'slicevar': '$44build_slice.19'}), (46, {'target': '$out038.16', 'index': '$44build_slice.20', 'value': '$const36.15'}), (48, {'res': '$48load_global.21'}), (50, {'res': '$50load_global.22'}), (52, {'res': '$const52.23'}), (54, {'res': '$const54.24'}), (56, {'func': '$50load_global.22', 'args': ['$const52.23', '$const54.24'], 'res': '$56call_function.25'}), (58, {'value': '$56call_function.25', 'res': '$58unary_negative.26'}), (60, {'res': '$full_shape060.27'}), (62, {'res': '$const62.28'}), (64, {'index': '$const62.28', 'target': '$full_shape060.27', 'res': '$64binary_subscr.29'}), (66, {'res': '$66load_global.30'}), (68, {'res': '$const68.31'}), (70, {'res': '$const70.32'}), (72, {'func': '$66load_global.30', 'args': ['$const68.31', '$const70.32'], 'res': '$72call_function.33'}), (74, {'lhs': '$64binary_subscr.29', 'rhs': '$72call_function.33', 'res': '$74binary_subtract.34'}), (76, {'func': '$48load_global.21', 'args': ['$58unary_negative.26', '$74binary_subtract.34'], 'res': '$76call_function.35'}), (78, {'value': '$76call_function.35', 'res': '$78get_iter.36'})), outgoing_phis={'$phi80.0': '$78get_iter.36'}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$78get_iter.36',)})
2025-01-31 15:31:38,803 - DEBUG - block_infos State(pc_initial=80 nstack_initial=1):
AdaptBlockInfo(insts=((80, {'iterator': '$phi80.0', 'pair': '$80for_iter.1', 'indval': '$80for_iter.2', 'pred': '$80for_iter.3'}),), outgoing_phis={'$phi82.1': '$80for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: (), 82: ('$phi80.0', '$80for_iter.2')})
2025-01-31 15:31:38,803 - DEBUG - block_infos State(pc_initial=82 nstack_initial=2):
AdaptBlockInfo(insts=((82, {'value': '$phi82.1'}), (84, {'res': '$const84.2'}), (86, {'value': '$const84.2'}), (88, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$phi82.0',)})
2025-01-31 15:31:38,803 - DEBUG - block_infos State(pc_initial=90 nstack_initial=0):
AdaptBlockInfo(insts=((90, {'res': '$out090.0'}), (92, {'retval': '$out090.0', 'castval': '$92return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:38,804 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    full_shape0 = getattr(value=x, attr=shape) ['full_shape0', 'x']
    $8load_global.2 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>) ['$8load_global.2']
    $10load_attr.3 = getattr(value=$8load_global.2, attr=empty) ['$10load_attr.3', '$8load_global.2']
    $14load_global.5 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>) ['$14load_global.5']
    $16load_attr.6 = getattr(value=$14load_global.5, attr=bool_) ['$14load_global.5', '$16load_attr.6']
    out0 = call $10load_attr.3(full_shape0, func=$10load_attr.3, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6, <string>:3))], vararg=None, varkwarg=None, target=None) ['$10load_attr.3', '$16load_attr.6', 'full_shape0', 'out0']
    $const24.9 = const(int, 0)               ['$const24.9']
    $const28.11 = const(NoneType, None)      ['$const28.11']
    $const30.12 = const(int, 1)              ['$const30.12']
    $32build_slice.13 = global(slice: <class 'slice'>) ['$32build_slice.13']
    $32build_slice.14 = call $32build_slice.13($const28.11, $const30.12, func=$32build_slice.13, args=(Var($const28.11, <string>:4), Var($const30.12, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None) ['$32build_slice.13', '$32build_slice.14', '$const28.11', '$const30.12']
    out0[$32build_slice.14] = $const24.9     ['$32build_slice.14', '$const24.9', 'out0']
    $const36.15 = const(int, 0)              ['$const36.15']
    $const40.17 = const(int, -1)             ['$const40.17']
    $const42.18 = const(NoneType, None)      ['$const42.18']
    $44build_slice.19 = global(slice: <class 'slice'>) ['$44build_slice.19']
    $44build_slice.20 = call $44build_slice.19($const40.17, $const42.18, func=$44build_slice.19, args=(Var($const40.17, <string>:5), Var($const42.18, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None) ['$44build_slice.19', '$44build_slice.20', '$const40.17', '$const42.18']
    out0[$44build_slice.20] = $const36.15    ['$44build_slice.20', '$const36.15', 'out0']
    $48load_global.21 = global(range: <class 'range'>) ['$48load_global.21']
    $50load_global.22 = global(min: <built-in function min>) ['$50load_global.22']
    $const52.23 = const(int, 0)              ['$const52.23']
    $const54.24 = const(int, -1)             ['$const54.24']
    $56call_function.25 = call $50load_global.22($const52.23, $const54.24, func=$50load_global.22, args=[Var($const52.23, <string>:6), Var($const54.24, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$50load_global.22', '$56call_function.25', '$const52.23', '$const54.24']
    $58unary_negative.26 = unary(fn=<built-in function neg>, value=$56call_function.25) ['$56call_function.25', '$58unary_negative.26']
    $const62.28 = const(int, 0)              ['$const62.28']
    $64binary_subscr.29 = getitem(value=full_shape0, index=$const62.28, fn=<built-in function getitem>) ['$64binary_subscr.29', '$const62.28', 'full_shape0']
    $66load_global.30 = global(max: <built-in function max>) ['$66load_global.30']
    $const68.31 = const(int, 0)              ['$const68.31']
    $const70.32 = const(int, 1)              ['$const70.32']
    $72call_function.33 = call $66load_global.30($const68.31, $const70.32, func=$66load_global.30, args=[Var($const68.31, <string>:6), Var($const70.32, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$66load_global.30', '$72call_function.33', '$const68.31', '$const70.32']
    $74binary_subtract.34 = $64binary_subscr.29 - $72call_function.33 ['$64binary_subscr.29', '$72call_function.33', '$74binary_subtract.34']
    $76call_function.35 = call $48load_global.21($58unary_negative.26, $74binary_subtract.34, func=$48load_global.21, args=[Var($58unary_negative.26, <string>:6), Var($74binary_subtract.34, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34', '$76call_function.35']
    $78get_iter.36 = getiter(value=$76call_function.35) ['$76call_function.35', '$78get_iter.36']
    $phi80.0 = $78get_iter.36                ['$78get_iter.36', '$phi80.0']
    jump 80                                  []
label 80:
    $80for_iter.1 = iternext(value=$phi80.0) ['$80for_iter.1', '$phi80.0']
    $80for_iter.2 = pair_first(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.2']
    $80for_iter.3 = pair_second(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.3']
    $phi82.1 = $80for_iter.2                 ['$80for_iter.2', '$phi82.1']
    branch $80for_iter.3, 82, 90             ['$80for_iter.3']
label 82:
    index00 = $phi82.1                       ['$phi82.1', 'index00']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 80                                  []
label 90:
    $92return_value.1 = cast(value=out0)     ['$92return_value.1', 'out0']
    return $92return_value.1                 ['$92return_value.1']

2025-01-31 15:31:38,812 - DEBUG - ==== SSA block analysis pass on 0
2025-01-31 15:31:38,812 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89ebb502b0>
2025-01-31 15:31:38,812 - DEBUG - on stmt: x = arg(0, name=x)
2025-01-31 15:31:38,812 - DEBUG - on stmt: full_shape0 = getattr(value=x, attr=shape)
2025-01-31 15:31:38,812 - DEBUG - on stmt: $8load_global.2.1 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:38,812 - DEBUG - on stmt: $10load_attr.3.1 = getattr(value=$8load_global.2.1, attr=empty)
2025-01-31 15:31:38,812 - DEBUG - on stmt: $14load_global.5.1 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:38,812 - DEBUG - on stmt: $16load_attr.6.1 = getattr(value=$14load_global.5.1, attr=bool_)
2025-01-31 15:31:38,812 - DEBUG - on stmt: out0 = call $10load_attr.3.1(full_shape0, func=$10load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:38,812 - DEBUG - on stmt: $const24.9.1 = const(int, 0)
2025-01-31 15:31:38,812 - DEBUG - on stmt: $const28.11.1 = const(NoneType, None)
2025-01-31 15:31:38,812 - DEBUG - on stmt: $const30.12.1 = const(int, 1)
2025-01-31 15:31:38,812 - DEBUG - on stmt: $32build_slice.13.1 = global(slice: <class 'slice'>)
2025-01-31 15:31:38,812 - DEBUG - on stmt: $32build_slice.14.1 = call $32build_slice.13.1($const28.11.1, $const30.12.1, func=$32build_slice.13.1, args=(Var($const28.11.1, <string>:4), Var($const30.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:38,813 - DEBUG - on stmt: out0[$32build_slice.14.1] = $const24.9.1
2025-01-31 15:31:38,813 - DEBUG - on stmt: $const36.15.1 = const(int, 0)
2025-01-31 15:31:38,813 - DEBUG - on stmt: $const40.17.1 = const(int, -1)
2025-01-31 15:31:38,813 - DEBUG - on stmt: $const42.18.1 = const(NoneType, None)
2025-01-31 15:31:38,813 - DEBUG - on stmt: $44build_slice.19.1 = global(slice: <class 'slice'>)
2025-01-31 15:31:38,813 - DEBUG - on stmt: $44build_slice.20.1 = call $44build_slice.19.1($const40.17.1, $const42.18.1, func=$44build_slice.19.1, args=(Var($const40.17.1, <string>:5), Var($const42.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:38,813 - DEBUG - on stmt: out0[$44build_slice.20.1] = $const36.15.1
2025-01-31 15:31:38,813 - DEBUG - on stmt: $48load_global.21.1 = global(range: <class 'range'>)
2025-01-31 15:31:38,813 - DEBUG - on stmt: $50load_global.22.1 = global(min: <built-in function min>)
2025-01-31 15:31:38,813 - DEBUG - on stmt: $const52.23.1 = const(int, 0)
2025-01-31 15:31:38,813 - DEBUG - on stmt: $const54.24.1 = const(int, -1)
2025-01-31 15:31:38,813 - DEBUG - on stmt: $56call_function.25.1 = call $50load_global.22.1($const52.23.1, $const54.24.1, func=$50load_global.22.1, args=[Var($const52.23.1, <string>:6), Var($const54.24.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:38,813 - DEBUG - on stmt: $58unary_negative.26.1 = unary(fn=<built-in function neg>, value=$56call_function.25.1)
2025-01-31 15:31:38,813 - DEBUG - on stmt: $const62.28.1 = const(int, 0)
2025-01-31 15:31:38,813 - DEBUG - on stmt: $64binary_subscr.29.1 = getitem(value=full_shape0, index=$const62.28.1, fn=<built-in function getitem>)
2025-01-31 15:31:38,813 - DEBUG - on stmt: $66load_global.30.1 = global(max: <built-in function max>)
2025-01-31 15:31:38,813 - DEBUG - on stmt: $const68.31.1 = const(int, 0)
2025-01-31 15:31:38,813 - DEBUG - on stmt: $const70.32.1 = const(int, 1)
2025-01-31 15:31:38,813 - DEBUG - on stmt: $72call_function.33.1 = call $66load_global.30.1($const68.31.1, $const70.32.1, func=$66load_global.30.1, args=[Var($const68.31.1, <string>:6), Var($const70.32.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:38,813 - DEBUG - on stmt: $74binary_subtract.34.1 = $64binary_subscr.29.1 - $72call_function.33.1
2025-01-31 15:31:38,813 - DEBUG - on stmt: $76call_function.35.1 = call $48load_global.21.1($58unary_negative.26.1, $74binary_subtract.34.1, func=$48load_global.21.1, args=[Var($58unary_negative.26.1, <string>:6), Var($74binary_subtract.34.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:38,813 - DEBUG - on stmt: $78get_iter.36.1 = getiter(value=$76call_function.35.1)
2025-01-31 15:31:38,813 - DEBUG - on stmt: $phi80.0.1 = $78get_iter.36.1
2025-01-31 15:31:38,813 - DEBUG - on stmt: jump 80
2025-01-31 15:31:38,814 - DEBUG - ==== SSA block analysis pass on 80
2025-01-31 15:31:38,814 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89ebb502b0>
2025-01-31 15:31:38,814 - DEBUG - on stmt: $80for_iter.1.1 = iternext(value=$phi80.0.1)
2025-01-31 15:31:38,814 - DEBUG - on stmt: $80for_iter.2.1 = pair_first(value=$80for_iter.1.1)
2025-01-31 15:31:38,814 - DEBUG - on stmt: $80for_iter.3.1 = pair_second(value=$80for_iter.1.1)
2025-01-31 15:31:38,814 - DEBUG - on stmt: $phi82.1.1 = $80for_iter.2.1
2025-01-31 15:31:38,814 - DEBUG - on stmt: branch $80for_iter.3.1, 82, 92
2025-01-31 15:31:38,814 - DEBUG - ==== SSA block analysis pass on 82
2025-01-31 15:31:38,814 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89ebb502b0>
2025-01-31 15:31:38,814 - DEBUG - on stmt: index00 = $phi82.1.1
2025-01-31 15:31:38,814 - DEBUG - on stmt: jump 90
2025-01-31 15:31:38,814 - DEBUG - ==== SSA block analysis pass on 92
2025-01-31 15:31:38,814 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89ebb502b0>
2025-01-31 15:31:38,814 - DEBUG - on stmt: $92return_value.1.1 = cast(value=out0)
2025-01-31 15:31:38,814 - DEBUG - on stmt: return $92return_value.1.1
2025-01-31 15:31:38,814 - DEBUG - ==== SSA block analysis pass on 90
2025-01-31 15:31:38,814 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89ebb502b0>
2025-01-31 15:31:38,814 - DEBUG - on stmt: $const4.1 = const(int, 0)
2025-01-31 15:31:38,814 - DEBUG - on stmt: stencil_index = $const4.1 + index00
2025-01-31 15:31:38,814 - DEBUG - on stmt: $6binary_subscr.2 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-01-31 15:31:38,814 - DEBUG - on stmt: $const10.4 = const(int, -1)
2025-01-31 15:31:38,814 - DEBUG - on stmt: stencil_index.1 = $const10.4 + index00
2025-01-31 15:31:38,814 - DEBUG - on stmt: $12binary_subscr.5 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2025-01-31 15:31:38,814 - DEBUG - on stmt: $14compare_op.6 = $6binary_subscr.2 < $12binary_subscr.5
2025-01-31 15:31:38,814 - DEBUG - on stmt: $const18.8 = const(int, 0)
2025-01-31 15:31:38,814 - DEBUG - on stmt: stencil_index.2 = $const18.8 + index00
2025-01-31 15:31:38,814 - DEBUG - on stmt: $20binary_subscr.9 = getitem(value=x, index=stencil_index.2, fn=<built-in function getitem>)
2025-01-31 15:31:38,815 - DEBUG - on stmt: $const24.11 = const(int, 1)
2025-01-31 15:31:38,815 - DEBUG - on stmt: stencil_index.3 = $const24.11 + index00
2025-01-31 15:31:38,815 - DEBUG - on stmt: $26binary_subscr.12 = getitem(value=x, index=stencil_index.3, fn=<built-in function getitem>)
2025-01-31 15:31:38,815 - DEBUG - on stmt: $28compare_op.13 = $20binary_subscr.9 <= $26binary_subscr.12
2025-01-31 15:31:38,815 - DEBUG - on stmt: $30binary_and.14 = $14compare_op.6 & $28compare_op.13
2025-01-31 15:31:38,815 - DEBUG - on stmt: $32return_value.15 = cast(value=$30binary_and.14)
2025-01-31 15:31:38,815 - DEBUG - on stmt: out0[index00] = $32return_value.15
2025-01-31 15:31:38,815 - DEBUG - on stmt: jump 91
2025-01-31 15:31:38,815 - DEBUG - ==== SSA block analysis pass on 91
2025-01-31 15:31:38,815 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89ebb502b0>
2025-01-31 15:31:38,815 - DEBUG - on stmt: jump 80
2025-01-31 15:31:38,816 - DEBUG - defs defaultdict(<class 'list'>,
            {'$10load_attr.3.1': [(<numba.core.ir.Assign object at 0x7c89ebc7d4e0>,
                                   0)],
             '$12binary_subscr.5': [(<numba.core.ir.Assign object at 0x7c89ebaa7f70>,
                                     90)],
             '$14compare_op.6': [(<numba.core.ir.Assign object at 0x7c89ebc75630>,
                                  90)],
             '$14load_global.5.1': [(<numba.core.ir.Assign object at 0x7c89ebc7d240>,
                                     0)],
             '$16load_attr.6.1': [(<numba.core.ir.Assign object at 0x7c89ebc7cf70>,
                                   0)],
             '$20binary_subscr.9': [(<numba.core.ir.Assign object at 0x7c89ebc7c1f0>,
                                     90)],
             '$26binary_subscr.12': [(<numba.core.ir.Assign object at 0x7c89ebc7c430>,
                                      90)],
             '$28compare_op.13': [(<numba.core.ir.Assign object at 0x7c89ebaa4820>,
                                   90)],
             '$30binary_and.14': [(<numba.core.ir.Assign object at 0x7c89ebaa4a00>,
                                   90)],
             '$32build_slice.13.1': [(<numba.core.ir.Assign object at 0x7c89ebc7e170>,
                                      0)],
             '$32build_slice.14.1': [(<numba.core.ir.Assign object at 0x7c89ebc7e290>,
                                      0)],
             '$32return_value.15': [(<numba.core.ir.Assign object at 0x7c89ebaa54b0>,
                                     90)],
             '$44build_slice.19.1': [(<numba.core.ir.Assign object at 0x7c89ebc7ea70>,
                                      0)],
             '$44build_slice.20.1': [(<numba.core.ir.Assign object at 0x7c89ebc7eb90>,
                                      0)],
             '$48load_global.21.1': [(<numba.core.ir.Assign object at 0x7c89ebc7edd0>,
                                      0)],
             '$50load_global.22.1': [(<numba.core.ir.Assign object at 0x7c89ebc7ef50>,
                                      0)],
             '$56call_function.25.1': [(<numba.core.ir.Assign object at 0x7c89ebc7f430>,
                                        0)],
             '$58unary_negative.26.1': [(<numba.core.ir.Assign object at 0x7c89ebc7f550>,
                                         0)],
             '$64binary_subscr.29.1': [(<numba.core.ir.Assign object at 0x7c89ebc7f9a0>,
                                        0)],
             '$66load_global.30.1': [(<numba.core.ir.Assign object at 0x7c89ebc7faf0>,
                                      0)],
             '$6binary_subscr.2': [(<numba.core.ir.Assign object at 0x7c89ebaa7d30>,
                                    90)],
             '$72call_function.33.1': [(<numba.core.ir.Assign object at 0x7c89ebc7ffd0>,
                                        0)],
             '$74binary_subtract.34.1': [(<numba.core.ir.Assign object at 0x7c89ebae4160>,
                                          0)],
             '$76call_function.35.1': [(<numba.core.ir.Assign object at 0x7c89ebae4310>,
                                        0)],
             '$78get_iter.36.1': [(<numba.core.ir.Assign object at 0x7c89ebae4430>,
                                   0)],
             '$80for_iter.1.1': [(<numba.core.ir.Assign object at 0x7c89ebae4520>,
                                  80)],
             '$80for_iter.2.1': [(<numba.core.ir.Assign object at 0x7c89ebae4640>,
                                  80)],
             '$80for_iter.3.1': [(<numba.core.ir.Assign object at 0x7c89ebae4760>,
                                  80)],
             '$8load_global.2.1': [(<numba.core.ir.Assign object at 0x7c89ebc7d660>,
                                    0)],
             '$92return_value.1.1': [(<numba.core.ir.Assign object at 0x7c89ebae5090>,
                                      92)],
             '$const10.4': [(<numba.core.ir.Assign object at 0x7c89ebc7b010>,
                             90)],
             '$const18.8': [(<numba.core.ir.Assign object at 0x7c89ebc75ff0>,
                             90)],
             '$const24.11': [(<numba.core.ir.Assign object at 0x7c89e8a0b070>,
                              90)],
             '$const24.9.1': [(<numba.core.ir.Assign object at 0x7c89ebc7c820>,
                               0)],
             '$const28.11.1': [(<numba.core.ir.Assign object at 0x7c89ebc7c4f0>,
                                0)],
             '$const30.12.1': [(<numba.core.ir.Assign object at 0x7c89ebc7dff0>,
                                0)],
             '$const36.15.1': [(<numba.core.ir.Assign object at 0x7c89ebc7e4d0>,
                                0)],
             '$const4.1': [(<numba.core.ir.Assign object at 0x7c89ebc75d20>,
                            90)],
             '$const40.17.1': [(<numba.core.ir.Assign object at 0x7c89ebc7e770>,
                                0)],
             '$const42.18.1': [(<numba.core.ir.Assign object at 0x7c89ebc7e8f0>,
                                0)],
             '$const52.23.1': [(<numba.core.ir.Assign object at 0x7c89ebc7f0d0>,
                                0)],
             '$const54.24.1': [(<numba.core.ir.Assign object at 0x7c89ebc7f250>,
                                0)],
             '$const62.28.1': [(<numba.core.ir.Assign object at 0x7c89ebc7f7f0>,
                                0)],
             '$const68.31.1': [(<numba.core.ir.Assign object at 0x7c89ebc7fc70>,
                                0)],
             '$const70.32.1': [(<numba.core.ir.Assign object at 0x7c89ebc7fdf0>,
                                0)],
             '$phi80.0.1': [(<numba.core.ir.Assign object at 0x7c89ebc7d9f0>,
                             0)],
             '$phi82.1.1': [(<numba.core.ir.Assign object at 0x7c89ebc7f700>,
                             80)],
             'full_shape0': [(<numba.core.ir.Assign object at 0x7c89ebc7d900>,
                              0)],
             'index00': [(<numba.core.ir.Assign object at 0x7c89ebae4a30>, 82)],
             'out0': [(<numba.core.ir.Assign object at 0x7c89ebc7caf0>, 0)],
             'stencil_index': [(<numba.core.ir.Assign object at 0x7c89ebaa7340>,
                                90)],
             'stencil_index.1': [(<numba.core.ir.Assign object at 0x7c89ebaa7eb0>,
                                  90)],
             'stencil_index.2': [(<numba.core.ir.Assign object at 0x7c89ebc7c130>,
                                  90)],
             'stencil_index.3': [(<numba.core.ir.Assign object at 0x7c89ebc7c370>,
                                  90)],
             'x': [(<numba.core.ir.Assign object at 0x7c89ebc7dba0>, 0)]})
2025-01-31 15:31:38,816 - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x7c89ebb502b0>
2025-01-31 15:31:39,000 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=1068)
           2	LOAD_GLOBAL(arg=0, lineno=1082)
           4	LOAD_FAST(arg=0, lineno=1082)
           6	CALL_FUNCTION(arg=1, lineno=1082)
           8	LOAD_FAST(arg=1, lineno=1082)
          10	LOAD_CONST(arg=1, lineno=1082)
          12	LOAD_CONST(arg=1, lineno=1082)
          14	BUILD_SLICE(arg=2, lineno=1082)
          16	STORE_SUBSCR(arg=None, lineno=1082)
          18	LOAD_CONST(arg=1, lineno=1082)
          20	RETURN_VALUE(arg=None, lineno=1082)
2025-01-31 15:31:39,001 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:31:39,001 - DEBUG - stack: []
2025-01-31 15:31:39,001 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:31:39,001 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=1068)
2025-01-31 15:31:39,001 - DEBUG - stack []
2025-01-31 15:31:39,001 - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=1082)
2025-01-31 15:31:39,001 - DEBUG - stack []
2025-01-31 15:31:39,001 - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=1082)
2025-01-31 15:31:39,001 - DEBUG - stack ['$2load_global.0']
2025-01-31 15:31:39,001 - DEBUG - dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=1082)
2025-01-31 15:31:39,001 - DEBUG - stack ['$2load_global.0', '$x4.1']
2025-01-31 15:31:39,001 - DEBUG - dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=1082)
2025-01-31 15:31:39,001 - DEBUG - stack ['$6call_function.2']
2025-01-31 15:31:39,001 - DEBUG - dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=1082)
2025-01-31 15:31:39,001 - DEBUG - stack ['$6call_function.2', '$y8.3']
2025-01-31 15:31:39,001 - DEBUG - dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=1082)
2025-01-31 15:31:39,001 - DEBUG - stack ['$6call_function.2', '$y8.3', '$const10.4']
2025-01-31 15:31:39,001 - DEBUG - dispatch pc=14, inst=BUILD_SLICE(arg=2, lineno=1082)
2025-01-31 15:31:39,001 - DEBUG - stack ['$6call_function.2', '$y8.3', '$const10.4', '$const12.5']
2025-01-31 15:31:39,001 - DEBUG - dispatch pc=16, inst=STORE_SUBSCR(arg=None, lineno=1082)
2025-01-31 15:31:39,001 - DEBUG - stack ['$6call_function.2', '$y8.3', '$14build_slice.7']
2025-01-31 15:31:39,001 - DEBUG - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1082)
2025-01-31 15:31:39,001 - DEBUG - stack []
2025-01-31 15:31:39,001 - DEBUG - dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=1082)
2025-01-31 15:31:39,001 - DEBUG - stack ['$const18.8']
2025-01-31 15:31:39,001 - DEBUG - end state. edges=[]
2025-01-31 15:31:39,002 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:31:39,002 - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-01-31 15:31:39,002 - DEBUG - defmap: {}
2025-01-31 15:31:39,002 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:39,002 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:39,002 - DEBUG - keep phismap: {}
2025-01-31 15:31:39,002 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-01-31 15:31:39,002 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:31:39,002 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$x4.1'}), (6, {'func': '$2load_global.0', 'args': ['$x4.1'], 'res': '$6call_function.2'}), (8, {'res': '$y8.3'}), (10, {'res': '$const10.4'}), (12, {'res': '$const12.5'}), (14, {'start': '$const10.4', 'stop': '$const12.5', 'step': None, 'res': '$14build_slice.7', 'slicevar': '$14build_slice.6'}), (16, {'target': '$y8.3', 'index': '$14build_slice.7', 'value': '$6call_function.2'}), (18, {'res': '$const18.8'}), (20, {'retval': '$const18.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:39,003 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    y = arg(1, name=y)                       ['y']
    $2load_global.0 = global(_localmin_sten: <numba.stencils.stencil.StencilFunc object at 0x7c89eba2d810>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, utils.py:1068)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$6call_function.2', 'x']
    $const10.4 = const(NoneType, None)       ['$const10.4']
    $const12.5 = const(NoneType, None)       ['$const12.5']
    $14build_slice.6 = global(slice: <class 'slice'>) ['$14build_slice.6']
    $14build_slice.7 = call $14build_slice.6($const10.4, $const12.5, func=$14build_slice.6, args=(Var($const10.4, utils.py:1082), Var($const12.5, utils.py:1082)), kws=(), vararg=None, varkwarg=None, target=None) ['$14build_slice.6', '$14build_slice.7', '$const10.4', '$const12.5']
    y[$14build_slice.7] = $6call_function.2  ['$14build_slice.7', '$6call_function.2', 'y']
    $const18.8 = const(NoneType, None)       ['$const18.8']
    $20return_value.9 = cast(value=$const18.8) ['$20return_value.9', '$const18.8']
    return $20return_value.9                 ['$20return_value.9']

2025-01-31 15:31:39,007 - DEBUG - ==== SSA block analysis pass on 0
2025-01-31 15:31:39,007 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8b223e0>
2025-01-31 15:31:39,007 - DEBUG - on stmt: x = arg(0, name=x)
2025-01-31 15:31:39,007 - DEBUG - on stmt: y = arg(1, name=y)
2025-01-31 15:31:39,007 - DEBUG - on stmt: $2load_global.0 = global(_localmin_sten: <numba.stencils.stencil.StencilFunc object at 0x7c89eba2d810>)
2025-01-31 15:31:39,007 - DEBUG - on stmt: $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, utils.py:1068)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:39,007 - DEBUG - on stmt: $const10.4 = const(NoneType, None)
2025-01-31 15:31:39,007 - DEBUG - on stmt: $const12.5 = const(NoneType, None)
2025-01-31 15:31:39,007 - DEBUG - on stmt: $14build_slice.6 = global(slice: <class 'slice'>)
2025-01-31 15:31:39,007 - DEBUG - on stmt: $14build_slice.7 = call $14build_slice.6($const10.4, $const12.5, func=$14build_slice.6, args=(Var($const10.4, utils.py:1082), Var($const12.5, utils.py:1082)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:39,007 - DEBUG - on stmt: y[slice(None, None, None)] = $6call_function.2
2025-01-31 15:31:39,007 - DEBUG - on stmt: $const18.8 = const(NoneType, None)
2025-01-31 15:31:39,007 - DEBUG - on stmt: $20return_value.9 = cast(value=$const18.8)
2025-01-31 15:31:39,007 - DEBUG - on stmt: return $20return_value.9
2025-01-31 15:31:39,007 - DEBUG - defs defaultdict(<class 'list'>,
            {'$14build_slice.6': [(<numba.core.ir.Assign object at 0x7c89e8908370>,
                                   0)],
             '$14build_slice.7': [(<numba.core.ir.Assign object at 0x7c89ebc79de0>,
                                   0)],
             '$20return_value.9': [(<numba.core.ir.Assign object at 0x7c89e8b23760>,
                                    0)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x7c89e8b23af0>,
                                  0)],
             '$6call_function.2': [(<numba.core.ir.Assign object at 0x7c89e8b23df0>,
                                    0)],
             '$const10.4': [(<numba.core.ir.Assign object at 0x7c89e8908070>,
                             0)],
             '$const12.5': [(<numba.core.ir.Assign object at 0x7c89e89081f0>,
                             0)],
             '$const18.8': [(<numba.core.ir.Assign object at 0x7c89e8b238e0>,
                             0)],
             'x': [(<numba.core.ir.Assign object at 0x7c89e8b23280>, 0)],
             'y': [(<numba.core.ir.Assign object at 0x7c89e8b23010>, 0)]})
2025-01-31 15:31:39,008 - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x7c89e8b223e0>
2025-01-31 15:31:39,020 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_FAST(arg=0, lineno=2)
           4	LOAD_ATTR(arg=0, lineno=2)
           6	STORE_FAST(arg=1, lineno=2)
           8	LOAD_GLOBAL(arg=1, lineno=3)
          10	LOAD_ATTR(arg=2, lineno=3)
          12	LOAD_FAST(arg=1, lineno=3)
          14	LOAD_GLOBAL(arg=1, lineno=3)
          16	LOAD_ATTR(arg=3, lineno=3)
          18	LOAD_CONST(arg=1, lineno=3)
          20	CALL_FUNCTION_KW(arg=2, lineno=3)
          22	STORE_FAST(arg=2, lineno=3)
          24	LOAD_CONST(arg=2, lineno=4)
          26	LOAD_FAST(arg=2, lineno=4)
          28	LOAD_CONST(arg=0, lineno=4)
          30	LOAD_CONST(arg=3, lineno=4)
          32	BUILD_SLICE(arg=2, lineno=4)
          34	STORE_SUBSCR(arg=None, lineno=4)
          36	LOAD_CONST(arg=2, lineno=5)
          38	LOAD_FAST(arg=2, lineno=5)
          40	LOAD_CONST(arg=4, lineno=5)
          42	LOAD_CONST(arg=0, lineno=5)
          44	BUILD_SLICE(arg=2, lineno=5)
          46	STORE_SUBSCR(arg=None, lineno=5)
          48	LOAD_GLOBAL(arg=4, lineno=6)
          50	LOAD_GLOBAL(arg=5, lineno=6)
          52	LOAD_CONST(arg=2, lineno=6)
          54	LOAD_CONST(arg=4, lineno=6)
          56	CALL_FUNCTION(arg=2, lineno=6)
          58	UNARY_NEGATIVE(arg=None, lineno=6)
          60	LOAD_FAST(arg=1, lineno=6)
          62	LOAD_CONST(arg=2, lineno=6)
          64	BINARY_SUBSCR(arg=None, lineno=6)
          66	LOAD_GLOBAL(arg=6, lineno=6)
          68	LOAD_CONST(arg=2, lineno=6)
          70	LOAD_CONST(arg=3, lineno=6)
          72	CALL_FUNCTION(arg=2, lineno=6)
          74	BINARY_SUBTRACT(arg=None, lineno=6)
          76	CALL_FUNCTION(arg=2, lineno=6)
          78	GET_ITER(arg=None, lineno=6)
>         80	FOR_ITER(arg=4, lineno=6)
          82	STORE_FAST(arg=3, lineno=6)
          84	LOAD_CONST(arg=2, lineno=7)
          86	STORE_FAST(arg=4, lineno=7)
          88	JUMP_ABSOLUTE(arg=41, lineno=7)
>         90	LOAD_FAST(arg=2, lineno=8)
          92	RETURN_VALUE(arg=None, lineno=8)
2025-01-31 15:31:39,020 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:31:39,021 - DEBUG - stack: []
2025-01-31 15:31:39,021 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:31:39,021 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=1)
2025-01-31 15:31:39,021 - DEBUG - stack []
2025-01-31 15:31:39,021 - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=2)
2025-01-31 15:31:39,021 - DEBUG - stack []
2025-01-31 15:31:39,021 - DEBUG - dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=2)
2025-01-31 15:31:39,021 - DEBUG - stack ['$x2.0']
2025-01-31 15:31:39,021 - DEBUG - dispatch pc=6, inst=STORE_FAST(arg=1, lineno=2)
2025-01-31 15:31:39,021 - DEBUG - stack ['$4load_attr.1']
2025-01-31 15:31:39,021 - DEBUG - dispatch pc=8, inst=LOAD_GLOBAL(arg=1, lineno=3)
2025-01-31 15:31:39,021 - DEBUG - stack []
2025-01-31 15:31:39,021 - DEBUG - dispatch pc=10, inst=LOAD_ATTR(arg=2, lineno=3)
2025-01-31 15:31:39,021 - DEBUG - stack ['$8load_global.2']
2025-01-31 15:31:39,021 - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=3)
2025-01-31 15:31:39,021 - DEBUG - stack ['$10load_attr.3']
2025-01-31 15:31:39,021 - DEBUG - dispatch pc=14, inst=LOAD_GLOBAL(arg=1, lineno=3)
2025-01-31 15:31:39,021 - DEBUG - stack ['$10load_attr.3', '$full_shape012.4']
2025-01-31 15:31:39,021 - DEBUG - dispatch pc=16, inst=LOAD_ATTR(arg=3, lineno=3)
2025-01-31 15:31:39,021 - DEBUG - stack ['$10load_attr.3', '$full_shape012.4', '$14load_global.5']
2025-01-31 15:31:39,021 - DEBUG - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=3)
2025-01-31 15:31:39,021 - DEBUG - stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6']
2025-01-31 15:31:39,021 - DEBUG - dispatch pc=20, inst=CALL_FUNCTION_KW(arg=2, lineno=3)
2025-01-31 15:31:39,021 - DEBUG - stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6', '$const18.7']
2025-01-31 15:31:39,021 - DEBUG - dispatch pc=22, inst=STORE_FAST(arg=2, lineno=3)
2025-01-31 15:31:39,021 - DEBUG - stack ['$20call_function_kw.8']
2025-01-31 15:31:39,021 - DEBUG - dispatch pc=24, inst=LOAD_CONST(arg=2, lineno=4)
2025-01-31 15:31:39,021 - DEBUG - stack []
2025-01-31 15:31:39,022 - DEBUG - dispatch pc=26, inst=LOAD_FAST(arg=2, lineno=4)
2025-01-31 15:31:39,022 - DEBUG - stack ['$const24.9']
2025-01-31 15:31:39,022 - DEBUG - dispatch pc=28, inst=LOAD_CONST(arg=0, lineno=4)
2025-01-31 15:31:39,022 - DEBUG - stack ['$const24.9', '$out026.10']
2025-01-31 15:31:39,022 - DEBUG - dispatch pc=30, inst=LOAD_CONST(arg=3, lineno=4)
2025-01-31 15:31:39,022 - DEBUG - stack ['$const24.9', '$out026.10', '$const28.11']
2025-01-31 15:31:39,022 - DEBUG - dispatch pc=32, inst=BUILD_SLICE(arg=2, lineno=4)
2025-01-31 15:31:39,022 - DEBUG - stack ['$const24.9', '$out026.10', '$const28.11', '$const30.12']
2025-01-31 15:31:39,022 - DEBUG - dispatch pc=34, inst=STORE_SUBSCR(arg=None, lineno=4)
2025-01-31 15:31:39,022 - DEBUG - stack ['$const24.9', '$out026.10', '$32build_slice.14']
2025-01-31 15:31:39,022 - DEBUG - dispatch pc=36, inst=LOAD_CONST(arg=2, lineno=5)
2025-01-31 15:31:39,022 - DEBUG - stack []
2025-01-31 15:31:39,022 - DEBUG - dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=5)
2025-01-31 15:31:39,022 - DEBUG - stack ['$const36.15']
2025-01-31 15:31:39,022 - DEBUG - dispatch pc=40, inst=LOAD_CONST(arg=4, lineno=5)
2025-01-31 15:31:39,022 - DEBUG - stack ['$const36.15', '$out038.16']
2025-01-31 15:31:39,022 - DEBUG - dispatch pc=42, inst=LOAD_CONST(arg=0, lineno=5)
2025-01-31 15:31:39,022 - DEBUG - stack ['$const36.15', '$out038.16', '$const40.17']
2025-01-31 15:31:39,022 - DEBUG - dispatch pc=44, inst=BUILD_SLICE(arg=2, lineno=5)
2025-01-31 15:31:39,022 - DEBUG - stack ['$const36.15', '$out038.16', '$const40.17', '$const42.18']
2025-01-31 15:31:39,022 - DEBUG - dispatch pc=46, inst=STORE_SUBSCR(arg=None, lineno=5)
2025-01-31 15:31:39,022 - DEBUG - stack ['$const36.15', '$out038.16', '$44build_slice.20']
2025-01-31 15:31:39,022 - DEBUG - dispatch pc=48, inst=LOAD_GLOBAL(arg=4, lineno=6)
2025-01-31 15:31:39,022 - DEBUG - stack []
2025-01-31 15:31:39,022 - DEBUG - dispatch pc=50, inst=LOAD_GLOBAL(arg=5, lineno=6)
2025-01-31 15:31:39,022 - DEBUG - stack ['$48load_global.21']
2025-01-31 15:31:39,022 - DEBUG - dispatch pc=52, inst=LOAD_CONST(arg=2, lineno=6)
2025-01-31 15:31:39,022 - DEBUG - stack ['$48load_global.21', '$50load_global.22']
2025-01-31 15:31:39,022 - DEBUG - dispatch pc=54, inst=LOAD_CONST(arg=4, lineno=6)
2025-01-31 15:31:39,022 - DEBUG - stack ['$48load_global.21', '$50load_global.22', '$const52.23']
2025-01-31 15:31:39,023 - DEBUG - dispatch pc=56, inst=CALL_FUNCTION(arg=2, lineno=6)
2025-01-31 15:31:39,023 - DEBUG - stack ['$48load_global.21', '$50load_global.22', '$const52.23', '$const54.24']
2025-01-31 15:31:39,023 - DEBUG - dispatch pc=58, inst=UNARY_NEGATIVE(arg=None, lineno=6)
2025-01-31 15:31:39,023 - DEBUG - stack ['$48load_global.21', '$56call_function.25']
2025-01-31 15:31:39,023 - DEBUG - dispatch pc=60, inst=LOAD_FAST(arg=1, lineno=6)
2025-01-31 15:31:39,023 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26']
2025-01-31 15:31:39,023 - DEBUG - dispatch pc=62, inst=LOAD_CONST(arg=2, lineno=6)
2025-01-31 15:31:39,023 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27']
2025-01-31 15:31:39,023 - DEBUG - dispatch pc=64, inst=BINARY_SUBSCR(arg=None, lineno=6)
2025-01-31 15:31:39,023 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27', '$const62.28']
2025-01-31 15:31:39,023 - DEBUG - dispatch pc=66, inst=LOAD_GLOBAL(arg=6, lineno=6)
2025-01-31 15:31:39,023 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29']
2025-01-31 15:31:39,023 - DEBUG - dispatch pc=68, inst=LOAD_CONST(arg=2, lineno=6)
2025-01-31 15:31:39,023 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30']
2025-01-31 15:31:39,023 - DEBUG - dispatch pc=70, inst=LOAD_CONST(arg=3, lineno=6)
2025-01-31 15:31:39,023 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31']
2025-01-31 15:31:39,023 - DEBUG - dispatch pc=72, inst=CALL_FUNCTION(arg=2, lineno=6)
2025-01-31 15:31:39,023 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31', '$const70.32']
2025-01-31 15:31:39,023 - DEBUG - dispatch pc=74, inst=BINARY_SUBTRACT(arg=None, lineno=6)
2025-01-31 15:31:39,023 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$72call_function.33']
2025-01-31 15:31:39,023 - DEBUG - dispatch pc=76, inst=CALL_FUNCTION(arg=2, lineno=6)
2025-01-31 15:31:39,023 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34']
2025-01-31 15:31:39,023 - DEBUG - dispatch pc=78, inst=GET_ITER(arg=None, lineno=6)
2025-01-31 15:31:39,023 - DEBUG - stack ['$76call_function.35']
2025-01-31 15:31:39,023 - DEBUG - end state. edges=[Edge(pc=80, stack=('$78get_iter.36',), blockstack=(), npush=0)]
2025-01-31 15:31:39,023 - DEBUG - pending: deque([State(pc_initial=80 nstack_initial=1)])
2025-01-31 15:31:39,023 - DEBUG - stack: ['$phi80.0']
2025-01-31 15:31:39,024 - DEBUG - state.pc_initial: State(pc_initial=80 nstack_initial=1)
2025-01-31 15:31:39,024 - DEBUG - dispatch pc=80, inst=FOR_ITER(arg=4, lineno=6)
2025-01-31 15:31:39,024 - DEBUG - stack ['$phi80.0']
2025-01-31 15:31:39,024 - DEBUG - end state. edges=[Edge(pc=90, stack=(), blockstack=(), npush=0), Edge(pc=82, stack=('$phi80.0', '$80for_iter.2'), blockstack=(), npush=0)]
2025-01-31 15:31:39,024 - DEBUG - pending: deque([State(pc_initial=90 nstack_initial=0), State(pc_initial=82 nstack_initial=2)])
2025-01-31 15:31:39,024 - DEBUG - stack: []
2025-01-31 15:31:39,024 - DEBUG - state.pc_initial: State(pc_initial=90 nstack_initial=0)
2025-01-31 15:31:39,024 - DEBUG - dispatch pc=90, inst=LOAD_FAST(arg=2, lineno=8)
2025-01-31 15:31:39,024 - DEBUG - stack []
2025-01-31 15:31:39,024 - DEBUG - dispatch pc=92, inst=RETURN_VALUE(arg=None, lineno=8)
2025-01-31 15:31:39,024 - DEBUG - stack ['$out090.0']
2025-01-31 15:31:39,024 - DEBUG - end state. edges=[]
2025-01-31 15:31:39,024 - DEBUG - pending: deque([State(pc_initial=82 nstack_initial=2)])
2025-01-31 15:31:39,024 - DEBUG - stack: ['$phi82.0', '$phi82.1']
2025-01-31 15:31:39,024 - DEBUG - state.pc_initial: State(pc_initial=82 nstack_initial=2)
2025-01-31 15:31:39,024 - DEBUG - dispatch pc=82, inst=STORE_FAST(arg=3, lineno=6)
2025-01-31 15:31:39,024 - DEBUG - stack ['$phi82.0', '$phi82.1']
2025-01-31 15:31:39,024 - DEBUG - dispatch pc=84, inst=LOAD_CONST(arg=2, lineno=7)
2025-01-31 15:31:39,024 - DEBUG - stack ['$phi82.0']
2025-01-31 15:31:39,024 - DEBUG - dispatch pc=86, inst=STORE_FAST(arg=4, lineno=7)
2025-01-31 15:31:39,024 - DEBUG - stack ['$phi82.0', '$const84.2']
2025-01-31 15:31:39,024 - DEBUG - dispatch pc=88, inst=JUMP_ABSOLUTE(arg=41, lineno=7)
2025-01-31 15:31:39,024 - DEBUG - stack ['$phi82.0']
2025-01-31 15:31:39,024 - DEBUG - end state. edges=[Edge(pc=80, stack=('$phi82.0',), blockstack=(), npush=0)]
2025-01-31 15:31:39,024 - DEBUG - pending: deque([State(pc_initial=80 nstack_initial=1)])
2025-01-31 15:31:39,024 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:31:39,024 - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=80 nstack_initial=1): {'$phi80.0'},
             State(pc_initial=82 nstack_initial=2): {'$phi82.1'},
             State(pc_initial=90 nstack_initial=0): set()})
2025-01-31 15:31:39,025 - DEBUG - defmap: {'$phi80.0': State(pc_initial=0 nstack_initial=0),
 '$phi82.1': State(pc_initial=80 nstack_initial=1)}
2025-01-31 15:31:39,025 - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi82.0', State(pc_initial=82 nstack_initial=2))},
             '$phi82.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-01-31 15:31:39,025 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-01-31 15:31:39,025 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-01-31 15:31:39,025 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-01-31 15:31:39,025 - DEBUG - keep phismap: {'$phi80.0': {('$78get_iter.36', State(pc_initial=0 nstack_initial=0))},
 '$phi82.1': {('$80for_iter.2', State(pc_initial=80 nstack_initial=1))}}
2025-01-31 15:31:39,025 - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi80.0': '$78get_iter.36'},
             State(pc_initial=80 nstack_initial=1): {'$phi82.1': '$80for_iter.2'}})
2025-01-31 15:31:39,026 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:31:39,026 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'item': '$x2.0', 'res': '$4load_attr.1'}), (6, {'value': '$4load_attr.1'}), (8, {'res': '$8load_global.2'}), (10, {'item': '$8load_global.2', 'res': '$10load_attr.3'}), (12, {'res': '$full_shape012.4'}), (14, {'res': '$14load_global.5'}), (16, {'item': '$14load_global.5', 'res': '$16load_attr.6'}), (18, {'res': '$const18.7'}), (20, {'func': '$10load_attr.3', 'args': ['$full_shape012.4', '$16load_attr.6'], 'names': '$const18.7', 'res': '$20call_function_kw.8'}), (22, {'value': '$20call_function_kw.8'}), (24, {'res': '$const24.9'}), (26, {'res': '$out026.10'}), (28, {'res': '$const28.11'}), (30, {'res': '$const30.12'}), (32, {'start': '$const28.11', 'stop': '$const30.12', 'step': None, 'res': '$32build_slice.14', 'slicevar': '$32build_slice.13'}), (34, {'target': '$out026.10', 'index': '$32build_slice.14', 'value': '$const24.9'}), (36, {'res': '$const36.15'}), (38, {'res': '$out038.16'}), (40, {'res': '$const40.17'}), (42, {'res': '$const42.18'}), (44, {'start': '$const40.17', 'stop': '$const42.18', 'step': None, 'res': '$44build_slice.20', 'slicevar': '$44build_slice.19'}), (46, {'target': '$out038.16', 'index': '$44build_slice.20', 'value': '$const36.15'}), (48, {'res': '$48load_global.21'}), (50, {'res': '$50load_global.22'}), (52, {'res': '$const52.23'}), (54, {'res': '$const54.24'}), (56, {'func': '$50load_global.22', 'args': ['$const52.23', '$const54.24'], 'res': '$56call_function.25'}), (58, {'value': '$56call_function.25', 'res': '$58unary_negative.26'}), (60, {'res': '$full_shape060.27'}), (62, {'res': '$const62.28'}), (64, {'index': '$const62.28', 'target': '$full_shape060.27', 'res': '$64binary_subscr.29'}), (66, {'res': '$66load_global.30'}), (68, {'res': '$const68.31'}), (70, {'res': '$const70.32'}), (72, {'func': '$66load_global.30', 'args': ['$const68.31', '$const70.32'], 'res': '$72call_function.33'}), (74, {'lhs': '$64binary_subscr.29', 'rhs': '$72call_function.33', 'res': '$74binary_subtract.34'}), (76, {'func': '$48load_global.21', 'args': ['$58unary_negative.26', '$74binary_subtract.34'], 'res': '$76call_function.35'}), (78, {'value': '$76call_function.35', 'res': '$78get_iter.36'})), outgoing_phis={'$phi80.0': '$78get_iter.36'}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$78get_iter.36',)})
2025-01-31 15:31:39,026 - DEBUG - block_infos State(pc_initial=80 nstack_initial=1):
AdaptBlockInfo(insts=((80, {'iterator': '$phi80.0', 'pair': '$80for_iter.1', 'indval': '$80for_iter.2', 'pred': '$80for_iter.3'}),), outgoing_phis={'$phi82.1': '$80for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: (), 82: ('$phi80.0', '$80for_iter.2')})
2025-01-31 15:31:39,026 - DEBUG - block_infos State(pc_initial=82 nstack_initial=2):
AdaptBlockInfo(insts=((82, {'value': '$phi82.1'}), (84, {'res': '$const84.2'}), (86, {'value': '$const84.2'}), (88, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$phi82.0',)})
2025-01-31 15:31:39,026 - DEBUG - block_infos State(pc_initial=90 nstack_initial=0):
AdaptBlockInfo(insts=((90, {'res': '$out090.0'}), (92, {'retval': '$out090.0', 'castval': '$92return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:39,027 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    full_shape0 = getattr(value=x, attr=shape) ['full_shape0', 'x']
    $8load_global.2 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>) ['$8load_global.2']
    $10load_attr.3 = getattr(value=$8load_global.2, attr=empty) ['$10load_attr.3', '$8load_global.2']
    $14load_global.5 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>) ['$14load_global.5']
    $16load_attr.6 = getattr(value=$14load_global.5, attr=bool_) ['$14load_global.5', '$16load_attr.6']
    out0 = call $10load_attr.3(full_shape0, func=$10load_attr.3, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6, <string>:3))], vararg=None, varkwarg=None, target=None) ['$10load_attr.3', '$16load_attr.6', 'full_shape0', 'out0']
    $const24.9 = const(int, 0)               ['$const24.9']
    $const28.11 = const(NoneType, None)      ['$const28.11']
    $const30.12 = const(int, 1)              ['$const30.12']
    $32build_slice.13 = global(slice: <class 'slice'>) ['$32build_slice.13']
    $32build_slice.14 = call $32build_slice.13($const28.11, $const30.12, func=$32build_slice.13, args=(Var($const28.11, <string>:4), Var($const30.12, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None) ['$32build_slice.13', '$32build_slice.14', '$const28.11', '$const30.12']
    out0[$32build_slice.14] = $const24.9     ['$32build_slice.14', '$const24.9', 'out0']
    $const36.15 = const(int, 0)              ['$const36.15']
    $const40.17 = const(int, -1)             ['$const40.17']
    $const42.18 = const(NoneType, None)      ['$const42.18']
    $44build_slice.19 = global(slice: <class 'slice'>) ['$44build_slice.19']
    $44build_slice.20 = call $44build_slice.19($const40.17, $const42.18, func=$44build_slice.19, args=(Var($const40.17, <string>:5), Var($const42.18, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None) ['$44build_slice.19', '$44build_slice.20', '$const40.17', '$const42.18']
    out0[$44build_slice.20] = $const36.15    ['$44build_slice.20', '$const36.15', 'out0']
    $48load_global.21 = global(range: <class 'range'>) ['$48load_global.21']
    $50load_global.22 = global(min: <built-in function min>) ['$50load_global.22']
    $const52.23 = const(int, 0)              ['$const52.23']
    $const54.24 = const(int, -1)             ['$const54.24']
    $56call_function.25 = call $50load_global.22($const52.23, $const54.24, func=$50load_global.22, args=[Var($const52.23, <string>:6), Var($const54.24, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$50load_global.22', '$56call_function.25', '$const52.23', '$const54.24']
    $58unary_negative.26 = unary(fn=<built-in function neg>, value=$56call_function.25) ['$56call_function.25', '$58unary_negative.26']
    $const62.28 = const(int, 0)              ['$const62.28']
    $64binary_subscr.29 = getitem(value=full_shape0, index=$const62.28, fn=<built-in function getitem>) ['$64binary_subscr.29', '$const62.28', 'full_shape0']
    $66load_global.30 = global(max: <built-in function max>) ['$66load_global.30']
    $const68.31 = const(int, 0)              ['$const68.31']
    $const70.32 = const(int, 1)              ['$const70.32']
    $72call_function.33 = call $66load_global.30($const68.31, $const70.32, func=$66load_global.30, args=[Var($const68.31, <string>:6), Var($const70.32, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$66load_global.30', '$72call_function.33', '$const68.31', '$const70.32']
    $74binary_subtract.34 = $64binary_subscr.29 - $72call_function.33 ['$64binary_subscr.29', '$72call_function.33', '$74binary_subtract.34']
    $76call_function.35 = call $48load_global.21($58unary_negative.26, $74binary_subtract.34, func=$48load_global.21, args=[Var($58unary_negative.26, <string>:6), Var($74binary_subtract.34, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34', '$76call_function.35']
    $78get_iter.36 = getiter(value=$76call_function.35) ['$76call_function.35', '$78get_iter.36']
    $phi80.0 = $78get_iter.36                ['$78get_iter.36', '$phi80.0']
    jump 80                                  []
label 80:
    $80for_iter.1 = iternext(value=$phi80.0) ['$80for_iter.1', '$phi80.0']
    $80for_iter.2 = pair_first(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.2']
    $80for_iter.3 = pair_second(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.3']
    $phi82.1 = $80for_iter.2                 ['$80for_iter.2', '$phi82.1']
    branch $80for_iter.3, 82, 90             ['$80for_iter.3']
label 82:
    index00 = $phi82.1                       ['$phi82.1', 'index00']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 80                                  []
label 90:
    $92return_value.1 = cast(value=out0)     ['$92return_value.1', 'out0']
    return $92return_value.1                 ['$92return_value.1']

2025-01-31 15:31:39,034 - DEBUG - ==== SSA block analysis pass on 0
2025-01-31 15:31:39,034 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e890d6c0>
2025-01-31 15:31:39,034 - DEBUG - on stmt: x = arg(0, name=x)
2025-01-31 15:31:39,035 - DEBUG - on stmt: full_shape0 = getattr(value=x, attr=shape)
2025-01-31 15:31:39,035 - DEBUG - on stmt: $8load_global.2.1 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:39,035 - DEBUG - on stmt: $10load_attr.3.1 = getattr(value=$8load_global.2.1, attr=empty)
2025-01-31 15:31:39,035 - DEBUG - on stmt: $14load_global.5.1 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:39,035 - DEBUG - on stmt: $16load_attr.6.1 = getattr(value=$14load_global.5.1, attr=bool_)
2025-01-31 15:31:39,035 - DEBUG - on stmt: out0 = call $10load_attr.3.1(full_shape0, func=$10load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:39,035 - DEBUG - on stmt: $const24.9.1 = const(int, 0)
2025-01-31 15:31:39,035 - DEBUG - on stmt: $const28.11.1 = const(NoneType, None)
2025-01-31 15:31:39,035 - DEBUG - on stmt: $const30.12.1 = const(int, 1)
2025-01-31 15:31:39,035 - DEBUG - on stmt: $32build_slice.13.1 = global(slice: <class 'slice'>)
2025-01-31 15:31:39,035 - DEBUG - on stmt: $32build_slice.14.1 = call $32build_slice.13.1($const28.11.1, $const30.12.1, func=$32build_slice.13.1, args=(Var($const28.11.1, <string>:4), Var($const30.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:39,035 - DEBUG - on stmt: out0[$32build_slice.14.1] = $const24.9.1
2025-01-31 15:31:39,035 - DEBUG - on stmt: $const36.15.1 = const(int, 0)
2025-01-31 15:31:39,035 - DEBUG - on stmt: $const40.17.1 = const(int, -1)
2025-01-31 15:31:39,035 - DEBUG - on stmt: $const42.18.1 = const(NoneType, None)
2025-01-31 15:31:39,035 - DEBUG - on stmt: $44build_slice.19.1 = global(slice: <class 'slice'>)
2025-01-31 15:31:39,035 - DEBUG - on stmt: $44build_slice.20.1 = call $44build_slice.19.1($const40.17.1, $const42.18.1, func=$44build_slice.19.1, args=(Var($const40.17.1, <string>:5), Var($const42.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:39,035 - DEBUG - on stmt: out0[$44build_slice.20.1] = $const36.15.1
2025-01-31 15:31:39,035 - DEBUG - on stmt: $48load_global.21.1 = global(range: <class 'range'>)
2025-01-31 15:31:39,035 - DEBUG - on stmt: $50load_global.22.1 = global(min: <built-in function min>)
2025-01-31 15:31:39,035 - DEBUG - on stmt: $const52.23.1 = const(int, 0)
2025-01-31 15:31:39,035 - DEBUG - on stmt: $const54.24.1 = const(int, -1)
2025-01-31 15:31:39,035 - DEBUG - on stmt: $56call_function.25.1 = call $50load_global.22.1($const52.23.1, $const54.24.1, func=$50load_global.22.1, args=[Var($const52.23.1, <string>:6), Var($const54.24.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:39,036 - DEBUG - on stmt: $58unary_negative.26.1 = unary(fn=<built-in function neg>, value=$56call_function.25.1)
2025-01-31 15:31:39,036 - DEBUG - on stmt: $const62.28.1 = const(int, 0)
2025-01-31 15:31:39,036 - DEBUG - on stmt: $64binary_subscr.29.1 = getitem(value=full_shape0, index=$const62.28.1, fn=<built-in function getitem>)
2025-01-31 15:31:39,036 - DEBUG - on stmt: $66load_global.30.1 = global(max: <built-in function max>)
2025-01-31 15:31:39,036 - DEBUG - on stmt: $const68.31.1 = const(int, 0)
2025-01-31 15:31:39,036 - DEBUG - on stmt: $const70.32.1 = const(int, 1)
2025-01-31 15:31:39,036 - DEBUG - on stmt: $72call_function.33.1 = call $66load_global.30.1($const68.31.1, $const70.32.1, func=$66load_global.30.1, args=[Var($const68.31.1, <string>:6), Var($const70.32.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:39,036 - DEBUG - on stmt: $74binary_subtract.34.1 = $64binary_subscr.29.1 - $72call_function.33.1
2025-01-31 15:31:39,036 - DEBUG - on stmt: $76call_function.35.1 = call $48load_global.21.1($58unary_negative.26.1, $74binary_subtract.34.1, func=$48load_global.21.1, args=[Var($58unary_negative.26.1, <string>:6), Var($74binary_subtract.34.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:39,036 - DEBUG - on stmt: $78get_iter.36.1 = getiter(value=$76call_function.35.1)
2025-01-31 15:31:39,036 - DEBUG - on stmt: $phi80.0.1 = $78get_iter.36.1
2025-01-31 15:31:39,036 - DEBUG - on stmt: jump 80
2025-01-31 15:31:39,036 - DEBUG - ==== SSA block analysis pass on 80
2025-01-31 15:31:39,036 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e890d6c0>
2025-01-31 15:31:39,036 - DEBUG - on stmt: $80for_iter.1.1 = iternext(value=$phi80.0.1)
2025-01-31 15:31:39,036 - DEBUG - on stmt: $80for_iter.2.1 = pair_first(value=$80for_iter.1.1)
2025-01-31 15:31:39,036 - DEBUG - on stmt: $80for_iter.3.1 = pair_second(value=$80for_iter.1.1)
2025-01-31 15:31:39,036 - DEBUG - on stmt: $phi82.1.1 = $80for_iter.2.1
2025-01-31 15:31:39,036 - DEBUG - on stmt: branch $80for_iter.3.1, 82, 92
2025-01-31 15:31:39,036 - DEBUG - ==== SSA block analysis pass on 82
2025-01-31 15:31:39,036 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e890d6c0>
2025-01-31 15:31:39,036 - DEBUG - on stmt: index00 = $phi82.1.1
2025-01-31 15:31:39,036 - DEBUG - on stmt: jump 90
2025-01-31 15:31:39,036 - DEBUG - ==== SSA block analysis pass on 92
2025-01-31 15:31:39,036 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e890d6c0>
2025-01-31 15:31:39,036 - DEBUG - on stmt: $92return_value.1.1 = cast(value=out0)
2025-01-31 15:31:39,036 - DEBUG - on stmt: return $92return_value.1.1
2025-01-31 15:31:39,037 - DEBUG - ==== SSA block analysis pass on 90
2025-01-31 15:31:39,037 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e890d6c0>
2025-01-31 15:31:39,037 - DEBUG - on stmt: $const4.1 = const(int, 0)
2025-01-31 15:31:39,037 - DEBUG - on stmt: stencil_index = $const4.1 + index00
2025-01-31 15:31:39,037 - DEBUG - on stmt: $6binary_subscr.2 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-01-31 15:31:39,037 - DEBUG - on stmt: $const10.4 = const(int, -1)
2025-01-31 15:31:39,037 - DEBUG - on stmt: stencil_index.1 = $const10.4 + index00
2025-01-31 15:31:39,037 - DEBUG - on stmt: $12binary_subscr.5 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2025-01-31 15:31:39,037 - DEBUG - on stmt: $14compare_op.6 = $6binary_subscr.2 < $12binary_subscr.5
2025-01-31 15:31:39,037 - DEBUG - on stmt: $const18.8 = const(int, 0)
2025-01-31 15:31:39,037 - DEBUG - on stmt: stencil_index.2 = $const18.8 + index00
2025-01-31 15:31:39,037 - DEBUG - on stmt: $20binary_subscr.9 = getitem(value=x, index=stencil_index.2, fn=<built-in function getitem>)
2025-01-31 15:31:39,037 - DEBUG - on stmt: $const24.11 = const(int, 1)
2025-01-31 15:31:39,037 - DEBUG - on stmt: stencil_index.3 = $const24.11 + index00
2025-01-31 15:31:39,037 - DEBUG - on stmt: $26binary_subscr.12 = getitem(value=x, index=stencil_index.3, fn=<built-in function getitem>)
2025-01-31 15:31:39,037 - DEBUG - on stmt: $28compare_op.13 = $20binary_subscr.9 <= $26binary_subscr.12
2025-01-31 15:31:39,037 - DEBUG - on stmt: $30binary_and.14 = $14compare_op.6 & $28compare_op.13
2025-01-31 15:31:39,037 - DEBUG - on stmt: $32return_value.15 = cast(value=$30binary_and.14)
2025-01-31 15:31:39,037 - DEBUG - on stmt: out0[index00] = $32return_value.15
2025-01-31 15:31:39,037 - DEBUG - on stmt: jump 91
2025-01-31 15:31:39,037 - DEBUG - ==== SSA block analysis pass on 91
2025-01-31 15:31:39,037 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e890d6c0>
2025-01-31 15:31:39,037 - DEBUG - on stmt: jump 80
2025-01-31 15:31:39,038 - DEBUG - defs defaultdict(<class 'list'>,
            {'$10load_attr.3.1': [(<numba.core.ir.Assign object at 0x7c89e8909690>,
                                   0)],
             '$12binary_subscr.5': [(<numba.core.ir.Assign object at 0x7c89e8aefc40>,
                                     90)],
             '$14compare_op.6': [(<numba.core.ir.Assign object at 0x7c89e8b4a7a0>,
                                  90)],
             '$14load_global.5.1': [(<numba.core.ir.Assign object at 0x7c89e89093f0>,
                                     0)],
             '$16load_attr.6.1': [(<numba.core.ir.Assign object at 0x7c89e8909120>,
                                   0)],
             '$20binary_subscr.9': [(<numba.core.ir.Assign object at 0x7c89e8d58970>,
                                     90)],
             '$26binary_subscr.12': [(<numba.core.ir.Assign object at 0x7c89e89085e0>,
                                      90)],
             '$28compare_op.13': [(<numba.core.ir.Assign object at 0x7c89e8bb5900>,
                                   90)],
             '$30binary_and.14': [(<numba.core.ir.Assign object at 0x7c89e8bb76d0>,
                                   90)],
             '$32build_slice.13.1': [(<numba.core.ir.Assign object at 0x7c89e890a320>,
                                      0)],
             '$32build_slice.14.1': [(<numba.core.ir.Assign object at 0x7c89e890a440>,
                                      0)],
             '$32return_value.15': [(<numba.core.ir.Assign object at 0x7c89e8dc2470>,
                                     90)],
             '$44build_slice.19.1': [(<numba.core.ir.Assign object at 0x7c89e890ac20>,
                                      0)],
             '$44build_slice.20.1': [(<numba.core.ir.Assign object at 0x7c89e890ad40>,
                                      0)],
             '$48load_global.21.1': [(<numba.core.ir.Assign object at 0x7c89e890af80>,
                                      0)],
             '$50load_global.22.1': [(<numba.core.ir.Assign object at 0x7c89e890b100>,
                                      0)],
             '$56call_function.25.1': [(<numba.core.ir.Assign object at 0x7c89e890b5e0>,
                                        0)],
             '$58unary_negative.26.1': [(<numba.core.ir.Assign object at 0x7c89e890b700>,
                                         0)],
             '$64binary_subscr.29.1': [(<numba.core.ir.Assign object at 0x7c89e890bb50>,
                                        0)],
             '$66load_global.30.1': [(<numba.core.ir.Assign object at 0x7c89e890bca0>,
                                      0)],
             '$6binary_subscr.2': [(<numba.core.ir.Assign object at 0x7c89e8dc15a0>,
                                    90)],
             '$72call_function.33.1': [(<numba.core.ir.Assign object at 0x7c89e89001c0>,
                                        0)],
             '$74binary_subtract.34.1': [(<numba.core.ir.Assign object at 0x7c89e8900310>,
                                          0)],
             '$76call_function.35.1': [(<numba.core.ir.Assign object at 0x7c89e89004c0>,
                                        0)],
             '$78get_iter.36.1': [(<numba.core.ir.Assign object at 0x7c89e89005e0>,
                                   0)],
             '$80for_iter.1.1': [(<numba.core.ir.Assign object at 0x7c89e89006d0>,
                                  80)],
             '$80for_iter.2.1': [(<numba.core.ir.Assign object at 0x7c89e89007f0>,
                                  80)],
             '$80for_iter.3.1': [(<numba.core.ir.Assign object at 0x7c89e8900910>,
                                  80)],
             '$8load_global.2.1': [(<numba.core.ir.Assign object at 0x7c89e8909810>,
                                    0)],
             '$92return_value.1.1': [(<numba.core.ir.Assign object at 0x7c89e8901240>,
                                      92)],
             '$const10.4': [(<numba.core.ir.Assign object at 0x7c89e8b49d50>,
                             90)],
             '$const18.8': [(<numba.core.ir.Assign object at 0x7c89e8bf3160>,
                             90)],
             '$const24.11': [(<numba.core.ir.Assign object at 0x7c89e8bb56f0>,
                              90)],
             '$const24.9.1': [(<numba.core.ir.Assign object at 0x7c89e89089d0>,
                               0)],
             '$const28.11.1': [(<numba.core.ir.Assign object at 0x7c89e89086a0>,
                                0)],
             '$const30.12.1': [(<numba.core.ir.Assign object at 0x7c89e890a1a0>,
                                0)],
             '$const36.15.1': [(<numba.core.ir.Assign object at 0x7c89e890a680>,
                                0)],
             '$const4.1': [(<numba.core.ir.Assign object at 0x7c89e8b22740>,
                            90)],
             '$const40.17.1': [(<numba.core.ir.Assign object at 0x7c89e890a920>,
                                0)],
             '$const42.18.1': [(<numba.core.ir.Assign object at 0x7c89e890aaa0>,
                                0)],
             '$const52.23.1': [(<numba.core.ir.Assign object at 0x7c89e890b280>,
                                0)],
             '$const54.24.1': [(<numba.core.ir.Assign object at 0x7c89e890b400>,
                                0)],
             '$const62.28.1': [(<numba.core.ir.Assign object at 0x7c89e890b9a0>,
                                0)],
             '$const68.31.1': [(<numba.core.ir.Assign object at 0x7c89e890be20>,
                                0)],
             '$const70.32.1': [(<numba.core.ir.Assign object at 0x7c89e890bfa0>,
                                0)],
             '$phi80.0.1': [(<numba.core.ir.Assign object at 0x7c89e8909ba0>,
                             0)],
             '$phi82.1.1': [(<numba.core.ir.Assign object at 0x7c89e890b8b0>,
                             80)],
             'full_shape0': [(<numba.core.ir.Assign object at 0x7c89e8909ab0>,
                              0)],
             'index00': [(<numba.core.ir.Assign object at 0x7c89e8900be0>, 82)],
             'out0': [(<numba.core.ir.Assign object at 0x7c89e8908ca0>, 0)],
             'stencil_index': [(<numba.core.ir.Assign object at 0x7c89e8dc34f0>,
                                90)],
             'stencil_index.1': [(<numba.core.ir.Assign object at 0x7c89e8aefdc0>,
                                  90)],
             'stencil_index.2': [(<numba.core.ir.Assign object at 0x7c89e8d59390>,
                                  90)],
             'stencil_index.3': [(<numba.core.ir.Assign object at 0x7c89e8908520>,
                                  90)],
             'x': [(<numba.core.ir.Assign object at 0x7c89e8909d50>, 0)]})
2025-01-31 15:31:39,038 - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x7c89e890d6c0>
2025-01-31 15:31:39,222 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=1068)
           2	LOAD_GLOBAL(arg=0, lineno=1082)
           4	LOAD_FAST(arg=0, lineno=1082)
           6	CALL_FUNCTION(arg=1, lineno=1082)
           8	LOAD_FAST(arg=1, lineno=1082)
          10	LOAD_CONST(arg=1, lineno=1082)
          12	LOAD_CONST(arg=1, lineno=1082)
          14	BUILD_SLICE(arg=2, lineno=1082)
          16	STORE_SUBSCR(arg=None, lineno=1082)
          18	LOAD_CONST(arg=1, lineno=1082)
          20	RETURN_VALUE(arg=None, lineno=1082)
2025-01-31 15:31:39,222 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:31:39,222 - DEBUG - stack: []
2025-01-31 15:31:39,222 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:31:39,222 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=1068)
2025-01-31 15:31:39,222 - DEBUG - stack []
2025-01-31 15:31:39,222 - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=1082)
2025-01-31 15:31:39,222 - DEBUG - stack []
2025-01-31 15:31:39,222 - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=1082)
2025-01-31 15:31:39,222 - DEBUG - stack ['$2load_global.0']
2025-01-31 15:31:39,222 - DEBUG - dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=1082)
2025-01-31 15:31:39,222 - DEBUG - stack ['$2load_global.0', '$x4.1']
2025-01-31 15:31:39,222 - DEBUG - dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=1082)
2025-01-31 15:31:39,222 - DEBUG - stack ['$6call_function.2']
2025-01-31 15:31:39,223 - DEBUG - dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=1082)
2025-01-31 15:31:39,223 - DEBUG - stack ['$6call_function.2', '$y8.3']
2025-01-31 15:31:39,223 - DEBUG - dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=1082)
2025-01-31 15:31:39,223 - DEBUG - stack ['$6call_function.2', '$y8.3', '$const10.4']
2025-01-31 15:31:39,223 - DEBUG - dispatch pc=14, inst=BUILD_SLICE(arg=2, lineno=1082)
2025-01-31 15:31:39,223 - DEBUG - stack ['$6call_function.2', '$y8.3', '$const10.4', '$const12.5']
2025-01-31 15:31:39,223 - DEBUG - dispatch pc=16, inst=STORE_SUBSCR(arg=None, lineno=1082)
2025-01-31 15:31:39,223 - DEBUG - stack ['$6call_function.2', '$y8.3', '$14build_slice.7']
2025-01-31 15:31:39,223 - DEBUG - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1082)
2025-01-31 15:31:39,223 - DEBUG - stack []
2025-01-31 15:31:39,223 - DEBUG - dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=1082)
2025-01-31 15:31:39,223 - DEBUG - stack ['$const18.8']
2025-01-31 15:31:39,223 - DEBUG - end state. edges=[]
2025-01-31 15:31:39,223 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:31:39,223 - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-01-31 15:31:39,223 - DEBUG - defmap: {}
2025-01-31 15:31:39,223 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:39,223 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:39,223 - DEBUG - keep phismap: {}
2025-01-31 15:31:39,223 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-01-31 15:31:39,223 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:31:39,223 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$x4.1'}), (6, {'func': '$2load_global.0', 'args': ['$x4.1'], 'res': '$6call_function.2'}), (8, {'res': '$y8.3'}), (10, {'res': '$const10.4'}), (12, {'res': '$const12.5'}), (14, {'start': '$const10.4', 'stop': '$const12.5', 'step': None, 'res': '$14build_slice.7', 'slicevar': '$14build_slice.6'}), (16, {'target': '$y8.3', 'index': '$14build_slice.7', 'value': '$6call_function.2'}), (18, {'res': '$const18.8'}), (20, {'retval': '$const18.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:39,224 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    y = arg(1, name=y)                       ['y']
    $2load_global.0 = global(_localmin_sten: <numba.stencils.stencil.StencilFunc object at 0x7c89eba2d810>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, utils.py:1068)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$6call_function.2', 'x']
    $const10.4 = const(NoneType, None)       ['$const10.4']
    $const12.5 = const(NoneType, None)       ['$const12.5']
    $14build_slice.6 = global(slice: <class 'slice'>) ['$14build_slice.6']
    $14build_slice.7 = call $14build_slice.6($const10.4, $const12.5, func=$14build_slice.6, args=(Var($const10.4, utils.py:1082), Var($const12.5, utils.py:1082)), kws=(), vararg=None, varkwarg=None, target=None) ['$14build_slice.6', '$14build_slice.7', '$const10.4', '$const12.5']
    y[$14build_slice.7] = $6call_function.2  ['$14build_slice.7', '$6call_function.2', 'y']
    $const18.8 = const(NoneType, None)       ['$const18.8']
    $20return_value.9 = cast(value=$const18.8) ['$20return_value.9', '$const18.8']
    return $20return_value.9                 ['$20return_value.9']

2025-01-31 15:31:39,227 - DEBUG - ==== SSA block analysis pass on 0
2025-01-31 15:31:39,227 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8896bc0>
2025-01-31 15:31:39,227 - DEBUG - on stmt: x = arg(0, name=x)
2025-01-31 15:31:39,227 - DEBUG - on stmt: y = arg(1, name=y)
2025-01-31 15:31:39,228 - DEBUG - on stmt: $2load_global.0 = global(_localmin_sten: <numba.stencils.stencil.StencilFunc object at 0x7c89eba2d810>)
2025-01-31 15:31:39,228 - DEBUG - on stmt: $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, utils.py:1068)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:39,228 - DEBUG - on stmt: $const10.4 = const(NoneType, None)
2025-01-31 15:31:39,228 - DEBUG - on stmt: $const12.5 = const(NoneType, None)
2025-01-31 15:31:39,228 - DEBUG - on stmt: $14build_slice.6 = global(slice: <class 'slice'>)
2025-01-31 15:31:39,228 - DEBUG - on stmt: $14build_slice.7 = call $14build_slice.6($const10.4, $const12.5, func=$14build_slice.6, args=(Var($const10.4, utils.py:1082), Var($const12.5, utils.py:1082)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:39,228 - DEBUG - on stmt: y[slice(None, None, None)] = $6call_function.2
2025-01-31 15:31:39,228 - DEBUG - on stmt: $const18.8 = const(NoneType, None)
2025-01-31 15:31:39,228 - DEBUG - on stmt: $20return_value.9 = cast(value=$const18.8)
2025-01-31 15:31:39,228 - DEBUG - on stmt: return $20return_value.9
2025-01-31 15:31:39,228 - DEBUG - defs defaultdict(<class 'list'>,
            {'$14build_slice.6': [(<numba.core.ir.Assign object at 0x7c89e88b8be0>,
                                   0)],
             '$14build_slice.7': [(<numba.core.ir.Assign object at 0x7c89e88b8d00>,
                                   0)],
             '$20return_value.9': [(<numba.core.ir.Assign object at 0x7c89e88b90c0>,
                                    0)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x7c89e88b83a0>,
                                  0)],
             '$6call_function.2': [(<numba.core.ir.Assign object at 0x7c89e88b86a0>,
                                    0)],
             '$const10.4': [(<numba.core.ir.Assign object at 0x7c89e88b88e0>,
                             0)],
             '$const12.5': [(<numba.core.ir.Assign object at 0x7c89e88b8a60>,
                             0)],
             '$const18.8': [(<numba.core.ir.Assign object at 0x7c89e88b8f40>,
                             0)],
             'x': [(<numba.core.ir.Assign object at 0x7c89e8b21120>, 0)],
             'y': [(<numba.core.ir.Assign object at 0x7c89e8b213c0>, 0)]})
2025-01-31 15:31:39,228 - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x7c89e8896bc0>
2025-01-31 15:31:39,241 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_FAST(arg=0, lineno=2)
           4	LOAD_ATTR(arg=0, lineno=2)
           6	STORE_FAST(arg=1, lineno=2)
           8	LOAD_GLOBAL(arg=1, lineno=3)
          10	LOAD_ATTR(arg=2, lineno=3)
          12	LOAD_FAST(arg=1, lineno=3)
          14	LOAD_GLOBAL(arg=1, lineno=3)
          16	LOAD_ATTR(arg=3, lineno=3)
          18	LOAD_CONST(arg=1, lineno=3)
          20	CALL_FUNCTION_KW(arg=2, lineno=3)
          22	STORE_FAST(arg=2, lineno=3)
          24	LOAD_CONST(arg=2, lineno=4)
          26	LOAD_FAST(arg=2, lineno=4)
          28	LOAD_CONST(arg=0, lineno=4)
          30	LOAD_CONST(arg=3, lineno=4)
          32	BUILD_SLICE(arg=2, lineno=4)
          34	STORE_SUBSCR(arg=None, lineno=4)
          36	LOAD_CONST(arg=2, lineno=5)
          38	LOAD_FAST(arg=2, lineno=5)
          40	LOAD_CONST(arg=4, lineno=5)
          42	LOAD_CONST(arg=0, lineno=5)
          44	BUILD_SLICE(arg=2, lineno=5)
          46	STORE_SUBSCR(arg=None, lineno=5)
          48	LOAD_GLOBAL(arg=4, lineno=6)
          50	LOAD_GLOBAL(arg=5, lineno=6)
          52	LOAD_CONST(arg=2, lineno=6)
          54	LOAD_CONST(arg=4, lineno=6)
          56	CALL_FUNCTION(arg=2, lineno=6)
          58	UNARY_NEGATIVE(arg=None, lineno=6)
          60	LOAD_FAST(arg=1, lineno=6)
          62	LOAD_CONST(arg=2, lineno=6)
          64	BINARY_SUBSCR(arg=None, lineno=6)
          66	LOAD_GLOBAL(arg=6, lineno=6)
          68	LOAD_CONST(arg=2, lineno=6)
          70	LOAD_CONST(arg=3, lineno=6)
          72	CALL_FUNCTION(arg=2, lineno=6)
          74	BINARY_SUBTRACT(arg=None, lineno=6)
          76	CALL_FUNCTION(arg=2, lineno=6)
          78	GET_ITER(arg=None, lineno=6)
>         80	FOR_ITER(arg=4, lineno=6)
          82	STORE_FAST(arg=3, lineno=6)
          84	LOAD_CONST(arg=2, lineno=7)
          86	STORE_FAST(arg=4, lineno=7)
          88	JUMP_ABSOLUTE(arg=41, lineno=7)
>         90	LOAD_FAST(arg=2, lineno=8)
          92	RETURN_VALUE(arg=None, lineno=8)
2025-01-31 15:31:39,241 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:31:39,241 - DEBUG - stack: []
2025-01-31 15:31:39,241 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:31:39,241 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=1)
2025-01-31 15:31:39,241 - DEBUG - stack []
2025-01-31 15:31:39,242 - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=2)
2025-01-31 15:31:39,242 - DEBUG - stack []
2025-01-31 15:31:39,242 - DEBUG - dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=2)
2025-01-31 15:31:39,242 - DEBUG - stack ['$x2.0']
2025-01-31 15:31:39,242 - DEBUG - dispatch pc=6, inst=STORE_FAST(arg=1, lineno=2)
2025-01-31 15:31:39,242 - DEBUG - stack ['$4load_attr.1']
2025-01-31 15:31:39,242 - DEBUG - dispatch pc=8, inst=LOAD_GLOBAL(arg=1, lineno=3)
2025-01-31 15:31:39,242 - DEBUG - stack []
2025-01-31 15:31:39,242 - DEBUG - dispatch pc=10, inst=LOAD_ATTR(arg=2, lineno=3)
2025-01-31 15:31:39,242 - DEBUG - stack ['$8load_global.2']
2025-01-31 15:31:39,242 - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=3)
2025-01-31 15:31:39,242 - DEBUG - stack ['$10load_attr.3']
2025-01-31 15:31:39,242 - DEBUG - dispatch pc=14, inst=LOAD_GLOBAL(arg=1, lineno=3)
2025-01-31 15:31:39,242 - DEBUG - stack ['$10load_attr.3', '$full_shape012.4']
2025-01-31 15:31:39,242 - DEBUG - dispatch pc=16, inst=LOAD_ATTR(arg=3, lineno=3)
2025-01-31 15:31:39,242 - DEBUG - stack ['$10load_attr.3', '$full_shape012.4', '$14load_global.5']
2025-01-31 15:31:39,242 - DEBUG - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=3)
2025-01-31 15:31:39,242 - DEBUG - stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6']
2025-01-31 15:31:39,242 - DEBUG - dispatch pc=20, inst=CALL_FUNCTION_KW(arg=2, lineno=3)
2025-01-31 15:31:39,242 - DEBUG - stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6', '$const18.7']
2025-01-31 15:31:39,242 - DEBUG - dispatch pc=22, inst=STORE_FAST(arg=2, lineno=3)
2025-01-31 15:31:39,242 - DEBUG - stack ['$20call_function_kw.8']
2025-01-31 15:31:39,242 - DEBUG - dispatch pc=24, inst=LOAD_CONST(arg=2, lineno=4)
2025-01-31 15:31:39,242 - DEBUG - stack []
2025-01-31 15:31:39,242 - DEBUG - dispatch pc=26, inst=LOAD_FAST(arg=2, lineno=4)
2025-01-31 15:31:39,242 - DEBUG - stack ['$const24.9']
2025-01-31 15:31:39,242 - DEBUG - dispatch pc=28, inst=LOAD_CONST(arg=0, lineno=4)
2025-01-31 15:31:39,242 - DEBUG - stack ['$const24.9', '$out026.10']
2025-01-31 15:31:39,243 - DEBUG - dispatch pc=30, inst=LOAD_CONST(arg=3, lineno=4)
2025-01-31 15:31:39,243 - DEBUG - stack ['$const24.9', '$out026.10', '$const28.11']
2025-01-31 15:31:39,243 - DEBUG - dispatch pc=32, inst=BUILD_SLICE(arg=2, lineno=4)
2025-01-31 15:31:39,243 - DEBUG - stack ['$const24.9', '$out026.10', '$const28.11', '$const30.12']
2025-01-31 15:31:39,243 - DEBUG - dispatch pc=34, inst=STORE_SUBSCR(arg=None, lineno=4)
2025-01-31 15:31:39,243 - DEBUG - stack ['$const24.9', '$out026.10', '$32build_slice.14']
2025-01-31 15:31:39,243 - DEBUG - dispatch pc=36, inst=LOAD_CONST(arg=2, lineno=5)
2025-01-31 15:31:39,243 - DEBUG - stack []
2025-01-31 15:31:39,243 - DEBUG - dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=5)
2025-01-31 15:31:39,243 - DEBUG - stack ['$const36.15']
2025-01-31 15:31:39,243 - DEBUG - dispatch pc=40, inst=LOAD_CONST(arg=4, lineno=5)
2025-01-31 15:31:39,243 - DEBUG - stack ['$const36.15', '$out038.16']
2025-01-31 15:31:39,243 - DEBUG - dispatch pc=42, inst=LOAD_CONST(arg=0, lineno=5)
2025-01-31 15:31:39,243 - DEBUG - stack ['$const36.15', '$out038.16', '$const40.17']
2025-01-31 15:31:39,243 - DEBUG - dispatch pc=44, inst=BUILD_SLICE(arg=2, lineno=5)
2025-01-31 15:31:39,243 - DEBUG - stack ['$const36.15', '$out038.16', '$const40.17', '$const42.18']
2025-01-31 15:31:39,243 - DEBUG - dispatch pc=46, inst=STORE_SUBSCR(arg=None, lineno=5)
2025-01-31 15:31:39,243 - DEBUG - stack ['$const36.15', '$out038.16', '$44build_slice.20']
2025-01-31 15:31:39,243 - DEBUG - dispatch pc=48, inst=LOAD_GLOBAL(arg=4, lineno=6)
2025-01-31 15:31:39,243 - DEBUG - stack []
2025-01-31 15:31:39,243 - DEBUG - dispatch pc=50, inst=LOAD_GLOBAL(arg=5, lineno=6)
2025-01-31 15:31:39,243 - DEBUG - stack ['$48load_global.21']
2025-01-31 15:31:39,243 - DEBUG - dispatch pc=52, inst=LOAD_CONST(arg=2, lineno=6)
2025-01-31 15:31:39,243 - DEBUG - stack ['$48load_global.21', '$50load_global.22']
2025-01-31 15:31:39,243 - DEBUG - dispatch pc=54, inst=LOAD_CONST(arg=4, lineno=6)
2025-01-31 15:31:39,243 - DEBUG - stack ['$48load_global.21', '$50load_global.22', '$const52.23']
2025-01-31 15:31:39,243 - DEBUG - dispatch pc=56, inst=CALL_FUNCTION(arg=2, lineno=6)
2025-01-31 15:31:39,243 - DEBUG - stack ['$48load_global.21', '$50load_global.22', '$const52.23', '$const54.24']
2025-01-31 15:31:39,243 - DEBUG - dispatch pc=58, inst=UNARY_NEGATIVE(arg=None, lineno=6)
2025-01-31 15:31:39,244 - DEBUG - stack ['$48load_global.21', '$56call_function.25']
2025-01-31 15:31:39,244 - DEBUG - dispatch pc=60, inst=LOAD_FAST(arg=1, lineno=6)
2025-01-31 15:31:39,244 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26']
2025-01-31 15:31:39,244 - DEBUG - dispatch pc=62, inst=LOAD_CONST(arg=2, lineno=6)
2025-01-31 15:31:39,244 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27']
2025-01-31 15:31:39,244 - DEBUG - dispatch pc=64, inst=BINARY_SUBSCR(arg=None, lineno=6)
2025-01-31 15:31:39,244 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27', '$const62.28']
2025-01-31 15:31:39,244 - DEBUG - dispatch pc=66, inst=LOAD_GLOBAL(arg=6, lineno=6)
2025-01-31 15:31:39,244 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29']
2025-01-31 15:31:39,244 - DEBUG - dispatch pc=68, inst=LOAD_CONST(arg=2, lineno=6)
2025-01-31 15:31:39,244 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30']
2025-01-31 15:31:39,244 - DEBUG - dispatch pc=70, inst=LOAD_CONST(arg=3, lineno=6)
2025-01-31 15:31:39,244 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31']
2025-01-31 15:31:39,244 - DEBUG - dispatch pc=72, inst=CALL_FUNCTION(arg=2, lineno=6)
2025-01-31 15:31:39,244 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31', '$const70.32']
2025-01-31 15:31:39,244 - DEBUG - dispatch pc=74, inst=BINARY_SUBTRACT(arg=None, lineno=6)
2025-01-31 15:31:39,244 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$72call_function.33']
2025-01-31 15:31:39,244 - DEBUG - dispatch pc=76, inst=CALL_FUNCTION(arg=2, lineno=6)
2025-01-31 15:31:39,244 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34']
2025-01-31 15:31:39,244 - DEBUG - dispatch pc=78, inst=GET_ITER(arg=None, lineno=6)
2025-01-31 15:31:39,244 - DEBUG - stack ['$76call_function.35']
2025-01-31 15:31:39,244 - DEBUG - end state. edges=[Edge(pc=80, stack=('$78get_iter.36',), blockstack=(), npush=0)]
2025-01-31 15:31:39,244 - DEBUG - pending: deque([State(pc_initial=80 nstack_initial=1)])
2025-01-31 15:31:39,244 - DEBUG - stack: ['$phi80.0']
2025-01-31 15:31:39,244 - DEBUG - state.pc_initial: State(pc_initial=80 nstack_initial=1)
2025-01-31 15:31:39,244 - DEBUG - dispatch pc=80, inst=FOR_ITER(arg=4, lineno=6)
2025-01-31 15:31:39,244 - DEBUG - stack ['$phi80.0']
2025-01-31 15:31:39,244 - DEBUG - end state. edges=[Edge(pc=90, stack=(), blockstack=(), npush=0), Edge(pc=82, stack=('$phi80.0', '$80for_iter.2'), blockstack=(), npush=0)]
2025-01-31 15:31:39,245 - DEBUG - pending: deque([State(pc_initial=90 nstack_initial=0), State(pc_initial=82 nstack_initial=2)])
2025-01-31 15:31:39,245 - DEBUG - stack: []
2025-01-31 15:31:39,245 - DEBUG - state.pc_initial: State(pc_initial=90 nstack_initial=0)
2025-01-31 15:31:39,245 - DEBUG - dispatch pc=90, inst=LOAD_FAST(arg=2, lineno=8)
2025-01-31 15:31:39,245 - DEBUG - stack []
2025-01-31 15:31:39,245 - DEBUG - dispatch pc=92, inst=RETURN_VALUE(arg=None, lineno=8)
2025-01-31 15:31:39,245 - DEBUG - stack ['$out090.0']
2025-01-31 15:31:39,245 - DEBUG - end state. edges=[]
2025-01-31 15:31:39,245 - DEBUG - pending: deque([State(pc_initial=82 nstack_initial=2)])
2025-01-31 15:31:39,245 - DEBUG - stack: ['$phi82.0', '$phi82.1']
2025-01-31 15:31:39,245 - DEBUG - state.pc_initial: State(pc_initial=82 nstack_initial=2)
2025-01-31 15:31:39,245 - DEBUG - dispatch pc=82, inst=STORE_FAST(arg=3, lineno=6)
2025-01-31 15:31:39,245 - DEBUG - stack ['$phi82.0', '$phi82.1']
2025-01-31 15:31:39,245 - DEBUG - dispatch pc=84, inst=LOAD_CONST(arg=2, lineno=7)
2025-01-31 15:31:39,245 - DEBUG - stack ['$phi82.0']
2025-01-31 15:31:39,245 - DEBUG - dispatch pc=86, inst=STORE_FAST(arg=4, lineno=7)
2025-01-31 15:31:39,245 - DEBUG - stack ['$phi82.0', '$const84.2']
2025-01-31 15:31:39,245 - DEBUG - dispatch pc=88, inst=JUMP_ABSOLUTE(arg=41, lineno=7)
2025-01-31 15:31:39,245 - DEBUG - stack ['$phi82.0']
2025-01-31 15:31:39,245 - DEBUG - end state. edges=[Edge(pc=80, stack=('$phi82.0',), blockstack=(), npush=0)]
2025-01-31 15:31:39,245 - DEBUG - pending: deque([State(pc_initial=80 nstack_initial=1)])
2025-01-31 15:31:39,245 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:31:39,245 - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=80 nstack_initial=1): {'$phi80.0'},
             State(pc_initial=82 nstack_initial=2): {'$phi82.1'},
             State(pc_initial=90 nstack_initial=0): set()})
2025-01-31 15:31:39,245 - DEBUG - defmap: {'$phi80.0': State(pc_initial=0 nstack_initial=0),
 '$phi82.1': State(pc_initial=80 nstack_initial=1)}
2025-01-31 15:31:39,246 - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi82.0', State(pc_initial=82 nstack_initial=2))},
             '$phi82.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-01-31 15:31:39,246 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-01-31 15:31:39,246 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-01-31 15:31:39,246 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-01-31 15:31:39,246 - DEBUG - keep phismap: {'$phi80.0': {('$78get_iter.36', State(pc_initial=0 nstack_initial=0))},
 '$phi82.1': {('$80for_iter.2', State(pc_initial=80 nstack_initial=1))}}
2025-01-31 15:31:39,246 - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi80.0': '$78get_iter.36'},
             State(pc_initial=80 nstack_initial=1): {'$phi82.1': '$80for_iter.2'}})
2025-01-31 15:31:39,246 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:31:39,247 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'item': '$x2.0', 'res': '$4load_attr.1'}), (6, {'value': '$4load_attr.1'}), (8, {'res': '$8load_global.2'}), (10, {'item': '$8load_global.2', 'res': '$10load_attr.3'}), (12, {'res': '$full_shape012.4'}), (14, {'res': '$14load_global.5'}), (16, {'item': '$14load_global.5', 'res': '$16load_attr.6'}), (18, {'res': '$const18.7'}), (20, {'func': '$10load_attr.3', 'args': ['$full_shape012.4', '$16load_attr.6'], 'names': '$const18.7', 'res': '$20call_function_kw.8'}), (22, {'value': '$20call_function_kw.8'}), (24, {'res': '$const24.9'}), (26, {'res': '$out026.10'}), (28, {'res': '$const28.11'}), (30, {'res': '$const30.12'}), (32, {'start': '$const28.11', 'stop': '$const30.12', 'step': None, 'res': '$32build_slice.14', 'slicevar': '$32build_slice.13'}), (34, {'target': '$out026.10', 'index': '$32build_slice.14', 'value': '$const24.9'}), (36, {'res': '$const36.15'}), (38, {'res': '$out038.16'}), (40, {'res': '$const40.17'}), (42, {'res': '$const42.18'}), (44, {'start': '$const40.17', 'stop': '$const42.18', 'step': None, 'res': '$44build_slice.20', 'slicevar': '$44build_slice.19'}), (46, {'target': '$out038.16', 'index': '$44build_slice.20', 'value': '$const36.15'}), (48, {'res': '$48load_global.21'}), (50, {'res': '$50load_global.22'}), (52, {'res': '$const52.23'}), (54, {'res': '$const54.24'}), (56, {'func': '$50load_global.22', 'args': ['$const52.23', '$const54.24'], 'res': '$56call_function.25'}), (58, {'value': '$56call_function.25', 'res': '$58unary_negative.26'}), (60, {'res': '$full_shape060.27'}), (62, {'res': '$const62.28'}), (64, {'index': '$const62.28', 'target': '$full_shape060.27', 'res': '$64binary_subscr.29'}), (66, {'res': '$66load_global.30'}), (68, {'res': '$const68.31'}), (70, {'res': '$const70.32'}), (72, {'func': '$66load_global.30', 'args': ['$const68.31', '$const70.32'], 'res': '$72call_function.33'}), (74, {'lhs': '$64binary_subscr.29', 'rhs': '$72call_function.33', 'res': '$74binary_subtract.34'}), (76, {'func': '$48load_global.21', 'args': ['$58unary_negative.26', '$74binary_subtract.34'], 'res': '$76call_function.35'}), (78, {'value': '$76call_function.35', 'res': '$78get_iter.36'})), outgoing_phis={'$phi80.0': '$78get_iter.36'}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$78get_iter.36',)})
2025-01-31 15:31:39,247 - DEBUG - block_infos State(pc_initial=80 nstack_initial=1):
AdaptBlockInfo(insts=((80, {'iterator': '$phi80.0', 'pair': '$80for_iter.1', 'indval': '$80for_iter.2', 'pred': '$80for_iter.3'}),), outgoing_phis={'$phi82.1': '$80for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: (), 82: ('$phi80.0', '$80for_iter.2')})
2025-01-31 15:31:39,247 - DEBUG - block_infos State(pc_initial=82 nstack_initial=2):
AdaptBlockInfo(insts=((82, {'value': '$phi82.1'}), (84, {'res': '$const84.2'}), (86, {'value': '$const84.2'}), (88, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$phi82.0',)})
2025-01-31 15:31:39,247 - DEBUG - block_infos State(pc_initial=90 nstack_initial=0):
AdaptBlockInfo(insts=((90, {'res': '$out090.0'}), (92, {'retval': '$out090.0', 'castval': '$92return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:39,248 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    full_shape0 = getattr(value=x, attr=shape) ['full_shape0', 'x']
    $8load_global.2 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>) ['$8load_global.2']
    $10load_attr.3 = getattr(value=$8load_global.2, attr=empty) ['$10load_attr.3', '$8load_global.2']
    $14load_global.5 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>) ['$14load_global.5']
    $16load_attr.6 = getattr(value=$14load_global.5, attr=bool_) ['$14load_global.5', '$16load_attr.6']
    out0 = call $10load_attr.3(full_shape0, func=$10load_attr.3, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6, <string>:3))], vararg=None, varkwarg=None, target=None) ['$10load_attr.3', '$16load_attr.6', 'full_shape0', 'out0']
    $const24.9 = const(int, 0)               ['$const24.9']
    $const28.11 = const(NoneType, None)      ['$const28.11']
    $const30.12 = const(int, 1)              ['$const30.12']
    $32build_slice.13 = global(slice: <class 'slice'>) ['$32build_slice.13']
    $32build_slice.14 = call $32build_slice.13($const28.11, $const30.12, func=$32build_slice.13, args=(Var($const28.11, <string>:4), Var($const30.12, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None) ['$32build_slice.13', '$32build_slice.14', '$const28.11', '$const30.12']
    out0[$32build_slice.14] = $const24.9     ['$32build_slice.14', '$const24.9', 'out0']
    $const36.15 = const(int, 0)              ['$const36.15']
    $const40.17 = const(int, -1)             ['$const40.17']
    $const42.18 = const(NoneType, None)      ['$const42.18']
    $44build_slice.19 = global(slice: <class 'slice'>) ['$44build_slice.19']
    $44build_slice.20 = call $44build_slice.19($const40.17, $const42.18, func=$44build_slice.19, args=(Var($const40.17, <string>:5), Var($const42.18, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None) ['$44build_slice.19', '$44build_slice.20', '$const40.17', '$const42.18']
    out0[$44build_slice.20] = $const36.15    ['$44build_slice.20', '$const36.15', 'out0']
    $48load_global.21 = global(range: <class 'range'>) ['$48load_global.21']
    $50load_global.22 = global(min: <built-in function min>) ['$50load_global.22']
    $const52.23 = const(int, 0)              ['$const52.23']
    $const54.24 = const(int, -1)             ['$const54.24']
    $56call_function.25 = call $50load_global.22($const52.23, $const54.24, func=$50load_global.22, args=[Var($const52.23, <string>:6), Var($const54.24, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$50load_global.22', '$56call_function.25', '$const52.23', '$const54.24']
    $58unary_negative.26 = unary(fn=<built-in function neg>, value=$56call_function.25) ['$56call_function.25', '$58unary_negative.26']
    $const62.28 = const(int, 0)              ['$const62.28']
    $64binary_subscr.29 = getitem(value=full_shape0, index=$const62.28, fn=<built-in function getitem>) ['$64binary_subscr.29', '$const62.28', 'full_shape0']
    $66load_global.30 = global(max: <built-in function max>) ['$66load_global.30']
    $const68.31 = const(int, 0)              ['$const68.31']
    $const70.32 = const(int, 1)              ['$const70.32']
    $72call_function.33 = call $66load_global.30($const68.31, $const70.32, func=$66load_global.30, args=[Var($const68.31, <string>:6), Var($const70.32, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$66load_global.30', '$72call_function.33', '$const68.31', '$const70.32']
    $74binary_subtract.34 = $64binary_subscr.29 - $72call_function.33 ['$64binary_subscr.29', '$72call_function.33', '$74binary_subtract.34']
    $76call_function.35 = call $48load_global.21($58unary_negative.26, $74binary_subtract.34, func=$48load_global.21, args=[Var($58unary_negative.26, <string>:6), Var($74binary_subtract.34, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34', '$76call_function.35']
    $78get_iter.36 = getiter(value=$76call_function.35) ['$76call_function.35', '$78get_iter.36']
    $phi80.0 = $78get_iter.36                ['$78get_iter.36', '$phi80.0']
    jump 80                                  []
label 80:
    $80for_iter.1 = iternext(value=$phi80.0) ['$80for_iter.1', '$phi80.0']
    $80for_iter.2 = pair_first(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.2']
    $80for_iter.3 = pair_second(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.3']
    $phi82.1 = $80for_iter.2                 ['$80for_iter.2', '$phi82.1']
    branch $80for_iter.3, 82, 90             ['$80for_iter.3']
label 82:
    index00 = $phi82.1                       ['$phi82.1', 'index00']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 80                                  []
label 90:
    $92return_value.1 = cast(value=out0)     ['$92return_value.1', 'out0']
    return $92return_value.1                 ['$92return_value.1']

2025-01-31 15:31:39,255 - DEBUG - ==== SSA block analysis pass on 0
2025-01-31 15:31:39,255 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e88f3040>
2025-01-31 15:31:39,255 - DEBUG - on stmt: x = arg(0, name=x)
2025-01-31 15:31:39,255 - DEBUG - on stmt: full_shape0 = getattr(value=x, attr=shape)
2025-01-31 15:31:39,255 - DEBUG - on stmt: $8load_global.2.1 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:39,255 - DEBUG - on stmt: $10load_attr.3.1 = getattr(value=$8load_global.2.1, attr=empty)
2025-01-31 15:31:39,255 - DEBUG - on stmt: $14load_global.5.1 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:39,255 - DEBUG - on stmt: $16load_attr.6.1 = getattr(value=$14load_global.5.1, attr=bool_)
2025-01-31 15:31:39,255 - DEBUG - on stmt: out0 = call $10load_attr.3.1(full_shape0, func=$10load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:39,256 - DEBUG - on stmt: $const24.9.1 = const(int, 0)
2025-01-31 15:31:39,256 - DEBUG - on stmt: $const28.11.1 = const(NoneType, None)
2025-01-31 15:31:39,256 - DEBUG - on stmt: $const30.12.1 = const(int, 1)
2025-01-31 15:31:39,256 - DEBUG - on stmt: $32build_slice.13.1 = global(slice: <class 'slice'>)
2025-01-31 15:31:39,256 - DEBUG - on stmt: $32build_slice.14.1 = call $32build_slice.13.1($const28.11.1, $const30.12.1, func=$32build_slice.13.1, args=(Var($const28.11.1, <string>:4), Var($const30.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:39,256 - DEBUG - on stmt: out0[$32build_slice.14.1] = $const24.9.1
2025-01-31 15:31:39,256 - DEBUG - on stmt: $const36.15.1 = const(int, 0)
2025-01-31 15:31:39,256 - DEBUG - on stmt: $const40.17.1 = const(int, -1)
2025-01-31 15:31:39,256 - DEBUG - on stmt: $const42.18.1 = const(NoneType, None)
2025-01-31 15:31:39,256 - DEBUG - on stmt: $44build_slice.19.1 = global(slice: <class 'slice'>)
2025-01-31 15:31:39,256 - DEBUG - on stmt: $44build_slice.20.1 = call $44build_slice.19.1($const40.17.1, $const42.18.1, func=$44build_slice.19.1, args=(Var($const40.17.1, <string>:5), Var($const42.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:39,256 - DEBUG - on stmt: out0[$44build_slice.20.1] = $const36.15.1
2025-01-31 15:31:39,256 - DEBUG - on stmt: $48load_global.21.1 = global(range: <class 'range'>)
2025-01-31 15:31:39,256 - DEBUG - on stmt: $50load_global.22.1 = global(min: <built-in function min>)
2025-01-31 15:31:39,256 - DEBUG - on stmt: $const52.23.1 = const(int, 0)
2025-01-31 15:31:39,256 - DEBUG - on stmt: $const54.24.1 = const(int, -1)
2025-01-31 15:31:39,256 - DEBUG - on stmt: $56call_function.25.1 = call $50load_global.22.1($const52.23.1, $const54.24.1, func=$50load_global.22.1, args=[Var($const52.23.1, <string>:6), Var($const54.24.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:39,256 - DEBUG - on stmt: $58unary_negative.26.1 = unary(fn=<built-in function neg>, value=$56call_function.25.1)
2025-01-31 15:31:39,256 - DEBUG - on stmt: $const62.28.1 = const(int, 0)
2025-01-31 15:31:39,256 - DEBUG - on stmt: $64binary_subscr.29.1 = getitem(value=full_shape0, index=$const62.28.1, fn=<built-in function getitem>)
2025-01-31 15:31:39,256 - DEBUG - on stmt: $66load_global.30.1 = global(max: <built-in function max>)
2025-01-31 15:31:39,256 - DEBUG - on stmt: $const68.31.1 = const(int, 0)
2025-01-31 15:31:39,256 - DEBUG - on stmt: $const70.32.1 = const(int, 1)
2025-01-31 15:31:39,256 - DEBUG - on stmt: $72call_function.33.1 = call $66load_global.30.1($const68.31.1, $const70.32.1, func=$66load_global.30.1, args=[Var($const68.31.1, <string>:6), Var($const70.32.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:39,257 - DEBUG - on stmt: $74binary_subtract.34.1 = $64binary_subscr.29.1 - $72call_function.33.1
2025-01-31 15:31:39,257 - DEBUG - on stmt: $76call_function.35.1 = call $48load_global.21.1($58unary_negative.26.1, $74binary_subtract.34.1, func=$48load_global.21.1, args=[Var($58unary_negative.26.1, <string>:6), Var($74binary_subtract.34.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:39,257 - DEBUG - on stmt: $78get_iter.36.1 = getiter(value=$76call_function.35.1)
2025-01-31 15:31:39,257 - DEBUG - on stmt: $phi80.0.1 = $78get_iter.36.1
2025-01-31 15:31:39,257 - DEBUG - on stmt: jump 80
2025-01-31 15:31:39,257 - DEBUG - ==== SSA block analysis pass on 80
2025-01-31 15:31:39,257 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e88f3040>
2025-01-31 15:31:39,257 - DEBUG - on stmt: $80for_iter.1.1 = iternext(value=$phi80.0.1)
2025-01-31 15:31:39,257 - DEBUG - on stmt: $80for_iter.2.1 = pair_first(value=$80for_iter.1.1)
2025-01-31 15:31:39,257 - DEBUG - on stmt: $80for_iter.3.1 = pair_second(value=$80for_iter.1.1)
2025-01-31 15:31:39,257 - DEBUG - on stmt: $phi82.1.1 = $80for_iter.2.1
2025-01-31 15:31:39,257 - DEBUG - on stmt: branch $80for_iter.3.1, 82, 92
2025-01-31 15:31:39,257 - DEBUG - ==== SSA block analysis pass on 82
2025-01-31 15:31:39,257 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e88f3040>
2025-01-31 15:31:39,257 - DEBUG - on stmt: index00 = $phi82.1.1
2025-01-31 15:31:39,257 - DEBUG - on stmt: jump 90
2025-01-31 15:31:39,257 - DEBUG - ==== SSA block analysis pass on 92
2025-01-31 15:31:39,257 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e88f3040>
2025-01-31 15:31:39,257 - DEBUG - on stmt: $92return_value.1.1 = cast(value=out0)
2025-01-31 15:31:39,257 - DEBUG - on stmt: return $92return_value.1.1
2025-01-31 15:31:39,257 - DEBUG - ==== SSA block analysis pass on 90
2025-01-31 15:31:39,257 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e88f3040>
2025-01-31 15:31:39,257 - DEBUG - on stmt: $const4.1 = const(int, 0)
2025-01-31 15:31:39,257 - DEBUG - on stmt: stencil_index = $const4.1 + index00
2025-01-31 15:31:39,257 - DEBUG - on stmt: $6binary_subscr.2 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-01-31 15:31:39,257 - DEBUG - on stmt: $const10.4 = const(int, -1)
2025-01-31 15:31:39,258 - DEBUG - on stmt: stencil_index.1 = $const10.4 + index00
2025-01-31 15:31:39,258 - DEBUG - on stmt: $12binary_subscr.5 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2025-01-31 15:31:39,258 - DEBUG - on stmt: $14compare_op.6 = $6binary_subscr.2 < $12binary_subscr.5
2025-01-31 15:31:39,258 - DEBUG - on stmt: $const18.8 = const(int, 0)
2025-01-31 15:31:39,258 - DEBUG - on stmt: stencil_index.2 = $const18.8 + index00
2025-01-31 15:31:39,258 - DEBUG - on stmt: $20binary_subscr.9 = getitem(value=x, index=stencil_index.2, fn=<built-in function getitem>)
2025-01-31 15:31:39,258 - DEBUG - on stmt: $const24.11 = const(int, 1)
2025-01-31 15:31:39,258 - DEBUG - on stmt: stencil_index.3 = $const24.11 + index00
2025-01-31 15:31:39,258 - DEBUG - on stmt: $26binary_subscr.12 = getitem(value=x, index=stencil_index.3, fn=<built-in function getitem>)
2025-01-31 15:31:39,258 - DEBUG - on stmt: $28compare_op.13 = $20binary_subscr.9 <= $26binary_subscr.12
2025-01-31 15:31:39,258 - DEBUG - on stmt: $30binary_and.14 = $14compare_op.6 & $28compare_op.13
2025-01-31 15:31:39,258 - DEBUG - on stmt: $32return_value.15 = cast(value=$30binary_and.14)
2025-01-31 15:31:39,258 - DEBUG - on stmt: out0[index00] = $32return_value.15
2025-01-31 15:31:39,258 - DEBUG - on stmt: jump 91
2025-01-31 15:31:39,258 - DEBUG - ==== SSA block analysis pass on 91
2025-01-31 15:31:39,258 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e88f3040>
2025-01-31 15:31:39,258 - DEBUG - on stmt: jump 80
2025-01-31 15:31:39,259 - DEBUG - defs defaultdict(<class 'list'>,
            {'$10load_attr.3.1': [(<numba.core.ir.Assign object at 0x7c89e88df310>,
                                   0)],
             '$12binary_subscr.5': [(<numba.core.ir.Assign object at 0x7c89e88dde10>,
                                     90)],
             '$14compare_op.6': [(<numba.core.ir.Assign object at 0x7c89e88cb190>,
                                  90)],
             '$14load_global.5.1': [(<numba.core.ir.Assign object at 0x7c89e88def20>,
                                     0)],
             '$16load_attr.6.1': [(<numba.core.ir.Assign object at 0x7c89e88deda0>,
                                   0)],
             '$20binary_subscr.9': [(<numba.core.ir.Assign object at 0x7c89e88de050>,
                                     90)],
             '$26binary_subscr.12': [(<numba.core.ir.Assign object at 0x7c89e88de290>,
                                      90)],
             '$28compare_op.13': [(<numba.core.ir.Assign object at 0x7c89e88d6680>,
                                   90)],
             '$30binary_and.14': [(<numba.core.ir.Assign object at 0x7c89e88d6860>,
                                   90)],
             '$32build_slice.13.1': [(<numba.core.ir.Assign object at 0x7c89e88dffd0>,
                                      0)],
             '$32build_slice.14.1': [(<numba.core.ir.Assign object at 0x7c89e88ec130>,
                                      0)],
             '$32return_value.15': [(<numba.core.ir.Assign object at 0x7c89e88d7310>,
                                     90)],
             '$44build_slice.19.1': [(<numba.core.ir.Assign object at 0x7c89e88ec910>,
                                      0)],
             '$44build_slice.20.1': [(<numba.core.ir.Assign object at 0x7c89e88eca30>,
                                      0)],
             '$48load_global.21.1': [(<numba.core.ir.Assign object at 0x7c89e88ecc70>,
                                      0)],
             '$50load_global.22.1': [(<numba.core.ir.Assign object at 0x7c89e88ecdf0>,
                                      0)],
             '$56call_function.25.1': [(<numba.core.ir.Assign object at 0x7c89e88ed2d0>,
                                        0)],
             '$58unary_negative.26.1': [(<numba.core.ir.Assign object at 0x7c89e88ed3f0>,
                                         0)],
             '$64binary_subscr.29.1': [(<numba.core.ir.Assign object at 0x7c89e88ed840>,
                                        0)],
             '$66load_global.30.1': [(<numba.core.ir.Assign object at 0x7c89e88ed990>,
                                      0)],
             '$6binary_subscr.2': [(<numba.core.ir.Assign object at 0x7c89e88ddbd0>,
                                    90)],
             '$72call_function.33.1': [(<numba.core.ir.Assign object at 0x7c89e88ede70>,
                                        0)],
             '$74binary_subtract.34.1': [(<numba.core.ir.Assign object at 0x7c89e88edfc0>,
                                          0)],
             '$76call_function.35.1': [(<numba.core.ir.Assign object at 0x7c89e88ee170>,
                                        0)],
             '$78get_iter.36.1': [(<numba.core.ir.Assign object at 0x7c89e88ee290>,
                                   0)],
             '$80for_iter.1.1': [(<numba.core.ir.Assign object at 0x7c89e88ee380>,
                                  80)],
             '$80for_iter.2.1': [(<numba.core.ir.Assign object at 0x7c89e88ee4a0>,
                                  80)],
             '$80for_iter.3.1': [(<numba.core.ir.Assign object at 0x7c89e88ee5c0>,
                                  80)],
             '$8load_global.2.1': [(<numba.core.ir.Assign object at 0x7c89e88df490>,
                                    0)],
             '$92return_value.1.1': [(<numba.core.ir.Assign object at 0x7c89e88eeef0>,
                                      92)],
             '$const10.4': [(<numba.core.ir.Assign object at 0x7c89e88c9c90>,
                             90)],
             '$const18.8': [(<numba.core.ir.Assign object at 0x7c89e88cb370>,
                             90)],
             '$const24.11': [(<numba.core.ir.Assign object at 0x7c89e88d5180>,
                              90)],
             '$const24.9.1': [(<numba.core.ir.Assign object at 0x7c89e88de650>,
                               0)],
             '$const28.11.1': [(<numba.core.ir.Assign object at 0x7c89e88de320>,
                                0)],
             '$const30.12.1': [(<numba.core.ir.Assign object at 0x7c89e88dfe50>,
                                0)],
             '$const36.15.1': [(<numba.core.ir.Assign object at 0x7c89e88ec370>,
                                0)],
             '$const4.1': [(<numba.core.ir.Assign object at 0x7c89e88b9c60>,
                            90)],
             '$const40.17.1': [(<numba.core.ir.Assign object at 0x7c89e88ec610>,
                                0)],
             '$const42.18.1': [(<numba.core.ir.Assign object at 0x7c89e88ec790>,
                                0)],
             '$const52.23.1': [(<numba.core.ir.Assign object at 0x7c89e88ecf70>,
                                0)],
             '$const54.24.1': [(<numba.core.ir.Assign object at 0x7c89e88ed0f0>,
                                0)],
             '$const62.28.1': [(<numba.core.ir.Assign object at 0x7c89e88ed690>,
                                0)],
             '$const68.31.1': [(<numba.core.ir.Assign object at 0x7c89e88edb10>,
                                0)],
             '$const70.32.1': [(<numba.core.ir.Assign object at 0x7c89e88edc90>,
                                0)],
             '$phi80.0.1': [(<numba.core.ir.Assign object at 0x7c89e88df820>,
                             0)],
             '$phi82.1.1': [(<numba.core.ir.Assign object at 0x7c89e88ed510>,
                             80)],
             'full_shape0': [(<numba.core.ir.Assign object at 0x7c89e88df730>,
                              0)],
             'index00': [(<numba.core.ir.Assign object at 0x7c89e88ee890>, 82)],
             'out0': [(<numba.core.ir.Assign object at 0x7c89e88de7d0>, 0)],
             'stencil_index': [(<numba.core.ir.Assign object at 0x7c89e88dd1e0>,
                                90)],
             'stencil_index.1': [(<numba.core.ir.Assign object at 0x7c89e88ddd50>,
                                  90)],
             'stencil_index.2': [(<numba.core.ir.Assign object at 0x7c89e88ddf90>,
                                  90)],
             'stencil_index.3': [(<numba.core.ir.Assign object at 0x7c89e88de1d0>,
                                  90)],
             'x': [(<numba.core.ir.Assign object at 0x7c89e88df9d0>, 0)]})
2025-01-31 15:31:39,259 - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x7c89e88f3040>
2025-01-31 15:31:39,446 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=1068)
           2	LOAD_GLOBAL(arg=0, lineno=1082)
           4	LOAD_FAST(arg=0, lineno=1082)
           6	CALL_FUNCTION(arg=1, lineno=1082)
           8	LOAD_FAST(arg=1, lineno=1082)
          10	LOAD_CONST(arg=1, lineno=1082)
          12	LOAD_CONST(arg=1, lineno=1082)
          14	BUILD_SLICE(arg=2, lineno=1082)
          16	STORE_SUBSCR(arg=None, lineno=1082)
          18	LOAD_CONST(arg=1, lineno=1082)
          20	RETURN_VALUE(arg=None, lineno=1082)
2025-01-31 15:31:39,446 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:31:39,446 - DEBUG - stack: []
2025-01-31 15:31:39,446 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:31:39,446 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=1068)
2025-01-31 15:31:39,446 - DEBUG - stack []
2025-01-31 15:31:39,446 - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=1082)
2025-01-31 15:31:39,446 - DEBUG - stack []
2025-01-31 15:31:39,446 - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=1082)
2025-01-31 15:31:39,446 - DEBUG - stack ['$2load_global.0']
2025-01-31 15:31:39,447 - DEBUG - dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=1082)
2025-01-31 15:31:39,447 - DEBUG - stack ['$2load_global.0', '$x4.1']
2025-01-31 15:31:39,447 - DEBUG - dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=1082)
2025-01-31 15:31:39,447 - DEBUG - stack ['$6call_function.2']
2025-01-31 15:31:39,447 - DEBUG - dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=1082)
2025-01-31 15:31:39,447 - DEBUG - stack ['$6call_function.2', '$y8.3']
2025-01-31 15:31:39,447 - DEBUG - dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=1082)
2025-01-31 15:31:39,447 - DEBUG - stack ['$6call_function.2', '$y8.3', '$const10.4']
2025-01-31 15:31:39,447 - DEBUG - dispatch pc=14, inst=BUILD_SLICE(arg=2, lineno=1082)
2025-01-31 15:31:39,447 - DEBUG - stack ['$6call_function.2', '$y8.3', '$const10.4', '$const12.5']
2025-01-31 15:31:39,447 - DEBUG - dispatch pc=16, inst=STORE_SUBSCR(arg=None, lineno=1082)
2025-01-31 15:31:39,447 - DEBUG - stack ['$6call_function.2', '$y8.3', '$14build_slice.7']
2025-01-31 15:31:39,447 - DEBUG - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1082)
2025-01-31 15:31:39,447 - DEBUG - stack []
2025-01-31 15:31:39,447 - DEBUG - dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=1082)
2025-01-31 15:31:39,447 - DEBUG - stack ['$const18.8']
2025-01-31 15:31:39,447 - DEBUG - end state. edges=[]
2025-01-31 15:31:39,447 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:31:39,447 - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-01-31 15:31:39,447 - DEBUG - defmap: {}
2025-01-31 15:31:39,447 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:39,447 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:39,447 - DEBUG - keep phismap: {}
2025-01-31 15:31:39,447 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-01-31 15:31:39,447 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:31:39,447 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$x4.1'}), (6, {'func': '$2load_global.0', 'args': ['$x4.1'], 'res': '$6call_function.2'}), (8, {'res': '$y8.3'}), (10, {'res': '$const10.4'}), (12, {'res': '$const12.5'}), (14, {'start': '$const10.4', 'stop': '$const12.5', 'step': None, 'res': '$14build_slice.7', 'slicevar': '$14build_slice.6'}), (16, {'target': '$y8.3', 'index': '$14build_slice.7', 'value': '$6call_function.2'}), (18, {'res': '$const18.8'}), (20, {'retval': '$const18.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:39,448 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    y = arg(1, name=y)                       ['y']
    $2load_global.0 = global(_localmin_sten: <numba.stencils.stencil.StencilFunc object at 0x7c89eba2d810>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, utils.py:1068)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$6call_function.2', 'x']
    $const10.4 = const(NoneType, None)       ['$const10.4']
    $const12.5 = const(NoneType, None)       ['$const12.5']
    $14build_slice.6 = global(slice: <class 'slice'>) ['$14build_slice.6']
    $14build_slice.7 = call $14build_slice.6($const10.4, $const12.5, func=$14build_slice.6, args=(Var($const10.4, utils.py:1082), Var($const12.5, utils.py:1082)), kws=(), vararg=None, varkwarg=None, target=None) ['$14build_slice.6', '$14build_slice.7', '$const10.4', '$const12.5']
    y[$14build_slice.7] = $6call_function.2  ['$14build_slice.7', '$6call_function.2', 'y']
    $const18.8 = const(NoneType, None)       ['$const18.8']
    $20return_value.9 = cast(value=$const18.8) ['$20return_value.9', '$const18.8']
    return $20return_value.9                 ['$20return_value.9']

2025-01-31 15:31:39,451 - DEBUG - ==== SSA block analysis pass on 0
2025-01-31 15:31:39,451 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e88b84c0>
2025-01-31 15:31:39,451 - DEBUG - on stmt: x = arg(0, name=x)
2025-01-31 15:31:39,452 - DEBUG - on stmt: y = arg(1, name=y)
2025-01-31 15:31:39,452 - DEBUG - on stmt: $2load_global.0 = global(_localmin_sten: <numba.stencils.stencil.StencilFunc object at 0x7c89eba2d810>)
2025-01-31 15:31:39,452 - DEBUG - on stmt: $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, utils.py:1068)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:39,452 - DEBUG - on stmt: $const10.4 = const(NoneType, None)
2025-01-31 15:31:39,452 - DEBUG - on stmt: $const12.5 = const(NoneType, None)
2025-01-31 15:31:39,452 - DEBUG - on stmt: $14build_slice.6 = global(slice: <class 'slice'>)
2025-01-31 15:31:39,452 - DEBUG - on stmt: $14build_slice.7 = call $14build_slice.6($const10.4, $const12.5, func=$14build_slice.6, args=(Var($const10.4, utils.py:1082), Var($const12.5, utils.py:1082)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:39,452 - DEBUG - on stmt: y[slice(None, None, None)] = $6call_function.2
2025-01-31 15:31:39,452 - DEBUG - on stmt: $const18.8 = const(NoneType, None)
2025-01-31 15:31:39,452 - DEBUG - on stmt: $20return_value.9 = cast(value=$const18.8)
2025-01-31 15:31:39,452 - DEBUG - on stmt: return $20return_value.9
2025-01-31 15:31:39,452 - DEBUG - defs defaultdict(<class 'list'>,
            {'$14build_slice.6': [(<numba.core.ir.Assign object at 0x7c89e86973a0>,
                                   0)],
             '$14build_slice.7': [(<numba.core.ir.Assign object at 0x7c89e8697700>,
                                   0)],
             '$20return_value.9': [(<numba.core.ir.Assign object at 0x7c89e8697070>,
                                    0)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x7c89e8697f10>,
                                  0)],
             '$6call_function.2': [(<numba.core.ir.Assign object at 0x7c89e8697c70>,
                                    0)],
             '$const10.4': [(<numba.core.ir.Assign object at 0x7c89e8697910>,
                             0)],
             '$const12.5': [(<numba.core.ir.Assign object at 0x7c89e8697490>,
                             0)],
             '$const18.8': [(<numba.core.ir.Assign object at 0x7c89e8695ae0>,
                             0)],
             'x': [(<numba.core.ir.Assign object at 0x7c89e86978e0>, 0)],
             'y': [(<numba.core.ir.Assign object at 0x7c89e8696140>, 0)]})
2025-01-31 15:31:39,452 - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x7c89e88b84c0>
2025-01-31 15:31:39,465 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_FAST(arg=0, lineno=2)
           4	LOAD_ATTR(arg=0, lineno=2)
           6	STORE_FAST(arg=1, lineno=2)
           8	LOAD_GLOBAL(arg=1, lineno=3)
          10	LOAD_ATTR(arg=2, lineno=3)
          12	LOAD_FAST(arg=1, lineno=3)
          14	LOAD_GLOBAL(arg=1, lineno=3)
          16	LOAD_ATTR(arg=3, lineno=3)
          18	LOAD_CONST(arg=1, lineno=3)
          20	CALL_FUNCTION_KW(arg=2, lineno=3)
          22	STORE_FAST(arg=2, lineno=3)
          24	LOAD_CONST(arg=2, lineno=4)
          26	LOAD_FAST(arg=2, lineno=4)
          28	LOAD_CONST(arg=0, lineno=4)
          30	LOAD_CONST(arg=3, lineno=4)
          32	BUILD_SLICE(arg=2, lineno=4)
          34	STORE_SUBSCR(arg=None, lineno=4)
          36	LOAD_CONST(arg=2, lineno=5)
          38	LOAD_FAST(arg=2, lineno=5)
          40	LOAD_CONST(arg=4, lineno=5)
          42	LOAD_CONST(arg=0, lineno=5)
          44	BUILD_SLICE(arg=2, lineno=5)
          46	STORE_SUBSCR(arg=None, lineno=5)
          48	LOAD_GLOBAL(arg=4, lineno=6)
          50	LOAD_GLOBAL(arg=5, lineno=6)
          52	LOAD_CONST(arg=2, lineno=6)
          54	LOAD_CONST(arg=4, lineno=6)
          56	CALL_FUNCTION(arg=2, lineno=6)
          58	UNARY_NEGATIVE(arg=None, lineno=6)
          60	LOAD_FAST(arg=1, lineno=6)
          62	LOAD_CONST(arg=2, lineno=6)
          64	BINARY_SUBSCR(arg=None, lineno=6)
          66	LOAD_GLOBAL(arg=6, lineno=6)
          68	LOAD_CONST(arg=2, lineno=6)
          70	LOAD_CONST(arg=3, lineno=6)
          72	CALL_FUNCTION(arg=2, lineno=6)
          74	BINARY_SUBTRACT(arg=None, lineno=6)
          76	CALL_FUNCTION(arg=2, lineno=6)
          78	GET_ITER(arg=None, lineno=6)
>         80	FOR_ITER(arg=4, lineno=6)
          82	STORE_FAST(arg=3, lineno=6)
          84	LOAD_CONST(arg=2, lineno=7)
          86	STORE_FAST(arg=4, lineno=7)
          88	JUMP_ABSOLUTE(arg=41, lineno=7)
>         90	LOAD_FAST(arg=2, lineno=8)
          92	RETURN_VALUE(arg=None, lineno=8)
2025-01-31 15:31:39,465 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:31:39,465 - DEBUG - stack: []
2025-01-31 15:31:39,465 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:31:39,465 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=1)
2025-01-31 15:31:39,465 - DEBUG - stack []
2025-01-31 15:31:39,465 - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=2)
2025-01-31 15:31:39,465 - DEBUG - stack []
2025-01-31 15:31:39,465 - DEBUG - dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=2)
2025-01-31 15:31:39,466 - DEBUG - stack ['$x2.0']
2025-01-31 15:31:39,466 - DEBUG - dispatch pc=6, inst=STORE_FAST(arg=1, lineno=2)
2025-01-31 15:31:39,466 - DEBUG - stack ['$4load_attr.1']
2025-01-31 15:31:39,466 - DEBUG - dispatch pc=8, inst=LOAD_GLOBAL(arg=1, lineno=3)
2025-01-31 15:31:39,466 - DEBUG - stack []
2025-01-31 15:31:39,466 - DEBUG - dispatch pc=10, inst=LOAD_ATTR(arg=2, lineno=3)
2025-01-31 15:31:39,466 - DEBUG - stack ['$8load_global.2']
2025-01-31 15:31:39,466 - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=3)
2025-01-31 15:31:39,466 - DEBUG - stack ['$10load_attr.3']
2025-01-31 15:31:39,466 - DEBUG - dispatch pc=14, inst=LOAD_GLOBAL(arg=1, lineno=3)
2025-01-31 15:31:39,466 - DEBUG - stack ['$10load_attr.3', '$full_shape012.4']
2025-01-31 15:31:39,466 - DEBUG - dispatch pc=16, inst=LOAD_ATTR(arg=3, lineno=3)
2025-01-31 15:31:39,466 - DEBUG - stack ['$10load_attr.3', '$full_shape012.4', '$14load_global.5']
2025-01-31 15:31:39,466 - DEBUG - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=3)
2025-01-31 15:31:39,466 - DEBUG - stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6']
2025-01-31 15:31:39,466 - DEBUG - dispatch pc=20, inst=CALL_FUNCTION_KW(arg=2, lineno=3)
2025-01-31 15:31:39,466 - DEBUG - stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6', '$const18.7']
2025-01-31 15:31:39,466 - DEBUG - dispatch pc=22, inst=STORE_FAST(arg=2, lineno=3)
2025-01-31 15:31:39,466 - DEBUG - stack ['$20call_function_kw.8']
2025-01-31 15:31:39,466 - DEBUG - dispatch pc=24, inst=LOAD_CONST(arg=2, lineno=4)
2025-01-31 15:31:39,466 - DEBUG - stack []
2025-01-31 15:31:39,466 - DEBUG - dispatch pc=26, inst=LOAD_FAST(arg=2, lineno=4)
2025-01-31 15:31:39,466 - DEBUG - stack ['$const24.9']
2025-01-31 15:31:39,466 - DEBUG - dispatch pc=28, inst=LOAD_CONST(arg=0, lineno=4)
2025-01-31 15:31:39,466 - DEBUG - stack ['$const24.9', '$out026.10']
2025-01-31 15:31:39,466 - DEBUG - dispatch pc=30, inst=LOAD_CONST(arg=3, lineno=4)
2025-01-31 15:31:39,466 - DEBUG - stack ['$const24.9', '$out026.10', '$const28.11']
2025-01-31 15:31:39,466 - DEBUG - dispatch pc=32, inst=BUILD_SLICE(arg=2, lineno=4)
2025-01-31 15:31:39,467 - DEBUG - stack ['$const24.9', '$out026.10', '$const28.11', '$const30.12']
2025-01-31 15:31:39,467 - DEBUG - dispatch pc=34, inst=STORE_SUBSCR(arg=None, lineno=4)
2025-01-31 15:31:39,467 - DEBUG - stack ['$const24.9', '$out026.10', '$32build_slice.14']
2025-01-31 15:31:39,467 - DEBUG - dispatch pc=36, inst=LOAD_CONST(arg=2, lineno=5)
2025-01-31 15:31:39,467 - DEBUG - stack []
2025-01-31 15:31:39,467 - DEBUG - dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=5)
2025-01-31 15:31:39,467 - DEBUG - stack ['$const36.15']
2025-01-31 15:31:39,467 - DEBUG - dispatch pc=40, inst=LOAD_CONST(arg=4, lineno=5)
2025-01-31 15:31:39,467 - DEBUG - stack ['$const36.15', '$out038.16']
2025-01-31 15:31:39,467 - DEBUG - dispatch pc=42, inst=LOAD_CONST(arg=0, lineno=5)
2025-01-31 15:31:39,467 - DEBUG - stack ['$const36.15', '$out038.16', '$const40.17']
2025-01-31 15:31:39,467 - DEBUG - dispatch pc=44, inst=BUILD_SLICE(arg=2, lineno=5)
2025-01-31 15:31:39,467 - DEBUG - stack ['$const36.15', '$out038.16', '$const40.17', '$const42.18']
2025-01-31 15:31:39,467 - DEBUG - dispatch pc=46, inst=STORE_SUBSCR(arg=None, lineno=5)
2025-01-31 15:31:39,467 - DEBUG - stack ['$const36.15', '$out038.16', '$44build_slice.20']
2025-01-31 15:31:39,467 - DEBUG - dispatch pc=48, inst=LOAD_GLOBAL(arg=4, lineno=6)
2025-01-31 15:31:39,467 - DEBUG - stack []
2025-01-31 15:31:39,467 - DEBUG - dispatch pc=50, inst=LOAD_GLOBAL(arg=5, lineno=6)
2025-01-31 15:31:39,467 - DEBUG - stack ['$48load_global.21']
2025-01-31 15:31:39,467 - DEBUG - dispatch pc=52, inst=LOAD_CONST(arg=2, lineno=6)
2025-01-31 15:31:39,467 - DEBUG - stack ['$48load_global.21', '$50load_global.22']
2025-01-31 15:31:39,467 - DEBUG - dispatch pc=54, inst=LOAD_CONST(arg=4, lineno=6)
2025-01-31 15:31:39,467 - DEBUG - stack ['$48load_global.21', '$50load_global.22', '$const52.23']
2025-01-31 15:31:39,467 - DEBUG - dispatch pc=56, inst=CALL_FUNCTION(arg=2, lineno=6)
2025-01-31 15:31:39,467 - DEBUG - stack ['$48load_global.21', '$50load_global.22', '$const52.23', '$const54.24']
2025-01-31 15:31:39,467 - DEBUG - dispatch pc=58, inst=UNARY_NEGATIVE(arg=None, lineno=6)
2025-01-31 15:31:39,467 - DEBUG - stack ['$48load_global.21', '$56call_function.25']
2025-01-31 15:31:39,467 - DEBUG - dispatch pc=60, inst=LOAD_FAST(arg=1, lineno=6)
2025-01-31 15:31:39,467 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26']
2025-01-31 15:31:39,468 - DEBUG - dispatch pc=62, inst=LOAD_CONST(arg=2, lineno=6)
2025-01-31 15:31:39,468 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27']
2025-01-31 15:31:39,468 - DEBUG - dispatch pc=64, inst=BINARY_SUBSCR(arg=None, lineno=6)
2025-01-31 15:31:39,468 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27', '$const62.28']
2025-01-31 15:31:39,468 - DEBUG - dispatch pc=66, inst=LOAD_GLOBAL(arg=6, lineno=6)
2025-01-31 15:31:39,468 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29']
2025-01-31 15:31:39,468 - DEBUG - dispatch pc=68, inst=LOAD_CONST(arg=2, lineno=6)
2025-01-31 15:31:39,468 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30']
2025-01-31 15:31:39,468 - DEBUG - dispatch pc=70, inst=LOAD_CONST(arg=3, lineno=6)
2025-01-31 15:31:39,468 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31']
2025-01-31 15:31:39,468 - DEBUG - dispatch pc=72, inst=CALL_FUNCTION(arg=2, lineno=6)
2025-01-31 15:31:39,468 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31', '$const70.32']
2025-01-31 15:31:39,468 - DEBUG - dispatch pc=74, inst=BINARY_SUBTRACT(arg=None, lineno=6)
2025-01-31 15:31:39,468 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$72call_function.33']
2025-01-31 15:31:39,468 - DEBUG - dispatch pc=76, inst=CALL_FUNCTION(arg=2, lineno=6)
2025-01-31 15:31:39,468 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34']
2025-01-31 15:31:39,468 - DEBUG - dispatch pc=78, inst=GET_ITER(arg=None, lineno=6)
2025-01-31 15:31:39,468 - DEBUG - stack ['$76call_function.35']
2025-01-31 15:31:39,468 - DEBUG - end state. edges=[Edge(pc=80, stack=('$78get_iter.36',), blockstack=(), npush=0)]
2025-01-31 15:31:39,468 - DEBUG - pending: deque([State(pc_initial=80 nstack_initial=1)])
2025-01-31 15:31:39,468 - DEBUG - stack: ['$phi80.0']
2025-01-31 15:31:39,468 - DEBUG - state.pc_initial: State(pc_initial=80 nstack_initial=1)
2025-01-31 15:31:39,468 - DEBUG - dispatch pc=80, inst=FOR_ITER(arg=4, lineno=6)
2025-01-31 15:31:39,468 - DEBUG - stack ['$phi80.0']
2025-01-31 15:31:39,468 - DEBUG - end state. edges=[Edge(pc=90, stack=(), blockstack=(), npush=0), Edge(pc=82, stack=('$phi80.0', '$80for_iter.2'), blockstack=(), npush=0)]
2025-01-31 15:31:39,468 - DEBUG - pending: deque([State(pc_initial=90 nstack_initial=0), State(pc_initial=82 nstack_initial=2)])
2025-01-31 15:31:39,468 - DEBUG - stack: []
2025-01-31 15:31:39,469 - DEBUG - state.pc_initial: State(pc_initial=90 nstack_initial=0)
2025-01-31 15:31:39,469 - DEBUG - dispatch pc=90, inst=LOAD_FAST(arg=2, lineno=8)
2025-01-31 15:31:39,469 - DEBUG - stack []
2025-01-31 15:31:39,469 - DEBUG - dispatch pc=92, inst=RETURN_VALUE(arg=None, lineno=8)
2025-01-31 15:31:39,469 - DEBUG - stack ['$out090.0']
2025-01-31 15:31:39,469 - DEBUG - end state. edges=[]
2025-01-31 15:31:39,469 - DEBUG - pending: deque([State(pc_initial=82 nstack_initial=2)])
2025-01-31 15:31:39,469 - DEBUG - stack: ['$phi82.0', '$phi82.1']
2025-01-31 15:31:39,469 - DEBUG - state.pc_initial: State(pc_initial=82 nstack_initial=2)
2025-01-31 15:31:39,469 - DEBUG - dispatch pc=82, inst=STORE_FAST(arg=3, lineno=6)
2025-01-31 15:31:39,469 - DEBUG - stack ['$phi82.0', '$phi82.1']
2025-01-31 15:31:39,469 - DEBUG - dispatch pc=84, inst=LOAD_CONST(arg=2, lineno=7)
2025-01-31 15:31:39,469 - DEBUG - stack ['$phi82.0']
2025-01-31 15:31:39,469 - DEBUG - dispatch pc=86, inst=STORE_FAST(arg=4, lineno=7)
2025-01-31 15:31:39,469 - DEBUG - stack ['$phi82.0', '$const84.2']
2025-01-31 15:31:39,469 - DEBUG - dispatch pc=88, inst=JUMP_ABSOLUTE(arg=41, lineno=7)
2025-01-31 15:31:39,469 - DEBUG - stack ['$phi82.0']
2025-01-31 15:31:39,469 - DEBUG - end state. edges=[Edge(pc=80, stack=('$phi82.0',), blockstack=(), npush=0)]
2025-01-31 15:31:39,469 - DEBUG - pending: deque([State(pc_initial=80 nstack_initial=1)])
2025-01-31 15:31:39,469 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:31:39,469 - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=80 nstack_initial=1): {'$phi80.0'},
             State(pc_initial=82 nstack_initial=2): {'$phi82.1'},
             State(pc_initial=90 nstack_initial=0): set()})
2025-01-31 15:31:39,469 - DEBUG - defmap: {'$phi80.0': State(pc_initial=0 nstack_initial=0),
 '$phi82.1': State(pc_initial=80 nstack_initial=1)}
2025-01-31 15:31:39,469 - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi82.0', State(pc_initial=82 nstack_initial=2))},
             '$phi82.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-01-31 15:31:39,470 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-01-31 15:31:39,470 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-01-31 15:31:39,470 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-01-31 15:31:39,470 - DEBUG - keep phismap: {'$phi80.0': {('$78get_iter.36', State(pc_initial=0 nstack_initial=0))},
 '$phi82.1': {('$80for_iter.2', State(pc_initial=80 nstack_initial=1))}}
2025-01-31 15:31:39,470 - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi80.0': '$78get_iter.36'},
             State(pc_initial=80 nstack_initial=1): {'$phi82.1': '$80for_iter.2'}})
2025-01-31 15:31:39,470 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:31:39,471 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'item': '$x2.0', 'res': '$4load_attr.1'}), (6, {'value': '$4load_attr.1'}), (8, {'res': '$8load_global.2'}), (10, {'item': '$8load_global.2', 'res': '$10load_attr.3'}), (12, {'res': '$full_shape012.4'}), (14, {'res': '$14load_global.5'}), (16, {'item': '$14load_global.5', 'res': '$16load_attr.6'}), (18, {'res': '$const18.7'}), (20, {'func': '$10load_attr.3', 'args': ['$full_shape012.4', '$16load_attr.6'], 'names': '$const18.7', 'res': '$20call_function_kw.8'}), (22, {'value': '$20call_function_kw.8'}), (24, {'res': '$const24.9'}), (26, {'res': '$out026.10'}), (28, {'res': '$const28.11'}), (30, {'res': '$const30.12'}), (32, {'start': '$const28.11', 'stop': '$const30.12', 'step': None, 'res': '$32build_slice.14', 'slicevar': '$32build_slice.13'}), (34, {'target': '$out026.10', 'index': '$32build_slice.14', 'value': '$const24.9'}), (36, {'res': '$const36.15'}), (38, {'res': '$out038.16'}), (40, {'res': '$const40.17'}), (42, {'res': '$const42.18'}), (44, {'start': '$const40.17', 'stop': '$const42.18', 'step': None, 'res': '$44build_slice.20', 'slicevar': '$44build_slice.19'}), (46, {'target': '$out038.16', 'index': '$44build_slice.20', 'value': '$const36.15'}), (48, {'res': '$48load_global.21'}), (50, {'res': '$50load_global.22'}), (52, {'res': '$const52.23'}), (54, {'res': '$const54.24'}), (56, {'func': '$50load_global.22', 'args': ['$const52.23', '$const54.24'], 'res': '$56call_function.25'}), (58, {'value': '$56call_function.25', 'res': '$58unary_negative.26'}), (60, {'res': '$full_shape060.27'}), (62, {'res': '$const62.28'}), (64, {'index': '$const62.28', 'target': '$full_shape060.27', 'res': '$64binary_subscr.29'}), (66, {'res': '$66load_global.30'}), (68, {'res': '$const68.31'}), (70, {'res': '$const70.32'}), (72, {'func': '$66load_global.30', 'args': ['$const68.31', '$const70.32'], 'res': '$72call_function.33'}), (74, {'lhs': '$64binary_subscr.29', 'rhs': '$72call_function.33', 'res': '$74binary_subtract.34'}), (76, {'func': '$48load_global.21', 'args': ['$58unary_negative.26', '$74binary_subtract.34'], 'res': '$76call_function.35'}), (78, {'value': '$76call_function.35', 'res': '$78get_iter.36'})), outgoing_phis={'$phi80.0': '$78get_iter.36'}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$78get_iter.36',)})
2025-01-31 15:31:39,471 - DEBUG - block_infos State(pc_initial=80 nstack_initial=1):
AdaptBlockInfo(insts=((80, {'iterator': '$phi80.0', 'pair': '$80for_iter.1', 'indval': '$80for_iter.2', 'pred': '$80for_iter.3'}),), outgoing_phis={'$phi82.1': '$80for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: (), 82: ('$phi80.0', '$80for_iter.2')})
2025-01-31 15:31:39,471 - DEBUG - block_infos State(pc_initial=82 nstack_initial=2):
AdaptBlockInfo(insts=((82, {'value': '$phi82.1'}), (84, {'res': '$const84.2'}), (86, {'value': '$const84.2'}), (88, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$phi82.0',)})
2025-01-31 15:31:39,471 - DEBUG - block_infos State(pc_initial=90 nstack_initial=0):
AdaptBlockInfo(insts=((90, {'res': '$out090.0'}), (92, {'retval': '$out090.0', 'castval': '$92return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:39,472 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    full_shape0 = getattr(value=x, attr=shape) ['full_shape0', 'x']
    $8load_global.2 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>) ['$8load_global.2']
    $10load_attr.3 = getattr(value=$8load_global.2, attr=empty) ['$10load_attr.3', '$8load_global.2']
    $14load_global.5 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>) ['$14load_global.5']
    $16load_attr.6 = getattr(value=$14load_global.5, attr=bool_) ['$14load_global.5', '$16load_attr.6']
    out0 = call $10load_attr.3(full_shape0, func=$10load_attr.3, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6, <string>:3))], vararg=None, varkwarg=None, target=None) ['$10load_attr.3', '$16load_attr.6', 'full_shape0', 'out0']
    $const24.9 = const(int, 0)               ['$const24.9']
    $const28.11 = const(NoneType, None)      ['$const28.11']
    $const30.12 = const(int, 1)              ['$const30.12']
    $32build_slice.13 = global(slice: <class 'slice'>) ['$32build_slice.13']
    $32build_slice.14 = call $32build_slice.13($const28.11, $const30.12, func=$32build_slice.13, args=(Var($const28.11, <string>:4), Var($const30.12, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None) ['$32build_slice.13', '$32build_slice.14', '$const28.11', '$const30.12']
    out0[$32build_slice.14] = $const24.9     ['$32build_slice.14', '$const24.9', 'out0']
    $const36.15 = const(int, 0)              ['$const36.15']
    $const40.17 = const(int, -1)             ['$const40.17']
    $const42.18 = const(NoneType, None)      ['$const42.18']
    $44build_slice.19 = global(slice: <class 'slice'>) ['$44build_slice.19']
    $44build_slice.20 = call $44build_slice.19($const40.17, $const42.18, func=$44build_slice.19, args=(Var($const40.17, <string>:5), Var($const42.18, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None) ['$44build_slice.19', '$44build_slice.20', '$const40.17', '$const42.18']
    out0[$44build_slice.20] = $const36.15    ['$44build_slice.20', '$const36.15', 'out0']
    $48load_global.21 = global(range: <class 'range'>) ['$48load_global.21']
    $50load_global.22 = global(min: <built-in function min>) ['$50load_global.22']
    $const52.23 = const(int, 0)              ['$const52.23']
    $const54.24 = const(int, -1)             ['$const54.24']
    $56call_function.25 = call $50load_global.22($const52.23, $const54.24, func=$50load_global.22, args=[Var($const52.23, <string>:6), Var($const54.24, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$50load_global.22', '$56call_function.25', '$const52.23', '$const54.24']
    $58unary_negative.26 = unary(fn=<built-in function neg>, value=$56call_function.25) ['$56call_function.25', '$58unary_negative.26']
    $const62.28 = const(int, 0)              ['$const62.28']
    $64binary_subscr.29 = getitem(value=full_shape0, index=$const62.28, fn=<built-in function getitem>) ['$64binary_subscr.29', '$const62.28', 'full_shape0']
    $66load_global.30 = global(max: <built-in function max>) ['$66load_global.30']
    $const68.31 = const(int, 0)              ['$const68.31']
    $const70.32 = const(int, 1)              ['$const70.32']
    $72call_function.33 = call $66load_global.30($const68.31, $const70.32, func=$66load_global.30, args=[Var($const68.31, <string>:6), Var($const70.32, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$66load_global.30', '$72call_function.33', '$const68.31', '$const70.32']
    $74binary_subtract.34 = $64binary_subscr.29 - $72call_function.33 ['$64binary_subscr.29', '$72call_function.33', '$74binary_subtract.34']
    $76call_function.35 = call $48load_global.21($58unary_negative.26, $74binary_subtract.34, func=$48load_global.21, args=[Var($58unary_negative.26, <string>:6), Var($74binary_subtract.34, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34', '$76call_function.35']
    $78get_iter.36 = getiter(value=$76call_function.35) ['$76call_function.35', '$78get_iter.36']
    $phi80.0 = $78get_iter.36                ['$78get_iter.36', '$phi80.0']
    jump 80                                  []
label 80:
    $80for_iter.1 = iternext(value=$phi80.0) ['$80for_iter.1', '$phi80.0']
    $80for_iter.2 = pair_first(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.2']
    $80for_iter.3 = pair_second(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.3']
    $phi82.1 = $80for_iter.2                 ['$80for_iter.2', '$phi82.1']
    branch $80for_iter.3, 82, 90             ['$80for_iter.3']
label 82:
    index00 = $phi82.1                       ['$phi82.1', 'index00']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 80                                  []
label 90:
    $92return_value.1 = cast(value=out0)     ['$92return_value.1', 'out0']
    return $92return_value.1                 ['$92return_value.1']

2025-01-31 15:31:39,479 - DEBUG - ==== SSA block analysis pass on 0
2025-01-31 15:31:39,479 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e86e6170>
2025-01-31 15:31:39,479 - DEBUG - on stmt: x = arg(0, name=x)
2025-01-31 15:31:39,479 - DEBUG - on stmt: full_shape0 = getattr(value=x, attr=shape)
2025-01-31 15:31:39,479 - DEBUG - on stmt: $8load_global.2.1 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:39,479 - DEBUG - on stmt: $10load_attr.3.1 = getattr(value=$8load_global.2.1, attr=empty)
2025-01-31 15:31:39,479 - DEBUG - on stmt: $14load_global.5.1 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:39,479 - DEBUG - on stmt: $16load_attr.6.1 = getattr(value=$14load_global.5.1, attr=bool_)
2025-01-31 15:31:39,479 - DEBUG - on stmt: out0 = call $10load_attr.3.1(full_shape0, func=$10load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:39,479 - DEBUG - on stmt: $const24.9.1 = const(int, 0)
2025-01-31 15:31:39,480 - DEBUG - on stmt: $const28.11.1 = const(NoneType, None)
2025-01-31 15:31:39,480 - DEBUG - on stmt: $const30.12.1 = const(int, 1)
2025-01-31 15:31:39,480 - DEBUG - on stmt: $32build_slice.13.1 = global(slice: <class 'slice'>)
2025-01-31 15:31:39,480 - DEBUG - on stmt: $32build_slice.14.1 = call $32build_slice.13.1($const28.11.1, $const30.12.1, func=$32build_slice.13.1, args=(Var($const28.11.1, <string>:4), Var($const30.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:39,480 - DEBUG - on stmt: out0[$32build_slice.14.1] = $const24.9.1
2025-01-31 15:31:39,480 - DEBUG - on stmt: $const36.15.1 = const(int, 0)
2025-01-31 15:31:39,480 - DEBUG - on stmt: $const40.17.1 = const(int, -1)
2025-01-31 15:31:39,480 - DEBUG - on stmt: $const42.18.1 = const(NoneType, None)
2025-01-31 15:31:39,480 - DEBUG - on stmt: $44build_slice.19.1 = global(slice: <class 'slice'>)
2025-01-31 15:31:39,480 - DEBUG - on stmt: $44build_slice.20.1 = call $44build_slice.19.1($const40.17.1, $const42.18.1, func=$44build_slice.19.1, args=(Var($const40.17.1, <string>:5), Var($const42.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:39,480 - DEBUG - on stmt: out0[$44build_slice.20.1] = $const36.15.1
2025-01-31 15:31:39,480 - DEBUG - on stmt: $48load_global.21.1 = global(range: <class 'range'>)
2025-01-31 15:31:39,480 - DEBUG - on stmt: $50load_global.22.1 = global(min: <built-in function min>)
2025-01-31 15:31:39,480 - DEBUG - on stmt: $const52.23.1 = const(int, 0)
2025-01-31 15:31:39,480 - DEBUG - on stmt: $const54.24.1 = const(int, -1)
2025-01-31 15:31:39,480 - DEBUG - on stmt: $56call_function.25.1 = call $50load_global.22.1($const52.23.1, $const54.24.1, func=$50load_global.22.1, args=[Var($const52.23.1, <string>:6), Var($const54.24.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:39,480 - DEBUG - on stmt: $58unary_negative.26.1 = unary(fn=<built-in function neg>, value=$56call_function.25.1)
2025-01-31 15:31:39,480 - DEBUG - on stmt: $const62.28.1 = const(int, 0)
2025-01-31 15:31:39,480 - DEBUG - on stmt: $64binary_subscr.29.1 = getitem(value=full_shape0, index=$const62.28.1, fn=<built-in function getitem>)
2025-01-31 15:31:39,480 - DEBUG - on stmt: $66load_global.30.1 = global(max: <built-in function max>)
2025-01-31 15:31:39,480 - DEBUG - on stmt: $const68.31.1 = const(int, 0)
2025-01-31 15:31:39,480 - DEBUG - on stmt: $const70.32.1 = const(int, 1)
2025-01-31 15:31:39,480 - DEBUG - on stmt: $72call_function.33.1 = call $66load_global.30.1($const68.31.1, $const70.32.1, func=$66load_global.30.1, args=[Var($const68.31.1, <string>:6), Var($const70.32.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:39,480 - DEBUG - on stmt: $74binary_subtract.34.1 = $64binary_subscr.29.1 - $72call_function.33.1
2025-01-31 15:31:39,481 - DEBUG - on stmt: $76call_function.35.1 = call $48load_global.21.1($58unary_negative.26.1, $74binary_subtract.34.1, func=$48load_global.21.1, args=[Var($58unary_negative.26.1, <string>:6), Var($74binary_subtract.34.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:39,481 - DEBUG - on stmt: $78get_iter.36.1 = getiter(value=$76call_function.35.1)
2025-01-31 15:31:39,481 - DEBUG - on stmt: $phi80.0.1 = $78get_iter.36.1
2025-01-31 15:31:39,481 - DEBUG - on stmt: jump 80
2025-01-31 15:31:39,481 - DEBUG - ==== SSA block analysis pass on 80
2025-01-31 15:31:39,481 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e86e6170>
2025-01-31 15:31:39,481 - DEBUG - on stmt: $80for_iter.1.1 = iternext(value=$phi80.0.1)
2025-01-31 15:31:39,481 - DEBUG - on stmt: $80for_iter.2.1 = pair_first(value=$80for_iter.1.1)
2025-01-31 15:31:39,481 - DEBUG - on stmt: $80for_iter.3.1 = pair_second(value=$80for_iter.1.1)
2025-01-31 15:31:39,481 - DEBUG - on stmt: $phi82.1.1 = $80for_iter.2.1
2025-01-31 15:31:39,481 - DEBUG - on stmt: branch $80for_iter.3.1, 82, 92
2025-01-31 15:31:39,481 - DEBUG - ==== SSA block analysis pass on 82
2025-01-31 15:31:39,481 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e86e6170>
2025-01-31 15:31:39,481 - DEBUG - on stmt: index00 = $phi82.1.1
2025-01-31 15:31:39,481 - DEBUG - on stmt: jump 90
2025-01-31 15:31:39,481 - DEBUG - ==== SSA block analysis pass on 92
2025-01-31 15:31:39,481 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e86e6170>
2025-01-31 15:31:39,481 - DEBUG - on stmt: $92return_value.1.1 = cast(value=out0)
2025-01-31 15:31:39,481 - DEBUG - on stmt: return $92return_value.1.1
2025-01-31 15:31:39,481 - DEBUG - ==== SSA block analysis pass on 90
2025-01-31 15:31:39,481 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e86e6170>
2025-01-31 15:31:39,481 - DEBUG - on stmt: $const4.1 = const(int, 0)
2025-01-31 15:31:39,481 - DEBUG - on stmt: stencil_index = $const4.1 + index00
2025-01-31 15:31:39,481 - DEBUG - on stmt: $6binary_subscr.2 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-01-31 15:31:39,481 - DEBUG - on stmt: $const10.4 = const(int, -1)
2025-01-31 15:31:39,481 - DEBUG - on stmt: stencil_index.1 = $const10.4 + index00
2025-01-31 15:31:39,481 - DEBUG - on stmt: $12binary_subscr.5 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2025-01-31 15:31:39,482 - DEBUG - on stmt: $14compare_op.6 = $6binary_subscr.2 < $12binary_subscr.5
2025-01-31 15:31:39,482 - DEBUG - on stmt: $const18.8 = const(int, 0)
2025-01-31 15:31:39,482 - DEBUG - on stmt: stencil_index.2 = $const18.8 + index00
2025-01-31 15:31:39,482 - DEBUG - on stmt: $20binary_subscr.9 = getitem(value=x, index=stencil_index.2, fn=<built-in function getitem>)
2025-01-31 15:31:39,482 - DEBUG - on stmt: $const24.11 = const(int, 1)
2025-01-31 15:31:39,482 - DEBUG - on stmt: stencil_index.3 = $const24.11 + index00
2025-01-31 15:31:39,482 - DEBUG - on stmt: $26binary_subscr.12 = getitem(value=x, index=stencil_index.3, fn=<built-in function getitem>)
2025-01-31 15:31:39,482 - DEBUG - on stmt: $28compare_op.13 = $20binary_subscr.9 <= $26binary_subscr.12
2025-01-31 15:31:39,482 - DEBUG - on stmt: $30binary_and.14 = $14compare_op.6 & $28compare_op.13
2025-01-31 15:31:39,482 - DEBUG - on stmt: $32return_value.15 = cast(value=$30binary_and.14)
2025-01-31 15:31:39,482 - DEBUG - on stmt: out0[index00] = $32return_value.15
2025-01-31 15:31:39,482 - DEBUG - on stmt: jump 91
2025-01-31 15:31:39,482 - DEBUG - ==== SSA block analysis pass on 91
2025-01-31 15:31:39,482 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e86e6170>
2025-01-31 15:31:39,482 - DEBUG - on stmt: jump 80
2025-01-31 15:31:39,483 - DEBUG - defs defaultdict(<class 'list'>,
            {'$10load_attr.3.1': [(<numba.core.ir.Assign object at 0x7c89e86c9ff0>,
                                   0)],
             '$12binary_subscr.5': [(<numba.core.ir.Assign object at 0x7c89e86c8af0>,
                                     90)],
             '$14compare_op.6': [(<numba.core.ir.Assign object at 0x7c89e860fbe0>,
                                  90)],
             '$14load_global.5.1': [(<numba.core.ir.Assign object at 0x7c89e86c9c00>,
                                     0)],
             '$16load_attr.6.1': [(<numba.core.ir.Assign object at 0x7c89e86c9a80>,
                                   0)],
             '$20binary_subscr.9': [(<numba.core.ir.Assign object at 0x7c89e86c8d30>,
                                     90)],
             '$26binary_subscr.12': [(<numba.core.ir.Assign object at 0x7c89e86c8f70>,
                                      90)],
             '$28compare_op.13': [(<numba.core.ir.Assign object at 0x7c89e86dd360>,
                                   90)],
             '$30binary_and.14': [(<numba.core.ir.Assign object at 0x7c89e86dd540>,
                                   90)],
             '$32build_slice.13.1': [(<numba.core.ir.Assign object at 0x7c89e86cacb0>,
                                      0)],
             '$32build_slice.14.1': [(<numba.core.ir.Assign object at 0x7c89e86cadd0>,
                                      0)],
             '$32return_value.15': [(<numba.core.ir.Assign object at 0x7c89e86ddff0>,
                                     90)],
             '$44build_slice.19.1': [(<numba.core.ir.Assign object at 0x7c89e86cb5b0>,
                                      0)],
             '$44build_slice.20.1': [(<numba.core.ir.Assign object at 0x7c89e86cb6d0>,
                                      0)],
             '$48load_global.21.1': [(<numba.core.ir.Assign object at 0x7c89e86cb910>,
                                      0)],
             '$50load_global.22.1': [(<numba.core.ir.Assign object at 0x7c89e86cba90>,
                                      0)],
             '$56call_function.25.1': [(<numba.core.ir.Assign object at 0x7c89e86cbf70>,
                                        0)],
             '$58unary_negative.26.1': [(<numba.core.ir.Assign object at 0x7c89e86200d0>,
                                         0)],
             '$64binary_subscr.29.1': [(<numba.core.ir.Assign object at 0x7c89e8620520>,
                                        0)],
             '$66load_global.30.1': [(<numba.core.ir.Assign object at 0x7c89e8620670>,
                                      0)],
             '$6binary_subscr.2': [(<numba.core.ir.Assign object at 0x7c89e86c88b0>,
                                    90)],
             '$72call_function.33.1': [(<numba.core.ir.Assign object at 0x7c89e8620b50>,
                                        0)],
             '$74binary_subtract.34.1': [(<numba.core.ir.Assign object at 0x7c89e8620ca0>,
                                          0)],
             '$76call_function.35.1': [(<numba.core.ir.Assign object at 0x7c89e8620e50>,
                                        0)],
             '$78get_iter.36.1': [(<numba.core.ir.Assign object at 0x7c89e8620f70>,
                                   0)],
             '$80for_iter.1.1': [(<numba.core.ir.Assign object at 0x7c89e8621060>,
                                  80)],
             '$80for_iter.2.1': [(<numba.core.ir.Assign object at 0x7c89e8621180>,
                                  80)],
             '$80for_iter.3.1': [(<numba.core.ir.Assign object at 0x7c89e86212a0>,
                                  80)],
             '$8load_global.2.1': [(<numba.core.ir.Assign object at 0x7c89e86ca170>,
                                    0)],
             '$92return_value.1.1': [(<numba.core.ir.Assign object at 0x7c89e8621bd0>,
                                      92)],
             '$const10.4': [(<numba.core.ir.Assign object at 0x7c89e862ca00>,
                             90)],
             '$const18.8': [(<numba.core.ir.Assign object at 0x7c89e860fb50>,
                             90)],
             '$const24.11': [(<numba.core.ir.Assign object at 0x7c89e87f13c0>,
                              90)],
             '$const24.9.1': [(<numba.core.ir.Assign object at 0x7c89e86c9330>,
                               0)],
             '$const28.11.1': [(<numba.core.ir.Assign object at 0x7c89e86c9000>,
                                0)],
             '$const30.12.1': [(<numba.core.ir.Assign object at 0x7c89e86cab30>,
                                0)],
             '$const36.15.1': [(<numba.core.ir.Assign object at 0x7c89e86cb010>,
                                0)],
             '$const4.1': [(<numba.core.ir.Assign object at 0x7c89e862e6b0>,
                            90)],
             '$const40.17.1': [(<numba.core.ir.Assign object at 0x7c89e86cb2b0>,
                                0)],
             '$const42.18.1': [(<numba.core.ir.Assign object at 0x7c89e86cb430>,
                                0)],
             '$const52.23.1': [(<numba.core.ir.Assign object at 0x7c89e86cbc10>,
                                0)],
             '$const54.24.1': [(<numba.core.ir.Assign object at 0x7c89e86cbd90>,
                                0)],
             '$const62.28.1': [(<numba.core.ir.Assign object at 0x7c89e8620370>,
                                0)],
             '$const68.31.1': [(<numba.core.ir.Assign object at 0x7c89e86207f0>,
                                0)],
             '$const70.32.1': [(<numba.core.ir.Assign object at 0x7c89e8620970>,
                                0)],
             '$phi80.0.1': [(<numba.core.ir.Assign object at 0x7c89e86ca500>,
                             0)],
             '$phi82.1.1': [(<numba.core.ir.Assign object at 0x7c89e86201f0>,
                             80)],
             'full_shape0': [(<numba.core.ir.Assign object at 0x7c89e86ca410>,
                              0)],
             'index00': [(<numba.core.ir.Assign object at 0x7c89e8621570>, 82)],
             'out0': [(<numba.core.ir.Assign object at 0x7c89e86c94b0>, 0)],
             'stencil_index': [(<numba.core.ir.Assign object at 0x7c89e86dfe80>,
                                90)],
             'stencil_index.1': [(<numba.core.ir.Assign object at 0x7c89e86c8a30>,
                                  90)],
             'stencil_index.2': [(<numba.core.ir.Assign object at 0x7c89e86c8c70>,
                                  90)],
             'stencil_index.3': [(<numba.core.ir.Assign object at 0x7c89e86c8eb0>,
                                  90)],
             'x': [(<numba.core.ir.Assign object at 0x7c89e86ca6b0>, 0)]})
2025-01-31 15:31:39,483 - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x7c89e86e6170>
2025-01-31 15:31:39,668 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=1068)
           2	LOAD_GLOBAL(arg=0, lineno=1082)
           4	LOAD_FAST(arg=0, lineno=1082)
           6	CALL_FUNCTION(arg=1, lineno=1082)
           8	LOAD_FAST(arg=1, lineno=1082)
          10	LOAD_CONST(arg=1, lineno=1082)
          12	LOAD_CONST(arg=1, lineno=1082)
          14	BUILD_SLICE(arg=2, lineno=1082)
          16	STORE_SUBSCR(arg=None, lineno=1082)
          18	LOAD_CONST(arg=1, lineno=1082)
          20	RETURN_VALUE(arg=None, lineno=1082)
2025-01-31 15:31:39,668 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:31:39,668 - DEBUG - stack: []
2025-01-31 15:31:39,668 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:31:39,668 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=1068)
2025-01-31 15:31:39,668 - DEBUG - stack []
2025-01-31 15:31:39,668 - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=1082)
2025-01-31 15:31:39,668 - DEBUG - stack []
2025-01-31 15:31:39,668 - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=1082)
2025-01-31 15:31:39,668 - DEBUG - stack ['$2load_global.0']
2025-01-31 15:31:39,668 - DEBUG - dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=1082)
2025-01-31 15:31:39,668 - DEBUG - stack ['$2load_global.0', '$x4.1']
2025-01-31 15:31:39,668 - DEBUG - dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=1082)
2025-01-31 15:31:39,668 - DEBUG - stack ['$6call_function.2']
2025-01-31 15:31:39,668 - DEBUG - dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=1082)
2025-01-31 15:31:39,668 - DEBUG - stack ['$6call_function.2', '$y8.3']
2025-01-31 15:31:39,668 - DEBUG - dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=1082)
2025-01-31 15:31:39,668 - DEBUG - stack ['$6call_function.2', '$y8.3', '$const10.4']
2025-01-31 15:31:39,668 - DEBUG - dispatch pc=14, inst=BUILD_SLICE(arg=2, lineno=1082)
2025-01-31 15:31:39,668 - DEBUG - stack ['$6call_function.2', '$y8.3', '$const10.4', '$const12.5']
2025-01-31 15:31:39,668 - DEBUG - dispatch pc=16, inst=STORE_SUBSCR(arg=None, lineno=1082)
2025-01-31 15:31:39,668 - DEBUG - stack ['$6call_function.2', '$y8.3', '$14build_slice.7']
2025-01-31 15:31:39,668 - DEBUG - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1082)
2025-01-31 15:31:39,668 - DEBUG - stack []
2025-01-31 15:31:39,668 - DEBUG - dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=1082)
2025-01-31 15:31:39,668 - DEBUG - stack ['$const18.8']
2025-01-31 15:31:39,669 - DEBUG - end state. edges=[]
2025-01-31 15:31:39,669 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:31:39,669 - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-01-31 15:31:39,669 - DEBUG - defmap: {}
2025-01-31 15:31:39,669 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:39,669 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:39,669 - DEBUG - keep phismap: {}
2025-01-31 15:31:39,669 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-01-31 15:31:39,669 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:31:39,669 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$x4.1'}), (6, {'func': '$2load_global.0', 'args': ['$x4.1'], 'res': '$6call_function.2'}), (8, {'res': '$y8.3'}), (10, {'res': '$const10.4'}), (12, {'res': '$const12.5'}), (14, {'start': '$const10.4', 'stop': '$const12.5', 'step': None, 'res': '$14build_slice.7', 'slicevar': '$14build_slice.6'}), (16, {'target': '$y8.3', 'index': '$14build_slice.7', 'value': '$6call_function.2'}), (18, {'res': '$const18.8'}), (20, {'retval': '$const18.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:39,669 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    y = arg(1, name=y)                       ['y']
    $2load_global.0 = global(_localmin_sten: <numba.stencils.stencil.StencilFunc object at 0x7c89eba2d810>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, utils.py:1068)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$6call_function.2', 'x']
    $const10.4 = const(NoneType, None)       ['$const10.4']
    $const12.5 = const(NoneType, None)       ['$const12.5']
    $14build_slice.6 = global(slice: <class 'slice'>) ['$14build_slice.6']
    $14build_slice.7 = call $14build_slice.6($const10.4, $const12.5, func=$14build_slice.6, args=(Var($const10.4, utils.py:1082), Var($const12.5, utils.py:1082)), kws=(), vararg=None, varkwarg=None, target=None) ['$14build_slice.6', '$14build_slice.7', '$const10.4', '$const12.5']
    y[$14build_slice.7] = $6call_function.2  ['$14build_slice.7', '$6call_function.2', 'y']
    $const18.8 = const(NoneType, None)       ['$const18.8']
    $20return_value.9 = cast(value=$const18.8) ['$20return_value.9', '$const18.8']
    return $20return_value.9                 ['$20return_value.9']

2025-01-31 15:31:39,673 - DEBUG - ==== SSA block analysis pass on 0
2025-01-31 15:31:39,673 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8696260>
2025-01-31 15:31:39,673 - DEBUG - on stmt: x = arg(0, name=x)
2025-01-31 15:31:39,673 - DEBUG - on stmt: y = arg(1, name=y)
2025-01-31 15:31:39,673 - DEBUG - on stmt: $2load_global.0 = global(_localmin_sten: <numba.stencils.stencil.StencilFunc object at 0x7c89eba2d810>)
2025-01-31 15:31:39,673 - DEBUG - on stmt: $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, utils.py:1068)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:39,673 - DEBUG - on stmt: $const10.4 = const(NoneType, None)
2025-01-31 15:31:39,673 - DEBUG - on stmt: $const12.5 = const(NoneType, None)
2025-01-31 15:31:39,673 - DEBUG - on stmt: $14build_slice.6 = global(slice: <class 'slice'>)
2025-01-31 15:31:39,673 - DEBUG - on stmt: $14build_slice.7 = call $14build_slice.6($const10.4, $const12.5, func=$14build_slice.6, args=(Var($const10.4, utils.py:1082), Var($const12.5, utils.py:1082)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:39,673 - DEBUG - on stmt: y[slice(None, None, None)] = $6call_function.2
2025-01-31 15:31:39,673 - DEBUG - on stmt: $const18.8 = const(NoneType, None)
2025-01-31 15:31:39,673 - DEBUG - on stmt: $20return_value.9 = cast(value=$const18.8)
2025-01-31 15:31:39,673 - DEBUG - on stmt: return $20return_value.9
2025-01-31 15:31:39,674 - DEBUG - defs defaultdict(<class 'list'>,
            {'$14build_slice.6': [(<numba.core.ir.Assign object at 0x7c89e848d540>,
                                   0)],
             '$14build_slice.7': [(<numba.core.ir.Assign object at 0x7c89e848d660>,
                                   0)],
             '$20return_value.9': [(<numba.core.ir.Assign object at 0x7c89e848da20>,
                                    0)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x7c89e848cd00>,
                                  0)],
             '$6call_function.2': [(<numba.core.ir.Assign object at 0x7c89e848d000>,
                                    0)],
             '$const10.4': [(<numba.core.ir.Assign object at 0x7c89e848d240>,
                             0)],
             '$const12.5': [(<numba.core.ir.Assign object at 0x7c89e848d3c0>,
                             0)],
             '$const18.8': [(<numba.core.ir.Assign object at 0x7c89e848d8a0>,
                             0)],
             'x': [(<numba.core.ir.Assign object at 0x7c89e848c490>, 0)],
             'y': [(<numba.core.ir.Assign object at 0x7c89e848c220>, 0)]})
2025-01-31 15:31:39,674 - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x7c89e8696260>
2025-01-31 15:31:39,687 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_FAST(arg=0, lineno=2)
           4	LOAD_ATTR(arg=0, lineno=2)
           6	STORE_FAST(arg=1, lineno=2)
           8	LOAD_GLOBAL(arg=1, lineno=3)
          10	LOAD_ATTR(arg=2, lineno=3)
          12	LOAD_FAST(arg=1, lineno=3)
          14	LOAD_GLOBAL(arg=1, lineno=3)
          16	LOAD_ATTR(arg=3, lineno=3)
          18	LOAD_CONST(arg=1, lineno=3)
          20	CALL_FUNCTION_KW(arg=2, lineno=3)
          22	STORE_FAST(arg=2, lineno=3)
          24	LOAD_CONST(arg=2, lineno=4)
          26	LOAD_FAST(arg=2, lineno=4)
          28	LOAD_CONST(arg=0, lineno=4)
          30	LOAD_CONST(arg=3, lineno=4)
          32	BUILD_SLICE(arg=2, lineno=4)
          34	STORE_SUBSCR(arg=None, lineno=4)
          36	LOAD_CONST(arg=2, lineno=5)
          38	LOAD_FAST(arg=2, lineno=5)
          40	LOAD_CONST(arg=4, lineno=5)
          42	LOAD_CONST(arg=0, lineno=5)
          44	BUILD_SLICE(arg=2, lineno=5)
          46	STORE_SUBSCR(arg=None, lineno=5)
          48	LOAD_GLOBAL(arg=4, lineno=6)
          50	LOAD_GLOBAL(arg=5, lineno=6)
          52	LOAD_CONST(arg=2, lineno=6)
          54	LOAD_CONST(arg=4, lineno=6)
          56	CALL_FUNCTION(arg=2, lineno=6)
          58	UNARY_NEGATIVE(arg=None, lineno=6)
          60	LOAD_FAST(arg=1, lineno=6)
          62	LOAD_CONST(arg=2, lineno=6)
          64	BINARY_SUBSCR(arg=None, lineno=6)
          66	LOAD_GLOBAL(arg=6, lineno=6)
          68	LOAD_CONST(arg=2, lineno=6)
          70	LOAD_CONST(arg=3, lineno=6)
          72	CALL_FUNCTION(arg=2, lineno=6)
          74	BINARY_SUBTRACT(arg=None, lineno=6)
          76	CALL_FUNCTION(arg=2, lineno=6)
          78	GET_ITER(arg=None, lineno=6)
>         80	FOR_ITER(arg=4, lineno=6)
          82	STORE_FAST(arg=3, lineno=6)
          84	LOAD_CONST(arg=2, lineno=7)
          86	STORE_FAST(arg=4, lineno=7)
          88	JUMP_ABSOLUTE(arg=41, lineno=7)
>         90	LOAD_FAST(arg=2, lineno=8)
          92	RETURN_VALUE(arg=None, lineno=8)
2025-01-31 15:31:39,687 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:31:39,687 - DEBUG - stack: []
2025-01-31 15:31:39,687 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:31:39,687 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=1)
2025-01-31 15:31:39,687 - DEBUG - stack []
2025-01-31 15:31:39,687 - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=2)
2025-01-31 15:31:39,687 - DEBUG - stack []
2025-01-31 15:31:39,687 - DEBUG - dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=2)
2025-01-31 15:31:39,687 - DEBUG - stack ['$x2.0']
2025-01-31 15:31:39,687 - DEBUG - dispatch pc=6, inst=STORE_FAST(arg=1, lineno=2)
2025-01-31 15:31:39,687 - DEBUG - stack ['$4load_attr.1']
2025-01-31 15:31:39,687 - DEBUG - dispatch pc=8, inst=LOAD_GLOBAL(arg=1, lineno=3)
2025-01-31 15:31:39,687 - DEBUG - stack []
2025-01-31 15:31:39,687 - DEBUG - dispatch pc=10, inst=LOAD_ATTR(arg=2, lineno=3)
2025-01-31 15:31:39,687 - DEBUG - stack ['$8load_global.2']
2025-01-31 15:31:39,688 - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=3)
2025-01-31 15:31:39,688 - DEBUG - stack ['$10load_attr.3']
2025-01-31 15:31:39,688 - DEBUG - dispatch pc=14, inst=LOAD_GLOBAL(arg=1, lineno=3)
2025-01-31 15:31:39,688 - DEBUG - stack ['$10load_attr.3', '$full_shape012.4']
2025-01-31 15:31:39,688 - DEBUG - dispatch pc=16, inst=LOAD_ATTR(arg=3, lineno=3)
2025-01-31 15:31:39,688 - DEBUG - stack ['$10load_attr.3', '$full_shape012.4', '$14load_global.5']
2025-01-31 15:31:39,688 - DEBUG - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=3)
2025-01-31 15:31:39,688 - DEBUG - stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6']
2025-01-31 15:31:39,688 - DEBUG - dispatch pc=20, inst=CALL_FUNCTION_KW(arg=2, lineno=3)
2025-01-31 15:31:39,688 - DEBUG - stack ['$10load_attr.3', '$full_shape012.4', '$16load_attr.6', '$const18.7']
2025-01-31 15:31:39,688 - DEBUG - dispatch pc=22, inst=STORE_FAST(arg=2, lineno=3)
2025-01-31 15:31:39,688 - DEBUG - stack ['$20call_function_kw.8']
2025-01-31 15:31:39,688 - DEBUG - dispatch pc=24, inst=LOAD_CONST(arg=2, lineno=4)
2025-01-31 15:31:39,688 - DEBUG - stack []
2025-01-31 15:31:39,688 - DEBUG - dispatch pc=26, inst=LOAD_FAST(arg=2, lineno=4)
2025-01-31 15:31:39,688 - DEBUG - stack ['$const24.9']
2025-01-31 15:31:39,688 - DEBUG - dispatch pc=28, inst=LOAD_CONST(arg=0, lineno=4)
2025-01-31 15:31:39,688 - DEBUG - stack ['$const24.9', '$out026.10']
2025-01-31 15:31:39,688 - DEBUG - dispatch pc=30, inst=LOAD_CONST(arg=3, lineno=4)
2025-01-31 15:31:39,688 - DEBUG - stack ['$const24.9', '$out026.10', '$const28.11']
2025-01-31 15:31:39,688 - DEBUG - dispatch pc=32, inst=BUILD_SLICE(arg=2, lineno=4)
2025-01-31 15:31:39,688 - DEBUG - stack ['$const24.9', '$out026.10', '$const28.11', '$const30.12']
2025-01-31 15:31:39,688 - DEBUG - dispatch pc=34, inst=STORE_SUBSCR(arg=None, lineno=4)
2025-01-31 15:31:39,688 - DEBUG - stack ['$const24.9', '$out026.10', '$32build_slice.14']
2025-01-31 15:31:39,688 - DEBUG - dispatch pc=36, inst=LOAD_CONST(arg=2, lineno=5)
2025-01-31 15:31:39,688 - DEBUG - stack []
2025-01-31 15:31:39,688 - DEBUG - dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=5)
2025-01-31 15:31:39,688 - DEBUG - stack ['$const36.15']
2025-01-31 15:31:39,688 - DEBUG - dispatch pc=40, inst=LOAD_CONST(arg=4, lineno=5)
2025-01-31 15:31:39,689 - DEBUG - stack ['$const36.15', '$out038.16']
2025-01-31 15:31:39,689 - DEBUG - dispatch pc=42, inst=LOAD_CONST(arg=0, lineno=5)
2025-01-31 15:31:39,689 - DEBUG - stack ['$const36.15', '$out038.16', '$const40.17']
2025-01-31 15:31:39,689 - DEBUG - dispatch pc=44, inst=BUILD_SLICE(arg=2, lineno=5)
2025-01-31 15:31:39,689 - DEBUG - stack ['$const36.15', '$out038.16', '$const40.17', '$const42.18']
2025-01-31 15:31:39,689 - DEBUG - dispatch pc=46, inst=STORE_SUBSCR(arg=None, lineno=5)
2025-01-31 15:31:39,689 - DEBUG - stack ['$const36.15', '$out038.16', '$44build_slice.20']
2025-01-31 15:31:39,689 - DEBUG - dispatch pc=48, inst=LOAD_GLOBAL(arg=4, lineno=6)
2025-01-31 15:31:39,689 - DEBUG - stack []
2025-01-31 15:31:39,689 - DEBUG - dispatch pc=50, inst=LOAD_GLOBAL(arg=5, lineno=6)
2025-01-31 15:31:39,689 - DEBUG - stack ['$48load_global.21']
2025-01-31 15:31:39,689 - DEBUG - dispatch pc=52, inst=LOAD_CONST(arg=2, lineno=6)
2025-01-31 15:31:39,689 - DEBUG - stack ['$48load_global.21', '$50load_global.22']
2025-01-31 15:31:39,689 - DEBUG - dispatch pc=54, inst=LOAD_CONST(arg=4, lineno=6)
2025-01-31 15:31:39,689 - DEBUG - stack ['$48load_global.21', '$50load_global.22', '$const52.23']
2025-01-31 15:31:39,689 - DEBUG - dispatch pc=56, inst=CALL_FUNCTION(arg=2, lineno=6)
2025-01-31 15:31:39,689 - DEBUG - stack ['$48load_global.21', '$50load_global.22', '$const52.23', '$const54.24']
2025-01-31 15:31:39,689 - DEBUG - dispatch pc=58, inst=UNARY_NEGATIVE(arg=None, lineno=6)
2025-01-31 15:31:39,689 - DEBUG - stack ['$48load_global.21', '$56call_function.25']
2025-01-31 15:31:39,689 - DEBUG - dispatch pc=60, inst=LOAD_FAST(arg=1, lineno=6)
2025-01-31 15:31:39,689 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26']
2025-01-31 15:31:39,689 - DEBUG - dispatch pc=62, inst=LOAD_CONST(arg=2, lineno=6)
2025-01-31 15:31:39,689 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27']
2025-01-31 15:31:39,689 - DEBUG - dispatch pc=64, inst=BINARY_SUBSCR(arg=None, lineno=6)
2025-01-31 15:31:39,689 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$full_shape060.27', '$const62.28']
2025-01-31 15:31:39,689 - DEBUG - dispatch pc=66, inst=LOAD_GLOBAL(arg=6, lineno=6)
2025-01-31 15:31:39,689 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29']
2025-01-31 15:31:39,689 - DEBUG - dispatch pc=68, inst=LOAD_CONST(arg=2, lineno=6)
2025-01-31 15:31:39,689 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30']
2025-01-31 15:31:39,690 - DEBUG - dispatch pc=70, inst=LOAD_CONST(arg=3, lineno=6)
2025-01-31 15:31:39,690 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31']
2025-01-31 15:31:39,690 - DEBUG - dispatch pc=72, inst=CALL_FUNCTION(arg=2, lineno=6)
2025-01-31 15:31:39,690 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$66load_global.30', '$const68.31', '$const70.32']
2025-01-31 15:31:39,690 - DEBUG - dispatch pc=74, inst=BINARY_SUBTRACT(arg=None, lineno=6)
2025-01-31 15:31:39,690 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$64binary_subscr.29', '$72call_function.33']
2025-01-31 15:31:39,690 - DEBUG - dispatch pc=76, inst=CALL_FUNCTION(arg=2, lineno=6)
2025-01-31 15:31:39,690 - DEBUG - stack ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34']
2025-01-31 15:31:39,690 - DEBUG - dispatch pc=78, inst=GET_ITER(arg=None, lineno=6)
2025-01-31 15:31:39,690 - DEBUG - stack ['$76call_function.35']
2025-01-31 15:31:39,690 - DEBUG - end state. edges=[Edge(pc=80, stack=('$78get_iter.36',), blockstack=(), npush=0)]
2025-01-31 15:31:39,690 - DEBUG - pending: deque([State(pc_initial=80 nstack_initial=1)])
2025-01-31 15:31:39,690 - DEBUG - stack: ['$phi80.0']
2025-01-31 15:31:39,690 - DEBUG - state.pc_initial: State(pc_initial=80 nstack_initial=1)
2025-01-31 15:31:39,690 - DEBUG - dispatch pc=80, inst=FOR_ITER(arg=4, lineno=6)
2025-01-31 15:31:39,690 - DEBUG - stack ['$phi80.0']
2025-01-31 15:31:39,690 - DEBUG - end state. edges=[Edge(pc=90, stack=(), blockstack=(), npush=0), Edge(pc=82, stack=('$phi80.0', '$80for_iter.2'), blockstack=(), npush=0)]
2025-01-31 15:31:39,690 - DEBUG - pending: deque([State(pc_initial=90 nstack_initial=0), State(pc_initial=82 nstack_initial=2)])
2025-01-31 15:31:39,690 - DEBUG - stack: []
2025-01-31 15:31:39,690 - DEBUG - state.pc_initial: State(pc_initial=90 nstack_initial=0)
2025-01-31 15:31:39,690 - DEBUG - dispatch pc=90, inst=LOAD_FAST(arg=2, lineno=8)
2025-01-31 15:31:39,690 - DEBUG - stack []
2025-01-31 15:31:39,690 - DEBUG - dispatch pc=92, inst=RETURN_VALUE(arg=None, lineno=8)
2025-01-31 15:31:39,690 - DEBUG - stack ['$out090.0']
2025-01-31 15:31:39,690 - DEBUG - end state. edges=[]
2025-01-31 15:31:39,690 - DEBUG - pending: deque([State(pc_initial=82 nstack_initial=2)])
2025-01-31 15:31:39,690 - DEBUG - stack: ['$phi82.0', '$phi82.1']
2025-01-31 15:31:39,690 - DEBUG - state.pc_initial: State(pc_initial=82 nstack_initial=2)
2025-01-31 15:31:39,691 - DEBUG - dispatch pc=82, inst=STORE_FAST(arg=3, lineno=6)
2025-01-31 15:31:39,691 - DEBUG - stack ['$phi82.0', '$phi82.1']
2025-01-31 15:31:39,691 - DEBUG - dispatch pc=84, inst=LOAD_CONST(arg=2, lineno=7)
2025-01-31 15:31:39,691 - DEBUG - stack ['$phi82.0']
2025-01-31 15:31:39,691 - DEBUG - dispatch pc=86, inst=STORE_FAST(arg=4, lineno=7)
2025-01-31 15:31:39,691 - DEBUG - stack ['$phi82.0', '$const84.2']
2025-01-31 15:31:39,691 - DEBUG - dispatch pc=88, inst=JUMP_ABSOLUTE(arg=41, lineno=7)
2025-01-31 15:31:39,691 - DEBUG - stack ['$phi82.0']
2025-01-31 15:31:39,691 - DEBUG - end state. edges=[Edge(pc=80, stack=('$phi82.0',), blockstack=(), npush=0)]
2025-01-31 15:31:39,691 - DEBUG - pending: deque([State(pc_initial=80 nstack_initial=1)])
2025-01-31 15:31:39,691 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:31:39,691 - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=80 nstack_initial=1): {'$phi80.0'},
             State(pc_initial=82 nstack_initial=2): {'$phi82.1'},
             State(pc_initial=90 nstack_initial=0): set()})
2025-01-31 15:31:39,691 - DEBUG - defmap: {'$phi80.0': State(pc_initial=0 nstack_initial=0),
 '$phi82.1': State(pc_initial=80 nstack_initial=1)}
2025-01-31 15:31:39,691 - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi82.0', State(pc_initial=82 nstack_initial=2))},
             '$phi82.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-01-31 15:31:39,691 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-01-31 15:31:39,692 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-01-31 15:31:39,692 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi80.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.0': {('$78get_iter.36',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi82.1': {('$80for_iter.2',
                           State(pc_initial=80 nstack_initial=1))}})
2025-01-31 15:31:39,692 - DEBUG - keep phismap: {'$phi80.0': {('$78get_iter.36', State(pc_initial=0 nstack_initial=0))},
 '$phi82.1': {('$80for_iter.2', State(pc_initial=80 nstack_initial=1))}}
2025-01-31 15:31:39,692 - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi80.0': '$78get_iter.36'},
             State(pc_initial=80 nstack_initial=1): {'$phi82.1': '$80for_iter.2'}})
2025-01-31 15:31:39,692 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:31:39,692 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'item': '$x2.0', 'res': '$4load_attr.1'}), (6, {'value': '$4load_attr.1'}), (8, {'res': '$8load_global.2'}), (10, {'item': '$8load_global.2', 'res': '$10load_attr.3'}), (12, {'res': '$full_shape012.4'}), (14, {'res': '$14load_global.5'}), (16, {'item': '$14load_global.5', 'res': '$16load_attr.6'}), (18, {'res': '$const18.7'}), (20, {'func': '$10load_attr.3', 'args': ['$full_shape012.4', '$16load_attr.6'], 'names': '$const18.7', 'res': '$20call_function_kw.8'}), (22, {'value': '$20call_function_kw.8'}), (24, {'res': '$const24.9'}), (26, {'res': '$out026.10'}), (28, {'res': '$const28.11'}), (30, {'res': '$const30.12'}), (32, {'start': '$const28.11', 'stop': '$const30.12', 'step': None, 'res': '$32build_slice.14', 'slicevar': '$32build_slice.13'}), (34, {'target': '$out026.10', 'index': '$32build_slice.14', 'value': '$const24.9'}), (36, {'res': '$const36.15'}), (38, {'res': '$out038.16'}), (40, {'res': '$const40.17'}), (42, {'res': '$const42.18'}), (44, {'start': '$const40.17', 'stop': '$const42.18', 'step': None, 'res': '$44build_slice.20', 'slicevar': '$44build_slice.19'}), (46, {'target': '$out038.16', 'index': '$44build_slice.20', 'value': '$const36.15'}), (48, {'res': '$48load_global.21'}), (50, {'res': '$50load_global.22'}), (52, {'res': '$const52.23'}), (54, {'res': '$const54.24'}), (56, {'func': '$50load_global.22', 'args': ['$const52.23', '$const54.24'], 'res': '$56call_function.25'}), (58, {'value': '$56call_function.25', 'res': '$58unary_negative.26'}), (60, {'res': '$full_shape060.27'}), (62, {'res': '$const62.28'}), (64, {'index': '$const62.28', 'target': '$full_shape060.27', 'res': '$64binary_subscr.29'}), (66, {'res': '$66load_global.30'}), (68, {'res': '$const68.31'}), (70, {'res': '$const70.32'}), (72, {'func': '$66load_global.30', 'args': ['$const68.31', '$const70.32'], 'res': '$72call_function.33'}), (74, {'lhs': '$64binary_subscr.29', 'rhs': '$72call_function.33', 'res': '$74binary_subtract.34'}), (76, {'func': '$48load_global.21', 'args': ['$58unary_negative.26', '$74binary_subtract.34'], 'res': '$76call_function.35'}), (78, {'value': '$76call_function.35', 'res': '$78get_iter.36'})), outgoing_phis={'$phi80.0': '$78get_iter.36'}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$78get_iter.36',)})
2025-01-31 15:31:39,692 - DEBUG - block_infos State(pc_initial=80 nstack_initial=1):
AdaptBlockInfo(insts=((80, {'iterator': '$phi80.0', 'pair': '$80for_iter.1', 'indval': '$80for_iter.2', 'pred': '$80for_iter.3'}),), outgoing_phis={'$phi82.1': '$80for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: (), 82: ('$phi80.0', '$80for_iter.2')})
2025-01-31 15:31:39,692 - DEBUG - block_infos State(pc_initial=82 nstack_initial=2):
AdaptBlockInfo(insts=((82, {'value': '$phi82.1'}), (84, {'res': '$const84.2'}), (86, {'value': '$const84.2'}), (88, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$phi82.0',)})
2025-01-31 15:31:39,692 - DEBUG - block_infos State(pc_initial=90 nstack_initial=0):
AdaptBlockInfo(insts=((90, {'res': '$out090.0'}), (92, {'retval': '$out090.0', 'castval': '$92return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:39,693 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    full_shape0 = getattr(value=x, attr=shape) ['full_shape0', 'x']
    $8load_global.2 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>) ['$8load_global.2']
    $10load_attr.3 = getattr(value=$8load_global.2, attr=empty) ['$10load_attr.3', '$8load_global.2']
    $14load_global.5 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>) ['$14load_global.5']
    $16load_attr.6 = getattr(value=$14load_global.5, attr=bool_) ['$14load_global.5', '$16load_attr.6']
    out0 = call $10load_attr.3(full_shape0, func=$10load_attr.3, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6, <string>:3))], vararg=None, varkwarg=None, target=None) ['$10load_attr.3', '$16load_attr.6', 'full_shape0', 'out0']
    $const24.9 = const(int, 0)               ['$const24.9']
    $const28.11 = const(NoneType, None)      ['$const28.11']
    $const30.12 = const(int, 1)              ['$const30.12']
    $32build_slice.13 = global(slice: <class 'slice'>) ['$32build_slice.13']
    $32build_slice.14 = call $32build_slice.13($const28.11, $const30.12, func=$32build_slice.13, args=(Var($const28.11, <string>:4), Var($const30.12, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None) ['$32build_slice.13', '$32build_slice.14', '$const28.11', '$const30.12']
    out0[$32build_slice.14] = $const24.9     ['$32build_slice.14', '$const24.9', 'out0']
    $const36.15 = const(int, 0)              ['$const36.15']
    $const40.17 = const(int, -1)             ['$const40.17']
    $const42.18 = const(NoneType, None)      ['$const42.18']
    $44build_slice.19 = global(slice: <class 'slice'>) ['$44build_slice.19']
    $44build_slice.20 = call $44build_slice.19($const40.17, $const42.18, func=$44build_slice.19, args=(Var($const40.17, <string>:5), Var($const42.18, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None) ['$44build_slice.19', '$44build_slice.20', '$const40.17', '$const42.18']
    out0[$44build_slice.20] = $const36.15    ['$44build_slice.20', '$const36.15', 'out0']
    $48load_global.21 = global(range: <class 'range'>) ['$48load_global.21']
    $50load_global.22 = global(min: <built-in function min>) ['$50load_global.22']
    $const52.23 = const(int, 0)              ['$const52.23']
    $const54.24 = const(int, -1)             ['$const54.24']
    $56call_function.25 = call $50load_global.22($const52.23, $const54.24, func=$50load_global.22, args=[Var($const52.23, <string>:6), Var($const54.24, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$50load_global.22', '$56call_function.25', '$const52.23', '$const54.24']
    $58unary_negative.26 = unary(fn=<built-in function neg>, value=$56call_function.25) ['$56call_function.25', '$58unary_negative.26']
    $const62.28 = const(int, 0)              ['$const62.28']
    $64binary_subscr.29 = getitem(value=full_shape0, index=$const62.28, fn=<built-in function getitem>) ['$64binary_subscr.29', '$const62.28', 'full_shape0']
    $66load_global.30 = global(max: <built-in function max>) ['$66load_global.30']
    $const68.31 = const(int, 0)              ['$const68.31']
    $const70.32 = const(int, 1)              ['$const70.32']
    $72call_function.33 = call $66load_global.30($const68.31, $const70.32, func=$66load_global.30, args=[Var($const68.31, <string>:6), Var($const70.32, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$66load_global.30', '$72call_function.33', '$const68.31', '$const70.32']
    $74binary_subtract.34 = $64binary_subscr.29 - $72call_function.33 ['$64binary_subscr.29', '$72call_function.33', '$74binary_subtract.34']
    $76call_function.35 = call $48load_global.21($58unary_negative.26, $74binary_subtract.34, func=$48load_global.21, args=[Var($58unary_negative.26, <string>:6), Var($74binary_subtract.34, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$48load_global.21', '$58unary_negative.26', '$74binary_subtract.34', '$76call_function.35']
    $78get_iter.36 = getiter(value=$76call_function.35) ['$76call_function.35', '$78get_iter.36']
    $phi80.0 = $78get_iter.36                ['$78get_iter.36', '$phi80.0']
    jump 80                                  []
label 80:
    $80for_iter.1 = iternext(value=$phi80.0) ['$80for_iter.1', '$phi80.0']
    $80for_iter.2 = pair_first(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.2']
    $80for_iter.3 = pair_second(value=$80for_iter.1) ['$80for_iter.1', '$80for_iter.3']
    $phi82.1 = $80for_iter.2                 ['$80for_iter.2', '$phi82.1']
    branch $80for_iter.3, 82, 90             ['$80for_iter.3']
label 82:
    index00 = $phi82.1                       ['$phi82.1', 'index00']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 80                                  []
label 90:
    $92return_value.1 = cast(value=out0)     ['$92return_value.1', 'out0']
    return $92return_value.1                 ['$92return_value.1']

2025-01-31 15:31:39,701 - DEBUG - ==== SSA block analysis pass on 0
2025-01-31 15:31:39,701 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e84cb7c0>
2025-01-31 15:31:39,701 - DEBUG - on stmt: x = arg(0, name=x)
2025-01-31 15:31:39,701 - DEBUG - on stmt: full_shape0 = getattr(value=x, attr=shape)
2025-01-31 15:31:39,701 - DEBUG - on stmt: $8load_global.2.1 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:39,701 - DEBUG - on stmt: $10load_attr.3.1 = getattr(value=$8load_global.2.1, attr=empty)
2025-01-31 15:31:39,701 - DEBUG - on stmt: $14load_global.5.1 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:39,701 - DEBUG - on stmt: $16load_attr.6.1 = getattr(value=$14load_global.5.1, attr=bool_)
2025-01-31 15:31:39,701 - DEBUG - on stmt: out0 = call $10load_attr.3.1(full_shape0, func=$10load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($16load_attr.6.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:39,701 - DEBUG - on stmt: $const24.9.1 = const(int, 0)
2025-01-31 15:31:39,701 - DEBUG - on stmt: $const28.11.1 = const(NoneType, None)
2025-01-31 15:31:39,701 - DEBUG - on stmt: $const30.12.1 = const(int, 1)
2025-01-31 15:31:39,701 - DEBUG - on stmt: $32build_slice.13.1 = global(slice: <class 'slice'>)
2025-01-31 15:31:39,701 - DEBUG - on stmt: $32build_slice.14.1 = call $32build_slice.13.1($const28.11.1, $const30.12.1, func=$32build_slice.13.1, args=(Var($const28.11.1, <string>:4), Var($const30.12.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:39,701 - DEBUG - on stmt: out0[$32build_slice.14.1] = $const24.9.1
2025-01-31 15:31:39,701 - DEBUG - on stmt: $const36.15.1 = const(int, 0)
2025-01-31 15:31:39,701 - DEBUG - on stmt: $const40.17.1 = const(int, -1)
2025-01-31 15:31:39,701 - DEBUG - on stmt: $const42.18.1 = const(NoneType, None)
2025-01-31 15:31:39,701 - DEBUG - on stmt: $44build_slice.19.1 = global(slice: <class 'slice'>)
2025-01-31 15:31:39,702 - DEBUG - on stmt: $44build_slice.20.1 = call $44build_slice.19.1($const40.17.1, $const42.18.1, func=$44build_slice.19.1, args=(Var($const40.17.1, <string>:5), Var($const42.18.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:39,702 - DEBUG - on stmt: out0[$44build_slice.20.1] = $const36.15.1
2025-01-31 15:31:39,702 - DEBUG - on stmt: $48load_global.21.1 = global(range: <class 'range'>)
2025-01-31 15:31:39,702 - DEBUG - on stmt: $50load_global.22.1 = global(min: <built-in function min>)
2025-01-31 15:31:39,702 - DEBUG - on stmt: $const52.23.1 = const(int, 0)
2025-01-31 15:31:39,702 - DEBUG - on stmt: $const54.24.1 = const(int, -1)
2025-01-31 15:31:39,702 - DEBUG - on stmt: $56call_function.25.1 = call $50load_global.22.1($const52.23.1, $const54.24.1, func=$50load_global.22.1, args=[Var($const52.23.1, <string>:6), Var($const54.24.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:39,702 - DEBUG - on stmt: $58unary_negative.26.1 = unary(fn=<built-in function neg>, value=$56call_function.25.1)
2025-01-31 15:31:39,702 - DEBUG - on stmt: $const62.28.1 = const(int, 0)
2025-01-31 15:31:39,702 - DEBUG - on stmt: $64binary_subscr.29.1 = getitem(value=full_shape0, index=$const62.28.1, fn=<built-in function getitem>)
2025-01-31 15:31:39,702 - DEBUG - on stmt: $66load_global.30.1 = global(max: <built-in function max>)
2025-01-31 15:31:39,702 - DEBUG - on stmt: $const68.31.1 = const(int, 0)
2025-01-31 15:31:39,702 - DEBUG - on stmt: $const70.32.1 = const(int, 1)
2025-01-31 15:31:39,702 - DEBUG - on stmt: $72call_function.33.1 = call $66load_global.30.1($const68.31.1, $const70.32.1, func=$66load_global.30.1, args=[Var($const68.31.1, <string>:6), Var($const70.32.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:39,702 - DEBUG - on stmt: $74binary_subtract.34.1 = $64binary_subscr.29.1 - $72call_function.33.1
2025-01-31 15:31:39,702 - DEBUG - on stmt: $76call_function.35.1 = call $48load_global.21.1($58unary_negative.26.1, $74binary_subtract.34.1, func=$48load_global.21.1, args=[Var($58unary_negative.26.1, <string>:6), Var($74binary_subtract.34.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:39,702 - DEBUG - on stmt: $78get_iter.36.1 = getiter(value=$76call_function.35.1)
2025-01-31 15:31:39,702 - DEBUG - on stmt: $phi80.0.1 = $78get_iter.36.1
2025-01-31 15:31:39,702 - DEBUG - on stmt: jump 80
2025-01-31 15:31:39,702 - DEBUG - ==== SSA block analysis pass on 80
2025-01-31 15:31:39,702 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e84cb7c0>
2025-01-31 15:31:39,702 - DEBUG - on stmt: $80for_iter.1.1 = iternext(value=$phi80.0.1)
2025-01-31 15:31:39,702 - DEBUG - on stmt: $80for_iter.2.1 = pair_first(value=$80for_iter.1.1)
2025-01-31 15:31:39,702 - DEBUG - on stmt: $80for_iter.3.1 = pair_second(value=$80for_iter.1.1)
2025-01-31 15:31:39,703 - DEBUG - on stmt: $phi82.1.1 = $80for_iter.2.1
2025-01-31 15:31:39,703 - DEBUG - on stmt: branch $80for_iter.3.1, 82, 92
2025-01-31 15:31:39,703 - DEBUG - ==== SSA block analysis pass on 82
2025-01-31 15:31:39,703 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e84cb7c0>
2025-01-31 15:31:39,703 - DEBUG - on stmt: index00 = $phi82.1.1
2025-01-31 15:31:39,703 - DEBUG - on stmt: jump 90
2025-01-31 15:31:39,703 - DEBUG - ==== SSA block analysis pass on 92
2025-01-31 15:31:39,703 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e84cb7c0>
2025-01-31 15:31:39,703 - DEBUG - on stmt: $92return_value.1.1 = cast(value=out0)
2025-01-31 15:31:39,703 - DEBUG - on stmt: return $92return_value.1.1
2025-01-31 15:31:39,703 - DEBUG - ==== SSA block analysis pass on 90
2025-01-31 15:31:39,703 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e84cb7c0>
2025-01-31 15:31:39,703 - DEBUG - on stmt: $const4.1 = const(int, 0)
2025-01-31 15:31:39,703 - DEBUG - on stmt: stencil_index = $const4.1 + index00
2025-01-31 15:31:39,703 - DEBUG - on stmt: $6binary_subscr.2 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-01-31 15:31:39,703 - DEBUG - on stmt: $const10.4 = const(int, -1)
2025-01-31 15:31:39,703 - DEBUG - on stmt: stencil_index.1 = $const10.4 + index00
2025-01-31 15:31:39,703 - DEBUG - on stmt: $12binary_subscr.5 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2025-01-31 15:31:39,703 - DEBUG - on stmt: $14compare_op.6 = $6binary_subscr.2 < $12binary_subscr.5
2025-01-31 15:31:39,703 - DEBUG - on stmt: $const18.8 = const(int, 0)
2025-01-31 15:31:39,703 - DEBUG - on stmt: stencil_index.2 = $const18.8 + index00
2025-01-31 15:31:39,703 - DEBUG - on stmt: $20binary_subscr.9 = getitem(value=x, index=stencil_index.2, fn=<built-in function getitem>)
2025-01-31 15:31:39,703 - DEBUG - on stmt: $const24.11 = const(int, 1)
2025-01-31 15:31:39,703 - DEBUG - on stmt: stencil_index.3 = $const24.11 + index00
2025-01-31 15:31:39,703 - DEBUG - on stmt: $26binary_subscr.12 = getitem(value=x, index=stencil_index.3, fn=<built-in function getitem>)
2025-01-31 15:31:39,703 - DEBUG - on stmt: $28compare_op.13 = $20binary_subscr.9 <= $26binary_subscr.12
2025-01-31 15:31:39,703 - DEBUG - on stmt: $30binary_and.14 = $14compare_op.6 & $28compare_op.13
2025-01-31 15:31:39,704 - DEBUG - on stmt: $32return_value.15 = cast(value=$30binary_and.14)
2025-01-31 15:31:39,704 - DEBUG - on stmt: out0[index00] = $32return_value.15
2025-01-31 15:31:39,704 - DEBUG - on stmt: jump 91
2025-01-31 15:31:39,704 - DEBUG - ==== SSA block analysis pass on 91
2025-01-31 15:31:39,704 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e84cb7c0>
2025-01-31 15:31:39,704 - DEBUG - on stmt: jump 80
2025-01-31 15:31:39,705 - DEBUG - defs defaultdict(<class 'list'>,
            {'$10load_attr.3.1': [(<numba.core.ir.Assign object at 0x7c89e84b32e0>,
                                   0)],
             '$12binary_subscr.5': [(<numba.core.ir.Assign object at 0x7c89e84b2770>,
                                     90)],
             '$14compare_op.6': [(<numba.core.ir.Assign object at 0x7c89e849faf0>,
                                  90)],
             '$14load_global.5.1': [(<numba.core.ir.Assign object at 0x7c89e84b2ef0>,
                                     0)],
             '$16load_attr.6.1': [(<numba.core.ir.Assign object at 0x7c89e84b2ce0>,
                                   0)],
             '$20binary_subscr.9': [(<numba.core.ir.Assign object at 0x7c89e84b29b0>,
                                     90)],
             '$26binary_subscr.12': [(<numba.core.ir.Assign object at 0x7c89e84b2bf0>,
                                      90)],
             '$28compare_op.13': [(<numba.core.ir.Assign object at 0x7c89e84aafe0>,
                                   90)],
             '$30binary_and.14': [(<numba.core.ir.Assign object at 0x7c89e84ab1c0>,
                                   90)],
             '$32build_slice.13.1': [(<numba.core.ir.Assign object at 0x7c89e84c4970>,
                                      0)],
             '$32build_slice.14.1': [(<numba.core.ir.Assign object at 0x7c89e84c4a90>,
                                      0)],
             '$32return_value.15': [(<numba.core.ir.Assign object at 0x7c89e84abc70>,
                                     90)],
             '$44build_slice.19.1': [(<numba.core.ir.Assign object at 0x7c89e84c5270>,
                                      0)],
             '$44build_slice.20.1': [(<numba.core.ir.Assign object at 0x7c89e84c5390>,
                                      0)],
             '$48load_global.21.1': [(<numba.core.ir.Assign object at 0x7c89e84c55d0>,
                                      0)],
             '$50load_global.22.1': [(<numba.core.ir.Assign object at 0x7c89e84c5750>,
                                      0)],
             '$56call_function.25.1': [(<numba.core.ir.Assign object at 0x7c89e84c5c30>,
                                        0)],
             '$58unary_negative.26.1': [(<numba.core.ir.Assign object at 0x7c89e84c5d50>,
                                         0)],
             '$64binary_subscr.29.1': [(<numba.core.ir.Assign object at 0x7c89e84c61a0>,
                                        0)],
             '$66load_global.30.1': [(<numba.core.ir.Assign object at 0x7c89e84c62f0>,
                                      0)],
             '$6binary_subscr.2': [(<numba.core.ir.Assign object at 0x7c89e84b2530>,
                                    90)],
             '$72call_function.33.1': [(<numba.core.ir.Assign object at 0x7c89e84c67d0>,
                                        0)],
             '$74binary_subtract.34.1': [(<numba.core.ir.Assign object at 0x7c89e84c6920>,
                                          0)],
             '$76call_function.35.1': [(<numba.core.ir.Assign object at 0x7c89e84c6ad0>,
                                        0)],
             '$78get_iter.36.1': [(<numba.core.ir.Assign object at 0x7c89e84c6bf0>,
                                   0)],
             '$80for_iter.1.1': [(<numba.core.ir.Assign object at 0x7c89e84c6ce0>,
                                  80)],
             '$80for_iter.2.1': [(<numba.core.ir.Assign object at 0x7c89e84c6e00>,
                                  80)],
             '$80for_iter.3.1': [(<numba.core.ir.Assign object at 0x7c89e84c6f20>,
                                  80)],
             '$8load_global.2.1': [(<numba.core.ir.Assign object at 0x7c89e84b3460>,
                                    0)],
             '$92return_value.1.1': [(<numba.core.ir.Assign object at 0x7c89e84c7850>,
                                      92)],
             '$const10.4': [(<numba.core.ir.Assign object at 0x7c89e848eda0>,
                             90)],
             '$const18.8': [(<numba.core.ir.Assign object at 0x7c89e849fcd0>,
                             90)],
             '$const24.11': [(<numba.core.ir.Assign object at 0x7c89e84a9ae0>,
                              90)],
             '$const24.9.1': [(<numba.core.ir.Assign object at 0x7c89e84c43d0>,
                               0)],
             '$const28.11.1': [(<numba.core.ir.Assign object at 0x7c89e84c4670>,
                                0)],
             '$const30.12.1': [(<numba.core.ir.Assign object at 0x7c89e84c47f0>,
                                0)],
             '$const36.15.1': [(<numba.core.ir.Assign object at 0x7c89e84c4cd0>,
                                0)],
             '$const4.1': [(<numba.core.ir.Assign object at 0x7c89e849ddb0>,
                            90)],
             '$const40.17.1': [(<numba.core.ir.Assign object at 0x7c89e84c4f70>,
                                0)],
             '$const42.18.1': [(<numba.core.ir.Assign object at 0x7c89e84c50f0>,
                                0)],
             '$const52.23.1': [(<numba.core.ir.Assign object at 0x7c89e84c58d0>,
                                0)],
             '$const54.24.1': [(<numba.core.ir.Assign object at 0x7c89e84c5a50>,
                                0)],
             '$const62.28.1': [(<numba.core.ir.Assign object at 0x7c89e84c5ff0>,
                                0)],
             '$const68.31.1': [(<numba.core.ir.Assign object at 0x7c89e84c6470>,
                                0)],
             '$const70.32.1': [(<numba.core.ir.Assign object at 0x7c89e84c65f0>,
                                0)],
             '$phi80.0.1': [(<numba.core.ir.Assign object at 0x7c89e84b37f0>,
                             0)],
             '$phi82.1.1': [(<numba.core.ir.Assign object at 0x7c89e84c5e70>,
                             80)],
             'full_shape0': [(<numba.core.ir.Assign object at 0x7c89e84b3700>,
                              0)],
             'index00': [(<numba.core.ir.Assign object at 0x7c89e84c71f0>, 82)],
             'out0': [(<numba.core.ir.Assign object at 0x7c89e84c4250>, 0)],
             'stencil_index': [(<numba.core.ir.Assign object at 0x7c89e84b1b40>,
                                90)],
             'stencil_index.1': [(<numba.core.ir.Assign object at 0x7c89e84b26b0>,
                                  90)],
             'stencil_index.2': [(<numba.core.ir.Assign object at 0x7c89e84b28f0>,
                                  90)],
             'stencil_index.3': [(<numba.core.ir.Assign object at 0x7c89e84b2b30>,
                                  90)],
             'x': [(<numba.core.ir.Assign object at 0x7c89e84b3af0>, 0)]})
2025-01-31 15:31:39,705 - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x7c89e84cb7c0>
2025-01-31 15:31:40,357 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=1209)
           2	LOAD_FAST(arg=0, lineno=1221)
           4	LOAD_CONST(arg=1, lineno=1221)
           6	BINARY_SUBSCR(arg=None, lineno=1221)
           8	LOAD_GLOBAL(arg=0, lineno=1221)
          10	LOAD_METHOD(arg=1, lineno=1221)
          12	LOAD_FAST(arg=0, lineno=1221)
          14	LOAD_CONST(arg=2, lineno=1221)
          16	LOAD_GLOBAL(arg=2, lineno=1221)
          18	LOAD_FAST(arg=2, lineno=1221)
          20	LOAD_FAST(arg=0, lineno=1221)
          22	LOAD_ATTR(arg=3, lineno=1221)
          24	LOAD_CONST(arg=1, lineno=1221)
          26	BINARY_SUBSCR(arg=None, lineno=1221)
          28	CALL_FUNCTION(arg=2, lineno=1221)
          30	BUILD_SLICE(arg=2, lineno=1221)
          32	BINARY_SUBSCR(arg=None, lineno=1221)
          34	CALL_METHOD(arg=1, lineno=1221)
          36	COMPARE_OP(arg=5, lineno=1221)
          38	LOAD_FAST(arg=7, lineno=1221)
          40	LOAD_CONST(arg=1, lineno=1221)
          42	STORE_SUBSCR(arg=None, lineno=1221)
          44	LOAD_FAST(arg=7, lineno=1222)
          46	LOAD_CONST(arg=1, lineno=1222)
          48	DUP_TOP_TWO(arg=None, lineno=1222)
          50	BINARY_SUBSCR(arg=None, lineno=1222)
          52	LOAD_FAST(arg=0, lineno=1222)
          54	LOAD_CONST(arg=1, lineno=1222)
          56	BINARY_SUBSCR(arg=None, lineno=1222)
          58	LOAD_GLOBAL(arg=0, lineno=1222)
          60	LOAD_METHOD(arg=4, lineno=1222)
          62	LOAD_FAST(arg=0, lineno=1222)
          64	LOAD_CONST(arg=2, lineno=1222)
          66	LOAD_GLOBAL(arg=2, lineno=1222)
          68	LOAD_FAST(arg=4, lineno=1222)
          70	LOAD_FAST(arg=0, lineno=1222)
          72	LOAD_ATTR(arg=3, lineno=1222)
          74	LOAD_CONST(arg=1, lineno=1222)
          76	BINARY_SUBSCR(arg=None, lineno=1222)
          78	CALL_FUNCTION(arg=2, lineno=1222)
          80	BUILD_SLICE(arg=2, lineno=1222)
          82	BINARY_SUBSCR(arg=None, lineno=1222)
          84	CALL_METHOD(arg=1, lineno=1222)
          86	LOAD_FAST(arg=5, lineno=1222)
          88	BINARY_ADD(arg=None, lineno=1222)
          90	COMPARE_OP(arg=5, lineno=1222)
          92	INPLACE_AND(arg=None, lineno=1222)
          94	ROT_THREE(arg=None, lineno=1222)
          96	STORE_SUBSCR(arg=None, lineno=1222)
          98	LOAD_FAST(arg=7, lineno=1224)
         100	LOAD_CONST(arg=1, lineno=1224)
         102	BINARY_SUBSCR(arg=None, lineno=1224)
         104	POP_JUMP_IF_FALSE(arg=59, lineno=1224)
         106	LOAD_FAST(arg=6, lineno=1225)
         108	LOAD_CONST(arg=3, lineno=1225)
         110	BINARY_ADD(arg=None, lineno=1225)
         112	STORE_FAST(arg=8, lineno=1225)
         114	JUMP_FORWARD(arg=2, lineno=1225)
>        116	LOAD_CONST(arg=3, lineno=1227)
         118	STORE_FAST(arg=8, lineno=1227)
>        120	LOAD_FAST(arg=8, lineno=1229)
         122	LOAD_FAST(arg=0, lineno=1229)
         124	LOAD_ATTR(arg=3, lineno=1229)
         126	LOAD_CONST(arg=1, lineno=1229)
         128	BINARY_SUBSCR(arg=None, lineno=1229)
         130	COMPARE_OP(arg=0, lineno=1229)
         132	POP_JUMP_IF_FALSE(arg=167, lineno=1229)
>        134	LOAD_GLOBAL(arg=0, lineno=1230)
         136	LOAD_METHOD(arg=1, lineno=1230)
         138	LOAD_FAST(arg=0, lineno=1230)
         140	LOAD_GLOBAL(arg=1, lineno=1230)
         142	LOAD_CONST(arg=1, lineno=1230)
         144	LOAD_FAST(arg=8, lineno=1230)
         146	LOAD_FAST(arg=1, lineno=1230)
         148	BINARY_SUBTRACT(arg=None, lineno=1230)
         150	CALL_FUNCTION(arg=2, lineno=1230)
         152	LOAD_GLOBAL(arg=2, lineno=1230)
         154	LOAD_FAST(arg=8, lineno=1230)
         156	LOAD_FAST(arg=2, lineno=1230)
         158	BINARY_ADD(arg=None, lineno=1230)
         160	LOAD_FAST(arg=0, lineno=1230)
         162	LOAD_ATTR(arg=3, lineno=1230)
         164	LOAD_CONST(arg=1, lineno=1230)
         166	BINARY_SUBSCR(arg=None, lineno=1230)
         168	CALL_FUNCTION(arg=2, lineno=1230)
         170	BUILD_SLICE(arg=2, lineno=1230)
         172	BINARY_SUBSCR(arg=None, lineno=1230)
         174	CALL_METHOD(arg=1, lineno=1230)
         176	STORE_FAST(arg=9, lineno=1230)
         178	LOAD_FAST(arg=0, lineno=1233)
         180	LOAD_FAST(arg=8, lineno=1233)
         182	BINARY_SUBSCR(arg=None, lineno=1233)
         184	LOAD_FAST(arg=9, lineno=1233)
         186	COMPARE_OP(arg=2, lineno=1233)
         188	LOAD_FAST(arg=7, lineno=1233)
         190	LOAD_FAST(arg=8, lineno=1233)
         192	STORE_SUBSCR(arg=None, lineno=1233)
         194	LOAD_FAST(arg=7, lineno=1235)
         196	LOAD_FAST(arg=8, lineno=1235)
         198	BINARY_SUBSCR(arg=None, lineno=1235)
         200	POP_JUMP_IF_TRUE(arg=107, lineno=1235)
         202	LOAD_FAST(arg=8, lineno=1236)
         204	LOAD_CONST(arg=3, lineno=1236)
         206	INPLACE_ADD(arg=None, lineno=1236)
         208	STORE_FAST(arg=8, lineno=1236)
         210	JUMP_ABSOLUTE(arg=61, lineno=1237)
>        212	LOAD_GLOBAL(arg=0, lineno=1239)
         214	LOAD_METHOD(arg=4, lineno=1239)
         216	LOAD_FAST(arg=0, lineno=1239)
         218	LOAD_GLOBAL(arg=1, lineno=1239)
         220	LOAD_CONST(arg=1, lineno=1239)
         222	LOAD_FAST(arg=8, lineno=1239)
         224	LOAD_FAST(arg=3, lineno=1239)
         226	BINARY_SUBTRACT(arg=None, lineno=1239)
         228	CALL_FUNCTION(arg=2, lineno=1239)
         230	LOAD_GLOBAL(arg=2, lineno=1239)
         232	LOAD_FAST(arg=8, lineno=1239)
         234	LOAD_FAST(arg=4, lineno=1239)
         236	BINARY_ADD(arg=None, lineno=1239)
         238	LOAD_FAST(arg=0, lineno=1239)
         240	LOAD_ATTR(arg=3, lineno=1239)
         242	LOAD_CONST(arg=1, lineno=1239)
         244	BINARY_SUBSCR(arg=None, lineno=1239)
         246	CALL_FUNCTION(arg=2, lineno=1239)
         248	BUILD_SLICE(arg=2, lineno=1239)
         250	BINARY_SUBSCR(arg=None, lineno=1239)
         252	CALL_METHOD(arg=1, lineno=1239)
         254	STORE_FAST(arg=10, lineno=1239)
         256	LOAD_FAST(arg=7, lineno=1240)
         258	LOAD_FAST(arg=8, lineno=1240)
         260	DUP_TOP_TWO(arg=None, lineno=1240)
         262	BINARY_SUBSCR(arg=None, lineno=1240)
         264	LOAD_FAST(arg=0, lineno=1240)
         266	LOAD_FAST(arg=8, lineno=1240)
         268	BINARY_SUBSCR(arg=None, lineno=1240)
         270	LOAD_FAST(arg=10, lineno=1240)
         272	LOAD_FAST(arg=5, lineno=1240)
         274	BINARY_ADD(arg=None, lineno=1240)
         276	COMPARE_OP(arg=5, lineno=1240)
         278	INPLACE_AND(arg=None, lineno=1240)
         280	ROT_THREE(arg=None, lineno=1240)
         282	STORE_SUBSCR(arg=None, lineno=1240)
         284	LOAD_FAST(arg=7, lineno=1242)
         286	LOAD_FAST(arg=8, lineno=1242)
         288	BINARY_SUBSCR(arg=None, lineno=1242)
         290	POP_JUMP_IF_TRUE(arg=152, lineno=1242)
         292	LOAD_FAST(arg=8, lineno=1243)
         294	LOAD_CONST(arg=3, lineno=1243)
         296	INPLACE_ADD(arg=None, lineno=1243)
         298	STORE_FAST(arg=8, lineno=1243)
         300	JUMP_ABSOLUTE(arg=61, lineno=1244)
>        302	LOAD_FAST(arg=8, lineno=1247)
         304	LOAD_FAST(arg=6, lineno=1247)
         306	LOAD_CONST(arg=3, lineno=1247)
         308	BINARY_ADD(arg=None, lineno=1247)
         310	INPLACE_ADD(arg=None, lineno=1247)
         312	STORE_FAST(arg=8, lineno=1247)
         314	LOAD_FAST(arg=8, lineno=1229)
         316	LOAD_FAST(arg=0, lineno=1229)
         318	LOAD_ATTR(arg=3, lineno=1229)
         320	LOAD_CONST(arg=1, lineno=1229)
         322	BINARY_SUBSCR(arg=None, lineno=1229)
         324	COMPARE_OP(arg=0, lineno=1229)
         326	POP_JUMP_IF_TRUE(arg=68, lineno=1229)
         328	LOAD_CONST(arg=2, lineno=1229)
         330	RETURN_VALUE(arg=None, lineno=1229)
>        332	LOAD_CONST(arg=2, lineno=1229)
         334	RETURN_VALUE(arg=None, lineno=1229)
2025-01-31 15:31:40,357 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:31:40,358 - DEBUG - stack: []
2025-01-31 15:31:40,358 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:31:40,358 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=1209)
2025-01-31 15:31:40,358 - DEBUG - stack []
2025-01-31 15:31:40,358 - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1221)
2025-01-31 15:31:40,358 - DEBUG - stack []
2025-01-31 15:31:40,358 - DEBUG - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1221)
2025-01-31 15:31:40,358 - DEBUG - stack ['$x2.0']
2025-01-31 15:31:40,358 - DEBUG - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=1221)
2025-01-31 15:31:40,358 - DEBUG - stack ['$x2.0', '$const4.1']
2025-01-31 15:31:40,358 - DEBUG - dispatch pc=8, inst=LOAD_GLOBAL(arg=0, lineno=1221)
2025-01-31 15:31:40,358 - DEBUG - stack ['$6binary_subscr.2']
2025-01-31 15:31:40,358 - DEBUG - dispatch pc=10, inst=LOAD_METHOD(arg=1, lineno=1221)
2025-01-31 15:31:40,358 - DEBUG - stack ['$6binary_subscr.2', '$8load_global.3']
2025-01-31 15:31:40,358 - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=1221)
2025-01-31 15:31:40,358 - DEBUG - stack ['$6binary_subscr.2', '$10load_method.4']
2025-01-31 15:31:40,358 - DEBUG - dispatch pc=14, inst=LOAD_CONST(arg=2, lineno=1221)
2025-01-31 15:31:40,358 - DEBUG - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5']
2025-01-31 15:31:40,358 - DEBUG - dispatch pc=16, inst=LOAD_GLOBAL(arg=2, lineno=1221)
2025-01-31 15:31:40,358 - DEBUG - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$const14.6']
2025-01-31 15:31:40,358 - DEBUG - dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=1221)
2025-01-31 15:31:40,358 - DEBUG - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$const14.6', '$16load_global.7']
2025-01-31 15:31:40,358 - DEBUG - dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=1221)
2025-01-31 15:31:40,358 - DEBUG - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$const14.6', '$16load_global.7', '$post_max18.8']
2025-01-31 15:31:40,358 - DEBUG - dispatch pc=22, inst=LOAD_ATTR(arg=3, lineno=1221)
2025-01-31 15:31:40,358 - DEBUG - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$const14.6', '$16load_global.7', '$post_max18.8', '$x20.9']
2025-01-31 15:31:40,358 - DEBUG - dispatch pc=24, inst=LOAD_CONST(arg=1, lineno=1221)
2025-01-31 15:31:40,358 - DEBUG - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$const14.6', '$16load_global.7', '$post_max18.8', '$22load_attr.10']
2025-01-31 15:31:40,358 - DEBUG - dispatch pc=26, inst=BINARY_SUBSCR(arg=None, lineno=1221)
2025-01-31 15:31:40,359 - DEBUG - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$const14.6', '$16load_global.7', '$post_max18.8', '$22load_attr.10', '$const24.11']
2025-01-31 15:31:40,359 - DEBUG - dispatch pc=28, inst=CALL_FUNCTION(arg=2, lineno=1221)
2025-01-31 15:31:40,359 - DEBUG - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$const14.6', '$16load_global.7', '$post_max18.8', '$26binary_subscr.12']
2025-01-31 15:31:40,359 - DEBUG - dispatch pc=30, inst=BUILD_SLICE(arg=2, lineno=1221)
2025-01-31 15:31:40,359 - DEBUG - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$const14.6', '$28call_function.13']
2025-01-31 15:31:40,359 - DEBUG - dispatch pc=32, inst=BINARY_SUBSCR(arg=None, lineno=1221)
2025-01-31 15:31:40,359 - DEBUG - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$30build_slice.15']
2025-01-31 15:31:40,359 - DEBUG - dispatch pc=34, inst=CALL_METHOD(arg=1, lineno=1221)
2025-01-31 15:31:40,359 - DEBUG - stack ['$6binary_subscr.2', '$10load_method.4', '$32binary_subscr.16']
2025-01-31 15:31:40,359 - DEBUG - dispatch pc=36, inst=COMPARE_OP(arg=5, lineno=1221)
2025-01-31 15:31:40,359 - DEBUG - stack ['$6binary_subscr.2', '$34call_method.17']
2025-01-31 15:31:40,359 - DEBUG - dispatch pc=38, inst=LOAD_FAST(arg=7, lineno=1221)
2025-01-31 15:31:40,359 - DEBUG - stack ['$36compare_op.18']
2025-01-31 15:31:40,359 - DEBUG - dispatch pc=40, inst=LOAD_CONST(arg=1, lineno=1221)
2025-01-31 15:31:40,359 - DEBUG - stack ['$36compare_op.18', '$peaks38.19']
2025-01-31 15:31:40,359 - DEBUG - dispatch pc=42, inst=STORE_SUBSCR(arg=None, lineno=1221)
2025-01-31 15:31:40,359 - DEBUG - stack ['$36compare_op.18', '$peaks38.19', '$const40.20']
2025-01-31 15:31:40,359 - DEBUG - dispatch pc=44, inst=LOAD_FAST(arg=7, lineno=1222)
2025-01-31 15:31:40,359 - DEBUG - stack []
2025-01-31 15:31:40,359 - DEBUG - dispatch pc=46, inst=LOAD_CONST(arg=1, lineno=1222)
2025-01-31 15:31:40,359 - DEBUG - stack ['$peaks44.21']
2025-01-31 15:31:40,359 - DEBUG - dispatch pc=48, inst=DUP_TOP_TWO(arg=None, lineno=1222)
2025-01-31 15:31:40,359 - DEBUG - stack ['$peaks44.21', '$const46.22']
2025-01-31 15:31:40,359 - DEBUG - dispatch pc=50, inst=BINARY_SUBSCR(arg=None, lineno=1222)
2025-01-31 15:31:40,359 - DEBUG - stack ['$peaks44.21', '$const46.22', '$48dup_top_two.23', '$48dup_top_two.24']
2025-01-31 15:31:40,359 - DEBUG - dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=1222)
2025-01-31 15:31:40,359 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25']
2025-01-31 15:31:40,359 - DEBUG - dispatch pc=54, inst=LOAD_CONST(arg=1, lineno=1222)
2025-01-31 15:31:40,360 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$x52.26']
2025-01-31 15:31:40,360 - DEBUG - dispatch pc=56, inst=BINARY_SUBSCR(arg=None, lineno=1222)
2025-01-31 15:31:40,360 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$x52.26', '$const54.27']
2025-01-31 15:31:40,360 - DEBUG - dispatch pc=58, inst=LOAD_GLOBAL(arg=0, lineno=1222)
2025-01-31 15:31:40,360 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28']
2025-01-31 15:31:40,360 - DEBUG - dispatch pc=60, inst=LOAD_METHOD(arg=4, lineno=1222)
2025-01-31 15:31:40,360 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$58load_global.29']
2025-01-31 15:31:40,360 - DEBUG - dispatch pc=62, inst=LOAD_FAST(arg=0, lineno=1222)
2025-01-31 15:31:40,360 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30']
2025-01-31 15:31:40,360 - DEBUG - dispatch pc=64, inst=LOAD_CONST(arg=2, lineno=1222)
2025-01-31 15:31:40,360 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31']
2025-01-31 15:31:40,360 - DEBUG - dispatch pc=66, inst=LOAD_GLOBAL(arg=2, lineno=1222)
2025-01-31 15:31:40,360 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$const64.32']
2025-01-31 15:31:40,360 - DEBUG - dispatch pc=68, inst=LOAD_FAST(arg=4, lineno=1222)
2025-01-31 15:31:40,360 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$const64.32', '$66load_global.33']
2025-01-31 15:31:40,360 - DEBUG - dispatch pc=70, inst=LOAD_FAST(arg=0, lineno=1222)
2025-01-31 15:31:40,360 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$const64.32', '$66load_global.33', '$post_avg68.34']
2025-01-31 15:31:40,360 - DEBUG - dispatch pc=72, inst=LOAD_ATTR(arg=3, lineno=1222)
2025-01-31 15:31:40,360 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$const64.32', '$66load_global.33', '$post_avg68.34', '$x70.35']
2025-01-31 15:31:40,360 - DEBUG - dispatch pc=74, inst=LOAD_CONST(arg=1, lineno=1222)
2025-01-31 15:31:40,360 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$const64.32', '$66load_global.33', '$post_avg68.34', '$72load_attr.36']
2025-01-31 15:31:40,360 - DEBUG - dispatch pc=76, inst=BINARY_SUBSCR(arg=None, lineno=1222)
2025-01-31 15:31:40,360 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$const64.32', '$66load_global.33', '$post_avg68.34', '$72load_attr.36', '$const74.37']
2025-01-31 15:31:40,360 - DEBUG - dispatch pc=78, inst=CALL_FUNCTION(arg=2, lineno=1222)
2025-01-31 15:31:40,360 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$const64.32', '$66load_global.33', '$post_avg68.34', '$76binary_subscr.38']
2025-01-31 15:31:40,360 - DEBUG - dispatch pc=80, inst=BUILD_SLICE(arg=2, lineno=1222)
2025-01-31 15:31:40,360 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$const64.32', '$78call_function.39']
2025-01-31 15:31:40,360 - DEBUG - dispatch pc=82, inst=BINARY_SUBSCR(arg=None, lineno=1222)
2025-01-31 15:31:40,361 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$80build_slice.41']
2025-01-31 15:31:40,361 - DEBUG - dispatch pc=84, inst=CALL_METHOD(arg=1, lineno=1222)
2025-01-31 15:31:40,361 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$82binary_subscr.42']
2025-01-31 15:31:40,361 - DEBUG - dispatch pc=86, inst=LOAD_FAST(arg=5, lineno=1222)
2025-01-31 15:31:40,361 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$84call_method.43']
2025-01-31 15:31:40,361 - DEBUG - dispatch pc=88, inst=BINARY_ADD(arg=None, lineno=1222)
2025-01-31 15:31:40,361 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$84call_method.43', '$delta86.44']
2025-01-31 15:31:40,361 - DEBUG - dispatch pc=90, inst=COMPARE_OP(arg=5, lineno=1222)
2025-01-31 15:31:40,361 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$88binary_add.45']
2025-01-31 15:31:40,361 - DEBUG - dispatch pc=92, inst=INPLACE_AND(arg=None, lineno=1222)
2025-01-31 15:31:40,361 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$90compare_op.46']
2025-01-31 15:31:40,361 - DEBUG - dispatch pc=94, inst=ROT_THREE(arg=None, lineno=1222)
2025-01-31 15:31:40,361 - DEBUG - stack ['$peaks44.21', '$const46.22', '$92inplace_and.47']
2025-01-31 15:31:40,361 - DEBUG - dispatch pc=96, inst=STORE_SUBSCR(arg=None, lineno=1222)
2025-01-31 15:31:40,361 - DEBUG - stack ['$92inplace_and.47', '$peaks44.21', '$const46.22']
2025-01-31 15:31:40,361 - DEBUG - dispatch pc=98, inst=LOAD_FAST(arg=7, lineno=1224)
2025-01-31 15:31:40,361 - DEBUG - stack []
2025-01-31 15:31:40,361 - DEBUG - dispatch pc=100, inst=LOAD_CONST(arg=1, lineno=1224)
2025-01-31 15:31:40,361 - DEBUG - stack ['$peaks98.48']
2025-01-31 15:31:40,361 - DEBUG - dispatch pc=102, inst=BINARY_SUBSCR(arg=None, lineno=1224)
2025-01-31 15:31:40,361 - DEBUG - stack ['$peaks98.48', '$const100.49']
2025-01-31 15:31:40,361 - DEBUG - dispatch pc=104, inst=POP_JUMP_IF_FALSE(arg=59, lineno=1224)
2025-01-31 15:31:40,361 - DEBUG - stack ['$102binary_subscr.50']
2025-01-31 15:31:40,361 - DEBUG - end state. edges=[Edge(pc=106, stack=(), blockstack=(), npush=0), Edge(pc=116, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:40,361 - DEBUG - pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=116 nstack_initial=0)])
2025-01-31 15:31:40,361 - DEBUG - stack: []
2025-01-31 15:31:40,361 - DEBUG - state.pc_initial: State(pc_initial=106 nstack_initial=0)
2025-01-31 15:31:40,361 - DEBUG - dispatch pc=106, inst=LOAD_FAST(arg=6, lineno=1225)
2025-01-31 15:31:40,361 - DEBUG - stack []
2025-01-31 15:31:40,362 - DEBUG - dispatch pc=108, inst=LOAD_CONST(arg=3, lineno=1225)
2025-01-31 15:31:40,362 - DEBUG - stack ['$wait106.0']
2025-01-31 15:31:40,362 - DEBUG - dispatch pc=110, inst=BINARY_ADD(arg=None, lineno=1225)
2025-01-31 15:31:40,362 - DEBUG - stack ['$wait106.0', '$const108.1']
2025-01-31 15:31:40,362 - DEBUG - dispatch pc=112, inst=STORE_FAST(arg=8, lineno=1225)
2025-01-31 15:31:40,362 - DEBUG - stack ['$110binary_add.2']
2025-01-31 15:31:40,362 - DEBUG - dispatch pc=114, inst=JUMP_FORWARD(arg=2, lineno=1225)
2025-01-31 15:31:40,362 - DEBUG - stack []
2025-01-31 15:31:40,362 - DEBUG - end state. edges=[Edge(pc=120, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:40,362 - DEBUG - pending: deque([State(pc_initial=116 nstack_initial=0), State(pc_initial=120 nstack_initial=0)])
2025-01-31 15:31:40,362 - DEBUG - stack: []
2025-01-31 15:31:40,362 - DEBUG - state.pc_initial: State(pc_initial=116 nstack_initial=0)
2025-01-31 15:31:40,362 - DEBUG - dispatch pc=116, inst=LOAD_CONST(arg=3, lineno=1227)
2025-01-31 15:31:40,362 - DEBUG - stack []
2025-01-31 15:31:40,362 - DEBUG - dispatch pc=118, inst=STORE_FAST(arg=8, lineno=1227)
2025-01-31 15:31:40,362 - DEBUG - stack ['$const116.0']
2025-01-31 15:31:40,362 - DEBUG - end state. edges=[Edge(pc=120, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:40,362 - DEBUG - pending: deque([State(pc_initial=120 nstack_initial=0), State(pc_initial=120 nstack_initial=0)])
2025-01-31 15:31:40,362 - DEBUG - stack: []
2025-01-31 15:31:40,362 - DEBUG - state.pc_initial: State(pc_initial=120 nstack_initial=0)
2025-01-31 15:31:40,362 - DEBUG - dispatch pc=120, inst=LOAD_FAST(arg=8, lineno=1229)
2025-01-31 15:31:40,362 - DEBUG - stack []
2025-01-31 15:31:40,362 - DEBUG - dispatch pc=122, inst=LOAD_FAST(arg=0, lineno=1229)
2025-01-31 15:31:40,362 - DEBUG - stack ['$n120.0']
2025-01-31 15:31:40,362 - DEBUG - dispatch pc=124, inst=LOAD_ATTR(arg=3, lineno=1229)
2025-01-31 15:31:40,362 - DEBUG - stack ['$n120.0', '$x122.1']
2025-01-31 15:31:40,362 - DEBUG - dispatch pc=126, inst=LOAD_CONST(arg=1, lineno=1229)
2025-01-31 15:31:40,362 - DEBUG - stack ['$n120.0', '$124load_attr.2']
2025-01-31 15:31:40,362 - DEBUG - dispatch pc=128, inst=BINARY_SUBSCR(arg=None, lineno=1229)
2025-01-31 15:31:40,362 - DEBUG - stack ['$n120.0', '$124load_attr.2', '$const126.3']
2025-01-31 15:31:40,363 - DEBUG - dispatch pc=130, inst=COMPARE_OP(arg=0, lineno=1229)
2025-01-31 15:31:40,363 - DEBUG - stack ['$n120.0', '$128binary_subscr.4']
2025-01-31 15:31:40,363 - DEBUG - dispatch pc=132, inst=POP_JUMP_IF_FALSE(arg=167, lineno=1229)
2025-01-31 15:31:40,363 - DEBUG - stack ['$130compare_op.5']
2025-01-31 15:31:40,363 - DEBUG - end state. edges=[Edge(pc=134, stack=(), blockstack=(), npush=0), Edge(pc=332, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:40,363 - DEBUG - pending: deque([State(pc_initial=120 nstack_initial=0), State(pc_initial=134 nstack_initial=0), State(pc_initial=332 nstack_initial=0)])
2025-01-31 15:31:40,363 - DEBUG - pending: deque([State(pc_initial=134 nstack_initial=0), State(pc_initial=332 nstack_initial=0)])
2025-01-31 15:31:40,363 - DEBUG - stack: []
2025-01-31 15:31:40,363 - DEBUG - state.pc_initial: State(pc_initial=134 nstack_initial=0)
2025-01-31 15:31:40,363 - DEBUG - dispatch pc=134, inst=LOAD_GLOBAL(arg=0, lineno=1230)
2025-01-31 15:31:40,363 - DEBUG - stack []
2025-01-31 15:31:40,363 - DEBUG - dispatch pc=136, inst=LOAD_METHOD(arg=1, lineno=1230)
2025-01-31 15:31:40,363 - DEBUG - stack ['$134load_global.0']
2025-01-31 15:31:40,363 - DEBUG - dispatch pc=138, inst=LOAD_FAST(arg=0, lineno=1230)
2025-01-31 15:31:40,363 - DEBUG - stack ['$136load_method.1']
2025-01-31 15:31:40,363 - DEBUG - dispatch pc=140, inst=LOAD_GLOBAL(arg=1, lineno=1230)
2025-01-31 15:31:40,363 - DEBUG - stack ['$136load_method.1', '$x138.2']
2025-01-31 15:31:40,363 - DEBUG - dispatch pc=142, inst=LOAD_CONST(arg=1, lineno=1230)
2025-01-31 15:31:40,363 - DEBUG - stack ['$136load_method.1', '$x138.2', '$140load_global.3']
2025-01-31 15:31:40,363 - DEBUG - dispatch pc=144, inst=LOAD_FAST(arg=8, lineno=1230)
2025-01-31 15:31:40,363 - DEBUG - stack ['$136load_method.1', '$x138.2', '$140load_global.3', '$const142.4']
2025-01-31 15:31:40,363 - DEBUG - dispatch pc=146, inst=LOAD_FAST(arg=1, lineno=1230)
2025-01-31 15:31:40,363 - DEBUG - stack ['$136load_method.1', '$x138.2', '$140load_global.3', '$const142.4', '$n144.5']
2025-01-31 15:31:40,363 - DEBUG - dispatch pc=148, inst=BINARY_SUBTRACT(arg=None, lineno=1230)
2025-01-31 15:31:40,363 - DEBUG - stack ['$136load_method.1', '$x138.2', '$140load_global.3', '$const142.4', '$n144.5', '$pre_max146.6']
2025-01-31 15:31:40,363 - DEBUG - dispatch pc=150, inst=CALL_FUNCTION(arg=2, lineno=1230)
2025-01-31 15:31:40,363 - DEBUG - stack ['$136load_method.1', '$x138.2', '$140load_global.3', '$const142.4', '$148binary_subtract.7']
2025-01-31 15:31:40,363 - DEBUG - dispatch pc=152, inst=LOAD_GLOBAL(arg=2, lineno=1230)
2025-01-31 15:31:40,364 - DEBUG - stack ['$136load_method.1', '$x138.2', '$150call_function.8']
2025-01-31 15:31:40,364 - DEBUG - dispatch pc=154, inst=LOAD_FAST(arg=8, lineno=1230)
2025-01-31 15:31:40,364 - DEBUG - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$152load_global.9']
2025-01-31 15:31:40,364 - DEBUG - dispatch pc=156, inst=LOAD_FAST(arg=2, lineno=1230)
2025-01-31 15:31:40,364 - DEBUG - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$152load_global.9', '$n154.10']
2025-01-31 15:31:40,364 - DEBUG - dispatch pc=158, inst=BINARY_ADD(arg=None, lineno=1230)
2025-01-31 15:31:40,364 - DEBUG - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$152load_global.9', '$n154.10', '$post_max156.11']
2025-01-31 15:31:40,364 - DEBUG - dispatch pc=160, inst=LOAD_FAST(arg=0, lineno=1230)
2025-01-31 15:31:40,364 - DEBUG - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$152load_global.9', '$158binary_add.12']
2025-01-31 15:31:40,364 - DEBUG - dispatch pc=162, inst=LOAD_ATTR(arg=3, lineno=1230)
2025-01-31 15:31:40,364 - DEBUG - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$152load_global.9', '$158binary_add.12', '$x160.13']
2025-01-31 15:31:40,364 - DEBUG - dispatch pc=164, inst=LOAD_CONST(arg=1, lineno=1230)
2025-01-31 15:31:40,364 - DEBUG - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$152load_global.9', '$158binary_add.12', '$162load_attr.14']
2025-01-31 15:31:40,364 - DEBUG - dispatch pc=166, inst=BINARY_SUBSCR(arg=None, lineno=1230)
2025-01-31 15:31:40,364 - DEBUG - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$152load_global.9', '$158binary_add.12', '$162load_attr.14', '$const164.15']
2025-01-31 15:31:40,364 - DEBUG - dispatch pc=168, inst=CALL_FUNCTION(arg=2, lineno=1230)
2025-01-31 15:31:40,364 - DEBUG - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$152load_global.9', '$158binary_add.12', '$166binary_subscr.16']
2025-01-31 15:31:40,364 - DEBUG - dispatch pc=170, inst=BUILD_SLICE(arg=2, lineno=1230)
2025-01-31 15:31:40,364 - DEBUG - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$168call_function.17']
2025-01-31 15:31:40,364 - DEBUG - dispatch pc=172, inst=BINARY_SUBSCR(arg=None, lineno=1230)
2025-01-31 15:31:40,364 - DEBUG - stack ['$136load_method.1', '$x138.2', '$170build_slice.19']
2025-01-31 15:31:40,364 - DEBUG - dispatch pc=174, inst=CALL_METHOD(arg=1, lineno=1230)
2025-01-31 15:31:40,364 - DEBUG - stack ['$136load_method.1', '$172binary_subscr.20']
2025-01-31 15:31:40,364 - DEBUG - dispatch pc=176, inst=STORE_FAST(arg=9, lineno=1230)
2025-01-31 15:31:40,364 - DEBUG - stack ['$174call_method.21']
2025-01-31 15:31:40,364 - DEBUG - dispatch pc=178, inst=LOAD_FAST(arg=0, lineno=1233)
2025-01-31 15:31:40,364 - DEBUG - stack []
2025-01-31 15:31:40,364 - DEBUG - dispatch pc=180, inst=LOAD_FAST(arg=8, lineno=1233)
2025-01-31 15:31:40,364 - DEBUG - stack ['$x178.22']
2025-01-31 15:31:40,365 - DEBUG - dispatch pc=182, inst=BINARY_SUBSCR(arg=None, lineno=1233)
2025-01-31 15:31:40,365 - DEBUG - stack ['$x178.22', '$n180.23']
2025-01-31 15:31:40,365 - DEBUG - dispatch pc=184, inst=LOAD_FAST(arg=9, lineno=1233)
2025-01-31 15:31:40,365 - DEBUG - stack ['$182binary_subscr.24']
2025-01-31 15:31:40,365 - DEBUG - dispatch pc=186, inst=COMPARE_OP(arg=2, lineno=1233)
2025-01-31 15:31:40,365 - DEBUG - stack ['$182binary_subscr.24', '$maxn184.25']
2025-01-31 15:31:40,365 - DEBUG - dispatch pc=188, inst=LOAD_FAST(arg=7, lineno=1233)
2025-01-31 15:31:40,365 - DEBUG - stack ['$186compare_op.26']
2025-01-31 15:31:40,365 - DEBUG - dispatch pc=190, inst=LOAD_FAST(arg=8, lineno=1233)
2025-01-31 15:31:40,365 - DEBUG - stack ['$186compare_op.26', '$peaks188.27']
2025-01-31 15:31:40,365 - DEBUG - dispatch pc=192, inst=STORE_SUBSCR(arg=None, lineno=1233)
2025-01-31 15:31:40,365 - DEBUG - stack ['$186compare_op.26', '$peaks188.27', '$n190.28']
2025-01-31 15:31:40,365 - DEBUG - dispatch pc=194, inst=LOAD_FAST(arg=7, lineno=1235)
2025-01-31 15:31:40,365 - DEBUG - stack []
2025-01-31 15:31:40,365 - DEBUG - dispatch pc=196, inst=LOAD_FAST(arg=8, lineno=1235)
2025-01-31 15:31:40,365 - DEBUG - stack ['$peaks194.29']
2025-01-31 15:31:40,365 - DEBUG - dispatch pc=198, inst=BINARY_SUBSCR(arg=None, lineno=1235)
2025-01-31 15:31:40,365 - DEBUG - stack ['$peaks194.29', '$n196.30']
2025-01-31 15:31:40,365 - DEBUG - dispatch pc=200, inst=POP_JUMP_IF_TRUE(arg=107, lineno=1235)
2025-01-31 15:31:40,365 - DEBUG - stack ['$198binary_subscr.31']
2025-01-31 15:31:40,365 - DEBUG - end state. edges=[Edge(pc=202, stack=(), blockstack=(), npush=0), Edge(pc=212, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:40,365 - DEBUG - pending: deque([State(pc_initial=332 nstack_initial=0), State(pc_initial=202 nstack_initial=0), State(pc_initial=212 nstack_initial=0)])
2025-01-31 15:31:40,365 - DEBUG - stack: []
2025-01-31 15:31:40,365 - DEBUG - state.pc_initial: State(pc_initial=332 nstack_initial=0)
2025-01-31 15:31:40,365 - DEBUG - dispatch pc=332, inst=LOAD_CONST(arg=2, lineno=1229)
2025-01-31 15:31:40,365 - DEBUG - stack []
2025-01-31 15:31:40,365 - DEBUG - dispatch pc=334, inst=RETURN_VALUE(arg=None, lineno=1229)
2025-01-31 15:31:40,365 - DEBUG - stack ['$const332.0']
2025-01-31 15:31:40,365 - DEBUG - end state. edges=[]
2025-01-31 15:31:40,366 - DEBUG - pending: deque([State(pc_initial=202 nstack_initial=0), State(pc_initial=212 nstack_initial=0)])
2025-01-31 15:31:40,366 - DEBUG - stack: []
2025-01-31 15:31:40,366 - DEBUG - state.pc_initial: State(pc_initial=202 nstack_initial=0)
2025-01-31 15:31:40,366 - DEBUG - dispatch pc=202, inst=LOAD_FAST(arg=8, lineno=1236)
2025-01-31 15:31:40,366 - DEBUG - stack []
2025-01-31 15:31:40,366 - DEBUG - dispatch pc=204, inst=LOAD_CONST(arg=3, lineno=1236)
2025-01-31 15:31:40,366 - DEBUG - stack ['$n202.0']
2025-01-31 15:31:40,366 - DEBUG - dispatch pc=206, inst=INPLACE_ADD(arg=None, lineno=1236)
2025-01-31 15:31:40,366 - DEBUG - stack ['$n202.0', '$const204.1']
2025-01-31 15:31:40,366 - DEBUG - dispatch pc=208, inst=STORE_FAST(arg=8, lineno=1236)
2025-01-31 15:31:40,366 - DEBUG - stack ['$206inplace_add.2']
2025-01-31 15:31:40,366 - DEBUG - dispatch pc=210, inst=JUMP_ABSOLUTE(arg=61, lineno=1237)
2025-01-31 15:31:40,366 - DEBUG - stack []
2025-01-31 15:31:40,366 - DEBUG - end state. edges=[Edge(pc=120, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:40,366 - DEBUG - pending: deque([State(pc_initial=212 nstack_initial=0), State(pc_initial=120 nstack_initial=0)])
2025-01-31 15:31:40,366 - DEBUG - stack: []
2025-01-31 15:31:40,366 - DEBUG - state.pc_initial: State(pc_initial=212 nstack_initial=0)
2025-01-31 15:31:40,366 - DEBUG - dispatch pc=212, inst=LOAD_GLOBAL(arg=0, lineno=1239)
2025-01-31 15:31:40,366 - DEBUG - stack []
2025-01-31 15:31:40,366 - DEBUG - dispatch pc=214, inst=LOAD_METHOD(arg=4, lineno=1239)
2025-01-31 15:31:40,366 - DEBUG - stack ['$212load_global.0']
2025-01-31 15:31:40,366 - DEBUG - dispatch pc=216, inst=LOAD_FAST(arg=0, lineno=1239)
2025-01-31 15:31:40,366 - DEBUG - stack ['$214load_method.1']
2025-01-31 15:31:40,366 - DEBUG - dispatch pc=218, inst=LOAD_GLOBAL(arg=1, lineno=1239)
2025-01-31 15:31:40,366 - DEBUG - stack ['$214load_method.1', '$x216.2']
2025-01-31 15:31:40,366 - DEBUG - dispatch pc=220, inst=LOAD_CONST(arg=1, lineno=1239)
2025-01-31 15:31:40,366 - DEBUG - stack ['$214load_method.1', '$x216.2', '$218load_global.3']
2025-01-31 15:31:40,366 - DEBUG - dispatch pc=222, inst=LOAD_FAST(arg=8, lineno=1239)
2025-01-31 15:31:40,366 - DEBUG - stack ['$214load_method.1', '$x216.2', '$218load_global.3', '$const220.4']
2025-01-31 15:31:40,367 - DEBUG - dispatch pc=224, inst=LOAD_FAST(arg=3, lineno=1239)
2025-01-31 15:31:40,367 - DEBUG - stack ['$214load_method.1', '$x216.2', '$218load_global.3', '$const220.4', '$n222.5']
2025-01-31 15:31:40,367 - DEBUG - dispatch pc=226, inst=BINARY_SUBTRACT(arg=None, lineno=1239)
2025-01-31 15:31:40,367 - DEBUG - stack ['$214load_method.1', '$x216.2', '$218load_global.3', '$const220.4', '$n222.5', '$pre_avg224.6']
2025-01-31 15:31:40,367 - DEBUG - dispatch pc=228, inst=CALL_FUNCTION(arg=2, lineno=1239)
2025-01-31 15:31:40,367 - DEBUG - stack ['$214load_method.1', '$x216.2', '$218load_global.3', '$const220.4', '$226binary_subtract.7']
2025-01-31 15:31:40,367 - DEBUG - dispatch pc=230, inst=LOAD_GLOBAL(arg=2, lineno=1239)
2025-01-31 15:31:40,367 - DEBUG - stack ['$214load_method.1', '$x216.2', '$228call_function.8']
2025-01-31 15:31:40,367 - DEBUG - dispatch pc=232, inst=LOAD_FAST(arg=8, lineno=1239)
2025-01-31 15:31:40,367 - DEBUG - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$230load_global.9']
2025-01-31 15:31:40,367 - DEBUG - dispatch pc=234, inst=LOAD_FAST(arg=4, lineno=1239)
2025-01-31 15:31:40,367 - DEBUG - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$230load_global.9', '$n232.10']
2025-01-31 15:31:40,367 - DEBUG - dispatch pc=236, inst=BINARY_ADD(arg=None, lineno=1239)
2025-01-31 15:31:40,367 - DEBUG - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$230load_global.9', '$n232.10', '$post_avg234.11']
2025-01-31 15:31:40,367 - DEBUG - dispatch pc=238, inst=LOAD_FAST(arg=0, lineno=1239)
2025-01-31 15:31:40,367 - DEBUG - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$230load_global.9', '$236binary_add.12']
2025-01-31 15:31:40,367 - DEBUG - dispatch pc=240, inst=LOAD_ATTR(arg=3, lineno=1239)
2025-01-31 15:31:40,367 - DEBUG - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$230load_global.9', '$236binary_add.12', '$x238.13']
2025-01-31 15:31:40,367 - DEBUG - dispatch pc=242, inst=LOAD_CONST(arg=1, lineno=1239)
2025-01-31 15:31:40,367 - DEBUG - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$230load_global.9', '$236binary_add.12', '$240load_attr.14']
2025-01-31 15:31:40,367 - DEBUG - dispatch pc=244, inst=BINARY_SUBSCR(arg=None, lineno=1239)
2025-01-31 15:31:40,367 - DEBUG - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$230load_global.9', '$236binary_add.12', '$240load_attr.14', '$const242.15']
2025-01-31 15:31:40,367 - DEBUG - dispatch pc=246, inst=CALL_FUNCTION(arg=2, lineno=1239)
2025-01-31 15:31:40,367 - DEBUG - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$230load_global.9', '$236binary_add.12', '$244binary_subscr.16']
2025-01-31 15:31:40,367 - DEBUG - dispatch pc=248, inst=BUILD_SLICE(arg=2, lineno=1239)
2025-01-31 15:31:40,367 - DEBUG - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$246call_function.17']
2025-01-31 15:31:40,367 - DEBUG - dispatch pc=250, inst=BINARY_SUBSCR(arg=None, lineno=1239)
2025-01-31 15:31:40,367 - DEBUG - stack ['$214load_method.1', '$x216.2', '$248build_slice.19']
2025-01-31 15:31:40,367 - DEBUG - dispatch pc=252, inst=CALL_METHOD(arg=1, lineno=1239)
2025-01-31 15:31:40,368 - DEBUG - stack ['$214load_method.1', '$250binary_subscr.20']
2025-01-31 15:31:40,368 - DEBUG - dispatch pc=254, inst=STORE_FAST(arg=10, lineno=1239)
2025-01-31 15:31:40,368 - DEBUG - stack ['$252call_method.21']
2025-01-31 15:31:40,368 - DEBUG - dispatch pc=256, inst=LOAD_FAST(arg=7, lineno=1240)
2025-01-31 15:31:40,368 - DEBUG - stack []
2025-01-31 15:31:40,368 - DEBUG - dispatch pc=258, inst=LOAD_FAST(arg=8, lineno=1240)
2025-01-31 15:31:40,368 - DEBUG - stack ['$peaks256.22']
2025-01-31 15:31:40,368 - DEBUG - dispatch pc=260, inst=DUP_TOP_TWO(arg=None, lineno=1240)
2025-01-31 15:31:40,368 - DEBUG - stack ['$peaks256.22', '$n258.23']
2025-01-31 15:31:40,368 - DEBUG - dispatch pc=262, inst=BINARY_SUBSCR(arg=None, lineno=1240)
2025-01-31 15:31:40,368 - DEBUG - stack ['$peaks256.22', '$n258.23', '$260dup_top_two.24', '$260dup_top_two.25']
2025-01-31 15:31:40,368 - DEBUG - dispatch pc=264, inst=LOAD_FAST(arg=0, lineno=1240)
2025-01-31 15:31:40,368 - DEBUG - stack ['$peaks256.22', '$n258.23', '$262binary_subscr.26']
2025-01-31 15:31:40,368 - DEBUG - dispatch pc=266, inst=LOAD_FAST(arg=8, lineno=1240)
2025-01-31 15:31:40,368 - DEBUG - stack ['$peaks256.22', '$n258.23', '$262binary_subscr.26', '$x264.27']
2025-01-31 15:31:40,368 - DEBUG - dispatch pc=268, inst=BINARY_SUBSCR(arg=None, lineno=1240)
2025-01-31 15:31:40,368 - DEBUG - stack ['$peaks256.22', '$n258.23', '$262binary_subscr.26', '$x264.27', '$n266.28']
2025-01-31 15:31:40,368 - DEBUG - dispatch pc=270, inst=LOAD_FAST(arg=10, lineno=1240)
2025-01-31 15:31:40,368 - DEBUG - stack ['$peaks256.22', '$n258.23', '$262binary_subscr.26', '$268binary_subscr.29']
2025-01-31 15:31:40,368 - DEBUG - dispatch pc=272, inst=LOAD_FAST(arg=5, lineno=1240)
2025-01-31 15:31:40,368 - DEBUG - stack ['$peaks256.22', '$n258.23', '$262binary_subscr.26', '$268binary_subscr.29', '$avgn270.30']
2025-01-31 15:31:40,368 - DEBUG - dispatch pc=274, inst=BINARY_ADD(arg=None, lineno=1240)
2025-01-31 15:31:40,368 - DEBUG - stack ['$peaks256.22', '$n258.23', '$262binary_subscr.26', '$268binary_subscr.29', '$avgn270.30', '$delta272.31']
2025-01-31 15:31:40,368 - DEBUG - dispatch pc=276, inst=COMPARE_OP(arg=5, lineno=1240)
2025-01-31 15:31:40,368 - DEBUG - stack ['$peaks256.22', '$n258.23', '$262binary_subscr.26', '$268binary_subscr.29', '$274binary_add.32']
2025-01-31 15:31:40,368 - DEBUG - dispatch pc=278, inst=INPLACE_AND(arg=None, lineno=1240)
2025-01-31 15:31:40,368 - DEBUG - stack ['$peaks256.22', '$n258.23', '$262binary_subscr.26', '$276compare_op.33']
2025-01-31 15:31:40,368 - DEBUG - dispatch pc=280, inst=ROT_THREE(arg=None, lineno=1240)
2025-01-31 15:31:40,368 - DEBUG - stack ['$peaks256.22', '$n258.23', '$278inplace_and.34']
2025-01-31 15:31:40,369 - DEBUG - dispatch pc=282, inst=STORE_SUBSCR(arg=None, lineno=1240)
2025-01-31 15:31:40,369 - DEBUG - stack ['$278inplace_and.34', '$peaks256.22', '$n258.23']
2025-01-31 15:31:40,369 - DEBUG - dispatch pc=284, inst=LOAD_FAST(arg=7, lineno=1242)
2025-01-31 15:31:40,369 - DEBUG - stack []
2025-01-31 15:31:40,369 - DEBUG - dispatch pc=286, inst=LOAD_FAST(arg=8, lineno=1242)
2025-01-31 15:31:40,369 - DEBUG - stack ['$peaks284.35']
2025-01-31 15:31:40,369 - DEBUG - dispatch pc=288, inst=BINARY_SUBSCR(arg=None, lineno=1242)
2025-01-31 15:31:40,369 - DEBUG - stack ['$peaks284.35', '$n286.36']
2025-01-31 15:31:40,369 - DEBUG - dispatch pc=290, inst=POP_JUMP_IF_TRUE(arg=152, lineno=1242)
2025-01-31 15:31:40,369 - DEBUG - stack ['$288binary_subscr.37']
2025-01-31 15:31:40,369 - DEBUG - end state. edges=[Edge(pc=292, stack=(), blockstack=(), npush=0), Edge(pc=302, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:40,369 - DEBUG - pending: deque([State(pc_initial=120 nstack_initial=0), State(pc_initial=292 nstack_initial=0), State(pc_initial=302 nstack_initial=0)])
2025-01-31 15:31:40,369 - DEBUG - pending: deque([State(pc_initial=292 nstack_initial=0), State(pc_initial=302 nstack_initial=0)])
2025-01-31 15:31:40,369 - DEBUG - stack: []
2025-01-31 15:31:40,369 - DEBUG - state.pc_initial: State(pc_initial=292 nstack_initial=0)
2025-01-31 15:31:40,369 - DEBUG - dispatch pc=292, inst=LOAD_FAST(arg=8, lineno=1243)
2025-01-31 15:31:40,369 - DEBUG - stack []
2025-01-31 15:31:40,369 - DEBUG - dispatch pc=294, inst=LOAD_CONST(arg=3, lineno=1243)
2025-01-31 15:31:40,369 - DEBUG - stack ['$n292.0']
2025-01-31 15:31:40,369 - DEBUG - dispatch pc=296, inst=INPLACE_ADD(arg=None, lineno=1243)
2025-01-31 15:31:40,369 - DEBUG - stack ['$n292.0', '$const294.1']
2025-01-31 15:31:40,369 - DEBUG - dispatch pc=298, inst=STORE_FAST(arg=8, lineno=1243)
2025-01-31 15:31:40,369 - DEBUG - stack ['$296inplace_add.2']
2025-01-31 15:31:40,369 - DEBUG - dispatch pc=300, inst=JUMP_ABSOLUTE(arg=61, lineno=1244)
2025-01-31 15:31:40,369 - DEBUG - stack []
2025-01-31 15:31:40,369 - DEBUG - end state. edges=[Edge(pc=120, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:40,369 - DEBUG - pending: deque([State(pc_initial=302 nstack_initial=0), State(pc_initial=120 nstack_initial=0)])
2025-01-31 15:31:40,369 - DEBUG - stack: []
2025-01-31 15:31:40,369 - DEBUG - state.pc_initial: State(pc_initial=302 nstack_initial=0)
2025-01-31 15:31:40,370 - DEBUG - dispatch pc=302, inst=LOAD_FAST(arg=8, lineno=1247)
2025-01-31 15:31:40,370 - DEBUG - stack []
2025-01-31 15:31:40,370 - DEBUG - dispatch pc=304, inst=LOAD_FAST(arg=6, lineno=1247)
2025-01-31 15:31:40,370 - DEBUG - stack ['$n302.0']
2025-01-31 15:31:40,370 - DEBUG - dispatch pc=306, inst=LOAD_CONST(arg=3, lineno=1247)
2025-01-31 15:31:40,370 - DEBUG - stack ['$n302.0', '$wait304.1']
2025-01-31 15:31:40,370 - DEBUG - dispatch pc=308, inst=BINARY_ADD(arg=None, lineno=1247)
2025-01-31 15:31:40,370 - DEBUG - stack ['$n302.0', '$wait304.1', '$const306.2']
2025-01-31 15:31:40,370 - DEBUG - dispatch pc=310, inst=INPLACE_ADD(arg=None, lineno=1247)
2025-01-31 15:31:40,370 - DEBUG - stack ['$n302.0', '$308binary_add.3']
2025-01-31 15:31:40,370 - DEBUG - dispatch pc=312, inst=STORE_FAST(arg=8, lineno=1247)
2025-01-31 15:31:40,370 - DEBUG - stack ['$310inplace_add.4']
2025-01-31 15:31:40,370 - DEBUG - dispatch pc=314, inst=LOAD_FAST(arg=8, lineno=1229)
2025-01-31 15:31:40,370 - DEBUG - stack []
2025-01-31 15:31:40,370 - DEBUG - dispatch pc=316, inst=LOAD_FAST(arg=0, lineno=1229)
2025-01-31 15:31:40,370 - DEBUG - stack ['$n314.5']
2025-01-31 15:31:40,370 - DEBUG - dispatch pc=318, inst=LOAD_ATTR(arg=3, lineno=1229)
2025-01-31 15:31:40,370 - DEBUG - stack ['$n314.5', '$x316.6']
2025-01-31 15:31:40,370 - DEBUG - dispatch pc=320, inst=LOAD_CONST(arg=1, lineno=1229)
2025-01-31 15:31:40,370 - DEBUG - stack ['$n314.5', '$318load_attr.7']
2025-01-31 15:31:40,370 - DEBUG - dispatch pc=322, inst=BINARY_SUBSCR(arg=None, lineno=1229)
2025-01-31 15:31:40,370 - DEBUG - stack ['$n314.5', '$318load_attr.7', '$const320.8']
2025-01-31 15:31:40,370 - DEBUG - dispatch pc=324, inst=COMPARE_OP(arg=0, lineno=1229)
2025-01-31 15:31:40,370 - DEBUG - stack ['$n314.5', '$322binary_subscr.9']
2025-01-31 15:31:40,370 - DEBUG - dispatch pc=326, inst=POP_JUMP_IF_TRUE(arg=68, lineno=1229)
2025-01-31 15:31:40,370 - DEBUG - stack ['$324compare_op.10']
2025-01-31 15:31:40,370 - DEBUG - end state. edges=[Edge(pc=328, stack=(), blockstack=(), npush=0), Edge(pc=134, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:40,370 - DEBUG - pending: deque([State(pc_initial=120 nstack_initial=0), State(pc_initial=328 nstack_initial=0), State(pc_initial=134 nstack_initial=0)])
2025-01-31 15:31:40,370 - DEBUG - pending: deque([State(pc_initial=328 nstack_initial=0), State(pc_initial=134 nstack_initial=0)])
2025-01-31 15:31:40,371 - DEBUG - stack: []
2025-01-31 15:31:40,371 - DEBUG - state.pc_initial: State(pc_initial=328 nstack_initial=0)
2025-01-31 15:31:40,371 - DEBUG - dispatch pc=328, inst=LOAD_CONST(arg=2, lineno=1229)
2025-01-31 15:31:40,371 - DEBUG - stack []
2025-01-31 15:31:40,371 - DEBUG - dispatch pc=330, inst=RETURN_VALUE(arg=None, lineno=1229)
2025-01-31 15:31:40,371 - DEBUG - stack ['$const328.0']
2025-01-31 15:31:40,371 - DEBUG - end state. edges=[]
2025-01-31 15:31:40,371 - DEBUG - pending: deque([State(pc_initial=134 nstack_initial=0)])
2025-01-31 15:31:40,371 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:31:40,371 - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=106 nstack_initial=0): set(),
             State(pc_initial=116 nstack_initial=0): set(),
             State(pc_initial=120 nstack_initial=0): set(),
             State(pc_initial=134 nstack_initial=0): set(),
             State(pc_initial=202 nstack_initial=0): set(),
             State(pc_initial=212 nstack_initial=0): set(),
             State(pc_initial=292 nstack_initial=0): set(),
             State(pc_initial=302 nstack_initial=0): set(),
             State(pc_initial=328 nstack_initial=0): set(),
             State(pc_initial=332 nstack_initial=0): set()})
2025-01-31 15:31:40,371 - DEBUG - defmap: {}
2025-01-31 15:31:40,371 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:40,371 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:40,371 - DEBUG - keep phismap: {}
2025-01-31 15:31:40,371 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-01-31 15:31:40,371 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:31:40,371 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'res': '$8load_global.3'}), (10, {'item': '$8load_global.3', 'res': '$10load_method.4'}), (12, {'res': '$x12.5'}), (14, {'res': '$const14.6'}), (16, {'res': '$16load_global.7'}), (18, {'res': '$post_max18.8'}), (20, {'res': '$x20.9'}), (22, {'item': '$x20.9', 'res': '$22load_attr.10'}), (24, {'res': '$const24.11'}), (26, {'index': '$const24.11', 'target': '$22load_attr.10', 'res': '$26binary_subscr.12'}), (28, {'func': '$16load_global.7', 'args': ['$post_max18.8', '$26binary_subscr.12'], 'res': '$28call_function.13'}), (30, {'start': '$const14.6', 'stop': '$28call_function.13', 'step': None, 'res': '$30build_slice.15', 'slicevar': '$30build_slice.14'}), (32, {'index': '$30build_slice.15', 'target': '$x12.5', 'res': '$32binary_subscr.16'}), (34, {'func': '$10load_method.4', 'args': ['$32binary_subscr.16'], 'res': '$34call_method.17'}), (36, {'lhs': '$6binary_subscr.2', 'rhs': '$34call_method.17', 'res': '$36compare_op.18'}), (38, {'res': '$peaks38.19'}), (40, {'res': '$const40.20'}), (42, {'target': '$peaks38.19', 'index': '$const40.20', 'value': '$36compare_op.18'}), (44, {'res': '$peaks44.21'}), (46, {'res': '$const46.22'}), (48, {'orig': ['$peaks44.21', '$const46.22'], 'duped': ['$48dup_top_two.23', '$48dup_top_two.24']}), (50, {'index': '$48dup_top_two.24', 'target': '$48dup_top_two.23', 'res': '$50binary_subscr.25'}), (52, {'res': '$x52.26'}), (54, {'res': '$const54.27'}), (56, {'index': '$const54.27', 'target': '$x52.26', 'res': '$56binary_subscr.28'}), (58, {'res': '$58load_global.29'}), (60, {'item': '$58load_global.29', 'res': '$60load_method.30'}), (62, {'res': '$x62.31'}), (64, {'res': '$const64.32'}), (66, {'res': '$66load_global.33'}), (68, {'res': '$post_avg68.34'}), (70, {'res': '$x70.35'}), (72, {'item': '$x70.35', 'res': '$72load_attr.36'}), (74, {'res': '$const74.37'}), (76, {'index': '$const74.37', 'target': '$72load_attr.36', 'res': '$76binary_subscr.38'}), (78, {'func': '$66load_global.33', 'args': ['$post_avg68.34', '$76binary_subscr.38'], 'res': '$78call_function.39'}), (80, {'start': '$const64.32', 'stop': '$78call_function.39', 'step': None, 'res': '$80build_slice.41', 'slicevar': '$80build_slice.40'}), (82, {'index': '$80build_slice.41', 'target': '$x62.31', 'res': '$82binary_subscr.42'}), (84, {'func': '$60load_method.30', 'args': ['$82binary_subscr.42'], 'res': '$84call_method.43'}), (86, {'res': '$delta86.44'}), (88, {'lhs': '$84call_method.43', 'rhs': '$delta86.44', 'res': '$88binary_add.45'}), (90, {'lhs': '$56binary_subscr.28', 'rhs': '$88binary_add.45', 'res': '$90compare_op.46'}), (92, {'lhs': '$50binary_subscr.25', 'rhs': '$90compare_op.46', 'res': '$92inplace_and.47'}), (96, {'target': '$peaks44.21', 'index': '$const46.22', 'value': '$92inplace_and.47'}), (98, {'res': '$peaks98.48'}), (100, {'res': '$const100.49'}), (102, {'index': '$const100.49', 'target': '$peaks98.48', 'res': '$102binary_subscr.50'}), (104, {'pred': '$102binary_subscr.50'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={106: (), 116: ()})
2025-01-31 15:31:40,372 - DEBUG - block_infos State(pc_initial=106 nstack_initial=0):
AdaptBlockInfo(insts=((106, {'res': '$wait106.0'}), (108, {'res': '$const108.1'}), (110, {'lhs': '$wait106.0', 'rhs': '$const108.1', 'res': '$110binary_add.2'}), (112, {'value': '$110binary_add.2'}), (114, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={120: ()})
2025-01-31 15:31:40,372 - DEBUG - block_infos State(pc_initial=116 nstack_initial=0):
AdaptBlockInfo(insts=((116, {'res': '$const116.0'}), (118, {'value': '$const116.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={120: ()})
2025-01-31 15:31:40,372 - DEBUG - block_infos State(pc_initial=120 nstack_initial=0):
AdaptBlockInfo(insts=((120, {'res': '$n120.0'}), (122, {'res': '$x122.1'}), (124, {'item': '$x122.1', 'res': '$124load_attr.2'}), (126, {'res': '$const126.3'}), (128, {'index': '$const126.3', 'target': '$124load_attr.2', 'res': '$128binary_subscr.4'}), (130, {'lhs': '$n120.0', 'rhs': '$128binary_subscr.4', 'res': '$130compare_op.5'}), (132, {'pred': '$130compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={134: (), 332: ()})
2025-01-31 15:31:40,372 - DEBUG - block_infos State(pc_initial=134 nstack_initial=0):
AdaptBlockInfo(insts=((134, {'res': '$134load_global.0'}), (136, {'item': '$134load_global.0', 'res': '$136load_method.1'}), (138, {'res': '$x138.2'}), (140, {'res': '$140load_global.3'}), (142, {'res': '$const142.4'}), (144, {'res': '$n144.5'}), (146, {'res': '$pre_max146.6'}), (148, {'lhs': '$n144.5', 'rhs': '$pre_max146.6', 'res': '$148binary_subtract.7'}), (150, {'func': '$140load_global.3', 'args': ['$const142.4', '$148binary_subtract.7'], 'res': '$150call_function.8'}), (152, {'res': '$152load_global.9'}), (154, {'res': '$n154.10'}), (156, {'res': '$post_max156.11'}), (158, {'lhs': '$n154.10', 'rhs': '$post_max156.11', 'res': '$158binary_add.12'}), (160, {'res': '$x160.13'}), (162, {'item': '$x160.13', 'res': '$162load_attr.14'}), (164, {'res': '$const164.15'}), (166, {'index': '$const164.15', 'target': '$162load_attr.14', 'res': '$166binary_subscr.16'}), (168, {'func': '$152load_global.9', 'args': ['$158binary_add.12', '$166binary_subscr.16'], 'res': '$168call_function.17'}), (170, {'start': '$150call_function.8', 'stop': '$168call_function.17', 'step': None, 'res': '$170build_slice.19', 'slicevar': '$170build_slice.18'}), (172, {'index': '$170build_slice.19', 'target': '$x138.2', 'res': '$172binary_subscr.20'}), (174, {'func': '$136load_method.1', 'args': ['$172binary_subscr.20'], 'res': '$174call_method.21'}), (176, {'value': '$174call_method.21'}), (178, {'res': '$x178.22'}), (180, {'res': '$n180.23'}), (182, {'index': '$n180.23', 'target': '$x178.22', 'res': '$182binary_subscr.24'}), (184, {'res': '$maxn184.25'}), (186, {'lhs': '$182binary_subscr.24', 'rhs': '$maxn184.25', 'res': '$186compare_op.26'}), (188, {'res': '$peaks188.27'}), (190, {'res': '$n190.28'}), (192, {'target': '$peaks188.27', 'index': '$n190.28', 'value': '$186compare_op.26'}), (194, {'res': '$peaks194.29'}), (196, {'res': '$n196.30'}), (198, {'index': '$n196.30', 'target': '$peaks194.29', 'res': '$198binary_subscr.31'}), (200, {'pred': '$198binary_subscr.31'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={202: (), 212: ()})
2025-01-31 15:31:40,372 - DEBUG - block_infos State(pc_initial=202 nstack_initial=0):
AdaptBlockInfo(insts=((202, {'res': '$n202.0'}), (204, {'res': '$const204.1'}), (206, {'lhs': '$n202.0', 'rhs': '$const204.1', 'res': '$206inplace_add.2'}), (208, {'value': '$206inplace_add.2'}), (210, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={120: ()})
2025-01-31 15:31:40,372 - DEBUG - block_infos State(pc_initial=212 nstack_initial=0):
AdaptBlockInfo(insts=((212, {'res': '$212load_global.0'}), (214, {'item': '$212load_global.0', 'res': '$214load_method.1'}), (216, {'res': '$x216.2'}), (218, {'res': '$218load_global.3'}), (220, {'res': '$const220.4'}), (222, {'res': '$n222.5'}), (224, {'res': '$pre_avg224.6'}), (226, {'lhs': '$n222.5', 'rhs': '$pre_avg224.6', 'res': '$226binary_subtract.7'}), (228, {'func': '$218load_global.3', 'args': ['$const220.4', '$226binary_subtract.7'], 'res': '$228call_function.8'}), (230, {'res': '$230load_global.9'}), (232, {'res': '$n232.10'}), (234, {'res': '$post_avg234.11'}), (236, {'lhs': '$n232.10', 'rhs': '$post_avg234.11', 'res': '$236binary_add.12'}), (238, {'res': '$x238.13'}), (240, {'item': '$x238.13', 'res': '$240load_attr.14'}), (242, {'res': '$const242.15'}), (244, {'index': '$const242.15', 'target': '$240load_attr.14', 'res': '$244binary_subscr.16'}), (246, {'func': '$230load_global.9', 'args': ['$236binary_add.12', '$244binary_subscr.16'], 'res': '$246call_function.17'}), (248, {'start': '$228call_function.8', 'stop': '$246call_function.17', 'step': None, 'res': '$248build_slice.19', 'slicevar': '$248build_slice.18'}), (250, {'index': '$248build_slice.19', 'target': '$x216.2', 'res': '$250binary_subscr.20'}), (252, {'func': '$214load_method.1', 'args': ['$250binary_subscr.20'], 'res': '$252call_method.21'}), (254, {'value': '$252call_method.21'}), (256, {'res': '$peaks256.22'}), (258, {'res': '$n258.23'}), (260, {'orig': ['$peaks256.22', '$n258.23'], 'duped': ['$260dup_top_two.24', '$260dup_top_two.25']}), (262, {'index': '$260dup_top_two.25', 'target': '$260dup_top_two.24', 'res': '$262binary_subscr.26'}), (264, {'res': '$x264.27'}), (266, {'res': '$n266.28'}), (268, {'index': '$n266.28', 'target': '$x264.27', 'res': '$268binary_subscr.29'}), (270, {'res': '$avgn270.30'}), (272, {'res': '$delta272.31'}), (274, {'lhs': '$avgn270.30', 'rhs': '$delta272.31', 'res': '$274binary_add.32'}), (276, {'lhs': '$268binary_subscr.29', 'rhs': '$274binary_add.32', 'res': '$276compare_op.33'}), (278, {'lhs': '$262binary_subscr.26', 'rhs': '$276compare_op.33', 'res': '$278inplace_and.34'}), (282, {'target': '$peaks256.22', 'index': '$n258.23', 'value': '$278inplace_and.34'}), (284, {'res': '$peaks284.35'}), (286, {'res': '$n286.36'}), (288, {'index': '$n286.36', 'target': '$peaks284.35', 'res': '$288binary_subscr.37'}), (290, {'pred': '$288binary_subscr.37'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={292: (), 302: ()})
2025-01-31 15:31:40,372 - DEBUG - block_infos State(pc_initial=292 nstack_initial=0):
AdaptBlockInfo(insts=((292, {'res': '$n292.0'}), (294, {'res': '$const294.1'}), (296, {'lhs': '$n292.0', 'rhs': '$const294.1', 'res': '$296inplace_add.2'}), (298, {'value': '$296inplace_add.2'}), (300, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={120: ()})
2025-01-31 15:31:40,372 - DEBUG - block_infos State(pc_initial=302 nstack_initial=0):
AdaptBlockInfo(insts=((302, {'res': '$n302.0'}), (304, {'res': '$wait304.1'}), (306, {'res': '$const306.2'}), (308, {'lhs': '$wait304.1', 'rhs': '$const306.2', 'res': '$308binary_add.3'}), (310, {'lhs': '$n302.0', 'rhs': '$308binary_add.3', 'res': '$310inplace_add.4'}), (312, {'value': '$310inplace_add.4'}), (314, {'res': '$n314.5'}), (316, {'res': '$x316.6'}), (318, {'item': '$x316.6', 'res': '$318load_attr.7'}), (320, {'res': '$const320.8'}), (322, {'index': '$const320.8', 'target': '$318load_attr.7', 'res': '$322binary_subscr.9'}), (324, {'lhs': '$n314.5', 'rhs': '$322binary_subscr.9', 'res': '$324compare_op.10'}), (326, {'pred': '$324compare_op.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={328: (), 134: ()})
2025-01-31 15:31:40,372 - DEBUG - block_infos State(pc_initial=328 nstack_initial=0):
AdaptBlockInfo(insts=((328, {'res': '$const328.0'}), (330, {'retval': '$const328.0', 'castval': '$330return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:40,372 - DEBUG - block_infos State(pc_initial=332 nstack_initial=0):
AdaptBlockInfo(insts=((332, {'res': '$const332.0'}), (334, {'retval': '$const332.0', 'castval': '$334return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:40,375 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    pre_max = arg(1, name=pre_max)           ['pre_max']
    post_max = arg(2, name=post_max)         ['post_max']
    pre_avg = arg(3, name=pre_avg)           ['pre_avg']
    post_avg = arg(4, name=post_avg)         ['post_avg']
    delta = arg(5, name=delta)               ['delta']
    wait = arg(6, name=wait)                 ['wait']
    peaks = arg(7, name=peaks)               ['peaks']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6binary_subscr.2 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$6binary_subscr.2', '$const4.1', 'x']
    $8load_global.3 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>) ['$8load_global.3']
    $10load_method.4 = getattr(value=$8load_global.3, attr=max) ['$10load_method.4', '$8load_global.3']
    $const14.6 = const(NoneType, None)       ['$const14.6']
    $16load_global.7 = global(min: <built-in function min>) ['$16load_global.7']
    $22load_attr.10 = getattr(value=x, attr=shape) ['$22load_attr.10', 'x']
    $const24.11 = const(int, 0)              ['$const24.11']
    $26binary_subscr.12 = getitem(value=$22load_attr.10, index=$const24.11, fn=<built-in function getitem>) ['$22load_attr.10', '$26binary_subscr.12', '$const24.11']
    $28call_function.13 = call $16load_global.7(post_max, $26binary_subscr.12, func=$16load_global.7, args=[Var(post_max, utils.py:1209), Var($26binary_subscr.12, utils.py:1221)], kws=(), vararg=None, varkwarg=None, target=None) ['$16load_global.7', '$26binary_subscr.12', '$28call_function.13', 'post_max']
    $30build_slice.14 = global(slice: <class 'slice'>) ['$30build_slice.14']
    $30build_slice.15 = call $30build_slice.14($const14.6, $28call_function.13, func=$30build_slice.14, args=(Var($const14.6, utils.py:1221), Var($28call_function.13, utils.py:1221)), kws=(), vararg=None, varkwarg=None, target=None) ['$28call_function.13', '$30build_slice.14', '$30build_slice.15', '$const14.6']
    $32binary_subscr.16 = getitem(value=x, index=$30build_slice.15, fn=<built-in function getitem>) ['$30build_slice.15', '$32binary_subscr.16', 'x']
    $34call_method.17 = call $10load_method.4($32binary_subscr.16, func=$10load_method.4, args=[Var($32binary_subscr.16, utils.py:1221)], kws=(), vararg=None, varkwarg=None, target=None) ['$10load_method.4', '$32binary_subscr.16', '$34call_method.17']
    $36compare_op.18 = $6binary_subscr.2 >= $34call_method.17 ['$34call_method.17', '$36compare_op.18', '$6binary_subscr.2']
    $const40.20 = const(int, 0)              ['$const40.20']
    peaks[$const40.20] = $36compare_op.18    ['$36compare_op.18', '$const40.20', 'peaks']
    $const46.22 = const(int, 0)              ['$const46.22']
    $50binary_subscr.25 = getitem(value=peaks, index=$const46.22, fn=<built-in function getitem>) ['$50binary_subscr.25', '$const46.22', 'peaks']
    $const54.27 = const(int, 0)              ['$const54.27']
    $56binary_subscr.28 = getitem(value=x, index=$const54.27, fn=<built-in function getitem>) ['$56binary_subscr.28', '$const54.27', 'x']
    $58load_global.29 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>) ['$58load_global.29']
    $60load_method.30 = getattr(value=$58load_global.29, attr=mean) ['$58load_global.29', '$60load_method.30']
    $const64.32 = const(NoneType, None)      ['$const64.32']
    $66load_global.33 = global(min: <built-in function min>) ['$66load_global.33']
    $72load_attr.36 = getattr(value=x, attr=shape) ['$72load_attr.36', 'x']
    $const74.37 = const(int, 0)              ['$const74.37']
    $76binary_subscr.38 = getitem(value=$72load_attr.36, index=$const74.37, fn=<built-in function getitem>) ['$72load_attr.36', '$76binary_subscr.38', '$const74.37']
    $78call_function.39 = call $66load_global.33(post_avg, $76binary_subscr.38, func=$66load_global.33, args=[Var(post_avg, utils.py:1209), Var($76binary_subscr.38, utils.py:1222)], kws=(), vararg=None, varkwarg=None, target=None) ['$66load_global.33', '$76binary_subscr.38', '$78call_function.39', 'post_avg']
    $80build_slice.40 = global(slice: <class 'slice'>) ['$80build_slice.40']
    $80build_slice.41 = call $80build_slice.40($const64.32, $78call_function.39, func=$80build_slice.40, args=(Var($const64.32, utils.py:1222), Var($78call_function.39, utils.py:1222)), kws=(), vararg=None, varkwarg=None, target=None) ['$78call_function.39', '$80build_slice.40', '$80build_slice.41', '$const64.32']
    $82binary_subscr.42 = getitem(value=x, index=$80build_slice.41, fn=<built-in function getitem>) ['$80build_slice.41', '$82binary_subscr.42', 'x']
    $84call_method.43 = call $60load_method.30($82binary_subscr.42, func=$60load_method.30, args=[Var($82binary_subscr.42, utils.py:1222)], kws=(), vararg=None, varkwarg=None, target=None) ['$60load_method.30', '$82binary_subscr.42', '$84call_method.43']
    $88binary_add.45 = $84call_method.43 + delta ['$84call_method.43', '$88binary_add.45', 'delta']
    $90compare_op.46 = $56binary_subscr.28 >= $88binary_add.45 ['$56binary_subscr.28', '$88binary_add.45', '$90compare_op.46']
    $92inplace_and.47 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$50binary_subscr.25, rhs=$90compare_op.46, static_lhs=Undefined, static_rhs=Undefined) ['$50binary_subscr.25', '$90compare_op.46', '$92inplace_and.47']
    peaks[$const46.22] = $92inplace_and.47   ['$92inplace_and.47', '$const46.22', 'peaks']
    $const100.49 = const(int, 0)             ['$const100.49']
    $102binary_subscr.50 = getitem(value=peaks, index=$const100.49, fn=<built-in function getitem>) ['$102binary_subscr.50', '$const100.49', 'peaks']
    bool104 = global(bool: <class 'bool'>)   ['bool104']
    $104pred = call bool104($102binary_subscr.50, func=bool104, args=(Var($102binary_subscr.50, utils.py:1224),), kws=(), vararg=None, varkwarg=None, target=None) ['$102binary_subscr.50', '$104pred', 'bool104']
    branch $104pred, 106, 116                ['$104pred']
label 106:
    $const108.1 = const(int, 1)              ['$const108.1']
    n = wait + $const108.1                   ['$const108.1', 'n', 'wait']
    jump 120                                 []
label 116:
    n = const(int, 1)                        ['n']
    jump 120                                 []
label 120:
    $124load_attr.2 = getattr(value=x, attr=shape) ['$124load_attr.2', 'x']
    $const126.3 = const(int, 0)              ['$const126.3']
    $128binary_subscr.4 = getitem(value=$124load_attr.2, index=$const126.3, fn=<built-in function getitem>) ['$124load_attr.2', '$128binary_subscr.4', '$const126.3']
    $130compare_op.5 = n < $128binary_subscr.4 ['$128binary_subscr.4', '$130compare_op.5', 'n']
    bool132 = global(bool: <class 'bool'>)   ['bool132']
    $132pred = call bool132($130compare_op.5, func=bool132, args=(Var($130compare_op.5, utils.py:1229),), kws=(), vararg=None, varkwarg=None, target=None) ['$130compare_op.5', '$132pred', 'bool132']
    branch $132pred, 134, 332                ['$132pred']
label 134:
    $134load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>) ['$134load_global.0']
    $136load_method.1 = getattr(value=$134load_global.0, attr=max) ['$134load_global.0', '$136load_method.1']
    $140load_global.3 = global(max: <built-in function max>) ['$140load_global.3']
    $const142.4 = const(int, 0)              ['$const142.4']
    $148binary_subtract.7 = n - pre_max      ['$148binary_subtract.7', 'n', 'pre_max']
    $150call_function.8 = call $140load_global.3($const142.4, $148binary_subtract.7, func=$140load_global.3, args=[Var($const142.4, utils.py:1230), Var($148binary_subtract.7, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None) ['$140load_global.3', '$148binary_subtract.7', '$150call_function.8', '$const142.4']
    $152load_global.9 = global(min: <built-in function min>) ['$152load_global.9']
    $158binary_add.12 = n + post_max         ['$158binary_add.12', 'n', 'post_max']
    $162load_attr.14 = getattr(value=x, attr=shape) ['$162load_attr.14', 'x']
    $const164.15 = const(int, 0)             ['$const164.15']
    $166binary_subscr.16 = getitem(value=$162load_attr.14, index=$const164.15, fn=<built-in function getitem>) ['$162load_attr.14', '$166binary_subscr.16', '$const164.15']
    $168call_function.17 = call $152load_global.9($158binary_add.12, $166binary_subscr.16, func=$152load_global.9, args=[Var($158binary_add.12, utils.py:1230), Var($166binary_subscr.16, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None) ['$152load_global.9', '$158binary_add.12', '$166binary_subscr.16', '$168call_function.17']
    $170build_slice.18 = global(slice: <class 'slice'>) ['$170build_slice.18']
    $170build_slice.19 = call $170build_slice.18($150call_function.8, $168call_function.17, func=$170build_slice.18, args=(Var($150call_function.8, utils.py:1230), Var($168call_function.17, utils.py:1230)), kws=(), vararg=None, varkwarg=None, target=None) ['$150call_function.8', '$168call_function.17', '$170build_slice.18', '$170build_slice.19']
    $172binary_subscr.20 = getitem(value=x, index=$170build_slice.19, fn=<built-in function getitem>) ['$170build_slice.19', '$172binary_subscr.20', 'x']
    maxn = call $136load_method.1($172binary_subscr.20, func=$136load_method.1, args=[Var($172binary_subscr.20, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None) ['$136load_method.1', '$172binary_subscr.20', 'maxn']
    $182binary_subscr.24 = getitem(value=x, index=n, fn=<built-in function getitem>) ['$182binary_subscr.24', 'n', 'x']
    $186compare_op.26 = $182binary_subscr.24 == maxn ['$182binary_subscr.24', '$186compare_op.26', 'maxn']
    peaks[n] = $186compare_op.26             ['$186compare_op.26', 'n', 'peaks']
    $198binary_subscr.31 = getitem(value=peaks, index=n, fn=<built-in function getitem>) ['$198binary_subscr.31', 'n', 'peaks']
    bool200 = global(bool: <class 'bool'>)   ['bool200']
    $200pred = call bool200($198binary_subscr.31, func=bool200, args=(Var($198binary_subscr.31, utils.py:1235),), kws=(), vararg=None, varkwarg=None, target=None) ['$198binary_subscr.31', '$200pred', 'bool200']
    branch $200pred, 212, 202                ['$200pred']
label 202:
    $const204.1 = const(int, 1)              ['$const204.1']
    $206inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const204.1, static_lhs=Undefined, static_rhs=Undefined) ['$206inplace_add.2', '$const204.1', 'n']
    n = $206inplace_add.2                    ['$206inplace_add.2', 'n']
    jump 120                                 []
label 212:
    $212load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>) ['$212load_global.0']
    $214load_method.1 = getattr(value=$212load_global.0, attr=mean) ['$212load_global.0', '$214load_method.1']
    $218load_global.3 = global(max: <built-in function max>) ['$218load_global.3']
    $const220.4 = const(int, 0)              ['$const220.4']
    $226binary_subtract.7 = n - pre_avg      ['$226binary_subtract.7', 'n', 'pre_avg']
    $228call_function.8 = call $218load_global.3($const220.4, $226binary_subtract.7, func=$218load_global.3, args=[Var($const220.4, utils.py:1239), Var($226binary_subtract.7, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None) ['$218load_global.3', '$226binary_subtract.7', '$228call_function.8', '$const220.4']
    $230load_global.9 = global(min: <built-in function min>) ['$230load_global.9']
    $236binary_add.12 = n + post_avg         ['$236binary_add.12', 'n', 'post_avg']
    $240load_attr.14 = getattr(value=x, attr=shape) ['$240load_attr.14', 'x']
    $const242.15 = const(int, 0)             ['$const242.15']
    $244binary_subscr.16 = getitem(value=$240load_attr.14, index=$const242.15, fn=<built-in function getitem>) ['$240load_attr.14', '$244binary_subscr.16', '$const242.15']
    $246call_function.17 = call $230load_global.9($236binary_add.12, $244binary_subscr.16, func=$230load_global.9, args=[Var($236binary_add.12, utils.py:1239), Var($244binary_subscr.16, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None) ['$230load_global.9', '$236binary_add.12', '$244binary_subscr.16', '$246call_function.17']
    $248build_slice.18 = global(slice: <class 'slice'>) ['$248build_slice.18']
    $248build_slice.19 = call $248build_slice.18($228call_function.8, $246call_function.17, func=$248build_slice.18, args=(Var($228call_function.8, utils.py:1239), Var($246call_function.17, utils.py:1239)), kws=(), vararg=None, varkwarg=None, target=None) ['$228call_function.8', '$246call_function.17', '$248build_slice.18', '$248build_slice.19']
    $250binary_subscr.20 = getitem(value=x, index=$248build_slice.19, fn=<built-in function getitem>) ['$248build_slice.19', '$250binary_subscr.20', 'x']
    avgn = call $214load_method.1($250binary_subscr.20, func=$214load_method.1, args=[Var($250binary_subscr.20, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None) ['$214load_method.1', '$250binary_subscr.20', 'avgn']
    $262binary_subscr.26 = getitem(value=peaks, index=n, fn=<built-in function getitem>) ['$262binary_subscr.26', 'n', 'peaks']
    $268binary_subscr.29 = getitem(value=x, index=n, fn=<built-in function getitem>) ['$268binary_subscr.29', 'n', 'x']
    $274binary_add.32 = avgn + delta         ['$274binary_add.32', 'avgn', 'delta']
    $276compare_op.33 = $268binary_subscr.29 >= $274binary_add.32 ['$268binary_subscr.29', '$274binary_add.32', '$276compare_op.33']
    $278inplace_and.34 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$262binary_subscr.26, rhs=$276compare_op.33, static_lhs=Undefined, static_rhs=Undefined) ['$262binary_subscr.26', '$276compare_op.33', '$278inplace_and.34']
    peaks[n] = $278inplace_and.34            ['$278inplace_and.34', 'n', 'peaks']
    $288binary_subscr.37 = getitem(value=peaks, index=n, fn=<built-in function getitem>) ['$288binary_subscr.37', 'n', 'peaks']
    bool290 = global(bool: <class 'bool'>)   ['bool290']
    $290pred = call bool290($288binary_subscr.37, func=bool290, args=(Var($288binary_subscr.37, utils.py:1242),), kws=(), vararg=None, varkwarg=None, target=None) ['$288binary_subscr.37', '$290pred', 'bool290']
    branch $290pred, 302, 292                ['$290pred']
label 292:
    $const294.1 = const(int, 1)              ['$const294.1']
    $296inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const294.1, static_lhs=Undefined, static_rhs=Undefined) ['$296inplace_add.2', '$const294.1', 'n']
    n = $296inplace_add.2                    ['$296inplace_add.2', 'n']
    jump 120                                 []
label 302:
    $const306.2 = const(int, 1)              ['$const306.2']
    $308binary_add.3 = wait + $const306.2    ['$308binary_add.3', '$const306.2', 'wait']
    $310inplace_add.4 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$308binary_add.3, static_lhs=Undefined, static_rhs=Undefined) ['$308binary_add.3', '$310inplace_add.4', 'n']
    n = $310inplace_add.4                    ['$310inplace_add.4', 'n']
    $318load_attr.7 = getattr(value=x, attr=shape) ['$318load_attr.7', 'x']
    $const320.8 = const(int, 0)              ['$const320.8']
    $322binary_subscr.9 = getitem(value=$318load_attr.7, index=$const320.8, fn=<built-in function getitem>) ['$318load_attr.7', '$322binary_subscr.9', '$const320.8']
    $324compare_op.10 = n < $322binary_subscr.9 ['$322binary_subscr.9', '$324compare_op.10', 'n']
    bool326 = global(bool: <class 'bool'>)   ['bool326']
    $326pred = call bool326($324compare_op.10, func=bool326, args=(Var($324compare_op.10, utils.py:1229),), kws=(), vararg=None, varkwarg=None, target=None) ['$324compare_op.10', '$326pred', 'bool326']
    branch $326pred, 134, 328                ['$326pred']
label 328:
    $const328.0 = const(NoneType, None)      ['$const328.0']
    $330return_value.1 = cast(value=$const328.0) ['$330return_value.1', '$const328.0']
    return $330return_value.1                ['$330return_value.1']
label 332:
    $const332.0 = const(NoneType, None)      ['$const332.0']
    $334return_value.1 = cast(value=$const332.0) ['$334return_value.1', '$const332.0']
    return $334return_value.1                ['$334return_value.1']

2025-01-31 15:31:40,387 - DEBUG - ==== SSA block analysis pass on 0
2025-01-31 15:31:40,387 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8620be0>
2025-01-31 15:31:40,387 - DEBUG - on stmt: x = arg(0, name=x)
2025-01-31 15:31:40,387 - DEBUG - on stmt: pre_max = arg(1, name=pre_max)
2025-01-31 15:31:40,387 - DEBUG - on stmt: post_max = arg(2, name=post_max)
2025-01-31 15:31:40,387 - DEBUG - on stmt: pre_avg = arg(3, name=pre_avg)
2025-01-31 15:31:40,387 - DEBUG - on stmt: post_avg = arg(4, name=post_avg)
2025-01-31 15:31:40,387 - DEBUG - on stmt: delta = arg(5, name=delta)
2025-01-31 15:31:40,387 - DEBUG - on stmt: wait = arg(6, name=wait)
2025-01-31 15:31:40,387 - DEBUG - on stmt: peaks = arg(7, name=peaks)
2025-01-31 15:31:40,387 - DEBUG - on stmt: $const4.1 = const(int, 0)
2025-01-31 15:31:40,387 - DEBUG - on stmt: $6binary_subscr.2 = static_getitem(value=x, index=0, index_var=$const4.1, fn=<built-in function getitem>)
2025-01-31 15:31:40,387 - DEBUG - on stmt: $8load_global.3 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:40,387 - DEBUG - on stmt: $10load_method.4 = getattr(value=$8load_global.3, attr=max)
2025-01-31 15:31:40,388 - DEBUG - on stmt: $const14.6 = const(NoneType, None)
2025-01-31 15:31:40,388 - DEBUG - on stmt: $16load_global.7 = global(min: <built-in function min>)
2025-01-31 15:31:40,388 - DEBUG - on stmt: $22load_attr.10 = getattr(value=x, attr=shape)
2025-01-31 15:31:40,388 - DEBUG - on stmt: $const24.11 = const(int, 0)
2025-01-31 15:31:40,388 - DEBUG - on stmt: $26binary_subscr.12 = static_getitem(value=$22load_attr.10, index=0, index_var=$const24.11, fn=<built-in function getitem>)
2025-01-31 15:31:40,388 - DEBUG - on stmt: $28call_function.13 = call $16load_global.7(post_max, $26binary_subscr.12, func=$16load_global.7, args=[Var(post_max, utils.py:1209), Var($26binary_subscr.12, utils.py:1221)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,388 - DEBUG - on stmt: $30build_slice.14 = global(slice: <class 'slice'>)
2025-01-31 15:31:40,388 - DEBUG - on stmt: $30build_slice.15 = call $30build_slice.14($const14.6, $28call_function.13, func=$30build_slice.14, args=(Var($const14.6, utils.py:1221), Var($28call_function.13, utils.py:1221)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,388 - DEBUG - on stmt: $32binary_subscr.16 = getitem(value=x, index=$30build_slice.15, fn=<built-in function getitem>)
2025-01-31 15:31:40,388 - DEBUG - on stmt: $34call_method.17 = call $10load_method.4($32binary_subscr.16, func=$10load_method.4, args=[Var($32binary_subscr.16, utils.py:1221)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,388 - DEBUG - on stmt: $36compare_op.18 = $6binary_subscr.2 >= $34call_method.17
2025-01-31 15:31:40,388 - DEBUG - on stmt: $const40.20 = const(int, 0)
2025-01-31 15:31:40,388 - DEBUG - on stmt: peaks[0] = $36compare_op.18
2025-01-31 15:31:40,388 - DEBUG - on stmt: $const46.22 = const(int, 0)
2025-01-31 15:31:40,388 - DEBUG - on stmt: $50binary_subscr.25 = static_getitem(value=peaks, index=0, index_var=$const46.22, fn=<built-in function getitem>)
2025-01-31 15:31:40,388 - DEBUG - on stmt: $const54.27 = const(int, 0)
2025-01-31 15:31:40,388 - DEBUG - on stmt: $56binary_subscr.28 = static_getitem(value=x, index=0, index_var=$const54.27, fn=<built-in function getitem>)
2025-01-31 15:31:40,388 - DEBUG - on stmt: $58load_global.29 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:40,388 - DEBUG - on stmt: $60load_method.30 = getattr(value=$58load_global.29, attr=mean)
2025-01-31 15:31:40,388 - DEBUG - on stmt: $const64.32 = const(NoneType, None)
2025-01-31 15:31:40,388 - DEBUG - on stmt: $66load_global.33 = global(min: <built-in function min>)
2025-01-31 15:31:40,388 - DEBUG - on stmt: $72load_attr.36 = getattr(value=x, attr=shape)
2025-01-31 15:31:40,388 - DEBUG - on stmt: $const74.37 = const(int, 0)
2025-01-31 15:31:40,389 - DEBUG - on stmt: $76binary_subscr.38 = static_getitem(value=$72load_attr.36, index=0, index_var=$const74.37, fn=<built-in function getitem>)
2025-01-31 15:31:40,389 - DEBUG - on stmt: $78call_function.39 = call $66load_global.33(post_avg, $76binary_subscr.38, func=$66load_global.33, args=[Var(post_avg, utils.py:1209), Var($76binary_subscr.38, utils.py:1222)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,389 - DEBUG - on stmt: $80build_slice.40 = global(slice: <class 'slice'>)
2025-01-31 15:31:40,389 - DEBUG - on stmt: $80build_slice.41 = call $80build_slice.40($const64.32, $78call_function.39, func=$80build_slice.40, args=(Var($const64.32, utils.py:1222), Var($78call_function.39, utils.py:1222)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,389 - DEBUG - on stmt: $82binary_subscr.42 = getitem(value=x, index=$80build_slice.41, fn=<built-in function getitem>)
2025-01-31 15:31:40,389 - DEBUG - on stmt: $84call_method.43 = call $60load_method.30($82binary_subscr.42, func=$60load_method.30, args=[Var($82binary_subscr.42, utils.py:1222)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,389 - DEBUG - on stmt: $88binary_add.45 = $84call_method.43 + delta
2025-01-31 15:31:40,389 - DEBUG - on stmt: $90compare_op.46 = $56binary_subscr.28 >= $88binary_add.45
2025-01-31 15:31:40,389 - DEBUG - on stmt: $92inplace_and.47 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$50binary_subscr.25, rhs=$90compare_op.46, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:40,389 - DEBUG - on stmt: peaks[0] = $92inplace_and.47
2025-01-31 15:31:40,389 - DEBUG - on stmt: $const100.49 = const(int, 0)
2025-01-31 15:31:40,389 - DEBUG - on stmt: $102binary_subscr.50 = static_getitem(value=peaks, index=0, index_var=$const100.49, fn=<built-in function getitem>)
2025-01-31 15:31:40,389 - DEBUG - on stmt: bool104 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,389 - DEBUG - on stmt: $104pred = call bool104($102binary_subscr.50, func=bool104, args=(Var($102binary_subscr.50, utils.py:1224),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,389 - DEBUG - on stmt: branch $104pred, 106, 116
2025-01-31 15:31:40,389 - DEBUG - ==== SSA block analysis pass on 106
2025-01-31 15:31:40,389 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8620be0>
2025-01-31 15:31:40,389 - DEBUG - on stmt: $const108.1 = const(int, 1)
2025-01-31 15:31:40,389 - DEBUG - on stmt: n = wait + $const108.1
2025-01-31 15:31:40,389 - DEBUG - on stmt: jump 120
2025-01-31 15:31:40,389 - DEBUG - ==== SSA block analysis pass on 116
2025-01-31 15:31:40,389 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8620be0>
2025-01-31 15:31:40,389 - DEBUG - on stmt: n = const(int, 1)
2025-01-31 15:31:40,389 - DEBUG - on stmt: jump 120
2025-01-31 15:31:40,390 - DEBUG - ==== SSA block analysis pass on 120
2025-01-31 15:31:40,390 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8620be0>
2025-01-31 15:31:40,390 - DEBUG - on stmt: $124load_attr.2 = getattr(value=x, attr=shape)
2025-01-31 15:31:40,390 - DEBUG - on stmt: $const126.3 = const(int, 0)
2025-01-31 15:31:40,390 - DEBUG - on stmt: $128binary_subscr.4 = static_getitem(value=$124load_attr.2, index=0, index_var=$const126.3, fn=<built-in function getitem>)
2025-01-31 15:31:40,390 - DEBUG - on stmt: $130compare_op.5 = n < $128binary_subscr.4
2025-01-31 15:31:40,390 - DEBUG - on stmt: bool132 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,390 - DEBUG - on stmt: $132pred = call bool132($130compare_op.5, func=bool132, args=(Var($130compare_op.5, utils.py:1229),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,390 - DEBUG - on stmt: branch $132pred, 134, 332
2025-01-31 15:31:40,390 - DEBUG - ==== SSA block analysis pass on 134
2025-01-31 15:31:40,390 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8620be0>
2025-01-31 15:31:40,390 - DEBUG - on stmt: $134load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:40,390 - DEBUG - on stmt: $136load_method.1 = getattr(value=$134load_global.0, attr=max)
2025-01-31 15:31:40,390 - DEBUG - on stmt: $140load_global.3 = global(max: <built-in function max>)
2025-01-31 15:31:40,390 - DEBUG - on stmt: $const142.4 = const(int, 0)
2025-01-31 15:31:40,390 - DEBUG - on stmt: $148binary_subtract.7 = n - pre_max
2025-01-31 15:31:40,390 - DEBUG - on stmt: $150call_function.8 = call $140load_global.3($const142.4, $148binary_subtract.7, func=$140load_global.3, args=[Var($const142.4, utils.py:1230), Var($148binary_subtract.7, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,390 - DEBUG - on stmt: $152load_global.9 = global(min: <built-in function min>)
2025-01-31 15:31:40,390 - DEBUG - on stmt: $158binary_add.12 = n + post_max
2025-01-31 15:31:40,390 - DEBUG - on stmt: $162load_attr.14 = getattr(value=x, attr=shape)
2025-01-31 15:31:40,390 - DEBUG - on stmt: $const164.15 = const(int, 0)
2025-01-31 15:31:40,390 - DEBUG - on stmt: $166binary_subscr.16 = static_getitem(value=$162load_attr.14, index=0, index_var=$const164.15, fn=<built-in function getitem>)
2025-01-31 15:31:40,390 - DEBUG - on stmt: $168call_function.17 = call $152load_global.9($158binary_add.12, $166binary_subscr.16, func=$152load_global.9, args=[Var($158binary_add.12, utils.py:1230), Var($166binary_subscr.16, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,390 - DEBUG - on stmt: $170build_slice.18 = global(slice: <class 'slice'>)
2025-01-31 15:31:40,390 - DEBUG - on stmt: $170build_slice.19 = call $170build_slice.18($150call_function.8, $168call_function.17, func=$170build_slice.18, args=(Var($150call_function.8, utils.py:1230), Var($168call_function.17, utils.py:1230)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,391 - DEBUG - on stmt: $172binary_subscr.20 = getitem(value=x, index=$170build_slice.19, fn=<built-in function getitem>)
2025-01-31 15:31:40,391 - DEBUG - on stmt: maxn = call $136load_method.1($172binary_subscr.20, func=$136load_method.1, args=[Var($172binary_subscr.20, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,391 - DEBUG - on stmt: $182binary_subscr.24 = getitem(value=x, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:40,391 - DEBUG - on stmt: $186compare_op.26 = $182binary_subscr.24 == maxn
2025-01-31 15:31:40,391 - DEBUG - on stmt: peaks[n] = $186compare_op.26
2025-01-31 15:31:40,391 - DEBUG - on stmt: $198binary_subscr.31 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:40,391 - DEBUG - on stmt: bool200 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,391 - DEBUG - on stmt: $200pred = call bool200($198binary_subscr.31, func=bool200, args=(Var($198binary_subscr.31, utils.py:1235),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,391 - DEBUG - on stmt: branch $200pred, 212, 202
2025-01-31 15:31:40,391 - DEBUG - ==== SSA block analysis pass on 202
2025-01-31 15:31:40,391 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8620be0>
2025-01-31 15:31:40,391 - DEBUG - on stmt: $const204.1 = const(int, 1)
2025-01-31 15:31:40,391 - DEBUG - on stmt: $206inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const204.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:40,391 - DEBUG - on stmt: n = $206inplace_add.2
2025-01-31 15:31:40,391 - DEBUG - on stmt: jump 333
2025-01-31 15:31:40,391 - DEBUG - ==== SSA block analysis pass on 212
2025-01-31 15:31:40,391 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8620be0>
2025-01-31 15:31:40,391 - DEBUG - on stmt: $212load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:40,391 - DEBUG - on stmt: $214load_method.1 = getattr(value=$212load_global.0, attr=mean)
2025-01-31 15:31:40,391 - DEBUG - on stmt: $218load_global.3 = global(max: <built-in function max>)
2025-01-31 15:31:40,391 - DEBUG - on stmt: $const220.4 = const(int, 0)
2025-01-31 15:31:40,391 - DEBUG - on stmt: $226binary_subtract.7 = n - pre_avg
2025-01-31 15:31:40,391 - DEBUG - on stmt: $228call_function.8 = call $218load_global.3($const220.4, $226binary_subtract.7, func=$218load_global.3, args=[Var($const220.4, utils.py:1239), Var($226binary_subtract.7, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,391 - DEBUG - on stmt: $230load_global.9 = global(min: <built-in function min>)
2025-01-31 15:31:40,392 - DEBUG - on stmt: $236binary_add.12 = n + post_avg
2025-01-31 15:31:40,392 - DEBUG - on stmt: $240load_attr.14 = getattr(value=x, attr=shape)
2025-01-31 15:31:40,392 - DEBUG - on stmt: $const242.15 = const(int, 0)
2025-01-31 15:31:40,392 - DEBUG - on stmt: $244binary_subscr.16 = static_getitem(value=$240load_attr.14, index=0, index_var=$const242.15, fn=<built-in function getitem>)
2025-01-31 15:31:40,392 - DEBUG - on stmt: $246call_function.17 = call $230load_global.9($236binary_add.12, $244binary_subscr.16, func=$230load_global.9, args=[Var($236binary_add.12, utils.py:1239), Var($244binary_subscr.16, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,392 - DEBUG - on stmt: $248build_slice.18 = global(slice: <class 'slice'>)
2025-01-31 15:31:40,392 - DEBUG - on stmt: $248build_slice.19 = call $248build_slice.18($228call_function.8, $246call_function.17, func=$248build_slice.18, args=(Var($228call_function.8, utils.py:1239), Var($246call_function.17, utils.py:1239)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,392 - DEBUG - on stmt: $250binary_subscr.20 = getitem(value=x, index=$248build_slice.19, fn=<built-in function getitem>)
2025-01-31 15:31:40,392 - DEBUG - on stmt: avgn = call $214load_method.1($250binary_subscr.20, func=$214load_method.1, args=[Var($250binary_subscr.20, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,392 - DEBUG - on stmt: $262binary_subscr.26 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:40,392 - DEBUG - on stmt: $268binary_subscr.29 = getitem(value=x, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:40,392 - DEBUG - on stmt: $274binary_add.32 = avgn + delta
2025-01-31 15:31:40,392 - DEBUG - on stmt: $276compare_op.33 = $268binary_subscr.29 >= $274binary_add.32
2025-01-31 15:31:40,392 - DEBUG - on stmt: $278inplace_and.34 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$262binary_subscr.26, rhs=$276compare_op.33, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:40,392 - DEBUG - on stmt: peaks[n] = $278inplace_and.34
2025-01-31 15:31:40,392 - DEBUG - on stmt: $288binary_subscr.37 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:40,392 - DEBUG - on stmt: bool290 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,392 - DEBUG - on stmt: $290pred = call bool290($288binary_subscr.37, func=bool290, args=(Var($288binary_subscr.37, utils.py:1242),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,392 - DEBUG - on stmt: branch $290pred, 302, 292
2025-01-31 15:31:40,392 - DEBUG - ==== SSA block analysis pass on 292
2025-01-31 15:31:40,392 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8620be0>
2025-01-31 15:31:40,392 - DEBUG - on stmt: $const294.1 = const(int, 1)
2025-01-31 15:31:40,392 - DEBUG - on stmt: $296inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const294.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:40,393 - DEBUG - on stmt: n = $296inplace_add.2
2025-01-31 15:31:40,393 - DEBUG - on stmt: jump 333
2025-01-31 15:31:40,393 - DEBUG - ==== SSA block analysis pass on 302
2025-01-31 15:31:40,393 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8620be0>
2025-01-31 15:31:40,393 - DEBUG - on stmt: $const306.2 = const(int, 1)
2025-01-31 15:31:40,393 - DEBUG - on stmt: $308binary_add.3 = wait + $const306.2
2025-01-31 15:31:40,393 - DEBUG - on stmt: $310inplace_add.4 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$308binary_add.3, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:40,393 - DEBUG - on stmt: n = $310inplace_add.4
2025-01-31 15:31:40,393 - DEBUG - on stmt: $318load_attr.7 = getattr(value=x, attr=shape)
2025-01-31 15:31:40,393 - DEBUG - on stmt: $const320.8 = const(int, 0)
2025-01-31 15:31:40,393 - DEBUG - on stmt: $322binary_subscr.9 = static_getitem(value=$318load_attr.7, index=0, index_var=$const320.8, fn=<built-in function getitem>)
2025-01-31 15:31:40,393 - DEBUG - on stmt: $324compare_op.10 = n < $322binary_subscr.9
2025-01-31 15:31:40,393 - DEBUG - on stmt: bool326 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,393 - DEBUG - on stmt: $326pred = call bool326($324compare_op.10, func=bool326, args=(Var($324compare_op.10, utils.py:1229),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,393 - DEBUG - on stmt: branch $326pred, 134, 328
2025-01-31 15:31:40,393 - DEBUG - ==== SSA block analysis pass on 328
2025-01-31 15:31:40,393 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8620be0>
2025-01-31 15:31:40,393 - DEBUG - on stmt: $const328.0 = const(NoneType, None)
2025-01-31 15:31:40,393 - DEBUG - on stmt: $330return_value.1 = cast(value=$const328.0)
2025-01-31 15:31:40,393 - DEBUG - on stmt: return $330return_value.1
2025-01-31 15:31:40,393 - DEBUG - ==== SSA block analysis pass on 332
2025-01-31 15:31:40,393 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8620be0>
2025-01-31 15:31:40,393 - DEBUG - on stmt: $const332.0 = const(NoneType, None)
2025-01-31 15:31:40,393 - DEBUG - on stmt: $334return_value.1 = cast(value=$const332.0)
2025-01-31 15:31:40,393 - DEBUG - on stmt: return $334return_value.1
2025-01-31 15:31:40,393 - DEBUG - ==== SSA block analysis pass on 333
2025-01-31 15:31:40,393 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8620be0>
2025-01-31 15:31:40,394 - DEBUG - on stmt: jump 120
2025-01-31 15:31:40,395 - DEBUG - defs defaultdict(<class 'list'>,
            {'$102binary_subscr.50': [(<numba.core.ir.Assign object at 0x7c89e8621c30>,
                                       0)],
             '$104pred': [(<numba.core.ir.Assign object at 0x7c89e88aa5f0>, 0)],
             '$10load_method.4': [(<numba.core.ir.Assign object at 0x7c89e86727a0>,
                                   0)],
             '$124load_attr.2': [(<numba.core.ir.Assign object at 0x7c89e88aa6e0>,
                                  120)],
             '$128binary_subscr.4': [(<numba.core.ir.Assign object at 0x7c89e86202e0>,
                                      120)],
             '$130compare_op.5': [(<numba.core.ir.Assign object at 0x7c89e88ab100>,
                                   120)],
             '$132pred': [(<numba.core.ir.Assign object at 0x7c89e88aa140>,
                           120)],
             '$134load_global.0': [(<numba.core.ir.Assign object at 0x7c89e8701c00>,
                                    134)],
             '$136load_method.1': [(<numba.core.ir.Assign object at 0x7c89e8703ac0>,
                                    134)],
             '$140load_global.3': [(<numba.core.ir.Assign object at 0x7c89e87001f0>,
                                    134)],
             '$148binary_subtract.7': [(<numba.core.ir.Assign object at 0x7c89e87024d0>,
                                        134)],
             '$150call_function.8': [(<numba.core.ir.Assign object at 0x7c89e8702440>,
                                      134)],
             '$152load_global.9': [(<numba.core.ir.Assign object at 0x7c89e8700d90>,
                                    134)],
             '$158binary_add.12': [(<numba.core.ir.Assign object at 0x7c89e8701f90>,
                                    134)],
             '$162load_attr.14': [(<numba.core.ir.Assign object at 0x7c89e8701ea0>,
                                   134)],
             '$166binary_subscr.16': [(<numba.core.ir.Assign object at 0x7c89e8670f40>,
                                       134)],
             '$168call_function.17': [(<numba.core.ir.Assign object at 0x7c89e8701600>,
                                       134)],
             '$16load_global.7': [(<numba.core.ir.Assign object at 0x7c89e8672860>,
                                   0)],
             '$170build_slice.18': [(<numba.core.ir.Assign object at 0x7c89e87015d0>,
                                     134)],
             '$170build_slice.19': [(<numba.core.ir.Assign object at 0x7c89e87020b0>,
                                     134)],
             '$172binary_subscr.20': [(<numba.core.ir.Assign object at 0x7c89e87013c0>,
                                       134)],
             '$182binary_subscr.24': [(<numba.core.ir.Assign object at 0x7c89e8703730>,
                                       134)],
             '$186compare_op.26': [(<numba.core.ir.Assign object at 0x7c89e8703700>,
                                    134)],
             '$198binary_subscr.31': [(<numba.core.ir.Assign object at 0x7c89e87008e0>,
                                       134)],
             '$200pred': [(<numba.core.ir.Assign object at 0x7c89e8703250>,
                           134)],
             '$206inplace_add.2': [(<numba.core.ir.Assign object at 0x7c89e8703e20>,
                                    202)],
             '$212load_global.0': [(<numba.core.ir.Assign object at 0x7c89e8701360>,
                                    212)],
             '$214load_method.1': [(<numba.core.ir.Assign object at 0x7c89e87039a0>,
                                    212)],
             '$218load_global.3': [(<numba.core.ir.Assign object at 0x7c89e8700a30>,
                                    212)],
             '$226binary_subtract.7': [(<numba.core.ir.Assign object at 0x7c89e8700730>,
                                        212)],
             '$228call_function.8': [(<numba.core.ir.Assign object at 0x7c89e88ecf70>,
                                      212)],
             '$22load_attr.10': [(<numba.core.ir.Assign object at 0x7c89e8671840>,
                                  0)],
             '$230load_global.9': [(<numba.core.ir.Assign object at 0x7c89e88ed600>,
                                    212)],
             '$236binary_add.12': [(<numba.core.ir.Assign object at 0x7c89e88ed690>,
                                    212)],
             '$240load_attr.14': [(<numba.core.ir.Assign object at 0x7c89e88ec880>,
                                   212)],
             '$244binary_subscr.16': [(<numba.core.ir.Assign object at 0x7c89e8672830>,
                                       212)],
             '$246call_function.17': [(<numba.core.ir.Assign object at 0x7c89e88eeec0>,
                                       212)],
             '$248build_slice.18': [(<numba.core.ir.Assign object at 0x7c89e88ee170>,
                                     212)],
             '$248build_slice.19': [(<numba.core.ir.Assign object at 0x7c89e88efc40>,
                                     212)],
             '$250binary_subscr.20': [(<numba.core.ir.Assign object at 0x7c89e88ecdf0>,
                                       212)],
             '$262binary_subscr.26': [(<numba.core.ir.Assign object at 0x7c89e88f1810>,
                                       212)],
             '$268binary_subscr.29': [(<numba.core.ir.Assign object at 0x7c89e88f28c0>,
                                       212)],
             '$26binary_subscr.12': [(<numba.core.ir.Assign object at 0x7c89e8620310>,
                                      0)],
             '$274binary_add.32': [(<numba.core.ir.Assign object at 0x7c89e88f2410>,
                                    212)],
             '$276compare_op.33': [(<numba.core.ir.Assign object at 0x7c89e88f3160>,
                                    212)],
             '$278inplace_and.34': [(<numba.core.ir.Assign object at 0x7c89e88f3b50>,
                                     212)],
             '$288binary_subscr.37': [(<numba.core.ir.Assign object at 0x7c89e88f3c40>,
                                       212)],
             '$28call_function.13': [(<numba.core.ir.Assign object at 0x7c89e86736d0>,
                                      0)],
             '$290pred': [(<numba.core.ir.Assign object at 0x7c89e88f2b60>,
                           212)],
             '$296inplace_add.2': [(<numba.core.ir.Assign object at 0x7c89e88f3910>,
                                    292)],
             '$308binary_add.3': [(<numba.core.ir.Assign object at 0x7c89e88f1480>,
                                   302)],
             '$30build_slice.14': [(<numba.core.ir.Assign object at 0x7c89e8673910>,
                                    0)],
             '$30build_slice.15': [(<numba.core.ir.Assign object at 0x7c89e8673dc0>,
                                    0)],
             '$310inplace_add.4': [(<numba.core.ir.Assign object at 0x7c89e88f1420>,
                                    302)],
             '$318load_attr.7': [(<numba.core.ir.Assign object at 0x7c89e88f30d0>,
                                  302)],
             '$322binary_subscr.9': [(<numba.core.ir.Assign object at 0x7c89e86714b0>,
                                      302)],
             '$324compare_op.10': [(<numba.core.ir.Assign object at 0x7c89e88f2260>,
                                    302)],
             '$326pred': [(<numba.core.ir.Assign object at 0x7c89e88f1d50>,
                           302)],
             '$32binary_subscr.16': [(<numba.core.ir.Assign object at 0x7c89e8673730>,
                                      0)],
             '$330return_value.1': [(<numba.core.ir.Assign object at 0x7c89e88f1c00>,
                                     328)],
             '$334return_value.1': [(<numba.core.ir.Assign object at 0x7c89e8621d80>,
                                     332)],
             '$34call_method.17': [(<numba.core.ir.Assign object at 0x7c89e8673520>,
                                    0)],
             '$36compare_op.18': [(<numba.core.ir.Assign object at 0x7c89e8672d10>,
                                   0)],
             '$50binary_subscr.25': [(<numba.core.ir.Assign object at 0x7c89e8620370>,
                                      0)],
             '$56binary_subscr.28': [(<numba.core.ir.Assign object at 0x7c89e86213f0>,
                                      0)],
             '$58load_global.29': [(<numba.core.ir.Assign object at 0x7c89e88ab040>,
                                    0)],
             '$60load_method.30': [(<numba.core.ir.Assign object at 0x7c89e88a85e0>,
                                    0)],
             '$66load_global.33': [(<numba.core.ir.Assign object at 0x7c89e88aa800>,
                                    0)],
             '$6binary_subscr.2': [(<numba.core.ir.Assign object at 0x7c89e8621420>,
                                    0)],
             '$72load_attr.36': [(<numba.core.ir.Assign object at 0x7c89e88a81f0>,
                                  0)],
             '$76binary_subscr.38': [(<numba.core.ir.Assign object at 0x7c89e8621c90>,
                                      0)],
             '$78call_function.39': [(<numba.core.ir.Assign object at 0x7c89e88a8820>,
                                      0)],
             '$80build_slice.40': [(<numba.core.ir.Assign object at 0x7c89e88a8a30>,
                                    0)],
             '$80build_slice.41': [(<numba.core.ir.Assign object at 0x7c89e88a8970>,
                                    0)],
             '$82binary_subscr.42': [(<numba.core.ir.Assign object at 0x7c89e88a9300>,
                                      0)],
             '$84call_method.43': [(<numba.core.ir.Assign object at 0x7c89e88ab370>,
                                    0)],
             '$88binary_add.45': [(<numba.core.ir.Assign object at 0x7c89e88a9e40>,
                                   0)],
             '$8load_global.3': [(<numba.core.ir.Assign object at 0x7c89e86724d0>,
                                  0)],
             '$90compare_op.46': [(<numba.core.ir.Assign object at 0x7c89e88a9810>,
                                   0)],
             '$92inplace_and.47': [(<numba.core.ir.Assign object at 0x7c89e88ab5e0>,
                                    0)],
             '$const100.49': [(<numba.core.ir.Assign object at 0x7c89e88aa9e0>,
                               0)],
             '$const108.1': [(<numba.core.ir.Assign object at 0x7c89e88ab640>,
                              106)],
             '$const126.3': [(<numba.core.ir.Assign object at 0x7c89e88a9150>,
                              120)],
             '$const14.6': [(<numba.core.ir.Assign object at 0x7c89e8672e00>,
                             0)],
             '$const142.4': [(<numba.core.ir.Assign object at 0x7c89e8702e60>,
                              134)],
             '$const164.15': [(<numba.core.ir.Assign object at 0x7c89e87003d0>,
                               134)],
             '$const204.1': [(<numba.core.ir.Assign object at 0x7c89e87030d0>,
                              202)],
             '$const220.4': [(<numba.core.ir.Assign object at 0x7c89e87009d0>,
                              212)],
             '$const24.11': [(<numba.core.ir.Assign object at 0x7c89e8673f10>,
                              0)],
             '$const242.15': [(<numba.core.ir.Assign object at 0x7c89e88ec910>,
                               212)],
             '$const294.1': [(<numba.core.ir.Assign object at 0x7c89e88f2500>,
                              292)],
             '$const306.2': [(<numba.core.ir.Assign object at 0x7c89e88f1ab0>,
                              302)],
             '$const320.8': [(<numba.core.ir.Assign object at 0x7c89e88f1390>,
                              302)],
             '$const328.0': [(<numba.core.ir.Assign object at 0x7c89e88f3df0>,
                              328)],
             '$const332.0': [(<numba.core.ir.Assign object at 0x7c89e849f1f0>,
                              332)],
             '$const4.1': [(<numba.core.ir.Assign object at 0x7c89e8670220>,
                            0)],
             '$const40.20': [(<numba.core.ir.Assign object at 0x7c89e8673280>,
                              0)],
             '$const46.22': [(<numba.core.ir.Assign object at 0x7c89e8671de0>,
                              0)],
             '$const54.27': [(<numba.core.ir.Assign object at 0x7c89e88a9de0>,
                              0)],
             '$const64.32': [(<numba.core.ir.Assign object at 0x7c89e88ab700>,
                              0)],
             '$const74.37': [(<numba.core.ir.Assign object at 0x7c89e88a8460>,
                              0)],
             'avgn': [(<numba.core.ir.Assign object at 0x7c89e88ef0d0>, 212)],
             'bool104': [(<numba.core.ir.Assign object at 0x7c89e88aab30>, 0)],
             'bool132': [(<numba.core.ir.Assign object at 0x7c89e88aba60>,
                          120)],
             'bool200': [(<numba.core.ir.Assign object at 0x7c89e87002e0>,
                          134)],
             'bool290': [(<numba.core.ir.Assign object at 0x7c89e88f3fa0>,
                          212)],
             'bool326': [(<numba.core.ir.Assign object at 0x7c89e88f22c0>,
                          302)],
             'delta': [(<numba.core.ir.Assign object at 0x7c89e8670310>, 0)],
             'maxn': [(<numba.core.ir.Assign object at 0x7c89e8701270>, 134)],
             'n': [(<numba.core.ir.Assign object at 0x7c89e88a82b0>, 106),
                   (<numba.core.ir.Assign object at 0x7c89e88aa110>, 116),
                   (<numba.core.ir.Assign object at 0x7c89e87031c0>, 202),
                   (<numba.core.ir.Assign object at 0x7c89e88f2d40>, 292),
                   (<numba.core.ir.Assign object at 0x7c89e88f1630>, 302)],
             'peaks': [(<numba.core.ir.Assign object at 0x7c89e8670670>, 0)],
             'post_avg': [(<numba.core.ir.Assign object at 0x7c89e8670a60>, 0)],
             'post_max': [(<numba.core.ir.Assign object at 0x7c89e8670af0>, 0)],
             'pre_avg': [(<numba.core.ir.Assign object at 0x7c89e8671150>, 0)],
             'pre_max': [(<numba.core.ir.Assign object at 0x7c89e8671b40>, 0)],
             'wait': [(<numba.core.ir.Assign object at 0x7c89e8670760>, 0)],
             'x': [(<numba.core.ir.Assign object at 0x7c89e8671960>, 0)]})
2025-01-31 15:31:40,396 - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x7c89e8671810>
2025-01-31 15:31:40,396 - DEBUG - Fix SSA violator on var n
2025-01-31 15:31:40,396 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-31 15:31:40,396 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e8671570>
2025-01-31 15:31:40,396 - DEBUG - on stmt: x = arg(0, name=x)
2025-01-31 15:31:40,396 - DEBUG - on stmt: pre_max = arg(1, name=pre_max)
2025-01-31 15:31:40,396 - DEBUG - on stmt: post_max = arg(2, name=post_max)
2025-01-31 15:31:40,396 - DEBUG - on stmt: pre_avg = arg(3, name=pre_avg)
2025-01-31 15:31:40,396 - DEBUG - on stmt: post_avg = arg(4, name=post_avg)
2025-01-31 15:31:40,396 - DEBUG - on stmt: delta = arg(5, name=delta)
2025-01-31 15:31:40,396 - DEBUG - on stmt: wait = arg(6, name=wait)
2025-01-31 15:31:40,396 - DEBUG - on stmt: peaks = arg(7, name=peaks)
2025-01-31 15:31:40,396 - DEBUG - on stmt: $const4.1 = const(int, 0)
2025-01-31 15:31:40,396 - DEBUG - on stmt: $6binary_subscr.2 = static_getitem(value=x, index=0, index_var=$const4.1, fn=<built-in function getitem>)
2025-01-31 15:31:40,396 - DEBUG - on stmt: $8load_global.3 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:40,396 - DEBUG - on stmt: $10load_method.4 = getattr(value=$8load_global.3, attr=max)
2025-01-31 15:31:40,396 - DEBUG - on stmt: $const14.6 = const(NoneType, None)
2025-01-31 15:31:40,396 - DEBUG - on stmt: $16load_global.7 = global(min: <built-in function min>)
2025-01-31 15:31:40,396 - DEBUG - on stmt: $22load_attr.10 = getattr(value=x, attr=shape)
2025-01-31 15:31:40,396 - DEBUG - on stmt: $const24.11 = const(int, 0)
2025-01-31 15:31:40,396 - DEBUG - on stmt: $26binary_subscr.12 = static_getitem(value=$22load_attr.10, index=0, index_var=$const24.11, fn=<built-in function getitem>)
2025-01-31 15:31:40,397 - DEBUG - on stmt: $28call_function.13 = call $16load_global.7(post_max, $26binary_subscr.12, func=$16load_global.7, args=[Var(post_max, utils.py:1209), Var($26binary_subscr.12, utils.py:1221)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,397 - DEBUG - on stmt: $30build_slice.14 = global(slice: <class 'slice'>)
2025-01-31 15:31:40,397 - DEBUG - on stmt: $30build_slice.15 = call $30build_slice.14($const14.6, $28call_function.13, func=$30build_slice.14, args=(Var($const14.6, utils.py:1221), Var($28call_function.13, utils.py:1221)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,397 - DEBUG - on stmt: $32binary_subscr.16 = getitem(value=x, index=$30build_slice.15, fn=<built-in function getitem>)
2025-01-31 15:31:40,397 - DEBUG - on stmt: $34call_method.17 = call $10load_method.4($32binary_subscr.16, func=$10load_method.4, args=[Var($32binary_subscr.16, utils.py:1221)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,397 - DEBUG - on stmt: $36compare_op.18 = $6binary_subscr.2 >= $34call_method.17
2025-01-31 15:31:40,397 - DEBUG - on stmt: $const40.20 = const(int, 0)
2025-01-31 15:31:40,397 - DEBUG - on stmt: peaks[0] = $36compare_op.18
2025-01-31 15:31:40,397 - DEBUG - on stmt: $const46.22 = const(int, 0)
2025-01-31 15:31:40,397 - DEBUG - on stmt: $50binary_subscr.25 = static_getitem(value=peaks, index=0, index_var=$const46.22, fn=<built-in function getitem>)
2025-01-31 15:31:40,397 - DEBUG - on stmt: $const54.27 = const(int, 0)
2025-01-31 15:31:40,397 - DEBUG - on stmt: $56binary_subscr.28 = static_getitem(value=x, index=0, index_var=$const54.27, fn=<built-in function getitem>)
2025-01-31 15:31:40,397 - DEBUG - on stmt: $58load_global.29 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:40,397 - DEBUG - on stmt: $60load_method.30 = getattr(value=$58load_global.29, attr=mean)
2025-01-31 15:31:40,397 - DEBUG - on stmt: $const64.32 = const(NoneType, None)
2025-01-31 15:31:40,397 - DEBUG - on stmt: $66load_global.33 = global(min: <built-in function min>)
2025-01-31 15:31:40,397 - DEBUG - on stmt: $72load_attr.36 = getattr(value=x, attr=shape)
2025-01-31 15:31:40,397 - DEBUG - on stmt: $const74.37 = const(int, 0)
2025-01-31 15:31:40,397 - DEBUG - on stmt: $76binary_subscr.38 = static_getitem(value=$72load_attr.36, index=0, index_var=$const74.37, fn=<built-in function getitem>)
2025-01-31 15:31:40,397 - DEBUG - on stmt: $78call_function.39 = call $66load_global.33(post_avg, $76binary_subscr.38, func=$66load_global.33, args=[Var(post_avg, utils.py:1209), Var($76binary_subscr.38, utils.py:1222)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,397 - DEBUG - on stmt: $80build_slice.40 = global(slice: <class 'slice'>)
2025-01-31 15:31:40,397 - DEBUG - on stmt: $80build_slice.41 = call $80build_slice.40($const64.32, $78call_function.39, func=$80build_slice.40, args=(Var($const64.32, utils.py:1222), Var($78call_function.39, utils.py:1222)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,397 - DEBUG - on stmt: $82binary_subscr.42 = getitem(value=x, index=$80build_slice.41, fn=<built-in function getitem>)
2025-01-31 15:31:40,397 - DEBUG - on stmt: $84call_method.43 = call $60load_method.30($82binary_subscr.42, func=$60load_method.30, args=[Var($82binary_subscr.42, utils.py:1222)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,397 - DEBUG - on stmt: $88binary_add.45 = $84call_method.43 + delta
2025-01-31 15:31:40,397 - DEBUG - on stmt: $90compare_op.46 = $56binary_subscr.28 >= $88binary_add.45
2025-01-31 15:31:40,398 - DEBUG - on stmt: $92inplace_and.47 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$50binary_subscr.25, rhs=$90compare_op.46, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:40,398 - DEBUG - on stmt: peaks[0] = $92inplace_and.47
2025-01-31 15:31:40,398 - DEBUG - on stmt: $const100.49 = const(int, 0)
2025-01-31 15:31:40,398 - DEBUG - on stmt: $102binary_subscr.50 = static_getitem(value=peaks, index=0, index_var=$const100.49, fn=<built-in function getitem>)
2025-01-31 15:31:40,398 - DEBUG - on stmt: bool104 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,398 - DEBUG - on stmt: $104pred = call bool104($102binary_subscr.50, func=bool104, args=(Var($102binary_subscr.50, utils.py:1224),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,398 - DEBUG - on stmt: branch $104pred, 106, 116
2025-01-31 15:31:40,398 - DEBUG - ==== SSA block rewrite pass on 106
2025-01-31 15:31:40,398 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e8671570>
2025-01-31 15:31:40,398 - DEBUG - on stmt: $const108.1 = const(int, 1)
2025-01-31 15:31:40,398 - DEBUG - on stmt: n = wait + $const108.1
2025-01-31 15:31:40,398 - DEBUG - first assign: n
2025-01-31 15:31:40,398 - DEBUG - replaced with: n = wait + $const108.1
2025-01-31 15:31:40,398 - DEBUG - on stmt: jump 120
2025-01-31 15:31:40,398 - DEBUG - ==== SSA block rewrite pass on 116
2025-01-31 15:31:40,398 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e8671570>
2025-01-31 15:31:40,398 - DEBUG - on stmt: n = const(int, 1)
2025-01-31 15:31:40,398 - DEBUG - replaced with: n.1 = const(int, 1)
2025-01-31 15:31:40,398 - DEBUG - on stmt: jump 120
2025-01-31 15:31:40,398 - DEBUG - ==== SSA block rewrite pass on 120
2025-01-31 15:31:40,398 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e8671570>
2025-01-31 15:31:40,398 - DEBUG - on stmt: $124load_attr.2 = getattr(value=x, attr=shape)
2025-01-31 15:31:40,398 - DEBUG - on stmt: $const126.3 = const(int, 0)
2025-01-31 15:31:40,398 - DEBUG - on stmt: $128binary_subscr.4 = static_getitem(value=$124load_attr.2, index=0, index_var=$const126.3, fn=<built-in function getitem>)
2025-01-31 15:31:40,398 - DEBUG - on stmt: $130compare_op.5 = n < $128binary_subscr.4
2025-01-31 15:31:40,398 - DEBUG - on stmt: bool132 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,398 - DEBUG - on stmt: $132pred = call bool132($130compare_op.5, func=bool132, args=(Var($130compare_op.5, utils.py:1229),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,398 - DEBUG - on stmt: branch $132pred, 134, 332
2025-01-31 15:31:40,399 - DEBUG - ==== SSA block rewrite pass on 134
2025-01-31 15:31:40,399 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e8671570>
2025-01-31 15:31:40,399 - DEBUG - on stmt: $134load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:40,399 - DEBUG - on stmt: $136load_method.1 = getattr(value=$134load_global.0, attr=max)
2025-01-31 15:31:40,399 - DEBUG - on stmt: $140load_global.3 = global(max: <built-in function max>)
2025-01-31 15:31:40,399 - DEBUG - on stmt: $const142.4 = const(int, 0)
2025-01-31 15:31:40,399 - DEBUG - on stmt: $148binary_subtract.7 = n - pre_max
2025-01-31 15:31:40,399 - DEBUG - on stmt: $150call_function.8 = call $140load_global.3($const142.4, $148binary_subtract.7, func=$140load_global.3, args=[Var($const142.4, utils.py:1230), Var($148binary_subtract.7, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,399 - DEBUG - on stmt: $152load_global.9 = global(min: <built-in function min>)
2025-01-31 15:31:40,399 - DEBUG - on stmt: $158binary_add.12 = n + post_max
2025-01-31 15:31:40,399 - DEBUG - on stmt: $162load_attr.14 = getattr(value=x, attr=shape)
2025-01-31 15:31:40,399 - DEBUG - on stmt: $const164.15 = const(int, 0)
2025-01-31 15:31:40,399 - DEBUG - on stmt: $166binary_subscr.16 = static_getitem(value=$162load_attr.14, index=0, index_var=$const164.15, fn=<built-in function getitem>)
2025-01-31 15:31:40,399 - DEBUG - on stmt: $168call_function.17 = call $152load_global.9($158binary_add.12, $166binary_subscr.16, func=$152load_global.9, args=[Var($158binary_add.12, utils.py:1230), Var($166binary_subscr.16, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,399 - DEBUG - on stmt: $170build_slice.18 = global(slice: <class 'slice'>)
2025-01-31 15:31:40,399 - DEBUG - on stmt: $170build_slice.19 = call $170build_slice.18($150call_function.8, $168call_function.17, func=$170build_slice.18, args=(Var($150call_function.8, utils.py:1230), Var($168call_function.17, utils.py:1230)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,399 - DEBUG - on stmt: $172binary_subscr.20 = getitem(value=x, index=$170build_slice.19, fn=<built-in function getitem>)
2025-01-31 15:31:40,399 - DEBUG - on stmt: maxn = call $136load_method.1($172binary_subscr.20, func=$136load_method.1, args=[Var($172binary_subscr.20, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,399 - DEBUG - on stmt: $182binary_subscr.24 = getitem(value=x, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:40,399 - DEBUG - on stmt: $186compare_op.26 = $182binary_subscr.24 == maxn
2025-01-31 15:31:40,399 - DEBUG - on stmt: peaks[n] = $186compare_op.26
2025-01-31 15:31:40,399 - DEBUG - on stmt: $198binary_subscr.31 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:40,399 - DEBUG - on stmt: bool200 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,399 - DEBUG - on stmt: $200pred = call bool200($198binary_subscr.31, func=bool200, args=(Var($198binary_subscr.31, utils.py:1235),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,399 - DEBUG - on stmt: branch $200pred, 212, 202
2025-01-31 15:31:40,399 - DEBUG - ==== SSA block rewrite pass on 202
2025-01-31 15:31:40,399 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e8671570>
2025-01-31 15:31:40,400 - DEBUG - on stmt: $const204.1 = const(int, 1)
2025-01-31 15:31:40,400 - DEBUG - on stmt: $206inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const204.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:40,400 - DEBUG - on stmt: n = $206inplace_add.2
2025-01-31 15:31:40,400 - DEBUG - replaced with: n.2 = $206inplace_add.2
2025-01-31 15:31:40,400 - DEBUG - on stmt: jump 333
2025-01-31 15:31:40,400 - DEBUG - ==== SSA block rewrite pass on 212
2025-01-31 15:31:40,400 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e8671570>
2025-01-31 15:31:40,400 - DEBUG - on stmt: $212load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:40,400 - DEBUG - on stmt: $214load_method.1 = getattr(value=$212load_global.0, attr=mean)
2025-01-31 15:31:40,400 - DEBUG - on stmt: $218load_global.3 = global(max: <built-in function max>)
2025-01-31 15:31:40,400 - DEBUG - on stmt: $const220.4 = const(int, 0)
2025-01-31 15:31:40,400 - DEBUG - on stmt: $226binary_subtract.7 = n - pre_avg
2025-01-31 15:31:40,454 - DEBUG - on stmt: $228call_function.8 = call $218load_global.3($const220.4, $226binary_subtract.7, func=$218load_global.3, args=[Var($const220.4, utils.py:1239), Var($226binary_subtract.7, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,455 - DEBUG - on stmt: $230load_global.9 = global(min: <built-in function min>)
2025-01-31 15:31:40,455 - DEBUG - on stmt: $236binary_add.12 = n + post_avg
2025-01-31 15:31:40,455 - DEBUG - on stmt: $240load_attr.14 = getattr(value=x, attr=shape)
2025-01-31 15:31:40,455 - DEBUG - on stmt: $const242.15 = const(int, 0)
2025-01-31 15:31:40,455 - DEBUG - on stmt: $244binary_subscr.16 = static_getitem(value=$240load_attr.14, index=0, index_var=$const242.15, fn=<built-in function getitem>)
2025-01-31 15:31:40,455 - DEBUG - on stmt: $246call_function.17 = call $230load_global.9($236binary_add.12, $244binary_subscr.16, func=$230load_global.9, args=[Var($236binary_add.12, utils.py:1239), Var($244binary_subscr.16, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,455 - DEBUG - on stmt: $248build_slice.18 = global(slice: <class 'slice'>)
2025-01-31 15:31:40,455 - DEBUG - on stmt: $248build_slice.19 = call $248build_slice.18($228call_function.8, $246call_function.17, func=$248build_slice.18, args=(Var($228call_function.8, utils.py:1239), Var($246call_function.17, utils.py:1239)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,455 - DEBUG - on stmt: $250binary_subscr.20 = getitem(value=x, index=$248build_slice.19, fn=<built-in function getitem>)
2025-01-31 15:31:40,455 - DEBUG - on stmt: avgn = call $214load_method.1($250binary_subscr.20, func=$214load_method.1, args=[Var($250binary_subscr.20, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,455 - DEBUG - on stmt: $262binary_subscr.26 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:40,455 - DEBUG - on stmt: $268binary_subscr.29 = getitem(value=x, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:40,455 - DEBUG - on stmt: $274binary_add.32 = avgn + delta
2025-01-31 15:31:40,455 - DEBUG - on stmt: $276compare_op.33 = $268binary_subscr.29 >= $274binary_add.32
2025-01-31 15:31:40,455 - DEBUG - on stmt: $278inplace_and.34 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$262binary_subscr.26, rhs=$276compare_op.33, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:40,455 - DEBUG - on stmt: peaks[n] = $278inplace_and.34
2025-01-31 15:31:40,456 - DEBUG - on stmt: $288binary_subscr.37 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:40,456 - DEBUG - on stmt: bool290 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,456 - DEBUG - on stmt: $290pred = call bool290($288binary_subscr.37, func=bool290, args=(Var($288binary_subscr.37, utils.py:1242),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,456 - DEBUG - on stmt: branch $290pred, 302, 292
2025-01-31 15:31:40,456 - DEBUG - ==== SSA block rewrite pass on 292
2025-01-31 15:31:40,456 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e8671570>
2025-01-31 15:31:40,456 - DEBUG - on stmt: $const294.1 = const(int, 1)
2025-01-31 15:31:40,456 - DEBUG - on stmt: $296inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const294.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:40,456 - DEBUG - on stmt: n = $296inplace_add.2
2025-01-31 15:31:40,456 - DEBUG - replaced with: n.3 = $296inplace_add.2
2025-01-31 15:31:40,456 - DEBUG - on stmt: jump 333
2025-01-31 15:31:40,456 - DEBUG - ==== SSA block rewrite pass on 302
2025-01-31 15:31:40,456 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e8671570>
2025-01-31 15:31:40,456 - DEBUG - on stmt: $const306.2 = const(int, 1)
2025-01-31 15:31:40,456 - DEBUG - on stmt: $308binary_add.3 = wait + $const306.2
2025-01-31 15:31:40,456 - DEBUG - on stmt: $310inplace_add.4 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$308binary_add.3, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:40,456 - DEBUG - on stmt: n = $310inplace_add.4
2025-01-31 15:31:40,456 - DEBUG - replaced with: n.4 = $310inplace_add.4
2025-01-31 15:31:40,456 - DEBUG - on stmt: $318load_attr.7 = getattr(value=x, attr=shape)
2025-01-31 15:31:40,456 - DEBUG - on stmt: $const320.8 = const(int, 0)
2025-01-31 15:31:40,457 - DEBUG - on stmt: $322binary_subscr.9 = static_getitem(value=$318load_attr.7, index=0, index_var=$const320.8, fn=<built-in function getitem>)
2025-01-31 15:31:40,457 - DEBUG - on stmt: $324compare_op.10 = n < $322binary_subscr.9
2025-01-31 15:31:40,457 - DEBUG - on stmt: bool326 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,457 - DEBUG - on stmt: $326pred = call bool326($324compare_op.10, func=bool326, args=(Var($324compare_op.10, utils.py:1229),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,457 - DEBUG - on stmt: branch $326pred, 134, 328
2025-01-31 15:31:40,457 - DEBUG - ==== SSA block rewrite pass on 328
2025-01-31 15:31:40,457 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e8671570>
2025-01-31 15:31:40,457 - DEBUG - on stmt: $const328.0 = const(NoneType, None)
2025-01-31 15:31:40,457 - DEBUG - on stmt: $330return_value.1 = cast(value=$const328.0)
2025-01-31 15:31:40,457 - DEBUG - on stmt: return $330return_value.1
2025-01-31 15:31:40,457 - DEBUG - ==== SSA block rewrite pass on 332
2025-01-31 15:31:40,457 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e8671570>
2025-01-31 15:31:40,457 - DEBUG - on stmt: $const332.0 = const(NoneType, None)
2025-01-31 15:31:40,457 - DEBUG - on stmt: $334return_value.1 = cast(value=$const332.0)
2025-01-31 15:31:40,457 - DEBUG - on stmt: return $334return_value.1
2025-01-31 15:31:40,457 - DEBUG - ==== SSA block rewrite pass on 333
2025-01-31 15:31:40,457 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e8671570>
2025-01-31 15:31:40,457 - DEBUG - on stmt: jump 120
2025-01-31 15:31:40,458 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {106: [<numba.core.ir.Assign object at 0x7c89e8621db0>],
             116: [<numba.core.ir.Assign object at 0x7c89e86226b0>],
             202: [<numba.core.ir.Assign object at 0x7c89e8620670>],
             292: [<numba.core.ir.Assign object at 0x7c89e8622a10>],
             302: [<numba.core.ir.Assign object at 0x7c89e8620400>]})
2025-01-31 15:31:40,458 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-31 15:31:40,458 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e8671570>
2025-01-31 15:31:40,458 - DEBUG - on stmt: x = arg(0, name=x)
2025-01-31 15:31:40,458 - DEBUG - on stmt: pre_max = arg(1, name=pre_max)
2025-01-31 15:31:40,458 - DEBUG - on stmt: post_max = arg(2, name=post_max)
2025-01-31 15:31:40,458 - DEBUG - on stmt: pre_avg = arg(3, name=pre_avg)
2025-01-31 15:31:40,458 - DEBUG - on stmt: post_avg = arg(4, name=post_avg)
2025-01-31 15:31:40,458 - DEBUG - on stmt: delta = arg(5, name=delta)
2025-01-31 15:31:40,458 - DEBUG - on stmt: wait = arg(6, name=wait)
2025-01-31 15:31:40,458 - DEBUG - on stmt: peaks = arg(7, name=peaks)
2025-01-31 15:31:40,458 - DEBUG - on stmt: $const4.1 = const(int, 0)
2025-01-31 15:31:40,458 - DEBUG - on stmt: $6binary_subscr.2 = static_getitem(value=x, index=0, index_var=$const4.1, fn=<built-in function getitem>)
2025-01-31 15:31:40,458 - DEBUG - on stmt: $8load_global.3 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:40,458 - DEBUG - on stmt: $10load_method.4 = getattr(value=$8load_global.3, attr=max)
2025-01-31 15:31:40,458 - DEBUG - on stmt: $const14.6 = const(NoneType, None)
2025-01-31 15:31:40,458 - DEBUG - on stmt: $16load_global.7 = global(min: <built-in function min>)
2025-01-31 15:31:40,459 - DEBUG - on stmt: $22load_attr.10 = getattr(value=x, attr=shape)
2025-01-31 15:31:40,459 - DEBUG - on stmt: $const24.11 = const(int, 0)
2025-01-31 15:31:40,459 - DEBUG - on stmt: $26binary_subscr.12 = static_getitem(value=$22load_attr.10, index=0, index_var=$const24.11, fn=<built-in function getitem>)
2025-01-31 15:31:40,459 - DEBUG - on stmt: $28call_function.13 = call $16load_global.7(post_max, $26binary_subscr.12, func=$16load_global.7, args=[Var(post_max, utils.py:1209), Var($26binary_subscr.12, utils.py:1221)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,459 - DEBUG - on stmt: $30build_slice.14 = global(slice: <class 'slice'>)
2025-01-31 15:31:40,459 - DEBUG - on stmt: $30build_slice.15 = call $30build_slice.14($const14.6, $28call_function.13, func=$30build_slice.14, args=(Var($const14.6, utils.py:1221), Var($28call_function.13, utils.py:1221)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,459 - DEBUG - on stmt: $32binary_subscr.16 = getitem(value=x, index=$30build_slice.15, fn=<built-in function getitem>)
2025-01-31 15:31:40,459 - DEBUG - on stmt: $34call_method.17 = call $10load_method.4($32binary_subscr.16, func=$10load_method.4, args=[Var($32binary_subscr.16, utils.py:1221)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,459 - DEBUG - on stmt: $36compare_op.18 = $6binary_subscr.2 >= $34call_method.17
2025-01-31 15:31:40,459 - DEBUG - on stmt: $const40.20 = const(int, 0)
2025-01-31 15:31:40,459 - DEBUG - on stmt: peaks[0] = $36compare_op.18
2025-01-31 15:31:40,459 - DEBUG - on stmt: $const46.22 = const(int, 0)
2025-01-31 15:31:40,459 - DEBUG - on stmt: $50binary_subscr.25 = static_getitem(value=peaks, index=0, index_var=$const46.22, fn=<built-in function getitem>)
2025-01-31 15:31:40,459 - DEBUG - on stmt: $const54.27 = const(int, 0)
2025-01-31 15:31:40,459 - DEBUG - on stmt: $56binary_subscr.28 = static_getitem(value=x, index=0, index_var=$const54.27, fn=<built-in function getitem>)
2025-01-31 15:31:40,460 - DEBUG - on stmt: $58load_global.29 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:40,460 - DEBUG - on stmt: $60load_method.30 = getattr(value=$58load_global.29, attr=mean)
2025-01-31 15:31:40,460 - DEBUG - on stmt: $const64.32 = const(NoneType, None)
2025-01-31 15:31:40,460 - DEBUG - on stmt: $66load_global.33 = global(min: <built-in function min>)
2025-01-31 15:31:40,460 - DEBUG - on stmt: $72load_attr.36 = getattr(value=x, attr=shape)
2025-01-31 15:31:40,460 - DEBUG - on stmt: $const74.37 = const(int, 0)
2025-01-31 15:31:40,460 - DEBUG - on stmt: $76binary_subscr.38 = static_getitem(value=$72load_attr.36, index=0, index_var=$const74.37, fn=<built-in function getitem>)
2025-01-31 15:31:40,460 - DEBUG - on stmt: $78call_function.39 = call $66load_global.33(post_avg, $76binary_subscr.38, func=$66load_global.33, args=[Var(post_avg, utils.py:1209), Var($76binary_subscr.38, utils.py:1222)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,460 - DEBUG - on stmt: $80build_slice.40 = global(slice: <class 'slice'>)
2025-01-31 15:31:40,460 - DEBUG - on stmt: $80build_slice.41 = call $80build_slice.40($const64.32, $78call_function.39, func=$80build_slice.40, args=(Var($const64.32, utils.py:1222), Var($78call_function.39, utils.py:1222)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,460 - DEBUG - on stmt: $82binary_subscr.42 = getitem(value=x, index=$80build_slice.41, fn=<built-in function getitem>)
2025-01-31 15:31:40,460 - DEBUG - on stmt: $84call_method.43 = call $60load_method.30($82binary_subscr.42, func=$60load_method.30, args=[Var($82binary_subscr.42, utils.py:1222)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,460 - DEBUG - on stmt: $88binary_add.45 = $84call_method.43 + delta
2025-01-31 15:31:40,460 - DEBUG - on stmt: $90compare_op.46 = $56binary_subscr.28 >= $88binary_add.45
2025-01-31 15:31:40,460 - DEBUG - on stmt: $92inplace_and.47 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$50binary_subscr.25, rhs=$90compare_op.46, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:40,460 - DEBUG - on stmt: peaks[0] = $92inplace_and.47
2025-01-31 15:31:40,460 - DEBUG - on stmt: $const100.49 = const(int, 0)
2025-01-31 15:31:40,460 - DEBUG - on stmt: $102binary_subscr.50 = static_getitem(value=peaks, index=0, index_var=$const100.49, fn=<built-in function getitem>)
2025-01-31 15:31:40,460 - DEBUG - on stmt: bool104 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,460 - DEBUG - on stmt: $104pred = call bool104($102binary_subscr.50, func=bool104, args=(Var($102binary_subscr.50, utils.py:1224),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,461 - DEBUG - on stmt: branch $104pred, 106, 116
2025-01-31 15:31:40,461 - DEBUG - ==== SSA block rewrite pass on 106
2025-01-31 15:31:40,461 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e8671570>
2025-01-31 15:31:40,461 - DEBUG - on stmt: $const108.1 = const(int, 1)
2025-01-31 15:31:40,461 - DEBUG - on stmt: n = wait + $const108.1
2025-01-31 15:31:40,461 - DEBUG - on stmt: jump 120
2025-01-31 15:31:40,461 - DEBUG - ==== SSA block rewrite pass on 116
2025-01-31 15:31:40,461 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e8671570>
2025-01-31 15:31:40,461 - DEBUG - on stmt: n.1 = const(int, 1)
2025-01-31 15:31:40,461 - DEBUG - on stmt: jump 120
2025-01-31 15:31:40,461 - DEBUG - ==== SSA block rewrite pass on 120
2025-01-31 15:31:40,461 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e8671570>
2025-01-31 15:31:40,461 - DEBUG - on stmt: $124load_attr.2 = getattr(value=x, attr=shape)
2025-01-31 15:31:40,461 - DEBUG - on stmt: $const126.3 = const(int, 0)
2025-01-31 15:31:40,461 - DEBUG - on stmt: $128binary_subscr.4 = static_getitem(value=$124load_attr.2, index=0, index_var=$const126.3, fn=<built-in function getitem>)
2025-01-31 15:31:40,461 - DEBUG - on stmt: $130compare_op.5 = n < $128binary_subscr.4
2025-01-31 15:31:40,461 - DEBUG - find_def var='n' stmt=$130compare_op.5 = n < $128binary_subscr.4
2025-01-31 15:31:40,461 - DEBUG - find_def_from_top label 120
2025-01-31 15:31:40,461 - DEBUG - insert phi node n.5 = phi(incoming_values=[], incoming_blocks=[]) at 120
2025-01-31 15:31:40,461 - DEBUG - find_def_from_bottom label 106
2025-01-31 15:31:40,461 - DEBUG - incoming_def n = wait + $const108.1
2025-01-31 15:31:40,461 - DEBUG - find_def_from_bottom label 116
2025-01-31 15:31:40,461 - DEBUG - incoming_def n.1 = const(int, 1)
2025-01-31 15:31:40,461 - DEBUG - find_def_from_bottom label 333
2025-01-31 15:31:40,461 - DEBUG - find_def_from_top label 333
2025-01-31 15:31:40,461 - DEBUG - insert phi node n.6 = phi(incoming_values=[], incoming_blocks=[]) at 333
2025-01-31 15:31:40,461 - DEBUG - find_def_from_bottom label 202
2025-01-31 15:31:40,462 - DEBUG - incoming_def n.2 = $206inplace_add.2
2025-01-31 15:31:40,462 - DEBUG - find_def_from_bottom label 292
2025-01-31 15:31:40,462 - DEBUG - incoming_def n.3 = $296inplace_add.2
2025-01-31 15:31:40,462 - DEBUG - incoming_def n.6 = phi(incoming_values=[Var(n.2, utils.py:1236), Var(n.3, utils.py:1243)], incoming_blocks=[202, 292])
2025-01-31 15:31:40,462 - DEBUG - replaced with: $130compare_op.5 = n.5 < $128binary_subscr.4
2025-01-31 15:31:40,462 - DEBUG - on stmt: bool132 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,462 - DEBUG - on stmt: $132pred = call bool132($130compare_op.5, func=bool132, args=(Var($130compare_op.5, utils.py:1229),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,462 - DEBUG - on stmt: branch $132pred, 134, 332
2025-01-31 15:31:40,462 - DEBUG - ==== SSA block rewrite pass on 134
2025-01-31 15:31:40,462 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e8671570>
2025-01-31 15:31:40,462 - DEBUG - on stmt: $134load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:40,462 - DEBUG - on stmt: $136load_method.1 = getattr(value=$134load_global.0, attr=max)
2025-01-31 15:31:40,462 - DEBUG - on stmt: $140load_global.3 = global(max: <built-in function max>)
2025-01-31 15:31:40,462 - DEBUG - on stmt: $const142.4 = const(int, 0)
2025-01-31 15:31:40,462 - DEBUG - on stmt: $148binary_subtract.7 = n - pre_max
2025-01-31 15:31:40,462 - DEBUG - find_def var='n' stmt=$148binary_subtract.7 = n - pre_max
2025-01-31 15:31:40,462 - DEBUG - find_def_from_top label 134
2025-01-31 15:31:40,462 - DEBUG - insert phi node n.7 = phi(incoming_values=[], incoming_blocks=[]) at 134
2025-01-31 15:31:40,462 - DEBUG - find_def_from_bottom label 120
2025-01-31 15:31:40,462 - DEBUG - incoming_def n.5 = phi(incoming_values=[Var(n, utils.py:1225), Var(n.1, utils.py:1227), Var(n.6, utils.py:1229)], incoming_blocks=[106, 116, 333])
2025-01-31 15:31:40,462 - DEBUG - find_def_from_bottom label 302
2025-01-31 15:31:40,462 - DEBUG - incoming_def n.4 = $310inplace_add.4
2025-01-31 15:31:40,462 - DEBUG - replaced with: $148binary_subtract.7 = n.7 - pre_max
2025-01-31 15:31:40,462 - DEBUG - on stmt: $150call_function.8 = call $140load_global.3($const142.4, $148binary_subtract.7, func=$140load_global.3, args=[Var($const142.4, utils.py:1230), Var($148binary_subtract.7, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,463 - DEBUG - on stmt: $152load_global.9 = global(min: <built-in function min>)
2025-01-31 15:31:40,463 - DEBUG - on stmt: $158binary_add.12 = n + post_max
2025-01-31 15:31:40,463 - DEBUG - find_def var='n' stmt=$158binary_add.12 = n + post_max
2025-01-31 15:31:40,463 - DEBUG - replaced with: $158binary_add.12 = n.7 + post_max
2025-01-31 15:31:40,463 - DEBUG - on stmt: $162load_attr.14 = getattr(value=x, attr=shape)
2025-01-31 15:31:40,463 - DEBUG - on stmt: $const164.15 = const(int, 0)
2025-01-31 15:31:40,463 - DEBUG - on stmt: $166binary_subscr.16 = static_getitem(value=$162load_attr.14, index=0, index_var=$const164.15, fn=<built-in function getitem>)
2025-01-31 15:31:40,463 - DEBUG - on stmt: $168call_function.17 = call $152load_global.9($158binary_add.12, $166binary_subscr.16, func=$152load_global.9, args=[Var($158binary_add.12, utils.py:1230), Var($166binary_subscr.16, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,463 - DEBUG - on stmt: $170build_slice.18 = global(slice: <class 'slice'>)
2025-01-31 15:31:40,463 - DEBUG - on stmt: $170build_slice.19 = call $170build_slice.18($150call_function.8, $168call_function.17, func=$170build_slice.18, args=(Var($150call_function.8, utils.py:1230), Var($168call_function.17, utils.py:1230)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,463 - DEBUG - on stmt: $172binary_subscr.20 = getitem(value=x, index=$170build_slice.19, fn=<built-in function getitem>)
2025-01-31 15:31:40,463 - DEBUG - on stmt: maxn = call $136load_method.1($172binary_subscr.20, func=$136load_method.1, args=[Var($172binary_subscr.20, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,463 - DEBUG - on stmt: $182binary_subscr.24 = getitem(value=x, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:40,463 - DEBUG - find_def var='n' stmt=$182binary_subscr.24 = getitem(value=x, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:40,463 - DEBUG - replaced with: $182binary_subscr.24 = getitem(value=x, index=n.7, fn=<built-in function getitem>)
2025-01-31 15:31:40,463 - DEBUG - on stmt: $186compare_op.26 = $182binary_subscr.24 == maxn
2025-01-31 15:31:40,463 - DEBUG - on stmt: peaks[n] = $186compare_op.26
2025-01-31 15:31:40,463 - DEBUG - find_def var='n' stmt=peaks[n] = $186compare_op.26
2025-01-31 15:31:40,463 - DEBUG - replaced with: peaks[n.7] = $186compare_op.26
2025-01-31 15:31:40,463 - DEBUG - on stmt: $198binary_subscr.31 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:40,463 - DEBUG - find_def var='n' stmt=$198binary_subscr.31 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:40,464 - DEBUG - replaced with: $198binary_subscr.31 = getitem(value=peaks, index=n.7, fn=<built-in function getitem>)
2025-01-31 15:31:40,464 - DEBUG - on stmt: bool200 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,464 - DEBUG - on stmt: $200pred = call bool200($198binary_subscr.31, func=bool200, args=(Var($198binary_subscr.31, utils.py:1235),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,464 - DEBUG - on stmt: branch $200pred, 212, 202
2025-01-31 15:31:40,464 - DEBUG - ==== SSA block rewrite pass on 202
2025-01-31 15:31:40,464 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e8671570>
2025-01-31 15:31:40,464 - DEBUG - on stmt: $const204.1 = const(int, 1)
2025-01-31 15:31:40,464 - DEBUG - on stmt: $206inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const204.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:40,464 - DEBUG - find_def var='n' stmt=$206inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const204.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:40,464 - DEBUG - find_def_from_top label 202
2025-01-31 15:31:40,464 - DEBUG - idom 134 from label 202
2025-01-31 15:31:40,464 - DEBUG - find_def_from_bottom label 134
2025-01-31 15:31:40,464 - DEBUG - replaced with: $206inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n.7, rhs=$const204.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:40,464 - DEBUG - on stmt: n.2 = $206inplace_add.2
2025-01-31 15:31:40,464 - DEBUG - on stmt: jump 333
2025-01-31 15:31:40,464 - DEBUG - ==== SSA block rewrite pass on 212
2025-01-31 15:31:40,464 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e8671570>
2025-01-31 15:31:40,464 - DEBUG - on stmt: $212load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:40,464 - DEBUG - on stmt: $214load_method.1 = getattr(value=$212load_global.0, attr=mean)
2025-01-31 15:31:40,464 - DEBUG - on stmt: $218load_global.3 = global(max: <built-in function max>)
2025-01-31 15:31:40,464 - DEBUG - on stmt: $const220.4 = const(int, 0)
2025-01-31 15:31:40,464 - DEBUG - on stmt: $226binary_subtract.7 = n - pre_avg
2025-01-31 15:31:40,464 - DEBUG - find_def var='n' stmt=$226binary_subtract.7 = n - pre_avg
2025-01-31 15:31:40,464 - DEBUG - find_def_from_top label 212
2025-01-31 15:31:40,464 - DEBUG - idom 134 from label 212
2025-01-31 15:31:40,464 - DEBUG - find_def_from_bottom label 134
2025-01-31 15:31:40,465 - DEBUG - replaced with: $226binary_subtract.7 = n.7 - pre_avg
2025-01-31 15:31:40,465 - DEBUG - on stmt: $228call_function.8 = call $218load_global.3($const220.4, $226binary_subtract.7, func=$218load_global.3, args=[Var($const220.4, utils.py:1239), Var($226binary_subtract.7, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,465 - DEBUG - on stmt: $230load_global.9 = global(min: <built-in function min>)
2025-01-31 15:31:40,465 - DEBUG - on stmt: $236binary_add.12 = n + post_avg
2025-01-31 15:31:40,465 - DEBUG - find_def var='n' stmt=$236binary_add.12 = n + post_avg
2025-01-31 15:31:40,465 - DEBUG - find_def_from_top label 212
2025-01-31 15:31:40,465 - DEBUG - idom 134 from label 212
2025-01-31 15:31:40,465 - DEBUG - find_def_from_bottom label 134
2025-01-31 15:31:40,465 - DEBUG - replaced with: $236binary_add.12 = n.7 + post_avg
2025-01-31 15:31:40,465 - DEBUG - on stmt: $240load_attr.14 = getattr(value=x, attr=shape)
2025-01-31 15:31:40,465 - DEBUG - on stmt: $const242.15 = const(int, 0)
2025-01-31 15:31:40,465 - DEBUG - on stmt: $244binary_subscr.16 = static_getitem(value=$240load_attr.14, index=0, index_var=$const242.15, fn=<built-in function getitem>)
2025-01-31 15:31:40,465 - DEBUG - on stmt: $246call_function.17 = call $230load_global.9($236binary_add.12, $244binary_subscr.16, func=$230load_global.9, args=[Var($236binary_add.12, utils.py:1239), Var($244binary_subscr.16, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,465 - DEBUG - on stmt: $248build_slice.18 = global(slice: <class 'slice'>)
2025-01-31 15:31:40,465 - DEBUG - on stmt: $248build_slice.19 = call $248build_slice.18($228call_function.8, $246call_function.17, func=$248build_slice.18, args=(Var($228call_function.8, utils.py:1239), Var($246call_function.17, utils.py:1239)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,465 - DEBUG - on stmt: $250binary_subscr.20 = getitem(value=x, index=$248build_slice.19, fn=<built-in function getitem>)
2025-01-31 15:31:40,465 - DEBUG - on stmt: avgn = call $214load_method.1($250binary_subscr.20, func=$214load_method.1, args=[Var($250binary_subscr.20, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,465 - DEBUG - on stmt: $262binary_subscr.26 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:40,465 - DEBUG - find_def var='n' stmt=$262binary_subscr.26 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:40,465 - DEBUG - find_def_from_top label 212
2025-01-31 15:31:40,465 - DEBUG - idom 134 from label 212
2025-01-31 15:31:40,465 - DEBUG - find_def_from_bottom label 134
2025-01-31 15:31:40,465 - DEBUG - replaced with: $262binary_subscr.26 = getitem(value=peaks, index=n.7, fn=<built-in function getitem>)
2025-01-31 15:31:40,466 - DEBUG - on stmt: $268binary_subscr.29 = getitem(value=x, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:40,466 - DEBUG - find_def var='n' stmt=$268binary_subscr.29 = getitem(value=x, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:40,466 - DEBUG - find_def_from_top label 212
2025-01-31 15:31:40,466 - DEBUG - idom 134 from label 212
2025-01-31 15:31:40,466 - DEBUG - find_def_from_bottom label 134
2025-01-31 15:31:40,466 - DEBUG - replaced with: $268binary_subscr.29 = getitem(value=x, index=n.7, fn=<built-in function getitem>)
2025-01-31 15:31:40,466 - DEBUG - on stmt: $274binary_add.32 = avgn + delta
2025-01-31 15:31:40,466 - DEBUG - on stmt: $276compare_op.33 = $268binary_subscr.29 >= $274binary_add.32
2025-01-31 15:31:40,466 - DEBUG - on stmt: $278inplace_and.34 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$262binary_subscr.26, rhs=$276compare_op.33, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:40,466 - DEBUG - on stmt: peaks[n] = $278inplace_and.34
2025-01-31 15:31:40,466 - DEBUG - find_def var='n' stmt=peaks[n] = $278inplace_and.34
2025-01-31 15:31:40,466 - DEBUG - find_def_from_top label 212
2025-01-31 15:31:40,466 - DEBUG - idom 134 from label 212
2025-01-31 15:31:40,466 - DEBUG - find_def_from_bottom label 134
2025-01-31 15:31:40,466 - DEBUG - replaced with: peaks[n.7] = $278inplace_and.34
2025-01-31 15:31:40,466 - DEBUG - on stmt: $288binary_subscr.37 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:40,466 - DEBUG - find_def var='n' stmt=$288binary_subscr.37 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:40,466 - DEBUG - find_def_from_top label 212
2025-01-31 15:31:40,466 - DEBUG - idom 134 from label 212
2025-01-31 15:31:40,466 - DEBUG - find_def_from_bottom label 134
2025-01-31 15:31:40,466 - DEBUG - replaced with: $288binary_subscr.37 = getitem(value=peaks, index=n.7, fn=<built-in function getitem>)
2025-01-31 15:31:40,466 - DEBUG - on stmt: bool290 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,466 - DEBUG - on stmt: $290pred = call bool290($288binary_subscr.37, func=bool290, args=(Var($288binary_subscr.37, utils.py:1242),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,466 - DEBUG - on stmt: branch $290pred, 302, 292
2025-01-31 15:31:40,466 - DEBUG - ==== SSA block rewrite pass on 292
2025-01-31 15:31:40,466 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e8671570>
2025-01-31 15:31:40,467 - DEBUG - on stmt: $const294.1 = const(int, 1)
2025-01-31 15:31:40,467 - DEBUG - on stmt: $296inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const294.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:40,467 - DEBUG - find_def var='n' stmt=$296inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const294.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:40,467 - DEBUG - find_def_from_top label 292
2025-01-31 15:31:40,467 - DEBUG - idom 212 from label 292
2025-01-31 15:31:40,467 - DEBUG - find_def_from_bottom label 212
2025-01-31 15:31:40,467 - DEBUG - find_def_from_top label 212
2025-01-31 15:31:40,467 - DEBUG - idom 134 from label 212
2025-01-31 15:31:40,467 - DEBUG - find_def_from_bottom label 134
2025-01-31 15:31:40,467 - DEBUG - replaced with: $296inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n.7, rhs=$const294.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:40,467 - DEBUG - on stmt: n.3 = $296inplace_add.2
2025-01-31 15:31:40,467 - DEBUG - on stmt: jump 333
2025-01-31 15:31:40,467 - DEBUG - ==== SSA block rewrite pass on 302
2025-01-31 15:31:40,467 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e8671570>
2025-01-31 15:31:40,467 - DEBUG - on stmt: $const306.2 = const(int, 1)
2025-01-31 15:31:40,467 - DEBUG - on stmt: $308binary_add.3 = wait + $const306.2
2025-01-31 15:31:40,467 - DEBUG - on stmt: $310inplace_add.4 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$308binary_add.3, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:40,467 - DEBUG - find_def var='n' stmt=$310inplace_add.4 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$308binary_add.3, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:40,467 - DEBUG - find_def_from_top label 302
2025-01-31 15:31:40,467 - DEBUG - idom 212 from label 302
2025-01-31 15:31:40,467 - DEBUG - find_def_from_bottom label 212
2025-01-31 15:31:40,467 - DEBUG - find_def_from_top label 212
2025-01-31 15:31:40,467 - DEBUG - idom 134 from label 212
2025-01-31 15:31:40,467 - DEBUG - find_def_from_bottom label 134
2025-01-31 15:31:40,467 - DEBUG - replaced with: $310inplace_add.4 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n.7, rhs=$308binary_add.3, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:40,467 - DEBUG - on stmt: n.4 = $310inplace_add.4
2025-01-31 15:31:40,467 - DEBUG - on stmt: $318load_attr.7 = getattr(value=x, attr=shape)
2025-01-31 15:31:40,467 - DEBUG - on stmt: $const320.8 = const(int, 0)
2025-01-31 15:31:40,468 - DEBUG - on stmt: $322binary_subscr.9 = static_getitem(value=$318load_attr.7, index=0, index_var=$const320.8, fn=<built-in function getitem>)
2025-01-31 15:31:40,468 - DEBUG - on stmt: $324compare_op.10 = n < $322binary_subscr.9
2025-01-31 15:31:40,468 - DEBUG - find_def var='n' stmt=$324compare_op.10 = n < $322binary_subscr.9
2025-01-31 15:31:40,468 - DEBUG - replaced with: $324compare_op.10 = n.4 < $322binary_subscr.9
2025-01-31 15:31:40,468 - DEBUG - on stmt: bool326 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,468 - DEBUG - on stmt: $326pred = call bool326($324compare_op.10, func=bool326, args=(Var($324compare_op.10, utils.py:1229),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,468 - DEBUG - on stmt: branch $326pred, 134, 328
2025-01-31 15:31:40,468 - DEBUG - ==== SSA block rewrite pass on 328
2025-01-31 15:31:40,468 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e8671570>
2025-01-31 15:31:40,468 - DEBUG - on stmt: $const328.0 = const(NoneType, None)
2025-01-31 15:31:40,468 - DEBUG - on stmt: $330return_value.1 = cast(value=$const328.0)
2025-01-31 15:31:40,468 - DEBUG - on stmt: return $330return_value.1
2025-01-31 15:31:40,468 - DEBUG - ==== SSA block rewrite pass on 332
2025-01-31 15:31:40,468 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e8671570>
2025-01-31 15:31:40,468 - DEBUG - on stmt: $const332.0 = const(NoneType, None)
2025-01-31 15:31:40,468 - DEBUG - on stmt: $334return_value.1 = cast(value=$const332.0)
2025-01-31 15:31:40,468 - DEBUG - on stmt: return $334return_value.1
2025-01-31 15:31:40,468 - DEBUG - ==== SSA block rewrite pass on 333
2025-01-31 15:31:40,468 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e8671570>
2025-01-31 15:31:40,468 - DEBUG - on stmt: jump 120
2025-01-31 15:31:40,475 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=570)
           2	LOAD_FAST(arg=0, lineno=571)
           4	LOAD_ATTR(arg=0, lineno=571)
           6	LOAD_CONST(arg=1, lineno=571)
           8	COMPARE_OP(arg=2, lineno=571)
          10	POP_JUMP_IF_FALSE(arg=11, lineno=571)
          12	LOAD_GLOBAL(arg=1, lineno=572)
          14	LOAD_CONST(arg=2, lineno=572)
          16	CALL_FUNCTION(arg=1, lineno=572)
          18	RAISE_VARARGS(arg=1, lineno=572)
>         20	LOAD_GLOBAL(arg=2, lineno=575)
          22	LOAD_METHOD(arg=3, lineno=575)
          24	LOAD_FAST(arg=0, lineno=575)
          26	CALL_METHOD(arg=1, lineno=575)
          28	STORE_FAST(arg=1, lineno=575)
          30	LOAD_GLOBAL(arg=4, lineno=576)
          32	LOAD_FAST(arg=1, lineno=576)
          34	CALL_FUNCTION(arg=1, lineno=576)
          36	LOAD_METHOD(arg=5, lineno=576)
          38	LOAD_CONST(arg=1, lineno=576)
          40	CALL_METHOD(arg=1, lineno=576)
          42	STORE_FAST(arg=2, lineno=576)
          44	LOAD_DEREF(arg=1, lineno=577)
          46	LOAD_FAST(arg=2, lineno=577)
          48	CALL_FUNCTION(arg=1, lineno=577)
          50	POP_JUMP_IF_FALSE(arg=29, lineno=577)
          52	LOAD_FAST(arg=2, lineno=578)
          54	RETURN_VALUE(arg=None, lineno=578)
>         56	LOAD_FAST(arg=1, lineno=580)
          58	GET_ITER(arg=None, lineno=580)
>         60	FOR_ITER(arg=21, lineno=580)
          62	STORE_FAST(arg=3, lineno=580)
          64	LOAD_FAST(arg=3, lineno=581)
          66	LOAD_METHOD(arg=6, lineno=581)
          68	CALL_METHOD(arg=0, lineno=581)
          70	STORE_FAST(arg=4, lineno=581)
          72	LOAD_DEREF(arg=1, lineno=582)
          74	LOAD_FAST(arg=4, lineno=582)
          76	CALL_FUNCTION(arg=1, lineno=582)
          78	POP_JUMP_IF_FALSE(arg=45, lineno=582)
          80	LOAD_FAST(arg=4, lineno=583)
          82	ROT_TWO(arg=None, lineno=583)
          84	POP_TOP(arg=None, lineno=583)
          86	RETURN_VALUE(arg=None, lineno=583)
>         88	LOAD_DEREF(arg=0, lineno=584)
          90	LOAD_FAST(arg=4, lineno=584)
          92	LOAD_FAST(arg=2, lineno=584)
          94	CALL_FUNCTION(arg=2, lineno=584)
          96	POP_JUMP_IF_FALSE(arg=52, lineno=584)
          98	LOAD_FAST(arg=4, lineno=585)
         100	STORE_FAST(arg=2, lineno=585)
>        102	JUMP_ABSOLUTE(arg=31, lineno=585)
>        104	LOAD_FAST(arg=2, lineno=586)
         106	RETURN_VALUE(arg=None, lineno=586)
2025-01-31 15:31:40,475 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:31:40,475 - DEBUG - stack: []
2025-01-31 15:31:40,475 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:31:40,475 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=570)
2025-01-31 15:31:40,475 - DEBUG - stack []
2025-01-31 15:31:40,475 - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=571)
2025-01-31 15:31:40,475 - DEBUG - stack []
2025-01-31 15:31:40,475 - DEBUG - dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=571)
2025-01-31 15:31:40,475 - DEBUG - stack ['$a2.0']
2025-01-31 15:31:40,475 - DEBUG - dispatch pc=6, inst=LOAD_CONST(arg=1, lineno=571)
2025-01-31 15:31:40,475 - DEBUG - stack ['$4load_attr.1']
2025-01-31 15:31:40,475 - DEBUG - dispatch pc=8, inst=COMPARE_OP(arg=2, lineno=571)
2025-01-31 15:31:40,475 - DEBUG - stack ['$4load_attr.1', '$const6.2']
2025-01-31 15:31:40,475 - DEBUG - dispatch pc=10, inst=POP_JUMP_IF_FALSE(arg=11, lineno=571)
2025-01-31 15:31:40,475 - DEBUG - stack ['$8compare_op.3']
2025-01-31 15:31:40,475 - DEBUG - end state. edges=[Edge(pc=12, stack=(), blockstack=(), npush=0), Edge(pc=20, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:40,476 - DEBUG - pending: deque([State(pc_initial=12 nstack_initial=0), State(pc_initial=20 nstack_initial=0)])
2025-01-31 15:31:40,476 - DEBUG - stack: []
2025-01-31 15:31:40,476 - DEBUG - state.pc_initial: State(pc_initial=12 nstack_initial=0)
2025-01-31 15:31:40,476 - DEBUG - dispatch pc=12, inst=LOAD_GLOBAL(arg=1, lineno=572)
2025-01-31 15:31:40,476 - DEBUG - stack []
2025-01-31 15:31:40,476 - DEBUG - dispatch pc=14, inst=LOAD_CONST(arg=2, lineno=572)
2025-01-31 15:31:40,476 - DEBUG - stack ['$12load_global.0']
2025-01-31 15:31:40,476 - DEBUG - dispatch pc=16, inst=CALL_FUNCTION(arg=1, lineno=572)
2025-01-31 15:31:40,476 - DEBUG - stack ['$12load_global.0', '$const14.1']
2025-01-31 15:31:40,476 - DEBUG - dispatch pc=18, inst=RAISE_VARARGS(arg=1, lineno=572)
2025-01-31 15:31:40,476 - DEBUG - stack ['$16call_function.2']
2025-01-31 15:31:40,476 - DEBUG - end state. edges=[]
2025-01-31 15:31:40,476 - DEBUG - pending: deque([State(pc_initial=20 nstack_initial=0)])
2025-01-31 15:31:40,476 - DEBUG - stack: []
2025-01-31 15:31:40,476 - DEBUG - state.pc_initial: State(pc_initial=20 nstack_initial=0)
2025-01-31 15:31:40,476 - DEBUG - dispatch pc=20, inst=LOAD_GLOBAL(arg=2, lineno=575)
2025-01-31 15:31:40,476 - DEBUG - stack []
2025-01-31 15:31:40,476 - DEBUG - dispatch pc=22, inst=LOAD_METHOD(arg=3, lineno=575)
2025-01-31 15:31:40,476 - DEBUG - stack ['$20load_global.0']
2025-01-31 15:31:40,476 - DEBUG - dispatch pc=24, inst=LOAD_FAST(arg=0, lineno=575)
2025-01-31 15:31:40,476 - DEBUG - stack ['$22load_method.1']
2025-01-31 15:31:40,476 - DEBUG - dispatch pc=26, inst=CALL_METHOD(arg=1, lineno=575)
2025-01-31 15:31:40,476 - DEBUG - stack ['$22load_method.1', '$a24.2']
2025-01-31 15:31:40,476 - DEBUG - dispatch pc=28, inst=STORE_FAST(arg=1, lineno=575)
2025-01-31 15:31:40,476 - DEBUG - stack ['$26call_method.3']
2025-01-31 15:31:40,476 - DEBUG - dispatch pc=30, inst=LOAD_GLOBAL(arg=4, lineno=576)
2025-01-31 15:31:40,476 - DEBUG - stack []
2025-01-31 15:31:40,476 - DEBUG - dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=576)
2025-01-31 15:31:40,476 - DEBUG - stack ['$30load_global.4']
2025-01-31 15:31:40,477 - DEBUG - dispatch pc=34, inst=CALL_FUNCTION(arg=1, lineno=576)
2025-01-31 15:31:40,477 - DEBUG - stack ['$30load_global.4', '$it32.5']
2025-01-31 15:31:40,477 - DEBUG - dispatch pc=36, inst=LOAD_METHOD(arg=5, lineno=576)
2025-01-31 15:31:40,477 - DEBUG - stack ['$34call_function.6']
2025-01-31 15:31:40,477 - DEBUG - dispatch pc=38, inst=LOAD_CONST(arg=1, lineno=576)
2025-01-31 15:31:40,477 - DEBUG - stack ['$36load_method.7']
2025-01-31 15:31:40,477 - DEBUG - dispatch pc=40, inst=CALL_METHOD(arg=1, lineno=576)
2025-01-31 15:31:40,477 - DEBUG - stack ['$36load_method.7', '$const38.8']
2025-01-31 15:31:40,477 - DEBUG - dispatch pc=42, inst=STORE_FAST(arg=2, lineno=576)
2025-01-31 15:31:40,477 - DEBUG - stack ['$40call_method.9']
2025-01-31 15:31:40,477 - DEBUG - dispatch pc=44, inst=LOAD_DEREF(arg=1, lineno=577)
2025-01-31 15:31:40,477 - DEBUG - stack []
2025-01-31 15:31:40,477 - DEBUG - dispatch pc=46, inst=LOAD_FAST(arg=2, lineno=577)
2025-01-31 15:31:40,477 - DEBUG - stack ['$44load_deref.10']
2025-01-31 15:31:40,477 - DEBUG - dispatch pc=48, inst=CALL_FUNCTION(arg=1, lineno=577)
2025-01-31 15:31:40,477 - DEBUG - stack ['$44load_deref.10', '$max_value46.11']
2025-01-31 15:31:40,477 - DEBUG - dispatch pc=50, inst=POP_JUMP_IF_FALSE(arg=29, lineno=577)
2025-01-31 15:31:40,477 - DEBUG - stack ['$48call_function.12']
2025-01-31 15:31:40,477 - DEBUG - end state. edges=[Edge(pc=52, stack=(), blockstack=(), npush=0), Edge(pc=56, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:40,477 - DEBUG - pending: deque([State(pc_initial=52 nstack_initial=0), State(pc_initial=56 nstack_initial=0)])
2025-01-31 15:31:40,477 - DEBUG - stack: []
2025-01-31 15:31:40,477 - DEBUG - state.pc_initial: State(pc_initial=52 nstack_initial=0)
2025-01-31 15:31:40,477 - DEBUG - dispatch pc=52, inst=LOAD_FAST(arg=2, lineno=578)
2025-01-31 15:31:40,477 - DEBUG - stack []
2025-01-31 15:31:40,477 - DEBUG - dispatch pc=54, inst=RETURN_VALUE(arg=None, lineno=578)
2025-01-31 15:31:40,477 - DEBUG - stack ['$max_value52.0']
2025-01-31 15:31:40,477 - DEBUG - end state. edges=[]
2025-01-31 15:31:40,477 - DEBUG - pending: deque([State(pc_initial=56 nstack_initial=0)])
2025-01-31 15:31:40,478 - DEBUG - stack: []
2025-01-31 15:31:40,478 - DEBUG - state.pc_initial: State(pc_initial=56 nstack_initial=0)
2025-01-31 15:31:40,478 - DEBUG - dispatch pc=56, inst=LOAD_FAST(arg=1, lineno=580)
2025-01-31 15:31:40,478 - DEBUG - stack []
2025-01-31 15:31:40,478 - DEBUG - dispatch pc=58, inst=GET_ITER(arg=None, lineno=580)
2025-01-31 15:31:40,478 - DEBUG - stack ['$it56.0']
2025-01-31 15:31:40,478 - DEBUG - end state. edges=[Edge(pc=60, stack=('$58get_iter.1',), blockstack=(), npush=0)]
2025-01-31 15:31:40,478 - DEBUG - pending: deque([State(pc_initial=60 nstack_initial=1)])
2025-01-31 15:31:40,478 - DEBUG - stack: ['$phi60.0']
2025-01-31 15:31:40,478 - DEBUG - state.pc_initial: State(pc_initial=60 nstack_initial=1)
2025-01-31 15:31:40,478 - DEBUG - dispatch pc=60, inst=FOR_ITER(arg=21, lineno=580)
2025-01-31 15:31:40,478 - DEBUG - stack ['$phi60.0']
2025-01-31 15:31:40,478 - DEBUG - end state. edges=[Edge(pc=104, stack=(), blockstack=(), npush=0), Edge(pc=62, stack=('$phi60.0', '$60for_iter.2'), blockstack=(), npush=0)]
2025-01-31 15:31:40,478 - DEBUG - pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=62 nstack_initial=2)])
2025-01-31 15:31:40,478 - DEBUG - stack: []
2025-01-31 15:31:40,478 - DEBUG - state.pc_initial: State(pc_initial=104 nstack_initial=0)
2025-01-31 15:31:40,478 - DEBUG - dispatch pc=104, inst=LOAD_FAST(arg=2, lineno=586)
2025-01-31 15:31:40,478 - DEBUG - stack []
2025-01-31 15:31:40,478 - DEBUG - dispatch pc=106, inst=RETURN_VALUE(arg=None, lineno=586)
2025-01-31 15:31:40,478 - DEBUG - stack ['$max_value104.0']
2025-01-31 15:31:40,478 - DEBUG - end state. edges=[]
2025-01-31 15:31:40,478 - DEBUG - pending: deque([State(pc_initial=62 nstack_initial=2)])
2025-01-31 15:31:40,478 - DEBUG - stack: ['$phi62.0', '$phi62.1']
2025-01-31 15:31:40,478 - DEBUG - state.pc_initial: State(pc_initial=62 nstack_initial=2)
2025-01-31 15:31:40,478 - DEBUG - dispatch pc=62, inst=STORE_FAST(arg=3, lineno=580)
2025-01-31 15:31:40,478 - DEBUG - stack ['$phi62.0', '$phi62.1']
2025-01-31 15:31:40,478 - DEBUG - dispatch pc=64, inst=LOAD_FAST(arg=3, lineno=581)
2025-01-31 15:31:40,478 - DEBUG - stack ['$phi62.0']
2025-01-31 15:31:40,478 - DEBUG - dispatch pc=66, inst=LOAD_METHOD(arg=6, lineno=581)
2025-01-31 15:31:40,479 - DEBUG - stack ['$phi62.0', '$view64.2']
2025-01-31 15:31:40,479 - DEBUG - dispatch pc=68, inst=CALL_METHOD(arg=0, lineno=581)
2025-01-31 15:31:40,479 - DEBUG - stack ['$phi62.0', '$66load_method.3']
2025-01-31 15:31:40,479 - DEBUG - dispatch pc=70, inst=STORE_FAST(arg=4, lineno=581)
2025-01-31 15:31:40,479 - DEBUG - stack ['$phi62.0', '$68call_method.4']
2025-01-31 15:31:40,479 - DEBUG - dispatch pc=72, inst=LOAD_DEREF(arg=1, lineno=582)
2025-01-31 15:31:40,479 - DEBUG - stack ['$phi62.0']
2025-01-31 15:31:40,479 - DEBUG - dispatch pc=74, inst=LOAD_FAST(arg=4, lineno=582)
2025-01-31 15:31:40,479 - DEBUG - stack ['$phi62.0', '$72load_deref.5']
2025-01-31 15:31:40,479 - DEBUG - dispatch pc=76, inst=CALL_FUNCTION(arg=1, lineno=582)
2025-01-31 15:31:40,479 - DEBUG - stack ['$phi62.0', '$72load_deref.5', '$v74.6']
2025-01-31 15:31:40,479 - DEBUG - dispatch pc=78, inst=POP_JUMP_IF_FALSE(arg=45, lineno=582)
2025-01-31 15:31:40,479 - DEBUG - stack ['$phi62.0', '$76call_function.7']
2025-01-31 15:31:40,479 - DEBUG - end state. edges=[Edge(pc=80, stack=('$phi62.0',), blockstack=(), npush=0), Edge(pc=88, stack=('$phi62.0',), blockstack=(), npush=0)]
2025-01-31 15:31:40,479 - DEBUG - pending: deque([State(pc_initial=80 nstack_initial=1), State(pc_initial=88 nstack_initial=1)])
2025-01-31 15:31:40,479 - DEBUG - stack: ['$phi80.0']
2025-01-31 15:31:40,479 - DEBUG - state.pc_initial: State(pc_initial=80 nstack_initial=1)
2025-01-31 15:31:40,479 - DEBUG - dispatch pc=80, inst=LOAD_FAST(arg=4, lineno=583)
2025-01-31 15:31:40,479 - DEBUG - stack ['$phi80.0']
2025-01-31 15:31:40,479 - DEBUG - dispatch pc=82, inst=ROT_TWO(arg=None, lineno=583)
2025-01-31 15:31:40,479 - DEBUG - stack ['$phi80.0', '$v80.1']
2025-01-31 15:31:40,479 - DEBUG - dispatch pc=84, inst=POP_TOP(arg=None, lineno=583)
2025-01-31 15:31:40,479 - DEBUG - stack ['$v80.1', '$phi80.0']
2025-01-31 15:31:40,479 - DEBUG - dispatch pc=86, inst=RETURN_VALUE(arg=None, lineno=583)
2025-01-31 15:31:40,479 - DEBUG - stack ['$v80.1']
2025-01-31 15:31:40,479 - DEBUG - end state. edges=[]
2025-01-31 15:31:40,479 - DEBUG - pending: deque([State(pc_initial=88 nstack_initial=1)])
2025-01-31 15:31:40,479 - DEBUG - stack: ['$phi88.0']
2025-01-31 15:31:40,479 - DEBUG - state.pc_initial: State(pc_initial=88 nstack_initial=1)
2025-01-31 15:31:40,480 - DEBUG - dispatch pc=88, inst=LOAD_DEREF(arg=0, lineno=584)
2025-01-31 15:31:40,480 - DEBUG - stack ['$phi88.0']
2025-01-31 15:31:40,480 - DEBUG - dispatch pc=90, inst=LOAD_FAST(arg=4, lineno=584)
2025-01-31 15:31:40,480 - DEBUG - stack ['$phi88.0', '$88load_deref.1']
2025-01-31 15:31:40,480 - DEBUG - dispatch pc=92, inst=LOAD_FAST(arg=2, lineno=584)
2025-01-31 15:31:40,480 - DEBUG - stack ['$phi88.0', '$88load_deref.1', '$v90.2']
2025-01-31 15:31:40,480 - DEBUG - dispatch pc=94, inst=CALL_FUNCTION(arg=2, lineno=584)
2025-01-31 15:31:40,480 - DEBUG - stack ['$phi88.0', '$88load_deref.1', '$v90.2', '$max_value92.3']
2025-01-31 15:31:40,480 - DEBUG - dispatch pc=96, inst=POP_JUMP_IF_FALSE(arg=52, lineno=584)
2025-01-31 15:31:40,480 - DEBUG - stack ['$phi88.0', '$94call_function.4']
2025-01-31 15:31:40,480 - DEBUG - end state. edges=[Edge(pc=98, stack=('$phi88.0',), blockstack=(), npush=0), Edge(pc=102, stack=('$phi88.0',), blockstack=(), npush=0)]
2025-01-31 15:31:40,480 - DEBUG - pending: deque([State(pc_initial=98 nstack_initial=1), State(pc_initial=102 nstack_initial=1)])
2025-01-31 15:31:40,480 - DEBUG - stack: ['$phi98.0']
2025-01-31 15:31:40,480 - DEBUG - state.pc_initial: State(pc_initial=98 nstack_initial=1)
2025-01-31 15:31:40,480 - DEBUG - dispatch pc=98, inst=LOAD_FAST(arg=4, lineno=585)
2025-01-31 15:31:40,480 - DEBUG - stack ['$phi98.0']
2025-01-31 15:31:40,480 - DEBUG - dispatch pc=100, inst=STORE_FAST(arg=2, lineno=585)
2025-01-31 15:31:40,480 - DEBUG - stack ['$phi98.0', '$v98.1']
2025-01-31 15:31:40,480 - DEBUG - end state. edges=[Edge(pc=102, stack=('$phi98.0',), blockstack=(), npush=0)]
2025-01-31 15:31:40,480 - DEBUG - pending: deque([State(pc_initial=102 nstack_initial=1), State(pc_initial=102 nstack_initial=1)])
2025-01-31 15:31:40,480 - DEBUG - stack: ['$phi102.0']
2025-01-31 15:31:40,480 - DEBUG - state.pc_initial: State(pc_initial=102 nstack_initial=1)
2025-01-31 15:31:40,480 - DEBUG - dispatch pc=102, inst=JUMP_ABSOLUTE(arg=31, lineno=585)
2025-01-31 15:31:40,480 - DEBUG - stack ['$phi102.0']
2025-01-31 15:31:40,480 - DEBUG - end state. edges=[Edge(pc=60, stack=('$phi102.0',), blockstack=(), npush=0)]
2025-01-31 15:31:40,480 - DEBUG - pending: deque([State(pc_initial=102 nstack_initial=1), State(pc_initial=60 nstack_initial=1)])
2025-01-31 15:31:40,480 - DEBUG - pending: deque([State(pc_initial=60 nstack_initial=1)])
2025-01-31 15:31:40,481 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:31:40,481 - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=12 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=0): set(),
             State(pc_initial=52 nstack_initial=0): set(),
             State(pc_initial=56 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=1): {'$phi60.0'},
             State(pc_initial=62 nstack_initial=2): {'$phi62.1'},
             State(pc_initial=80 nstack_initial=1): set(),
             State(pc_initial=88 nstack_initial=1): set(),
             State(pc_initial=98 nstack_initial=1): set(),
             State(pc_initial=102 nstack_initial=1): set(),
             State(pc_initial=104 nstack_initial=0): set()})
2025-01-31 15:31:40,481 - DEBUG - defmap: {'$phi60.0': State(pc_initial=56 nstack_initial=0),
 '$phi62.1': State(pc_initial=60 nstack_initial=1)}
2025-01-31 15:31:40,481 - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi102.0': {('$phi88.0', State(pc_initial=88 nstack_initial=1)),
                           ('$phi98.0', State(pc_initial=98 nstack_initial=1))},
             '$phi60.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0)),
                          ('$phi102.0',
                           State(pc_initial=102 nstack_initial=1))},
             '$phi62.0': {('$phi60.0', State(pc_initial=60 nstack_initial=1))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))},
             '$phi80.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi88.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi98.0': {('$phi88.0', State(pc_initial=88 nstack_initial=1))}})
2025-01-31 15:31:40,481 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi102.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi60.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0)),
                          ('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi62.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0)),
                          ('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))},
             '$phi80.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi88.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi98.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))}})
2025-01-31 15:31:40,481 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi102.0': {('$58get_iter.1',
                            State(pc_initial=56 nstack_initial=0))},
             '$phi60.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi62.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))},
             '$phi80.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi88.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi98.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))}})
2025-01-31 15:31:40,482 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi102.0': {('$58get_iter.1',
                            State(pc_initial=56 nstack_initial=0))},
             '$phi60.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi62.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))},
             '$phi80.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi88.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi98.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))}})
2025-01-31 15:31:40,482 - DEBUG - keep phismap: {'$phi60.0': {('$58get_iter.1', State(pc_initial=56 nstack_initial=0))},
 '$phi62.1': {('$60for_iter.2', State(pc_initial=60 nstack_initial=1))}}
2025-01-31 15:31:40,482 - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=56 nstack_initial=0): {'$phi60.0': '$58get_iter.1'},
             State(pc_initial=60 nstack_initial=1): {'$phi62.1': '$60for_iter.2'}})
2025-01-31 15:31:40,482 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:31:40,482 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'item': '$a2.0', 'res': '$4load_attr.1'}), (6, {'res': '$const6.2'}), (8, {'lhs': '$4load_attr.1', 'rhs': '$const6.2', 'res': '$8compare_op.3'}), (10, {'pred': '$8compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={12: (), 20: ()})
2025-01-31 15:31:40,482 - DEBUG - block_infos State(pc_initial=12 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$12load_global.0'}), (14, {'res': '$const14.1'}), (16, {'func': '$12load_global.0', 'args': ['$const14.1'], 'res': '$16call_function.2'}), (18, {'exc': '$16call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:40,482 - DEBUG - block_infos State(pc_initial=20 nstack_initial=0):
AdaptBlockInfo(insts=((20, {'res': '$20load_global.0'}), (22, {'item': '$20load_global.0', 'res': '$22load_method.1'}), (24, {'res': '$a24.2'}), (26, {'func': '$22load_method.1', 'args': ['$a24.2'], 'res': '$26call_method.3'}), (28, {'value': '$26call_method.3'}), (30, {'res': '$30load_global.4'}), (32, {'res': '$it32.5'}), (34, {'func': '$30load_global.4', 'args': ['$it32.5'], 'res': '$34call_function.6'}), (36, {'item': '$34call_function.6', 'res': '$36load_method.7'}), (38, {'res': '$const38.8'}), (40, {'func': '$36load_method.7', 'args': ['$const38.8'], 'res': '$40call_method.9'}), (42, {'value': '$40call_method.9'}), (44, {'res': '$44load_deref.10'}), (46, {'res': '$max_value46.11'}), (48, {'func': '$44load_deref.10', 'args': ['$max_value46.11'], 'res': '$48call_function.12'}), (50, {'pred': '$48call_function.12'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={52: (), 56: ()})
2025-01-31 15:31:40,483 - DEBUG - block_infos State(pc_initial=52 nstack_initial=0):
AdaptBlockInfo(insts=((52, {'res': '$max_value52.0'}), (54, {'retval': '$max_value52.0', 'castval': '$54return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:40,483 - DEBUG - block_infos State(pc_initial=56 nstack_initial=0):
AdaptBlockInfo(insts=((56, {'res': '$it56.0'}), (58, {'value': '$it56.0', 'res': '$58get_iter.1'})), outgoing_phis={'$phi60.0': '$58get_iter.1'}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: ('$58get_iter.1',)})
2025-01-31 15:31:40,483 - DEBUG - block_infos State(pc_initial=60 nstack_initial=1):
AdaptBlockInfo(insts=((60, {'iterator': '$phi60.0', 'pair': '$60for_iter.1', 'indval': '$60for_iter.2', 'pred': '$60for_iter.3'}),), outgoing_phis={'$phi62.1': '$60for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={104: (), 62: ('$phi60.0', '$60for_iter.2')})
2025-01-31 15:31:40,483 - DEBUG - block_infos State(pc_initial=62 nstack_initial=2):
AdaptBlockInfo(insts=((62, {'value': '$phi62.1'}), (64, {'res': '$view64.2'}), (66, {'item': '$view64.2', 'res': '$66load_method.3'}), (68, {'func': '$66load_method.3', 'args': [], 'res': '$68call_method.4'}), (70, {'value': '$68call_method.4'}), (72, {'res': '$72load_deref.5'}), (74, {'res': '$v74.6'}), (76, {'func': '$72load_deref.5', 'args': ['$v74.6'], 'res': '$76call_function.7'}), (78, {'pred': '$76call_function.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$phi62.0',), 88: ('$phi62.0',)})
2025-01-31 15:31:40,483 - DEBUG - block_infos State(pc_initial=80 nstack_initial=1):
AdaptBlockInfo(insts=((80, {'res': '$v80.1'}), (86, {'retval': '$v80.1', 'castval': '$86return_value.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:40,483 - DEBUG - block_infos State(pc_initial=88 nstack_initial=1):
AdaptBlockInfo(insts=((88, {'res': '$88load_deref.1'}), (90, {'res': '$v90.2'}), (92, {'res': '$max_value92.3'}), (94, {'func': '$88load_deref.1', 'args': ['$v90.2', '$max_value92.3'], 'res': '$94call_function.4'}), (96, {'pred': '$94call_function.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={98: ('$phi88.0',), 102: ('$phi88.0',)})
2025-01-31 15:31:40,483 - DEBUG - block_infos State(pc_initial=98 nstack_initial=1):
AdaptBlockInfo(insts=((98, {'res': '$v98.1'}), (100, {'value': '$v98.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={102: ('$phi98.0',)})
2025-01-31 15:31:40,483 - DEBUG - block_infos State(pc_initial=102 nstack_initial=1):
AdaptBlockInfo(insts=((102, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: ('$phi102.0',)})
2025-01-31 15:31:40,483 - DEBUG - block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$max_value104.0'}), (106, {'retval': '$max_value104.0', 'castval': '$106return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:40,484 - DEBUG - label 0:
    a = arg(0, name=a)                       ['a']
    $4load_attr.1 = getattr(value=a, attr=size) ['$4load_attr.1', 'a']
    $const6.2 = const(int, 0)                ['$const6.2']
    $8compare_op.3 = $4load_attr.1 == $const6.2 ['$4load_attr.1', '$8compare_op.3', '$const6.2']
    bool10 = global(bool: <class 'bool'>)    ['bool10']
    $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:571),), kws=(), vararg=None, varkwarg=None, target=None) ['$10pred', '$8compare_op.3', 'bool10']
    branch $10pred, 12, 20                   ['$10pred']
label 12:
    $12load_global.0 = global(ValueError: <class 'ValueError'>) ['$12load_global.0']
    $const14.1 = const(str, zero-size array to reduction operation maximum which has no identity) ['$const14.1']
    $16call_function.2 = call $12load_global.0($const14.1, func=$12load_global.0, args=[Var($const14.1, arraymath.py:572)], kws=(), vararg=None, varkwarg=None, target=None) ['$12load_global.0', '$16call_function.2', '$const14.1']
    raise $16call_function.2                 ['$16call_function.2']
label 20:
    $20load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>) ['$20load_global.0']
    $22load_method.1 = getattr(value=$20load_global.0, attr=nditer) ['$20load_global.0', '$22load_method.1']
    it = call $22load_method.1(a, func=$22load_method.1, args=[Var(a, arraymath.py:570)], kws=(), vararg=None, varkwarg=None, target=None) ['$22load_method.1', 'a', 'it']
    $30load_global.4 = global(next: <built-in function next>) ['$30load_global.4']
    $34call_function.6 = call $30load_global.4(it, func=$30load_global.4, args=[Var(it, arraymath.py:575)], kws=(), vararg=None, varkwarg=None, target=None) ['$30load_global.4', '$34call_function.6', 'it']
    $36load_method.7 = getattr(value=$34call_function.6, attr=take) ['$34call_function.6', '$36load_method.7']
    $const38.8 = const(int, 0)               ['$const38.8']
    max_value = call $36load_method.7($const38.8, func=$36load_method.7, args=[Var($const38.8, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None) ['$36load_method.7', '$const38.8', 'max_value']
    $44load_deref.10 = freevar(pre_return_func: <ufunc 'isnan'>) ['$44load_deref.10']
    $48call_function.12 = call $44load_deref.10(max_value, func=$44load_deref.10, args=[Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None) ['$44load_deref.10', '$48call_function.12', 'max_value']
    bool50 = global(bool: <class 'bool'>)    ['bool50']
    $50pred = call bool50($48call_function.12, func=bool50, args=(Var($48call_function.12, arraymath.py:577),), kws=(), vararg=None, varkwarg=None, target=None) ['$48call_function.12', '$50pred', 'bool50']
    branch $50pred, 52, 56                   ['$50pred']
label 52:
    $54return_value.1 = cast(value=max_value) ['$54return_value.1', 'max_value']
    return $54return_value.1                 ['$54return_value.1']
label 56:
    $58get_iter.1 = getiter(value=it)        ['$58get_iter.1', 'it']
    $phi60.0 = $58get_iter.1                 ['$58get_iter.1', '$phi60.0']
    jump 60                                  []
label 60:
    $60for_iter.1 = iternext(value=$phi60.0) ['$60for_iter.1', '$phi60.0']
    $60for_iter.2 = pair_first(value=$60for_iter.1) ['$60for_iter.1', '$60for_iter.2']
    $60for_iter.3 = pair_second(value=$60for_iter.1) ['$60for_iter.1', '$60for_iter.3']
    $phi62.1 = $60for_iter.2                 ['$60for_iter.2', '$phi62.1']
    branch $60for_iter.3, 62, 104            ['$60for_iter.3']
label 62:
    view = $phi62.1                          ['$phi62.1', 'view']
    $66load_method.3 = getattr(value=view, attr=item) ['$66load_method.3', 'view']
    v = call $66load_method.3(func=$66load_method.3, args=[], kws=(), vararg=None, varkwarg=None, target=None) ['$66load_method.3', 'v']
    $72load_deref.5 = freevar(pre_return_func: <ufunc 'isnan'>) ['$72load_deref.5']
    $76call_function.7 = call $72load_deref.5(v, func=$72load_deref.5, args=[Var(v, arraymath.py:581)], kws=(), vararg=None, varkwarg=None, target=None) ['$72load_deref.5', '$76call_function.7', 'v']
    bool78 = global(bool: <class 'bool'>)    ['bool78']
    $78pred = call bool78($76call_function.7, func=bool78, args=(Var($76call_function.7, arraymath.py:582),), kws=(), vararg=None, varkwarg=None, target=None) ['$76call_function.7', '$78pred', 'bool78']
    branch $78pred, 80, 88                   ['$78pred']
label 80:
    $86return_value.2 = cast(value=v)        ['$86return_value.2', 'v']
    return $86return_value.2                 ['$86return_value.2']
label 88:
    $88load_deref.1 = freevar(comparator: <function max_comparator at 0x7c89f0822440>) ['$88load_deref.1']
    $94call_function.4 = call $88load_deref.1(v, max_value, func=$88load_deref.1, args=[Var(v, arraymath.py:581), Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None) ['$88load_deref.1', '$94call_function.4', 'max_value', 'v']
    bool96 = global(bool: <class 'bool'>)    ['bool96']
    $96pred = call bool96($94call_function.4, func=bool96, args=(Var($94call_function.4, arraymath.py:584),), kws=(), vararg=None, varkwarg=None, target=None) ['$94call_function.4', '$96pred', 'bool96']
    branch $96pred, 98, 102                  ['$96pred']
label 98:
    max_value = v                            ['max_value', 'v']
    jump 102                                 []
label 102:
    jump 60                                  []
label 104:
    $106return_value.1 = cast(value=max_value) ['$106return_value.1', 'max_value']
    return $106return_value.1                ['$106return_value.1']

2025-01-31 15:31:40,494 - DEBUG - ==== SSA block analysis pass on 0
2025-01-31 15:31:40,494 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8772770>
2025-01-31 15:31:40,494 - DEBUG - on stmt: a = arg(0, name=a)
2025-01-31 15:31:40,494 - DEBUG - on stmt: $4load_attr.1 = getattr(value=a, attr=size)
2025-01-31 15:31:40,494 - DEBUG - on stmt: $const6.2 = const(int, 0)
2025-01-31 15:31:40,494 - DEBUG - on stmt: $8compare_op.3 = $4load_attr.1 == $const6.2
2025-01-31 15:31:40,494 - DEBUG - on stmt: bool10 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,494 - DEBUG - on stmt: $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:571),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,494 - DEBUG - on stmt: branch $10pred, 12, 20
2025-01-31 15:31:40,494 - DEBUG - ==== SSA block analysis pass on 12
2025-01-31 15:31:40,494 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8772770>
2025-01-31 15:31:40,494 - DEBUG - on stmt: $12load_global.0 = global(ValueError: <class 'ValueError'>)
2025-01-31 15:31:40,494 - DEBUG - on stmt: $const14.1 = const(str, zero-size array to reduction operation maximum which has no identity)
2025-01-31 15:31:40,494 - DEBUG - on stmt: $16call_function.2 = call $12load_global.0($const14.1, func=$12load_global.0, args=[Var($const14.1, arraymath.py:572)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,495 - DEBUG - on stmt: <static> raise <class 'ValueError'>('zero-size array to reduction operation maximum which has no identity')
2025-01-31 15:31:40,495 - DEBUG - ==== SSA block analysis pass on 20
2025-01-31 15:31:40,495 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8772770>
2025-01-31 15:31:40,495 - DEBUG - on stmt: $20load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:40,495 - DEBUG - on stmt: $22load_method.1 = getattr(value=$20load_global.0, attr=nditer)
2025-01-31 15:31:40,495 - DEBUG - on stmt: it = call $22load_method.1(a, func=$22load_method.1, args=[Var(a, arraymath.py:570)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,495 - DEBUG - on stmt: $30load_global.4 = global(next: <built-in function next>)
2025-01-31 15:31:40,495 - DEBUG - on stmt: $34call_function.6 = call $30load_global.4(it, func=$30load_global.4, args=[Var(it, arraymath.py:575)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,495 - DEBUG - on stmt: $36load_method.7 = getattr(value=$34call_function.6, attr=take)
2025-01-31 15:31:40,495 - DEBUG - on stmt: $const38.8 = const(int, 0)
2025-01-31 15:31:40,495 - DEBUG - on stmt: max_value = call $36load_method.7($const38.8, func=$36load_method.7, args=[Var($const38.8, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,495 - DEBUG - on stmt: $44load_deref.10 = freevar(pre_return_func: <ufunc 'isnan'>)
2025-01-31 15:31:40,495 - DEBUG - on stmt: $48call_function.12 = call $44load_deref.10(max_value, func=$44load_deref.10, args=[Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,495 - DEBUG - on stmt: bool50 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,495 - DEBUG - on stmt: $50pred = call bool50($48call_function.12, func=bool50, args=(Var($48call_function.12, arraymath.py:577),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,495 - DEBUG - on stmt: branch $50pred, 52, 56
2025-01-31 15:31:40,495 - DEBUG - ==== SSA block analysis pass on 52
2025-01-31 15:31:40,496 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8772770>
2025-01-31 15:31:40,496 - DEBUG - on stmt: $54return_value.1 = cast(value=max_value)
2025-01-31 15:31:40,496 - DEBUG - on stmt: return $54return_value.1
2025-01-31 15:31:40,496 - DEBUG - ==== SSA block analysis pass on 56
2025-01-31 15:31:40,496 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8772770>
2025-01-31 15:31:40,496 - DEBUG - on stmt: $58get_iter.1 = getiter(value=it)
2025-01-31 15:31:40,496 - DEBUG - on stmt: $phi60.0 = $58get_iter.1
2025-01-31 15:31:40,496 - DEBUG - on stmt: jump 60
2025-01-31 15:31:40,496 - DEBUG - ==== SSA block analysis pass on 60
2025-01-31 15:31:40,496 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8772770>
2025-01-31 15:31:40,496 - DEBUG - on stmt: $60for_iter.1 = iternext(value=$phi60.0)
2025-01-31 15:31:40,496 - DEBUG - on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
2025-01-31 15:31:40,496 - DEBUG - on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
2025-01-31 15:31:40,496 - DEBUG - on stmt: $phi62.1 = $60for_iter.2
2025-01-31 15:31:40,496 - DEBUG - on stmt: branch $60for_iter.3, 62, 104
2025-01-31 15:31:40,496 - DEBUG - ==== SSA block analysis pass on 62
2025-01-31 15:31:40,496 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8772770>
2025-01-31 15:31:40,496 - DEBUG - on stmt: view = $phi62.1
2025-01-31 15:31:40,496 - DEBUG - on stmt: $66load_method.3 = getattr(value=view, attr=item)
2025-01-31 15:31:40,496 - DEBUG - on stmt: v = call $66load_method.3(func=$66load_method.3, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,496 - DEBUG - on stmt: $72load_deref.5 = freevar(pre_return_func: <ufunc 'isnan'>)
2025-01-31 15:31:40,496 - DEBUG - on stmt: $76call_function.7 = call $72load_deref.5(v, func=$72load_deref.5, args=[Var(v, arraymath.py:581)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,496 - DEBUG - on stmt: bool78 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,496 - DEBUG - on stmt: $78pred = call bool78($76call_function.7, func=bool78, args=(Var($76call_function.7, arraymath.py:582),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,496 - DEBUG - on stmt: branch $78pred, 80, 88
2025-01-31 15:31:40,496 - DEBUG - ==== SSA block analysis pass on 80
2025-01-31 15:31:40,496 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8772770>
2025-01-31 15:31:40,497 - DEBUG - on stmt: $86return_value.2 = cast(value=v)
2025-01-31 15:31:40,497 - DEBUG - on stmt: return $86return_value.2
2025-01-31 15:31:40,497 - DEBUG - ==== SSA block analysis pass on 88
2025-01-31 15:31:40,497 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8772770>
2025-01-31 15:31:40,497 - DEBUG - on stmt: $88load_deref.1 = freevar(comparator: <function max_comparator at 0x7c89f0822440>)
2025-01-31 15:31:40,497 - DEBUG - on stmt: $94call_function.4 = call $88load_deref.1(v, max_value, func=$88load_deref.1, args=[Var(v, arraymath.py:581), Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,497 - DEBUG - on stmt: bool96 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,497 - DEBUG - on stmt: $96pred = call bool96($94call_function.4, func=bool96, args=(Var($94call_function.4, arraymath.py:584),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,497 - DEBUG - on stmt: branch $96pred, 98, 102
2025-01-31 15:31:40,497 - DEBUG - ==== SSA block analysis pass on 98
2025-01-31 15:31:40,497 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8772770>
2025-01-31 15:31:40,497 - DEBUG - on stmt: max_value = v
2025-01-31 15:31:40,497 - DEBUG - on stmt: jump 102
2025-01-31 15:31:40,497 - DEBUG - ==== SSA block analysis pass on 102
2025-01-31 15:31:40,497 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8772770>
2025-01-31 15:31:40,497 - DEBUG - on stmt: jump 60
2025-01-31 15:31:40,497 - DEBUG - ==== SSA block analysis pass on 104
2025-01-31 15:31:40,497 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8772770>
2025-01-31 15:31:40,497 - DEBUG - on stmt: $106return_value.1 = cast(value=max_value)
2025-01-31 15:31:40,497 - DEBUG - on stmt: return $106return_value.1
2025-01-31 15:31:40,498 - DEBUG - defs defaultdict(<class 'list'>,
            {'$106return_value.1': [(<numba.core.ir.Assign object at 0x7c89e899ed10>,
                                     104)],
             '$10pred': [(<numba.core.ir.Assign object at 0x7c89e8770c10>, 0)],
             '$12load_global.0': [(<numba.core.ir.Assign object at 0x7c89e8771000>,
                                   12)],
             '$16call_function.2': [(<numba.core.ir.Assign object at 0x7c89e87727a0>,
                                     12)],
             '$20load_global.0': [(<numba.core.ir.Assign object at 0x7c89e87714b0>,
                                   20)],
             '$22load_method.1': [(<numba.core.ir.Assign object at 0x7c89e8771cf0>,
                                   20)],
             '$30load_global.4': [(<numba.core.ir.Assign object at 0x7c89e8772650>,
                                   20)],
             '$34call_function.6': [(<numba.core.ir.Assign object at 0x7c89e8772740>,
                                     20)],
             '$36load_method.7': [(<numba.core.ir.Assign object at 0x7c89e842f340>,
                                   20)],
             '$44load_deref.10': [(<numba.core.ir.Assign object at 0x7c89e87734c0>,
                                   20)],
             '$48call_function.12': [(<numba.core.ir.Assign object at 0x7c89e8771ed0>,
                                      20)],
             '$4load_attr.1': [(<numba.core.ir.Assign object at 0x7c89e87707c0>,
                                0)],
             '$50pred': [(<numba.core.ir.Assign object at 0x7c89e8772fe0>, 20)],
             '$54return_value.1': [(<numba.core.ir.Assign object at 0x7c89e8773070>,
                                    52)],
             '$58get_iter.1': [(<numba.core.ir.Assign object at 0x7c89e8773040>,
                                56)],
             '$60for_iter.1': [(<numba.core.ir.Assign object at 0x7c89e8772230>,
                                60)],
             '$60for_iter.2': [(<numba.core.ir.Assign object at 0x7c89e8773be0>,
                                60)],
             '$60for_iter.3': [(<numba.core.ir.Assign object at 0x7c89e8770cd0>,
                                60)],
             '$66load_method.3': [(<numba.core.ir.Assign object at 0x7c89e8963f40>,
                                   62)],
             '$72load_deref.5': [(<numba.core.ir.Assign object at 0x7c89e8963730>,
                                  62)],
             '$76call_function.7': [(<numba.core.ir.Assign object at 0x7c89e89639d0>,
                                     62)],
             '$78pred': [(<numba.core.ir.Assign object at 0x7c89e8963be0>, 62)],
             '$86return_value.2': [(<numba.core.ir.Assign object at 0x7c89e8960220>,
                                    80)],
             '$88load_deref.1': [(<numba.core.ir.Assign object at 0x7c89e8961870>,
                                  88)],
             '$8compare_op.3': [(<numba.core.ir.Assign object at 0x7c89e8770640>,
                                 0)],
             '$94call_function.4': [(<numba.core.ir.Assign object at 0x7c89e899e110>,
                                     88)],
             '$96pred': [(<numba.core.ir.Assign object at 0x7c89e899f4c0>, 88)],
             '$const14.1': [(<numba.core.ir.Assign object at 0x7c89e8770250>,
                             12)],
             '$const38.8': [(<numba.core.ir.Assign object at 0x7c89e842cf40>,
                             20)],
             '$const6.2': [(<numba.core.ir.Assign object at 0x7c89e8770850>,
                            0)],
             '$phi60.0': [(<numba.core.ir.Assign object at 0x7c89e8772e30>,
                           56)],
             '$phi62.1': [(<numba.core.ir.Assign object at 0x7c89e87728f0>,
                           60)],
             'a': [(<numba.core.ir.Assign object at 0x7c89e8773f10>, 0)],
             'bool10': [(<numba.core.ir.Assign object at 0x7c89e87707f0>, 0)],
             'bool50': [(<numba.core.ir.Assign object at 0x7c89e8770400>, 20)],
             'bool78': [(<numba.core.ir.Assign object at 0x7c89e8963b50>, 62)],
             'bool96': [(<numba.core.ir.Assign object at 0x7c89e899e020>, 88)],
             'it': [(<numba.core.ir.Assign object at 0x7c89e8772860>, 20)],
             'max_value': [(<numba.core.ir.Assign object at 0x7c89e842c3d0>,
                            20),
                           (<numba.core.ir.Assign object at 0x7c89e899f670>,
                            98)],
             'v': [(<numba.core.ir.Assign object at 0x7c89e89634f0>, 62)],
             'view': [(<numba.core.ir.Assign object at 0x7c89e860d660>, 62)]})
2025-01-31 15:31:40,498 - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x7c89e842ce50>
2025-01-31 15:31:40,498 - DEBUG - Fix SSA violator on var max_value
2025-01-31 15:31:40,498 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-31 15:31:40,498 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e842e440>
2025-01-31 15:31:40,498 - DEBUG - on stmt: a = arg(0, name=a)
2025-01-31 15:31:40,498 - DEBUG - on stmt: $4load_attr.1 = getattr(value=a, attr=size)
2025-01-31 15:31:40,498 - DEBUG - on stmt: $const6.2 = const(int, 0)
2025-01-31 15:31:40,498 - DEBUG - on stmt: $8compare_op.3 = $4load_attr.1 == $const6.2
2025-01-31 15:31:40,498 - DEBUG - on stmt: bool10 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,498 - DEBUG - on stmt: $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:571),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,498 - DEBUG - on stmt: branch $10pred, 12, 20
2025-01-31 15:31:40,498 - DEBUG - ==== SSA block rewrite pass on 12
2025-01-31 15:31:40,498 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e842e440>
2025-01-31 15:31:40,498 - DEBUG - on stmt: $12load_global.0 = global(ValueError: <class 'ValueError'>)
2025-01-31 15:31:40,499 - DEBUG - on stmt: $const14.1 = const(str, zero-size array to reduction operation maximum which has no identity)
2025-01-31 15:31:40,499 - DEBUG - on stmt: $16call_function.2 = call $12load_global.0($const14.1, func=$12load_global.0, args=[Var($const14.1, arraymath.py:572)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,499 - DEBUG - on stmt: <static> raise <class 'ValueError'>('zero-size array to reduction operation maximum which has no identity')
2025-01-31 15:31:40,499 - DEBUG - ==== SSA block rewrite pass on 20
2025-01-31 15:31:40,499 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e842e440>
2025-01-31 15:31:40,499 - DEBUG - on stmt: $20load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:40,499 - DEBUG - on stmt: $22load_method.1 = getattr(value=$20load_global.0, attr=nditer)
2025-01-31 15:31:40,499 - DEBUG - on stmt: it = call $22load_method.1(a, func=$22load_method.1, args=[Var(a, arraymath.py:570)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,499 - DEBUG - on stmt: $30load_global.4 = global(next: <built-in function next>)
2025-01-31 15:31:40,499 - DEBUG - on stmt: $34call_function.6 = call $30load_global.4(it, func=$30load_global.4, args=[Var(it, arraymath.py:575)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,499 - DEBUG - on stmt: $36load_method.7 = getattr(value=$34call_function.6, attr=take)
2025-01-31 15:31:40,499 - DEBUG - on stmt: $const38.8 = const(int, 0)
2025-01-31 15:31:40,499 - DEBUG - on stmt: max_value = call $36load_method.7($const38.8, func=$36load_method.7, args=[Var($const38.8, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,499 - DEBUG - first assign: max_value
2025-01-31 15:31:40,499 - DEBUG - replaced with: max_value = call $36load_method.7($const38.8, func=$36load_method.7, args=[Var($const38.8, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,499 - DEBUG - on stmt: $44load_deref.10 = freevar(pre_return_func: <ufunc 'isnan'>)
2025-01-31 15:31:40,499 - DEBUG - on stmt: $48call_function.12 = call $44load_deref.10(max_value, func=$44load_deref.10, args=[Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,499 - DEBUG - on stmt: bool50 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,499 - DEBUG - on stmt: $50pred = call bool50($48call_function.12, func=bool50, args=(Var($48call_function.12, arraymath.py:577),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,499 - DEBUG - on stmt: branch $50pred, 52, 56
2025-01-31 15:31:40,499 - DEBUG - ==== SSA block rewrite pass on 52
2025-01-31 15:31:40,499 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e842e440>
2025-01-31 15:31:40,499 - DEBUG - on stmt: $54return_value.1 = cast(value=max_value)
2025-01-31 15:31:40,499 - DEBUG - on stmt: return $54return_value.1
2025-01-31 15:31:40,499 - DEBUG - ==== SSA block rewrite pass on 56
2025-01-31 15:31:40,500 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e842e440>
2025-01-31 15:31:40,500 - DEBUG - on stmt: $58get_iter.1 = getiter(value=it)
2025-01-31 15:31:40,500 - DEBUG - on stmt: $phi60.0 = $58get_iter.1
2025-01-31 15:31:40,500 - DEBUG - on stmt: jump 60
2025-01-31 15:31:40,500 - DEBUG - ==== SSA block rewrite pass on 60
2025-01-31 15:31:40,500 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e842e440>
2025-01-31 15:31:40,500 - DEBUG - on stmt: $60for_iter.1 = iternext(value=$phi60.0)
2025-01-31 15:31:40,500 - DEBUG - on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
2025-01-31 15:31:40,500 - DEBUG - on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
2025-01-31 15:31:40,500 - DEBUG - on stmt: $phi62.1 = $60for_iter.2
2025-01-31 15:31:40,500 - DEBUG - on stmt: branch $60for_iter.3, 62, 104
2025-01-31 15:31:40,500 - DEBUG - ==== SSA block rewrite pass on 62
2025-01-31 15:31:40,500 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e842e440>
2025-01-31 15:31:40,500 - DEBUG - on stmt: view = $phi62.1
2025-01-31 15:31:40,500 - DEBUG - on stmt: $66load_method.3 = getattr(value=view, attr=item)
2025-01-31 15:31:40,500 - DEBUG - on stmt: v = call $66load_method.3(func=$66load_method.3, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,500 - DEBUG - on stmt: $72load_deref.5 = freevar(pre_return_func: <ufunc 'isnan'>)
2025-01-31 15:31:40,500 - DEBUG - on stmt: $76call_function.7 = call $72load_deref.5(v, func=$72load_deref.5, args=[Var(v, arraymath.py:581)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,500 - DEBUG - on stmt: bool78 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,500 - DEBUG - on stmt: $78pred = call bool78($76call_function.7, func=bool78, args=(Var($76call_function.7, arraymath.py:582),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,500 - DEBUG - on stmt: branch $78pred, 80, 88
2025-01-31 15:31:40,500 - DEBUG - ==== SSA block rewrite pass on 80
2025-01-31 15:31:40,500 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e842e440>
2025-01-31 15:31:40,500 - DEBUG - on stmt: $86return_value.2 = cast(value=v)
2025-01-31 15:31:40,500 - DEBUG - on stmt: return $86return_value.2
2025-01-31 15:31:40,500 - DEBUG - ==== SSA block rewrite pass on 88
2025-01-31 15:31:40,500 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e842e440>
2025-01-31 15:31:40,500 - DEBUG - on stmt: $88load_deref.1 = freevar(comparator: <function max_comparator at 0x7c89f0822440>)
2025-01-31 15:31:40,500 - DEBUG - on stmt: $94call_function.4 = call $88load_deref.1(v, max_value, func=$88load_deref.1, args=[Var(v, arraymath.py:581), Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,501 - DEBUG - on stmt: bool96 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,501 - DEBUG - on stmt: $96pred = call bool96($94call_function.4, func=bool96, args=(Var($94call_function.4, arraymath.py:584),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,501 - DEBUG - on stmt: branch $96pred, 98, 102
2025-01-31 15:31:40,501 - DEBUG - ==== SSA block rewrite pass on 98
2025-01-31 15:31:40,501 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e842e440>
2025-01-31 15:31:40,501 - DEBUG - on stmt: max_value = v
2025-01-31 15:31:40,501 - DEBUG - replaced with: max_value.1 = v
2025-01-31 15:31:40,501 - DEBUG - on stmt: jump 102
2025-01-31 15:31:40,501 - DEBUG - ==== SSA block rewrite pass on 102
2025-01-31 15:31:40,501 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e842e440>
2025-01-31 15:31:40,501 - DEBUG - on stmt: jump 60
2025-01-31 15:31:40,501 - DEBUG - ==== SSA block rewrite pass on 104
2025-01-31 15:31:40,501 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e842e440>
2025-01-31 15:31:40,501 - DEBUG - on stmt: $106return_value.1 = cast(value=max_value)
2025-01-31 15:31:40,501 - DEBUG - on stmt: return $106return_value.1
2025-01-31 15:31:40,501 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {20: [<numba.core.ir.Assign object at 0x7c89e8773a30>],
             98: [<numba.core.ir.Assign object at 0x7c89e899d9c0>]})
2025-01-31 15:31:40,501 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-31 15:31:40,501 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e842e440>
2025-01-31 15:31:40,501 - DEBUG - on stmt: a = arg(0, name=a)
2025-01-31 15:31:40,501 - DEBUG - on stmt: $4load_attr.1 = getattr(value=a, attr=size)
2025-01-31 15:31:40,501 - DEBUG - on stmt: $const6.2 = const(int, 0)
2025-01-31 15:31:40,501 - DEBUG - on stmt: $8compare_op.3 = $4load_attr.1 == $const6.2
2025-01-31 15:31:40,501 - DEBUG - on stmt: bool10 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,501 - DEBUG - on stmt: $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:571),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,501 - DEBUG - on stmt: branch $10pred, 12, 20
2025-01-31 15:31:40,501 - DEBUG - ==== SSA block rewrite pass on 12
2025-01-31 15:31:40,501 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e842e440>
2025-01-31 15:31:40,502 - DEBUG - on stmt: $12load_global.0 = global(ValueError: <class 'ValueError'>)
2025-01-31 15:31:40,502 - DEBUG - on stmt: $const14.1 = const(str, zero-size array to reduction operation maximum which has no identity)
2025-01-31 15:31:40,502 - DEBUG - on stmt: $16call_function.2 = call $12load_global.0($const14.1, func=$12load_global.0, args=[Var($const14.1, arraymath.py:572)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,502 - DEBUG - on stmt: <static> raise <class 'ValueError'>('zero-size array to reduction operation maximum which has no identity')
2025-01-31 15:31:40,502 - DEBUG - ==== SSA block rewrite pass on 20
2025-01-31 15:31:40,502 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e842e440>
2025-01-31 15:31:40,502 - DEBUG - on stmt: $20load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:40,502 - DEBUG - on stmt: $22load_method.1 = getattr(value=$20load_global.0, attr=nditer)
2025-01-31 15:31:40,502 - DEBUG - on stmt: it = call $22load_method.1(a, func=$22load_method.1, args=[Var(a, arraymath.py:570)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,502 - DEBUG - on stmt: $30load_global.4 = global(next: <built-in function next>)
2025-01-31 15:31:40,502 - DEBUG - on stmt: $34call_function.6 = call $30load_global.4(it, func=$30load_global.4, args=[Var(it, arraymath.py:575)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,502 - DEBUG - on stmt: $36load_method.7 = getattr(value=$34call_function.6, attr=take)
2025-01-31 15:31:40,502 - DEBUG - on stmt: $const38.8 = const(int, 0)
2025-01-31 15:31:40,502 - DEBUG - on stmt: max_value = call $36load_method.7($const38.8, func=$36load_method.7, args=[Var($const38.8, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,502 - DEBUG - on stmt: $44load_deref.10 = freevar(pre_return_func: <ufunc 'isnan'>)
2025-01-31 15:31:40,502 - DEBUG - on stmt: $48call_function.12 = call $44load_deref.10(max_value, func=$44load_deref.10, args=[Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,502 - DEBUG - find_def var='max_value' stmt=$48call_function.12 = call $44load_deref.10(max_value, func=$44load_deref.10, args=[Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,502 - DEBUG - on stmt: bool50 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,502 - DEBUG - on stmt: $50pred = call bool50($48call_function.12, func=bool50, args=(Var($48call_function.12, arraymath.py:577),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,502 - DEBUG - on stmt: branch $50pred, 52, 56
2025-01-31 15:31:40,502 - DEBUG - ==== SSA block rewrite pass on 52
2025-01-31 15:31:40,502 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e842e440>
2025-01-31 15:31:40,502 - DEBUG - on stmt: $54return_value.1 = cast(value=max_value)
2025-01-31 15:31:40,503 - DEBUG - find_def var='max_value' stmt=$54return_value.1 = cast(value=max_value)
2025-01-31 15:31:40,503 - DEBUG - find_def_from_top label 52
2025-01-31 15:31:40,503 - DEBUG - idom 20 from label 52
2025-01-31 15:31:40,503 - DEBUG - find_def_from_bottom label 20
2025-01-31 15:31:40,503 - DEBUG - on stmt: return $54return_value.1
2025-01-31 15:31:40,503 - DEBUG - ==== SSA block rewrite pass on 56
2025-01-31 15:31:40,503 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e842e440>
2025-01-31 15:31:40,503 - DEBUG - on stmt: $58get_iter.1 = getiter(value=it)
2025-01-31 15:31:40,503 - DEBUG - on stmt: $phi60.0 = $58get_iter.1
2025-01-31 15:31:40,503 - DEBUG - on stmt: jump 60
2025-01-31 15:31:40,503 - DEBUG - ==== SSA block rewrite pass on 60
2025-01-31 15:31:40,503 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e842e440>
2025-01-31 15:31:40,503 - DEBUG - on stmt: $60for_iter.1 = iternext(value=$phi60.0)
2025-01-31 15:31:40,503 - DEBUG - on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
2025-01-31 15:31:40,503 - DEBUG - on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
2025-01-31 15:31:40,503 - DEBUG - on stmt: $phi62.1 = $60for_iter.2
2025-01-31 15:31:40,503 - DEBUG - on stmt: branch $60for_iter.3, 62, 104
2025-01-31 15:31:40,503 - DEBUG - ==== SSA block rewrite pass on 62
2025-01-31 15:31:40,503 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e842e440>
2025-01-31 15:31:40,503 - DEBUG - on stmt: view = $phi62.1
2025-01-31 15:31:40,503 - DEBUG - on stmt: $66load_method.3 = getattr(value=view, attr=item)
2025-01-31 15:31:40,503 - DEBUG - on stmt: v = call $66load_method.3(func=$66load_method.3, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,503 - DEBUG - on stmt: $72load_deref.5 = freevar(pre_return_func: <ufunc 'isnan'>)
2025-01-31 15:31:40,503 - DEBUG - on stmt: $76call_function.7 = call $72load_deref.5(v, func=$72load_deref.5, args=[Var(v, arraymath.py:581)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,503 - DEBUG - on stmt: bool78 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,503 - DEBUG - on stmt: $78pred = call bool78($76call_function.7, func=bool78, args=(Var($76call_function.7, arraymath.py:582),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,503 - DEBUG - on stmt: branch $78pred, 80, 88
2025-01-31 15:31:40,504 - DEBUG - ==== SSA block rewrite pass on 80
2025-01-31 15:31:40,504 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e842e440>
2025-01-31 15:31:40,504 - DEBUG - on stmt: $86return_value.2 = cast(value=v)
2025-01-31 15:31:40,504 - DEBUG - on stmt: return $86return_value.2
2025-01-31 15:31:40,504 - DEBUG - ==== SSA block rewrite pass on 88
2025-01-31 15:31:40,504 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e842e440>
2025-01-31 15:31:40,504 - DEBUG - on stmt: $88load_deref.1 = freevar(comparator: <function max_comparator at 0x7c89f0822440>)
2025-01-31 15:31:40,504 - DEBUG - on stmt: $94call_function.4 = call $88load_deref.1(v, max_value, func=$88load_deref.1, args=[Var(v, arraymath.py:581), Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,504 - DEBUG - find_def var='max_value' stmt=$94call_function.4 = call $88load_deref.1(v, max_value, func=$88load_deref.1, args=[Var(v, arraymath.py:581), Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,504 - DEBUG - find_def_from_top label 88
2025-01-31 15:31:40,504 - DEBUG - idom 62 from label 88
2025-01-31 15:31:40,504 - DEBUG - find_def_from_bottom label 62
2025-01-31 15:31:40,504 - DEBUG - find_def_from_top label 62
2025-01-31 15:31:40,504 - DEBUG - idom 60 from label 62
2025-01-31 15:31:40,504 - DEBUG - find_def_from_bottom label 60
2025-01-31 15:31:40,504 - DEBUG - find_def_from_top label 60
2025-01-31 15:31:40,504 - DEBUG - insert phi node max_value.2 = phi(incoming_values=[], incoming_blocks=[]) at 60
2025-01-31 15:31:40,504 - DEBUG - find_def_from_bottom label 56
2025-01-31 15:31:40,504 - DEBUG - find_def_from_top label 56
2025-01-31 15:31:40,504 - DEBUG - idom 20 from label 56
2025-01-31 15:31:40,504 - DEBUG - find_def_from_bottom label 20
2025-01-31 15:31:40,504 - DEBUG - incoming_def max_value = call $36load_method.7($const38.8, func=$36load_method.7, args=[Var($const38.8, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,504 - DEBUG - find_def_from_bottom label 102
2025-01-31 15:31:40,504 - DEBUG - find_def_from_top label 102
2025-01-31 15:31:40,504 - DEBUG - insert phi node max_value.3 = phi(incoming_values=[], incoming_blocks=[]) at 102
2025-01-31 15:31:40,504 - DEBUG - find_def_from_bottom label 88
2025-01-31 15:31:40,504 - DEBUG - find_def_from_top label 88
2025-01-31 15:31:40,504 - DEBUG - idom 62 from label 88
2025-01-31 15:31:40,504 - DEBUG - find_def_from_bottom label 62
2025-01-31 15:31:40,505 - DEBUG - find_def_from_top label 62
2025-01-31 15:31:40,505 - DEBUG - idom 60 from label 62
2025-01-31 15:31:40,505 - DEBUG - find_def_from_bottom label 60
2025-01-31 15:31:40,505 - DEBUG - incoming_def max_value.2 = phi(incoming_values=[Var(max_value, arraymath.py:576)], incoming_blocks=[56])
2025-01-31 15:31:40,505 - DEBUG - find_def_from_bottom label 98
2025-01-31 15:31:40,505 - DEBUG - incoming_def max_value.1 = v
2025-01-31 15:31:40,505 - DEBUG - incoming_def max_value.3 = phi(incoming_values=[Var(max_value.2, arraymath.py:584), Var(max_value.1, arraymath.py:585)], incoming_blocks=[88, 98])
2025-01-31 15:31:40,505 - DEBUG - replaced with: $94call_function.4 = call $88load_deref.1(v, max_value.2, func=$88load_deref.1, args=[Var(v, arraymath.py:581), Var(max_value.2, arraymath.py:584)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,505 - DEBUG - on stmt: bool96 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,505 - DEBUG - on stmt: $96pred = call bool96($94call_function.4, func=bool96, args=(Var($94call_function.4, arraymath.py:584),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,505 - DEBUG - on stmt: branch $96pred, 98, 102
2025-01-31 15:31:40,505 - DEBUG - ==== SSA block rewrite pass on 98
2025-01-31 15:31:40,505 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e842e440>
2025-01-31 15:31:40,505 - DEBUG - on stmt: max_value.1 = v
2025-01-31 15:31:40,505 - DEBUG - on stmt: jump 102
2025-01-31 15:31:40,505 - DEBUG - ==== SSA block rewrite pass on 102
2025-01-31 15:31:40,505 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e842e440>
2025-01-31 15:31:40,505 - DEBUG - on stmt: jump 60
2025-01-31 15:31:40,505 - DEBUG - ==== SSA block rewrite pass on 104
2025-01-31 15:31:40,505 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e842e440>
2025-01-31 15:31:40,505 - DEBUG - on stmt: $106return_value.1 = cast(value=max_value)
2025-01-31 15:31:40,505 - DEBUG - find_def var='max_value' stmt=$106return_value.1 = cast(value=max_value)
2025-01-31 15:31:40,505 - DEBUG - find_def_from_top label 104
2025-01-31 15:31:40,505 - DEBUG - idom 60 from label 104
2025-01-31 15:31:40,505 - DEBUG - find_def_from_bottom label 60
2025-01-31 15:31:40,505 - DEBUG - replaced with: $106return_value.1 = cast(value=max_value.2)
2025-01-31 15:31:40,505 - DEBUG - on stmt: return $106return_value.1
2025-01-31 15:31:40,510 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=4691)
           2	LOAD_FAST(arg=1, lineno=4692)
           4	LOAD_FAST(arg=0, lineno=4692)
           6	LOAD_ATTR(arg=0, lineno=4692)
           8	LOAD_CONST(arg=1, lineno=4692)
          10	BINARY_SUBTRACT(arg=None, lineno=4692)
          12	COMPARE_OP(arg=4, lineno=4692)
          14	POP_JUMP_IF_TRUE(arg=15, lineno=4692)
          16	LOAD_FAST(arg=1, lineno=4692)
          18	LOAD_FAST(arg=0, lineno=4692)
          20	LOAD_ATTR(arg=0, lineno=4692)
          22	UNARY_NEGATIVE(arg=None, lineno=4692)
          24	COMPARE_OP(arg=0, lineno=4692)
          26	POP_JUMP_IF_FALSE(arg=19, lineno=4692)
>         28	LOAD_GLOBAL(arg=1, lineno=4693)
          30	LOAD_CONST(arg=2, lineno=4693)
          32	CALL_FUNCTION(arg=1, lineno=4693)
          34	RAISE_VARARGS(arg=1, lineno=4693)
>         36	LOAD_FAST(arg=0, lineno=4694)
          38	LOAD_METHOD(arg=2, lineno=4694)
          40	CALL_METHOD(arg=0, lineno=4694)
          42	LOAD_FAST(arg=1, lineno=4694)
          44	BINARY_SUBSCR(arg=None, lineno=4694)
          46	RETURN_VALUE(arg=None, lineno=4694)
2025-01-31 15:31:40,510 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:31:40,510 - DEBUG - stack: []
2025-01-31 15:31:40,510 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:31:40,510 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=4691)
2025-01-31 15:31:40,510 - DEBUG - stack []
2025-01-31 15:31:40,510 - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=4692)
2025-01-31 15:31:40,510 - DEBUG - stack []
2025-01-31 15:31:40,510 - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=4692)
2025-01-31 15:31:40,511 - DEBUG - stack ['$indices2.0']
2025-01-31 15:31:40,511 - DEBUG - dispatch pc=6, inst=LOAD_ATTR(arg=0, lineno=4692)
2025-01-31 15:31:40,511 - DEBUG - stack ['$indices2.0', '$a4.1']
2025-01-31 15:31:40,511 - DEBUG - dispatch pc=8, inst=LOAD_CONST(arg=1, lineno=4692)
2025-01-31 15:31:40,511 - DEBUG - stack ['$indices2.0', '$6load_attr.2']
2025-01-31 15:31:40,511 - DEBUG - dispatch pc=10, inst=BINARY_SUBTRACT(arg=None, lineno=4692)
2025-01-31 15:31:40,511 - DEBUG - stack ['$indices2.0', '$6load_attr.2', '$const8.3']
2025-01-31 15:31:40,511 - DEBUG - dispatch pc=12, inst=COMPARE_OP(arg=4, lineno=4692)
2025-01-31 15:31:40,511 - DEBUG - stack ['$indices2.0', '$10binary_subtract.4']
2025-01-31 15:31:40,511 - DEBUG - dispatch pc=14, inst=POP_JUMP_IF_TRUE(arg=15, lineno=4692)
2025-01-31 15:31:40,511 - DEBUG - stack ['$12compare_op.5']
2025-01-31 15:31:40,511 - DEBUG - end state. edges=[Edge(pc=16, stack=(), blockstack=(), npush=0), Edge(pc=28, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:40,511 - DEBUG - pending: deque([State(pc_initial=16 nstack_initial=0), State(pc_initial=28 nstack_initial=0)])
2025-01-31 15:31:40,511 - DEBUG - stack: []
2025-01-31 15:31:40,511 - DEBUG - state.pc_initial: State(pc_initial=16 nstack_initial=0)
2025-01-31 15:31:40,511 - DEBUG - dispatch pc=16, inst=LOAD_FAST(arg=1, lineno=4692)
2025-01-31 15:31:40,511 - DEBUG - stack []
2025-01-31 15:31:40,511 - DEBUG - dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=4692)
2025-01-31 15:31:40,511 - DEBUG - stack ['$indices16.0']
2025-01-31 15:31:40,511 - DEBUG - dispatch pc=20, inst=LOAD_ATTR(arg=0, lineno=4692)
2025-01-31 15:31:40,511 - DEBUG - stack ['$indices16.0', '$a18.1']
2025-01-31 15:31:40,511 - DEBUG - dispatch pc=22, inst=UNARY_NEGATIVE(arg=None, lineno=4692)
2025-01-31 15:31:40,511 - DEBUG - stack ['$indices16.0', '$20load_attr.2']
2025-01-31 15:31:40,511 - DEBUG - dispatch pc=24, inst=COMPARE_OP(arg=0, lineno=4692)
2025-01-31 15:31:40,511 - DEBUG - stack ['$indices16.0', '$22unary_negative.3']
2025-01-31 15:31:40,511 - DEBUG - dispatch pc=26, inst=POP_JUMP_IF_FALSE(arg=19, lineno=4692)
2025-01-31 15:31:40,511 - DEBUG - stack ['$24compare_op.4']
2025-01-31 15:31:40,511 - DEBUG - end state. edges=[Edge(pc=28, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:40,512 - DEBUG - pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2025-01-31 15:31:40,512 - DEBUG - stack: []
2025-01-31 15:31:40,512 - DEBUG - state.pc_initial: State(pc_initial=28 nstack_initial=0)
2025-01-31 15:31:40,512 - DEBUG - dispatch pc=28, inst=LOAD_GLOBAL(arg=1, lineno=4693)
2025-01-31 15:31:40,512 - DEBUG - stack []
2025-01-31 15:31:40,512 - DEBUG - dispatch pc=30, inst=LOAD_CONST(arg=2, lineno=4693)
2025-01-31 15:31:40,512 - DEBUG - stack ['$28load_global.0']
2025-01-31 15:31:40,512 - DEBUG - dispatch pc=32, inst=CALL_FUNCTION(arg=1, lineno=4693)
2025-01-31 15:31:40,512 - DEBUG - stack ['$28load_global.0', '$const30.1']
2025-01-31 15:31:40,512 - DEBUG - dispatch pc=34, inst=RAISE_VARARGS(arg=1, lineno=4693)
2025-01-31 15:31:40,512 - DEBUG - stack ['$32call_function.2']
2025-01-31 15:31:40,512 - DEBUG - end state. edges=[]
2025-01-31 15:31:40,512 - DEBUG - pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2025-01-31 15:31:40,512 - DEBUG - pending: deque([State(pc_initial=36 nstack_initial=0)])
2025-01-31 15:31:40,512 - DEBUG - stack: []
2025-01-31 15:31:40,512 - DEBUG - state.pc_initial: State(pc_initial=36 nstack_initial=0)
2025-01-31 15:31:40,512 - DEBUG - dispatch pc=36, inst=LOAD_FAST(arg=0, lineno=4694)
2025-01-31 15:31:40,512 - DEBUG - stack []
2025-01-31 15:31:40,512 - DEBUG - dispatch pc=38, inst=LOAD_METHOD(arg=2, lineno=4694)
2025-01-31 15:31:40,512 - DEBUG - stack ['$a36.0']
2025-01-31 15:31:40,512 - DEBUG - dispatch pc=40, inst=CALL_METHOD(arg=0, lineno=4694)
2025-01-31 15:31:40,512 - DEBUG - stack ['$38load_method.1']
2025-01-31 15:31:40,512 - DEBUG - dispatch pc=42, inst=LOAD_FAST(arg=1, lineno=4694)
2025-01-31 15:31:40,512 - DEBUG - stack ['$40call_method.2']
2025-01-31 15:31:40,512 - DEBUG - dispatch pc=44, inst=BINARY_SUBSCR(arg=None, lineno=4694)
2025-01-31 15:31:40,512 - DEBUG - stack ['$40call_method.2', '$indices42.3']
2025-01-31 15:31:40,512 - DEBUG - dispatch pc=46, inst=RETURN_VALUE(arg=None, lineno=4694)
2025-01-31 15:31:40,512 - DEBUG - stack ['$44binary_subscr.4']
2025-01-31 15:31:40,513 - DEBUG - end state. edges=[]
2025-01-31 15:31:40,513 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:31:40,513 - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=16 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set()})
2025-01-31 15:31:40,513 - DEBUG - defmap: {}
2025-01-31 15:31:40,513 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:40,513 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:40,513 - DEBUG - keep phismap: {}
2025-01-31 15:31:40,513 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-01-31 15:31:40,513 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:31:40,513 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$indices2.0'}), (4, {'res': '$a4.1'}), (6, {'item': '$a4.1', 'res': '$6load_attr.2'}), (8, {'res': '$const8.3'}), (10, {'lhs': '$6load_attr.2', 'rhs': '$const8.3', 'res': '$10binary_subtract.4'}), (12, {'lhs': '$indices2.0', 'rhs': '$10binary_subtract.4', 'res': '$12compare_op.5'}), (14, {'pred': '$12compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={16: (), 28: ()})
2025-01-31 15:31:40,513 - DEBUG - block_infos State(pc_initial=16 nstack_initial=0):
AdaptBlockInfo(insts=((16, {'res': '$indices16.0'}), (18, {'res': '$a18.1'}), (20, {'item': '$a18.1', 'res': '$20load_attr.2'}), (22, {'value': '$20load_attr.2', 'res': '$22unary_negative.3'}), (24, {'lhs': '$indices16.0', 'rhs': '$22unary_negative.3', 'res': '$24compare_op.4'}), (26, {'pred': '$24compare_op.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: (), 36: ()})
2025-01-31 15:31:40,513 - DEBUG - block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$28load_global.0'}), (30, {'res': '$const30.1'}), (32, {'func': '$28load_global.0', 'args': ['$const30.1'], 'res': '$32call_function.2'}), (34, {'exc': '$32call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:40,513 - DEBUG - block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$a36.0'}), (38, {'item': '$a36.0', 'res': '$38load_method.1'}), (40, {'func': '$38load_method.1', 'args': [], 'res': '$40call_method.2'}), (42, {'res': '$indices42.3'}), (44, {'index': '$indices42.3', 'target': '$40call_method.2', 'res': '$44binary_subscr.4'}), (46, {'retval': '$44binary_subscr.4', 'castval': '$46return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:40,514 - DEBUG - label 0:
    a = arg(0, name=a)                       ['a']
    indices = arg(1, name=indices)           ['indices']
    $6load_attr.2 = getattr(value=a, attr=size) ['$6load_attr.2', 'a']
    $const8.3 = const(int, 1)                ['$const8.3']
    $10binary_subtract.4 = $6load_attr.2 - $const8.3 ['$10binary_subtract.4', '$6load_attr.2', '$const8.3']
    $12compare_op.5 = indices > $10binary_subtract.4 ['$10binary_subtract.4', '$12compare_op.5', 'indices']
    bool14 = global(bool: <class 'bool'>)    ['bool14']
    $14pred = call bool14($12compare_op.5, func=bool14, args=(Var($12compare_op.5, arrayobj.py:4692),), kws=(), vararg=None, varkwarg=None, target=None) ['$12compare_op.5', '$14pred', 'bool14']
    branch $14pred, 28, 16                   ['$14pred']
label 16:
    $20load_attr.2 = getattr(value=a, attr=size) ['$20load_attr.2', 'a']
    $22unary_negative.3 = unary(fn=<built-in function neg>, value=$20load_attr.2) ['$20load_attr.2', '$22unary_negative.3']
    $24compare_op.4 = indices < $22unary_negative.3 ['$22unary_negative.3', '$24compare_op.4', 'indices']
    bool26 = global(bool: <class 'bool'>)    ['bool26']
    $26pred = call bool26($24compare_op.4, func=bool26, args=(Var($24compare_op.4, arrayobj.py:4692),), kws=(), vararg=None, varkwarg=None, target=None) ['$24compare_op.4', '$26pred', 'bool26']
    branch $26pred, 28, 36                   ['$26pred']
label 28:
    $28load_global.0 = global(IndexError: <class 'IndexError'>) ['$28load_global.0']
    $const30.1 = const(str, Index out of bounds) ['$const30.1']
    $32call_function.2 = call $28load_global.0($const30.1, func=$28load_global.0, args=[Var($const30.1, arrayobj.py:4693)], kws=(), vararg=None, varkwarg=None, target=None) ['$28load_global.0', '$32call_function.2', '$const30.1']
    raise $32call_function.2                 ['$32call_function.2']
label 36:
    $38load_method.1 = getattr(value=a, attr=ravel) ['$38load_method.1', 'a']
    $40call_method.2 = call $38load_method.1(func=$38load_method.1, args=[], kws=(), vararg=None, varkwarg=None, target=None) ['$38load_method.1', '$40call_method.2']
    $44binary_subscr.4 = getitem(value=$40call_method.2, index=indices, fn=<built-in function getitem>) ['$40call_method.2', '$44binary_subscr.4', 'indices']
    $46return_value.5 = cast(value=$44binary_subscr.4) ['$44binary_subscr.4', '$46return_value.5']
    return $46return_value.5                 ['$46return_value.5']

2025-01-31 15:31:40,519 - DEBUG - ==== SSA block analysis pass on 0
2025-01-31 15:31:40,519 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e899e4a0>
2025-01-31 15:31:40,519 - DEBUG - on stmt: a = arg(0, name=a)
2025-01-31 15:31:40,519 - DEBUG - on stmt: indices = arg(1, name=indices)
2025-01-31 15:31:40,519 - DEBUG - on stmt: $6load_attr.2 = getattr(value=a, attr=size)
2025-01-31 15:31:40,519 - DEBUG - on stmt: $const8.3 = const(int, 1)
2025-01-31 15:31:40,519 - DEBUG - on stmt: $10binary_subtract.4 = $6load_attr.2 - $const8.3
2025-01-31 15:31:40,519 - DEBUG - on stmt: $12compare_op.5 = indices > $10binary_subtract.4
2025-01-31 15:31:40,519 - DEBUG - on stmt: bool14 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,519 - DEBUG - on stmt: $14pred = call bool14($12compare_op.5, func=bool14, args=(Var($12compare_op.5, arrayobj.py:4692),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,519 - DEBUG - on stmt: branch $14pred, 28, 16
2025-01-31 15:31:40,519 - DEBUG - ==== SSA block analysis pass on 16
2025-01-31 15:31:40,519 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e899e4a0>
2025-01-31 15:31:40,519 - DEBUG - on stmt: $20load_attr.2 = getattr(value=a, attr=size)
2025-01-31 15:31:40,519 - DEBUG - on stmt: $22unary_negative.3 = unary(fn=<built-in function neg>, value=$20load_attr.2)
2025-01-31 15:31:40,519 - DEBUG - on stmt: $24compare_op.4 = indices < $22unary_negative.3
2025-01-31 15:31:40,519 - DEBUG - on stmt: bool26 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,519 - DEBUG - on stmt: $26pred = call bool26($24compare_op.4, func=bool26, args=(Var($24compare_op.4, arrayobj.py:4692),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,519 - DEBUG - on stmt: branch $26pred, 28, 36
2025-01-31 15:31:40,520 - DEBUG - ==== SSA block analysis pass on 28
2025-01-31 15:31:40,520 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e899e4a0>
2025-01-31 15:31:40,520 - DEBUG - on stmt: $28load_global.0 = global(IndexError: <class 'IndexError'>)
2025-01-31 15:31:40,520 - DEBUG - on stmt: $const30.1 = const(str, Index out of bounds)
2025-01-31 15:31:40,520 - DEBUG - on stmt: $32call_function.2 = call $28load_global.0($const30.1, func=$28load_global.0, args=[Var($const30.1, arrayobj.py:4693)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,520 - DEBUG - on stmt: <static> raise <class 'IndexError'>('Index out of bounds')
2025-01-31 15:31:40,520 - DEBUG - ==== SSA block analysis pass on 36
2025-01-31 15:31:40,520 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e899e4a0>
2025-01-31 15:31:40,520 - DEBUG - on stmt: $38load_method.1 = getattr(value=a, attr=ravel)
2025-01-31 15:31:40,520 - DEBUG - on stmt: $40call_method.2 = call $38load_method.1(func=$38load_method.1, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,520 - DEBUG - on stmt: $44binary_subscr.4 = getitem(value=$40call_method.2, index=indices, fn=<built-in function getitem>)
2025-01-31 15:31:40,520 - DEBUG - on stmt: $46return_value.5 = cast(value=$44binary_subscr.4)
2025-01-31 15:31:40,520 - DEBUG - on stmt: return $46return_value.5
2025-01-31 15:31:40,520 - DEBUG - defs defaultdict(<class 'list'>,
            {'$10binary_subtract.4': [(<numba.core.ir.Assign object at 0x7c89e8903af0>,
                                       0)],
             '$12compare_op.5': [(<numba.core.ir.Assign object at 0x7c89e8903be0>,
                                  0)],
             '$14pred': [(<numba.core.ir.Assign object at 0x7c89e89b0400>, 0)],
             '$20load_attr.2': [(<numba.core.ir.Assign object at 0x7c89e89b0a60>,
                                 16)],
             '$22unary_negative.3': [(<numba.core.ir.Assign object at 0x7c89e89b0bb0>,
                                      16)],
             '$24compare_op.4': [(<numba.core.ir.Assign object at 0x7c89e89b0d60>,
                                  16)],
             '$26pred': [(<numba.core.ir.Assign object at 0x7c89e89b0fd0>, 16)],
             '$28load_global.0': [(<numba.core.ir.Assign object at 0x7c89e89b0df0>,
                                   28)],
             '$32call_function.2': [(<numba.core.ir.Assign object at 0x7c89e89b1510>,
                                     28)],
             '$38load_method.1': [(<numba.core.ir.Assign object at 0x7c89e89b1990>,
                                   36)],
             '$40call_method.2': [(<numba.core.ir.Assign object at 0x7c89e8903e20>,
                                   36)],
             '$44binary_subscr.4': [(<numba.core.ir.Assign object at 0x7c89e89009a0>,
                                     36)],
             '$46return_value.5': [(<numba.core.ir.Assign object at 0x7c89e899e8c0>,
                                    36)],
             '$6load_attr.2': [(<numba.core.ir.Assign object at 0x7c89e8901d80>,
                                0)],
             '$const30.1': [(<numba.core.ir.Assign object at 0x7c89e89b1330>,
                             28)],
             '$const8.3': [(<numba.core.ir.Assign object at 0x7c89e8900f10>,
                            0)],
             'a': [(<numba.core.ir.Assign object at 0x7c89e8900f70>, 0)],
             'bool14': [(<numba.core.ir.Assign object at 0x7c89e89b3f70>, 0)],
             'bool26': [(<numba.core.ir.Assign object at 0x7c89e89b0ee0>, 16)],
             'indices': [(<numba.core.ir.Assign object at 0x7c89e89003a0>, 0)]})
2025-01-31 15:31:40,520 - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x7c89e899e4a0>
2025-01-31 15:31:40,536 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=2230)
           2	LOAD_FAST(arg=0, lineno=2232)
           4	LOAD_METHOD(arg=0, lineno=2232)
           6	LOAD_FAST(arg=0, lineno=2232)
           8	LOAD_ATTR(arg=1, lineno=2232)
          10	CALL_METHOD(arg=1, lineno=2232)
          12	RETURN_VALUE(arg=None, lineno=2232)
2025-01-31 15:31:40,536 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:31:40,536 - DEBUG - stack: []
2025-01-31 15:31:40,536 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:31:40,536 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=2230)
2025-01-31 15:31:40,536 - DEBUG - stack []
2025-01-31 15:31:40,536 - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=2232)
2025-01-31 15:31:40,536 - DEBUG - stack []
2025-01-31 15:31:40,536 - DEBUG - dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=2232)
2025-01-31 15:31:40,536 - DEBUG - stack ['$ary2.0']
2025-01-31 15:31:40,536 - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=2232)
2025-01-31 15:31:40,537 - DEBUG - stack ['$4load_method.1']
2025-01-31 15:31:40,537 - DEBUG - dispatch pc=8, inst=LOAD_ATTR(arg=1, lineno=2232)
2025-01-31 15:31:40,537 - DEBUG - stack ['$4load_method.1', '$ary6.2']
2025-01-31 15:31:40,537 - DEBUG - dispatch pc=10, inst=CALL_METHOD(arg=1, lineno=2232)
2025-01-31 15:31:40,537 - DEBUG - stack ['$4load_method.1', '$8load_attr.3']
2025-01-31 15:31:40,537 - DEBUG - dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=2232)
2025-01-31 15:31:40,537 - DEBUG - stack ['$10call_method.4']
2025-01-31 15:31:40,537 - DEBUG - end state. edges=[]
2025-01-31 15:31:40,537 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:31:40,537 - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-01-31 15:31:40,537 - DEBUG - defmap: {}
2025-01-31 15:31:40,537 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:40,537 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:40,537 - DEBUG - keep phismap: {}
2025-01-31 15:31:40,537 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-01-31 15:31:40,537 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:31:40,537 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$ary2.0'}), (4, {'item': '$ary2.0', 'res': '$4load_method.1'}), (6, {'res': '$ary6.2'}), (8, {'item': '$ary6.2', 'res': '$8load_attr.3'}), (10, {'func': '$4load_method.1', 'args': ['$8load_attr.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:40,537 - DEBUG - label 0:
    ary = arg(0, name=ary)                   ['ary']
    $4load_method.1 = getattr(value=ary, attr=reshape) ['$4load_method.1', 'ary']
    $8load_attr.3 = getattr(value=ary, attr=size) ['$8load_attr.3', 'ary']
    $10call_method.4 = call $4load_method.1($8load_attr.3, func=$4load_method.1, args=[Var($8load_attr.3, arrayobj.py:2232)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_method.4', '$4load_method.1', '$8load_attr.3']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2025-01-31 15:31:40,541 - DEBUG - ==== SSA block analysis pass on 0
2025-01-31 15:31:40,541 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e890b910>
2025-01-31 15:31:40,541 - DEBUG - on stmt: ary = arg(0, name=ary)
2025-01-31 15:31:40,541 - DEBUG - on stmt: $4load_method.1 = getattr(value=ary, attr=reshape)
2025-01-31 15:31:40,541 - DEBUG - on stmt: $8load_attr.3 = getattr(value=ary, attr=size)
2025-01-31 15:31:40,541 - DEBUG - on stmt: $10call_method.4 = call $4load_method.1($8load_attr.3, func=$4load_method.1, args=[Var($8load_attr.3, arrayobj.py:2232)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,541 - DEBUG - on stmt: $12return_value.5 = cast(value=$10call_method.4)
2025-01-31 15:31:40,541 - DEBUG - on stmt: return $12return_value.5
2025-01-31 15:31:40,541 - DEBUG - defs defaultdict(<class 'list'>,
            {'$10call_method.4': [(<numba.core.ir.Assign object at 0x7c89e890ece0>,
                                   0)],
             '$12return_value.5': [(<numba.core.ir.Assign object at 0x7c89e89085e0>,
                                    0)],
             '$4load_method.1': [(<numba.core.ir.Assign object at 0x7c89e890f790>,
                                  0)],
             '$8load_attr.3': [(<numba.core.ir.Assign object at 0x7c89e890f610>,
                                0)],
             'ary': [(<numba.core.ir.Assign object at 0x7c89e890ca00>, 0)]})
2025-01-31 15:31:40,541 - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x7c89e890b910>
2025-01-31 15:31:40,548 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=2046)
           2	LOAD_CONST(arg=1, lineno=2047)
           4	STORE_FAST(arg=2, lineno=2047)
           6	LOAD_CONST(arg=2, lineno=2048)
           8	STORE_FAST(arg=3, lineno=2048)
          10	LOAD_GLOBAL(arg=0, lineno=2049)
          12	LOAD_FAST(arg=1, lineno=2049)
          14	CALL_FUNCTION(arg=1, lineno=2049)
          16	GET_ITER(arg=None, lineno=2049)
>         18	FOR_ITER(arg=19, lineno=2049)
          20	UNPACK_SEQUENCE(arg=2, lineno=2049)
          22	STORE_FAST(arg=4, lineno=2049)
          24	STORE_FAST(arg=5, lineno=2049)
          26	LOAD_FAST(arg=5, lineno=2050)
          28	LOAD_CONST(arg=1, lineno=2050)
          30	COMPARE_OP(arg=0, lineno=2050)
          32	POP_JUMP_IF_FALSE(arg=25, lineno=2050)
          34	LOAD_FAST(arg=2, lineno=2051)
          36	LOAD_CONST(arg=2, lineno=2051)
          38	INPLACE_ADD(arg=None, lineno=2051)
          40	STORE_FAST(arg=2, lineno=2051)
          42	LOAD_FAST(arg=4, lineno=2052)
          44	STORE_FAST(arg=6, lineno=2052)
          46	JUMP_ABSOLUTE(arg=10, lineno=2052)
>         48	LOAD_FAST(arg=3, lineno=2054)
          50	LOAD_FAST(arg=5, lineno=2054)
          52	INPLACE_MULTIPLY(arg=None, lineno=2054)
          54	STORE_FAST(arg=3, lineno=2054)
          56	JUMP_ABSOLUTE(arg=10, lineno=2054)
>         58	LOAD_FAST(arg=2, lineno=2056)
          60	LOAD_CONST(arg=1, lineno=2056)
          62	COMPARE_OP(arg=2, lineno=2056)
          64	POP_JUMP_IF_FALSE(arg=44, lineno=2056)
          66	LOAD_FAST(arg=0, lineno=2057)
          68	LOAD_FAST(arg=3, lineno=2057)
          70	COMPARE_OP(arg=3, lineno=2057)
          72	POP_JUMP_IF_FALSE(arg=42, lineno=2057)
          74	LOAD_GLOBAL(arg=1, lineno=2058)
          76	LOAD_CONST(arg=3, lineno=2058)
          78	CALL_FUNCTION(arg=1, lineno=2058)
          80	RAISE_VARARGS(arg=1, lineno=2058)
>         82	LOAD_CONST(arg=0, lineno=2057)
          84	RETURN_VALUE(arg=None, lineno=2057)
>         86	LOAD_FAST(arg=2, lineno=2060)
          88	LOAD_CONST(arg=2, lineno=2060)
          90	COMPARE_OP(arg=2, lineno=2060)
          92	POP_JUMP_IF_FALSE(arg=81, lineno=2060)
          94	LOAD_FAST(arg=3, lineno=2062)
          96	LOAD_CONST(arg=1, lineno=2062)
          98	COMPARE_OP(arg=2, lineno=2062)
         100	POP_JUMP_IF_FALSE(arg=59, lineno=2062)
         102	LOAD_CONST(arg=1, lineno=2063)
         104	STORE_FAST(arg=7, lineno=2063)
         106	LOAD_FAST(arg=0, lineno=2064)
         108	LOAD_CONST(arg=1, lineno=2064)
         110	COMPARE_OP(arg=2, lineno=2064)
         112	STORE_FAST(arg=8, lineno=2064)
         114	JUMP_FORWARD(arg=10, lineno=2064)
>        116	LOAD_FAST(arg=0, lineno=2066)
         118	LOAD_FAST(arg=3, lineno=2066)
         120	BINARY_FLOOR_DIVIDE(arg=None, lineno=2066)
         122	STORE_FAST(arg=7, lineno=2066)
         124	LOAD_FAST(arg=0, lineno=2067)
         126	LOAD_FAST(arg=3, lineno=2067)
         128	BINARY_MODULO(arg=None, lineno=2067)
         130	LOAD_CONST(arg=1, lineno=2067)
         132	COMPARE_OP(arg=2, lineno=2067)
         134	STORE_FAST(arg=8, lineno=2067)
>        136	LOAD_FAST(arg=8, lineno=2068)
         138	POP_JUMP_IF_TRUE(arg=75, lineno=2068)
         140	LOAD_GLOBAL(arg=1, lineno=2069)
         142	LOAD_CONST(arg=3, lineno=2069)
         144	CALL_FUNCTION(arg=1, lineno=2069)
         146	RAISE_VARARGS(arg=1, lineno=2069)
>        148	LOAD_FAST(arg=7, lineno=2070)
         150	LOAD_FAST(arg=1, lineno=2070)
         152	LOAD_FAST(arg=6, lineno=2070)
         154	STORE_SUBSCR(arg=None, lineno=2070)
         156	LOAD_CONST(arg=0, lineno=2070)
         158	RETURN_VALUE(arg=None, lineno=2070)
>        160	LOAD_GLOBAL(arg=1, lineno=2073)
         162	LOAD_CONST(arg=4, lineno=2073)
         164	CALL_FUNCTION(arg=1, lineno=2073)
         166	RAISE_VARARGS(arg=1, lineno=2073)
2025-01-31 15:31:40,548 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:31:40,548 - DEBUG - stack: []
2025-01-31 15:31:40,548 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:31:40,548 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=2046)
2025-01-31 15:31:40,548 - DEBUG - stack []
2025-01-31 15:31:40,548 - DEBUG - dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=2047)
2025-01-31 15:31:40,548 - DEBUG - stack []
2025-01-31 15:31:40,549 - DEBUG - dispatch pc=4, inst=STORE_FAST(arg=2, lineno=2047)
2025-01-31 15:31:40,549 - DEBUG - stack ['$const2.0']
2025-01-31 15:31:40,549 - DEBUG - dispatch pc=6, inst=LOAD_CONST(arg=2, lineno=2048)
2025-01-31 15:31:40,549 - DEBUG - stack []
2025-01-31 15:31:40,549 - DEBUG - dispatch pc=8, inst=STORE_FAST(arg=3, lineno=2048)
2025-01-31 15:31:40,549 - DEBUG - stack ['$const6.1']
2025-01-31 15:31:40,549 - DEBUG - dispatch pc=10, inst=LOAD_GLOBAL(arg=0, lineno=2049)
2025-01-31 15:31:40,549 - DEBUG - stack []
2025-01-31 15:31:40,549 - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=2049)
2025-01-31 15:31:40,549 - DEBUG - stack ['$10load_global.2']
2025-01-31 15:31:40,549 - DEBUG - dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=2049)
2025-01-31 15:31:40,549 - DEBUG - stack ['$10load_global.2', '$shape12.3']
2025-01-31 15:31:40,549 - DEBUG - dispatch pc=16, inst=GET_ITER(arg=None, lineno=2049)
2025-01-31 15:31:40,549 - DEBUG - stack ['$14call_function.4']
2025-01-31 15:31:40,549 - DEBUG - end state. edges=[Edge(pc=18, stack=('$16get_iter.5',), blockstack=(), npush=0)]
2025-01-31 15:31:40,549 - DEBUG - pending: deque([State(pc_initial=18 nstack_initial=1)])
2025-01-31 15:31:40,549 - DEBUG - stack: ['$phi18.0']
2025-01-31 15:31:40,549 - DEBUG - state.pc_initial: State(pc_initial=18 nstack_initial=1)
2025-01-31 15:31:40,549 - DEBUG - dispatch pc=18, inst=FOR_ITER(arg=19, lineno=2049)
2025-01-31 15:31:40,549 - DEBUG - stack ['$phi18.0']
2025-01-31 15:31:40,549 - DEBUG - end state. edges=[Edge(pc=58, stack=(), blockstack=(), npush=0), Edge(pc=20, stack=('$phi18.0', '$18for_iter.2'), blockstack=(), npush=0)]
2025-01-31 15:31:40,549 - DEBUG - pending: deque([State(pc_initial=58 nstack_initial=0), State(pc_initial=20 nstack_initial=2)])
2025-01-31 15:31:40,549 - DEBUG - stack: []
2025-01-31 15:31:40,549 - DEBUG - state.pc_initial: State(pc_initial=58 nstack_initial=0)
2025-01-31 15:31:40,549 - DEBUG - dispatch pc=58, inst=LOAD_FAST(arg=2, lineno=2056)
2025-01-31 15:31:40,549 - DEBUG - stack []
2025-01-31 15:31:40,549 - DEBUG - dispatch pc=60, inst=LOAD_CONST(arg=1, lineno=2056)
2025-01-31 15:31:40,549 - DEBUG - stack ['$num_neg_value58.0']
2025-01-31 15:31:40,550 - DEBUG - dispatch pc=62, inst=COMPARE_OP(arg=2, lineno=2056)
2025-01-31 15:31:40,550 - DEBUG - stack ['$num_neg_value58.0', '$const60.1']
2025-01-31 15:31:40,550 - DEBUG - dispatch pc=64, inst=POP_JUMP_IF_FALSE(arg=44, lineno=2056)
2025-01-31 15:31:40,550 - DEBUG - stack ['$62compare_op.2']
2025-01-31 15:31:40,550 - DEBUG - end state. edges=[Edge(pc=66, stack=(), blockstack=(), npush=0), Edge(pc=86, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:40,550 - DEBUG - pending: deque([State(pc_initial=20 nstack_initial=2), State(pc_initial=66 nstack_initial=0), State(pc_initial=86 nstack_initial=0)])
2025-01-31 15:31:40,550 - DEBUG - stack: ['$phi20.0', '$phi20.1']
2025-01-31 15:31:40,550 - DEBUG - state.pc_initial: State(pc_initial=20 nstack_initial=2)
2025-01-31 15:31:40,550 - DEBUG - dispatch pc=20, inst=UNPACK_SEQUENCE(arg=2, lineno=2049)
2025-01-31 15:31:40,550 - DEBUG - stack ['$phi20.0', '$phi20.1']
2025-01-31 15:31:40,550 - DEBUG - dispatch pc=22, inst=STORE_FAST(arg=4, lineno=2049)
2025-01-31 15:31:40,550 - DEBUG - stack ['$phi20.0', '$20unpack_sequence.3', '$20unpack_sequence.2']
2025-01-31 15:31:40,550 - DEBUG - dispatch pc=24, inst=STORE_FAST(arg=5, lineno=2049)
2025-01-31 15:31:40,550 - DEBUG - stack ['$phi20.0', '$20unpack_sequence.3']
2025-01-31 15:31:40,550 - DEBUG - dispatch pc=26, inst=LOAD_FAST(arg=5, lineno=2050)
2025-01-31 15:31:40,550 - DEBUG - stack ['$phi20.0']
2025-01-31 15:31:40,550 - DEBUG - dispatch pc=28, inst=LOAD_CONST(arg=1, lineno=2050)
2025-01-31 15:31:40,550 - DEBUG - stack ['$phi20.0', '$s26.5']
2025-01-31 15:31:40,550 - DEBUG - dispatch pc=30, inst=COMPARE_OP(arg=0, lineno=2050)
2025-01-31 15:31:40,550 - DEBUG - stack ['$phi20.0', '$s26.5', '$const28.6']
2025-01-31 15:31:40,550 - DEBUG - dispatch pc=32, inst=POP_JUMP_IF_FALSE(arg=25, lineno=2050)
2025-01-31 15:31:40,550 - DEBUG - stack ['$phi20.0', '$30compare_op.7']
2025-01-31 15:31:40,550 - DEBUG - end state. edges=[Edge(pc=34, stack=('$phi20.0',), blockstack=(), npush=0), Edge(pc=48, stack=('$phi20.0',), blockstack=(), npush=0)]
2025-01-31 15:31:40,550 - DEBUG - pending: deque([State(pc_initial=66 nstack_initial=0), State(pc_initial=86 nstack_initial=0), State(pc_initial=34 nstack_initial=1), State(pc_initial=48 nstack_initial=1)])
2025-01-31 15:31:40,550 - DEBUG - stack: []
2025-01-31 15:31:40,550 - DEBUG - state.pc_initial: State(pc_initial=66 nstack_initial=0)
2025-01-31 15:31:40,550 - DEBUG - dispatch pc=66, inst=LOAD_FAST(arg=0, lineno=2057)
2025-01-31 15:31:40,551 - DEBUG - stack []
2025-01-31 15:31:40,551 - DEBUG - dispatch pc=68, inst=LOAD_FAST(arg=3, lineno=2057)
2025-01-31 15:31:40,551 - DEBUG - stack ['$origsize66.0']
2025-01-31 15:31:40,551 - DEBUG - dispatch pc=70, inst=COMPARE_OP(arg=3, lineno=2057)
2025-01-31 15:31:40,551 - DEBUG - stack ['$origsize66.0', '$known_size68.1']
2025-01-31 15:31:40,551 - DEBUG - dispatch pc=72, inst=POP_JUMP_IF_FALSE(arg=42, lineno=2057)
2025-01-31 15:31:40,551 - DEBUG - stack ['$70compare_op.2']
2025-01-31 15:31:40,551 - DEBUG - end state. edges=[Edge(pc=74, stack=(), blockstack=(), npush=0), Edge(pc=82, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:40,551 - DEBUG - pending: deque([State(pc_initial=86 nstack_initial=0), State(pc_initial=34 nstack_initial=1), State(pc_initial=48 nstack_initial=1), State(pc_initial=74 nstack_initial=0), State(pc_initial=82 nstack_initial=0)])
2025-01-31 15:31:40,551 - DEBUG - stack: []
2025-01-31 15:31:40,551 - DEBUG - state.pc_initial: State(pc_initial=86 nstack_initial=0)
2025-01-31 15:31:40,551 - DEBUG - dispatch pc=86, inst=LOAD_FAST(arg=2, lineno=2060)
2025-01-31 15:31:40,551 - DEBUG - stack []
2025-01-31 15:31:40,551 - DEBUG - dispatch pc=88, inst=LOAD_CONST(arg=2, lineno=2060)
2025-01-31 15:31:40,551 - DEBUG - stack ['$num_neg_value86.0']
2025-01-31 15:31:40,551 - DEBUG - dispatch pc=90, inst=COMPARE_OP(arg=2, lineno=2060)
2025-01-31 15:31:40,551 - DEBUG - stack ['$num_neg_value86.0', '$const88.1']
2025-01-31 15:31:40,551 - DEBUG - dispatch pc=92, inst=POP_JUMP_IF_FALSE(arg=81, lineno=2060)
2025-01-31 15:31:40,551 - DEBUG - stack ['$90compare_op.2']
2025-01-31 15:31:40,551 - DEBUG - end state. edges=[Edge(pc=94, stack=(), blockstack=(), npush=0), Edge(pc=160, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:40,551 - DEBUG - pending: deque([State(pc_initial=34 nstack_initial=1), State(pc_initial=48 nstack_initial=1), State(pc_initial=74 nstack_initial=0), State(pc_initial=82 nstack_initial=0), State(pc_initial=94 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
2025-01-31 15:31:40,551 - DEBUG - stack: ['$phi34.0']
2025-01-31 15:31:40,551 - DEBUG - state.pc_initial: State(pc_initial=34 nstack_initial=1)
2025-01-31 15:31:40,551 - DEBUG - dispatch pc=34, inst=LOAD_FAST(arg=2, lineno=2051)
2025-01-31 15:31:40,551 - DEBUG - stack ['$phi34.0']
2025-01-31 15:31:40,551 - DEBUG - dispatch pc=36, inst=LOAD_CONST(arg=2, lineno=2051)
2025-01-31 15:31:40,551 - DEBUG - stack ['$phi34.0', '$num_neg_value34.1']
2025-01-31 15:31:40,551 - DEBUG - dispatch pc=38, inst=INPLACE_ADD(arg=None, lineno=2051)
2025-01-31 15:31:40,551 - DEBUG - stack ['$phi34.0', '$num_neg_value34.1', '$const36.2']
2025-01-31 15:31:40,552 - DEBUG - dispatch pc=40, inst=STORE_FAST(arg=2, lineno=2051)
2025-01-31 15:31:40,552 - DEBUG - stack ['$phi34.0', '$38inplace_add.3']
2025-01-31 15:31:40,552 - DEBUG - dispatch pc=42, inst=LOAD_FAST(arg=4, lineno=2052)
2025-01-31 15:31:40,552 - DEBUG - stack ['$phi34.0']
2025-01-31 15:31:40,552 - DEBUG - dispatch pc=44, inst=STORE_FAST(arg=6, lineno=2052)
2025-01-31 15:31:40,552 - DEBUG - stack ['$phi34.0', '$ax42.4']
2025-01-31 15:31:40,552 - DEBUG - dispatch pc=46, inst=JUMP_ABSOLUTE(arg=10, lineno=2052)
2025-01-31 15:31:40,552 - DEBUG - stack ['$phi34.0']
2025-01-31 15:31:40,552 - DEBUG - end state. edges=[Edge(pc=18, stack=('$phi34.0',), blockstack=(), npush=0)]
2025-01-31 15:31:40,552 - DEBUG - pending: deque([State(pc_initial=48 nstack_initial=1), State(pc_initial=74 nstack_initial=0), State(pc_initial=82 nstack_initial=0), State(pc_initial=94 nstack_initial=0), State(pc_initial=160 nstack_initial=0), State(pc_initial=18 nstack_initial=1)])
2025-01-31 15:31:40,552 - DEBUG - stack: ['$phi48.0']
2025-01-31 15:31:40,552 - DEBUG - state.pc_initial: State(pc_initial=48 nstack_initial=1)
2025-01-31 15:31:40,552 - DEBUG - dispatch pc=48, inst=LOAD_FAST(arg=3, lineno=2054)
2025-01-31 15:31:40,552 - DEBUG - stack ['$phi48.0']
2025-01-31 15:31:40,552 - DEBUG - dispatch pc=50, inst=LOAD_FAST(arg=5, lineno=2054)
2025-01-31 15:31:40,552 - DEBUG - stack ['$phi48.0', '$known_size48.1']
2025-01-31 15:31:40,552 - DEBUG - dispatch pc=52, inst=INPLACE_MULTIPLY(arg=None, lineno=2054)
2025-01-31 15:31:40,552 - DEBUG - stack ['$phi48.0', '$known_size48.1', '$s50.2']
2025-01-31 15:31:40,552 - DEBUG - dispatch pc=54, inst=STORE_FAST(arg=3, lineno=2054)
2025-01-31 15:31:40,552 - DEBUG - stack ['$phi48.0', '$52inplace_multiply.3']
2025-01-31 15:31:40,552 - DEBUG - dispatch pc=56, inst=JUMP_ABSOLUTE(arg=10, lineno=2054)
2025-01-31 15:31:40,552 - DEBUG - stack ['$phi48.0']
2025-01-31 15:31:40,552 - DEBUG - end state. edges=[Edge(pc=18, stack=('$phi48.0',), blockstack=(), npush=0)]
2025-01-31 15:31:40,552 - DEBUG - pending: deque([State(pc_initial=74 nstack_initial=0), State(pc_initial=82 nstack_initial=0), State(pc_initial=94 nstack_initial=0), State(pc_initial=160 nstack_initial=0), State(pc_initial=18 nstack_initial=1), State(pc_initial=18 nstack_initial=1)])
2025-01-31 15:31:40,552 - DEBUG - stack: []
2025-01-31 15:31:40,552 - DEBUG - state.pc_initial: State(pc_initial=74 nstack_initial=0)
2025-01-31 15:31:40,552 - DEBUG - dispatch pc=74, inst=LOAD_GLOBAL(arg=1, lineno=2058)
2025-01-31 15:31:40,552 - DEBUG - stack []
2025-01-31 15:31:40,553 - DEBUG - dispatch pc=76, inst=LOAD_CONST(arg=3, lineno=2058)
2025-01-31 15:31:40,553 - DEBUG - stack ['$74load_global.0']
2025-01-31 15:31:40,553 - DEBUG - dispatch pc=78, inst=CALL_FUNCTION(arg=1, lineno=2058)
2025-01-31 15:31:40,553 - DEBUG - stack ['$74load_global.0', '$const76.1']
2025-01-31 15:31:40,553 - DEBUG - dispatch pc=80, inst=RAISE_VARARGS(arg=1, lineno=2058)
2025-01-31 15:31:40,553 - DEBUG - stack ['$78call_function.2']
2025-01-31 15:31:40,553 - DEBUG - end state. edges=[]
2025-01-31 15:31:40,553 - DEBUG - pending: deque([State(pc_initial=82 nstack_initial=0), State(pc_initial=94 nstack_initial=0), State(pc_initial=160 nstack_initial=0), State(pc_initial=18 nstack_initial=1), State(pc_initial=18 nstack_initial=1)])
2025-01-31 15:31:40,553 - DEBUG - stack: []
2025-01-31 15:31:40,553 - DEBUG - state.pc_initial: State(pc_initial=82 nstack_initial=0)
2025-01-31 15:31:40,553 - DEBUG - dispatch pc=82, inst=LOAD_CONST(arg=0, lineno=2057)
2025-01-31 15:31:40,553 - DEBUG - stack []
2025-01-31 15:31:40,553 - DEBUG - dispatch pc=84, inst=RETURN_VALUE(arg=None, lineno=2057)
2025-01-31 15:31:40,553 - DEBUG - stack ['$const82.0']
2025-01-31 15:31:40,553 - DEBUG - end state. edges=[]
2025-01-31 15:31:40,553 - DEBUG - pending: deque([State(pc_initial=94 nstack_initial=0), State(pc_initial=160 nstack_initial=0), State(pc_initial=18 nstack_initial=1), State(pc_initial=18 nstack_initial=1)])
2025-01-31 15:31:40,553 - DEBUG - stack: []
2025-01-31 15:31:40,553 - DEBUG - state.pc_initial: State(pc_initial=94 nstack_initial=0)
2025-01-31 15:31:40,553 - DEBUG - dispatch pc=94, inst=LOAD_FAST(arg=3, lineno=2062)
2025-01-31 15:31:40,553 - DEBUG - stack []
2025-01-31 15:31:40,553 - DEBUG - dispatch pc=96, inst=LOAD_CONST(arg=1, lineno=2062)
2025-01-31 15:31:40,553 - DEBUG - stack ['$known_size94.0']
2025-01-31 15:31:40,553 - DEBUG - dispatch pc=98, inst=COMPARE_OP(arg=2, lineno=2062)
2025-01-31 15:31:40,553 - DEBUG - stack ['$known_size94.0', '$const96.1']
2025-01-31 15:31:40,553 - DEBUG - dispatch pc=100, inst=POP_JUMP_IF_FALSE(arg=59, lineno=2062)
2025-01-31 15:31:40,553 - DEBUG - stack ['$98compare_op.2']
2025-01-31 15:31:40,553 - DEBUG - end state. edges=[Edge(pc=102, stack=(), blockstack=(), npush=0), Edge(pc=116, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:40,553 - DEBUG - pending: deque([State(pc_initial=160 nstack_initial=0), State(pc_initial=18 nstack_initial=1), State(pc_initial=18 nstack_initial=1), State(pc_initial=102 nstack_initial=0), State(pc_initial=116 nstack_initial=0)])
2025-01-31 15:31:40,554 - DEBUG - stack: []
2025-01-31 15:31:40,554 - DEBUG - state.pc_initial: State(pc_initial=160 nstack_initial=0)
2025-01-31 15:31:40,554 - DEBUG - dispatch pc=160, inst=LOAD_GLOBAL(arg=1, lineno=2073)
2025-01-31 15:31:40,554 - DEBUG - stack []
2025-01-31 15:31:40,554 - DEBUG - dispatch pc=162, inst=LOAD_CONST(arg=4, lineno=2073)
2025-01-31 15:31:40,554 - DEBUG - stack ['$160load_global.0']
2025-01-31 15:31:40,554 - DEBUG - dispatch pc=164, inst=CALL_FUNCTION(arg=1, lineno=2073)
2025-01-31 15:31:40,554 - DEBUG - stack ['$160load_global.0', '$const162.1']
2025-01-31 15:31:40,554 - DEBUG - dispatch pc=166, inst=RAISE_VARARGS(arg=1, lineno=2073)
2025-01-31 15:31:40,554 - DEBUG - stack ['$164call_function.2']
2025-01-31 15:31:40,554 - DEBUG - end state. edges=[]
2025-01-31 15:31:40,554 - DEBUG - pending: deque([State(pc_initial=18 nstack_initial=1), State(pc_initial=18 nstack_initial=1), State(pc_initial=102 nstack_initial=0), State(pc_initial=116 nstack_initial=0)])
2025-01-31 15:31:40,554 - DEBUG - pending: deque([State(pc_initial=18 nstack_initial=1), State(pc_initial=102 nstack_initial=0), State(pc_initial=116 nstack_initial=0)])
2025-01-31 15:31:40,554 - DEBUG - pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=116 nstack_initial=0)])
2025-01-31 15:31:40,554 - DEBUG - stack: []
2025-01-31 15:31:40,554 - DEBUG - state.pc_initial: State(pc_initial=102 nstack_initial=0)
2025-01-31 15:31:40,554 - DEBUG - dispatch pc=102, inst=LOAD_CONST(arg=1, lineno=2063)
2025-01-31 15:31:40,554 - DEBUG - stack []
2025-01-31 15:31:40,554 - DEBUG - dispatch pc=104, inst=STORE_FAST(arg=7, lineno=2063)
2025-01-31 15:31:40,554 - DEBUG - stack ['$const102.0']
2025-01-31 15:31:40,554 - DEBUG - dispatch pc=106, inst=LOAD_FAST(arg=0, lineno=2064)
2025-01-31 15:31:40,554 - DEBUG - stack []
2025-01-31 15:31:40,554 - DEBUG - dispatch pc=108, inst=LOAD_CONST(arg=1, lineno=2064)
2025-01-31 15:31:40,554 - DEBUG - stack ['$origsize106.1']
2025-01-31 15:31:40,554 - DEBUG - dispatch pc=110, inst=COMPARE_OP(arg=2, lineno=2064)
2025-01-31 15:31:40,554 - DEBUG - stack ['$origsize106.1', '$const108.2']
2025-01-31 15:31:40,554 - DEBUG - dispatch pc=112, inst=STORE_FAST(arg=8, lineno=2064)
2025-01-31 15:31:40,554 - DEBUG - stack ['$110compare_op.3']
2025-01-31 15:31:40,554 - DEBUG - dispatch pc=114, inst=JUMP_FORWARD(arg=10, lineno=2064)
2025-01-31 15:31:40,554 - DEBUG - stack []
2025-01-31 15:31:40,555 - DEBUG - end state. edges=[Edge(pc=136, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:40,555 - DEBUG - pending: deque([State(pc_initial=116 nstack_initial=0), State(pc_initial=136 nstack_initial=0)])
2025-01-31 15:31:40,555 - DEBUG - stack: []
2025-01-31 15:31:40,555 - DEBUG - state.pc_initial: State(pc_initial=116 nstack_initial=0)
2025-01-31 15:31:40,555 - DEBUG - dispatch pc=116, inst=LOAD_FAST(arg=0, lineno=2066)
2025-01-31 15:31:40,555 - DEBUG - stack []
2025-01-31 15:31:40,555 - DEBUG - dispatch pc=118, inst=LOAD_FAST(arg=3, lineno=2066)
2025-01-31 15:31:40,555 - DEBUG - stack ['$origsize116.0']
2025-01-31 15:31:40,555 - DEBUG - dispatch pc=120, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=2066)
2025-01-31 15:31:40,555 - DEBUG - stack ['$origsize116.0', '$known_size118.1']
2025-01-31 15:31:40,555 - DEBUG - dispatch pc=122, inst=STORE_FAST(arg=7, lineno=2066)
2025-01-31 15:31:40,555 - DEBUG - stack ['$120binary_floor_divide.2']
2025-01-31 15:31:40,555 - DEBUG - dispatch pc=124, inst=LOAD_FAST(arg=0, lineno=2067)
2025-01-31 15:31:40,555 - DEBUG - stack []
2025-01-31 15:31:40,555 - DEBUG - dispatch pc=126, inst=LOAD_FAST(arg=3, lineno=2067)
2025-01-31 15:31:40,555 - DEBUG - stack ['$origsize124.3']
2025-01-31 15:31:40,555 - DEBUG - dispatch pc=128, inst=BINARY_MODULO(arg=None, lineno=2067)
2025-01-31 15:31:40,555 - DEBUG - stack ['$origsize124.3', '$known_size126.4']
2025-01-31 15:31:40,555 - DEBUG - dispatch pc=130, inst=LOAD_CONST(arg=1, lineno=2067)
2025-01-31 15:31:40,555 - DEBUG - stack ['$128binary_modulo.5']
2025-01-31 15:31:40,555 - DEBUG - dispatch pc=132, inst=COMPARE_OP(arg=2, lineno=2067)
2025-01-31 15:31:40,555 - DEBUG - stack ['$128binary_modulo.5', '$const130.6']
2025-01-31 15:31:40,555 - DEBUG - dispatch pc=134, inst=STORE_FAST(arg=8, lineno=2067)
2025-01-31 15:31:40,555 - DEBUG - stack ['$132compare_op.7']
2025-01-31 15:31:40,555 - DEBUG - end state. edges=[Edge(pc=136, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:40,555 - DEBUG - pending: deque([State(pc_initial=136 nstack_initial=0), State(pc_initial=136 nstack_initial=0)])
2025-01-31 15:31:40,555 - DEBUG - stack: []
2025-01-31 15:31:40,555 - DEBUG - state.pc_initial: State(pc_initial=136 nstack_initial=0)
2025-01-31 15:31:40,555 - DEBUG - dispatch pc=136, inst=LOAD_FAST(arg=8, lineno=2068)
2025-01-31 15:31:40,556 - DEBUG - stack []
2025-01-31 15:31:40,556 - DEBUG - dispatch pc=138, inst=POP_JUMP_IF_TRUE(arg=75, lineno=2068)
2025-01-31 15:31:40,556 - DEBUG - stack ['$ok136.0']
2025-01-31 15:31:40,556 - DEBUG - end state. edges=[Edge(pc=140, stack=(), blockstack=(), npush=0), Edge(pc=148, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:40,556 - DEBUG - pending: deque([State(pc_initial=136 nstack_initial=0), State(pc_initial=140 nstack_initial=0), State(pc_initial=148 nstack_initial=0)])
2025-01-31 15:31:40,556 - DEBUG - pending: deque([State(pc_initial=140 nstack_initial=0), State(pc_initial=148 nstack_initial=0)])
2025-01-31 15:31:40,556 - DEBUG - stack: []
2025-01-31 15:31:40,556 - DEBUG - state.pc_initial: State(pc_initial=140 nstack_initial=0)
2025-01-31 15:31:40,556 - DEBUG - dispatch pc=140, inst=LOAD_GLOBAL(arg=1, lineno=2069)
2025-01-31 15:31:40,556 - DEBUG - stack []
2025-01-31 15:31:40,556 - DEBUG - dispatch pc=142, inst=LOAD_CONST(arg=3, lineno=2069)
2025-01-31 15:31:40,556 - DEBUG - stack ['$140load_global.0']
2025-01-31 15:31:40,556 - DEBUG - dispatch pc=144, inst=CALL_FUNCTION(arg=1, lineno=2069)
2025-01-31 15:31:40,556 - DEBUG - stack ['$140load_global.0', '$const142.1']
2025-01-31 15:31:40,556 - DEBUG - dispatch pc=146, inst=RAISE_VARARGS(arg=1, lineno=2069)
2025-01-31 15:31:40,556 - DEBUG - stack ['$144call_function.2']
2025-01-31 15:31:40,556 - DEBUG - end state. edges=[]
2025-01-31 15:31:40,556 - DEBUG - pending: deque([State(pc_initial=148 nstack_initial=0)])
2025-01-31 15:31:40,556 - DEBUG - stack: []
2025-01-31 15:31:40,556 - DEBUG - state.pc_initial: State(pc_initial=148 nstack_initial=0)
2025-01-31 15:31:40,556 - DEBUG - dispatch pc=148, inst=LOAD_FAST(arg=7, lineno=2070)
2025-01-31 15:31:40,556 - DEBUG - stack []
2025-01-31 15:31:40,556 - DEBUG - dispatch pc=150, inst=LOAD_FAST(arg=1, lineno=2070)
2025-01-31 15:31:40,556 - DEBUG - stack ['$inferred148.0']
2025-01-31 15:31:40,556 - DEBUG - dispatch pc=152, inst=LOAD_FAST(arg=6, lineno=2070)
2025-01-31 15:31:40,556 - DEBUG - stack ['$inferred148.0', '$shape150.1']
2025-01-31 15:31:40,556 - DEBUG - dispatch pc=154, inst=STORE_SUBSCR(arg=None, lineno=2070)
2025-01-31 15:31:40,556 - DEBUG - stack ['$inferred148.0', '$shape150.1', '$neg_ax152.2']
2025-01-31 15:31:40,556 - DEBUG - dispatch pc=156, inst=LOAD_CONST(arg=0, lineno=2070)
2025-01-31 15:31:40,556 - DEBUG - stack []
2025-01-31 15:31:40,557 - DEBUG - dispatch pc=158, inst=RETURN_VALUE(arg=None, lineno=2070)
2025-01-31 15:31:40,557 - DEBUG - stack ['$const156.3']
2025-01-31 15:31:40,557 - DEBUG - end state. edges=[]
2025-01-31 15:31:40,557 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:31:40,557 - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=18 nstack_initial=1): {'$phi18.0'},
             State(pc_initial=20 nstack_initial=2): {'$phi20.1'},
             State(pc_initial=34 nstack_initial=1): set(),
             State(pc_initial=48 nstack_initial=1): set(),
             State(pc_initial=58 nstack_initial=0): set(),
             State(pc_initial=66 nstack_initial=0): set(),
             State(pc_initial=74 nstack_initial=0): set(),
             State(pc_initial=82 nstack_initial=0): set(),
             State(pc_initial=86 nstack_initial=0): set(),
             State(pc_initial=94 nstack_initial=0): set(),
             State(pc_initial=102 nstack_initial=0): set(),
             State(pc_initial=116 nstack_initial=0): set(),
             State(pc_initial=136 nstack_initial=0): set(),
             State(pc_initial=140 nstack_initial=0): set(),
             State(pc_initial=148 nstack_initial=0): set(),
             State(pc_initial=160 nstack_initial=0): set()})
2025-01-31 15:31:40,557 - DEBUG - defmap: {'$phi18.0': State(pc_initial=0 nstack_initial=0),
 '$phi20.1': State(pc_initial=18 nstack_initial=1)}
2025-01-31 15:31:40,557 - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi34.0', State(pc_initial=34 nstack_initial=1)),
                          ('$phi48.0', State(pc_initial=48 nstack_initial=1))},
             '$phi20.0': {('$phi18.0', State(pc_initial=18 nstack_initial=1))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))},
             '$phi34.0': {('$phi20.0', State(pc_initial=20 nstack_initial=2))},
             '$phi48.0': {('$phi20.0', State(pc_initial=20 nstack_initial=2))}})
2025-01-31 15:31:40,557 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi20.0', State(pc_initial=20 nstack_initial=2))},
             '$phi20.0': {('$16get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi20.0', State(pc_initial=20 nstack_initial=2))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))},
             '$phi34.0': {('$16get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.0': {('$16get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
2025-01-31 15:31:40,558 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.0': {('$16get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))},
             '$phi34.0': {('$16get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.0': {('$16get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
2025-01-31 15:31:40,558 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.0': {('$16get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))},
             '$phi34.0': {('$16get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi48.0': {('$16get_iter.5',
                           State(pc_initial=0 nstack_initial=0))}})
2025-01-31 15:31:40,558 - DEBUG - keep phismap: {'$phi18.0': {('$16get_iter.5', State(pc_initial=0 nstack_initial=0))},
 '$phi20.1': {('$18for_iter.2', State(pc_initial=18 nstack_initial=1))}}
2025-01-31 15:31:40,558 - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi18.0': '$16get_iter.5'},
             State(pc_initial=18 nstack_initial=1): {'$phi20.1': '$18for_iter.2'}})
2025-01-31 15:31:40,558 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:31:40,558 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'value': '$const2.0'}), (6, {'res': '$const6.1'}), (8, {'value': '$const6.1'}), (10, {'res': '$10load_global.2'}), (12, {'res': '$shape12.3'}), (14, {'func': '$10load_global.2', 'args': ['$shape12.3'], 'res': '$14call_function.4'}), (16, {'value': '$14call_function.4', 'res': '$16get_iter.5'})), outgoing_phis={'$phi18.0': '$16get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={18: ('$16get_iter.5',)})
2025-01-31 15:31:40,558 - DEBUG - block_infos State(pc_initial=18 nstack_initial=1):
AdaptBlockInfo(insts=((18, {'iterator': '$phi18.0', 'pair': '$18for_iter.1', 'indval': '$18for_iter.2', 'pred': '$18for_iter.3'}),), outgoing_phis={'$phi20.1': '$18for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={58: (), 20: ('$phi18.0', '$18for_iter.2')})
2025-01-31 15:31:40,559 - DEBUG - block_infos State(pc_initial=20 nstack_initial=2):
AdaptBlockInfo(insts=((20, {'iterable': '$phi20.1', 'stores': ['$20unpack_sequence.2', '$20unpack_sequence.3'], 'tupleobj': '$20unpack_sequence.4'}), (22, {'value': '$20unpack_sequence.2'}), (24, {'value': '$20unpack_sequence.3'}), (26, {'res': '$s26.5'}), (28, {'res': '$const28.6'}), (30, {'lhs': '$s26.5', 'rhs': '$const28.6', 'res': '$30compare_op.7'}), (32, {'pred': '$30compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: ('$phi20.0',), 48: ('$phi20.0',)})
2025-01-31 15:31:40,559 - DEBUG - block_infos State(pc_initial=34 nstack_initial=1):
AdaptBlockInfo(insts=((34, {'res': '$num_neg_value34.1'}), (36, {'res': '$const36.2'}), (38, {'lhs': '$num_neg_value34.1', 'rhs': '$const36.2', 'res': '$38inplace_add.3'}), (40, {'value': '$38inplace_add.3'}), (42, {'res': '$ax42.4'}), (44, {'value': '$ax42.4'}), (46, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={18: ('$phi34.0',)})
2025-01-31 15:31:40,559 - DEBUG - block_infos State(pc_initial=48 nstack_initial=1):
AdaptBlockInfo(insts=((48, {'res': '$known_size48.1'}), (50, {'res': '$s50.2'}), (52, {'lhs': '$known_size48.1', 'rhs': '$s50.2', 'res': '$52inplace_multiply.3'}), (54, {'value': '$52inplace_multiply.3'}), (56, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={18: ('$phi48.0',)})
2025-01-31 15:31:40,559 - DEBUG - block_infos State(pc_initial=58 nstack_initial=0):
AdaptBlockInfo(insts=((58, {'res': '$num_neg_value58.0'}), (60, {'res': '$const60.1'}), (62, {'lhs': '$num_neg_value58.0', 'rhs': '$const60.1', 'res': '$62compare_op.2'}), (64, {'pred': '$62compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={66: (), 86: ()})
2025-01-31 15:31:40,559 - DEBUG - block_infos State(pc_initial=66 nstack_initial=0):
AdaptBlockInfo(insts=((66, {'res': '$origsize66.0'}), (68, {'res': '$known_size68.1'}), (70, {'lhs': '$origsize66.0', 'rhs': '$known_size68.1', 'res': '$70compare_op.2'}), (72, {'pred': '$70compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={74: (), 82: ()})
2025-01-31 15:31:40,559 - DEBUG - block_infos State(pc_initial=74 nstack_initial=0):
AdaptBlockInfo(insts=((74, {'res': '$74load_global.0'}), (76, {'res': '$const76.1'}), (78, {'func': '$74load_global.0', 'args': ['$const76.1'], 'res': '$78call_function.2'}), (80, {'exc': '$78call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:40,559 - DEBUG - block_infos State(pc_initial=82 nstack_initial=0):
AdaptBlockInfo(insts=((82, {'res': '$const82.0'}), (84, {'retval': '$const82.0', 'castval': '$84return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:40,559 - DEBUG - block_infos State(pc_initial=86 nstack_initial=0):
AdaptBlockInfo(insts=((86, {'res': '$num_neg_value86.0'}), (88, {'res': '$const88.1'}), (90, {'lhs': '$num_neg_value86.0', 'rhs': '$const88.1', 'res': '$90compare_op.2'}), (92, {'pred': '$90compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={94: (), 160: ()})
2025-01-31 15:31:40,559 - DEBUG - block_infos State(pc_initial=94 nstack_initial=0):
AdaptBlockInfo(insts=((94, {'res': '$known_size94.0'}), (96, {'res': '$const96.1'}), (98, {'lhs': '$known_size94.0', 'rhs': '$const96.1', 'res': '$98compare_op.2'}), (100, {'pred': '$98compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={102: (), 116: ()})
2025-01-31 15:31:40,559 - DEBUG - block_infos State(pc_initial=102 nstack_initial=0):
AdaptBlockInfo(insts=((102, {'res': '$const102.0'}), (104, {'value': '$const102.0'}), (106, {'res': '$origsize106.1'}), (108, {'res': '$const108.2'}), (110, {'lhs': '$origsize106.1', 'rhs': '$const108.2', 'res': '$110compare_op.3'}), (112, {'value': '$110compare_op.3'}), (114, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={136: ()})
2025-01-31 15:31:40,559 - DEBUG - block_infos State(pc_initial=116 nstack_initial=0):
AdaptBlockInfo(insts=((116, {'res': '$origsize116.0'}), (118, {'res': '$known_size118.1'}), (120, {'lhs': '$origsize116.0', 'rhs': '$known_size118.1', 'res': '$120binary_floor_divide.2'}), (122, {'value': '$120binary_floor_divide.2'}), (124, {'res': '$origsize124.3'}), (126, {'res': '$known_size126.4'}), (128, {'lhs': '$origsize124.3', 'rhs': '$known_size126.4', 'res': '$128binary_modulo.5'}), (130, {'res': '$const130.6'}), (132, {'lhs': '$128binary_modulo.5', 'rhs': '$const130.6', 'res': '$132compare_op.7'}), (134, {'value': '$132compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={136: ()})
2025-01-31 15:31:40,559 - DEBUG - block_infos State(pc_initial=136 nstack_initial=0):
AdaptBlockInfo(insts=((136, {'res': '$ok136.0'}), (138, {'pred': '$ok136.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={140: (), 148: ()})
2025-01-31 15:31:40,559 - DEBUG - block_infos State(pc_initial=140 nstack_initial=0):
AdaptBlockInfo(insts=((140, {'res': '$140load_global.0'}), (142, {'res': '$const142.1'}), (144, {'func': '$140load_global.0', 'args': ['$const142.1'], 'res': '$144call_function.2'}), (146, {'exc': '$144call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:40,559 - DEBUG - block_infos State(pc_initial=148 nstack_initial=0):
AdaptBlockInfo(insts=((148, {'res': '$inferred148.0'}), (150, {'res': '$shape150.1'}), (152, {'res': '$neg_ax152.2'}), (154, {'target': '$shape150.1', 'index': '$neg_ax152.2', 'value': '$inferred148.0'}), (156, {'res': '$const156.3'}), (158, {'retval': '$const156.3', 'castval': '$158return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:40,559 - DEBUG - block_infos State(pc_initial=160 nstack_initial=0):
AdaptBlockInfo(insts=((160, {'res': '$160load_global.0'}), (162, {'res': '$const162.1'}), (164, {'func': '$160load_global.0', 'args': ['$const162.1'], 'res': '$164call_function.2'}), (166, {'exc': '$164call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:40,561 - DEBUG - label 0:
    origsize = arg(0, name=origsize)         ['origsize']
    shape = arg(1, name=shape)               ['shape']
    num_neg_value = const(int, 0)            ['num_neg_value']
    known_size = const(int, 1)               ['known_size']
    $10load_global.2 = global(enumerate: <class 'enumerate'>) ['$10load_global.2']
    $14call_function.4 = call $10load_global.2(shape, func=$10load_global.2, args=[Var(shape, arrayobj.py:2046)], kws=(), vararg=None, varkwarg=None, target=None) ['$10load_global.2', '$14call_function.4', 'shape']
    $16get_iter.5 = getiter(value=$14call_function.4) ['$14call_function.4', '$16get_iter.5']
    $phi18.0 = $16get_iter.5                 ['$16get_iter.5', '$phi18.0']
    jump 18                                  []
label 18:
    $18for_iter.1 = iternext(value=$phi18.0) ['$18for_iter.1', '$phi18.0']
    $18for_iter.2 = pair_first(value=$18for_iter.1) ['$18for_iter.1', '$18for_iter.2']
    $18for_iter.3 = pair_second(value=$18for_iter.1) ['$18for_iter.1', '$18for_iter.3']
    $phi20.1 = $18for_iter.2                 ['$18for_iter.2', '$phi20.1']
    branch $18for_iter.3, 20, 58             ['$18for_iter.3']
label 20:
    $20unpack_sequence.4 = exhaust_iter(value=$phi20.1, count=2) ['$20unpack_sequence.4', '$phi20.1']
    $20unpack_sequence.2 = static_getitem(value=$20unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>) ['$20unpack_sequence.2', '$20unpack_sequence.4']
    $20unpack_sequence.3 = static_getitem(value=$20unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>) ['$20unpack_sequence.3', '$20unpack_sequence.4']
    ax = $20unpack_sequence.2                ['$20unpack_sequence.2', 'ax']
    s = $20unpack_sequence.3                 ['$20unpack_sequence.3', 's']
    $const28.6 = const(int, 0)               ['$const28.6']
    $30compare_op.7 = s < $const28.6         ['$30compare_op.7', '$const28.6', 's']
    bool32 = global(bool: <class 'bool'>)    ['bool32']
    $32pred = call bool32($30compare_op.7, func=bool32, args=(Var($30compare_op.7, arrayobj.py:2050),), kws=(), vararg=None, varkwarg=None, target=None) ['$30compare_op.7', '$32pred', 'bool32']
    branch $32pred, 34, 48                   ['$32pred']
label 34:
    $const36.2 = const(int, 1)               ['$const36.2']
    $38inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined) ['$38inplace_add.3', '$const36.2', 'num_neg_value']
    num_neg_value = $38inplace_add.3         ['$38inplace_add.3', 'num_neg_value']
    neg_ax = ax                              ['ax', 'neg_ax']
    jump 18                                  []
label 48:
    $52inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined) ['$52inplace_multiply.3', 'known_size', 's']
    known_size = $52inplace_multiply.3       ['$52inplace_multiply.3', 'known_size']
    jump 18                                  []
label 58:
    $const60.1 = const(int, 0)               ['$const60.1']
    $62compare_op.2 = num_neg_value == $const60.1 ['$62compare_op.2', '$const60.1', 'num_neg_value']
    bool64 = global(bool: <class 'bool'>)    ['bool64']
    $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, arrayobj.py:2056),), kws=(), vararg=None, varkwarg=None, target=None) ['$62compare_op.2', '$64pred', 'bool64']
    branch $64pred, 66, 86                   ['$64pred']
label 66:
    $70compare_op.2 = origsize != known_size ['$70compare_op.2', 'known_size', 'origsize']
    bool72 = global(bool: <class 'bool'>)    ['bool72']
    $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, arrayobj.py:2057),), kws=(), vararg=None, varkwarg=None, target=None) ['$70compare_op.2', '$72pred', 'bool72']
    branch $72pred, 74, 82                   ['$72pred']
label 74:
    $74load_global.0 = global(ValueError: <class 'ValueError'>) ['$74load_global.0']
    $const76.1 = const(str, total size of new array must be unchanged) ['$const76.1']
    $78call_function.2 = call $74load_global.0($const76.1, func=$74load_global.0, args=[Var($const76.1, arrayobj.py:2058)], kws=(), vararg=None, varkwarg=None, target=None) ['$74load_global.0', '$78call_function.2', '$const76.1']
    raise $78call_function.2                 ['$78call_function.2']
label 82:
    $const82.0 = const(NoneType, None)       ['$const82.0']
    $84return_value.1 = cast(value=$const82.0) ['$84return_value.1', '$const82.0']
    return $84return_value.1                 ['$84return_value.1']
label 86:
    $const88.1 = const(int, 1)               ['$const88.1']
    $90compare_op.2 = num_neg_value == $const88.1 ['$90compare_op.2', '$const88.1', 'num_neg_value']
    bool92 = global(bool: <class 'bool'>)    ['bool92']
    $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, arrayobj.py:2060),), kws=(), vararg=None, varkwarg=None, target=None) ['$90compare_op.2', '$92pred', 'bool92']
    branch $92pred, 94, 160                  ['$92pred']
label 94:
    $const96.1 = const(int, 0)               ['$const96.1']
    $98compare_op.2 = known_size == $const96.1 ['$98compare_op.2', '$const96.1', 'known_size']
    bool100 = global(bool: <class 'bool'>)   ['bool100']
    $100pred = call bool100($98compare_op.2, func=bool100, args=(Var($98compare_op.2, arrayobj.py:2062),), kws=(), vararg=None, varkwarg=None, target=None) ['$100pred', '$98compare_op.2', 'bool100']
    branch $100pred, 102, 116                ['$100pred']
label 102:
    inferred = const(int, 0)                 ['inferred']
    $const108.2 = const(int, 0)              ['$const108.2']
    ok = origsize == $const108.2             ['$const108.2', 'ok', 'origsize']
    jump 136                                 []
label 116:
    inferred = origsize // known_size        ['inferred', 'known_size', 'origsize']
    $128binary_modulo.5 = origsize % known_size ['$128binary_modulo.5', 'known_size', 'origsize']
    $const130.6 = const(int, 0)              ['$const130.6']
    ok = $128binary_modulo.5 == $const130.6  ['$128binary_modulo.5', '$const130.6', 'ok']
    jump 136                                 []
label 136:
    bool138 = global(bool: <class 'bool'>)   ['bool138']
    $138pred = call bool138(ok, func=bool138, args=(Var(ok, arrayobj.py:2064),), kws=(), vararg=None, varkwarg=None, target=None) ['$138pred', 'bool138', 'ok']
    branch $138pred, 148, 140                ['$138pred']
label 140:
    $140load_global.0 = global(ValueError: <class 'ValueError'>) ['$140load_global.0']
    $const142.1 = const(str, total size of new array must be unchanged) ['$const142.1']
    $144call_function.2 = call $140load_global.0($const142.1, func=$140load_global.0, args=[Var($const142.1, arrayobj.py:2069)], kws=(), vararg=None, varkwarg=None, target=None) ['$140load_global.0', '$144call_function.2', '$const142.1']
    raise $144call_function.2                ['$144call_function.2']
label 148:
    shape[neg_ax] = inferred                 ['inferred', 'neg_ax', 'shape']
    $const156.3 = const(NoneType, None)      ['$const156.3']
    $158return_value.4 = cast(value=$const156.3) ['$158return_value.4', '$const156.3']
    return $158return_value.4                ['$158return_value.4']
label 160:
    $160load_global.0 = global(ValueError: <class 'ValueError'>) ['$160load_global.0']
    $const162.1 = const(str, multiple negative shape values) ['$const162.1']
    $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:2073)], kws=(), vararg=None, varkwarg=None, target=None) ['$160load_global.0', '$164call_function.2', '$const162.1']
    raise $164call_function.2                ['$164call_function.2']

2025-01-31 15:31:40,570 - DEBUG - ==== SSA block analysis pass on 0
2025-01-31 15:31:40,570 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e88180a0>
2025-01-31 15:31:40,570 - DEBUG - on stmt: origsize = arg(0, name=origsize)
2025-01-31 15:31:40,570 - DEBUG - on stmt: shape = arg(1, name=shape)
2025-01-31 15:31:40,570 - DEBUG - on stmt: num_neg_value = const(int, 0)
2025-01-31 15:31:40,570 - DEBUG - on stmt: known_size = const(int, 1)
2025-01-31 15:31:40,571 - DEBUG - on stmt: $10load_global.2 = global(enumerate: <class 'enumerate'>)
2025-01-31 15:31:40,571 - DEBUG - on stmt: $14call_function.4 = call $10load_global.2(shape, func=$10load_global.2, args=[Var(shape, arrayobj.py:2046)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,571 - DEBUG - on stmt: $16get_iter.5 = getiter(value=$14call_function.4)
2025-01-31 15:31:40,571 - DEBUG - on stmt: $phi18.0 = $16get_iter.5
2025-01-31 15:31:40,571 - DEBUG - on stmt: jump 18
2025-01-31 15:31:40,571 - DEBUG - ==== SSA block analysis pass on 18
2025-01-31 15:31:40,571 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e88180a0>
2025-01-31 15:31:40,571 - DEBUG - on stmt: $18for_iter.1 = iternext(value=$phi18.0)
2025-01-31 15:31:40,571 - DEBUG - on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
2025-01-31 15:31:40,571 - DEBUG - on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
2025-01-31 15:31:40,571 - DEBUG - on stmt: $phi20.1 = $18for_iter.2
2025-01-31 15:31:40,571 - DEBUG - on stmt: branch $18for_iter.3, 20, 58
2025-01-31 15:31:40,571 - DEBUG - ==== SSA block analysis pass on 20
2025-01-31 15:31:40,571 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e88180a0>
2025-01-31 15:31:40,571 - DEBUG - on stmt: $20unpack_sequence.4 = exhaust_iter(value=$phi20.1, count=2)
2025-01-31 15:31:40,571 - DEBUG - on stmt: $20unpack_sequence.2 = static_getitem(value=$20unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2025-01-31 15:31:40,571 - DEBUG - on stmt: $20unpack_sequence.3 = static_getitem(value=$20unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2025-01-31 15:31:40,571 - DEBUG - on stmt: ax = $20unpack_sequence.2
2025-01-31 15:31:40,571 - DEBUG - on stmt: s = $20unpack_sequence.3
2025-01-31 15:31:40,571 - DEBUG - on stmt: $const28.6 = const(int, 0)
2025-01-31 15:31:40,571 - DEBUG - on stmt: $30compare_op.7 = s < $const28.6
2025-01-31 15:31:40,571 - DEBUG - on stmt: bool32 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,571 - DEBUG - on stmt: $32pred = call bool32($30compare_op.7, func=bool32, args=(Var($30compare_op.7, arrayobj.py:2050),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,571 - DEBUG - on stmt: branch $32pred, 34, 48
2025-01-31 15:31:40,571 - DEBUG - ==== SSA block analysis pass on 34
2025-01-31 15:31:40,572 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e88180a0>
2025-01-31 15:31:40,572 - DEBUG - on stmt: $const36.2 = const(int, 1)
2025-01-31 15:31:40,572 - DEBUG - on stmt: $38inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:40,572 - DEBUG - on stmt: num_neg_value = $38inplace_add.3
2025-01-31 15:31:40,572 - DEBUG - on stmt: neg_ax = ax
2025-01-31 15:31:40,572 - DEBUG - on stmt: jump 161
2025-01-31 15:31:40,572 - DEBUG - ==== SSA block analysis pass on 48
2025-01-31 15:31:40,572 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e88180a0>
2025-01-31 15:31:40,572 - DEBUG - on stmt: $52inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:40,572 - DEBUG - on stmt: known_size = $52inplace_multiply.3
2025-01-31 15:31:40,572 - DEBUG - on stmt: jump 161
2025-01-31 15:31:40,572 - DEBUG - ==== SSA block analysis pass on 58
2025-01-31 15:31:40,572 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e88180a0>
2025-01-31 15:31:40,572 - DEBUG - on stmt: $const60.1 = const(int, 0)
2025-01-31 15:31:40,572 - DEBUG - on stmt: $62compare_op.2 = num_neg_value == $const60.1
2025-01-31 15:31:40,572 - DEBUG - on stmt: bool64 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,572 - DEBUG - on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, arrayobj.py:2056),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,572 - DEBUG - on stmt: branch $64pred, 66, 86
2025-01-31 15:31:40,572 - DEBUG - ==== SSA block analysis pass on 66
2025-01-31 15:31:40,572 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e88180a0>
2025-01-31 15:31:40,572 - DEBUG - on stmt: $70compare_op.2 = origsize != known_size
2025-01-31 15:31:40,572 - DEBUG - on stmt: bool72 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,572 - DEBUG - on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, arrayobj.py:2057),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,572 - DEBUG - on stmt: branch $72pred, 74, 82
2025-01-31 15:31:40,572 - DEBUG - ==== SSA block analysis pass on 74
2025-01-31 15:31:40,572 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e88180a0>
2025-01-31 15:31:40,573 - DEBUG - on stmt: $74load_global.0 = global(ValueError: <class 'ValueError'>)
2025-01-31 15:31:40,573 - DEBUG - on stmt: $const76.1 = const(str, total size of new array must be unchanged)
2025-01-31 15:31:40,573 - DEBUG - on stmt: $78call_function.2 = call $74load_global.0($const76.1, func=$74load_global.0, args=[Var($const76.1, arrayobj.py:2058)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,573 - DEBUG - on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2025-01-31 15:31:40,573 - DEBUG - ==== SSA block analysis pass on 82
2025-01-31 15:31:40,573 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e88180a0>
2025-01-31 15:31:40,573 - DEBUG - on stmt: $const82.0 = const(NoneType, None)
2025-01-31 15:31:40,573 - DEBUG - on stmt: $84return_value.1 = cast(value=$const82.0)
2025-01-31 15:31:40,573 - DEBUG - on stmt: return $84return_value.1
2025-01-31 15:31:40,573 - DEBUG - ==== SSA block analysis pass on 86
2025-01-31 15:31:40,573 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e88180a0>
2025-01-31 15:31:40,573 - DEBUG - on stmt: $const88.1 = const(int, 1)
2025-01-31 15:31:40,573 - DEBUG - on stmt: $90compare_op.2 = num_neg_value == $const88.1
2025-01-31 15:31:40,573 - DEBUG - on stmt: bool92 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,573 - DEBUG - on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, arrayobj.py:2060),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,573 - DEBUG - on stmt: branch $92pred, 94, 160
2025-01-31 15:31:40,573 - DEBUG - ==== SSA block analysis pass on 94
2025-01-31 15:31:40,573 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e88180a0>
2025-01-31 15:31:40,573 - DEBUG - on stmt: $const96.1 = const(int, 0)
2025-01-31 15:31:40,573 - DEBUG - on stmt: $98compare_op.2 = known_size == $const96.1
2025-01-31 15:31:40,573 - DEBUG - on stmt: bool100 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,573 - DEBUG - on stmt: $100pred = call bool100($98compare_op.2, func=bool100, args=(Var($98compare_op.2, arrayobj.py:2062),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,573 - DEBUG - on stmt: branch $100pred, 102, 116
2025-01-31 15:31:40,573 - DEBUG - ==== SSA block analysis pass on 102
2025-01-31 15:31:40,573 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e88180a0>
2025-01-31 15:31:40,573 - DEBUG - on stmt: inferred = const(int, 0)
2025-01-31 15:31:40,574 - DEBUG - on stmt: $const108.2 = const(int, 0)
2025-01-31 15:31:40,574 - DEBUG - on stmt: ok = origsize == $const108.2
2025-01-31 15:31:40,574 - DEBUG - on stmt: jump 136
2025-01-31 15:31:40,574 - DEBUG - ==== SSA block analysis pass on 116
2025-01-31 15:31:40,574 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e88180a0>
2025-01-31 15:31:40,574 - DEBUG - on stmt: inferred = origsize // known_size
2025-01-31 15:31:40,574 - DEBUG - on stmt: $128binary_modulo.5 = origsize % known_size
2025-01-31 15:31:40,574 - DEBUG - on stmt: $const130.6 = const(int, 0)
2025-01-31 15:31:40,574 - DEBUG - on stmt: ok = $128binary_modulo.5 == $const130.6
2025-01-31 15:31:40,574 - DEBUG - on stmt: jump 136
2025-01-31 15:31:40,574 - DEBUG - ==== SSA block analysis pass on 136
2025-01-31 15:31:40,574 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e88180a0>
2025-01-31 15:31:40,574 - DEBUG - on stmt: bool138 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,574 - DEBUG - on stmt: $138pred = call bool138(ok, func=bool138, args=(Var(ok, arrayobj.py:2064),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,574 - DEBUG - on stmt: branch $138pred, 148, 140
2025-01-31 15:31:40,574 - DEBUG - ==== SSA block analysis pass on 140
2025-01-31 15:31:40,574 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e88180a0>
2025-01-31 15:31:40,574 - DEBUG - on stmt: $140load_global.0 = global(ValueError: <class 'ValueError'>)
2025-01-31 15:31:40,574 - DEBUG - on stmt: $const142.1 = const(str, total size of new array must be unchanged)
2025-01-31 15:31:40,574 - DEBUG - on stmt: $144call_function.2 = call $140load_global.0($const142.1, func=$140load_global.0, args=[Var($const142.1, arrayobj.py:2069)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,574 - DEBUG - on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2025-01-31 15:31:40,574 - DEBUG - ==== SSA block analysis pass on 148
2025-01-31 15:31:40,574 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e88180a0>
2025-01-31 15:31:40,574 - DEBUG - on stmt: shape[neg_ax] = inferred
2025-01-31 15:31:40,574 - DEBUG - on stmt: $const156.3 = const(NoneType, None)
2025-01-31 15:31:40,574 - DEBUG - on stmt: $158return_value.4 = cast(value=$const156.3)
2025-01-31 15:31:40,574 - DEBUG - on stmt: return $158return_value.4
2025-01-31 15:31:40,575 - DEBUG - ==== SSA block analysis pass on 160
2025-01-31 15:31:40,575 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e88180a0>
2025-01-31 15:31:40,575 - DEBUG - on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
2025-01-31 15:31:40,575 - DEBUG - on stmt: $const162.1 = const(str, multiple negative shape values)
2025-01-31 15:31:40,575 - DEBUG - on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:2073)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,575 - DEBUG - on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
2025-01-31 15:31:40,575 - DEBUG - ==== SSA block analysis pass on 161
2025-01-31 15:31:40,575 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e88180a0>
2025-01-31 15:31:40,575 - DEBUG - on stmt: jump 18
2025-01-31 15:31:40,576 - DEBUG - defs defaultdict(<class 'list'>,
            {'$100pred': [(<numba.core.ir.Assign object at 0x7c89e8dc2350>,
                           94)],
             '$10load_global.2': [(<numba.core.ir.Assign object at 0x7c89e8b22440>,
                                   0)],
             '$128binary_modulo.5': [(<numba.core.ir.Assign object at 0x7c89e8dc0fa0>,
                                      116)],
             '$138pred': [(<numba.core.ir.Assign object at 0x7c89e8d589a0>,
                           136)],
             '$140load_global.0': [(<numba.core.ir.Assign object at 0x7c89e8d5bb50>,
                                    140)],
             '$144call_function.2': [(<numba.core.ir.Assign object at 0x7c89e8d5be80>,
                                      140)],
             '$14call_function.4': [(<numba.core.ir.Assign object at 0x7c89e8b20af0>,
                                     0)],
             '$158return_value.4': [(<numba.core.ir.Assign object at 0x7c89e8d5b4f0>,
                                     148)],
             '$160load_global.0': [(<numba.core.ir.Assign object at 0x7c89e8d5b400>,
                                    160)],
             '$164call_function.2': [(<numba.core.ir.Assign object at 0x7c89e8d5b010>,
                                      160)],
             '$16get_iter.5': [(<numba.core.ir.Assign object at 0x7c89e8b20940>,
                                0)],
             '$18for_iter.1': [(<numba.core.ir.Assign object at 0x7c89e8b22260>,
                                18)],
             '$18for_iter.2': [(<numba.core.ir.Assign object at 0x7c89e8b21d80>,
                                18)],
             '$18for_iter.3': [(<numba.core.ir.Assign object at 0x7c89e8b22020>,
                                18)],
             '$20unpack_sequence.2': [(<numba.core.ir.Assign object at 0x7c89e8b22200>,
                                       20)],
             '$20unpack_sequence.3': [(<numba.core.ir.Assign object at 0x7c89e8b20610>,
                                       20)],
             '$20unpack_sequence.4': [(<numba.core.ir.Assign object at 0x7c89e8b20760>,
                                       20)],
             '$30compare_op.7': [(<numba.core.ir.Assign object at 0x7c89e8b22950>,
                                  20)],
             '$32pred': [(<numba.core.ir.Assign object at 0x7c89e8b20c70>, 20)],
             '$38inplace_add.3': [(<numba.core.ir.Assign object at 0x7c89e8b20460>,
                                   34)],
             '$52inplace_multiply.3': [(<numba.core.ir.Assign object at 0x7c89e8b4a650>,
                                        48)],
             '$62compare_op.2': [(<numba.core.ir.Assign object at 0x7c89e8b48550>,
                                  58)],
             '$64pred': [(<numba.core.ir.Assign object at 0x7c89e8b4b580>, 58)],
             '$70compare_op.2': [(<numba.core.ir.Assign object at 0x7c89e8b4ada0>,
                                  66)],
             '$72pred': [(<numba.core.ir.Assign object at 0x7c89e8b4ab60>, 66)],
             '$74load_global.0': [(<numba.core.ir.Assign object at 0x7c89e8b4abc0>,
                                   74)],
             '$78call_function.2': [(<numba.core.ir.Assign object at 0x7c89e8b4bbe0>,
                                     74)],
             '$84return_value.1': [(<numba.core.ir.Assign object at 0x7c89e8b4b730>,
                                    82)],
             '$90compare_op.2': [(<numba.core.ir.Assign object at 0x7c89e8b483a0>,
                                  86)],
             '$92pred': [(<numba.core.ir.Assign object at 0x7c89e8b480d0>, 86)],
             '$98compare_op.2': [(<numba.core.ir.Assign object at 0x7c89e8dc1ae0>,
                                  94)],
             '$const108.2': [(<numba.core.ir.Assign object at 0x7c89e8dc07c0>,
                              102)],
             '$const130.6': [(<numba.core.ir.Assign object at 0x7c89e8dc0e80>,
                              116)],
             '$const142.1': [(<numba.core.ir.Assign object at 0x7c89e8d589d0>,
                              140)],
             '$const156.3': [(<numba.core.ir.Assign object at 0x7c89e8d5b640>,
                              148)],
             '$const162.1': [(<numba.core.ir.Assign object at 0x7c89e8d5b280>,
                              160)],
             '$const28.6': [(<numba.core.ir.Assign object at 0x7c89e8b21ba0>,
                             20)],
             '$const36.2': [(<numba.core.ir.Assign object at 0x7c89e8b20250>,
                             34)],
             '$const60.1': [(<numba.core.ir.Assign object at 0x7c89e8b49d80>,
                             58)],
             '$const76.1': [(<numba.core.ir.Assign object at 0x7c89e8b4b760>,
                             74)],
             '$const82.0': [(<numba.core.ir.Assign object at 0x7c89e8b4bc70>,
                             82)],
             '$const88.1': [(<numba.core.ir.Assign object at 0x7c89e8b4a290>,
                             86)],
             '$const96.1': [(<numba.core.ir.Assign object at 0x7c89e8dc39a0>,
                             94)],
             '$phi18.0': [(<numba.core.ir.Assign object at 0x7c89e88194b0>, 0)],
             '$phi20.1': [(<numba.core.ir.Assign object at 0x7c89e8b21810>,
                           18)],
             'ax': [(<numba.core.ir.Assign object at 0x7c89e8b219f0>, 20)],
             'bool100': [(<numba.core.ir.Assign object at 0x7c89e8dc1ea0>, 94)],
             'bool138': [(<numba.core.ir.Assign object at 0x7c89e8dc0a60>,
                          136)],
             'bool32': [(<numba.core.ir.Assign object at 0x7c89e8b20d00>, 20)],
             'bool64': [(<numba.core.ir.Assign object at 0x7c89e8b48940>, 58)],
             'bool72': [(<numba.core.ir.Assign object at 0x7c89e8b4aec0>, 66)],
             'bool92': [(<numba.core.ir.Assign object at 0x7c89e8b48250>, 86)],
             'inferred': [(<numba.core.ir.Assign object at 0x7c89e8dc2b60>,
                           102),
                          (<numba.core.ir.Assign object at 0x7c89e8dc01c0>,
                           116)],
             'known_size': [(<numba.core.ir.Assign object at 0x7c89e8b22e30>,
                             0),
                            (<numba.core.ir.Assign object at 0x7c89e8b4a080>,
                             48)],
             'neg_ax': [(<numba.core.ir.Assign object at 0x7c89e8b4b160>, 34)],
             'num_neg_value': [(<numba.core.ir.Assign object at 0x7c89e8819f00>,
                                0),
                               (<numba.core.ir.Assign object at 0x7c89e8b207f0>,
                                34)],
             'ok': [(<numba.core.ir.Assign object at 0x7c89e8dc0610>, 102),
                    (<numba.core.ir.Assign object at 0x7c89e8dc0d00>, 116)],
             'origsize': [(<numba.core.ir.Assign object at 0x7c89e8819390>, 0)],
             's': [(<numba.core.ir.Assign object at 0x7c89e8b226e0>, 20)],
             'shape': [(<numba.core.ir.Assign object at 0x7c89e8819330>, 0)]})
2025-01-31 15:31:40,576 - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x7c89e88180a0>
2025-01-31 15:31:40,576 - DEBUG - Fix SSA violator on var num_neg_value
2025-01-31 15:31:40,576 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-31 15:31:40,576 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e881bf40>
2025-01-31 15:31:40,576 - DEBUG - on stmt: origsize = arg(0, name=origsize)
2025-01-31 15:31:40,576 - DEBUG - on stmt: shape = arg(1, name=shape)
2025-01-31 15:31:40,576 - DEBUG - on stmt: num_neg_value = const(int, 0)
2025-01-31 15:31:40,576 - DEBUG - first assign: num_neg_value
2025-01-31 15:31:40,576 - DEBUG - replaced with: num_neg_value = const(int, 0)
2025-01-31 15:31:40,576 - DEBUG - on stmt: known_size = const(int, 1)
2025-01-31 15:31:40,576 - DEBUG - on stmt: $10load_global.2 = global(enumerate: <class 'enumerate'>)
2025-01-31 15:31:40,576 - DEBUG - on stmt: $14call_function.4 = call $10load_global.2(shape, func=$10load_global.2, args=[Var(shape, arrayobj.py:2046)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,576 - DEBUG - on stmt: $16get_iter.5 = getiter(value=$14call_function.4)
2025-01-31 15:31:40,577 - DEBUG - on stmt: $phi18.0 = $16get_iter.5
2025-01-31 15:31:40,577 - DEBUG - on stmt: jump 18
2025-01-31 15:31:40,577 - DEBUG - ==== SSA block rewrite pass on 18
2025-01-31 15:31:40,577 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e881bf40>
2025-01-31 15:31:40,577 - DEBUG - on stmt: $18for_iter.1 = iternext(value=$phi18.0)
2025-01-31 15:31:40,577 - DEBUG - on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
2025-01-31 15:31:40,577 - DEBUG - on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
2025-01-31 15:31:40,577 - DEBUG - on stmt: $phi20.1 = $18for_iter.2
2025-01-31 15:31:40,577 - DEBUG - on stmt: branch $18for_iter.3, 20, 58
2025-01-31 15:31:40,577 - DEBUG - ==== SSA block rewrite pass on 20
2025-01-31 15:31:40,577 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e881bf40>
2025-01-31 15:31:40,577 - DEBUG - on stmt: $20unpack_sequence.4 = exhaust_iter(value=$phi20.1, count=2)
2025-01-31 15:31:40,577 - DEBUG - on stmt: $20unpack_sequence.2 = static_getitem(value=$20unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2025-01-31 15:31:40,577 - DEBUG - on stmt: $20unpack_sequence.3 = static_getitem(value=$20unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2025-01-31 15:31:40,577 - DEBUG - on stmt: ax = $20unpack_sequence.2
2025-01-31 15:31:40,577 - DEBUG - on stmt: s = $20unpack_sequence.3
2025-01-31 15:31:40,577 - DEBUG - on stmt: $const28.6 = const(int, 0)
2025-01-31 15:31:40,577 - DEBUG - on stmt: $30compare_op.7 = s < $const28.6
2025-01-31 15:31:40,577 - DEBUG - on stmt: bool32 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,577 - DEBUG - on stmt: $32pred = call bool32($30compare_op.7, func=bool32, args=(Var($30compare_op.7, arrayobj.py:2050),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,577 - DEBUG - on stmt: branch $32pred, 34, 48
2025-01-31 15:31:40,577 - DEBUG - ==== SSA block rewrite pass on 34
2025-01-31 15:31:40,577 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e881bf40>
2025-01-31 15:31:40,577 - DEBUG - on stmt: $const36.2 = const(int, 1)
2025-01-31 15:31:40,577 - DEBUG - on stmt: $38inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:40,577 - DEBUG - on stmt: num_neg_value = $38inplace_add.3
2025-01-31 15:31:40,577 - DEBUG - replaced with: num_neg_value.1 = $38inplace_add.3
2025-01-31 15:31:40,577 - DEBUG - on stmt: neg_ax = ax
2025-01-31 15:31:40,577 - DEBUG - on stmt: jump 161
2025-01-31 15:31:40,578 - DEBUG - ==== SSA block rewrite pass on 48
2025-01-31 15:31:40,578 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e881bf40>
2025-01-31 15:31:40,578 - DEBUG - on stmt: $52inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:40,578 - DEBUG - on stmt: known_size = $52inplace_multiply.3
2025-01-31 15:31:40,578 - DEBUG - on stmt: jump 161
2025-01-31 15:31:40,578 - DEBUG - ==== SSA block rewrite pass on 58
2025-01-31 15:31:40,578 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e881bf40>
2025-01-31 15:31:40,578 - DEBUG - on stmt: $const60.1 = const(int, 0)
2025-01-31 15:31:40,578 - DEBUG - on stmt: $62compare_op.2 = num_neg_value == $const60.1
2025-01-31 15:31:40,578 - DEBUG - on stmt: bool64 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,578 - DEBUG - on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, arrayobj.py:2056),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,578 - DEBUG - on stmt: branch $64pred, 66, 86
2025-01-31 15:31:40,578 - DEBUG - ==== SSA block rewrite pass on 66
2025-01-31 15:31:40,578 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e881bf40>
2025-01-31 15:31:40,578 - DEBUG - on stmt: $70compare_op.2 = origsize != known_size
2025-01-31 15:31:40,578 - DEBUG - on stmt: bool72 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,578 - DEBUG - on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, arrayobj.py:2057),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,578 - DEBUG - on stmt: branch $72pred, 74, 82
2025-01-31 15:31:40,578 - DEBUG - ==== SSA block rewrite pass on 74
2025-01-31 15:31:40,578 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e881bf40>
2025-01-31 15:31:40,578 - DEBUG - on stmt: $74load_global.0 = global(ValueError: <class 'ValueError'>)
2025-01-31 15:31:40,578 - DEBUG - on stmt: $const76.1 = const(str, total size of new array must be unchanged)
2025-01-31 15:31:40,578 - DEBUG - on stmt: $78call_function.2 = call $74load_global.0($const76.1, func=$74load_global.0, args=[Var($const76.1, arrayobj.py:2058)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,578 - DEBUG - on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2025-01-31 15:31:40,578 - DEBUG - ==== SSA block rewrite pass on 82
2025-01-31 15:31:40,578 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e881bf40>
2025-01-31 15:31:40,578 - DEBUG - on stmt: $const82.0 = const(NoneType, None)
2025-01-31 15:31:40,578 - DEBUG - on stmt: $84return_value.1 = cast(value=$const82.0)
2025-01-31 15:31:40,578 - DEBUG - on stmt: return $84return_value.1
2025-01-31 15:31:40,578 - DEBUG - ==== SSA block rewrite pass on 86
2025-01-31 15:31:40,579 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e881bf40>
2025-01-31 15:31:40,579 - DEBUG - on stmt: $const88.1 = const(int, 1)
2025-01-31 15:31:40,579 - DEBUG - on stmt: $90compare_op.2 = num_neg_value == $const88.1
2025-01-31 15:31:40,579 - DEBUG - on stmt: bool92 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,579 - DEBUG - on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, arrayobj.py:2060),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,579 - DEBUG - on stmt: branch $92pred, 94, 160
2025-01-31 15:31:40,579 - DEBUG - ==== SSA block rewrite pass on 94
2025-01-31 15:31:40,579 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e881bf40>
2025-01-31 15:31:40,579 - DEBUG - on stmt: $const96.1 = const(int, 0)
2025-01-31 15:31:40,579 - DEBUG - on stmt: $98compare_op.2 = known_size == $const96.1
2025-01-31 15:31:40,579 - DEBUG - on stmt: bool100 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,579 - DEBUG - on stmt: $100pred = call bool100($98compare_op.2, func=bool100, args=(Var($98compare_op.2, arrayobj.py:2062),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,579 - DEBUG - on stmt: branch $100pred, 102, 116
2025-01-31 15:31:40,579 - DEBUG - ==== SSA block rewrite pass on 102
2025-01-31 15:31:40,579 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e881bf40>
2025-01-31 15:31:40,579 - DEBUG - on stmt: inferred = const(int, 0)
2025-01-31 15:31:40,579 - DEBUG - on stmt: $const108.2 = const(int, 0)
2025-01-31 15:31:40,579 - DEBUG - on stmt: ok = origsize == $const108.2
2025-01-31 15:31:40,579 - DEBUG - on stmt: jump 136
2025-01-31 15:31:40,579 - DEBUG - ==== SSA block rewrite pass on 116
2025-01-31 15:31:40,579 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e881bf40>
2025-01-31 15:31:40,579 - DEBUG - on stmt: inferred = origsize // known_size
2025-01-31 15:31:40,579 - DEBUG - on stmt: $128binary_modulo.5 = origsize % known_size
2025-01-31 15:31:40,579 - DEBUG - on stmt: $const130.6 = const(int, 0)
2025-01-31 15:31:40,579 - DEBUG - on stmt: ok = $128binary_modulo.5 == $const130.6
2025-01-31 15:31:40,579 - DEBUG - on stmt: jump 136
2025-01-31 15:31:40,579 - DEBUG - ==== SSA block rewrite pass on 136
2025-01-31 15:31:40,579 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e881bf40>
2025-01-31 15:31:40,579 - DEBUG - on stmt: bool138 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,580 - DEBUG - on stmt: $138pred = call bool138(ok, func=bool138, args=(Var(ok, arrayobj.py:2064),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,580 - DEBUG - on stmt: branch $138pred, 148, 140
2025-01-31 15:31:40,580 - DEBUG - ==== SSA block rewrite pass on 140
2025-01-31 15:31:40,580 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e881bf40>
2025-01-31 15:31:40,580 - DEBUG - on stmt: $140load_global.0 = global(ValueError: <class 'ValueError'>)
2025-01-31 15:31:40,580 - DEBUG - on stmt: $const142.1 = const(str, total size of new array must be unchanged)
2025-01-31 15:31:40,580 - DEBUG - on stmt: $144call_function.2 = call $140load_global.0($const142.1, func=$140load_global.0, args=[Var($const142.1, arrayobj.py:2069)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,580 - DEBUG - on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2025-01-31 15:31:40,580 - DEBUG - ==== SSA block rewrite pass on 148
2025-01-31 15:31:40,580 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e881bf40>
2025-01-31 15:31:40,580 - DEBUG - on stmt: shape[neg_ax] = inferred
2025-01-31 15:31:40,580 - DEBUG - on stmt: $const156.3 = const(NoneType, None)
2025-01-31 15:31:40,580 - DEBUG - on stmt: $158return_value.4 = cast(value=$const156.3)
2025-01-31 15:31:40,580 - DEBUG - on stmt: return $158return_value.4
2025-01-31 15:31:40,580 - DEBUG - ==== SSA block rewrite pass on 160
2025-01-31 15:31:40,580 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e881bf40>
2025-01-31 15:31:40,580 - DEBUG - on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
2025-01-31 15:31:40,580 - DEBUG - on stmt: $const162.1 = const(str, multiple negative shape values)
2025-01-31 15:31:40,580 - DEBUG - on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:2073)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,580 - DEBUG - on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
2025-01-31 15:31:40,580 - DEBUG - ==== SSA block rewrite pass on 161
2025-01-31 15:31:40,580 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e881bf40>
2025-01-31 15:31:40,580 - DEBUG - on stmt: jump 18
2025-01-31 15:31:40,580 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7c89e8818c10>],
             34: [<numba.core.ir.Assign object at 0x7c89e8819420>]})
2025-01-31 15:31:40,580 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-31 15:31:40,580 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e881bf40>
2025-01-31 15:31:40,580 - DEBUG - on stmt: origsize = arg(0, name=origsize)
2025-01-31 15:31:40,580 - DEBUG - on stmt: shape = arg(1, name=shape)
2025-01-31 15:31:40,581 - DEBUG - on stmt: num_neg_value = const(int, 0)
2025-01-31 15:31:40,581 - DEBUG - on stmt: known_size = const(int, 1)
2025-01-31 15:31:40,581 - DEBUG - on stmt: $10load_global.2 = global(enumerate: <class 'enumerate'>)
2025-01-31 15:31:40,581 - DEBUG - on stmt: $14call_function.4 = call $10load_global.2(shape, func=$10load_global.2, args=[Var(shape, arrayobj.py:2046)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,581 - DEBUG - on stmt: $16get_iter.5 = getiter(value=$14call_function.4)
2025-01-31 15:31:40,581 - DEBUG - on stmt: $phi18.0 = $16get_iter.5
2025-01-31 15:31:40,581 - DEBUG - on stmt: jump 18
2025-01-31 15:31:40,581 - DEBUG - ==== SSA block rewrite pass on 18
2025-01-31 15:31:40,581 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e881bf40>
2025-01-31 15:31:40,581 - DEBUG - on stmt: $18for_iter.1 = iternext(value=$phi18.0)
2025-01-31 15:31:40,581 - DEBUG - on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
2025-01-31 15:31:40,581 - DEBUG - on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
2025-01-31 15:31:40,581 - DEBUG - on stmt: $phi20.1 = $18for_iter.2
2025-01-31 15:31:40,581 - DEBUG - on stmt: branch $18for_iter.3, 20, 58
2025-01-31 15:31:40,581 - DEBUG - ==== SSA block rewrite pass on 20
2025-01-31 15:31:40,581 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e881bf40>
2025-01-31 15:31:40,581 - DEBUG - on stmt: $20unpack_sequence.4 = exhaust_iter(value=$phi20.1, count=2)
2025-01-31 15:31:40,581 - DEBUG - on stmt: $20unpack_sequence.2 = static_getitem(value=$20unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2025-01-31 15:31:40,581 - DEBUG - on stmt: $20unpack_sequence.3 = static_getitem(value=$20unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2025-01-31 15:31:40,581 - DEBUG - on stmt: ax = $20unpack_sequence.2
2025-01-31 15:31:40,581 - DEBUG - on stmt: s = $20unpack_sequence.3
2025-01-31 15:31:40,581 - DEBUG - on stmt: $const28.6 = const(int, 0)
2025-01-31 15:31:40,581 - DEBUG - on stmt: $30compare_op.7 = s < $const28.6
2025-01-31 15:31:40,581 - DEBUG - on stmt: bool32 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,581 - DEBUG - on stmt: $32pred = call bool32($30compare_op.7, func=bool32, args=(Var($30compare_op.7, arrayobj.py:2050),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,581 - DEBUG - on stmt: branch $32pred, 34, 48
2025-01-31 15:31:40,581 - DEBUG - ==== SSA block rewrite pass on 34
2025-01-31 15:31:40,582 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e881bf40>
2025-01-31 15:31:40,582 - DEBUG - on stmt: $const36.2 = const(int, 1)
2025-01-31 15:31:40,582 - DEBUG - on stmt: $38inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:40,582 - DEBUG - find_def var='num_neg_value' stmt=$38inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:40,582 - DEBUG - find_def_from_top label 34
2025-01-31 15:31:40,582 - DEBUG - idom 20 from label 34
2025-01-31 15:31:40,582 - DEBUG - find_def_from_bottom label 20
2025-01-31 15:31:40,582 - DEBUG - find_def_from_top label 20
2025-01-31 15:31:40,582 - DEBUG - idom 18 from label 20
2025-01-31 15:31:40,582 - DEBUG - find_def_from_bottom label 18
2025-01-31 15:31:40,582 - DEBUG - find_def_from_top label 18
2025-01-31 15:31:40,582 - DEBUG - insert phi node num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[]) at 18
2025-01-31 15:31:40,582 - DEBUG - find_def_from_bottom label 0
2025-01-31 15:31:40,582 - DEBUG - incoming_def num_neg_value = const(int, 0)
2025-01-31 15:31:40,582 - DEBUG - find_def_from_bottom label 161
2025-01-31 15:31:40,582 - DEBUG - find_def_from_top label 161
2025-01-31 15:31:40,582 - DEBUG - insert phi node num_neg_value.3 = phi(incoming_values=[], incoming_blocks=[]) at 161
2025-01-31 15:31:40,582 - DEBUG - find_def_from_bottom label 48
2025-01-31 15:31:40,582 - DEBUG - find_def_from_top label 48
2025-01-31 15:31:40,582 - DEBUG - idom 20 from label 48
2025-01-31 15:31:40,582 - DEBUG - find_def_from_bottom label 20
2025-01-31 15:31:40,582 - DEBUG - find_def_from_top label 20
2025-01-31 15:31:40,582 - DEBUG - idom 18 from label 20
2025-01-31 15:31:40,582 - DEBUG - find_def_from_bottom label 18
2025-01-31 15:31:40,582 - DEBUG - incoming_def num_neg_value.2 = phi(incoming_values=[Var(num_neg_value, arrayobj.py:2047)], incoming_blocks=[0])
2025-01-31 15:31:40,582 - DEBUG - find_def_from_bottom label 34
2025-01-31 15:31:40,582 - DEBUG - incoming_def num_neg_value.1 = $38inplace_add.3
2025-01-31 15:31:40,582 - DEBUG - incoming_def num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:2051), Var(num_neg_value.1, arrayobj.py:2051)], incoming_blocks=[48, 34])
2025-01-31 15:31:40,582 - DEBUG - replaced with: $38inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:40,583 - DEBUG - on stmt: num_neg_value.1 = $38inplace_add.3
2025-01-31 15:31:40,583 - DEBUG - on stmt: neg_ax = ax
2025-01-31 15:31:40,583 - DEBUG - on stmt: jump 161
2025-01-31 15:31:40,583 - DEBUG - ==== SSA block rewrite pass on 48
2025-01-31 15:31:40,583 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e881bf40>
2025-01-31 15:31:40,583 - DEBUG - on stmt: $52inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:40,583 - DEBUG - on stmt: known_size = $52inplace_multiply.3
2025-01-31 15:31:40,583 - DEBUG - on stmt: jump 161
2025-01-31 15:31:40,583 - DEBUG - ==== SSA block rewrite pass on 58
2025-01-31 15:31:40,583 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e881bf40>
2025-01-31 15:31:40,583 - DEBUG - on stmt: $const60.1 = const(int, 0)
2025-01-31 15:31:40,583 - DEBUG - on stmt: $62compare_op.2 = num_neg_value == $const60.1
2025-01-31 15:31:40,583 - DEBUG - find_def var='num_neg_value' stmt=$62compare_op.2 = num_neg_value == $const60.1
2025-01-31 15:31:40,583 - DEBUG - find_def_from_top label 58
2025-01-31 15:31:40,583 - DEBUG - idom 18 from label 58
2025-01-31 15:31:40,583 - DEBUG - find_def_from_bottom label 18
2025-01-31 15:31:40,583 - DEBUG - replaced with: $62compare_op.2 = num_neg_value.2 == $const60.1
2025-01-31 15:31:40,583 - DEBUG - on stmt: bool64 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,583 - DEBUG - on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, arrayobj.py:2056),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,583 - DEBUG - on stmt: branch $64pred, 66, 86
2025-01-31 15:31:40,583 - DEBUG - ==== SSA block rewrite pass on 66
2025-01-31 15:31:40,583 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e881bf40>
2025-01-31 15:31:40,583 - DEBUG - on stmt: $70compare_op.2 = origsize != known_size
2025-01-31 15:31:40,583 - DEBUG - on stmt: bool72 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,583 - DEBUG - on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, arrayobj.py:2057),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,583 - DEBUG - on stmt: branch $72pred, 74, 82
2025-01-31 15:31:40,584 - DEBUG - ==== SSA block rewrite pass on 74
2025-01-31 15:31:40,584 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e881bf40>
2025-01-31 15:31:40,584 - DEBUG - on stmt: $74load_global.0 = global(ValueError: <class 'ValueError'>)
2025-01-31 15:31:40,584 - DEBUG - on stmt: $const76.1 = const(str, total size of new array must be unchanged)
2025-01-31 15:31:40,584 - DEBUG - on stmt: $78call_function.2 = call $74load_global.0($const76.1, func=$74load_global.0, args=[Var($const76.1, arrayobj.py:2058)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,584 - DEBUG - on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2025-01-31 15:31:40,584 - DEBUG - ==== SSA block rewrite pass on 82
2025-01-31 15:31:40,584 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e881bf40>
2025-01-31 15:31:40,584 - DEBUG - on stmt: $const82.0 = const(NoneType, None)
2025-01-31 15:31:40,584 - DEBUG - on stmt: $84return_value.1 = cast(value=$const82.0)
2025-01-31 15:31:40,584 - DEBUG - on stmt: return $84return_value.1
2025-01-31 15:31:40,584 - DEBUG - ==== SSA block rewrite pass on 86
2025-01-31 15:31:40,584 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e881bf40>
2025-01-31 15:31:40,584 - DEBUG - on stmt: $const88.1 = const(int, 1)
2025-01-31 15:31:40,584 - DEBUG - on stmt: $90compare_op.2 = num_neg_value == $const88.1
2025-01-31 15:31:40,584 - DEBUG - find_def var='num_neg_value' stmt=$90compare_op.2 = num_neg_value == $const88.1
2025-01-31 15:31:40,584 - DEBUG - find_def_from_top label 86
2025-01-31 15:31:40,584 - DEBUG - idom 58 from label 86
2025-01-31 15:31:40,584 - DEBUG - find_def_from_bottom label 58
2025-01-31 15:31:40,584 - DEBUG - find_def_from_top label 58
2025-01-31 15:31:40,584 - DEBUG - idom 18 from label 58
2025-01-31 15:31:40,584 - DEBUG - find_def_from_bottom label 18
2025-01-31 15:31:40,584 - DEBUG - replaced with: $90compare_op.2 = num_neg_value.2 == $const88.1
2025-01-31 15:31:40,584 - DEBUG - on stmt: bool92 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,584 - DEBUG - on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, arrayobj.py:2060),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,584 - DEBUG - on stmt: branch $92pred, 94, 160
2025-01-31 15:31:40,584 - DEBUG - ==== SSA block rewrite pass on 94
2025-01-31 15:31:40,585 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e881bf40>
2025-01-31 15:31:40,585 - DEBUG - on stmt: $const96.1 = const(int, 0)
2025-01-31 15:31:40,585 - DEBUG - on stmt: $98compare_op.2 = known_size == $const96.1
2025-01-31 15:31:40,585 - DEBUG - on stmt: bool100 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,585 - DEBUG - on stmt: $100pred = call bool100($98compare_op.2, func=bool100, args=(Var($98compare_op.2, arrayobj.py:2062),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,585 - DEBUG - on stmt: branch $100pred, 102, 116
2025-01-31 15:31:40,585 - DEBUG - ==== SSA block rewrite pass on 102
2025-01-31 15:31:40,585 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e881bf40>
2025-01-31 15:31:40,585 - DEBUG - on stmt: inferred = const(int, 0)
2025-01-31 15:31:40,585 - DEBUG - on stmt: $const108.2 = const(int, 0)
2025-01-31 15:31:40,585 - DEBUG - on stmt: ok = origsize == $const108.2
2025-01-31 15:31:40,585 - DEBUG - on stmt: jump 136
2025-01-31 15:31:40,585 - DEBUG - ==== SSA block rewrite pass on 116
2025-01-31 15:31:40,585 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e881bf40>
2025-01-31 15:31:40,585 - DEBUG - on stmt: inferred = origsize // known_size
2025-01-31 15:31:40,585 - DEBUG - on stmt: $128binary_modulo.5 = origsize % known_size
2025-01-31 15:31:40,585 - DEBUG - on stmt: $const130.6 = const(int, 0)
2025-01-31 15:31:40,585 - DEBUG - on stmt: ok = $128binary_modulo.5 == $const130.6
2025-01-31 15:31:40,585 - DEBUG - on stmt: jump 136
2025-01-31 15:31:40,585 - DEBUG - ==== SSA block rewrite pass on 136
2025-01-31 15:31:40,585 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e881bf40>
2025-01-31 15:31:40,585 - DEBUG - on stmt: bool138 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,585 - DEBUG - on stmt: $138pred = call bool138(ok, func=bool138, args=(Var(ok, arrayobj.py:2064),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,585 - DEBUG - on stmt: branch $138pred, 148, 140
2025-01-31 15:31:40,585 - DEBUG - ==== SSA block rewrite pass on 140
2025-01-31 15:31:40,585 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e881bf40>
2025-01-31 15:31:40,585 - DEBUG - on stmt: $140load_global.0 = global(ValueError: <class 'ValueError'>)
2025-01-31 15:31:40,586 - DEBUG - on stmt: $const142.1 = const(str, total size of new array must be unchanged)
2025-01-31 15:31:40,586 - DEBUG - on stmt: $144call_function.2 = call $140load_global.0($const142.1, func=$140load_global.0, args=[Var($const142.1, arrayobj.py:2069)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,586 - DEBUG - on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2025-01-31 15:31:40,586 - DEBUG - ==== SSA block rewrite pass on 148
2025-01-31 15:31:40,586 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e881bf40>
2025-01-31 15:31:40,586 - DEBUG - on stmt: shape[neg_ax] = inferred
2025-01-31 15:31:40,586 - DEBUG - on stmt: $const156.3 = const(NoneType, None)
2025-01-31 15:31:40,586 - DEBUG - on stmt: $158return_value.4 = cast(value=$const156.3)
2025-01-31 15:31:40,586 - DEBUG - on stmt: return $158return_value.4
2025-01-31 15:31:40,586 - DEBUG - ==== SSA block rewrite pass on 160
2025-01-31 15:31:40,586 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e881bf40>
2025-01-31 15:31:40,586 - DEBUG - on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
2025-01-31 15:31:40,586 - DEBUG - on stmt: $const162.1 = const(str, multiple negative shape values)
2025-01-31 15:31:40,586 - DEBUG - on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:2073)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,586 - DEBUG - on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
2025-01-31 15:31:40,586 - DEBUG - ==== SSA block rewrite pass on 161
2025-01-31 15:31:40,586 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e881bf40>
2025-01-31 15:31:40,586 - DEBUG - on stmt: jump 18
2025-01-31 15:31:40,586 - DEBUG - Fix SSA violator on var known_size
2025-01-31 15:31:40,586 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-31 15:31:40,586 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e88197e0>
2025-01-31 15:31:40,586 - DEBUG - on stmt: origsize = arg(0, name=origsize)
2025-01-31 15:31:40,586 - DEBUG - on stmt: shape = arg(1, name=shape)
2025-01-31 15:31:40,586 - DEBUG - on stmt: num_neg_value = const(int, 0)
2025-01-31 15:31:40,586 - DEBUG - on stmt: known_size = const(int, 1)
2025-01-31 15:31:40,586 - DEBUG - first assign: known_size
2025-01-31 15:31:40,586 - DEBUG - replaced with: known_size = const(int, 1)
2025-01-31 15:31:40,586 - DEBUG - on stmt: $10load_global.2 = global(enumerate: <class 'enumerate'>)
2025-01-31 15:31:40,587 - DEBUG - on stmt: $14call_function.4 = call $10load_global.2(shape, func=$10load_global.2, args=[Var(shape, arrayobj.py:2046)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,587 - DEBUG - on stmt: $16get_iter.5 = getiter(value=$14call_function.4)
2025-01-31 15:31:40,587 - DEBUG - on stmt: $phi18.0 = $16get_iter.5
2025-01-31 15:31:40,587 - DEBUG - on stmt: jump 18
2025-01-31 15:31:40,587 - DEBUG - ==== SSA block rewrite pass on 18
2025-01-31 15:31:40,587 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e88197e0>
2025-01-31 15:31:40,587 - DEBUG - on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value, arrayobj.py:2047), Var(num_neg_value.3, arrayobj.py:2051)], incoming_blocks=[0, 161])
2025-01-31 15:31:40,587 - DEBUG - on stmt: $18for_iter.1 = iternext(value=$phi18.0)
2025-01-31 15:31:40,587 - DEBUG - on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
2025-01-31 15:31:40,587 - DEBUG - on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
2025-01-31 15:31:40,587 - DEBUG - on stmt: $phi20.1 = $18for_iter.2
2025-01-31 15:31:40,587 - DEBUG - on stmt: branch $18for_iter.3, 20, 58
2025-01-31 15:31:40,587 - DEBUG - ==== SSA block rewrite pass on 20
2025-01-31 15:31:40,587 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e88197e0>
2025-01-31 15:31:40,587 - DEBUG - on stmt: $20unpack_sequence.4 = exhaust_iter(value=$phi20.1, count=2)
2025-01-31 15:31:40,587 - DEBUG - on stmt: $20unpack_sequence.2 = static_getitem(value=$20unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2025-01-31 15:31:40,587 - DEBUG - on stmt: $20unpack_sequence.3 = static_getitem(value=$20unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2025-01-31 15:31:40,587 - DEBUG - on stmt: ax = $20unpack_sequence.2
2025-01-31 15:31:40,587 - DEBUG - on stmt: s = $20unpack_sequence.3
2025-01-31 15:31:40,587 - DEBUG - on stmt: $const28.6 = const(int, 0)
2025-01-31 15:31:40,587 - DEBUG - on stmt: $30compare_op.7 = s < $const28.6
2025-01-31 15:31:40,587 - DEBUG - on stmt: bool32 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,587 - DEBUG - on stmt: $32pred = call bool32($30compare_op.7, func=bool32, args=(Var($30compare_op.7, arrayobj.py:2050),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,587 - DEBUG - on stmt: branch $32pred, 34, 48
2025-01-31 15:31:40,587 - DEBUG - ==== SSA block rewrite pass on 34
2025-01-31 15:31:40,587 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e88197e0>
2025-01-31 15:31:40,587 - DEBUG - on stmt: $const36.2 = const(int, 1)
2025-01-31 15:31:40,587 - DEBUG - on stmt: $38inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:40,587 - DEBUG - on stmt: num_neg_value.1 = $38inplace_add.3
2025-01-31 15:31:40,588 - DEBUG - on stmt: neg_ax = ax
2025-01-31 15:31:40,588 - DEBUG - on stmt: jump 161
2025-01-31 15:31:40,588 - DEBUG - ==== SSA block rewrite pass on 48
2025-01-31 15:31:40,588 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e88197e0>
2025-01-31 15:31:40,588 - DEBUG - on stmt: $52inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:40,588 - DEBUG - on stmt: known_size = $52inplace_multiply.3
2025-01-31 15:31:40,588 - DEBUG - replaced with: known_size.1 = $52inplace_multiply.3
2025-01-31 15:31:40,588 - DEBUG - on stmt: jump 161
2025-01-31 15:31:40,588 - DEBUG - ==== SSA block rewrite pass on 58
2025-01-31 15:31:40,588 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e88197e0>
2025-01-31 15:31:40,588 - DEBUG - on stmt: $const60.1 = const(int, 0)
2025-01-31 15:31:40,588 - DEBUG - on stmt: $62compare_op.2 = num_neg_value.2 == $const60.1
2025-01-31 15:31:40,588 - DEBUG - on stmt: bool64 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,588 - DEBUG - on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, arrayobj.py:2056),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,588 - DEBUG - on stmt: branch $64pred, 66, 86
2025-01-31 15:31:40,588 - DEBUG - ==== SSA block rewrite pass on 66
2025-01-31 15:31:40,588 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e88197e0>
2025-01-31 15:31:40,588 - DEBUG - on stmt: $70compare_op.2 = origsize != known_size
2025-01-31 15:31:40,588 - DEBUG - on stmt: bool72 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,588 - DEBUG - on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, arrayobj.py:2057),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,588 - DEBUG - on stmt: branch $72pred, 74, 82
2025-01-31 15:31:40,588 - DEBUG - ==== SSA block rewrite pass on 74
2025-01-31 15:31:40,588 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e88197e0>
2025-01-31 15:31:40,588 - DEBUG - on stmt: $74load_global.0 = global(ValueError: <class 'ValueError'>)
2025-01-31 15:31:40,588 - DEBUG - on stmt: $const76.1 = const(str, total size of new array must be unchanged)
2025-01-31 15:31:40,588 - DEBUG - on stmt: $78call_function.2 = call $74load_global.0($const76.1, func=$74load_global.0, args=[Var($const76.1, arrayobj.py:2058)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,588 - DEBUG - on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2025-01-31 15:31:40,588 - DEBUG - ==== SSA block rewrite pass on 82
2025-01-31 15:31:40,588 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e88197e0>
2025-01-31 15:31:40,589 - DEBUG - on stmt: $const82.0 = const(NoneType, None)
2025-01-31 15:31:40,589 - DEBUG - on stmt: $84return_value.1 = cast(value=$const82.0)
2025-01-31 15:31:40,589 - DEBUG - on stmt: return $84return_value.1
2025-01-31 15:31:40,589 - DEBUG - ==== SSA block rewrite pass on 86
2025-01-31 15:31:40,589 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e88197e0>
2025-01-31 15:31:40,589 - DEBUG - on stmt: $const88.1 = const(int, 1)
2025-01-31 15:31:40,589 - DEBUG - on stmt: $90compare_op.2 = num_neg_value.2 == $const88.1
2025-01-31 15:31:40,589 - DEBUG - on stmt: bool92 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,589 - DEBUG - on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, arrayobj.py:2060),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,589 - DEBUG - on stmt: branch $92pred, 94, 160
2025-01-31 15:31:40,589 - DEBUG - ==== SSA block rewrite pass on 94
2025-01-31 15:31:40,589 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e88197e0>
2025-01-31 15:31:40,589 - DEBUG - on stmt: $const96.1 = const(int, 0)
2025-01-31 15:31:40,589 - DEBUG - on stmt: $98compare_op.2 = known_size == $const96.1
2025-01-31 15:31:40,589 - DEBUG - on stmt: bool100 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,589 - DEBUG - on stmt: $100pred = call bool100($98compare_op.2, func=bool100, args=(Var($98compare_op.2, arrayobj.py:2062),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,589 - DEBUG - on stmt: branch $100pred, 102, 116
2025-01-31 15:31:40,589 - DEBUG - ==== SSA block rewrite pass on 102
2025-01-31 15:31:40,589 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e88197e0>
2025-01-31 15:31:40,589 - DEBUG - on stmt: inferred = const(int, 0)
2025-01-31 15:31:40,589 - DEBUG - on stmt: $const108.2 = const(int, 0)
2025-01-31 15:31:40,589 - DEBUG - on stmt: ok = origsize == $const108.2
2025-01-31 15:31:40,589 - DEBUG - on stmt: jump 136
2025-01-31 15:31:40,589 - DEBUG - ==== SSA block rewrite pass on 116
2025-01-31 15:31:40,589 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e88197e0>
2025-01-31 15:31:40,589 - DEBUG - on stmt: inferred = origsize // known_size
2025-01-31 15:31:40,589 - DEBUG - on stmt: $128binary_modulo.5 = origsize % known_size
2025-01-31 15:31:40,589 - DEBUG - on stmt: $const130.6 = const(int, 0)
2025-01-31 15:31:40,589 - DEBUG - on stmt: ok = $128binary_modulo.5 == $const130.6
2025-01-31 15:31:40,590 - DEBUG - on stmt: jump 136
2025-01-31 15:31:40,590 - DEBUG - ==== SSA block rewrite pass on 136
2025-01-31 15:31:40,590 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e88197e0>
2025-01-31 15:31:40,590 - DEBUG - on stmt: bool138 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,590 - DEBUG - on stmt: $138pred = call bool138(ok, func=bool138, args=(Var(ok, arrayobj.py:2064),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,590 - DEBUG - on stmt: branch $138pred, 148, 140
2025-01-31 15:31:40,590 - DEBUG - ==== SSA block rewrite pass on 140
2025-01-31 15:31:40,590 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e88197e0>
2025-01-31 15:31:40,590 - DEBUG - on stmt: $140load_global.0 = global(ValueError: <class 'ValueError'>)
2025-01-31 15:31:40,590 - DEBUG - on stmt: $const142.1 = const(str, total size of new array must be unchanged)
2025-01-31 15:31:40,590 - DEBUG - on stmt: $144call_function.2 = call $140load_global.0($const142.1, func=$140load_global.0, args=[Var($const142.1, arrayobj.py:2069)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,590 - DEBUG - on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2025-01-31 15:31:40,590 - DEBUG - ==== SSA block rewrite pass on 148
2025-01-31 15:31:40,590 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e88197e0>
2025-01-31 15:31:40,590 - DEBUG - on stmt: shape[neg_ax] = inferred
2025-01-31 15:31:40,590 - DEBUG - on stmt: $const156.3 = const(NoneType, None)
2025-01-31 15:31:40,590 - DEBUG - on stmt: $158return_value.4 = cast(value=$const156.3)
2025-01-31 15:31:40,590 - DEBUG - on stmt: return $158return_value.4
2025-01-31 15:31:40,590 - DEBUG - ==== SSA block rewrite pass on 160
2025-01-31 15:31:40,590 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e88197e0>
2025-01-31 15:31:40,590 - DEBUG - on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
2025-01-31 15:31:40,590 - DEBUG - on stmt: $const162.1 = const(str, multiple negative shape values)
2025-01-31 15:31:40,590 - DEBUG - on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:2073)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,590 - DEBUG - on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
2025-01-31 15:31:40,590 - DEBUG - ==== SSA block rewrite pass on 161
2025-01-31 15:31:40,590 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e88197e0>
2025-01-31 15:31:40,590 - DEBUG - on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:2051), Var(num_neg_value.1, arrayobj.py:2051)], incoming_blocks=[48, 34])
2025-01-31 15:31:40,590 - DEBUG - on stmt: jump 18
2025-01-31 15:31:40,591 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7c89e8818190>],
             48: [<numba.core.ir.Assign object at 0x7c89e8d58d90>]})
2025-01-31 15:31:40,591 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-31 15:31:40,591 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e881bf40>
2025-01-31 15:31:40,591 - DEBUG - on stmt: origsize = arg(0, name=origsize)
2025-01-31 15:31:40,591 - DEBUG - on stmt: shape = arg(1, name=shape)
2025-01-31 15:31:40,591 - DEBUG - on stmt: num_neg_value = const(int, 0)
2025-01-31 15:31:40,591 - DEBUG - on stmt: known_size = const(int, 1)
2025-01-31 15:31:40,591 - DEBUG - on stmt: $10load_global.2 = global(enumerate: <class 'enumerate'>)
2025-01-31 15:31:40,591 - DEBUG - on stmt: $14call_function.4 = call $10load_global.2(shape, func=$10load_global.2, args=[Var(shape, arrayobj.py:2046)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,591 - DEBUG - on stmt: $16get_iter.5 = getiter(value=$14call_function.4)
2025-01-31 15:31:40,591 - DEBUG - on stmt: $phi18.0 = $16get_iter.5
2025-01-31 15:31:40,591 - DEBUG - on stmt: jump 18
2025-01-31 15:31:40,591 - DEBUG - ==== SSA block rewrite pass on 18
2025-01-31 15:31:40,591 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e881bf40>
2025-01-31 15:31:40,591 - DEBUG - on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value, arrayobj.py:2047), Var(num_neg_value.3, arrayobj.py:2051)], incoming_blocks=[0, 161])
2025-01-31 15:31:40,591 - DEBUG - on stmt: $18for_iter.1 = iternext(value=$phi18.0)
2025-01-31 15:31:40,591 - DEBUG - on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
2025-01-31 15:31:40,591 - DEBUG - on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
2025-01-31 15:31:40,591 - DEBUG - on stmt: $phi20.1 = $18for_iter.2
2025-01-31 15:31:40,591 - DEBUG - on stmt: branch $18for_iter.3, 20, 58
2025-01-31 15:31:40,591 - DEBUG - ==== SSA block rewrite pass on 20
2025-01-31 15:31:40,591 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e881bf40>
2025-01-31 15:31:40,591 - DEBUG - on stmt: $20unpack_sequence.4 = exhaust_iter(value=$phi20.1, count=2)
2025-01-31 15:31:40,591 - DEBUG - on stmt: $20unpack_sequence.2 = static_getitem(value=$20unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2025-01-31 15:31:40,591 - DEBUG - on stmt: $20unpack_sequence.3 = static_getitem(value=$20unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2025-01-31 15:31:40,591 - DEBUG - on stmt: ax = $20unpack_sequence.2
2025-01-31 15:31:40,591 - DEBUG - on stmt: s = $20unpack_sequence.3
2025-01-31 15:31:40,591 - DEBUG - on stmt: $const28.6 = const(int, 0)
2025-01-31 15:31:40,592 - DEBUG - on stmt: $30compare_op.7 = s < $const28.6
2025-01-31 15:31:40,592 - DEBUG - on stmt: bool32 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,592 - DEBUG - on stmt: $32pred = call bool32($30compare_op.7, func=bool32, args=(Var($30compare_op.7, arrayobj.py:2050),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,592 - DEBUG - on stmt: branch $32pred, 34, 48
2025-01-31 15:31:40,592 - DEBUG - ==== SSA block rewrite pass on 34
2025-01-31 15:31:40,592 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e881bf40>
2025-01-31 15:31:40,592 - DEBUG - on stmt: $const36.2 = const(int, 1)
2025-01-31 15:31:40,592 - DEBUG - on stmt: $38inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:40,592 - DEBUG - on stmt: num_neg_value.1 = $38inplace_add.3
2025-01-31 15:31:40,592 - DEBUG - on stmt: neg_ax = ax
2025-01-31 15:31:40,592 - DEBUG - on stmt: jump 161
2025-01-31 15:31:40,592 - DEBUG - ==== SSA block rewrite pass on 48
2025-01-31 15:31:40,592 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e881bf40>
2025-01-31 15:31:40,592 - DEBUG - on stmt: $52inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:40,592 - DEBUG - find_def var='known_size' stmt=$52inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:40,592 - DEBUG - find_def_from_top label 48
2025-01-31 15:31:40,592 - DEBUG - idom 20 from label 48
2025-01-31 15:31:40,592 - DEBUG - find_def_from_bottom label 20
2025-01-31 15:31:40,592 - DEBUG - find_def_from_top label 20
2025-01-31 15:31:40,592 - DEBUG - idom 18 from label 20
2025-01-31 15:31:40,592 - DEBUG - find_def_from_bottom label 18
2025-01-31 15:31:40,592 - DEBUG - find_def_from_top label 18
2025-01-31 15:31:40,592 - DEBUG - insert phi node known_size.2 = phi(incoming_values=[], incoming_blocks=[]) at 18
2025-01-31 15:31:40,592 - DEBUG - find_def_from_bottom label 0
2025-01-31 15:31:40,592 - DEBUG - incoming_def known_size = const(int, 1)
2025-01-31 15:31:40,592 - DEBUG - find_def_from_bottom label 161
2025-01-31 15:31:40,592 - DEBUG - find_def_from_top label 161
2025-01-31 15:31:40,592 - DEBUG - insert phi node known_size.3 = phi(incoming_values=[], incoming_blocks=[]) at 161
2025-01-31 15:31:40,592 - DEBUG - find_def_from_bottom label 48
2025-01-31 15:31:40,593 - DEBUG - incoming_def known_size.1 = $52inplace_multiply.3
2025-01-31 15:31:40,593 - DEBUG - find_def_from_bottom label 34
2025-01-31 15:31:40,593 - DEBUG - find_def_from_top label 34
2025-01-31 15:31:40,593 - DEBUG - idom 20 from label 34
2025-01-31 15:31:40,593 - DEBUG - find_def_from_bottom label 20
2025-01-31 15:31:40,593 - DEBUG - find_def_from_top label 20
2025-01-31 15:31:40,593 - DEBUG - idom 18 from label 20
2025-01-31 15:31:40,593 - DEBUG - find_def_from_bottom label 18
2025-01-31 15:31:40,593 - DEBUG - incoming_def known_size.2 = phi(incoming_values=[Var(known_size, arrayobj.py:2048)], incoming_blocks=[0])
2025-01-31 15:31:40,593 - DEBUG - incoming_def known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:2054), Var(known_size.2, arrayobj.py:2054)], incoming_blocks=[48, 34])
2025-01-31 15:31:40,593 - DEBUG - replaced with: $52inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:40,593 - DEBUG - on stmt: known_size.1 = $52inplace_multiply.3
2025-01-31 15:31:40,593 - DEBUG - on stmt: jump 161
2025-01-31 15:31:40,593 - DEBUG - ==== SSA block rewrite pass on 58
2025-01-31 15:31:40,593 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e881bf40>
2025-01-31 15:31:40,593 - DEBUG - on stmt: $const60.1 = const(int, 0)
2025-01-31 15:31:40,593 - DEBUG - on stmt: $62compare_op.2 = num_neg_value.2 == $const60.1
2025-01-31 15:31:40,593 - DEBUG - on stmt: bool64 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,593 - DEBUG - on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, arrayobj.py:2056),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,593 - DEBUG - on stmt: branch $64pred, 66, 86
2025-01-31 15:31:40,593 - DEBUG - ==== SSA block rewrite pass on 66
2025-01-31 15:31:40,593 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e881bf40>
2025-01-31 15:31:40,593 - DEBUG - on stmt: $70compare_op.2 = origsize != known_size
2025-01-31 15:31:40,593 - DEBUG - find_def var='known_size' stmt=$70compare_op.2 = origsize != known_size
2025-01-31 15:31:40,593 - DEBUG - find_def_from_top label 66
2025-01-31 15:31:40,593 - DEBUG - idom 58 from label 66
2025-01-31 15:31:40,593 - DEBUG - find_def_from_bottom label 58
2025-01-31 15:31:40,593 - DEBUG - find_def_from_top label 58
2025-01-31 15:31:40,593 - DEBUG - idom 18 from label 58
2025-01-31 15:31:40,594 - DEBUG - find_def_from_bottom label 18
2025-01-31 15:31:40,594 - DEBUG - replaced with: $70compare_op.2 = origsize != known_size.2
2025-01-31 15:31:40,594 - DEBUG - on stmt: bool72 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,594 - DEBUG - on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, arrayobj.py:2057),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,594 - DEBUG - on stmt: branch $72pred, 74, 82
2025-01-31 15:31:40,594 - DEBUG - ==== SSA block rewrite pass on 74
2025-01-31 15:31:40,594 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e881bf40>
2025-01-31 15:31:40,594 - DEBUG - on stmt: $74load_global.0 = global(ValueError: <class 'ValueError'>)
2025-01-31 15:31:40,594 - DEBUG - on stmt: $const76.1 = const(str, total size of new array must be unchanged)
2025-01-31 15:31:40,594 - DEBUG - on stmt: $78call_function.2 = call $74load_global.0($const76.1, func=$74load_global.0, args=[Var($const76.1, arrayobj.py:2058)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,594 - DEBUG - on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2025-01-31 15:31:40,594 - DEBUG - ==== SSA block rewrite pass on 82
2025-01-31 15:31:40,594 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e881bf40>
2025-01-31 15:31:40,594 - DEBUG - on stmt: $const82.0 = const(NoneType, None)
2025-01-31 15:31:40,594 - DEBUG - on stmt: $84return_value.1 = cast(value=$const82.0)
2025-01-31 15:31:40,594 - DEBUG - on stmt: return $84return_value.1
2025-01-31 15:31:40,594 - DEBUG - ==== SSA block rewrite pass on 86
2025-01-31 15:31:40,594 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e881bf40>
2025-01-31 15:31:40,594 - DEBUG - on stmt: $const88.1 = const(int, 1)
2025-01-31 15:31:40,594 - DEBUG - on stmt: $90compare_op.2 = num_neg_value.2 == $const88.1
2025-01-31 15:31:40,594 - DEBUG - on stmt: bool92 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,594 - DEBUG - on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, arrayobj.py:2060),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,594 - DEBUG - on stmt: branch $92pred, 94, 160
2025-01-31 15:31:40,594 - DEBUG - ==== SSA block rewrite pass on 94
2025-01-31 15:31:40,594 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e881bf40>
2025-01-31 15:31:40,594 - DEBUG - on stmt: $const96.1 = const(int, 0)
2025-01-31 15:31:40,594 - DEBUG - on stmt: $98compare_op.2 = known_size == $const96.1
2025-01-31 15:31:40,595 - DEBUG - find_def var='known_size' stmt=$98compare_op.2 = known_size == $const96.1
2025-01-31 15:31:40,595 - DEBUG - find_def_from_top label 94
2025-01-31 15:31:40,595 - DEBUG - idom 86 from label 94
2025-01-31 15:31:40,595 - DEBUG - find_def_from_bottom label 86
2025-01-31 15:31:40,595 - DEBUG - find_def_from_top label 86
2025-01-31 15:31:40,595 - DEBUG - idom 58 from label 86
2025-01-31 15:31:40,595 - DEBUG - find_def_from_bottom label 58
2025-01-31 15:31:40,595 - DEBUG - find_def_from_top label 58
2025-01-31 15:31:40,595 - DEBUG - idom 18 from label 58
2025-01-31 15:31:40,595 - DEBUG - find_def_from_bottom label 18
2025-01-31 15:31:40,595 - DEBUG - replaced with: $98compare_op.2 = known_size.2 == $const96.1
2025-01-31 15:31:40,595 - DEBUG - on stmt: bool100 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,595 - DEBUG - on stmt: $100pred = call bool100($98compare_op.2, func=bool100, args=(Var($98compare_op.2, arrayobj.py:2062),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,595 - DEBUG - on stmt: branch $100pred, 102, 116
2025-01-31 15:31:40,595 - DEBUG - ==== SSA block rewrite pass on 102
2025-01-31 15:31:40,595 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e881bf40>
2025-01-31 15:31:40,595 - DEBUG - on stmt: inferred = const(int, 0)
2025-01-31 15:31:40,595 - DEBUG - on stmt: $const108.2 = const(int, 0)
2025-01-31 15:31:40,595 - DEBUG - on stmt: ok = origsize == $const108.2
2025-01-31 15:31:40,595 - DEBUG - on stmt: jump 136
2025-01-31 15:31:40,595 - DEBUG - ==== SSA block rewrite pass on 116
2025-01-31 15:31:40,595 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e881bf40>
2025-01-31 15:31:40,595 - DEBUG - on stmt: inferred = origsize // known_size
2025-01-31 15:31:40,595 - DEBUG - find_def var='known_size' stmt=inferred = origsize // known_size
2025-01-31 15:31:40,595 - DEBUG - find_def_from_top label 116
2025-01-31 15:31:40,595 - DEBUG - idom 94 from label 116
2025-01-31 15:31:40,595 - DEBUG - find_def_from_bottom label 94
2025-01-31 15:31:40,595 - DEBUG - find_def_from_top label 94
2025-01-31 15:31:40,595 - DEBUG - idom 86 from label 94
2025-01-31 15:31:40,595 - DEBUG - find_def_from_bottom label 86
2025-01-31 15:31:40,595 - DEBUG - find_def_from_top label 86
2025-01-31 15:31:40,596 - DEBUG - idom 58 from label 86
2025-01-31 15:31:40,596 - DEBUG - find_def_from_bottom label 58
2025-01-31 15:31:40,596 - DEBUG - find_def_from_top label 58
2025-01-31 15:31:40,596 - DEBUG - idom 18 from label 58
2025-01-31 15:31:40,596 - DEBUG - find_def_from_bottom label 18
2025-01-31 15:31:40,596 - DEBUG - replaced with: inferred = origsize // known_size.2
2025-01-31 15:31:40,596 - DEBUG - on stmt: $128binary_modulo.5 = origsize % known_size
2025-01-31 15:31:40,596 - DEBUG - find_def var='known_size' stmt=$128binary_modulo.5 = origsize % known_size
2025-01-31 15:31:40,596 - DEBUG - find_def_from_top label 116
2025-01-31 15:31:40,596 - DEBUG - idom 94 from label 116
2025-01-31 15:31:40,596 - DEBUG - find_def_from_bottom label 94
2025-01-31 15:31:40,596 - DEBUG - find_def_from_top label 94
2025-01-31 15:31:40,596 - DEBUG - idom 86 from label 94
2025-01-31 15:31:40,596 - DEBUG - find_def_from_bottom label 86
2025-01-31 15:31:40,596 - DEBUG - find_def_from_top label 86
2025-01-31 15:31:40,596 - DEBUG - idom 58 from label 86
2025-01-31 15:31:40,596 - DEBUG - find_def_from_bottom label 58
2025-01-31 15:31:40,596 - DEBUG - find_def_from_top label 58
2025-01-31 15:31:40,596 - DEBUG - idom 18 from label 58
2025-01-31 15:31:40,596 - DEBUG - find_def_from_bottom label 18
2025-01-31 15:31:40,596 - DEBUG - replaced with: $128binary_modulo.5 = origsize % known_size.2
2025-01-31 15:31:40,596 - DEBUG - on stmt: $const130.6 = const(int, 0)
2025-01-31 15:31:40,596 - DEBUG - on stmt: ok = $128binary_modulo.5 == $const130.6
2025-01-31 15:31:40,596 - DEBUG - on stmt: jump 136
2025-01-31 15:31:40,596 - DEBUG - ==== SSA block rewrite pass on 136
2025-01-31 15:31:40,596 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e881bf40>
2025-01-31 15:31:40,596 - DEBUG - on stmt: bool138 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,596 - DEBUG - on stmt: $138pred = call bool138(ok, func=bool138, args=(Var(ok, arrayobj.py:2064),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,596 - DEBUG - on stmt: branch $138pred, 148, 140
2025-01-31 15:31:40,596 - DEBUG - ==== SSA block rewrite pass on 140
2025-01-31 15:31:40,597 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e881bf40>
2025-01-31 15:31:40,597 - DEBUG - on stmt: $140load_global.0 = global(ValueError: <class 'ValueError'>)
2025-01-31 15:31:40,597 - DEBUG - on stmt: $const142.1 = const(str, total size of new array must be unchanged)
2025-01-31 15:31:40,597 - DEBUG - on stmt: $144call_function.2 = call $140load_global.0($const142.1, func=$140load_global.0, args=[Var($const142.1, arrayobj.py:2069)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,597 - DEBUG - on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2025-01-31 15:31:40,597 - DEBUG - ==== SSA block rewrite pass on 148
2025-01-31 15:31:40,597 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e881bf40>
2025-01-31 15:31:40,597 - DEBUG - on stmt: shape[neg_ax] = inferred
2025-01-31 15:31:40,597 - DEBUG - on stmt: $const156.3 = const(NoneType, None)
2025-01-31 15:31:40,597 - DEBUG - on stmt: $158return_value.4 = cast(value=$const156.3)
2025-01-31 15:31:40,597 - DEBUG - on stmt: return $158return_value.4
2025-01-31 15:31:40,597 - DEBUG - ==== SSA block rewrite pass on 160
2025-01-31 15:31:40,597 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e881bf40>
2025-01-31 15:31:40,597 - DEBUG - on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
2025-01-31 15:31:40,597 - DEBUG - on stmt: $const162.1 = const(str, multiple negative shape values)
2025-01-31 15:31:40,597 - DEBUG - on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:2073)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,597 - DEBUG - on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
2025-01-31 15:31:40,597 - DEBUG - ==== SSA block rewrite pass on 161
2025-01-31 15:31:40,597 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e881bf40>
2025-01-31 15:31:40,597 - DEBUG - on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:2051), Var(num_neg_value.1, arrayobj.py:2051)], incoming_blocks=[48, 34])
2025-01-31 15:31:40,597 - DEBUG - on stmt: jump 18
2025-01-31 15:31:40,597 - DEBUG - Fix SSA violator on var inferred
2025-01-31 15:31:40,597 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-31 15:31:40,597 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e88180d0>
2025-01-31 15:31:40,597 - DEBUG - on stmt: origsize = arg(0, name=origsize)
2025-01-31 15:31:40,597 - DEBUG - on stmt: shape = arg(1, name=shape)
2025-01-31 15:31:40,597 - DEBUG - on stmt: num_neg_value = const(int, 0)
2025-01-31 15:31:40,597 - DEBUG - on stmt: known_size = const(int, 1)
2025-01-31 15:31:40,598 - DEBUG - on stmt: $10load_global.2 = global(enumerate: <class 'enumerate'>)
2025-01-31 15:31:40,598 - DEBUG - on stmt: $14call_function.4 = call $10load_global.2(shape, func=$10load_global.2, args=[Var(shape, arrayobj.py:2046)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,598 - DEBUG - on stmt: $16get_iter.5 = getiter(value=$14call_function.4)
2025-01-31 15:31:40,598 - DEBUG - on stmt: $phi18.0 = $16get_iter.5
2025-01-31 15:31:40,598 - DEBUG - on stmt: jump 18
2025-01-31 15:31:40,598 - DEBUG - ==== SSA block rewrite pass on 18
2025-01-31 15:31:40,598 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e88180d0>
2025-01-31 15:31:40,598 - DEBUG - on stmt: known_size.2 = phi(incoming_values=[Var(known_size, arrayobj.py:2048), Var(known_size.3, arrayobj.py:2054)], incoming_blocks=[0, 161])
2025-01-31 15:31:40,598 - DEBUG - on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value, arrayobj.py:2047), Var(num_neg_value.3, arrayobj.py:2051)], incoming_blocks=[0, 161])
2025-01-31 15:31:40,598 - DEBUG - on stmt: $18for_iter.1 = iternext(value=$phi18.0)
2025-01-31 15:31:40,598 - DEBUG - on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
2025-01-31 15:31:40,598 - DEBUG - on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
2025-01-31 15:31:40,598 - DEBUG - on stmt: $phi20.1 = $18for_iter.2
2025-01-31 15:31:40,598 - DEBUG - on stmt: branch $18for_iter.3, 20, 58
2025-01-31 15:31:40,598 - DEBUG - ==== SSA block rewrite pass on 20
2025-01-31 15:31:40,598 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e88180d0>
2025-01-31 15:31:40,598 - DEBUG - on stmt: $20unpack_sequence.4 = exhaust_iter(value=$phi20.1, count=2)
2025-01-31 15:31:40,598 - DEBUG - on stmt: $20unpack_sequence.2 = static_getitem(value=$20unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2025-01-31 15:31:40,598 - DEBUG - on stmt: $20unpack_sequence.3 = static_getitem(value=$20unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2025-01-31 15:31:40,598 - DEBUG - on stmt: ax = $20unpack_sequence.2
2025-01-31 15:31:40,598 - DEBUG - on stmt: s = $20unpack_sequence.3
2025-01-31 15:31:40,598 - DEBUG - on stmt: $const28.6 = const(int, 0)
2025-01-31 15:31:40,598 - DEBUG - on stmt: $30compare_op.7 = s < $const28.6
2025-01-31 15:31:40,598 - DEBUG - on stmt: bool32 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,598 - DEBUG - on stmt: $32pred = call bool32($30compare_op.7, func=bool32, args=(Var($30compare_op.7, arrayobj.py:2050),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,598 - DEBUG - on stmt: branch $32pred, 34, 48
2025-01-31 15:31:40,598 - DEBUG - ==== SSA block rewrite pass on 34
2025-01-31 15:31:40,598 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e88180d0>
2025-01-31 15:31:40,598 - DEBUG - on stmt: $const36.2 = const(int, 1)
2025-01-31 15:31:40,599 - DEBUG - on stmt: $38inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:40,599 - DEBUG - on stmt: num_neg_value.1 = $38inplace_add.3
2025-01-31 15:31:40,599 - DEBUG - on stmt: neg_ax = ax
2025-01-31 15:31:40,599 - DEBUG - on stmt: jump 161
2025-01-31 15:31:40,599 - DEBUG - ==== SSA block rewrite pass on 48
2025-01-31 15:31:40,599 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e88180d0>
2025-01-31 15:31:40,599 - DEBUG - on stmt: $52inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:40,599 - DEBUG - on stmt: known_size.1 = $52inplace_multiply.3
2025-01-31 15:31:40,599 - DEBUG - on stmt: jump 161
2025-01-31 15:31:40,599 - DEBUG - ==== SSA block rewrite pass on 58
2025-01-31 15:31:40,599 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e88180d0>
2025-01-31 15:31:40,599 - DEBUG - on stmt: $const60.1 = const(int, 0)
2025-01-31 15:31:40,599 - DEBUG - on stmt: $62compare_op.2 = num_neg_value.2 == $const60.1
2025-01-31 15:31:40,599 - DEBUG - on stmt: bool64 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,599 - DEBUG - on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, arrayobj.py:2056),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,599 - DEBUG - on stmt: branch $64pred, 66, 86
2025-01-31 15:31:40,599 - DEBUG - ==== SSA block rewrite pass on 66
2025-01-31 15:31:40,599 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e88180d0>
2025-01-31 15:31:40,599 - DEBUG - on stmt: $70compare_op.2 = origsize != known_size.2
2025-01-31 15:31:40,599 - DEBUG - on stmt: bool72 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,599 - DEBUG - on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, arrayobj.py:2057),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,599 - DEBUG - on stmt: branch $72pred, 74, 82
2025-01-31 15:31:40,599 - DEBUG - ==== SSA block rewrite pass on 74
2025-01-31 15:31:40,599 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e88180d0>
2025-01-31 15:31:40,599 - DEBUG - on stmt: $74load_global.0 = global(ValueError: <class 'ValueError'>)
2025-01-31 15:31:40,599 - DEBUG - on stmt: $const76.1 = const(str, total size of new array must be unchanged)
2025-01-31 15:31:40,599 - DEBUG - on stmt: $78call_function.2 = call $74load_global.0($const76.1, func=$74load_global.0, args=[Var($const76.1, arrayobj.py:2058)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,599 - DEBUG - on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2025-01-31 15:31:40,599 - DEBUG - ==== SSA block rewrite pass on 82
2025-01-31 15:31:40,600 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e88180d0>
2025-01-31 15:31:40,600 - DEBUG - on stmt: $const82.0 = const(NoneType, None)
2025-01-31 15:31:40,600 - DEBUG - on stmt: $84return_value.1 = cast(value=$const82.0)
2025-01-31 15:31:40,600 - DEBUG - on stmt: return $84return_value.1
2025-01-31 15:31:40,600 - DEBUG - ==== SSA block rewrite pass on 86
2025-01-31 15:31:40,600 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e88180d0>
2025-01-31 15:31:40,600 - DEBUG - on stmt: $const88.1 = const(int, 1)
2025-01-31 15:31:40,600 - DEBUG - on stmt: $90compare_op.2 = num_neg_value.2 == $const88.1
2025-01-31 15:31:40,600 - DEBUG - on stmt: bool92 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,600 - DEBUG - on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, arrayobj.py:2060),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,600 - DEBUG - on stmt: branch $92pred, 94, 160
2025-01-31 15:31:40,600 - DEBUG - ==== SSA block rewrite pass on 94
2025-01-31 15:31:40,600 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e88180d0>
2025-01-31 15:31:40,600 - DEBUG - on stmt: $const96.1 = const(int, 0)
2025-01-31 15:31:40,600 - DEBUG - on stmt: $98compare_op.2 = known_size.2 == $const96.1
2025-01-31 15:31:40,600 - DEBUG - on stmt: bool100 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,600 - DEBUG - on stmt: $100pred = call bool100($98compare_op.2, func=bool100, args=(Var($98compare_op.2, arrayobj.py:2062),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,600 - DEBUG - on stmt: branch $100pred, 102, 116
2025-01-31 15:31:40,600 - DEBUG - ==== SSA block rewrite pass on 102
2025-01-31 15:31:40,600 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e88180d0>
2025-01-31 15:31:40,600 - DEBUG - on stmt: inferred = const(int, 0)
2025-01-31 15:31:40,600 - DEBUG - first assign: inferred
2025-01-31 15:31:40,600 - DEBUG - replaced with: inferred = const(int, 0)
2025-01-31 15:31:40,600 - DEBUG - on stmt: $const108.2 = const(int, 0)
2025-01-31 15:31:40,600 - DEBUG - on stmt: ok = origsize == $const108.2
2025-01-31 15:31:40,600 - DEBUG - on stmt: jump 136
2025-01-31 15:31:40,600 - DEBUG - ==== SSA block rewrite pass on 116
2025-01-31 15:31:40,600 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e88180d0>
2025-01-31 15:31:40,600 - DEBUG - on stmt: inferred = origsize // known_size.2
2025-01-31 15:31:40,600 - DEBUG - replaced with: inferred.1 = origsize // known_size.2
2025-01-31 15:31:40,601 - DEBUG - on stmt: $128binary_modulo.5 = origsize % known_size.2
2025-01-31 15:31:40,601 - DEBUG - on stmt: $const130.6 = const(int, 0)
2025-01-31 15:31:40,601 - DEBUG - on stmt: ok = $128binary_modulo.5 == $const130.6
2025-01-31 15:31:40,601 - DEBUG - on stmt: jump 136
2025-01-31 15:31:40,601 - DEBUG - ==== SSA block rewrite pass on 136
2025-01-31 15:31:40,601 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e88180d0>
2025-01-31 15:31:40,601 - DEBUG - on stmt: bool138 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,601 - DEBUG - on stmt: $138pred = call bool138(ok, func=bool138, args=(Var(ok, arrayobj.py:2064),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,601 - DEBUG - on stmt: branch $138pred, 148, 140
2025-01-31 15:31:40,601 - DEBUG - ==== SSA block rewrite pass on 140
2025-01-31 15:31:40,601 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e88180d0>
2025-01-31 15:31:40,601 - DEBUG - on stmt: $140load_global.0 = global(ValueError: <class 'ValueError'>)
2025-01-31 15:31:40,601 - DEBUG - on stmt: $const142.1 = const(str, total size of new array must be unchanged)
2025-01-31 15:31:40,601 - DEBUG - on stmt: $144call_function.2 = call $140load_global.0($const142.1, func=$140load_global.0, args=[Var($const142.1, arrayobj.py:2069)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,601 - DEBUG - on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2025-01-31 15:31:40,601 - DEBUG - ==== SSA block rewrite pass on 148
2025-01-31 15:31:40,601 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e88180d0>
2025-01-31 15:31:40,601 - DEBUG - on stmt: shape[neg_ax] = inferred
2025-01-31 15:31:40,601 - DEBUG - on stmt: $const156.3 = const(NoneType, None)
2025-01-31 15:31:40,601 - DEBUG - on stmt: $158return_value.4 = cast(value=$const156.3)
2025-01-31 15:31:40,601 - DEBUG - on stmt: return $158return_value.4
2025-01-31 15:31:40,601 - DEBUG - ==== SSA block rewrite pass on 160
2025-01-31 15:31:40,601 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e88180d0>
2025-01-31 15:31:40,601 - DEBUG - on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
2025-01-31 15:31:40,601 - DEBUG - on stmt: $const162.1 = const(str, multiple negative shape values)
2025-01-31 15:31:40,601 - DEBUG - on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:2073)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,601 - DEBUG - on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
2025-01-31 15:31:40,601 - DEBUG - ==== SSA block rewrite pass on 161
2025-01-31 15:31:40,601 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e88180d0>
2025-01-31 15:31:40,602 - DEBUG - on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:2054), Var(known_size.2, arrayobj.py:2054)], incoming_blocks=[48, 34])
2025-01-31 15:31:40,602 - DEBUG - on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:2051), Var(num_neg_value.1, arrayobj.py:2051)], incoming_blocks=[48, 34])
2025-01-31 15:31:40,602 - DEBUG - on stmt: jump 18
2025-01-31 15:31:40,602 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {102: [<numba.core.ir.Assign object at 0x7c89e8d59c30>],
             116: [<numba.core.ir.Assign object at 0x7c89e8d59e10>]})
2025-01-31 15:31:40,602 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-31 15:31:40,602 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e88197e0>
2025-01-31 15:31:40,602 - DEBUG - on stmt: origsize = arg(0, name=origsize)
2025-01-31 15:31:40,602 - DEBUG - on stmt: shape = arg(1, name=shape)
2025-01-31 15:31:40,602 - DEBUG - on stmt: num_neg_value = const(int, 0)
2025-01-31 15:31:40,602 - DEBUG - on stmt: known_size = const(int, 1)
2025-01-31 15:31:40,602 - DEBUG - on stmt: $10load_global.2 = global(enumerate: <class 'enumerate'>)
2025-01-31 15:31:40,602 - DEBUG - on stmt: $14call_function.4 = call $10load_global.2(shape, func=$10load_global.2, args=[Var(shape, arrayobj.py:2046)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,602 - DEBUG - on stmt: $16get_iter.5 = getiter(value=$14call_function.4)
2025-01-31 15:31:40,602 - DEBUG - on stmt: $phi18.0 = $16get_iter.5
2025-01-31 15:31:40,602 - DEBUG - on stmt: jump 18
2025-01-31 15:31:40,602 - DEBUG - ==== SSA block rewrite pass on 18
2025-01-31 15:31:40,602 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e88197e0>
2025-01-31 15:31:40,602 - DEBUG - on stmt: known_size.2 = phi(incoming_values=[Var(known_size, arrayobj.py:2048), Var(known_size.3, arrayobj.py:2054)], incoming_blocks=[0, 161])
2025-01-31 15:31:40,602 - DEBUG - on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value, arrayobj.py:2047), Var(num_neg_value.3, arrayobj.py:2051)], incoming_blocks=[0, 161])
2025-01-31 15:31:40,602 - DEBUG - on stmt: $18for_iter.1 = iternext(value=$phi18.0)
2025-01-31 15:31:40,602 - DEBUG - on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
2025-01-31 15:31:40,602 - DEBUG - on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
2025-01-31 15:31:40,602 - DEBUG - on stmt: $phi20.1 = $18for_iter.2
2025-01-31 15:31:40,602 - DEBUG - on stmt: branch $18for_iter.3, 20, 58
2025-01-31 15:31:40,602 - DEBUG - ==== SSA block rewrite pass on 20
2025-01-31 15:31:40,602 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e88197e0>
2025-01-31 15:31:40,603 - DEBUG - on stmt: $20unpack_sequence.4 = exhaust_iter(value=$phi20.1, count=2)
2025-01-31 15:31:40,603 - DEBUG - on stmt: $20unpack_sequence.2 = static_getitem(value=$20unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2025-01-31 15:31:40,603 - DEBUG - on stmt: $20unpack_sequence.3 = static_getitem(value=$20unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2025-01-31 15:31:40,603 - DEBUG - on stmt: ax = $20unpack_sequence.2
2025-01-31 15:31:40,603 - DEBUG - on stmt: s = $20unpack_sequence.3
2025-01-31 15:31:40,603 - DEBUG - on stmt: $const28.6 = const(int, 0)
2025-01-31 15:31:40,603 - DEBUG - on stmt: $30compare_op.7 = s < $const28.6
2025-01-31 15:31:40,603 - DEBUG - on stmt: bool32 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,603 - DEBUG - on stmt: $32pred = call bool32($30compare_op.7, func=bool32, args=(Var($30compare_op.7, arrayobj.py:2050),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,603 - DEBUG - on stmt: branch $32pred, 34, 48
2025-01-31 15:31:40,603 - DEBUG - ==== SSA block rewrite pass on 34
2025-01-31 15:31:40,603 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e88197e0>
2025-01-31 15:31:40,603 - DEBUG - on stmt: $const36.2 = const(int, 1)
2025-01-31 15:31:40,603 - DEBUG - on stmt: $38inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:40,603 - DEBUG - on stmt: num_neg_value.1 = $38inplace_add.3
2025-01-31 15:31:40,603 - DEBUG - on stmt: neg_ax = ax
2025-01-31 15:31:40,603 - DEBUG - on stmt: jump 161
2025-01-31 15:31:40,603 - DEBUG - ==== SSA block rewrite pass on 48
2025-01-31 15:31:40,603 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e88197e0>
2025-01-31 15:31:40,603 - DEBUG - on stmt: $52inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:40,603 - DEBUG - on stmt: known_size.1 = $52inplace_multiply.3
2025-01-31 15:31:40,603 - DEBUG - on stmt: jump 161
2025-01-31 15:31:40,603 - DEBUG - ==== SSA block rewrite pass on 58
2025-01-31 15:31:40,603 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e88197e0>
2025-01-31 15:31:40,603 - DEBUG - on stmt: $const60.1 = const(int, 0)
2025-01-31 15:31:40,603 - DEBUG - on stmt: $62compare_op.2 = num_neg_value.2 == $const60.1
2025-01-31 15:31:40,603 - DEBUG - on stmt: bool64 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,603 - DEBUG - on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, arrayobj.py:2056),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,604 - DEBUG - on stmt: branch $64pred, 66, 86
2025-01-31 15:31:40,604 - DEBUG - ==== SSA block rewrite pass on 66
2025-01-31 15:31:40,604 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e88197e0>
2025-01-31 15:31:40,604 - DEBUG - on stmt: $70compare_op.2 = origsize != known_size.2
2025-01-31 15:31:40,604 - DEBUG - on stmt: bool72 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,604 - DEBUG - on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, arrayobj.py:2057),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,604 - DEBUG - on stmt: branch $72pred, 74, 82
2025-01-31 15:31:40,604 - DEBUG - ==== SSA block rewrite pass on 74
2025-01-31 15:31:40,604 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e88197e0>
2025-01-31 15:31:40,604 - DEBUG - on stmt: $74load_global.0 = global(ValueError: <class 'ValueError'>)
2025-01-31 15:31:40,604 - DEBUG - on stmt: $const76.1 = const(str, total size of new array must be unchanged)
2025-01-31 15:31:40,604 - DEBUG - on stmt: $78call_function.2 = call $74load_global.0($const76.1, func=$74load_global.0, args=[Var($const76.1, arrayobj.py:2058)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,604 - DEBUG - on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2025-01-31 15:31:40,604 - DEBUG - ==== SSA block rewrite pass on 82
2025-01-31 15:31:40,604 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e88197e0>
2025-01-31 15:31:40,604 - DEBUG - on stmt: $const82.0 = const(NoneType, None)
2025-01-31 15:31:40,604 - DEBUG - on stmt: $84return_value.1 = cast(value=$const82.0)
2025-01-31 15:31:40,604 - DEBUG - on stmt: return $84return_value.1
2025-01-31 15:31:40,604 - DEBUG - ==== SSA block rewrite pass on 86
2025-01-31 15:31:40,604 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e88197e0>
2025-01-31 15:31:40,604 - DEBUG - on stmt: $const88.1 = const(int, 1)
2025-01-31 15:31:40,604 - DEBUG - on stmt: $90compare_op.2 = num_neg_value.2 == $const88.1
2025-01-31 15:31:40,604 - DEBUG - on stmt: bool92 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,604 - DEBUG - on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, arrayobj.py:2060),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,604 - DEBUG - on stmt: branch $92pred, 94, 160
2025-01-31 15:31:40,604 - DEBUG - ==== SSA block rewrite pass on 94
2025-01-31 15:31:40,604 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e88197e0>
2025-01-31 15:31:40,604 - DEBUG - on stmt: $const96.1 = const(int, 0)
2025-01-31 15:31:40,604 - DEBUG - on stmt: $98compare_op.2 = known_size.2 == $const96.1
2025-01-31 15:31:40,605 - DEBUG - on stmt: bool100 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,605 - DEBUG - on stmt: $100pred = call bool100($98compare_op.2, func=bool100, args=(Var($98compare_op.2, arrayobj.py:2062),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,605 - DEBUG - on stmt: branch $100pred, 102, 116
2025-01-31 15:31:40,605 - DEBUG - ==== SSA block rewrite pass on 102
2025-01-31 15:31:40,605 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e88197e0>
2025-01-31 15:31:40,605 - DEBUG - on stmt: inferred = const(int, 0)
2025-01-31 15:31:40,605 - DEBUG - on stmt: $const108.2 = const(int, 0)
2025-01-31 15:31:40,605 - DEBUG - on stmt: ok = origsize == $const108.2
2025-01-31 15:31:40,605 - DEBUG - on stmt: jump 136
2025-01-31 15:31:40,605 - DEBUG - ==== SSA block rewrite pass on 116
2025-01-31 15:31:40,605 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e88197e0>
2025-01-31 15:31:40,605 - DEBUG - on stmt: inferred.1 = origsize // known_size.2
2025-01-31 15:31:40,605 - DEBUG - on stmt: $128binary_modulo.5 = origsize % known_size.2
2025-01-31 15:31:40,605 - DEBUG - on stmt: $const130.6 = const(int, 0)
2025-01-31 15:31:40,605 - DEBUG - on stmt: ok = $128binary_modulo.5 == $const130.6
2025-01-31 15:31:40,605 - DEBUG - on stmt: jump 136
2025-01-31 15:31:40,605 - DEBUG - ==== SSA block rewrite pass on 136
2025-01-31 15:31:40,605 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e88197e0>
2025-01-31 15:31:40,605 - DEBUG - on stmt: bool138 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,605 - DEBUG - on stmt: $138pred = call bool138(ok, func=bool138, args=(Var(ok, arrayobj.py:2064),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,605 - DEBUG - on stmt: branch $138pred, 148, 140
2025-01-31 15:31:40,605 - DEBUG - ==== SSA block rewrite pass on 140
2025-01-31 15:31:40,605 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e88197e0>
2025-01-31 15:31:40,605 - DEBUG - on stmt: $140load_global.0 = global(ValueError: <class 'ValueError'>)
2025-01-31 15:31:40,605 - DEBUG - on stmt: $const142.1 = const(str, total size of new array must be unchanged)
2025-01-31 15:31:40,605 - DEBUG - on stmt: $144call_function.2 = call $140load_global.0($const142.1, func=$140load_global.0, args=[Var($const142.1, arrayobj.py:2069)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,605 - DEBUG - on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2025-01-31 15:31:40,606 - DEBUG - ==== SSA block rewrite pass on 148
2025-01-31 15:31:40,606 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e88197e0>
2025-01-31 15:31:40,606 - DEBUG - on stmt: shape[neg_ax] = inferred
2025-01-31 15:31:40,606 - DEBUG - find_def var='inferred' stmt=shape[neg_ax] = inferred
2025-01-31 15:31:40,606 - DEBUG - find_def_from_top label 148
2025-01-31 15:31:40,606 - DEBUG - idom 136 from label 148
2025-01-31 15:31:40,606 - DEBUG - find_def_from_bottom label 136
2025-01-31 15:31:40,606 - DEBUG - find_def_from_top label 136
2025-01-31 15:31:40,606 - DEBUG - insert phi node inferred.2 = phi(incoming_values=[], incoming_blocks=[]) at 136
2025-01-31 15:31:40,606 - DEBUG - find_def_from_bottom label 116
2025-01-31 15:31:40,606 - DEBUG - incoming_def inferred.1 = origsize // known_size.2
2025-01-31 15:31:40,606 - DEBUG - find_def_from_bottom label 102
2025-01-31 15:31:40,606 - DEBUG - incoming_def inferred = const(int, 0)
2025-01-31 15:31:40,606 - DEBUG - replaced with: shape[neg_ax] = inferred.2
2025-01-31 15:31:40,606 - DEBUG - on stmt: $const156.3 = const(NoneType, None)
2025-01-31 15:31:40,606 - DEBUG - on stmt: $158return_value.4 = cast(value=$const156.3)
2025-01-31 15:31:40,606 - DEBUG - on stmt: return $158return_value.4
2025-01-31 15:31:40,606 - DEBUG - ==== SSA block rewrite pass on 160
2025-01-31 15:31:40,606 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e88197e0>
2025-01-31 15:31:40,606 - DEBUG - on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
2025-01-31 15:31:40,606 - DEBUG - on stmt: $const162.1 = const(str, multiple negative shape values)
2025-01-31 15:31:40,606 - DEBUG - on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:2073)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,606 - DEBUG - on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
2025-01-31 15:31:40,606 - DEBUG - ==== SSA block rewrite pass on 161
2025-01-31 15:31:40,606 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e88197e0>
2025-01-31 15:31:40,606 - DEBUG - on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:2054), Var(known_size.2, arrayobj.py:2054)], incoming_blocks=[48, 34])
2025-01-31 15:31:40,606 - DEBUG - on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:2051), Var(num_neg_value.1, arrayobj.py:2051)], incoming_blocks=[48, 34])
2025-01-31 15:31:40,606 - DEBUG - on stmt: jump 18
2025-01-31 15:31:40,607 - DEBUG - Fix SSA violator on var ok
2025-01-31 15:31:40,607 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-31 15:31:40,607 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e88198d0>
2025-01-31 15:31:40,607 - DEBUG - on stmt: origsize = arg(0, name=origsize)
2025-01-31 15:31:40,607 - DEBUG - on stmt: shape = arg(1, name=shape)
2025-01-31 15:31:40,607 - DEBUG - on stmt: num_neg_value = const(int, 0)
2025-01-31 15:31:40,607 - DEBUG - on stmt: known_size = const(int, 1)
2025-01-31 15:31:40,607 - DEBUG - on stmt: $10load_global.2 = global(enumerate: <class 'enumerate'>)
2025-01-31 15:31:40,607 - DEBUG - on stmt: $14call_function.4 = call $10load_global.2(shape, func=$10load_global.2, args=[Var(shape, arrayobj.py:2046)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,607 - DEBUG - on stmt: $16get_iter.5 = getiter(value=$14call_function.4)
2025-01-31 15:31:40,607 - DEBUG - on stmt: $phi18.0 = $16get_iter.5
2025-01-31 15:31:40,607 - DEBUG - on stmt: jump 18
2025-01-31 15:31:40,607 - DEBUG - ==== SSA block rewrite pass on 18
2025-01-31 15:31:40,607 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e88198d0>
2025-01-31 15:31:40,607 - DEBUG - on stmt: known_size.2 = phi(incoming_values=[Var(known_size, arrayobj.py:2048), Var(known_size.3, arrayobj.py:2054)], incoming_blocks=[0, 161])
2025-01-31 15:31:40,607 - DEBUG - on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value, arrayobj.py:2047), Var(num_neg_value.3, arrayobj.py:2051)], incoming_blocks=[0, 161])
2025-01-31 15:31:40,607 - DEBUG - on stmt: $18for_iter.1 = iternext(value=$phi18.0)
2025-01-31 15:31:40,607 - DEBUG - on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
2025-01-31 15:31:40,607 - DEBUG - on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
2025-01-31 15:31:40,607 - DEBUG - on stmt: $phi20.1 = $18for_iter.2
2025-01-31 15:31:40,607 - DEBUG - on stmt: branch $18for_iter.3, 20, 58
2025-01-31 15:31:40,607 - DEBUG - ==== SSA block rewrite pass on 20
2025-01-31 15:31:40,607 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e88198d0>
2025-01-31 15:31:40,607 - DEBUG - on stmt: $20unpack_sequence.4 = exhaust_iter(value=$phi20.1, count=2)
2025-01-31 15:31:40,607 - DEBUG - on stmt: $20unpack_sequence.2 = static_getitem(value=$20unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2025-01-31 15:31:40,607 - DEBUG - on stmt: $20unpack_sequence.3 = static_getitem(value=$20unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2025-01-31 15:31:40,607 - DEBUG - on stmt: ax = $20unpack_sequence.2
2025-01-31 15:31:40,607 - DEBUG - on stmt: s = $20unpack_sequence.3
2025-01-31 15:31:40,607 - DEBUG - on stmt: $const28.6 = const(int, 0)
2025-01-31 15:31:40,607 - DEBUG - on stmt: $30compare_op.7 = s < $const28.6
2025-01-31 15:31:40,608 - DEBUG - on stmt: bool32 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,608 - DEBUG - on stmt: $32pred = call bool32($30compare_op.7, func=bool32, args=(Var($30compare_op.7, arrayobj.py:2050),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,608 - DEBUG - on stmt: branch $32pred, 34, 48
2025-01-31 15:31:40,608 - DEBUG - ==== SSA block rewrite pass on 34
2025-01-31 15:31:40,608 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e88198d0>
2025-01-31 15:31:40,608 - DEBUG - on stmt: $const36.2 = const(int, 1)
2025-01-31 15:31:40,608 - DEBUG - on stmt: $38inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:40,608 - DEBUG - on stmt: num_neg_value.1 = $38inplace_add.3
2025-01-31 15:31:40,608 - DEBUG - on stmt: neg_ax = ax
2025-01-31 15:31:40,608 - DEBUG - on stmt: jump 161
2025-01-31 15:31:40,608 - DEBUG - ==== SSA block rewrite pass on 48
2025-01-31 15:31:40,608 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e88198d0>
2025-01-31 15:31:40,608 - DEBUG - on stmt: $52inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:40,608 - DEBUG - on stmt: known_size.1 = $52inplace_multiply.3
2025-01-31 15:31:40,608 - DEBUG - on stmt: jump 161
2025-01-31 15:31:40,608 - DEBUG - ==== SSA block rewrite pass on 58
2025-01-31 15:31:40,608 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e88198d0>
2025-01-31 15:31:40,608 - DEBUG - on stmt: $const60.1 = const(int, 0)
2025-01-31 15:31:40,608 - DEBUG - on stmt: $62compare_op.2 = num_neg_value.2 == $const60.1
2025-01-31 15:31:40,608 - DEBUG - on stmt: bool64 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,608 - DEBUG - on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, arrayobj.py:2056),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,608 - DEBUG - on stmt: branch $64pred, 66, 86
2025-01-31 15:31:40,608 - DEBUG - ==== SSA block rewrite pass on 66
2025-01-31 15:31:40,608 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e88198d0>
2025-01-31 15:31:40,608 - DEBUG - on stmt: $70compare_op.2 = origsize != known_size.2
2025-01-31 15:31:40,608 - DEBUG - on stmt: bool72 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,608 - DEBUG - on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, arrayobj.py:2057),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,608 - DEBUG - on stmt: branch $72pred, 74, 82
2025-01-31 15:31:40,608 - DEBUG - ==== SSA block rewrite pass on 74
2025-01-31 15:31:40,609 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e88198d0>
2025-01-31 15:31:40,609 - DEBUG - on stmt: $74load_global.0 = global(ValueError: <class 'ValueError'>)
2025-01-31 15:31:40,609 - DEBUG - on stmt: $const76.1 = const(str, total size of new array must be unchanged)
2025-01-31 15:31:40,609 - DEBUG - on stmt: $78call_function.2 = call $74load_global.0($const76.1, func=$74load_global.0, args=[Var($const76.1, arrayobj.py:2058)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,609 - DEBUG - on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2025-01-31 15:31:40,609 - DEBUG - ==== SSA block rewrite pass on 82
2025-01-31 15:31:40,609 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e88198d0>
2025-01-31 15:31:40,609 - DEBUG - on stmt: $const82.0 = const(NoneType, None)
2025-01-31 15:31:40,609 - DEBUG - on stmt: $84return_value.1 = cast(value=$const82.0)
2025-01-31 15:31:40,609 - DEBUG - on stmt: return $84return_value.1
2025-01-31 15:31:40,609 - DEBUG - ==== SSA block rewrite pass on 86
2025-01-31 15:31:40,609 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e88198d0>
2025-01-31 15:31:40,609 - DEBUG - on stmt: $const88.1 = const(int, 1)
2025-01-31 15:31:40,609 - DEBUG - on stmt: $90compare_op.2 = num_neg_value.2 == $const88.1
2025-01-31 15:31:40,609 - DEBUG - on stmt: bool92 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,609 - DEBUG - on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, arrayobj.py:2060),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,609 - DEBUG - on stmt: branch $92pred, 94, 160
2025-01-31 15:31:40,609 - DEBUG - ==== SSA block rewrite pass on 94
2025-01-31 15:31:40,609 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e88198d0>
2025-01-31 15:31:40,609 - DEBUG - on stmt: $const96.1 = const(int, 0)
2025-01-31 15:31:40,609 - DEBUG - on stmt: $98compare_op.2 = known_size.2 == $const96.1
2025-01-31 15:31:40,609 - DEBUG - on stmt: bool100 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,609 - DEBUG - on stmt: $100pred = call bool100($98compare_op.2, func=bool100, args=(Var($98compare_op.2, arrayobj.py:2062),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,609 - DEBUG - on stmt: branch $100pred, 102, 116
2025-01-31 15:31:40,609 - DEBUG - ==== SSA block rewrite pass on 102
2025-01-31 15:31:40,609 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e88198d0>
2025-01-31 15:31:40,609 - DEBUG - on stmt: inferred = const(int, 0)
2025-01-31 15:31:40,609 - DEBUG - on stmt: $const108.2 = const(int, 0)
2025-01-31 15:31:40,609 - DEBUG - on stmt: ok = origsize == $const108.2
2025-01-31 15:31:40,610 - DEBUG - first assign: ok
2025-01-31 15:31:40,610 - DEBUG - replaced with: ok = origsize == $const108.2
2025-01-31 15:31:40,610 - DEBUG - on stmt: jump 136
2025-01-31 15:31:40,610 - DEBUG - ==== SSA block rewrite pass on 116
2025-01-31 15:31:40,610 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e88198d0>
2025-01-31 15:31:40,610 - DEBUG - on stmt: inferred.1 = origsize // known_size.2
2025-01-31 15:31:40,610 - DEBUG - on stmt: $128binary_modulo.5 = origsize % known_size.2
2025-01-31 15:31:40,610 - DEBUG - on stmt: $const130.6 = const(int, 0)
2025-01-31 15:31:40,610 - DEBUG - on stmt: ok = $128binary_modulo.5 == $const130.6
2025-01-31 15:31:40,610 - DEBUG - replaced with: ok.1 = $128binary_modulo.5 == $const130.6
2025-01-31 15:31:40,610 - DEBUG - on stmt: jump 136
2025-01-31 15:31:40,610 - DEBUG - ==== SSA block rewrite pass on 136
2025-01-31 15:31:40,610 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e88198d0>
2025-01-31 15:31:40,610 - DEBUG - on stmt: inferred.2 = phi(incoming_values=[Var(inferred.1, arrayobj.py:2066), Var(inferred, arrayobj.py:2063)], incoming_blocks=[116, 102])
2025-01-31 15:31:40,610 - DEBUG - on stmt: bool138 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,610 - DEBUG - on stmt: $138pred = call bool138(ok, func=bool138, args=(Var(ok, arrayobj.py:2064),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,610 - DEBUG - on stmt: branch $138pred, 148, 140
2025-01-31 15:31:40,610 - DEBUG - ==== SSA block rewrite pass on 140
2025-01-31 15:31:40,610 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e88198d0>
2025-01-31 15:31:40,610 - DEBUG - on stmt: $140load_global.0 = global(ValueError: <class 'ValueError'>)
2025-01-31 15:31:40,610 - DEBUG - on stmt: $const142.1 = const(str, total size of new array must be unchanged)
2025-01-31 15:31:40,610 - DEBUG - on stmt: $144call_function.2 = call $140load_global.0($const142.1, func=$140load_global.0, args=[Var($const142.1, arrayobj.py:2069)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,610 - DEBUG - on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2025-01-31 15:31:40,610 - DEBUG - ==== SSA block rewrite pass on 148
2025-01-31 15:31:40,610 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e88198d0>
2025-01-31 15:31:40,610 - DEBUG - on stmt: shape[neg_ax] = inferred.2
2025-01-31 15:31:40,610 - DEBUG - on stmt: $const156.3 = const(NoneType, None)
2025-01-31 15:31:40,610 - DEBUG - on stmt: $158return_value.4 = cast(value=$const156.3)
2025-01-31 15:31:40,611 - DEBUG - on stmt: return $158return_value.4
2025-01-31 15:31:40,611 - DEBUG - ==== SSA block rewrite pass on 160
2025-01-31 15:31:40,611 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e88198d0>
2025-01-31 15:31:40,611 - DEBUG - on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
2025-01-31 15:31:40,611 - DEBUG - on stmt: $const162.1 = const(str, multiple negative shape values)
2025-01-31 15:31:40,611 - DEBUG - on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:2073)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,611 - DEBUG - on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
2025-01-31 15:31:40,611 - DEBUG - ==== SSA block rewrite pass on 161
2025-01-31 15:31:40,611 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e88198d0>
2025-01-31 15:31:40,611 - DEBUG - on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:2054), Var(known_size.2, arrayobj.py:2054)], incoming_blocks=[48, 34])
2025-01-31 15:31:40,611 - DEBUG - on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:2051), Var(num_neg_value.1, arrayobj.py:2051)], incoming_blocks=[48, 34])
2025-01-31 15:31:40,611 - DEBUG - on stmt: jump 18
2025-01-31 15:31:40,611 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {102: [<numba.core.ir.Assign object at 0x7c89e8d59a80>],
             116: [<numba.core.ir.Assign object at 0x7c89e8d5b790>]})
2025-01-31 15:31:40,611 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-31 15:31:40,611 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e88180d0>
2025-01-31 15:31:40,611 - DEBUG - on stmt: origsize = arg(0, name=origsize)
2025-01-31 15:31:40,611 - DEBUG - on stmt: shape = arg(1, name=shape)
2025-01-31 15:31:40,611 - DEBUG - on stmt: num_neg_value = const(int, 0)
2025-01-31 15:31:40,611 - DEBUG - on stmt: known_size = const(int, 1)
2025-01-31 15:31:40,611 - DEBUG - on stmt: $10load_global.2 = global(enumerate: <class 'enumerate'>)
2025-01-31 15:31:40,611 - DEBUG - on stmt: $14call_function.4 = call $10load_global.2(shape, func=$10load_global.2, args=[Var(shape, arrayobj.py:2046)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,611 - DEBUG - on stmt: $16get_iter.5 = getiter(value=$14call_function.4)
2025-01-31 15:31:40,611 - DEBUG - on stmt: $phi18.0 = $16get_iter.5
2025-01-31 15:31:40,611 - DEBUG - on stmt: jump 18
2025-01-31 15:31:40,611 - DEBUG - ==== SSA block rewrite pass on 18
2025-01-31 15:31:40,611 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e88180d0>
2025-01-31 15:31:40,611 - DEBUG - on stmt: known_size.2 = phi(incoming_values=[Var(known_size, arrayobj.py:2048), Var(known_size.3, arrayobj.py:2054)], incoming_blocks=[0, 161])
2025-01-31 15:31:40,611 - DEBUG - on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value, arrayobj.py:2047), Var(num_neg_value.3, arrayobj.py:2051)], incoming_blocks=[0, 161])
2025-01-31 15:31:40,612 - DEBUG - on stmt: $18for_iter.1 = iternext(value=$phi18.0)
2025-01-31 15:31:40,612 - DEBUG - on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
2025-01-31 15:31:40,612 - DEBUG - on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
2025-01-31 15:31:40,612 - DEBUG - on stmt: $phi20.1 = $18for_iter.2
2025-01-31 15:31:40,612 - DEBUG - on stmt: branch $18for_iter.3, 20, 58
2025-01-31 15:31:40,612 - DEBUG - ==== SSA block rewrite pass on 20
2025-01-31 15:31:40,612 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e88180d0>
2025-01-31 15:31:40,612 - DEBUG - on stmt: $20unpack_sequence.4 = exhaust_iter(value=$phi20.1, count=2)
2025-01-31 15:31:40,612 - DEBUG - on stmt: $20unpack_sequence.2 = static_getitem(value=$20unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2025-01-31 15:31:40,612 - DEBUG - on stmt: $20unpack_sequence.3 = static_getitem(value=$20unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2025-01-31 15:31:40,612 - DEBUG - on stmt: ax = $20unpack_sequence.2
2025-01-31 15:31:40,612 - DEBUG - on stmt: s = $20unpack_sequence.3
2025-01-31 15:31:40,612 - DEBUG - on stmt: $const28.6 = const(int, 0)
2025-01-31 15:31:40,612 - DEBUG - on stmt: $30compare_op.7 = s < $const28.6
2025-01-31 15:31:40,612 - DEBUG - on stmt: bool32 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,612 - DEBUG - on stmt: $32pred = call bool32($30compare_op.7, func=bool32, args=(Var($30compare_op.7, arrayobj.py:2050),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,612 - DEBUG - on stmt: branch $32pred, 34, 48
2025-01-31 15:31:40,612 - DEBUG - ==== SSA block rewrite pass on 34
2025-01-31 15:31:40,612 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e88180d0>
2025-01-31 15:31:40,612 - DEBUG - on stmt: $const36.2 = const(int, 1)
2025-01-31 15:31:40,612 - DEBUG - on stmt: $38inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:40,612 - DEBUG - on stmt: num_neg_value.1 = $38inplace_add.3
2025-01-31 15:31:40,612 - DEBUG - on stmt: neg_ax = ax
2025-01-31 15:31:40,612 - DEBUG - on stmt: jump 161
2025-01-31 15:31:40,612 - DEBUG - ==== SSA block rewrite pass on 48
2025-01-31 15:31:40,612 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e88180d0>
2025-01-31 15:31:40,612 - DEBUG - on stmt: $52inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:40,612 - DEBUG - on stmt: known_size.1 = $52inplace_multiply.3
2025-01-31 15:31:40,613 - DEBUG - on stmt: jump 161
2025-01-31 15:31:40,613 - DEBUG - ==== SSA block rewrite pass on 58
2025-01-31 15:31:40,613 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e88180d0>
2025-01-31 15:31:40,613 - DEBUG - on stmt: $const60.1 = const(int, 0)
2025-01-31 15:31:40,613 - DEBUG - on stmt: $62compare_op.2 = num_neg_value.2 == $const60.1
2025-01-31 15:31:40,613 - DEBUG - on stmt: bool64 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,613 - DEBUG - on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, arrayobj.py:2056),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,613 - DEBUG - on stmt: branch $64pred, 66, 86
2025-01-31 15:31:40,613 - DEBUG - ==== SSA block rewrite pass on 66
2025-01-31 15:31:40,613 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e88180d0>
2025-01-31 15:31:40,613 - DEBUG - on stmt: $70compare_op.2 = origsize != known_size.2
2025-01-31 15:31:40,613 - DEBUG - on stmt: bool72 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,699 - DEBUG - on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, arrayobj.py:2057),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,700 - DEBUG - on stmt: branch $72pred, 74, 82
2025-01-31 15:31:40,700 - DEBUG - ==== SSA block rewrite pass on 74
2025-01-31 15:31:40,700 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e88180d0>
2025-01-31 15:31:40,700 - DEBUG - on stmt: $74load_global.0 = global(ValueError: <class 'ValueError'>)
2025-01-31 15:31:40,700 - DEBUG - on stmt: $const76.1 = const(str, total size of new array must be unchanged)
2025-01-31 15:31:40,700 - DEBUG - on stmt: $78call_function.2 = call $74load_global.0($const76.1, func=$74load_global.0, args=[Var($const76.1, arrayobj.py:2058)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,701 - DEBUG - on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2025-01-31 15:31:40,701 - DEBUG - ==== SSA block rewrite pass on 82
2025-01-31 15:31:40,701 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e88180d0>
2025-01-31 15:31:40,701 - DEBUG - on stmt: $const82.0 = const(NoneType, None)
2025-01-31 15:31:40,701 - DEBUG - on stmt: $84return_value.1 = cast(value=$const82.0)
2025-01-31 15:31:40,701 - DEBUG - on stmt: return $84return_value.1
2025-01-31 15:31:40,701 - DEBUG - ==== SSA block rewrite pass on 86
2025-01-31 15:31:40,702 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e88180d0>
2025-01-31 15:31:40,702 - DEBUG - on stmt: $const88.1 = const(int, 1)
2025-01-31 15:31:40,702 - DEBUG - on stmt: $90compare_op.2 = num_neg_value.2 == $const88.1
2025-01-31 15:31:40,702 - DEBUG - on stmt: bool92 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,702 - DEBUG - on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, arrayobj.py:2060),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,702 - DEBUG - on stmt: branch $92pred, 94, 160
2025-01-31 15:31:40,703 - DEBUG - ==== SSA block rewrite pass on 94
2025-01-31 15:31:40,703 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e88180d0>
2025-01-31 15:31:40,703 - DEBUG - on stmt: $const96.1 = const(int, 0)
2025-01-31 15:31:40,703 - DEBUG - on stmt: $98compare_op.2 = known_size.2 == $const96.1
2025-01-31 15:31:40,703 - DEBUG - on stmt: bool100 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,703 - DEBUG - on stmt: $100pred = call bool100($98compare_op.2, func=bool100, args=(Var($98compare_op.2, arrayobj.py:2062),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,704 - DEBUG - on stmt: branch $100pred, 102, 116
2025-01-31 15:31:40,704 - DEBUG - ==== SSA block rewrite pass on 102
2025-01-31 15:31:40,704 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e88180d0>
2025-01-31 15:31:40,704 - DEBUG - on stmt: inferred = const(int, 0)
2025-01-31 15:31:40,704 - DEBUG - on stmt: $const108.2 = const(int, 0)
2025-01-31 15:31:40,704 - DEBUG - on stmt: ok = origsize == $const108.2
2025-01-31 15:31:40,705 - DEBUG - on stmt: jump 136
2025-01-31 15:31:40,705 - DEBUG - ==== SSA block rewrite pass on 116
2025-01-31 15:31:40,705 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e88180d0>
2025-01-31 15:31:40,705 - DEBUG - on stmt: inferred.1 = origsize // known_size.2
2025-01-31 15:31:40,705 - DEBUG - on stmt: $128binary_modulo.5 = origsize % known_size.2
2025-01-31 15:31:40,706 - DEBUG - on stmt: $const130.6 = const(int, 0)
2025-01-31 15:31:40,706 - DEBUG - on stmt: ok.1 = $128binary_modulo.5 == $const130.6
2025-01-31 15:31:40,706 - DEBUG - on stmt: jump 136
2025-01-31 15:31:40,706 - DEBUG - ==== SSA block rewrite pass on 136
2025-01-31 15:31:40,706 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e88180d0>
2025-01-31 15:31:40,706 - DEBUG - on stmt: inferred.2 = phi(incoming_values=[Var(inferred.1, arrayobj.py:2066), Var(inferred, arrayobj.py:2063)], incoming_blocks=[116, 102])
2025-01-31 15:31:40,707 - DEBUG - on stmt: bool138 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,707 - DEBUG - on stmt: $138pred = call bool138(ok, func=bool138, args=(Var(ok, arrayobj.py:2064),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,707 - DEBUG - find_def var='ok' stmt=$138pred = call bool138(ok, func=bool138, args=(Var(ok, arrayobj.py:2064),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,707 - DEBUG - find_def_from_top label 136
2025-01-31 15:31:40,708 - DEBUG - insert phi node ok.2 = phi(incoming_values=[], incoming_blocks=[]) at 136
2025-01-31 15:31:40,708 - DEBUG - find_def_from_bottom label 116
2025-01-31 15:31:40,708 - DEBUG - incoming_def ok.1 = $128binary_modulo.5 == $const130.6
2025-01-31 15:31:40,708 - DEBUG - find_def_from_bottom label 102
2025-01-31 15:31:40,708 - DEBUG - incoming_def ok = origsize == $const108.2
2025-01-31 15:31:40,709 - DEBUG - replaced with: $138pred = call bool138(ok.2, func=bool138, args=(Var(ok.2, arrayobj.py:2068),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,709 - DEBUG - on stmt: branch $138pred, 148, 140
2025-01-31 15:31:40,709 - DEBUG - ==== SSA block rewrite pass on 140
2025-01-31 15:31:40,709 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e88180d0>
2025-01-31 15:31:40,709 - DEBUG - on stmt: $140load_global.0 = global(ValueError: <class 'ValueError'>)
2025-01-31 15:31:40,710 - DEBUG - on stmt: $const142.1 = const(str, total size of new array must be unchanged)
2025-01-31 15:31:40,710 - DEBUG - on stmt: $144call_function.2 = call $140load_global.0($const142.1, func=$140load_global.0, args=[Var($const142.1, arrayobj.py:2069)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,710 - DEBUG - on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2025-01-31 15:31:40,710 - DEBUG - ==== SSA block rewrite pass on 148
2025-01-31 15:31:40,710 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e88180d0>
2025-01-31 15:31:40,711 - DEBUG - on stmt: shape[neg_ax] = inferred.2
2025-01-31 15:31:40,711 - DEBUG - on stmt: $const156.3 = const(NoneType, None)
2025-01-31 15:31:40,711 - DEBUG - on stmt: $158return_value.4 = cast(value=$const156.3)
2025-01-31 15:31:40,711 - DEBUG - on stmt: return $158return_value.4
2025-01-31 15:31:40,711 - DEBUG - ==== SSA block rewrite pass on 160
2025-01-31 15:31:40,712 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e88180d0>
2025-01-31 15:31:40,712 - DEBUG - on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
2025-01-31 15:31:40,712 - DEBUG - on stmt: $const162.1 = const(str, multiple negative shape values)
2025-01-31 15:31:40,712 - DEBUG - on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:2073)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,712 - DEBUG - on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
2025-01-31 15:31:40,713 - DEBUG - ==== SSA block rewrite pass on 161
2025-01-31 15:31:40,713 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e88180d0>
2025-01-31 15:31:40,713 - DEBUG - on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:2054), Var(known_size.2, arrayobj.py:2054)], incoming_blocks=[48, 34])
2025-01-31 15:31:40,713 - DEBUG - on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:2051), Var(num_neg_value.1, arrayobj.py:2051)], incoming_blocks=[48, 34])
2025-01-31 15:31:40,713 - DEBUG - on stmt: jump 18
2025-01-31 15:31:40,714 - DEBUG - Fix SSA violator on var neg_ax
2025-01-31 15:31:40,714 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-31 15:31:40,714 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e881bf40>
2025-01-31 15:31:40,714 - DEBUG - on stmt: origsize = arg(0, name=origsize)
2025-01-31 15:31:40,714 - DEBUG - on stmt: shape = arg(1, name=shape)
2025-01-31 15:31:40,714 - DEBUG - on stmt: num_neg_value = const(int, 0)
2025-01-31 15:31:40,715 - DEBUG - on stmt: known_size = const(int, 1)
2025-01-31 15:31:40,715 - DEBUG - on stmt: $10load_global.2 = global(enumerate: <class 'enumerate'>)
2025-01-31 15:31:40,715 - DEBUG - on stmt: $14call_function.4 = call $10load_global.2(shape, func=$10load_global.2, args=[Var(shape, arrayobj.py:2046)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,715 - DEBUG - on stmt: $16get_iter.5 = getiter(value=$14call_function.4)
2025-01-31 15:31:40,715 - DEBUG - on stmt: $phi18.0 = $16get_iter.5
2025-01-31 15:31:40,716 - DEBUG - on stmt: jump 18
2025-01-31 15:31:40,716 - DEBUG - ==== SSA block rewrite pass on 18
2025-01-31 15:31:40,716 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e881bf40>
2025-01-31 15:31:40,716 - DEBUG - on stmt: known_size.2 = phi(incoming_values=[Var(known_size, arrayobj.py:2048), Var(known_size.3, arrayobj.py:2054)], incoming_blocks=[0, 161])
2025-01-31 15:31:40,716 - DEBUG - on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value, arrayobj.py:2047), Var(num_neg_value.3, arrayobj.py:2051)], incoming_blocks=[0, 161])
2025-01-31 15:31:40,716 - DEBUG - on stmt: $18for_iter.1 = iternext(value=$phi18.0)
2025-01-31 15:31:40,717 - DEBUG - on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
2025-01-31 15:31:40,717 - DEBUG - on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
2025-01-31 15:31:40,717 - DEBUG - on stmt: $phi20.1 = $18for_iter.2
2025-01-31 15:31:40,717 - DEBUG - on stmt: branch $18for_iter.3, 20, 58
2025-01-31 15:31:40,717 - DEBUG - ==== SSA block rewrite pass on 20
2025-01-31 15:31:40,717 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e881bf40>
2025-01-31 15:31:40,718 - DEBUG - on stmt: $20unpack_sequence.4 = exhaust_iter(value=$phi20.1, count=2)
2025-01-31 15:31:40,718 - DEBUG - on stmt: $20unpack_sequence.2 = static_getitem(value=$20unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2025-01-31 15:31:40,718 - DEBUG - on stmt: $20unpack_sequence.3 = static_getitem(value=$20unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2025-01-31 15:31:40,718 - DEBUG - on stmt: ax = $20unpack_sequence.2
2025-01-31 15:31:40,718 - DEBUG - on stmt: s = $20unpack_sequence.3
2025-01-31 15:31:40,719 - DEBUG - on stmt: $const28.6 = const(int, 0)
2025-01-31 15:31:40,719 - DEBUG - on stmt: $30compare_op.7 = s < $const28.6
2025-01-31 15:31:40,719 - DEBUG - on stmt: bool32 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,719 - DEBUG - on stmt: $32pred = call bool32($30compare_op.7, func=bool32, args=(Var($30compare_op.7, arrayobj.py:2050),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,719 - DEBUG - on stmt: branch $32pred, 34, 48
2025-01-31 15:31:40,720 - DEBUG - ==== SSA block rewrite pass on 34
2025-01-31 15:31:40,720 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e881bf40>
2025-01-31 15:31:40,720 - DEBUG - on stmt: $const36.2 = const(int, 1)
2025-01-31 15:31:40,720 - DEBUG - on stmt: $38inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:40,720 - DEBUG - on stmt: num_neg_value.1 = $38inplace_add.3
2025-01-31 15:31:40,720 - DEBUG - on stmt: neg_ax = ax
2025-01-31 15:31:40,721 - DEBUG - first assign: neg_ax
2025-01-31 15:31:40,721 - DEBUG - replaced with: neg_ax = ax
2025-01-31 15:31:40,721 - DEBUG - on stmt: jump 161
2025-01-31 15:31:40,721 - DEBUG - ==== SSA block rewrite pass on 48
2025-01-31 15:31:40,721 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e881bf40>
2025-01-31 15:31:40,721 - DEBUG - on stmt: $52inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:40,722 - DEBUG - on stmt: known_size.1 = $52inplace_multiply.3
2025-01-31 15:31:40,722 - DEBUG - on stmt: jump 161
2025-01-31 15:31:40,722 - DEBUG - ==== SSA block rewrite pass on 58
2025-01-31 15:31:40,722 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e881bf40>
2025-01-31 15:31:40,722 - DEBUG - on stmt: $const60.1 = const(int, 0)
2025-01-31 15:31:40,722 - DEBUG - on stmt: $62compare_op.2 = num_neg_value.2 == $const60.1
2025-01-31 15:31:40,723 - DEBUG - on stmt: bool64 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,723 - DEBUG - on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, arrayobj.py:2056),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,723 - DEBUG - on stmt: branch $64pred, 66, 86
2025-01-31 15:31:40,723 - DEBUG - ==== SSA block rewrite pass on 66
2025-01-31 15:31:40,723 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e881bf40>
2025-01-31 15:31:40,724 - DEBUG - on stmt: $70compare_op.2 = origsize != known_size.2
2025-01-31 15:31:40,724 - DEBUG - on stmt: bool72 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,724 - DEBUG - on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, arrayobj.py:2057),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,724 - DEBUG - on stmt: branch $72pred, 74, 82
2025-01-31 15:31:40,724 - DEBUG - ==== SSA block rewrite pass on 74
2025-01-31 15:31:40,725 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e881bf40>
2025-01-31 15:31:40,725 - DEBUG - on stmt: $74load_global.0 = global(ValueError: <class 'ValueError'>)
2025-01-31 15:31:40,725 - DEBUG - on stmt: $const76.1 = const(str, total size of new array must be unchanged)
2025-01-31 15:31:40,725 - DEBUG - on stmt: $78call_function.2 = call $74load_global.0($const76.1, func=$74load_global.0, args=[Var($const76.1, arrayobj.py:2058)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,725 - DEBUG - on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2025-01-31 15:31:40,725 - DEBUG - ==== SSA block rewrite pass on 82
2025-01-31 15:31:40,726 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e881bf40>
2025-01-31 15:31:40,726 - DEBUG - on stmt: $const82.0 = const(NoneType, None)
2025-01-31 15:31:40,726 - DEBUG - on stmt: $84return_value.1 = cast(value=$const82.0)
2025-01-31 15:31:40,726 - DEBUG - on stmt: return $84return_value.1
2025-01-31 15:31:40,726 - DEBUG - ==== SSA block rewrite pass on 86
2025-01-31 15:31:40,727 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e881bf40>
2025-01-31 15:31:40,727 - DEBUG - on stmt: $const88.1 = const(int, 1)
2025-01-31 15:31:40,727 - DEBUG - on stmt: $90compare_op.2 = num_neg_value.2 == $const88.1
2025-01-31 15:31:40,727 - DEBUG - on stmt: bool92 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,727 - DEBUG - on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, arrayobj.py:2060),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,728 - DEBUG - on stmt: branch $92pred, 94, 160
2025-01-31 15:31:40,728 - DEBUG - ==== SSA block rewrite pass on 94
2025-01-31 15:31:40,728 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e881bf40>
2025-01-31 15:31:40,728 - DEBUG - on stmt: $const96.1 = const(int, 0)
2025-01-31 15:31:40,728 - DEBUG - on stmt: $98compare_op.2 = known_size.2 == $const96.1
2025-01-31 15:31:40,728 - DEBUG - on stmt: bool100 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,729 - DEBUG - on stmt: $100pred = call bool100($98compare_op.2, func=bool100, args=(Var($98compare_op.2, arrayobj.py:2062),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,729 - DEBUG - on stmt: branch $100pred, 102, 116
2025-01-31 15:31:40,729 - DEBUG - ==== SSA block rewrite pass on 102
2025-01-31 15:31:40,729 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e881bf40>
2025-01-31 15:31:40,729 - DEBUG - on stmt: inferred = const(int, 0)
2025-01-31 15:31:40,730 - DEBUG - on stmt: $const108.2 = const(int, 0)
2025-01-31 15:31:40,730 - DEBUG - on stmt: ok = origsize == $const108.2
2025-01-31 15:31:40,730 - DEBUG - on stmt: jump 136
2025-01-31 15:31:40,730 - DEBUG - ==== SSA block rewrite pass on 116
2025-01-31 15:31:40,730 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e881bf40>
2025-01-31 15:31:40,730 - DEBUG - on stmt: inferred.1 = origsize // known_size.2
2025-01-31 15:31:40,731 - DEBUG - on stmt: $128binary_modulo.5 = origsize % known_size.2
2025-01-31 15:31:40,731 - DEBUG - on stmt: $const130.6 = const(int, 0)
2025-01-31 15:31:40,731 - DEBUG - on stmt: ok.1 = $128binary_modulo.5 == $const130.6
2025-01-31 15:31:40,731 - DEBUG - on stmt: jump 136
2025-01-31 15:31:40,731 - DEBUG - ==== SSA block rewrite pass on 136
2025-01-31 15:31:40,731 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e881bf40>
2025-01-31 15:31:40,732 - DEBUG - on stmt: ok.2 = phi(incoming_values=[Var(ok.1, arrayobj.py:2067), Var(ok, arrayobj.py:2064)], incoming_blocks=[116, 102])
2025-01-31 15:31:40,732 - DEBUG - on stmt: inferred.2 = phi(incoming_values=[Var(inferred.1, arrayobj.py:2066), Var(inferred, arrayobj.py:2063)], incoming_blocks=[116, 102])
2025-01-31 15:31:40,732 - DEBUG - on stmt: bool138 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,732 - DEBUG - on stmt: $138pred = call bool138(ok.2, func=bool138, args=(Var(ok.2, arrayobj.py:2068),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,732 - DEBUG - on stmt: branch $138pred, 148, 140
2025-01-31 15:31:40,732 - DEBUG - ==== SSA block rewrite pass on 140
2025-01-31 15:31:40,733 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e881bf40>
2025-01-31 15:31:40,733 - DEBUG - on stmt: $140load_global.0 = global(ValueError: <class 'ValueError'>)
2025-01-31 15:31:40,733 - DEBUG - on stmt: $const142.1 = const(str, total size of new array must be unchanged)
2025-01-31 15:31:40,733 - DEBUG - on stmt: $144call_function.2 = call $140load_global.0($const142.1, func=$140load_global.0, args=[Var($const142.1, arrayobj.py:2069)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,733 - DEBUG - on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2025-01-31 15:31:40,733 - DEBUG - ==== SSA block rewrite pass on 148
2025-01-31 15:31:40,733 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e881bf40>
2025-01-31 15:31:40,734 - DEBUG - on stmt: shape[neg_ax] = inferred.2
2025-01-31 15:31:40,734 - DEBUG - on stmt: $const156.3 = const(NoneType, None)
2025-01-31 15:31:40,734 - DEBUG - on stmt: $158return_value.4 = cast(value=$const156.3)
2025-01-31 15:31:40,734 - DEBUG - on stmt: return $158return_value.4
2025-01-31 15:31:40,734 - DEBUG - ==== SSA block rewrite pass on 160
2025-01-31 15:31:40,734 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e881bf40>
2025-01-31 15:31:40,734 - DEBUG - on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
2025-01-31 15:31:40,734 - DEBUG - on stmt: $const162.1 = const(str, multiple negative shape values)
2025-01-31 15:31:40,735 - DEBUG - on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:2073)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,735 - DEBUG - on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
2025-01-31 15:31:40,735 - DEBUG - ==== SSA block rewrite pass on 161
2025-01-31 15:31:40,735 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e881bf40>
2025-01-31 15:31:40,735 - DEBUG - on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:2054), Var(known_size.2, arrayobj.py:2054)], incoming_blocks=[48, 34])
2025-01-31 15:31:40,735 - DEBUG - on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:2051), Var(num_neg_value.1, arrayobj.py:2051)], incoming_blocks=[48, 34])
2025-01-31 15:31:40,735 - DEBUG - on stmt: jump 18
2025-01-31 15:31:40,736 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {34: [<numba.core.ir.Assign object at 0x7c89e8d58850>]})
2025-01-31 15:31:40,736 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-31 15:31:40,736 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e88180d0>
2025-01-31 15:31:40,736 - DEBUG - on stmt: origsize = arg(0, name=origsize)
2025-01-31 15:31:40,736 - DEBUG - on stmt: shape = arg(1, name=shape)
2025-01-31 15:31:40,736 - DEBUG - on stmt: num_neg_value = const(int, 0)
2025-01-31 15:31:40,736 - DEBUG - on stmt: known_size = const(int, 1)
2025-01-31 15:31:40,737 - DEBUG - on stmt: $10load_global.2 = global(enumerate: <class 'enumerate'>)
2025-01-31 15:31:40,737 - DEBUG - on stmt: $14call_function.4 = call $10load_global.2(shape, func=$10load_global.2, args=[Var(shape, arrayobj.py:2046)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,737 - DEBUG - on stmt: $16get_iter.5 = getiter(value=$14call_function.4)
2025-01-31 15:31:40,737 - DEBUG - on stmt: $phi18.0 = $16get_iter.5
2025-01-31 15:31:40,737 - DEBUG - on stmt: jump 18
2025-01-31 15:31:40,737 - DEBUG - ==== SSA block rewrite pass on 18
2025-01-31 15:31:40,737 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e88180d0>
2025-01-31 15:31:40,737 - DEBUG - on stmt: known_size.2 = phi(incoming_values=[Var(known_size, arrayobj.py:2048), Var(known_size.3, arrayobj.py:2054)], incoming_blocks=[0, 161])
2025-01-31 15:31:40,737 - DEBUG - on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value, arrayobj.py:2047), Var(num_neg_value.3, arrayobj.py:2051)], incoming_blocks=[0, 161])
2025-01-31 15:31:40,738 - DEBUG - on stmt: $18for_iter.1 = iternext(value=$phi18.0)
2025-01-31 15:31:40,738 - DEBUG - on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
2025-01-31 15:31:40,738 - DEBUG - on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
2025-01-31 15:31:40,738 - DEBUG - on stmt: $phi20.1 = $18for_iter.2
2025-01-31 15:31:40,738 - DEBUG - on stmt: branch $18for_iter.3, 20, 58
2025-01-31 15:31:40,738 - DEBUG - ==== SSA block rewrite pass on 20
2025-01-31 15:31:40,738 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e88180d0>
2025-01-31 15:31:40,738 - DEBUG - on stmt: $20unpack_sequence.4 = exhaust_iter(value=$phi20.1, count=2)
2025-01-31 15:31:40,738 - DEBUG - on stmt: $20unpack_sequence.2 = static_getitem(value=$20unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2025-01-31 15:31:40,738 - DEBUG - on stmt: $20unpack_sequence.3 = static_getitem(value=$20unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2025-01-31 15:31:40,738 - DEBUG - on stmt: ax = $20unpack_sequence.2
2025-01-31 15:31:40,739 - DEBUG - on stmt: s = $20unpack_sequence.3
2025-01-31 15:31:40,739 - DEBUG - on stmt: $const28.6 = const(int, 0)
2025-01-31 15:31:40,739 - DEBUG - on stmt: $30compare_op.7 = s < $const28.6
2025-01-31 15:31:40,739 - DEBUG - on stmt: bool32 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,739 - DEBUG - on stmt: $32pred = call bool32($30compare_op.7, func=bool32, args=(Var($30compare_op.7, arrayobj.py:2050),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,739 - DEBUG - on stmt: branch $32pred, 34, 48
2025-01-31 15:31:40,739 - DEBUG - ==== SSA block rewrite pass on 34
2025-01-31 15:31:40,739 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e88180d0>
2025-01-31 15:31:40,739 - DEBUG - on stmt: $const36.2 = const(int, 1)
2025-01-31 15:31:40,739 - DEBUG - on stmt: $38inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const36.2, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:40,740 - DEBUG - on stmt: num_neg_value.1 = $38inplace_add.3
2025-01-31 15:31:40,740 - DEBUG - on stmt: neg_ax = ax
2025-01-31 15:31:40,740 - DEBUG - on stmt: jump 161
2025-01-31 15:31:40,740 - DEBUG - ==== SSA block rewrite pass on 48
2025-01-31 15:31:40,740 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e88180d0>
2025-01-31 15:31:40,740 - DEBUG - on stmt: $52inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:40,740 - DEBUG - on stmt: known_size.1 = $52inplace_multiply.3
2025-01-31 15:31:40,740 - DEBUG - on stmt: jump 161
2025-01-31 15:31:40,740 - DEBUG - ==== SSA block rewrite pass on 58
2025-01-31 15:31:40,740 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e88180d0>
2025-01-31 15:31:40,740 - DEBUG - on stmt: $const60.1 = const(int, 0)
2025-01-31 15:31:40,741 - DEBUG - on stmt: $62compare_op.2 = num_neg_value.2 == $const60.1
2025-01-31 15:31:40,741 - DEBUG - on stmt: bool64 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,741 - DEBUG - on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, arrayobj.py:2056),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,741 - DEBUG - on stmt: branch $64pred, 66, 86
2025-01-31 15:31:40,741 - DEBUG - ==== SSA block rewrite pass on 66
2025-01-31 15:31:40,741 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e88180d0>
2025-01-31 15:31:40,741 - DEBUG - on stmt: $70compare_op.2 = origsize != known_size.2
2025-01-31 15:31:40,741 - DEBUG - on stmt: bool72 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,741 - DEBUG - on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, arrayobj.py:2057),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,741 - DEBUG - on stmt: branch $72pred, 74, 82
2025-01-31 15:31:40,742 - DEBUG - ==== SSA block rewrite pass on 74
2025-01-31 15:31:40,742 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e88180d0>
2025-01-31 15:31:40,742 - DEBUG - on stmt: $74load_global.0 = global(ValueError: <class 'ValueError'>)
2025-01-31 15:31:40,742 - DEBUG - on stmt: $const76.1 = const(str, total size of new array must be unchanged)
2025-01-31 15:31:40,742 - DEBUG - on stmt: $78call_function.2 = call $74load_global.0($const76.1, func=$74load_global.0, args=[Var($const76.1, arrayobj.py:2058)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,742 - DEBUG - on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2025-01-31 15:31:40,742 - DEBUG - ==== SSA block rewrite pass on 82
2025-01-31 15:31:40,742 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e88180d0>
2025-01-31 15:31:40,742 - DEBUG - on stmt: $const82.0 = const(NoneType, None)
2025-01-31 15:31:40,742 - DEBUG - on stmt: $84return_value.1 = cast(value=$const82.0)
2025-01-31 15:31:40,742 - DEBUG - on stmt: return $84return_value.1
2025-01-31 15:31:40,742 - DEBUG - ==== SSA block rewrite pass on 86
2025-01-31 15:31:40,742 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e88180d0>
2025-01-31 15:31:40,743 - DEBUG - on stmt: $const88.1 = const(int, 1)
2025-01-31 15:31:40,743 - DEBUG - on stmt: $90compare_op.2 = num_neg_value.2 == $const88.1
2025-01-31 15:31:40,743 - DEBUG - on stmt: bool92 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,743 - DEBUG - on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, arrayobj.py:2060),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,743 - DEBUG - on stmt: branch $92pred, 94, 160
2025-01-31 15:31:40,743 - DEBUG - ==== SSA block rewrite pass on 94
2025-01-31 15:31:40,743 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e88180d0>
2025-01-31 15:31:40,743 - DEBUG - on stmt: $const96.1 = const(int, 0)
2025-01-31 15:31:40,743 - DEBUG - on stmt: $98compare_op.2 = known_size.2 == $const96.1
2025-01-31 15:31:40,743 - DEBUG - on stmt: bool100 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,743 - DEBUG - on stmt: $100pred = call bool100($98compare_op.2, func=bool100, args=(Var($98compare_op.2, arrayobj.py:2062),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,743 - DEBUG - on stmt: branch $100pred, 102, 116
2025-01-31 15:31:40,744 - DEBUG - ==== SSA block rewrite pass on 102
2025-01-31 15:31:40,744 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e88180d0>
2025-01-31 15:31:40,744 - DEBUG - on stmt: inferred = const(int, 0)
2025-01-31 15:31:40,744 - DEBUG - on stmt: $const108.2 = const(int, 0)
2025-01-31 15:31:40,744 - DEBUG - on stmt: ok = origsize == $const108.2
2025-01-31 15:31:40,744 - DEBUG - on stmt: jump 136
2025-01-31 15:31:40,744 - DEBUG - ==== SSA block rewrite pass on 116
2025-01-31 15:31:40,744 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e88180d0>
2025-01-31 15:31:40,744 - DEBUG - on stmt: inferred.1 = origsize // known_size.2
2025-01-31 15:31:40,744 - DEBUG - on stmt: $128binary_modulo.5 = origsize % known_size.2
2025-01-31 15:31:40,744 - DEBUG - on stmt: $const130.6 = const(int, 0)
2025-01-31 15:31:40,744 - DEBUG - on stmt: ok.1 = $128binary_modulo.5 == $const130.6
2025-01-31 15:31:40,744 - DEBUG - on stmt: jump 136
2025-01-31 15:31:40,744 - DEBUG - ==== SSA block rewrite pass on 136
2025-01-31 15:31:40,745 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e88180d0>
2025-01-31 15:31:40,745 - DEBUG - on stmt: ok.2 = phi(incoming_values=[Var(ok.1, arrayobj.py:2067), Var(ok, arrayobj.py:2064)], incoming_blocks=[116, 102])
2025-01-31 15:31:40,745 - DEBUG - on stmt: inferred.2 = phi(incoming_values=[Var(inferred.1, arrayobj.py:2066), Var(inferred, arrayobj.py:2063)], incoming_blocks=[116, 102])
2025-01-31 15:31:40,745 - DEBUG - on stmt: bool138 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,745 - DEBUG - on stmt: $138pred = call bool138(ok.2, func=bool138, args=(Var(ok.2, arrayobj.py:2068),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,745 - DEBUG - on stmt: branch $138pred, 148, 140
2025-01-31 15:31:40,745 - DEBUG - ==== SSA block rewrite pass on 140
2025-01-31 15:31:40,745 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e88180d0>
2025-01-31 15:31:40,745 - DEBUG - on stmt: $140load_global.0 = global(ValueError: <class 'ValueError'>)
2025-01-31 15:31:40,745 - DEBUG - on stmt: $const142.1 = const(str, total size of new array must be unchanged)
2025-01-31 15:31:40,745 - DEBUG - on stmt: $144call_function.2 = call $140load_global.0($const142.1, func=$140load_global.0, args=[Var($const142.1, arrayobj.py:2069)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,745 - DEBUG - on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2025-01-31 15:31:40,746 - DEBUG - ==== SSA block rewrite pass on 148
2025-01-31 15:31:40,746 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e88180d0>
2025-01-31 15:31:40,746 - DEBUG - on stmt: shape[neg_ax] = inferred.2
2025-01-31 15:31:40,746 - DEBUG - find_def var='neg_ax' stmt=shape[neg_ax] = inferred.2
2025-01-31 15:31:40,746 - DEBUG - find_def_from_top label 148
2025-01-31 15:31:40,746 - DEBUG - idom 136 from label 148
2025-01-31 15:31:40,746 - DEBUG - find_def_from_bottom label 136
2025-01-31 15:31:40,746 - DEBUG - find_def_from_top label 136
2025-01-31 15:31:40,746 - DEBUG - idom 94 from label 136
2025-01-31 15:31:40,746 - DEBUG - find_def_from_bottom label 94
2025-01-31 15:31:40,746 - DEBUG - find_def_from_top label 94
2025-01-31 15:31:40,746 - DEBUG - idom 86 from label 94
2025-01-31 15:31:40,746 - DEBUG - find_def_from_bottom label 86
2025-01-31 15:31:40,746 - DEBUG - find_def_from_top label 86
2025-01-31 15:31:40,746 - DEBUG - idom 58 from label 86
2025-01-31 15:31:40,746 - DEBUG - find_def_from_bottom label 58
2025-01-31 15:31:40,747 - DEBUG - find_def_from_top label 58
2025-01-31 15:31:40,747 - DEBUG - idom 18 from label 58
2025-01-31 15:31:40,747 - DEBUG - find_def_from_bottom label 18
2025-01-31 15:31:40,747 - DEBUG - find_def_from_top label 18
2025-01-31 15:31:40,747 - DEBUG - insert phi node neg_ax.1 = phi(incoming_values=[], incoming_blocks=[]) at 18
2025-01-31 15:31:40,747 - DEBUG - find_def_from_bottom label 0
2025-01-31 15:31:40,747 - DEBUG - find_def_from_top label 0
2025-01-31 15:31:40,747 - DEBUG - incoming_def <class 'numba.core.ssa.UndefinedVariable'>
2025-01-31 15:31:40,747 - DEBUG - find_def_from_bottom label 161
2025-01-31 15:31:40,747 - DEBUG - find_def_from_top label 161
2025-01-31 15:31:40,747 - DEBUG - insert phi node neg_ax.2 = phi(incoming_values=[], incoming_blocks=[]) at 161
2025-01-31 15:31:40,747 - DEBUG - find_def_from_bottom label 48
2025-01-31 15:31:40,747 - DEBUG - find_def_from_top label 48
2025-01-31 15:31:40,747 - DEBUG - idom 20 from label 48
2025-01-31 15:31:40,748 - DEBUG - find_def_from_bottom label 20
2025-01-31 15:31:40,748 - DEBUG - find_def_from_top label 20
2025-01-31 15:31:40,748 - DEBUG - idom 18 from label 20
2025-01-31 15:31:40,748 - DEBUG - find_def_from_bottom label 18
2025-01-31 15:31:40,748 - DEBUG - incoming_def neg_ax.1 = phi(incoming_values=[Undefined], incoming_blocks=[0])
2025-01-31 15:31:40,748 - DEBUG - find_def_from_bottom label 34
2025-01-31 15:31:40,748 - DEBUG - incoming_def neg_ax = ax
2025-01-31 15:31:40,748 - DEBUG - incoming_def neg_ax.2 = phi(incoming_values=[Var(neg_ax.1, arrayobj.py:2070), Var(neg_ax, arrayobj.py:2052)], incoming_blocks=[48, 34])
2025-01-31 15:31:40,748 - DEBUG - replaced with: shape[neg_ax.1] = inferred.2
2025-01-31 15:31:40,748 - DEBUG - on stmt: $const156.3 = const(NoneType, None)
2025-01-31 15:31:40,748 - DEBUG - on stmt: $158return_value.4 = cast(value=$const156.3)
2025-01-31 15:31:40,748 - DEBUG - on stmt: return $158return_value.4
2025-01-31 15:31:40,748 - DEBUG - ==== SSA block rewrite pass on 160
2025-01-31 15:31:40,748 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e88180d0>
2025-01-31 15:31:40,748 - DEBUG - on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
2025-01-31 15:31:40,748 - DEBUG - on stmt: $const162.1 = const(str, multiple negative shape values)
2025-01-31 15:31:40,748 - DEBUG - on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:2073)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,749 - DEBUG - on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
2025-01-31 15:31:40,749 - DEBUG - ==== SSA block rewrite pass on 161
2025-01-31 15:31:40,749 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e88180d0>
2025-01-31 15:31:40,749 - DEBUG - on stmt: known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:2054), Var(known_size.2, arrayobj.py:2054)], incoming_blocks=[48, 34])
2025-01-31 15:31:40,749 - DEBUG - on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:2051), Var(num_neg_value.1, arrayobj.py:2051)], incoming_blocks=[48, 34])
2025-01-31 15:31:40,749 - DEBUG - on stmt: jump 18
2025-01-31 15:31:40,888 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=481)
           2	LOAD_FAST(arg=0, lineno=483)
           4	LOAD_FAST(arg=1, lineno=483)
           6	COMPARE_OP(arg=4, lineno=483)
           8	RETURN_VALUE(arg=None, lineno=483)
2025-01-31 15:31:40,889 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:31:40,889 - DEBUG - stack: []
2025-01-31 15:31:40,889 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:31:40,889 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=481)
2025-01-31 15:31:40,889 - DEBUG - stack []
2025-01-31 15:31:40,889 - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=483)
2025-01-31 15:31:40,889 - DEBUG - stack []
2025-01-31 15:31:40,889 - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=483)
2025-01-31 15:31:40,889 - DEBUG - stack ['$a2.0']
2025-01-31 15:31:40,889 - DEBUG - dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=483)
2025-01-31 15:31:40,889 - DEBUG - stack ['$a2.0', '$min_val4.1']
2025-01-31 15:31:40,889 - DEBUG - dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=483)
2025-01-31 15:31:40,889 - DEBUG - stack ['$6compare_op.2']
2025-01-31 15:31:40,889 - DEBUG - end state. edges=[]
2025-01-31 15:31:40,889 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:31:40,889 - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-01-31 15:31:40,889 - DEBUG - defmap: {}
2025-01-31 15:31:40,889 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:40,889 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:40,889 - DEBUG - keep phismap: {}
2025-01-31 15:31:40,889 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-01-31 15:31:40,889 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:31:40,889 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'res': '$min_val4.1'}), (6, {'lhs': '$a2.0', 'rhs': '$min_val4.1', 'res': '$6compare_op.2'}), (8, {'retval': '$6compare_op.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:40,890 - DEBUG - label 0:
    a = arg(0, name=a)                       ['a']
    min_val = arg(1, name=min_val)           ['min_val']
    $6compare_op.2 = a > min_val             ['$6compare_op.2', 'a', 'min_val']
    $8return_value.3 = cast(value=$6compare_op.2) ['$6compare_op.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2025-01-31 15:31:40,893 - DEBUG - ==== SSA block analysis pass on 0
2025-01-31 15:31:40,893 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89ebb24970>
2025-01-31 15:31:40,893 - DEBUG - on stmt: a = arg(0, name=a)
2025-01-31 15:31:40,893 - DEBUG - on stmt: min_val = arg(1, name=min_val)
2025-01-31 15:31:40,893 - DEBUG - on stmt: $6compare_op.2 = a > min_val
2025-01-31 15:31:40,893 - DEBUG - on stmt: $8return_value.3 = cast(value=$6compare_op.2)
2025-01-31 15:31:40,893 - DEBUG - on stmt: return $8return_value.3
2025-01-31 15:31:40,893 - DEBUG - defs defaultdict(<class 'list'>,
            {'$6compare_op.2': [(<numba.core.ir.Assign object at 0x7c89ebb25ea0>,
                                 0)],
             '$8return_value.3': [(<numba.core.ir.Assign object at 0x7c89ebb27220>,
                                   0)],
             'a': [(<numba.core.ir.Assign object at 0x7c89ebb26410>, 0)],
             'min_val': [(<numba.core.ir.Assign object at 0x7c89ebb26500>, 0)]})
2025-01-31 15:31:40,893 - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x7c89ebb24970>
2025-01-31 15:31:40,921 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=3535)
           2	LOAD_GLOBAL(arg=0, lineno=3536)
           4	LOAD_FAST(arg=0, lineno=3536)
           6	CALL_FUNCTION(arg=1, lineno=3536)
           8	STORE_FAST(arg=2, lineno=3536)
          10	LOAD_GLOBAL(arg=1, lineno=3537)
          12	LOAD_FAST(arg=2, lineno=3537)
          14	CALL_FUNCTION(arg=1, lineno=3537)
          16	GET_ITER(arg=None, lineno=3537)
>         18	FOR_ITER(arg=20, lineno=3537)
          20	STORE_FAST(arg=3, lineno=3537)
          22	LOAD_FAST(arg=0, lineno=3538)
          24	LOAD_FAST(arg=3, lineno=3538)
          26	BINARY_SUBSCR(arg=None, lineno=3538)
          28	LOAD_FAST(arg=1, lineno=3538)
          30	LOAD_GLOBAL(arg=0, lineno=3538)
          32	LOAD_FAST(arg=1, lineno=3538)
          34	CALL_FUNCTION(arg=1, lineno=3538)
          36	LOAD_FAST(arg=2, lineno=3538)
          38	BINARY_SUBTRACT(arg=None, lineno=3538)
          40	LOAD_FAST(arg=3, lineno=3538)
          42	BINARY_ADD(arg=None, lineno=3538)
          44	BINARY_SUBSCR(arg=None, lineno=3538)
          46	COMPARE_OP(arg=3, lineno=3538)
          48	POP_JUMP_IF_FALSE(arg=30, lineno=3538)
          50	LOAD_GLOBAL(arg=2, lineno=3539)
          52	LOAD_CONST(arg=1, lineno=3539)
          54	CALL_FUNCTION(arg=1, lineno=3539)
          56	RAISE_VARARGS(arg=1, lineno=3539)
>         58	JUMP_ABSOLUTE(arg=10, lineno=3538)
>         60	LOAD_CONST(arg=0, lineno=3537)
          62	RETURN_VALUE(arg=None, lineno=3537)
2025-01-31 15:31:40,921 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:31:40,921 - DEBUG - stack: []
2025-01-31 15:31:40,921 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:31:40,921 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=3535)
2025-01-31 15:31:40,921 - DEBUG - stack []
2025-01-31 15:31:40,922 - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3536)
2025-01-31 15:31:40,922 - DEBUG - stack []
2025-01-31 15:31:40,922 - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3536)
2025-01-31 15:31:40,922 - DEBUG - stack ['$2load_global.0']
2025-01-31 15:31:40,922 - DEBUG - dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=3536)
2025-01-31 15:31:40,922 - DEBUG - stack ['$2load_global.0', '$shape4.1']
2025-01-31 15:31:40,922 - DEBUG - dispatch pc=8, inst=STORE_FAST(arg=2, lineno=3536)
2025-01-31 15:31:40,922 - DEBUG - stack ['$6call_function.2']
2025-01-31 15:31:40,922 - DEBUG - dispatch pc=10, inst=LOAD_GLOBAL(arg=1, lineno=3537)
2025-01-31 15:31:40,922 - DEBUG - stack []
2025-01-31 15:31:40,922 - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=2, lineno=3537)
2025-01-31 15:31:40,922 - DEBUG - stack ['$10load_global.3']
2025-01-31 15:31:40,922 - DEBUG - dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=3537)
2025-01-31 15:31:40,922 - DEBUG - stack ['$10load_global.3', '$n12.4']
2025-01-31 15:31:40,922 - DEBUG - dispatch pc=16, inst=GET_ITER(arg=None, lineno=3537)
2025-01-31 15:31:40,922 - DEBUG - stack ['$14call_function.5']
2025-01-31 15:31:40,922 - DEBUG - end state. edges=[Edge(pc=18, stack=('$16get_iter.6',), blockstack=(), npush=0)]
2025-01-31 15:31:40,922 - DEBUG - pending: deque([State(pc_initial=18 nstack_initial=1)])
2025-01-31 15:31:40,922 - DEBUG - stack: ['$phi18.0']
2025-01-31 15:31:40,922 - DEBUG - state.pc_initial: State(pc_initial=18 nstack_initial=1)
2025-01-31 15:31:40,922 - DEBUG - dispatch pc=18, inst=FOR_ITER(arg=20, lineno=3537)
2025-01-31 15:31:40,922 - DEBUG - stack ['$phi18.0']
2025-01-31 15:31:40,922 - DEBUG - end state. edges=[Edge(pc=60, stack=(), blockstack=(), npush=0), Edge(pc=20, stack=('$phi18.0', '$18for_iter.2'), blockstack=(), npush=0)]
2025-01-31 15:31:40,922 - DEBUG - pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=20 nstack_initial=2)])
2025-01-31 15:31:40,922 - DEBUG - stack: []
2025-01-31 15:31:40,922 - DEBUG - state.pc_initial: State(pc_initial=60 nstack_initial=0)
2025-01-31 15:31:40,922 - DEBUG - dispatch pc=60, inst=LOAD_CONST(arg=0, lineno=3537)
2025-01-31 15:31:40,923 - DEBUG - stack []
2025-01-31 15:31:40,923 - DEBUG - dispatch pc=62, inst=RETURN_VALUE(arg=None, lineno=3537)
2025-01-31 15:31:40,923 - DEBUG - stack ['$const60.0']
2025-01-31 15:31:40,923 - DEBUG - end state. edges=[]
2025-01-31 15:31:40,923 - DEBUG - pending: deque([State(pc_initial=20 nstack_initial=2)])
2025-01-31 15:31:40,923 - DEBUG - stack: ['$phi20.0', '$phi20.1']
2025-01-31 15:31:40,923 - DEBUG - state.pc_initial: State(pc_initial=20 nstack_initial=2)
2025-01-31 15:31:40,923 - DEBUG - dispatch pc=20, inst=STORE_FAST(arg=3, lineno=3537)
2025-01-31 15:31:40,923 - DEBUG - stack ['$phi20.0', '$phi20.1']
2025-01-31 15:31:40,923 - DEBUG - dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=3538)
2025-01-31 15:31:40,923 - DEBUG - stack ['$phi20.0']
2025-01-31 15:31:40,923 - DEBUG - dispatch pc=24, inst=LOAD_FAST(arg=3, lineno=3538)
2025-01-31 15:31:40,923 - DEBUG - stack ['$phi20.0', '$shape22.2']
2025-01-31 15:31:40,923 - DEBUG - dispatch pc=26, inst=BINARY_SUBSCR(arg=None, lineno=3538)
2025-01-31 15:31:40,923 - DEBUG - stack ['$phi20.0', '$shape22.2', '$i24.3']
2025-01-31 15:31:40,923 - DEBUG - dispatch pc=28, inst=LOAD_FAST(arg=1, lineno=3538)
2025-01-31 15:31:40,923 - DEBUG - stack ['$phi20.0', '$26binary_subscr.4']
2025-01-31 15:31:40,923 - DEBUG - dispatch pc=30, inst=LOAD_GLOBAL(arg=0, lineno=3538)
2025-01-31 15:31:40,923 - DEBUG - stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5']
2025-01-31 15:31:40,923 - DEBUG - dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=3538)
2025-01-31 15:31:40,923 - DEBUG - stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$30load_global.6']
2025-01-31 15:31:40,923 - DEBUG - dispatch pc=34, inst=CALL_FUNCTION(arg=1, lineno=3538)
2025-01-31 15:31:40,923 - DEBUG - stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$30load_global.6', '$main_shape32.7']
2025-01-31 15:31:40,923 - DEBUG - dispatch pc=36, inst=LOAD_FAST(arg=2, lineno=3538)
2025-01-31 15:31:40,923 - DEBUG - stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$34call_function.8']
2025-01-31 15:31:40,923 - DEBUG - dispatch pc=38, inst=BINARY_SUBTRACT(arg=None, lineno=3538)
2025-01-31 15:31:40,923 - DEBUG - stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$34call_function.8', '$n36.9']
2025-01-31 15:31:40,923 - DEBUG - dispatch pc=40, inst=LOAD_FAST(arg=3, lineno=3538)
2025-01-31 15:31:40,923 - DEBUG - stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$38binary_subtract.10']
2025-01-31 15:31:40,923 - DEBUG - dispatch pc=42, inst=BINARY_ADD(arg=None, lineno=3538)
2025-01-31 15:31:40,924 - DEBUG - stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$38binary_subtract.10', '$i40.11']
2025-01-31 15:31:40,924 - DEBUG - dispatch pc=44, inst=BINARY_SUBSCR(arg=None, lineno=3538)
2025-01-31 15:31:40,924 - DEBUG - stack ['$phi20.0', '$26binary_subscr.4', '$main_shape28.5', '$42binary_add.12']
2025-01-31 15:31:40,924 - DEBUG - dispatch pc=46, inst=COMPARE_OP(arg=3, lineno=3538)
2025-01-31 15:31:40,924 - DEBUG - stack ['$phi20.0', '$26binary_subscr.4', '$44binary_subscr.13']
2025-01-31 15:31:40,924 - DEBUG - dispatch pc=48, inst=POP_JUMP_IF_FALSE(arg=30, lineno=3538)
2025-01-31 15:31:40,924 - DEBUG - stack ['$phi20.0', '$46compare_op.14']
2025-01-31 15:31:40,924 - DEBUG - end state. edges=[Edge(pc=50, stack=('$phi20.0',), blockstack=(), npush=0), Edge(pc=58, stack=('$phi20.0',), blockstack=(), npush=0)]
2025-01-31 15:31:40,924 - DEBUG - pending: deque([State(pc_initial=50 nstack_initial=1), State(pc_initial=58 nstack_initial=1)])
2025-01-31 15:31:40,924 - DEBUG - stack: ['$phi50.0']
2025-01-31 15:31:40,924 - DEBUG - state.pc_initial: State(pc_initial=50 nstack_initial=1)
2025-01-31 15:31:40,924 - DEBUG - dispatch pc=50, inst=LOAD_GLOBAL(arg=2, lineno=3539)
2025-01-31 15:31:40,924 - DEBUG - stack ['$phi50.0']
2025-01-31 15:31:40,924 - DEBUG - dispatch pc=52, inst=LOAD_CONST(arg=1, lineno=3539)
2025-01-31 15:31:40,924 - DEBUG - stack ['$phi50.0', '$50load_global.1']
2025-01-31 15:31:40,924 - DEBUG - dispatch pc=54, inst=CALL_FUNCTION(arg=1, lineno=3539)
2025-01-31 15:31:40,924 - DEBUG - stack ['$phi50.0', '$50load_global.1', '$const52.2']
2025-01-31 15:31:40,924 - DEBUG - dispatch pc=56, inst=RAISE_VARARGS(arg=1, lineno=3539)
2025-01-31 15:31:40,924 - DEBUG - stack ['$phi50.0', '$54call_function.3']
2025-01-31 15:31:40,924 - DEBUG - end state. edges=[]
2025-01-31 15:31:40,924 - DEBUG - pending: deque([State(pc_initial=58 nstack_initial=1)])
2025-01-31 15:31:40,924 - DEBUG - stack: ['$phi58.0']
2025-01-31 15:31:40,924 - DEBUG - state.pc_initial: State(pc_initial=58 nstack_initial=1)
2025-01-31 15:31:40,924 - DEBUG - dispatch pc=58, inst=JUMP_ABSOLUTE(arg=10, lineno=3538)
2025-01-31 15:31:40,924 - DEBUG - stack ['$phi58.0']
2025-01-31 15:31:40,924 - DEBUG - end state. edges=[Edge(pc=18, stack=('$phi58.0',), blockstack=(), npush=0)]
2025-01-31 15:31:40,924 - DEBUG - pending: deque([State(pc_initial=18 nstack_initial=1)])
2025-01-31 15:31:40,925 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:31:40,925 - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=18 nstack_initial=1): {'$phi18.0'},
             State(pc_initial=20 nstack_initial=2): {'$phi20.1'},
             State(pc_initial=50 nstack_initial=1): set(),
             State(pc_initial=58 nstack_initial=1): set(),
             State(pc_initial=60 nstack_initial=0): set()})
2025-01-31 15:31:40,925 - DEBUG - defmap: {'$phi18.0': State(pc_initial=0 nstack_initial=0),
 '$phi20.1': State(pc_initial=18 nstack_initial=1)}
2025-01-31 15:31:40,925 - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi58.0', State(pc_initial=58 nstack_initial=1))},
             '$phi20.0': {('$phi18.0', State(pc_initial=18 nstack_initial=1))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))},
             '$phi50.0': {('$phi20.0', State(pc_initial=20 nstack_initial=2))},
             '$phi58.0': {('$phi20.0', State(pc_initial=20 nstack_initial=2))}})
2025-01-31 15:31:40,925 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi20.0', State(pc_initial=20 nstack_initial=2))},
             '$phi20.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi20.0', State(pc_initial=20 nstack_initial=2))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))},
             '$phi50.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi58.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))}})
2025-01-31 15:31:40,925 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))},
             '$phi50.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi58.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))}})
2025-01-31 15:31:40,925 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi18.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi20.1': {('$18for_iter.2',
                           State(pc_initial=18 nstack_initial=1))},
             '$phi50.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi58.0': {('$16get_iter.6',
                           State(pc_initial=0 nstack_initial=0))}})
2025-01-31 15:31:40,926 - DEBUG - keep phismap: {'$phi18.0': {('$16get_iter.6', State(pc_initial=0 nstack_initial=0))},
 '$phi20.1': {('$18for_iter.2', State(pc_initial=18 nstack_initial=1))}}
2025-01-31 15:31:40,926 - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi18.0': '$16get_iter.6'},
             State(pc_initial=18 nstack_initial=1): {'$phi20.1': '$18for_iter.2'}})
2025-01-31 15:31:40,926 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:31:40,926 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$shape4.1'}), (6, {'func': '$2load_global.0', 'args': ['$shape4.1'], 'res': '$6call_function.2'}), (8, {'value': '$6call_function.2'}), (10, {'res': '$10load_global.3'}), (12, {'res': '$n12.4'}), (14, {'func': '$10load_global.3', 'args': ['$n12.4'], 'res': '$14call_function.5'}), (16, {'value': '$14call_function.5', 'res': '$16get_iter.6'})), outgoing_phis={'$phi18.0': '$16get_iter.6'}, blockstack=(), active_try_block=None, outgoing_edgepushed={18: ('$16get_iter.6',)})
2025-01-31 15:31:40,926 - DEBUG - block_infos State(pc_initial=18 nstack_initial=1):
AdaptBlockInfo(insts=((18, {'iterator': '$phi18.0', 'pair': '$18for_iter.1', 'indval': '$18for_iter.2', 'pred': '$18for_iter.3'}),), outgoing_phis={'$phi20.1': '$18for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: (), 20: ('$phi18.0', '$18for_iter.2')})
2025-01-31 15:31:40,926 - DEBUG - block_infos State(pc_initial=20 nstack_initial=2):
AdaptBlockInfo(insts=((20, {'value': '$phi20.1'}), (22, {'res': '$shape22.2'}), (24, {'res': '$i24.3'}), (26, {'index': '$i24.3', 'target': '$shape22.2', 'res': '$26binary_subscr.4'}), (28, {'res': '$main_shape28.5'}), (30, {'res': '$30load_global.6'}), (32, {'res': '$main_shape32.7'}), (34, {'func': '$30load_global.6', 'args': ['$main_shape32.7'], 'res': '$34call_function.8'}), (36, {'res': '$n36.9'}), (38, {'lhs': '$34call_function.8', 'rhs': '$n36.9', 'res': '$38binary_subtract.10'}), (40, {'res': '$i40.11'}), (42, {'lhs': '$38binary_subtract.10', 'rhs': '$i40.11', 'res': '$42binary_add.12'}), (44, {'index': '$42binary_add.12', 'target': '$main_shape28.5', 'res': '$44binary_subscr.13'}), (46, {'lhs': '$26binary_subscr.4', 'rhs': '$44binary_subscr.13', 'res': '$46compare_op.14'}), (48, {'pred': '$46compare_op.14'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={50: ('$phi20.0',), 58: ('$phi20.0',)})
2025-01-31 15:31:40,926 - DEBUG - block_infos State(pc_initial=50 nstack_initial=1):
AdaptBlockInfo(insts=((50, {'res': '$50load_global.1'}), (52, {'res': '$const52.2'}), (54, {'func': '$50load_global.1', 'args': ['$const52.2'], 'res': '$54call_function.3'}), (56, {'exc': '$54call_function.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:40,926 - DEBUG - block_infos State(pc_initial=58 nstack_initial=1):
AdaptBlockInfo(insts=((58, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={18: ('$phi58.0',)})
2025-01-31 15:31:40,926 - DEBUG - block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$const60.0'}), (62, {'retval': '$const60.0', 'castval': '$62return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:40,927 - DEBUG - label 0:
    shape = arg(0, name=shape)               ['shape']
    main_shape = arg(1, name=main_shape)     ['main_shape']
    $2load_global.0 = global(len: <built-in function len>) ['$2load_global.0']
    n = call $2load_global.0(shape, func=$2load_global.0, args=[Var(shape, arrayobj.py:3535)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', 'n', 'shape']
    $10load_global.3 = global(range: <class 'range'>) ['$10load_global.3']
    $14call_function.5 = call $10load_global.3(n, func=$10load_global.3, args=[Var(n, arrayobj.py:3536)], kws=(), vararg=None, varkwarg=None, target=None) ['$10load_global.3', '$14call_function.5', 'n']
    $16get_iter.6 = getiter(value=$14call_function.5) ['$14call_function.5', '$16get_iter.6']
    $phi18.0 = $16get_iter.6                 ['$16get_iter.6', '$phi18.0']
    jump 18                                  []
label 18:
    $18for_iter.1 = iternext(value=$phi18.0) ['$18for_iter.1', '$phi18.0']
    $18for_iter.2 = pair_first(value=$18for_iter.1) ['$18for_iter.1', '$18for_iter.2']
    $18for_iter.3 = pair_second(value=$18for_iter.1) ['$18for_iter.1', '$18for_iter.3']
    $phi20.1 = $18for_iter.2                 ['$18for_iter.2', '$phi20.1']
    branch $18for_iter.3, 20, 60             ['$18for_iter.3']
label 20:
    i = $phi20.1                             ['$phi20.1', 'i']
    $26binary_subscr.4 = getitem(value=shape, index=i, fn=<built-in function getitem>) ['$26binary_subscr.4', 'i', 'shape']
    $30load_global.6 = global(len: <built-in function len>) ['$30load_global.6']
    $34call_function.8 = call $30load_global.6(main_shape, func=$30load_global.6, args=[Var(main_shape, arrayobj.py:3535)], kws=(), vararg=None, varkwarg=None, target=None) ['$30load_global.6', '$34call_function.8', 'main_shape']
    $38binary_subtract.10 = $34call_function.8 - n ['$34call_function.8', '$38binary_subtract.10', 'n']
    $42binary_add.12 = $38binary_subtract.10 + i ['$38binary_subtract.10', '$42binary_add.12', 'i']
    $44binary_subscr.13 = getitem(value=main_shape, index=$42binary_add.12, fn=<built-in function getitem>) ['$42binary_add.12', '$44binary_subscr.13', 'main_shape']
    $46compare_op.14 = $26binary_subscr.4 != $44binary_subscr.13 ['$26binary_subscr.4', '$44binary_subscr.13', '$46compare_op.14']
    bool48 = global(bool: <class 'bool'>)    ['bool48']
    $48pred = call bool48($46compare_op.14, func=bool48, args=(Var($46compare_op.14, arrayobj.py:3538),), kws=(), vararg=None, varkwarg=None, target=None) ['$46compare_op.14', '$48pred', 'bool48']
    branch $48pred, 50, 58                   ['$48pred']
label 50:
    $50load_global.1 = global(ValueError: <class 'ValueError'>) ['$50load_global.1']
    $const52.2 = const(str, nditer(): operands could not be broadcast together) ['$const52.2']
    $54call_function.3 = call $50load_global.1($const52.2, func=$50load_global.1, args=[Var($const52.2, arrayobj.py:3539)], kws=(), vararg=None, varkwarg=None, target=None) ['$50load_global.1', '$54call_function.3', '$const52.2']
    raise $54call_function.3                 ['$54call_function.3']
label 58:
    jump 18                                  []
label 60:
    $const60.0 = const(NoneType, None)       ['$const60.0']
    $62return_value.1 = cast(value=$const60.0) ['$62return_value.1', '$const60.0']
    return $62return_value.1                 ['$62return_value.1']

2025-01-31 15:31:40,932 - DEBUG - ==== SSA block analysis pass on 0
2025-01-31 15:31:40,932 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8ab3580>
2025-01-31 15:31:40,934 - DEBUG - on stmt: shape = arg(0, name=shape)
2025-01-31 15:31:40,934 - DEBUG - on stmt: main_shape = arg(1, name=main_shape)
2025-01-31 15:31:40,934 - DEBUG - on stmt: $2load_global.0 = global(len: <built-in function len>)
2025-01-31 15:31:40,934 - DEBUG - on stmt: n = const(int, 1)
2025-01-31 15:31:40,934 - DEBUG - on stmt: $10load_global.3 = global(range: <class 'range'>)
2025-01-31 15:31:40,934 - DEBUG - on stmt: $14call_function.5 = call $10load_global.3(n, func=$10load_global.3, args=[Var(n, arrayobj.py:3536)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,934 - DEBUG - on stmt: $16get_iter.6 = getiter(value=$14call_function.5)
2025-01-31 15:31:40,934 - DEBUG - on stmt: $phi18.0 = $16get_iter.6
2025-01-31 15:31:40,934 - DEBUG - on stmt: jump 18
2025-01-31 15:31:40,934 - DEBUG - ==== SSA block analysis pass on 18
2025-01-31 15:31:40,934 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8ab3580>
2025-01-31 15:31:40,934 - DEBUG - on stmt: $18for_iter.1 = iternext(value=$phi18.0)
2025-01-31 15:31:40,934 - DEBUG - on stmt: $18for_iter.2 = pair_first(value=$18for_iter.1)
2025-01-31 15:31:40,934 - DEBUG - on stmt: $18for_iter.3 = pair_second(value=$18for_iter.1)
2025-01-31 15:31:40,934 - DEBUG - on stmt: $phi20.1 = $18for_iter.2
2025-01-31 15:31:40,934 - DEBUG - on stmt: branch $18for_iter.3, 20, 60
2025-01-31 15:31:40,934 - DEBUG - ==== SSA block analysis pass on 20
2025-01-31 15:31:40,934 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8ab3580>
2025-01-31 15:31:40,934 - DEBUG - on stmt: i = $phi20.1
2025-01-31 15:31:40,934 - DEBUG - on stmt: $26binary_subscr.4 = getitem(value=shape, index=i, fn=<built-in function getitem>)
2025-01-31 15:31:40,934 - DEBUG - on stmt: $30load_global.6 = global(len: <built-in function len>)
2025-01-31 15:31:40,934 - DEBUG - on stmt: $34call_function.8 = const(int, 1)
2025-01-31 15:31:40,935 - DEBUG - on stmt: $38binary_subtract.10 = $34call_function.8 - n
2025-01-31 15:31:40,935 - DEBUG - on stmt: $42binary_add.12 = $38binary_subtract.10 + i
2025-01-31 15:31:40,935 - DEBUG - on stmt: $44binary_subscr.13 = getitem(value=main_shape, index=$42binary_add.12, fn=<built-in function getitem>)
2025-01-31 15:31:40,935 - DEBUG - on stmt: $46compare_op.14 = $26binary_subscr.4 != $44binary_subscr.13
2025-01-31 15:31:40,935 - DEBUG - on stmt: bool48 = global(bool: <class 'bool'>)
2025-01-31 15:31:40,935 - DEBUG - on stmt: $48pred = call bool48($46compare_op.14, func=bool48, args=(Var($46compare_op.14, arrayobj.py:3538),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,935 - DEBUG - on stmt: branch $48pred, 50, 58
2025-01-31 15:31:40,935 - DEBUG - ==== SSA block analysis pass on 50
2025-01-31 15:31:40,935 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8ab3580>
2025-01-31 15:31:40,935 - DEBUG - on stmt: $50load_global.1 = global(ValueError: <class 'ValueError'>)
2025-01-31 15:31:40,935 - DEBUG - on stmt: $const52.2 = const(str, nditer(): operands could not be broadcast together)
2025-01-31 15:31:40,935 - DEBUG - on stmt: $54call_function.3 = call $50load_global.1($const52.2, func=$50load_global.1, args=[Var($const52.2, arrayobj.py:3539)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:40,935 - DEBUG - on stmt: <static> raise <class 'ValueError'>('nditer(): operands could not be broadcast together')
2025-01-31 15:31:40,935 - DEBUG - ==== SSA block analysis pass on 58
2025-01-31 15:31:40,935 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8ab3580>
2025-01-31 15:31:40,935 - DEBUG - on stmt: jump 18
2025-01-31 15:31:40,935 - DEBUG - ==== SSA block analysis pass on 60
2025-01-31 15:31:40,935 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8ab3580>
2025-01-31 15:31:40,935 - DEBUG - on stmt: $const60.0 = const(NoneType, None)
2025-01-31 15:31:40,935 - DEBUG - on stmt: $62return_value.1 = cast(value=$const60.0)
2025-01-31 15:31:40,935 - DEBUG - on stmt: return $62return_value.1
2025-01-31 15:31:40,936 - DEBUG - defs defaultdict(<class 'list'>,
            {'$10load_global.3': [(<numba.core.ir.Assign object at 0x7c89f0325e40>,
                                   0)],
             '$14call_function.5': [(<numba.core.ir.Assign object at 0x7c89f03f07f0>,
                                     0)],
             '$16get_iter.6': [(<numba.core.ir.Assign object at 0x7c89f03f0190>,
                                0)],
             '$18for_iter.1': [(<numba.core.ir.Assign object at 0x7c89f03f0c10>,
                                18)],
             '$18for_iter.2': [(<numba.core.ir.Assign object at 0x7c89f03f0430>,
                                18)],
             '$18for_iter.3': [(<numba.core.ir.Assign object at 0x7c89f03f0be0>,
                                18)],
             '$26binary_subscr.4': [(<numba.core.ir.Assign object at 0x7c89f03f01f0>,
                                     20)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x7c89f03243a0>,
                                  0)],
             '$30load_global.6': [(<numba.core.ir.Assign object at 0x7c89f03f17e0>,
                                   20)],
             '$34call_function.8': [(<numba.core.ir.Assign object at 0x7c89f03f1b70>,
                                     20)],
             '$38binary_subtract.10': [(<numba.core.ir.Assign object at 0x7c89f03f18a0>,
                                        20)],
             '$42binary_add.12': [(<numba.core.ir.Assign object at 0x7c89f03f2080>,
                                   20)],
             '$44binary_subscr.13': [(<numba.core.ir.Assign object at 0x7c89f03f2650>,
                                      20)],
             '$46compare_op.14': [(<numba.core.ir.Assign object at 0x7c89f03f05b0>,
                                   20)],
             '$48pred': [(<numba.core.ir.Assign object at 0x7c89f0043b80>, 20)],
             '$50load_global.1': [(<numba.core.ir.Assign object at 0x7c89f03f2a10>,
                                   50)],
             '$54call_function.3': [(<numba.core.ir.Assign object at 0x7c89f0043d00>,
                                     50)],
             '$62return_value.1': [(<numba.core.ir.Assign object at 0x7c89f0043ca0>,
                                    60)],
             '$const52.2': [(<numba.core.ir.Assign object at 0x7c89f0042e90>,
                             50)],
             '$const60.0': [(<numba.core.ir.Assign object at 0x7c89f0043eb0>,
                             60)],
             '$phi18.0': [(<numba.core.ir.Assign object at 0x7c89f0326080>, 0)],
             '$phi20.1': [(<numba.core.ir.Assign object at 0x7c89f03f0910>,
                           18)],
             'bool48': [(<numba.core.ir.Assign object at 0x7c89f03f0550>, 20)],
             'i': [(<numba.core.ir.Assign object at 0x7c89f03f0ac0>, 20)],
             'main_shape': [(<numba.core.ir.Assign object at 0x7c89f0326260>,
                             0)],
             'n': [(<numba.core.ir.Assign object at 0x7c89f0325330>, 0)],
             'shape': [(<numba.core.ir.Assign object at 0x7c89f0325f60>, 0)]})
2025-01-31 15:31:40,936 - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x7c89f0325f30>
2025-01-31 15:31:41,021 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=437)
           2	LOAD_DEREF(arg=0, lineno=440)
           4	STORE_FAST(arg=1, lineno=440)
           6	LOAD_GLOBAL(arg=0, lineno=441)
           8	LOAD_METHOD(arg=1, lineno=441)
          10	LOAD_FAST(arg=0, lineno=441)
          12	CALL_METHOD(arg=1, lineno=441)
          14	GET_ITER(arg=None, lineno=441)
>         16	FOR_ITER(arg=8, lineno=441)
          18	STORE_FAST(arg=2, lineno=441)
          20	LOAD_FAST(arg=1, lineno=442)
          22	LOAD_FAST(arg=2, lineno=442)
          24	LOAD_METHOD(arg=2, lineno=442)
          26	CALL_METHOD(arg=0, lineno=442)
          28	INPLACE_ADD(arg=None, lineno=442)
          30	STORE_FAST(arg=1, lineno=442)
          32	JUMP_ABSOLUTE(arg=9, lineno=442)
>         34	LOAD_FAST(arg=1, lineno=443)
          36	LOAD_FAST(arg=0, lineno=443)
          38	LOAD_ATTR(arg=3, lineno=443)
          40	BINARY_TRUE_DIVIDE(arg=None, lineno=443)
          42	RETURN_VALUE(arg=None, lineno=443)
2025-01-31 15:31:41,021 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:31:41,021 - DEBUG - stack: []
2025-01-31 15:31:41,021 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:31:41,021 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=437)
2025-01-31 15:31:41,021 - DEBUG - stack []
2025-01-31 15:31:41,021 - DEBUG - dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=440)
2025-01-31 15:31:41,021 - DEBUG - stack []
2025-01-31 15:31:41,021 - DEBUG - dispatch pc=4, inst=STORE_FAST(arg=1, lineno=440)
2025-01-31 15:31:41,022 - DEBUG - stack ['$2load_deref.0']
2025-01-31 15:31:41,022 - DEBUG - dispatch pc=6, inst=LOAD_GLOBAL(arg=0, lineno=441)
2025-01-31 15:31:41,022 - DEBUG - stack []
2025-01-31 15:31:41,022 - DEBUG - dispatch pc=8, inst=LOAD_METHOD(arg=1, lineno=441)
2025-01-31 15:31:41,022 - DEBUG - stack ['$6load_global.1']
2025-01-31 15:31:41,022 - DEBUG - dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=441)
2025-01-31 15:31:41,022 - DEBUG - stack ['$8load_method.2']
2025-01-31 15:31:41,022 - DEBUG - dispatch pc=12, inst=CALL_METHOD(arg=1, lineno=441)
2025-01-31 15:31:41,022 - DEBUG - stack ['$8load_method.2', '$a10.3']
2025-01-31 15:31:41,022 - DEBUG - dispatch pc=14, inst=GET_ITER(arg=None, lineno=441)
2025-01-31 15:31:41,022 - DEBUG - stack ['$12call_method.4']
2025-01-31 15:31:41,022 - DEBUG - end state. edges=[Edge(pc=16, stack=('$14get_iter.5',), blockstack=(), npush=0)]
2025-01-31 15:31:41,022 - DEBUG - pending: deque([State(pc_initial=16 nstack_initial=1)])
2025-01-31 15:31:41,022 - DEBUG - stack: ['$phi16.0']
2025-01-31 15:31:41,022 - DEBUG - state.pc_initial: State(pc_initial=16 nstack_initial=1)
2025-01-31 15:31:41,022 - DEBUG - dispatch pc=16, inst=FOR_ITER(arg=8, lineno=441)
2025-01-31 15:31:41,022 - DEBUG - stack ['$phi16.0']
2025-01-31 15:31:41,022 - DEBUG - end state. edges=[Edge(pc=34, stack=(), blockstack=(), npush=0), Edge(pc=18, stack=('$phi16.0', '$16for_iter.2'), blockstack=(), npush=0)]
2025-01-31 15:31:41,022 - DEBUG - pending: deque([State(pc_initial=34 nstack_initial=0), State(pc_initial=18 nstack_initial=2)])
2025-01-31 15:31:41,022 - DEBUG - stack: []
2025-01-31 15:31:41,022 - DEBUG - state.pc_initial: State(pc_initial=34 nstack_initial=0)
2025-01-31 15:31:41,022 - DEBUG - dispatch pc=34, inst=LOAD_FAST(arg=1, lineno=443)
2025-01-31 15:31:41,022 - DEBUG - stack []
2025-01-31 15:31:41,022 - DEBUG - dispatch pc=36, inst=LOAD_FAST(arg=0, lineno=443)
2025-01-31 15:31:41,022 - DEBUG - stack ['$c34.0']
2025-01-31 15:31:41,022 - DEBUG - dispatch pc=38, inst=LOAD_ATTR(arg=3, lineno=443)
2025-01-31 15:31:41,022 - DEBUG - stack ['$c34.0', '$a36.1']
2025-01-31 15:31:41,022 - DEBUG - dispatch pc=40, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=443)
2025-01-31 15:31:41,023 - DEBUG - stack ['$c34.0', '$38load_attr.2']
2025-01-31 15:31:41,023 - DEBUG - dispatch pc=42, inst=RETURN_VALUE(arg=None, lineno=443)
2025-01-31 15:31:41,023 - DEBUG - stack ['$40binary_true_divide.3']
2025-01-31 15:31:41,023 - DEBUG - end state. edges=[]
2025-01-31 15:31:41,023 - DEBUG - pending: deque([State(pc_initial=18 nstack_initial=2)])
2025-01-31 15:31:41,023 - DEBUG - stack: ['$phi18.0', '$phi18.1']
2025-01-31 15:31:41,023 - DEBUG - state.pc_initial: State(pc_initial=18 nstack_initial=2)
2025-01-31 15:31:41,023 - DEBUG - dispatch pc=18, inst=STORE_FAST(arg=2, lineno=441)
2025-01-31 15:31:41,023 - DEBUG - stack ['$phi18.0', '$phi18.1']
2025-01-31 15:31:41,023 - DEBUG - dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=442)
2025-01-31 15:31:41,023 - DEBUG - stack ['$phi18.0']
2025-01-31 15:31:41,023 - DEBUG - dispatch pc=22, inst=LOAD_FAST(arg=2, lineno=442)
2025-01-31 15:31:41,023 - DEBUG - stack ['$phi18.0', '$c20.2']
2025-01-31 15:31:41,023 - DEBUG - dispatch pc=24, inst=LOAD_METHOD(arg=2, lineno=442)
2025-01-31 15:31:41,023 - DEBUG - stack ['$phi18.0', '$c20.2', '$v22.3']
2025-01-31 15:31:41,023 - DEBUG - dispatch pc=26, inst=CALL_METHOD(arg=0, lineno=442)
2025-01-31 15:31:41,023 - DEBUG - stack ['$phi18.0', '$c20.2', '$24load_method.4']
2025-01-31 15:31:41,023 - DEBUG - dispatch pc=28, inst=INPLACE_ADD(arg=None, lineno=442)
2025-01-31 15:31:41,023 - DEBUG - stack ['$phi18.0', '$c20.2', '$26call_method.5']
2025-01-31 15:31:41,023 - DEBUG - dispatch pc=30, inst=STORE_FAST(arg=1, lineno=442)
2025-01-31 15:31:41,023 - DEBUG - stack ['$phi18.0', '$28inplace_add.6']
2025-01-31 15:31:41,023 - DEBUG - dispatch pc=32, inst=JUMP_ABSOLUTE(arg=9, lineno=442)
2025-01-31 15:31:41,023 - DEBUG - stack ['$phi18.0']
2025-01-31 15:31:41,023 - DEBUG - end state. edges=[Edge(pc=16, stack=('$phi18.0',), blockstack=(), npush=0)]
2025-01-31 15:31:41,023 - DEBUG - pending: deque([State(pc_initial=16 nstack_initial=1)])
2025-01-31 15:31:41,023 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:31:41,023 - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=16 nstack_initial=1): {'$phi16.0'},
             State(pc_initial=18 nstack_initial=2): {'$phi18.1'},
             State(pc_initial=34 nstack_initial=0): set()})
2025-01-31 15:31:41,024 - DEBUG - defmap: {'$phi16.0': State(pc_initial=0 nstack_initial=0),
 '$phi18.1': State(pc_initial=16 nstack_initial=1)}
2025-01-31 15:31:41,024 - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi18.0', State(pc_initial=18 nstack_initial=2))},
             '$phi18.0': {('$phi16.0', State(pc_initial=16 nstack_initial=1))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
2025-01-31 15:31:41,024 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi16.0', State(pc_initial=16 nstack_initial=1))},
             '$phi18.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
2025-01-31 15:31:41,024 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
2025-01-31 15:31:41,024 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
2025-01-31 15:31:41,024 - DEBUG - keep phismap: {'$phi16.0': {('$14get_iter.5', State(pc_initial=0 nstack_initial=0))},
 '$phi18.1': {('$16for_iter.2', State(pc_initial=16 nstack_initial=1))}}
2025-01-31 15:31:41,024 - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi16.0': '$14get_iter.5'},
             State(pc_initial=16 nstack_initial=1): {'$phi18.1': '$16for_iter.2'}})
2025-01-31 15:31:41,025 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:31:41,025 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'value': '$2load_deref.0'}), (6, {'res': '$6load_global.1'}), (8, {'item': '$6load_global.1', 'res': '$8load_method.2'}), (10, {'res': '$a10.3'}), (12, {'func': '$8load_method.2', 'args': ['$a10.3'], 'res': '$12call_method.4'}), (14, {'value': '$12call_method.4', 'res': '$14get_iter.5'})), outgoing_phis={'$phi16.0': '$14get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={16: ('$14get_iter.5',)})
2025-01-31 15:31:41,025 - DEBUG - block_infos State(pc_initial=16 nstack_initial=1):
AdaptBlockInfo(insts=((16, {'iterator': '$phi16.0', 'pair': '$16for_iter.1', 'indval': '$16for_iter.2', 'pred': '$16for_iter.3'}),), outgoing_phis={'$phi18.1': '$16for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: (), 18: ('$phi16.0', '$16for_iter.2')})
2025-01-31 15:31:41,025 - DEBUG - block_infos State(pc_initial=18 nstack_initial=2):
AdaptBlockInfo(insts=((18, {'value': '$phi18.1'}), (20, {'res': '$c20.2'}), (22, {'res': '$v22.3'}), (24, {'item': '$v22.3', 'res': '$24load_method.4'}), (26, {'func': '$24load_method.4', 'args': [], 'res': '$26call_method.5'}), (28, {'lhs': '$c20.2', 'rhs': '$26call_method.5', 'res': '$28inplace_add.6'}), (30, {'value': '$28inplace_add.6'}), (32, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={16: ('$phi18.0',)})
2025-01-31 15:31:41,025 - DEBUG - block_infos State(pc_initial=34 nstack_initial=0):
AdaptBlockInfo(insts=((34, {'res': '$c34.0'}), (36, {'res': '$a36.1'}), (38, {'item': '$a36.1', 'res': '$38load_attr.2'}), (40, {'lhs': '$c34.0', 'rhs': '$38load_attr.2', 'res': '$40binary_true_divide.3'}), (42, {'retval': '$40binary_true_divide.3', 'castval': '$42return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:41,026 - DEBUG - label 0:
    a = arg(0, name=a)                       ['a']
    c = freevar(acc_init: 0.0)               ['c']
    $6load_global.1 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>) ['$6load_global.1']
    $8load_method.2 = getattr(value=$6load_global.1, attr=nditer) ['$6load_global.1', '$8load_method.2']
    $12call_method.4 = call $8load_method.2(a, func=$8load_method.2, args=[Var(a, arraymath.py:437)], kws=(), vararg=None, varkwarg=None, target=None) ['$12call_method.4', '$8load_method.2', 'a']
    $14get_iter.5 = getiter(value=$12call_method.4) ['$12call_method.4', '$14get_iter.5']
    $phi16.0 = $14get_iter.5                 ['$14get_iter.5', '$phi16.0']
    jump 16                                  []
label 16:
    $16for_iter.1 = iternext(value=$phi16.0) ['$16for_iter.1', '$phi16.0']
    $16for_iter.2 = pair_first(value=$16for_iter.1) ['$16for_iter.1', '$16for_iter.2']
    $16for_iter.3 = pair_second(value=$16for_iter.1) ['$16for_iter.1', '$16for_iter.3']
    $phi18.1 = $16for_iter.2                 ['$16for_iter.2', '$phi18.1']
    branch $16for_iter.3, 18, 34             ['$16for_iter.3']
label 18:
    v = $phi18.1                             ['$phi18.1', 'v']
    $24load_method.4 = getattr(value=v, attr=item) ['$24load_method.4', 'v']
    $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None, varkwarg=None, target=None) ['$24load_method.4', '$26call_method.5']
    $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined) ['$26call_method.5', '$28inplace_add.6', 'c']
    c = $28inplace_add.6                     ['$28inplace_add.6', 'c']
    jump 16                                  []
label 34:
    $38load_attr.2 = getattr(value=a, attr=size) ['$38load_attr.2', 'a']
    $40binary_true_divide.3 = c / $38load_attr.2 ['$38load_attr.2', '$40binary_true_divide.3', 'c']
    $42return_value.4 = cast(value=$40binary_true_divide.3) ['$40binary_true_divide.3', '$42return_value.4']
    return $42return_value.4                 ['$42return_value.4']

2025-01-31 15:31:41,030 - DEBUG - ==== SSA block analysis pass on 0
2025-01-31 15:31:41,030 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e899cbb0>
2025-01-31 15:31:41,030 - DEBUG - on stmt: a = arg(0, name=a)
2025-01-31 15:31:41,030 - DEBUG - on stmt: c = freevar(acc_init: 0.0)
2025-01-31 15:31:41,030 - DEBUG - on stmt: $6load_global.1 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:41,031 - DEBUG - on stmt: $8load_method.2 = getattr(value=$6load_global.1, attr=nditer)
2025-01-31 15:31:41,031 - DEBUG - on stmt: $12call_method.4 = call $8load_method.2(a, func=$8load_method.2, args=[Var(a, arraymath.py:437)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,031 - DEBUG - on stmt: $14get_iter.5 = getiter(value=$12call_method.4)
2025-01-31 15:31:41,031 - DEBUG - on stmt: $phi16.0 = $14get_iter.5
2025-01-31 15:31:41,031 - DEBUG - on stmt: jump 16
2025-01-31 15:31:41,031 - DEBUG - ==== SSA block analysis pass on 16
2025-01-31 15:31:41,031 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e899cbb0>
2025-01-31 15:31:41,031 - DEBUG - on stmt: $16for_iter.1 = iternext(value=$phi16.0)
2025-01-31 15:31:41,031 - DEBUG - on stmt: $16for_iter.2 = pair_first(value=$16for_iter.1)
2025-01-31 15:31:41,031 - DEBUG - on stmt: $16for_iter.3 = pair_second(value=$16for_iter.1)
2025-01-31 15:31:41,031 - DEBUG - on stmt: $phi18.1 = $16for_iter.2
2025-01-31 15:31:41,031 - DEBUG - on stmt: branch $16for_iter.3, 18, 34
2025-01-31 15:31:41,031 - DEBUG - ==== SSA block analysis pass on 18
2025-01-31 15:31:41,031 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e899cbb0>
2025-01-31 15:31:41,031 - DEBUG - on stmt: v = $phi18.1
2025-01-31 15:31:41,031 - DEBUG - on stmt: $24load_method.4 = getattr(value=v, attr=item)
2025-01-31 15:31:41,031 - DEBUG - on stmt: $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,031 - DEBUG - on stmt: $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:41,031 - DEBUG - on stmt: c = $28inplace_add.6
2025-01-31 15:31:41,031 - DEBUG - on stmt: jump 16
2025-01-31 15:31:41,031 - DEBUG - ==== SSA block analysis pass on 34
2025-01-31 15:31:41,031 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e899cbb0>
2025-01-31 15:31:41,031 - DEBUG - on stmt: $38load_attr.2 = getattr(value=a, attr=size)
2025-01-31 15:31:41,031 - DEBUG - on stmt: $40binary_true_divide.3 = c / $38load_attr.2
2025-01-31 15:31:41,031 - DEBUG - on stmt: $42return_value.4 = cast(value=$40binary_true_divide.3)
2025-01-31 15:31:41,031 - DEBUG - on stmt: return $42return_value.4
2025-01-31 15:31:41,032 - DEBUG - defs defaultdict(<class 'list'>,
            {'$12call_method.4': [(<numba.core.ir.Assign object at 0x7c89ebb24a30>,
                                   0)],
             '$14get_iter.5': [(<numba.core.ir.Assign object at 0x7c89ebb251e0>,
                                0)],
             '$16for_iter.1': [(<numba.core.ir.Assign object at 0x7c89ebb00250>,
                                16)],
             '$16for_iter.2': [(<numba.core.ir.Assign object at 0x7c89ebb009a0>,
                                16)],
             '$16for_iter.3': [(<numba.core.ir.Assign object at 0x7c89ebb02440>,
                                16)],
             '$24load_method.4': [(<numba.core.ir.Assign object at 0x7c89ebb03340>,
                                   18)],
             '$26call_method.5': [(<numba.core.ir.Assign object at 0x7c89ebb015d0>,
                                   18)],
             '$28inplace_add.6': [(<numba.core.ir.Assign object at 0x7c89ebb013c0>,
                                   18)],
             '$38load_attr.2': [(<numba.core.ir.Assign object at 0x7c89e899ebc0>,
                                 34)],
             '$40binary_true_divide.3': [(<numba.core.ir.Assign object at 0x7c89e899d4e0>,
                                          34)],
             '$42return_value.4': [(<numba.core.ir.Assign object at 0x7c89e899c880>,
                                    34)],
             '$6load_global.1': [(<numba.core.ir.Assign object at 0x7c89ebb249d0>,
                                  0)],
             '$8load_method.2': [(<numba.core.ir.Assign object at 0x7c89ebb24ac0>,
                                  0)],
             '$phi16.0': [(<numba.core.ir.Assign object at 0x7c89ebb24190>, 0)],
             '$phi18.1': [(<numba.core.ir.Assign object at 0x7c89ebb01f30>,
                           16)],
             'a': [(<numba.core.ir.Assign object at 0x7c89ebb265f0>, 0)],
             'c': [(<numba.core.ir.Assign object at 0x7c89ebb24700>, 0),
                   (<numba.core.ir.Assign object at 0x7c89ebb00c40>, 18)],
             'v': [(<numba.core.ir.Assign object at 0x7c89ebb01e40>, 18)]})
2025-01-31 15:31:41,032 - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x7c89e899cbb0>
2025-01-31 15:31:41,032 - DEBUG - Fix SSA violator on var c
2025-01-31 15:31:41,032 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-31 15:31:41,032 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89ebb01030>
2025-01-31 15:31:41,032 - DEBUG - on stmt: a = arg(0, name=a)
2025-01-31 15:31:41,032 - DEBUG - on stmt: c = freevar(acc_init: 0.0)
2025-01-31 15:31:41,032 - DEBUG - first assign: c
2025-01-31 15:31:41,032 - DEBUG - replaced with: c = freevar(acc_init: 0.0)
2025-01-31 15:31:41,032 - DEBUG - on stmt: $6load_global.1 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:41,032 - DEBUG - on stmt: $8load_method.2 = getattr(value=$6load_global.1, attr=nditer)
2025-01-31 15:31:41,032 - DEBUG - on stmt: $12call_method.4 = call $8load_method.2(a, func=$8load_method.2, args=[Var(a, arraymath.py:437)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,032 - DEBUG - on stmt: $14get_iter.5 = getiter(value=$12call_method.4)
2025-01-31 15:31:41,032 - DEBUG - on stmt: $phi16.0 = $14get_iter.5
2025-01-31 15:31:41,032 - DEBUG - on stmt: jump 16
2025-01-31 15:31:41,032 - DEBUG - ==== SSA block rewrite pass on 16
2025-01-31 15:31:41,032 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89ebb01030>
2025-01-31 15:31:41,033 - DEBUG - on stmt: $16for_iter.1 = iternext(value=$phi16.0)
2025-01-31 15:31:41,033 - DEBUG - on stmt: $16for_iter.2 = pair_first(value=$16for_iter.1)
2025-01-31 15:31:41,033 - DEBUG - on stmt: $16for_iter.3 = pair_second(value=$16for_iter.1)
2025-01-31 15:31:41,033 - DEBUG - on stmt: $phi18.1 = $16for_iter.2
2025-01-31 15:31:41,033 - DEBUG - on stmt: branch $16for_iter.3, 18, 34
2025-01-31 15:31:41,033 - DEBUG - ==== SSA block rewrite pass on 18
2025-01-31 15:31:41,033 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89ebb01030>
2025-01-31 15:31:41,033 - DEBUG - on stmt: v = $phi18.1
2025-01-31 15:31:41,033 - DEBUG - on stmt: $24load_method.4 = getattr(value=v, attr=item)
2025-01-31 15:31:41,033 - DEBUG - on stmt: $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,033 - DEBUG - on stmt: $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:41,033 - DEBUG - on stmt: c = $28inplace_add.6
2025-01-31 15:31:41,033 - DEBUG - replaced with: c.1 = $28inplace_add.6
2025-01-31 15:31:41,033 - DEBUG - on stmt: jump 16
2025-01-31 15:31:41,033 - DEBUG - ==== SSA block rewrite pass on 34
2025-01-31 15:31:41,033 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89ebb01030>
2025-01-31 15:31:41,033 - DEBUG - on stmt: $38load_attr.2 = getattr(value=a, attr=size)
2025-01-31 15:31:41,033 - DEBUG - on stmt: $40binary_true_divide.3 = c / $38load_attr.2
2025-01-31 15:31:41,033 - DEBUG - on stmt: $42return_value.4 = cast(value=$40binary_true_divide.3)
2025-01-31 15:31:41,033 - DEBUG - on stmt: return $42return_value.4
2025-01-31 15:31:41,033 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7c89ebb03df0>],
             18: [<numba.core.ir.Assign object at 0x7c89ebb03f10>]})
2025-01-31 15:31:41,033 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-31 15:31:41,033 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89ebb01030>
2025-01-31 15:31:41,033 - DEBUG - on stmt: a = arg(0, name=a)
2025-01-31 15:31:41,033 - DEBUG - on stmt: c = freevar(acc_init: 0.0)
2025-01-31 15:31:41,033 - DEBUG - on stmt: $6load_global.1 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:41,033 - DEBUG - on stmt: $8load_method.2 = getattr(value=$6load_global.1, attr=nditer)
2025-01-31 15:31:41,033 - DEBUG - on stmt: $12call_method.4 = call $8load_method.2(a, func=$8load_method.2, args=[Var(a, arraymath.py:437)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,034 - DEBUG - on stmt: $14get_iter.5 = getiter(value=$12call_method.4)
2025-01-31 15:31:41,034 - DEBUG - on stmt: $phi16.0 = $14get_iter.5
2025-01-31 15:31:41,034 - DEBUG - on stmt: jump 16
2025-01-31 15:31:41,034 - DEBUG - ==== SSA block rewrite pass on 16
2025-01-31 15:31:41,034 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89ebb01030>
2025-01-31 15:31:41,034 - DEBUG - on stmt: $16for_iter.1 = iternext(value=$phi16.0)
2025-01-31 15:31:41,034 - DEBUG - on stmt: $16for_iter.2 = pair_first(value=$16for_iter.1)
2025-01-31 15:31:41,034 - DEBUG - on stmt: $16for_iter.3 = pair_second(value=$16for_iter.1)
2025-01-31 15:31:41,034 - DEBUG - on stmt: $phi18.1 = $16for_iter.2
2025-01-31 15:31:41,034 - DEBUG - on stmt: branch $16for_iter.3, 18, 34
2025-01-31 15:31:41,034 - DEBUG - ==== SSA block rewrite pass on 18
2025-01-31 15:31:41,034 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89ebb01030>
2025-01-31 15:31:41,034 - DEBUG - on stmt: v = $phi18.1
2025-01-31 15:31:41,034 - DEBUG - on stmt: $24load_method.4 = getattr(value=v, attr=item)
2025-01-31 15:31:41,034 - DEBUG - on stmt: $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,034 - DEBUG - on stmt: $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:41,034 - DEBUG - find_def var='c' stmt=$28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:41,034 - DEBUG - find_def_from_top label 18
2025-01-31 15:31:41,034 - DEBUG - idom 16 from label 18
2025-01-31 15:31:41,034 - DEBUG - find_def_from_bottom label 16
2025-01-31 15:31:41,034 - DEBUG - find_def_from_top label 16
2025-01-31 15:31:41,034 - DEBUG - insert phi node c.2 = phi(incoming_values=[], incoming_blocks=[]) at 16
2025-01-31 15:31:41,034 - DEBUG - find_def_from_bottom label 0
2025-01-31 15:31:41,034 - DEBUG - incoming_def c = freevar(acc_init: 0.0)
2025-01-31 15:31:41,034 - DEBUG - find_def_from_bottom label 18
2025-01-31 15:31:41,034 - DEBUG - incoming_def c.1 = $28inplace_add.6
2025-01-31 15:31:41,034 - DEBUG - replaced with: $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c.2, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:41,035 - DEBUG - on stmt: c.1 = $28inplace_add.6
2025-01-31 15:31:41,035 - DEBUG - on stmt: jump 16
2025-01-31 15:31:41,035 - DEBUG - ==== SSA block rewrite pass on 34
2025-01-31 15:31:41,035 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89ebb01030>
2025-01-31 15:31:41,035 - DEBUG - on stmt: $38load_attr.2 = getattr(value=a, attr=size)
2025-01-31 15:31:41,035 - DEBUG - on stmt: $40binary_true_divide.3 = c / $38load_attr.2
2025-01-31 15:31:41,035 - DEBUG - find_def var='c' stmt=$40binary_true_divide.3 = c / $38load_attr.2
2025-01-31 15:31:41,035 - DEBUG - find_def_from_top label 34
2025-01-31 15:31:41,035 - DEBUG - idom 16 from label 34
2025-01-31 15:31:41,035 - DEBUG - find_def_from_bottom label 16
2025-01-31 15:31:41,035 - DEBUG - replaced with: $40binary_true_divide.3 = c.2 / $38load_attr.2
2025-01-31 15:31:41,035 - DEBUG - on stmt: $42return_value.4 = cast(value=$40binary_true_divide.3)
2025-01-31 15:31:41,035 - DEBUG - on stmt: return $42return_value.4
2025-01-31 15:31:41,253 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=1209)
           2	LOAD_FAST(arg=0, lineno=1221)
           4	LOAD_CONST(arg=1, lineno=1221)
           6	BINARY_SUBSCR(arg=None, lineno=1221)
           8	LOAD_GLOBAL(arg=0, lineno=1221)
          10	LOAD_METHOD(arg=1, lineno=1221)
          12	LOAD_FAST(arg=0, lineno=1221)
          14	LOAD_CONST(arg=2, lineno=1221)
          16	LOAD_GLOBAL(arg=2, lineno=1221)
          18	LOAD_FAST(arg=2, lineno=1221)
          20	LOAD_FAST(arg=0, lineno=1221)
          22	LOAD_ATTR(arg=3, lineno=1221)
          24	LOAD_CONST(arg=1, lineno=1221)
          26	BINARY_SUBSCR(arg=None, lineno=1221)
          28	CALL_FUNCTION(arg=2, lineno=1221)
          30	BUILD_SLICE(arg=2, lineno=1221)
          32	BINARY_SUBSCR(arg=None, lineno=1221)
          34	CALL_METHOD(arg=1, lineno=1221)
          36	COMPARE_OP(arg=5, lineno=1221)
          38	LOAD_FAST(arg=7, lineno=1221)
          40	LOAD_CONST(arg=1, lineno=1221)
          42	STORE_SUBSCR(arg=None, lineno=1221)
          44	LOAD_FAST(arg=7, lineno=1222)
          46	LOAD_CONST(arg=1, lineno=1222)
          48	DUP_TOP_TWO(arg=None, lineno=1222)
          50	BINARY_SUBSCR(arg=None, lineno=1222)
          52	LOAD_FAST(arg=0, lineno=1222)
          54	LOAD_CONST(arg=1, lineno=1222)
          56	BINARY_SUBSCR(arg=None, lineno=1222)
          58	LOAD_GLOBAL(arg=0, lineno=1222)
          60	LOAD_METHOD(arg=4, lineno=1222)
          62	LOAD_FAST(arg=0, lineno=1222)
          64	LOAD_CONST(arg=2, lineno=1222)
          66	LOAD_GLOBAL(arg=2, lineno=1222)
          68	LOAD_FAST(arg=4, lineno=1222)
          70	LOAD_FAST(arg=0, lineno=1222)
          72	LOAD_ATTR(arg=3, lineno=1222)
          74	LOAD_CONST(arg=1, lineno=1222)
          76	BINARY_SUBSCR(arg=None, lineno=1222)
          78	CALL_FUNCTION(arg=2, lineno=1222)
          80	BUILD_SLICE(arg=2, lineno=1222)
          82	BINARY_SUBSCR(arg=None, lineno=1222)
          84	CALL_METHOD(arg=1, lineno=1222)
          86	LOAD_FAST(arg=5, lineno=1222)
          88	BINARY_ADD(arg=None, lineno=1222)
          90	COMPARE_OP(arg=5, lineno=1222)
          92	INPLACE_AND(arg=None, lineno=1222)
          94	ROT_THREE(arg=None, lineno=1222)
          96	STORE_SUBSCR(arg=None, lineno=1222)
          98	LOAD_FAST(arg=7, lineno=1224)
         100	LOAD_CONST(arg=1, lineno=1224)
         102	BINARY_SUBSCR(arg=None, lineno=1224)
         104	POP_JUMP_IF_FALSE(arg=59, lineno=1224)
         106	LOAD_FAST(arg=6, lineno=1225)
         108	LOAD_CONST(arg=3, lineno=1225)
         110	BINARY_ADD(arg=None, lineno=1225)
         112	STORE_FAST(arg=8, lineno=1225)
         114	JUMP_FORWARD(arg=2, lineno=1225)
>        116	LOAD_CONST(arg=3, lineno=1227)
         118	STORE_FAST(arg=8, lineno=1227)
>        120	LOAD_FAST(arg=8, lineno=1229)
         122	LOAD_FAST(arg=0, lineno=1229)
         124	LOAD_ATTR(arg=3, lineno=1229)
         126	LOAD_CONST(arg=1, lineno=1229)
         128	BINARY_SUBSCR(arg=None, lineno=1229)
         130	COMPARE_OP(arg=0, lineno=1229)
         132	POP_JUMP_IF_FALSE(arg=167, lineno=1229)
>        134	LOAD_GLOBAL(arg=0, lineno=1230)
         136	LOAD_METHOD(arg=1, lineno=1230)
         138	LOAD_FAST(arg=0, lineno=1230)
         140	LOAD_GLOBAL(arg=1, lineno=1230)
         142	LOAD_CONST(arg=1, lineno=1230)
         144	LOAD_FAST(arg=8, lineno=1230)
         146	LOAD_FAST(arg=1, lineno=1230)
         148	BINARY_SUBTRACT(arg=None, lineno=1230)
         150	CALL_FUNCTION(arg=2, lineno=1230)
         152	LOAD_GLOBAL(arg=2, lineno=1230)
         154	LOAD_FAST(arg=8, lineno=1230)
         156	LOAD_FAST(arg=2, lineno=1230)
         158	BINARY_ADD(arg=None, lineno=1230)
         160	LOAD_FAST(arg=0, lineno=1230)
         162	LOAD_ATTR(arg=3, lineno=1230)
         164	LOAD_CONST(arg=1, lineno=1230)
         166	BINARY_SUBSCR(arg=None, lineno=1230)
         168	CALL_FUNCTION(arg=2, lineno=1230)
         170	BUILD_SLICE(arg=2, lineno=1230)
         172	BINARY_SUBSCR(arg=None, lineno=1230)
         174	CALL_METHOD(arg=1, lineno=1230)
         176	STORE_FAST(arg=9, lineno=1230)
         178	LOAD_FAST(arg=0, lineno=1233)
         180	LOAD_FAST(arg=8, lineno=1233)
         182	BINARY_SUBSCR(arg=None, lineno=1233)
         184	LOAD_FAST(arg=9, lineno=1233)
         186	COMPARE_OP(arg=2, lineno=1233)
         188	LOAD_FAST(arg=7, lineno=1233)
         190	LOAD_FAST(arg=8, lineno=1233)
         192	STORE_SUBSCR(arg=None, lineno=1233)
         194	LOAD_FAST(arg=7, lineno=1235)
         196	LOAD_FAST(arg=8, lineno=1235)
         198	BINARY_SUBSCR(arg=None, lineno=1235)
         200	POP_JUMP_IF_TRUE(arg=107, lineno=1235)
         202	LOAD_FAST(arg=8, lineno=1236)
         204	LOAD_CONST(arg=3, lineno=1236)
         206	INPLACE_ADD(arg=None, lineno=1236)
         208	STORE_FAST(arg=8, lineno=1236)
         210	JUMP_ABSOLUTE(arg=61, lineno=1237)
>        212	LOAD_GLOBAL(arg=0, lineno=1239)
         214	LOAD_METHOD(arg=4, lineno=1239)
         216	LOAD_FAST(arg=0, lineno=1239)
         218	LOAD_GLOBAL(arg=1, lineno=1239)
         220	LOAD_CONST(arg=1, lineno=1239)
         222	LOAD_FAST(arg=8, lineno=1239)
         224	LOAD_FAST(arg=3, lineno=1239)
         226	BINARY_SUBTRACT(arg=None, lineno=1239)
         228	CALL_FUNCTION(arg=2, lineno=1239)
         230	LOAD_GLOBAL(arg=2, lineno=1239)
         232	LOAD_FAST(arg=8, lineno=1239)
         234	LOAD_FAST(arg=4, lineno=1239)
         236	BINARY_ADD(arg=None, lineno=1239)
         238	LOAD_FAST(arg=0, lineno=1239)
         240	LOAD_ATTR(arg=3, lineno=1239)
         242	LOAD_CONST(arg=1, lineno=1239)
         244	BINARY_SUBSCR(arg=None, lineno=1239)
         246	CALL_FUNCTION(arg=2, lineno=1239)
         248	BUILD_SLICE(arg=2, lineno=1239)
         250	BINARY_SUBSCR(arg=None, lineno=1239)
         252	CALL_METHOD(arg=1, lineno=1239)
         254	STORE_FAST(arg=10, lineno=1239)
         256	LOAD_FAST(arg=7, lineno=1240)
         258	LOAD_FAST(arg=8, lineno=1240)
         260	DUP_TOP_TWO(arg=None, lineno=1240)
         262	BINARY_SUBSCR(arg=None, lineno=1240)
         264	LOAD_FAST(arg=0, lineno=1240)
         266	LOAD_FAST(arg=8, lineno=1240)
         268	BINARY_SUBSCR(arg=None, lineno=1240)
         270	LOAD_FAST(arg=10, lineno=1240)
         272	LOAD_FAST(arg=5, lineno=1240)
         274	BINARY_ADD(arg=None, lineno=1240)
         276	COMPARE_OP(arg=5, lineno=1240)
         278	INPLACE_AND(arg=None, lineno=1240)
         280	ROT_THREE(arg=None, lineno=1240)
         282	STORE_SUBSCR(arg=None, lineno=1240)
         284	LOAD_FAST(arg=7, lineno=1242)
         286	LOAD_FAST(arg=8, lineno=1242)
         288	BINARY_SUBSCR(arg=None, lineno=1242)
         290	POP_JUMP_IF_TRUE(arg=152, lineno=1242)
         292	LOAD_FAST(arg=8, lineno=1243)
         294	LOAD_CONST(arg=3, lineno=1243)
         296	INPLACE_ADD(arg=None, lineno=1243)
         298	STORE_FAST(arg=8, lineno=1243)
         300	JUMP_ABSOLUTE(arg=61, lineno=1244)
>        302	LOAD_FAST(arg=8, lineno=1247)
         304	LOAD_FAST(arg=6, lineno=1247)
         306	LOAD_CONST(arg=3, lineno=1247)
         308	BINARY_ADD(arg=None, lineno=1247)
         310	INPLACE_ADD(arg=None, lineno=1247)
         312	STORE_FAST(arg=8, lineno=1247)
         314	LOAD_FAST(arg=8, lineno=1229)
         316	LOAD_FAST(arg=0, lineno=1229)
         318	LOAD_ATTR(arg=3, lineno=1229)
         320	LOAD_CONST(arg=1, lineno=1229)
         322	BINARY_SUBSCR(arg=None, lineno=1229)
         324	COMPARE_OP(arg=0, lineno=1229)
         326	POP_JUMP_IF_TRUE(arg=68, lineno=1229)
         328	LOAD_CONST(arg=2, lineno=1229)
         330	RETURN_VALUE(arg=None, lineno=1229)
>        332	LOAD_CONST(arg=2, lineno=1229)
         334	RETURN_VALUE(arg=None, lineno=1229)
2025-01-31 15:31:41,253 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:31:41,253 - DEBUG - stack: []
2025-01-31 15:31:41,253 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:31:41,253 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=1209)
2025-01-31 15:31:41,253 - DEBUG - stack []
2025-01-31 15:31:41,253 - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1221)
2025-01-31 15:31:41,253 - DEBUG - stack []
2025-01-31 15:31:41,253 - DEBUG - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1221)
2025-01-31 15:31:41,253 - DEBUG - stack ['$x2.0']
2025-01-31 15:31:41,253 - DEBUG - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=1221)
2025-01-31 15:31:41,253 - DEBUG - stack ['$x2.0', '$const4.1']
2025-01-31 15:31:41,253 - DEBUG - dispatch pc=8, inst=LOAD_GLOBAL(arg=0, lineno=1221)
2025-01-31 15:31:41,253 - DEBUG - stack ['$6binary_subscr.2']
2025-01-31 15:31:41,253 - DEBUG - dispatch pc=10, inst=LOAD_METHOD(arg=1, lineno=1221)
2025-01-31 15:31:41,253 - DEBUG - stack ['$6binary_subscr.2', '$8load_global.3']
2025-01-31 15:31:41,253 - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=1221)
2025-01-31 15:31:41,253 - DEBUG - stack ['$6binary_subscr.2', '$10load_method.4']
2025-01-31 15:31:41,253 - DEBUG - dispatch pc=14, inst=LOAD_CONST(arg=2, lineno=1221)
2025-01-31 15:31:41,253 - DEBUG - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5']
2025-01-31 15:31:41,253 - DEBUG - dispatch pc=16, inst=LOAD_GLOBAL(arg=2, lineno=1221)
2025-01-31 15:31:41,253 - DEBUG - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$const14.6']
2025-01-31 15:31:41,253 - DEBUG - dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=1221)
2025-01-31 15:31:41,253 - DEBUG - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$const14.6', '$16load_global.7']
2025-01-31 15:31:41,254 - DEBUG - dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=1221)
2025-01-31 15:31:41,254 - DEBUG - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$const14.6', '$16load_global.7', '$post_max18.8']
2025-01-31 15:31:41,254 - DEBUG - dispatch pc=22, inst=LOAD_ATTR(arg=3, lineno=1221)
2025-01-31 15:31:41,254 - DEBUG - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$const14.6', '$16load_global.7', '$post_max18.8', '$x20.9']
2025-01-31 15:31:41,254 - DEBUG - dispatch pc=24, inst=LOAD_CONST(arg=1, lineno=1221)
2025-01-31 15:31:41,254 - DEBUG - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$const14.6', '$16load_global.7', '$post_max18.8', '$22load_attr.10']
2025-01-31 15:31:41,254 - DEBUG - dispatch pc=26, inst=BINARY_SUBSCR(arg=None, lineno=1221)
2025-01-31 15:31:41,254 - DEBUG - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$const14.6', '$16load_global.7', '$post_max18.8', '$22load_attr.10', '$const24.11']
2025-01-31 15:31:41,254 - DEBUG - dispatch pc=28, inst=CALL_FUNCTION(arg=2, lineno=1221)
2025-01-31 15:31:41,254 - DEBUG - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$const14.6', '$16load_global.7', '$post_max18.8', '$26binary_subscr.12']
2025-01-31 15:31:41,254 - DEBUG - dispatch pc=30, inst=BUILD_SLICE(arg=2, lineno=1221)
2025-01-31 15:31:41,254 - DEBUG - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$const14.6', '$28call_function.13']
2025-01-31 15:31:41,254 - DEBUG - dispatch pc=32, inst=BINARY_SUBSCR(arg=None, lineno=1221)
2025-01-31 15:31:41,254 - DEBUG - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$30build_slice.15']
2025-01-31 15:31:41,254 - DEBUG - dispatch pc=34, inst=CALL_METHOD(arg=1, lineno=1221)
2025-01-31 15:31:41,254 - DEBUG - stack ['$6binary_subscr.2', '$10load_method.4', '$32binary_subscr.16']
2025-01-31 15:31:41,254 - DEBUG - dispatch pc=36, inst=COMPARE_OP(arg=5, lineno=1221)
2025-01-31 15:31:41,254 - DEBUG - stack ['$6binary_subscr.2', '$34call_method.17']
2025-01-31 15:31:41,254 - DEBUG - dispatch pc=38, inst=LOAD_FAST(arg=7, lineno=1221)
2025-01-31 15:31:41,254 - DEBUG - stack ['$36compare_op.18']
2025-01-31 15:31:41,254 - DEBUG - dispatch pc=40, inst=LOAD_CONST(arg=1, lineno=1221)
2025-01-31 15:31:41,254 - DEBUG - stack ['$36compare_op.18', '$peaks38.19']
2025-01-31 15:31:41,254 - DEBUG - dispatch pc=42, inst=STORE_SUBSCR(arg=None, lineno=1221)
2025-01-31 15:31:41,254 - DEBUG - stack ['$36compare_op.18', '$peaks38.19', '$const40.20']
2025-01-31 15:31:41,254 - DEBUG - dispatch pc=44, inst=LOAD_FAST(arg=7, lineno=1222)
2025-01-31 15:31:41,254 - DEBUG - stack []
2025-01-31 15:31:41,254 - DEBUG - dispatch pc=46, inst=LOAD_CONST(arg=1, lineno=1222)
2025-01-31 15:31:41,254 - DEBUG - stack ['$peaks44.21']
2025-01-31 15:31:41,255 - DEBUG - dispatch pc=48, inst=DUP_TOP_TWO(arg=None, lineno=1222)
2025-01-31 15:31:41,255 - DEBUG - stack ['$peaks44.21', '$const46.22']
2025-01-31 15:31:41,255 - DEBUG - dispatch pc=50, inst=BINARY_SUBSCR(arg=None, lineno=1222)
2025-01-31 15:31:41,255 - DEBUG - stack ['$peaks44.21', '$const46.22', '$48dup_top_two.23', '$48dup_top_two.24']
2025-01-31 15:31:41,255 - DEBUG - dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=1222)
2025-01-31 15:31:41,255 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25']
2025-01-31 15:31:41,255 - DEBUG - dispatch pc=54, inst=LOAD_CONST(arg=1, lineno=1222)
2025-01-31 15:31:41,255 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$x52.26']
2025-01-31 15:31:41,255 - DEBUG - dispatch pc=56, inst=BINARY_SUBSCR(arg=None, lineno=1222)
2025-01-31 15:31:41,255 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$x52.26', '$const54.27']
2025-01-31 15:31:41,255 - DEBUG - dispatch pc=58, inst=LOAD_GLOBAL(arg=0, lineno=1222)
2025-01-31 15:31:41,255 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28']
2025-01-31 15:31:41,255 - DEBUG - dispatch pc=60, inst=LOAD_METHOD(arg=4, lineno=1222)
2025-01-31 15:31:41,255 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$58load_global.29']
2025-01-31 15:31:41,255 - DEBUG - dispatch pc=62, inst=LOAD_FAST(arg=0, lineno=1222)
2025-01-31 15:31:41,255 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30']
2025-01-31 15:31:41,255 - DEBUG - dispatch pc=64, inst=LOAD_CONST(arg=2, lineno=1222)
2025-01-31 15:31:41,255 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31']
2025-01-31 15:31:41,255 - DEBUG - dispatch pc=66, inst=LOAD_GLOBAL(arg=2, lineno=1222)
2025-01-31 15:31:41,255 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$const64.32']
2025-01-31 15:31:41,255 - DEBUG - dispatch pc=68, inst=LOAD_FAST(arg=4, lineno=1222)
2025-01-31 15:31:41,255 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$const64.32', '$66load_global.33']
2025-01-31 15:31:41,255 - DEBUG - dispatch pc=70, inst=LOAD_FAST(arg=0, lineno=1222)
2025-01-31 15:31:41,255 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$const64.32', '$66load_global.33', '$post_avg68.34']
2025-01-31 15:31:41,255 - DEBUG - dispatch pc=72, inst=LOAD_ATTR(arg=3, lineno=1222)
2025-01-31 15:31:41,255 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$const64.32', '$66load_global.33', '$post_avg68.34', '$x70.35']
2025-01-31 15:31:41,255 - DEBUG - dispatch pc=74, inst=LOAD_CONST(arg=1, lineno=1222)
2025-01-31 15:31:41,255 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$const64.32', '$66load_global.33', '$post_avg68.34', '$72load_attr.36']
2025-01-31 15:31:41,256 - DEBUG - dispatch pc=76, inst=BINARY_SUBSCR(arg=None, lineno=1222)
2025-01-31 15:31:41,256 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$const64.32', '$66load_global.33', '$post_avg68.34', '$72load_attr.36', '$const74.37']
2025-01-31 15:31:41,256 - DEBUG - dispatch pc=78, inst=CALL_FUNCTION(arg=2, lineno=1222)
2025-01-31 15:31:41,256 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$const64.32', '$66load_global.33', '$post_avg68.34', '$76binary_subscr.38']
2025-01-31 15:31:41,256 - DEBUG - dispatch pc=80, inst=BUILD_SLICE(arg=2, lineno=1222)
2025-01-31 15:31:41,256 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$const64.32', '$78call_function.39']
2025-01-31 15:31:41,256 - DEBUG - dispatch pc=82, inst=BINARY_SUBSCR(arg=None, lineno=1222)
2025-01-31 15:31:41,256 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$80build_slice.41']
2025-01-31 15:31:41,256 - DEBUG - dispatch pc=84, inst=CALL_METHOD(arg=1, lineno=1222)
2025-01-31 15:31:41,256 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$82binary_subscr.42']
2025-01-31 15:31:41,256 - DEBUG - dispatch pc=86, inst=LOAD_FAST(arg=5, lineno=1222)
2025-01-31 15:31:41,256 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$84call_method.43']
2025-01-31 15:31:41,256 - DEBUG - dispatch pc=88, inst=BINARY_ADD(arg=None, lineno=1222)
2025-01-31 15:31:41,256 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$84call_method.43', '$delta86.44']
2025-01-31 15:31:41,256 - DEBUG - dispatch pc=90, inst=COMPARE_OP(arg=5, lineno=1222)
2025-01-31 15:31:41,256 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$88binary_add.45']
2025-01-31 15:31:41,256 - DEBUG - dispatch pc=92, inst=INPLACE_AND(arg=None, lineno=1222)
2025-01-31 15:31:41,256 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$90compare_op.46']
2025-01-31 15:31:41,256 - DEBUG - dispatch pc=94, inst=ROT_THREE(arg=None, lineno=1222)
2025-01-31 15:31:41,256 - DEBUG - stack ['$peaks44.21', '$const46.22', '$92inplace_and.47']
2025-01-31 15:31:41,256 - DEBUG - dispatch pc=96, inst=STORE_SUBSCR(arg=None, lineno=1222)
2025-01-31 15:31:41,256 - DEBUG - stack ['$92inplace_and.47', '$peaks44.21', '$const46.22']
2025-01-31 15:31:41,256 - DEBUG - dispatch pc=98, inst=LOAD_FAST(arg=7, lineno=1224)
2025-01-31 15:31:41,256 - DEBUG - stack []
2025-01-31 15:31:41,256 - DEBUG - dispatch pc=100, inst=LOAD_CONST(arg=1, lineno=1224)
2025-01-31 15:31:41,256 - DEBUG - stack ['$peaks98.48']
2025-01-31 15:31:41,256 - DEBUG - dispatch pc=102, inst=BINARY_SUBSCR(arg=None, lineno=1224)
2025-01-31 15:31:41,256 - DEBUG - stack ['$peaks98.48', '$const100.49']
2025-01-31 15:31:41,256 - DEBUG - dispatch pc=104, inst=POP_JUMP_IF_FALSE(arg=59, lineno=1224)
2025-01-31 15:31:41,257 - DEBUG - stack ['$102binary_subscr.50']
2025-01-31 15:31:41,257 - DEBUG - end state. edges=[Edge(pc=106, stack=(), blockstack=(), npush=0), Edge(pc=116, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:41,257 - DEBUG - pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=116 nstack_initial=0)])
2025-01-31 15:31:41,257 - DEBUG - stack: []
2025-01-31 15:31:41,257 - DEBUG - state.pc_initial: State(pc_initial=106 nstack_initial=0)
2025-01-31 15:31:41,257 - DEBUG - dispatch pc=106, inst=LOAD_FAST(arg=6, lineno=1225)
2025-01-31 15:31:41,257 - DEBUG - stack []
2025-01-31 15:31:41,257 - DEBUG - dispatch pc=108, inst=LOAD_CONST(arg=3, lineno=1225)
2025-01-31 15:31:41,257 - DEBUG - stack ['$wait106.0']
2025-01-31 15:31:41,257 - DEBUG - dispatch pc=110, inst=BINARY_ADD(arg=None, lineno=1225)
2025-01-31 15:31:41,257 - DEBUG - stack ['$wait106.0', '$const108.1']
2025-01-31 15:31:41,257 - DEBUG - dispatch pc=112, inst=STORE_FAST(arg=8, lineno=1225)
2025-01-31 15:31:41,257 - DEBUG - stack ['$110binary_add.2']
2025-01-31 15:31:41,257 - DEBUG - dispatch pc=114, inst=JUMP_FORWARD(arg=2, lineno=1225)
2025-01-31 15:31:41,257 - DEBUG - stack []
2025-01-31 15:31:41,257 - DEBUG - end state. edges=[Edge(pc=120, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:41,257 - DEBUG - pending: deque([State(pc_initial=116 nstack_initial=0), State(pc_initial=120 nstack_initial=0)])
2025-01-31 15:31:41,257 - DEBUG - stack: []
2025-01-31 15:31:41,257 - DEBUG - state.pc_initial: State(pc_initial=116 nstack_initial=0)
2025-01-31 15:31:41,257 - DEBUG - dispatch pc=116, inst=LOAD_CONST(arg=3, lineno=1227)
2025-01-31 15:31:41,257 - DEBUG - stack []
2025-01-31 15:31:41,257 - DEBUG - dispatch pc=118, inst=STORE_FAST(arg=8, lineno=1227)
2025-01-31 15:31:41,257 - DEBUG - stack ['$const116.0']
2025-01-31 15:31:41,257 - DEBUG - end state. edges=[Edge(pc=120, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:41,257 - DEBUG - pending: deque([State(pc_initial=120 nstack_initial=0), State(pc_initial=120 nstack_initial=0)])
2025-01-31 15:31:41,257 - DEBUG - stack: []
2025-01-31 15:31:41,257 - DEBUG - state.pc_initial: State(pc_initial=120 nstack_initial=0)
2025-01-31 15:31:41,257 - DEBUG - dispatch pc=120, inst=LOAD_FAST(arg=8, lineno=1229)
2025-01-31 15:31:41,258 - DEBUG - stack []
2025-01-31 15:31:41,258 - DEBUG - dispatch pc=122, inst=LOAD_FAST(arg=0, lineno=1229)
2025-01-31 15:31:41,258 - DEBUG - stack ['$n120.0']
2025-01-31 15:31:41,258 - DEBUG - dispatch pc=124, inst=LOAD_ATTR(arg=3, lineno=1229)
2025-01-31 15:31:41,258 - DEBUG - stack ['$n120.0', '$x122.1']
2025-01-31 15:31:41,258 - DEBUG - dispatch pc=126, inst=LOAD_CONST(arg=1, lineno=1229)
2025-01-31 15:31:41,258 - DEBUG - stack ['$n120.0', '$124load_attr.2']
2025-01-31 15:31:41,258 - DEBUG - dispatch pc=128, inst=BINARY_SUBSCR(arg=None, lineno=1229)
2025-01-31 15:31:41,258 - DEBUG - stack ['$n120.0', '$124load_attr.2', '$const126.3']
2025-01-31 15:31:41,258 - DEBUG - dispatch pc=130, inst=COMPARE_OP(arg=0, lineno=1229)
2025-01-31 15:31:41,258 - DEBUG - stack ['$n120.0', '$128binary_subscr.4']
2025-01-31 15:31:41,258 - DEBUG - dispatch pc=132, inst=POP_JUMP_IF_FALSE(arg=167, lineno=1229)
2025-01-31 15:31:41,258 - DEBUG - stack ['$130compare_op.5']
2025-01-31 15:31:41,258 - DEBUG - end state. edges=[Edge(pc=134, stack=(), blockstack=(), npush=0), Edge(pc=332, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:41,258 - DEBUG - pending: deque([State(pc_initial=120 nstack_initial=0), State(pc_initial=134 nstack_initial=0), State(pc_initial=332 nstack_initial=0)])
2025-01-31 15:31:41,258 - DEBUG - pending: deque([State(pc_initial=134 nstack_initial=0), State(pc_initial=332 nstack_initial=0)])
2025-01-31 15:31:41,258 - DEBUG - stack: []
2025-01-31 15:31:41,258 - DEBUG - state.pc_initial: State(pc_initial=134 nstack_initial=0)
2025-01-31 15:31:41,258 - DEBUG - dispatch pc=134, inst=LOAD_GLOBAL(arg=0, lineno=1230)
2025-01-31 15:31:41,258 - DEBUG - stack []
2025-01-31 15:31:41,258 - DEBUG - dispatch pc=136, inst=LOAD_METHOD(arg=1, lineno=1230)
2025-01-31 15:31:41,258 - DEBUG - stack ['$134load_global.0']
2025-01-31 15:31:41,258 - DEBUG - dispatch pc=138, inst=LOAD_FAST(arg=0, lineno=1230)
2025-01-31 15:31:41,258 - DEBUG - stack ['$136load_method.1']
2025-01-31 15:31:41,258 - DEBUG - dispatch pc=140, inst=LOAD_GLOBAL(arg=1, lineno=1230)
2025-01-31 15:31:41,258 - DEBUG - stack ['$136load_method.1', '$x138.2']
2025-01-31 15:31:41,258 - DEBUG - dispatch pc=142, inst=LOAD_CONST(arg=1, lineno=1230)
2025-01-31 15:31:41,258 - DEBUG - stack ['$136load_method.1', '$x138.2', '$140load_global.3']
2025-01-31 15:31:41,259 - DEBUG - dispatch pc=144, inst=LOAD_FAST(arg=8, lineno=1230)
2025-01-31 15:31:41,259 - DEBUG - stack ['$136load_method.1', '$x138.2', '$140load_global.3', '$const142.4']
2025-01-31 15:31:41,259 - DEBUG - dispatch pc=146, inst=LOAD_FAST(arg=1, lineno=1230)
2025-01-31 15:31:41,259 - DEBUG - stack ['$136load_method.1', '$x138.2', '$140load_global.3', '$const142.4', '$n144.5']
2025-01-31 15:31:41,259 - DEBUG - dispatch pc=148, inst=BINARY_SUBTRACT(arg=None, lineno=1230)
2025-01-31 15:31:41,259 - DEBUG - stack ['$136load_method.1', '$x138.2', '$140load_global.3', '$const142.4', '$n144.5', '$pre_max146.6']
2025-01-31 15:31:41,259 - DEBUG - dispatch pc=150, inst=CALL_FUNCTION(arg=2, lineno=1230)
2025-01-31 15:31:41,259 - DEBUG - stack ['$136load_method.1', '$x138.2', '$140load_global.3', '$const142.4', '$148binary_subtract.7']
2025-01-31 15:31:41,259 - DEBUG - dispatch pc=152, inst=LOAD_GLOBAL(arg=2, lineno=1230)
2025-01-31 15:31:41,259 - DEBUG - stack ['$136load_method.1', '$x138.2', '$150call_function.8']
2025-01-31 15:31:41,259 - DEBUG - dispatch pc=154, inst=LOAD_FAST(arg=8, lineno=1230)
2025-01-31 15:31:41,259 - DEBUG - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$152load_global.9']
2025-01-31 15:31:41,259 - DEBUG - dispatch pc=156, inst=LOAD_FAST(arg=2, lineno=1230)
2025-01-31 15:31:41,259 - DEBUG - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$152load_global.9', '$n154.10']
2025-01-31 15:31:41,259 - DEBUG - dispatch pc=158, inst=BINARY_ADD(arg=None, lineno=1230)
2025-01-31 15:31:41,259 - DEBUG - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$152load_global.9', '$n154.10', '$post_max156.11']
2025-01-31 15:31:41,259 - DEBUG - dispatch pc=160, inst=LOAD_FAST(arg=0, lineno=1230)
2025-01-31 15:31:41,259 - DEBUG - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$152load_global.9', '$158binary_add.12']
2025-01-31 15:31:41,259 - DEBUG - dispatch pc=162, inst=LOAD_ATTR(arg=3, lineno=1230)
2025-01-31 15:31:41,259 - DEBUG - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$152load_global.9', '$158binary_add.12', '$x160.13']
2025-01-31 15:31:41,259 - DEBUG - dispatch pc=164, inst=LOAD_CONST(arg=1, lineno=1230)
2025-01-31 15:31:41,259 - DEBUG - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$152load_global.9', '$158binary_add.12', '$162load_attr.14']
2025-01-31 15:31:41,259 - DEBUG - dispatch pc=166, inst=BINARY_SUBSCR(arg=None, lineno=1230)
2025-01-31 15:31:41,259 - DEBUG - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$152load_global.9', '$158binary_add.12', '$162load_attr.14', '$const164.15']
2025-01-31 15:31:41,259 - DEBUG - dispatch pc=168, inst=CALL_FUNCTION(arg=2, lineno=1230)
2025-01-31 15:31:41,259 - DEBUG - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$152load_global.9', '$158binary_add.12', '$166binary_subscr.16']
2025-01-31 15:31:41,259 - DEBUG - dispatch pc=170, inst=BUILD_SLICE(arg=2, lineno=1230)
2025-01-31 15:31:41,259 - DEBUG - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$168call_function.17']
2025-01-31 15:31:41,259 - DEBUG - dispatch pc=172, inst=BINARY_SUBSCR(arg=None, lineno=1230)
2025-01-31 15:31:41,260 - DEBUG - stack ['$136load_method.1', '$x138.2', '$170build_slice.19']
2025-01-31 15:31:41,260 - DEBUG - dispatch pc=174, inst=CALL_METHOD(arg=1, lineno=1230)
2025-01-31 15:31:41,260 - DEBUG - stack ['$136load_method.1', '$172binary_subscr.20']
2025-01-31 15:31:41,260 - DEBUG - dispatch pc=176, inst=STORE_FAST(arg=9, lineno=1230)
2025-01-31 15:31:41,260 - DEBUG - stack ['$174call_method.21']
2025-01-31 15:31:41,260 - DEBUG - dispatch pc=178, inst=LOAD_FAST(arg=0, lineno=1233)
2025-01-31 15:31:41,260 - DEBUG - stack []
2025-01-31 15:31:41,260 - DEBUG - dispatch pc=180, inst=LOAD_FAST(arg=8, lineno=1233)
2025-01-31 15:31:41,260 - DEBUG - stack ['$x178.22']
2025-01-31 15:31:41,260 - DEBUG - dispatch pc=182, inst=BINARY_SUBSCR(arg=None, lineno=1233)
2025-01-31 15:31:41,260 - DEBUG - stack ['$x178.22', '$n180.23']
2025-01-31 15:31:41,260 - DEBUG - dispatch pc=184, inst=LOAD_FAST(arg=9, lineno=1233)
2025-01-31 15:31:41,260 - DEBUG - stack ['$182binary_subscr.24']
2025-01-31 15:31:41,260 - DEBUG - dispatch pc=186, inst=COMPARE_OP(arg=2, lineno=1233)
2025-01-31 15:31:41,260 - DEBUG - stack ['$182binary_subscr.24', '$maxn184.25']
2025-01-31 15:31:41,260 - DEBUG - dispatch pc=188, inst=LOAD_FAST(arg=7, lineno=1233)
2025-01-31 15:31:41,260 - DEBUG - stack ['$186compare_op.26']
2025-01-31 15:31:41,260 - DEBUG - dispatch pc=190, inst=LOAD_FAST(arg=8, lineno=1233)
2025-01-31 15:31:41,260 - DEBUG - stack ['$186compare_op.26', '$peaks188.27']
2025-01-31 15:31:41,260 - DEBUG - dispatch pc=192, inst=STORE_SUBSCR(arg=None, lineno=1233)
2025-01-31 15:31:41,260 - DEBUG - stack ['$186compare_op.26', '$peaks188.27', '$n190.28']
2025-01-31 15:31:41,260 - DEBUG - dispatch pc=194, inst=LOAD_FAST(arg=7, lineno=1235)
2025-01-31 15:31:41,260 - DEBUG - stack []
2025-01-31 15:31:41,260 - DEBUG - dispatch pc=196, inst=LOAD_FAST(arg=8, lineno=1235)
2025-01-31 15:31:41,260 - DEBUG - stack ['$peaks194.29']
2025-01-31 15:31:41,260 - DEBUG - dispatch pc=198, inst=BINARY_SUBSCR(arg=None, lineno=1235)
2025-01-31 15:31:41,260 - DEBUG - stack ['$peaks194.29', '$n196.30']
2025-01-31 15:31:41,260 - DEBUG - dispatch pc=200, inst=POP_JUMP_IF_TRUE(arg=107, lineno=1235)
2025-01-31 15:31:41,260 - DEBUG - stack ['$198binary_subscr.31']
2025-01-31 15:31:41,261 - DEBUG - end state. edges=[Edge(pc=202, stack=(), blockstack=(), npush=0), Edge(pc=212, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:41,261 - DEBUG - pending: deque([State(pc_initial=332 nstack_initial=0), State(pc_initial=202 nstack_initial=0), State(pc_initial=212 nstack_initial=0)])
2025-01-31 15:31:41,261 - DEBUG - stack: []
2025-01-31 15:31:41,261 - DEBUG - state.pc_initial: State(pc_initial=332 nstack_initial=0)
2025-01-31 15:31:41,261 - DEBUG - dispatch pc=332, inst=LOAD_CONST(arg=2, lineno=1229)
2025-01-31 15:31:41,261 - DEBUG - stack []
2025-01-31 15:31:41,261 - DEBUG - dispatch pc=334, inst=RETURN_VALUE(arg=None, lineno=1229)
2025-01-31 15:31:41,261 - DEBUG - stack ['$const332.0']
2025-01-31 15:31:41,261 - DEBUG - end state. edges=[]
2025-01-31 15:31:41,261 - DEBUG - pending: deque([State(pc_initial=202 nstack_initial=0), State(pc_initial=212 nstack_initial=0)])
2025-01-31 15:31:41,261 - DEBUG - stack: []
2025-01-31 15:31:41,261 - DEBUG - state.pc_initial: State(pc_initial=202 nstack_initial=0)
2025-01-31 15:31:41,261 - DEBUG - dispatch pc=202, inst=LOAD_FAST(arg=8, lineno=1236)
2025-01-31 15:31:41,261 - DEBUG - stack []
2025-01-31 15:31:41,261 - DEBUG - dispatch pc=204, inst=LOAD_CONST(arg=3, lineno=1236)
2025-01-31 15:31:41,261 - DEBUG - stack ['$n202.0']
2025-01-31 15:31:41,261 - DEBUG - dispatch pc=206, inst=INPLACE_ADD(arg=None, lineno=1236)
2025-01-31 15:31:41,261 - DEBUG - stack ['$n202.0', '$const204.1']
2025-01-31 15:31:41,261 - DEBUG - dispatch pc=208, inst=STORE_FAST(arg=8, lineno=1236)
2025-01-31 15:31:41,261 - DEBUG - stack ['$206inplace_add.2']
2025-01-31 15:31:41,261 - DEBUG - dispatch pc=210, inst=JUMP_ABSOLUTE(arg=61, lineno=1237)
2025-01-31 15:31:41,261 - DEBUG - stack []
2025-01-31 15:31:41,261 - DEBUG - end state. edges=[Edge(pc=120, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:41,261 - DEBUG - pending: deque([State(pc_initial=212 nstack_initial=0), State(pc_initial=120 nstack_initial=0)])
2025-01-31 15:31:41,261 - DEBUG - stack: []
2025-01-31 15:31:41,261 - DEBUG - state.pc_initial: State(pc_initial=212 nstack_initial=0)
2025-01-31 15:31:41,261 - DEBUG - dispatch pc=212, inst=LOAD_GLOBAL(arg=0, lineno=1239)
2025-01-31 15:31:41,261 - DEBUG - stack []
2025-01-31 15:31:41,261 - DEBUG - dispatch pc=214, inst=LOAD_METHOD(arg=4, lineno=1239)
2025-01-31 15:31:41,261 - DEBUG - stack ['$212load_global.0']
2025-01-31 15:31:41,262 - DEBUG - dispatch pc=216, inst=LOAD_FAST(arg=0, lineno=1239)
2025-01-31 15:31:41,262 - DEBUG - stack ['$214load_method.1']
2025-01-31 15:31:41,262 - DEBUG - dispatch pc=218, inst=LOAD_GLOBAL(arg=1, lineno=1239)
2025-01-31 15:31:41,262 - DEBUG - stack ['$214load_method.1', '$x216.2']
2025-01-31 15:31:41,262 - DEBUG - dispatch pc=220, inst=LOAD_CONST(arg=1, lineno=1239)
2025-01-31 15:31:41,262 - DEBUG - stack ['$214load_method.1', '$x216.2', '$218load_global.3']
2025-01-31 15:31:41,262 - DEBUG - dispatch pc=222, inst=LOAD_FAST(arg=8, lineno=1239)
2025-01-31 15:31:41,262 - DEBUG - stack ['$214load_method.1', '$x216.2', '$218load_global.3', '$const220.4']
2025-01-31 15:31:41,262 - DEBUG - dispatch pc=224, inst=LOAD_FAST(arg=3, lineno=1239)
2025-01-31 15:31:41,262 - DEBUG - stack ['$214load_method.1', '$x216.2', '$218load_global.3', '$const220.4', '$n222.5']
2025-01-31 15:31:41,262 - DEBUG - dispatch pc=226, inst=BINARY_SUBTRACT(arg=None, lineno=1239)
2025-01-31 15:31:41,262 - DEBUG - stack ['$214load_method.1', '$x216.2', '$218load_global.3', '$const220.4', '$n222.5', '$pre_avg224.6']
2025-01-31 15:31:41,262 - DEBUG - dispatch pc=228, inst=CALL_FUNCTION(arg=2, lineno=1239)
2025-01-31 15:31:41,262 - DEBUG - stack ['$214load_method.1', '$x216.2', '$218load_global.3', '$const220.4', '$226binary_subtract.7']
2025-01-31 15:31:41,262 - DEBUG - dispatch pc=230, inst=LOAD_GLOBAL(arg=2, lineno=1239)
2025-01-31 15:31:41,262 - DEBUG - stack ['$214load_method.1', '$x216.2', '$228call_function.8']
2025-01-31 15:31:41,262 - DEBUG - dispatch pc=232, inst=LOAD_FAST(arg=8, lineno=1239)
2025-01-31 15:31:41,262 - DEBUG - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$230load_global.9']
2025-01-31 15:31:41,262 - DEBUG - dispatch pc=234, inst=LOAD_FAST(arg=4, lineno=1239)
2025-01-31 15:31:41,262 - DEBUG - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$230load_global.9', '$n232.10']
2025-01-31 15:31:41,262 - DEBUG - dispatch pc=236, inst=BINARY_ADD(arg=None, lineno=1239)
2025-01-31 15:31:41,262 - DEBUG - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$230load_global.9', '$n232.10', '$post_avg234.11']
2025-01-31 15:31:41,262 - DEBUG - dispatch pc=238, inst=LOAD_FAST(arg=0, lineno=1239)
2025-01-31 15:31:41,262 - DEBUG - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$230load_global.9', '$236binary_add.12']
2025-01-31 15:31:41,262 - DEBUG - dispatch pc=240, inst=LOAD_ATTR(arg=3, lineno=1239)
2025-01-31 15:31:41,262 - DEBUG - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$230load_global.9', '$236binary_add.12', '$x238.13']
2025-01-31 15:31:41,262 - DEBUG - dispatch pc=242, inst=LOAD_CONST(arg=1, lineno=1239)
2025-01-31 15:31:41,262 - DEBUG - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$230load_global.9', '$236binary_add.12', '$240load_attr.14']
2025-01-31 15:31:41,262 - DEBUG - dispatch pc=244, inst=BINARY_SUBSCR(arg=None, lineno=1239)
2025-01-31 15:31:41,263 - DEBUG - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$230load_global.9', '$236binary_add.12', '$240load_attr.14', '$const242.15']
2025-01-31 15:31:41,263 - DEBUG - dispatch pc=246, inst=CALL_FUNCTION(arg=2, lineno=1239)
2025-01-31 15:31:41,263 - DEBUG - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$230load_global.9', '$236binary_add.12', '$244binary_subscr.16']
2025-01-31 15:31:41,263 - DEBUG - dispatch pc=248, inst=BUILD_SLICE(arg=2, lineno=1239)
2025-01-31 15:31:41,263 - DEBUG - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$246call_function.17']
2025-01-31 15:31:41,263 - DEBUG - dispatch pc=250, inst=BINARY_SUBSCR(arg=None, lineno=1239)
2025-01-31 15:31:41,263 - DEBUG - stack ['$214load_method.1', '$x216.2', '$248build_slice.19']
2025-01-31 15:31:41,263 - DEBUG - dispatch pc=252, inst=CALL_METHOD(arg=1, lineno=1239)
2025-01-31 15:31:41,263 - DEBUG - stack ['$214load_method.1', '$250binary_subscr.20']
2025-01-31 15:31:41,263 - DEBUG - dispatch pc=254, inst=STORE_FAST(arg=10, lineno=1239)
2025-01-31 15:31:41,263 - DEBUG - stack ['$252call_method.21']
2025-01-31 15:31:41,263 - DEBUG - dispatch pc=256, inst=LOAD_FAST(arg=7, lineno=1240)
2025-01-31 15:31:41,263 - DEBUG - stack []
2025-01-31 15:31:41,263 - DEBUG - dispatch pc=258, inst=LOAD_FAST(arg=8, lineno=1240)
2025-01-31 15:31:41,263 - DEBUG - stack ['$peaks256.22']
2025-01-31 15:31:41,263 - DEBUG - dispatch pc=260, inst=DUP_TOP_TWO(arg=None, lineno=1240)
2025-01-31 15:31:41,263 - DEBUG - stack ['$peaks256.22', '$n258.23']
2025-01-31 15:31:41,263 - DEBUG - dispatch pc=262, inst=BINARY_SUBSCR(arg=None, lineno=1240)
2025-01-31 15:31:41,263 - DEBUG - stack ['$peaks256.22', '$n258.23', '$260dup_top_two.24', '$260dup_top_two.25']
2025-01-31 15:31:41,263 - DEBUG - dispatch pc=264, inst=LOAD_FAST(arg=0, lineno=1240)
2025-01-31 15:31:41,263 - DEBUG - stack ['$peaks256.22', '$n258.23', '$262binary_subscr.26']
2025-01-31 15:31:41,263 - DEBUG - dispatch pc=266, inst=LOAD_FAST(arg=8, lineno=1240)
2025-01-31 15:31:41,263 - DEBUG - stack ['$peaks256.22', '$n258.23', '$262binary_subscr.26', '$x264.27']
2025-01-31 15:31:41,263 - DEBUG - dispatch pc=268, inst=BINARY_SUBSCR(arg=None, lineno=1240)
2025-01-31 15:31:41,263 - DEBUG - stack ['$peaks256.22', '$n258.23', '$262binary_subscr.26', '$x264.27', '$n266.28']
2025-01-31 15:31:41,263 - DEBUG - dispatch pc=270, inst=LOAD_FAST(arg=10, lineno=1240)
2025-01-31 15:31:41,263 - DEBUG - stack ['$peaks256.22', '$n258.23', '$262binary_subscr.26', '$268binary_subscr.29']
2025-01-31 15:31:41,263 - DEBUG - dispatch pc=272, inst=LOAD_FAST(arg=5, lineno=1240)
2025-01-31 15:31:41,264 - DEBUG - stack ['$peaks256.22', '$n258.23', '$262binary_subscr.26', '$268binary_subscr.29', '$avgn270.30']
2025-01-31 15:31:41,264 - DEBUG - dispatch pc=274, inst=BINARY_ADD(arg=None, lineno=1240)
2025-01-31 15:31:41,264 - DEBUG - stack ['$peaks256.22', '$n258.23', '$262binary_subscr.26', '$268binary_subscr.29', '$avgn270.30', '$delta272.31']
2025-01-31 15:31:41,264 - DEBUG - dispatch pc=276, inst=COMPARE_OP(arg=5, lineno=1240)
2025-01-31 15:31:41,264 - DEBUG - stack ['$peaks256.22', '$n258.23', '$262binary_subscr.26', '$268binary_subscr.29', '$274binary_add.32']
2025-01-31 15:31:41,264 - DEBUG - dispatch pc=278, inst=INPLACE_AND(arg=None, lineno=1240)
2025-01-31 15:31:41,264 - DEBUG - stack ['$peaks256.22', '$n258.23', '$262binary_subscr.26', '$276compare_op.33']
2025-01-31 15:31:41,264 - DEBUG - dispatch pc=280, inst=ROT_THREE(arg=None, lineno=1240)
2025-01-31 15:31:41,264 - DEBUG - stack ['$peaks256.22', '$n258.23', '$278inplace_and.34']
2025-01-31 15:31:41,264 - DEBUG - dispatch pc=282, inst=STORE_SUBSCR(arg=None, lineno=1240)
2025-01-31 15:31:41,264 - DEBUG - stack ['$278inplace_and.34', '$peaks256.22', '$n258.23']
2025-01-31 15:31:41,264 - DEBUG - dispatch pc=284, inst=LOAD_FAST(arg=7, lineno=1242)
2025-01-31 15:31:41,264 - DEBUG - stack []
2025-01-31 15:31:41,264 - DEBUG - dispatch pc=286, inst=LOAD_FAST(arg=8, lineno=1242)
2025-01-31 15:31:41,264 - DEBUG - stack ['$peaks284.35']
2025-01-31 15:31:41,264 - DEBUG - dispatch pc=288, inst=BINARY_SUBSCR(arg=None, lineno=1242)
2025-01-31 15:31:41,264 - DEBUG - stack ['$peaks284.35', '$n286.36']
2025-01-31 15:31:41,264 - DEBUG - dispatch pc=290, inst=POP_JUMP_IF_TRUE(arg=152, lineno=1242)
2025-01-31 15:31:41,264 - DEBUG - stack ['$288binary_subscr.37']
2025-01-31 15:31:41,264 - DEBUG - end state. edges=[Edge(pc=292, stack=(), blockstack=(), npush=0), Edge(pc=302, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:41,264 - DEBUG - pending: deque([State(pc_initial=120 nstack_initial=0), State(pc_initial=292 nstack_initial=0), State(pc_initial=302 nstack_initial=0)])
2025-01-31 15:31:41,264 - DEBUG - pending: deque([State(pc_initial=292 nstack_initial=0), State(pc_initial=302 nstack_initial=0)])
2025-01-31 15:31:41,264 - DEBUG - stack: []
2025-01-31 15:31:41,264 - DEBUG - state.pc_initial: State(pc_initial=292 nstack_initial=0)
2025-01-31 15:31:41,264 - DEBUG - dispatch pc=292, inst=LOAD_FAST(arg=8, lineno=1243)
2025-01-31 15:31:41,264 - DEBUG - stack []
2025-01-31 15:31:41,264 - DEBUG - dispatch pc=294, inst=LOAD_CONST(arg=3, lineno=1243)
2025-01-31 15:31:41,264 - DEBUG - stack ['$n292.0']
2025-01-31 15:31:41,264 - DEBUG - dispatch pc=296, inst=INPLACE_ADD(arg=None, lineno=1243)
2025-01-31 15:31:41,265 - DEBUG - stack ['$n292.0', '$const294.1']
2025-01-31 15:31:41,265 - DEBUG - dispatch pc=298, inst=STORE_FAST(arg=8, lineno=1243)
2025-01-31 15:31:41,265 - DEBUG - stack ['$296inplace_add.2']
2025-01-31 15:31:41,265 - DEBUG - dispatch pc=300, inst=JUMP_ABSOLUTE(arg=61, lineno=1244)
2025-01-31 15:31:41,265 - DEBUG - stack []
2025-01-31 15:31:41,265 - DEBUG - end state. edges=[Edge(pc=120, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:41,265 - DEBUG - pending: deque([State(pc_initial=302 nstack_initial=0), State(pc_initial=120 nstack_initial=0)])
2025-01-31 15:31:41,265 - DEBUG - stack: []
2025-01-31 15:31:41,265 - DEBUG - state.pc_initial: State(pc_initial=302 nstack_initial=0)
2025-01-31 15:31:41,265 - DEBUG - dispatch pc=302, inst=LOAD_FAST(arg=8, lineno=1247)
2025-01-31 15:31:41,265 - DEBUG - stack []
2025-01-31 15:31:41,265 - DEBUG - dispatch pc=304, inst=LOAD_FAST(arg=6, lineno=1247)
2025-01-31 15:31:41,265 - DEBUG - stack ['$n302.0']
2025-01-31 15:31:41,265 - DEBUG - dispatch pc=306, inst=LOAD_CONST(arg=3, lineno=1247)
2025-01-31 15:31:41,265 - DEBUG - stack ['$n302.0', '$wait304.1']
2025-01-31 15:31:41,265 - DEBUG - dispatch pc=308, inst=BINARY_ADD(arg=None, lineno=1247)
2025-01-31 15:31:41,265 - DEBUG - stack ['$n302.0', '$wait304.1', '$const306.2']
2025-01-31 15:31:41,265 - DEBUG - dispatch pc=310, inst=INPLACE_ADD(arg=None, lineno=1247)
2025-01-31 15:31:41,265 - DEBUG - stack ['$n302.0', '$308binary_add.3']
2025-01-31 15:31:41,265 - DEBUG - dispatch pc=312, inst=STORE_FAST(arg=8, lineno=1247)
2025-01-31 15:31:41,265 - DEBUG - stack ['$310inplace_add.4']
2025-01-31 15:31:41,265 - DEBUG - dispatch pc=314, inst=LOAD_FAST(arg=8, lineno=1229)
2025-01-31 15:31:41,265 - DEBUG - stack []
2025-01-31 15:31:41,265 - DEBUG - dispatch pc=316, inst=LOAD_FAST(arg=0, lineno=1229)
2025-01-31 15:31:41,265 - DEBUG - stack ['$n314.5']
2025-01-31 15:31:41,265 - DEBUG - dispatch pc=318, inst=LOAD_ATTR(arg=3, lineno=1229)
2025-01-31 15:31:41,265 - DEBUG - stack ['$n314.5', '$x316.6']
2025-01-31 15:31:41,265 - DEBUG - dispatch pc=320, inst=LOAD_CONST(arg=1, lineno=1229)
2025-01-31 15:31:41,265 - DEBUG - stack ['$n314.5', '$318load_attr.7']
2025-01-31 15:31:41,266 - DEBUG - dispatch pc=322, inst=BINARY_SUBSCR(arg=None, lineno=1229)
2025-01-31 15:31:41,266 - DEBUG - stack ['$n314.5', '$318load_attr.7', '$const320.8']
2025-01-31 15:31:41,266 - DEBUG - dispatch pc=324, inst=COMPARE_OP(arg=0, lineno=1229)
2025-01-31 15:31:41,266 - DEBUG - stack ['$n314.5', '$322binary_subscr.9']
2025-01-31 15:31:41,266 - DEBUG - dispatch pc=326, inst=POP_JUMP_IF_TRUE(arg=68, lineno=1229)
2025-01-31 15:31:41,266 - DEBUG - stack ['$324compare_op.10']
2025-01-31 15:31:41,266 - DEBUG - end state. edges=[Edge(pc=328, stack=(), blockstack=(), npush=0), Edge(pc=134, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:41,266 - DEBUG - pending: deque([State(pc_initial=120 nstack_initial=0), State(pc_initial=328 nstack_initial=0), State(pc_initial=134 nstack_initial=0)])
2025-01-31 15:31:41,266 - DEBUG - pending: deque([State(pc_initial=328 nstack_initial=0), State(pc_initial=134 nstack_initial=0)])
2025-01-31 15:31:41,266 - DEBUG - stack: []
2025-01-31 15:31:41,266 - DEBUG - state.pc_initial: State(pc_initial=328 nstack_initial=0)
2025-01-31 15:31:41,266 - DEBUG - dispatch pc=328, inst=LOAD_CONST(arg=2, lineno=1229)
2025-01-31 15:31:41,266 - DEBUG - stack []
2025-01-31 15:31:41,266 - DEBUG - dispatch pc=330, inst=RETURN_VALUE(arg=None, lineno=1229)
2025-01-31 15:31:41,266 - DEBUG - stack ['$const328.0']
2025-01-31 15:31:41,266 - DEBUG - end state. edges=[]
2025-01-31 15:31:41,266 - DEBUG - pending: deque([State(pc_initial=134 nstack_initial=0)])
2025-01-31 15:31:41,266 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:31:41,266 - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=106 nstack_initial=0): set(),
             State(pc_initial=116 nstack_initial=0): set(),
             State(pc_initial=120 nstack_initial=0): set(),
             State(pc_initial=134 nstack_initial=0): set(),
             State(pc_initial=202 nstack_initial=0): set(),
             State(pc_initial=212 nstack_initial=0): set(),
             State(pc_initial=292 nstack_initial=0): set(),
             State(pc_initial=302 nstack_initial=0): set(),
             State(pc_initial=328 nstack_initial=0): set(),
             State(pc_initial=332 nstack_initial=0): set()})
2025-01-31 15:31:41,267 - DEBUG - defmap: {}
2025-01-31 15:31:41,267 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:41,267 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:41,267 - DEBUG - keep phismap: {}
2025-01-31 15:31:41,267 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-01-31 15:31:41,267 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:31:41,267 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'res': '$8load_global.3'}), (10, {'item': '$8load_global.3', 'res': '$10load_method.4'}), (12, {'res': '$x12.5'}), (14, {'res': '$const14.6'}), (16, {'res': '$16load_global.7'}), (18, {'res': '$post_max18.8'}), (20, {'res': '$x20.9'}), (22, {'item': '$x20.9', 'res': '$22load_attr.10'}), (24, {'res': '$const24.11'}), (26, {'index': '$const24.11', 'target': '$22load_attr.10', 'res': '$26binary_subscr.12'}), (28, {'func': '$16load_global.7', 'args': ['$post_max18.8', '$26binary_subscr.12'], 'res': '$28call_function.13'}), (30, {'start': '$const14.6', 'stop': '$28call_function.13', 'step': None, 'res': '$30build_slice.15', 'slicevar': '$30build_slice.14'}), (32, {'index': '$30build_slice.15', 'target': '$x12.5', 'res': '$32binary_subscr.16'}), (34, {'func': '$10load_method.4', 'args': ['$32binary_subscr.16'], 'res': '$34call_method.17'}), (36, {'lhs': '$6binary_subscr.2', 'rhs': '$34call_method.17', 'res': '$36compare_op.18'}), (38, {'res': '$peaks38.19'}), (40, {'res': '$const40.20'}), (42, {'target': '$peaks38.19', 'index': '$const40.20', 'value': '$36compare_op.18'}), (44, {'res': '$peaks44.21'}), (46, {'res': '$const46.22'}), (48, {'orig': ['$peaks44.21', '$const46.22'], 'duped': ['$48dup_top_two.23', '$48dup_top_two.24']}), (50, {'index': '$48dup_top_two.24', 'target': '$48dup_top_two.23', 'res': '$50binary_subscr.25'}), (52, {'res': '$x52.26'}), (54, {'res': '$const54.27'}), (56, {'index': '$const54.27', 'target': '$x52.26', 'res': '$56binary_subscr.28'}), (58, {'res': '$58load_global.29'}), (60, {'item': '$58load_global.29', 'res': '$60load_method.30'}), (62, {'res': '$x62.31'}), (64, {'res': '$const64.32'}), (66, {'res': '$66load_global.33'}), (68, {'res': '$post_avg68.34'}), (70, {'res': '$x70.35'}), (72, {'item': '$x70.35', 'res': '$72load_attr.36'}), (74, {'res': '$const74.37'}), (76, {'index': '$const74.37', 'target': '$72load_attr.36', 'res': '$76binary_subscr.38'}), (78, {'func': '$66load_global.33', 'args': ['$post_avg68.34', '$76binary_subscr.38'], 'res': '$78call_function.39'}), (80, {'start': '$const64.32', 'stop': '$78call_function.39', 'step': None, 'res': '$80build_slice.41', 'slicevar': '$80build_slice.40'}), (82, {'index': '$80build_slice.41', 'target': '$x62.31', 'res': '$82binary_subscr.42'}), (84, {'func': '$60load_method.30', 'args': ['$82binary_subscr.42'], 'res': '$84call_method.43'}), (86, {'res': '$delta86.44'}), (88, {'lhs': '$84call_method.43', 'rhs': '$delta86.44', 'res': '$88binary_add.45'}), (90, {'lhs': '$56binary_subscr.28', 'rhs': '$88binary_add.45', 'res': '$90compare_op.46'}), (92, {'lhs': '$50binary_subscr.25', 'rhs': '$90compare_op.46', 'res': '$92inplace_and.47'}), (96, {'target': '$peaks44.21', 'index': '$const46.22', 'value': '$92inplace_and.47'}), (98, {'res': '$peaks98.48'}), (100, {'res': '$const100.49'}), (102, {'index': '$const100.49', 'target': '$peaks98.48', 'res': '$102binary_subscr.50'}), (104, {'pred': '$102binary_subscr.50'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={106: (), 116: ()})
2025-01-31 15:31:41,267 - DEBUG - block_infos State(pc_initial=106 nstack_initial=0):
AdaptBlockInfo(insts=((106, {'res': '$wait106.0'}), (108, {'res': '$const108.1'}), (110, {'lhs': '$wait106.0', 'rhs': '$const108.1', 'res': '$110binary_add.2'}), (112, {'value': '$110binary_add.2'}), (114, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={120: ()})
2025-01-31 15:31:41,267 - DEBUG - block_infos State(pc_initial=116 nstack_initial=0):
AdaptBlockInfo(insts=((116, {'res': '$const116.0'}), (118, {'value': '$const116.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={120: ()})
2025-01-31 15:31:41,267 - DEBUG - block_infos State(pc_initial=120 nstack_initial=0):
AdaptBlockInfo(insts=((120, {'res': '$n120.0'}), (122, {'res': '$x122.1'}), (124, {'item': '$x122.1', 'res': '$124load_attr.2'}), (126, {'res': '$const126.3'}), (128, {'index': '$const126.3', 'target': '$124load_attr.2', 'res': '$128binary_subscr.4'}), (130, {'lhs': '$n120.0', 'rhs': '$128binary_subscr.4', 'res': '$130compare_op.5'}), (132, {'pred': '$130compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={134: (), 332: ()})
2025-01-31 15:31:41,267 - DEBUG - block_infos State(pc_initial=134 nstack_initial=0):
AdaptBlockInfo(insts=((134, {'res': '$134load_global.0'}), (136, {'item': '$134load_global.0', 'res': '$136load_method.1'}), (138, {'res': '$x138.2'}), (140, {'res': '$140load_global.3'}), (142, {'res': '$const142.4'}), (144, {'res': '$n144.5'}), (146, {'res': '$pre_max146.6'}), (148, {'lhs': '$n144.5', 'rhs': '$pre_max146.6', 'res': '$148binary_subtract.7'}), (150, {'func': '$140load_global.3', 'args': ['$const142.4', '$148binary_subtract.7'], 'res': '$150call_function.8'}), (152, {'res': '$152load_global.9'}), (154, {'res': '$n154.10'}), (156, {'res': '$post_max156.11'}), (158, {'lhs': '$n154.10', 'rhs': '$post_max156.11', 'res': '$158binary_add.12'}), (160, {'res': '$x160.13'}), (162, {'item': '$x160.13', 'res': '$162load_attr.14'}), (164, {'res': '$const164.15'}), (166, {'index': '$const164.15', 'target': '$162load_attr.14', 'res': '$166binary_subscr.16'}), (168, {'func': '$152load_global.9', 'args': ['$158binary_add.12', '$166binary_subscr.16'], 'res': '$168call_function.17'}), (170, {'start': '$150call_function.8', 'stop': '$168call_function.17', 'step': None, 'res': '$170build_slice.19', 'slicevar': '$170build_slice.18'}), (172, {'index': '$170build_slice.19', 'target': '$x138.2', 'res': '$172binary_subscr.20'}), (174, {'func': '$136load_method.1', 'args': ['$172binary_subscr.20'], 'res': '$174call_method.21'}), (176, {'value': '$174call_method.21'}), (178, {'res': '$x178.22'}), (180, {'res': '$n180.23'}), (182, {'index': '$n180.23', 'target': '$x178.22', 'res': '$182binary_subscr.24'}), (184, {'res': '$maxn184.25'}), (186, {'lhs': '$182binary_subscr.24', 'rhs': '$maxn184.25', 'res': '$186compare_op.26'}), (188, {'res': '$peaks188.27'}), (190, {'res': '$n190.28'}), (192, {'target': '$peaks188.27', 'index': '$n190.28', 'value': '$186compare_op.26'}), (194, {'res': '$peaks194.29'}), (196, {'res': '$n196.30'}), (198, {'index': '$n196.30', 'target': '$peaks194.29', 'res': '$198binary_subscr.31'}), (200, {'pred': '$198binary_subscr.31'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={202: (), 212: ()})
2025-01-31 15:31:41,267 - DEBUG - block_infos State(pc_initial=202 nstack_initial=0):
AdaptBlockInfo(insts=((202, {'res': '$n202.0'}), (204, {'res': '$const204.1'}), (206, {'lhs': '$n202.0', 'rhs': '$const204.1', 'res': '$206inplace_add.2'}), (208, {'value': '$206inplace_add.2'}), (210, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={120: ()})
2025-01-31 15:31:41,267 - DEBUG - block_infos State(pc_initial=212 nstack_initial=0):
AdaptBlockInfo(insts=((212, {'res': '$212load_global.0'}), (214, {'item': '$212load_global.0', 'res': '$214load_method.1'}), (216, {'res': '$x216.2'}), (218, {'res': '$218load_global.3'}), (220, {'res': '$const220.4'}), (222, {'res': '$n222.5'}), (224, {'res': '$pre_avg224.6'}), (226, {'lhs': '$n222.5', 'rhs': '$pre_avg224.6', 'res': '$226binary_subtract.7'}), (228, {'func': '$218load_global.3', 'args': ['$const220.4', '$226binary_subtract.7'], 'res': '$228call_function.8'}), (230, {'res': '$230load_global.9'}), (232, {'res': '$n232.10'}), (234, {'res': '$post_avg234.11'}), (236, {'lhs': '$n232.10', 'rhs': '$post_avg234.11', 'res': '$236binary_add.12'}), (238, {'res': '$x238.13'}), (240, {'item': '$x238.13', 'res': '$240load_attr.14'}), (242, {'res': '$const242.15'}), (244, {'index': '$const242.15', 'target': '$240load_attr.14', 'res': '$244binary_subscr.16'}), (246, {'func': '$230load_global.9', 'args': ['$236binary_add.12', '$244binary_subscr.16'], 'res': '$246call_function.17'}), (248, {'start': '$228call_function.8', 'stop': '$246call_function.17', 'step': None, 'res': '$248build_slice.19', 'slicevar': '$248build_slice.18'}), (250, {'index': '$248build_slice.19', 'target': '$x216.2', 'res': '$250binary_subscr.20'}), (252, {'func': '$214load_method.1', 'args': ['$250binary_subscr.20'], 'res': '$252call_method.21'}), (254, {'value': '$252call_method.21'}), (256, {'res': '$peaks256.22'}), (258, {'res': '$n258.23'}), (260, {'orig': ['$peaks256.22', '$n258.23'], 'duped': ['$260dup_top_two.24', '$260dup_top_two.25']}), (262, {'index': '$260dup_top_two.25', 'target': '$260dup_top_two.24', 'res': '$262binary_subscr.26'}), (264, {'res': '$x264.27'}), (266, {'res': '$n266.28'}), (268, {'index': '$n266.28', 'target': '$x264.27', 'res': '$268binary_subscr.29'}), (270, {'res': '$avgn270.30'}), (272, {'res': '$delta272.31'}), (274, {'lhs': '$avgn270.30', 'rhs': '$delta272.31', 'res': '$274binary_add.32'}), (276, {'lhs': '$268binary_subscr.29', 'rhs': '$274binary_add.32', 'res': '$276compare_op.33'}), (278, {'lhs': '$262binary_subscr.26', 'rhs': '$276compare_op.33', 'res': '$278inplace_and.34'}), (282, {'target': '$peaks256.22', 'index': '$n258.23', 'value': '$278inplace_and.34'}), (284, {'res': '$peaks284.35'}), (286, {'res': '$n286.36'}), (288, {'index': '$n286.36', 'target': '$peaks284.35', 'res': '$288binary_subscr.37'}), (290, {'pred': '$288binary_subscr.37'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={292: (), 302: ()})
2025-01-31 15:31:41,267 - DEBUG - block_infos State(pc_initial=292 nstack_initial=0):
AdaptBlockInfo(insts=((292, {'res': '$n292.0'}), (294, {'res': '$const294.1'}), (296, {'lhs': '$n292.0', 'rhs': '$const294.1', 'res': '$296inplace_add.2'}), (298, {'value': '$296inplace_add.2'}), (300, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={120: ()})
2025-01-31 15:31:41,267 - DEBUG - block_infos State(pc_initial=302 nstack_initial=0):
AdaptBlockInfo(insts=((302, {'res': '$n302.0'}), (304, {'res': '$wait304.1'}), (306, {'res': '$const306.2'}), (308, {'lhs': '$wait304.1', 'rhs': '$const306.2', 'res': '$308binary_add.3'}), (310, {'lhs': '$n302.0', 'rhs': '$308binary_add.3', 'res': '$310inplace_add.4'}), (312, {'value': '$310inplace_add.4'}), (314, {'res': '$n314.5'}), (316, {'res': '$x316.6'}), (318, {'item': '$x316.6', 'res': '$318load_attr.7'}), (320, {'res': '$const320.8'}), (322, {'index': '$const320.8', 'target': '$318load_attr.7', 'res': '$322binary_subscr.9'}), (324, {'lhs': '$n314.5', 'rhs': '$322binary_subscr.9', 'res': '$324compare_op.10'}), (326, {'pred': '$324compare_op.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={328: (), 134: ()})
2025-01-31 15:31:41,268 - DEBUG - block_infos State(pc_initial=328 nstack_initial=0):
AdaptBlockInfo(insts=((328, {'res': '$const328.0'}), (330, {'retval': '$const328.0', 'castval': '$330return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:41,268 - DEBUG - block_infos State(pc_initial=332 nstack_initial=0):
AdaptBlockInfo(insts=((332, {'res': '$const332.0'}), (334, {'retval': '$const332.0', 'castval': '$334return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:41,270 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    pre_max = arg(1, name=pre_max)           ['pre_max']
    post_max = arg(2, name=post_max)         ['post_max']
    pre_avg = arg(3, name=pre_avg)           ['pre_avg']
    post_avg = arg(4, name=post_avg)         ['post_avg']
    delta = arg(5, name=delta)               ['delta']
    wait = arg(6, name=wait)                 ['wait']
    peaks = arg(7, name=peaks)               ['peaks']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6binary_subscr.2 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$6binary_subscr.2', '$const4.1', 'x']
    $8load_global.3 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>) ['$8load_global.3']
    $10load_method.4 = getattr(value=$8load_global.3, attr=max) ['$10load_method.4', '$8load_global.3']
    $const14.6 = const(NoneType, None)       ['$const14.6']
    $16load_global.7 = global(min: <built-in function min>) ['$16load_global.7']
    $22load_attr.10 = getattr(value=x, attr=shape) ['$22load_attr.10', 'x']
    $const24.11 = const(int, 0)              ['$const24.11']
    $26binary_subscr.12 = getitem(value=$22load_attr.10, index=$const24.11, fn=<built-in function getitem>) ['$22load_attr.10', '$26binary_subscr.12', '$const24.11']
    $28call_function.13 = call $16load_global.7(post_max, $26binary_subscr.12, func=$16load_global.7, args=[Var(post_max, utils.py:1209), Var($26binary_subscr.12, utils.py:1221)], kws=(), vararg=None, varkwarg=None, target=None) ['$16load_global.7', '$26binary_subscr.12', '$28call_function.13', 'post_max']
    $30build_slice.14 = global(slice: <class 'slice'>) ['$30build_slice.14']
    $30build_slice.15 = call $30build_slice.14($const14.6, $28call_function.13, func=$30build_slice.14, args=(Var($const14.6, utils.py:1221), Var($28call_function.13, utils.py:1221)), kws=(), vararg=None, varkwarg=None, target=None) ['$28call_function.13', '$30build_slice.14', '$30build_slice.15', '$const14.6']
    $32binary_subscr.16 = getitem(value=x, index=$30build_slice.15, fn=<built-in function getitem>) ['$30build_slice.15', '$32binary_subscr.16', 'x']
    $34call_method.17 = call $10load_method.4($32binary_subscr.16, func=$10load_method.4, args=[Var($32binary_subscr.16, utils.py:1221)], kws=(), vararg=None, varkwarg=None, target=None) ['$10load_method.4', '$32binary_subscr.16', '$34call_method.17']
    $36compare_op.18 = $6binary_subscr.2 >= $34call_method.17 ['$34call_method.17', '$36compare_op.18', '$6binary_subscr.2']
    $const40.20 = const(int, 0)              ['$const40.20']
    peaks[$const40.20] = $36compare_op.18    ['$36compare_op.18', '$const40.20', 'peaks']
    $const46.22 = const(int, 0)              ['$const46.22']
    $50binary_subscr.25 = getitem(value=peaks, index=$const46.22, fn=<built-in function getitem>) ['$50binary_subscr.25', '$const46.22', 'peaks']
    $const54.27 = const(int, 0)              ['$const54.27']
    $56binary_subscr.28 = getitem(value=x, index=$const54.27, fn=<built-in function getitem>) ['$56binary_subscr.28', '$const54.27', 'x']
    $58load_global.29 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>) ['$58load_global.29']
    $60load_method.30 = getattr(value=$58load_global.29, attr=mean) ['$58load_global.29', '$60load_method.30']
    $const64.32 = const(NoneType, None)      ['$const64.32']
    $66load_global.33 = global(min: <built-in function min>) ['$66load_global.33']
    $72load_attr.36 = getattr(value=x, attr=shape) ['$72load_attr.36', 'x']
    $const74.37 = const(int, 0)              ['$const74.37']
    $76binary_subscr.38 = getitem(value=$72load_attr.36, index=$const74.37, fn=<built-in function getitem>) ['$72load_attr.36', '$76binary_subscr.38', '$const74.37']
    $78call_function.39 = call $66load_global.33(post_avg, $76binary_subscr.38, func=$66load_global.33, args=[Var(post_avg, utils.py:1209), Var($76binary_subscr.38, utils.py:1222)], kws=(), vararg=None, varkwarg=None, target=None) ['$66load_global.33', '$76binary_subscr.38', '$78call_function.39', 'post_avg']
    $80build_slice.40 = global(slice: <class 'slice'>) ['$80build_slice.40']
    $80build_slice.41 = call $80build_slice.40($const64.32, $78call_function.39, func=$80build_slice.40, args=(Var($const64.32, utils.py:1222), Var($78call_function.39, utils.py:1222)), kws=(), vararg=None, varkwarg=None, target=None) ['$78call_function.39', '$80build_slice.40', '$80build_slice.41', '$const64.32']
    $82binary_subscr.42 = getitem(value=x, index=$80build_slice.41, fn=<built-in function getitem>) ['$80build_slice.41', '$82binary_subscr.42', 'x']
    $84call_method.43 = call $60load_method.30($82binary_subscr.42, func=$60load_method.30, args=[Var($82binary_subscr.42, utils.py:1222)], kws=(), vararg=None, varkwarg=None, target=None) ['$60load_method.30', '$82binary_subscr.42', '$84call_method.43']
    $88binary_add.45 = $84call_method.43 + delta ['$84call_method.43', '$88binary_add.45', 'delta']
    $90compare_op.46 = $56binary_subscr.28 >= $88binary_add.45 ['$56binary_subscr.28', '$88binary_add.45', '$90compare_op.46']
    $92inplace_and.47 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$50binary_subscr.25, rhs=$90compare_op.46, static_lhs=Undefined, static_rhs=Undefined) ['$50binary_subscr.25', '$90compare_op.46', '$92inplace_and.47']
    peaks[$const46.22] = $92inplace_and.47   ['$92inplace_and.47', '$const46.22', 'peaks']
    $const100.49 = const(int, 0)             ['$const100.49']
    $102binary_subscr.50 = getitem(value=peaks, index=$const100.49, fn=<built-in function getitem>) ['$102binary_subscr.50', '$const100.49', 'peaks']
    bool104 = global(bool: <class 'bool'>)   ['bool104']
    $104pred = call bool104($102binary_subscr.50, func=bool104, args=(Var($102binary_subscr.50, utils.py:1224),), kws=(), vararg=None, varkwarg=None, target=None) ['$102binary_subscr.50', '$104pred', 'bool104']
    branch $104pred, 106, 116                ['$104pred']
label 106:
    $const108.1 = const(int, 1)              ['$const108.1']
    n = wait + $const108.1                   ['$const108.1', 'n', 'wait']
    jump 120                                 []
label 116:
    n = const(int, 1)                        ['n']
    jump 120                                 []
label 120:
    $124load_attr.2 = getattr(value=x, attr=shape) ['$124load_attr.2', 'x']
    $const126.3 = const(int, 0)              ['$const126.3']
    $128binary_subscr.4 = getitem(value=$124load_attr.2, index=$const126.3, fn=<built-in function getitem>) ['$124load_attr.2', '$128binary_subscr.4', '$const126.3']
    $130compare_op.5 = n < $128binary_subscr.4 ['$128binary_subscr.4', '$130compare_op.5', 'n']
    bool132 = global(bool: <class 'bool'>)   ['bool132']
    $132pred = call bool132($130compare_op.5, func=bool132, args=(Var($130compare_op.5, utils.py:1229),), kws=(), vararg=None, varkwarg=None, target=None) ['$130compare_op.5', '$132pred', 'bool132']
    branch $132pred, 134, 332                ['$132pred']
label 134:
    $134load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>) ['$134load_global.0']
    $136load_method.1 = getattr(value=$134load_global.0, attr=max) ['$134load_global.0', '$136load_method.1']
    $140load_global.3 = global(max: <built-in function max>) ['$140load_global.3']
    $const142.4 = const(int, 0)              ['$const142.4']
    $148binary_subtract.7 = n - pre_max      ['$148binary_subtract.7', 'n', 'pre_max']
    $150call_function.8 = call $140load_global.3($const142.4, $148binary_subtract.7, func=$140load_global.3, args=[Var($const142.4, utils.py:1230), Var($148binary_subtract.7, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None) ['$140load_global.3', '$148binary_subtract.7', '$150call_function.8', '$const142.4']
    $152load_global.9 = global(min: <built-in function min>) ['$152load_global.9']
    $158binary_add.12 = n + post_max         ['$158binary_add.12', 'n', 'post_max']
    $162load_attr.14 = getattr(value=x, attr=shape) ['$162load_attr.14', 'x']
    $const164.15 = const(int, 0)             ['$const164.15']
    $166binary_subscr.16 = getitem(value=$162load_attr.14, index=$const164.15, fn=<built-in function getitem>) ['$162load_attr.14', '$166binary_subscr.16', '$const164.15']
    $168call_function.17 = call $152load_global.9($158binary_add.12, $166binary_subscr.16, func=$152load_global.9, args=[Var($158binary_add.12, utils.py:1230), Var($166binary_subscr.16, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None) ['$152load_global.9', '$158binary_add.12', '$166binary_subscr.16', '$168call_function.17']
    $170build_slice.18 = global(slice: <class 'slice'>) ['$170build_slice.18']
    $170build_slice.19 = call $170build_slice.18($150call_function.8, $168call_function.17, func=$170build_slice.18, args=(Var($150call_function.8, utils.py:1230), Var($168call_function.17, utils.py:1230)), kws=(), vararg=None, varkwarg=None, target=None) ['$150call_function.8', '$168call_function.17', '$170build_slice.18', '$170build_slice.19']
    $172binary_subscr.20 = getitem(value=x, index=$170build_slice.19, fn=<built-in function getitem>) ['$170build_slice.19', '$172binary_subscr.20', 'x']
    maxn = call $136load_method.1($172binary_subscr.20, func=$136load_method.1, args=[Var($172binary_subscr.20, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None) ['$136load_method.1', '$172binary_subscr.20', 'maxn']
    $182binary_subscr.24 = getitem(value=x, index=n, fn=<built-in function getitem>) ['$182binary_subscr.24', 'n', 'x']
    $186compare_op.26 = $182binary_subscr.24 == maxn ['$182binary_subscr.24', '$186compare_op.26', 'maxn']
    peaks[n] = $186compare_op.26             ['$186compare_op.26', 'n', 'peaks']
    $198binary_subscr.31 = getitem(value=peaks, index=n, fn=<built-in function getitem>) ['$198binary_subscr.31', 'n', 'peaks']
    bool200 = global(bool: <class 'bool'>)   ['bool200']
    $200pred = call bool200($198binary_subscr.31, func=bool200, args=(Var($198binary_subscr.31, utils.py:1235),), kws=(), vararg=None, varkwarg=None, target=None) ['$198binary_subscr.31', '$200pred', 'bool200']
    branch $200pred, 212, 202                ['$200pred']
label 202:
    $const204.1 = const(int, 1)              ['$const204.1']
    $206inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const204.1, static_lhs=Undefined, static_rhs=Undefined) ['$206inplace_add.2', '$const204.1', 'n']
    n = $206inplace_add.2                    ['$206inplace_add.2', 'n']
    jump 120                                 []
label 212:
    $212load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>) ['$212load_global.0']
    $214load_method.1 = getattr(value=$212load_global.0, attr=mean) ['$212load_global.0', '$214load_method.1']
    $218load_global.3 = global(max: <built-in function max>) ['$218load_global.3']
    $const220.4 = const(int, 0)              ['$const220.4']
    $226binary_subtract.7 = n - pre_avg      ['$226binary_subtract.7', 'n', 'pre_avg']
    $228call_function.8 = call $218load_global.3($const220.4, $226binary_subtract.7, func=$218load_global.3, args=[Var($const220.4, utils.py:1239), Var($226binary_subtract.7, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None) ['$218load_global.3', '$226binary_subtract.7', '$228call_function.8', '$const220.4']
    $230load_global.9 = global(min: <built-in function min>) ['$230load_global.9']
    $236binary_add.12 = n + post_avg         ['$236binary_add.12', 'n', 'post_avg']
    $240load_attr.14 = getattr(value=x, attr=shape) ['$240load_attr.14', 'x']
    $const242.15 = const(int, 0)             ['$const242.15']
    $244binary_subscr.16 = getitem(value=$240load_attr.14, index=$const242.15, fn=<built-in function getitem>) ['$240load_attr.14', '$244binary_subscr.16', '$const242.15']
    $246call_function.17 = call $230load_global.9($236binary_add.12, $244binary_subscr.16, func=$230load_global.9, args=[Var($236binary_add.12, utils.py:1239), Var($244binary_subscr.16, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None) ['$230load_global.9', '$236binary_add.12', '$244binary_subscr.16', '$246call_function.17']
    $248build_slice.18 = global(slice: <class 'slice'>) ['$248build_slice.18']
    $248build_slice.19 = call $248build_slice.18($228call_function.8, $246call_function.17, func=$248build_slice.18, args=(Var($228call_function.8, utils.py:1239), Var($246call_function.17, utils.py:1239)), kws=(), vararg=None, varkwarg=None, target=None) ['$228call_function.8', '$246call_function.17', '$248build_slice.18', '$248build_slice.19']
    $250binary_subscr.20 = getitem(value=x, index=$248build_slice.19, fn=<built-in function getitem>) ['$248build_slice.19', '$250binary_subscr.20', 'x']
    avgn = call $214load_method.1($250binary_subscr.20, func=$214load_method.1, args=[Var($250binary_subscr.20, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None) ['$214load_method.1', '$250binary_subscr.20', 'avgn']
    $262binary_subscr.26 = getitem(value=peaks, index=n, fn=<built-in function getitem>) ['$262binary_subscr.26', 'n', 'peaks']
    $268binary_subscr.29 = getitem(value=x, index=n, fn=<built-in function getitem>) ['$268binary_subscr.29', 'n', 'x']
    $274binary_add.32 = avgn + delta         ['$274binary_add.32', 'avgn', 'delta']
    $276compare_op.33 = $268binary_subscr.29 >= $274binary_add.32 ['$268binary_subscr.29', '$274binary_add.32', '$276compare_op.33']
    $278inplace_and.34 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$262binary_subscr.26, rhs=$276compare_op.33, static_lhs=Undefined, static_rhs=Undefined) ['$262binary_subscr.26', '$276compare_op.33', '$278inplace_and.34']
    peaks[n] = $278inplace_and.34            ['$278inplace_and.34', 'n', 'peaks']
    $288binary_subscr.37 = getitem(value=peaks, index=n, fn=<built-in function getitem>) ['$288binary_subscr.37', 'n', 'peaks']
    bool290 = global(bool: <class 'bool'>)   ['bool290']
    $290pred = call bool290($288binary_subscr.37, func=bool290, args=(Var($288binary_subscr.37, utils.py:1242),), kws=(), vararg=None, varkwarg=None, target=None) ['$288binary_subscr.37', '$290pred', 'bool290']
    branch $290pred, 302, 292                ['$290pred']
label 292:
    $const294.1 = const(int, 1)              ['$const294.1']
    $296inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const294.1, static_lhs=Undefined, static_rhs=Undefined) ['$296inplace_add.2', '$const294.1', 'n']
    n = $296inplace_add.2                    ['$296inplace_add.2', 'n']
    jump 120                                 []
label 302:
    $const306.2 = const(int, 1)              ['$const306.2']
    $308binary_add.3 = wait + $const306.2    ['$308binary_add.3', '$const306.2', 'wait']
    $310inplace_add.4 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$308binary_add.3, static_lhs=Undefined, static_rhs=Undefined) ['$308binary_add.3', '$310inplace_add.4', 'n']
    n = $310inplace_add.4                    ['$310inplace_add.4', 'n']
    $318load_attr.7 = getattr(value=x, attr=shape) ['$318load_attr.7', 'x']
    $const320.8 = const(int, 0)              ['$const320.8']
    $322binary_subscr.9 = getitem(value=$318load_attr.7, index=$const320.8, fn=<built-in function getitem>) ['$318load_attr.7', '$322binary_subscr.9', '$const320.8']
    $324compare_op.10 = n < $322binary_subscr.9 ['$322binary_subscr.9', '$324compare_op.10', 'n']
    bool326 = global(bool: <class 'bool'>)   ['bool326']
    $326pred = call bool326($324compare_op.10, func=bool326, args=(Var($324compare_op.10, utils.py:1229),), kws=(), vararg=None, varkwarg=None, target=None) ['$324compare_op.10', '$326pred', 'bool326']
    branch $326pred, 134, 328                ['$326pred']
label 328:
    $const328.0 = const(NoneType, None)      ['$const328.0']
    $330return_value.1 = cast(value=$const328.0) ['$330return_value.1', '$const328.0']
    return $330return_value.1                ['$330return_value.1']
label 332:
    $const332.0 = const(NoneType, None)      ['$const332.0']
    $334return_value.1 = cast(value=$const332.0) ['$334return_value.1', '$const332.0']
    return $334return_value.1                ['$334return_value.1']

2025-01-31 15:31:41,283 - DEBUG - ==== SSA block analysis pass on 0
2025-01-31 15:31:41,283 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89ebde15d0>
2025-01-31 15:31:41,283 - DEBUG - on stmt: x = arg(0, name=x)
2025-01-31 15:31:41,283 - DEBUG - on stmt: pre_max = arg(1, name=pre_max)
2025-01-31 15:31:41,283 - DEBUG - on stmt: post_max = arg(2, name=post_max)
2025-01-31 15:31:41,283 - DEBUG - on stmt: pre_avg = arg(3, name=pre_avg)
2025-01-31 15:31:41,283 - DEBUG - on stmt: post_avg = arg(4, name=post_avg)
2025-01-31 15:31:41,283 - DEBUG - on stmt: delta = arg(5, name=delta)
2025-01-31 15:31:41,283 - DEBUG - on stmt: wait = arg(6, name=wait)
2025-01-31 15:31:41,283 - DEBUG - on stmt: peaks = arg(7, name=peaks)
2025-01-31 15:31:41,283 - DEBUG - on stmt: $const4.1 = const(int, 0)
2025-01-31 15:31:41,283 - DEBUG - on stmt: $6binary_subscr.2 = static_getitem(value=x, index=0, index_var=$const4.1, fn=<built-in function getitem>)
2025-01-31 15:31:41,283 - DEBUG - on stmt: $8load_global.3 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:41,283 - DEBUG - on stmt: $10load_method.4 = getattr(value=$8load_global.3, attr=max)
2025-01-31 15:31:41,283 - DEBUG - on stmt: $const14.6 = const(NoneType, None)
2025-01-31 15:31:41,283 - DEBUG - on stmt: $16load_global.7 = global(min: <built-in function min>)
2025-01-31 15:31:41,283 - DEBUG - on stmt: $22load_attr.10 = getattr(value=x, attr=shape)
2025-01-31 15:31:41,283 - DEBUG - on stmt: $const24.11 = const(int, 0)
2025-01-31 15:31:41,283 - DEBUG - on stmt: $26binary_subscr.12 = static_getitem(value=$22load_attr.10, index=0, index_var=$const24.11, fn=<built-in function getitem>)
2025-01-31 15:31:41,283 - DEBUG - on stmt: $28call_function.13 = call $16load_global.7(post_max, $26binary_subscr.12, func=$16load_global.7, args=[Var(post_max, utils.py:1209), Var($26binary_subscr.12, utils.py:1221)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,283 - DEBUG - on stmt: $30build_slice.14 = global(slice: <class 'slice'>)
2025-01-31 15:31:41,283 - DEBUG - on stmt: $30build_slice.15 = call $30build_slice.14($const14.6, $28call_function.13, func=$30build_slice.14, args=(Var($const14.6, utils.py:1221), Var($28call_function.13, utils.py:1221)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,284 - DEBUG - on stmt: $32binary_subscr.16 = getitem(value=x, index=$30build_slice.15, fn=<built-in function getitem>)
2025-01-31 15:31:41,284 - DEBUG - on stmt: $34call_method.17 = call $10load_method.4($32binary_subscr.16, func=$10load_method.4, args=[Var($32binary_subscr.16, utils.py:1221)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,284 - DEBUG - on stmt: $36compare_op.18 = $6binary_subscr.2 >= $34call_method.17
2025-01-31 15:31:41,284 - DEBUG - on stmt: $const40.20 = const(int, 0)
2025-01-31 15:31:41,284 - DEBUG - on stmt: peaks[0] = $36compare_op.18
2025-01-31 15:31:41,284 - DEBUG - on stmt: $const46.22 = const(int, 0)
2025-01-31 15:31:41,284 - DEBUG - on stmt: $50binary_subscr.25 = static_getitem(value=peaks, index=0, index_var=$const46.22, fn=<built-in function getitem>)
2025-01-31 15:31:41,284 - DEBUG - on stmt: $const54.27 = const(int, 0)
2025-01-31 15:31:41,284 - DEBUG - on stmt: $56binary_subscr.28 = static_getitem(value=x, index=0, index_var=$const54.27, fn=<built-in function getitem>)
2025-01-31 15:31:41,284 - DEBUG - on stmt: $58load_global.29 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:41,284 - DEBUG - on stmt: $60load_method.30 = getattr(value=$58load_global.29, attr=mean)
2025-01-31 15:31:41,284 - DEBUG - on stmt: $const64.32 = const(NoneType, None)
2025-01-31 15:31:41,284 - DEBUG - on stmt: $66load_global.33 = global(min: <built-in function min>)
2025-01-31 15:31:41,284 - DEBUG - on stmt: $72load_attr.36 = getattr(value=x, attr=shape)
2025-01-31 15:31:41,284 - DEBUG - on stmt: $const74.37 = const(int, 0)
2025-01-31 15:31:41,284 - DEBUG - on stmt: $76binary_subscr.38 = static_getitem(value=$72load_attr.36, index=0, index_var=$const74.37, fn=<built-in function getitem>)
2025-01-31 15:31:41,284 - DEBUG - on stmt: $78call_function.39 = call $66load_global.33(post_avg, $76binary_subscr.38, func=$66load_global.33, args=[Var(post_avg, utils.py:1209), Var($76binary_subscr.38, utils.py:1222)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,284 - DEBUG - on stmt: $80build_slice.40 = global(slice: <class 'slice'>)
2025-01-31 15:31:41,284 - DEBUG - on stmt: $80build_slice.41 = call $80build_slice.40($const64.32, $78call_function.39, func=$80build_slice.40, args=(Var($const64.32, utils.py:1222), Var($78call_function.39, utils.py:1222)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,284 - DEBUG - on stmt: $82binary_subscr.42 = getitem(value=x, index=$80build_slice.41, fn=<built-in function getitem>)
2025-01-31 15:31:41,284 - DEBUG - on stmt: $84call_method.43 = call $60load_method.30($82binary_subscr.42, func=$60load_method.30, args=[Var($82binary_subscr.42, utils.py:1222)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,284 - DEBUG - on stmt: $88binary_add.45 = $84call_method.43 + delta
2025-01-31 15:31:41,284 - DEBUG - on stmt: $90compare_op.46 = $56binary_subscr.28 >= $88binary_add.45
2025-01-31 15:31:41,285 - DEBUG - on stmt: $92inplace_and.47 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$50binary_subscr.25, rhs=$90compare_op.46, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:41,285 - DEBUG - on stmt: peaks[0] = $92inplace_and.47
2025-01-31 15:31:41,285 - DEBUG - on stmt: $const100.49 = const(int, 0)
2025-01-31 15:31:41,285 - DEBUG - on stmt: $102binary_subscr.50 = static_getitem(value=peaks, index=0, index_var=$const100.49, fn=<built-in function getitem>)
2025-01-31 15:31:41,285 - DEBUG - on stmt: bool104 = global(bool: <class 'bool'>)
2025-01-31 15:31:41,285 - DEBUG - on stmt: $104pred = call bool104($102binary_subscr.50, func=bool104, args=(Var($102binary_subscr.50, utils.py:1224),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,285 - DEBUG - on stmt: branch $104pred, 106, 116
2025-01-31 15:31:41,285 - DEBUG - ==== SSA block analysis pass on 106
2025-01-31 15:31:41,285 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89ebde15d0>
2025-01-31 15:31:41,285 - DEBUG - on stmt: $const108.1 = const(int, 1)
2025-01-31 15:31:41,285 - DEBUG - on stmt: n = wait + $const108.1
2025-01-31 15:31:41,285 - DEBUG - on stmt: jump 120
2025-01-31 15:31:41,285 - DEBUG - ==== SSA block analysis pass on 116
2025-01-31 15:31:41,285 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89ebde15d0>
2025-01-31 15:31:41,285 - DEBUG - on stmt: n = const(int, 1)
2025-01-31 15:31:41,285 - DEBUG - on stmt: jump 120
2025-01-31 15:31:41,285 - DEBUG - ==== SSA block analysis pass on 120
2025-01-31 15:31:41,285 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89ebde15d0>
2025-01-31 15:31:41,285 - DEBUG - on stmt: $124load_attr.2 = getattr(value=x, attr=shape)
2025-01-31 15:31:41,285 - DEBUG - on stmt: $const126.3 = const(int, 0)
2025-01-31 15:31:41,285 - DEBUG - on stmt: $128binary_subscr.4 = static_getitem(value=$124load_attr.2, index=0, index_var=$const126.3, fn=<built-in function getitem>)
2025-01-31 15:31:41,285 - DEBUG - on stmt: $130compare_op.5 = n < $128binary_subscr.4
2025-01-31 15:31:41,285 - DEBUG - on stmt: bool132 = global(bool: <class 'bool'>)
2025-01-31 15:31:41,285 - DEBUG - on stmt: $132pred = call bool132($130compare_op.5, func=bool132, args=(Var($130compare_op.5, utils.py:1229),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,285 - DEBUG - on stmt: branch $132pred, 134, 332
2025-01-31 15:31:41,285 - DEBUG - ==== SSA block analysis pass on 134
2025-01-31 15:31:41,286 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89ebde15d0>
2025-01-31 15:31:41,286 - DEBUG - on stmt: $134load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:41,286 - DEBUG - on stmt: $136load_method.1 = getattr(value=$134load_global.0, attr=max)
2025-01-31 15:31:41,286 - DEBUG - on stmt: $140load_global.3 = global(max: <built-in function max>)
2025-01-31 15:31:41,286 - DEBUG - on stmt: $const142.4 = const(int, 0)
2025-01-31 15:31:41,286 - DEBUG - on stmt: $148binary_subtract.7 = n - pre_max
2025-01-31 15:31:41,286 - DEBUG - on stmt: $150call_function.8 = call $140load_global.3($const142.4, $148binary_subtract.7, func=$140load_global.3, args=[Var($const142.4, utils.py:1230), Var($148binary_subtract.7, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,286 - DEBUG - on stmt: $152load_global.9 = global(min: <built-in function min>)
2025-01-31 15:31:41,286 - DEBUG - on stmt: $158binary_add.12 = n + post_max
2025-01-31 15:31:41,286 - DEBUG - on stmt: $162load_attr.14 = getattr(value=x, attr=shape)
2025-01-31 15:31:41,286 - DEBUG - on stmt: $const164.15 = const(int, 0)
2025-01-31 15:31:41,286 - DEBUG - on stmt: $166binary_subscr.16 = static_getitem(value=$162load_attr.14, index=0, index_var=$const164.15, fn=<built-in function getitem>)
2025-01-31 15:31:41,286 - DEBUG - on stmt: $168call_function.17 = call $152load_global.9($158binary_add.12, $166binary_subscr.16, func=$152load_global.9, args=[Var($158binary_add.12, utils.py:1230), Var($166binary_subscr.16, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,286 - DEBUG - on stmt: $170build_slice.18 = global(slice: <class 'slice'>)
2025-01-31 15:31:41,286 - DEBUG - on stmt: $170build_slice.19 = call $170build_slice.18($150call_function.8, $168call_function.17, func=$170build_slice.18, args=(Var($150call_function.8, utils.py:1230), Var($168call_function.17, utils.py:1230)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,286 - DEBUG - on stmt: $172binary_subscr.20 = getitem(value=x, index=$170build_slice.19, fn=<built-in function getitem>)
2025-01-31 15:31:41,286 - DEBUG - on stmt: maxn = call $136load_method.1($172binary_subscr.20, func=$136load_method.1, args=[Var($172binary_subscr.20, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,286 - DEBUG - on stmt: $182binary_subscr.24 = getitem(value=x, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:41,286 - DEBUG - on stmt: $186compare_op.26 = $182binary_subscr.24 == maxn
2025-01-31 15:31:41,286 - DEBUG - on stmt: peaks[n] = $186compare_op.26
2025-01-31 15:31:41,286 - DEBUG - on stmt: $198binary_subscr.31 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:41,286 - DEBUG - on stmt: bool200 = global(bool: <class 'bool'>)
2025-01-31 15:31:41,286 - DEBUG - on stmt: $200pred = call bool200($198binary_subscr.31, func=bool200, args=(Var($198binary_subscr.31, utils.py:1235),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,287 - DEBUG - on stmt: branch $200pred, 212, 202
2025-01-31 15:31:41,287 - DEBUG - ==== SSA block analysis pass on 202
2025-01-31 15:31:41,287 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89ebde15d0>
2025-01-31 15:31:41,287 - DEBUG - on stmt: $const204.1 = const(int, 1)
2025-01-31 15:31:41,287 - DEBUG - on stmt: $206inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const204.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:41,287 - DEBUG - on stmt: n = $206inplace_add.2
2025-01-31 15:31:41,287 - DEBUG - on stmt: jump 333
2025-01-31 15:31:41,287 - DEBUG - ==== SSA block analysis pass on 212
2025-01-31 15:31:41,287 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89ebde15d0>
2025-01-31 15:31:41,287 - DEBUG - on stmt: $212load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:41,287 - DEBUG - on stmt: $214load_method.1 = getattr(value=$212load_global.0, attr=mean)
2025-01-31 15:31:41,287 - DEBUG - on stmt: $218load_global.3 = global(max: <built-in function max>)
2025-01-31 15:31:41,287 - DEBUG - on stmt: $const220.4 = const(int, 0)
2025-01-31 15:31:41,287 - DEBUG - on stmt: $226binary_subtract.7 = n - pre_avg
2025-01-31 15:31:41,287 - DEBUG - on stmt: $228call_function.8 = call $218load_global.3($const220.4, $226binary_subtract.7, func=$218load_global.3, args=[Var($const220.4, utils.py:1239), Var($226binary_subtract.7, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,287 - DEBUG - on stmt: $230load_global.9 = global(min: <built-in function min>)
2025-01-31 15:31:41,287 - DEBUG - on stmt: $236binary_add.12 = n + post_avg
2025-01-31 15:31:41,287 - DEBUG - on stmt: $240load_attr.14 = getattr(value=x, attr=shape)
2025-01-31 15:31:41,287 - DEBUG - on stmt: $const242.15 = const(int, 0)
2025-01-31 15:31:41,287 - DEBUG - on stmt: $244binary_subscr.16 = static_getitem(value=$240load_attr.14, index=0, index_var=$const242.15, fn=<built-in function getitem>)
2025-01-31 15:31:41,287 - DEBUG - on stmt: $246call_function.17 = call $230load_global.9($236binary_add.12, $244binary_subscr.16, func=$230load_global.9, args=[Var($236binary_add.12, utils.py:1239), Var($244binary_subscr.16, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,287 - DEBUG - on stmt: $248build_slice.18 = global(slice: <class 'slice'>)
2025-01-31 15:31:41,287 - DEBUG - on stmt: $248build_slice.19 = call $248build_slice.18($228call_function.8, $246call_function.17, func=$248build_slice.18, args=(Var($228call_function.8, utils.py:1239), Var($246call_function.17, utils.py:1239)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,287 - DEBUG - on stmt: $250binary_subscr.20 = getitem(value=x, index=$248build_slice.19, fn=<built-in function getitem>)
2025-01-31 15:31:41,288 - DEBUG - on stmt: avgn = call $214load_method.1($250binary_subscr.20, func=$214load_method.1, args=[Var($250binary_subscr.20, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,288 - DEBUG - on stmt: $262binary_subscr.26 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:41,288 - DEBUG - on stmt: $268binary_subscr.29 = getitem(value=x, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:41,288 - DEBUG - on stmt: $274binary_add.32 = avgn + delta
2025-01-31 15:31:41,288 - DEBUG - on stmt: $276compare_op.33 = $268binary_subscr.29 >= $274binary_add.32
2025-01-31 15:31:41,288 - DEBUG - on stmt: $278inplace_and.34 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$262binary_subscr.26, rhs=$276compare_op.33, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:41,288 - DEBUG - on stmt: peaks[n] = $278inplace_and.34
2025-01-31 15:31:41,288 - DEBUG - on stmt: $288binary_subscr.37 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:41,288 - DEBUG - on stmt: bool290 = global(bool: <class 'bool'>)
2025-01-31 15:31:41,288 - DEBUG - on stmt: $290pred = call bool290($288binary_subscr.37, func=bool290, args=(Var($288binary_subscr.37, utils.py:1242),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,288 - DEBUG - on stmt: branch $290pred, 302, 292
2025-01-31 15:31:41,288 - DEBUG - ==== SSA block analysis pass on 292
2025-01-31 15:31:41,288 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89ebde15d0>
2025-01-31 15:31:41,288 - DEBUG - on stmt: $const294.1 = const(int, 1)
2025-01-31 15:31:41,288 - DEBUG - on stmt: $296inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const294.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:41,288 - DEBUG - on stmt: n = $296inplace_add.2
2025-01-31 15:31:41,288 - DEBUG - on stmt: jump 333
2025-01-31 15:31:41,288 - DEBUG - ==== SSA block analysis pass on 302
2025-01-31 15:31:41,288 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89ebde15d0>
2025-01-31 15:31:41,288 - DEBUG - on stmt: $const306.2 = const(int, 1)
2025-01-31 15:31:41,288 - DEBUG - on stmt: $308binary_add.3 = wait + $const306.2
2025-01-31 15:31:41,288 - DEBUG - on stmt: $310inplace_add.4 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$308binary_add.3, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:41,288 - DEBUG - on stmt: n = $310inplace_add.4
2025-01-31 15:31:41,288 - DEBUG - on stmt: $318load_attr.7 = getattr(value=x, attr=shape)
2025-01-31 15:31:41,289 - DEBUG - on stmt: $const320.8 = const(int, 0)
2025-01-31 15:31:41,289 - DEBUG - on stmt: $322binary_subscr.9 = static_getitem(value=$318load_attr.7, index=0, index_var=$const320.8, fn=<built-in function getitem>)
2025-01-31 15:31:41,289 - DEBUG - on stmt: $324compare_op.10 = n < $322binary_subscr.9
2025-01-31 15:31:41,289 - DEBUG - on stmt: bool326 = global(bool: <class 'bool'>)
2025-01-31 15:31:41,289 - DEBUG - on stmt: $326pred = call bool326($324compare_op.10, func=bool326, args=(Var($324compare_op.10, utils.py:1229),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,289 - DEBUG - on stmt: branch $326pred, 134, 328
2025-01-31 15:31:41,289 - DEBUG - ==== SSA block analysis pass on 328
2025-01-31 15:31:41,289 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89ebde15d0>
2025-01-31 15:31:41,289 - DEBUG - on stmt: $const328.0 = const(NoneType, None)
2025-01-31 15:31:41,289 - DEBUG - on stmt: $330return_value.1 = cast(value=$const328.0)
2025-01-31 15:31:41,289 - DEBUG - on stmt: return $330return_value.1
2025-01-31 15:31:41,289 - DEBUG - ==== SSA block analysis pass on 332
2025-01-31 15:31:41,289 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89ebde15d0>
2025-01-31 15:31:41,289 - DEBUG - on stmt: $const332.0 = const(NoneType, None)
2025-01-31 15:31:41,289 - DEBUG - on stmt: $334return_value.1 = cast(value=$const332.0)
2025-01-31 15:31:41,289 - DEBUG - on stmt: return $334return_value.1
2025-01-31 15:31:41,289 - DEBUG - ==== SSA block analysis pass on 333
2025-01-31 15:31:41,289 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89ebde15d0>
2025-01-31 15:31:41,289 - DEBUG - on stmt: jump 120
2025-01-31 15:31:41,291 - DEBUG - defs defaultdict(<class 'list'>,
            {'$102binary_subscr.50': [(<numba.core.ir.Assign object at 0x7c89ebde1930>,
                                       0)],
             '$104pred': [(<numba.core.ir.Assign object at 0x7c89ebe65a80>, 0)],
             '$10load_method.4': [(<numba.core.ir.Assign object at 0x7c89e87005b0>,
                                   0)],
             '$124load_attr.2': [(<numba.core.ir.Assign object at 0x7c89f00a9f00>,
                                  120)],
             '$128binary_subscr.4': [(<numba.core.ir.Assign object at 0x7c89ebde1c60>,
                                      120)],
             '$130compare_op.5': [(<numba.core.ir.Assign object at 0x7c89f00a90c0>,
                                   120)],
             '$132pred': [(<numba.core.ir.Assign object at 0x7c89f00aae30>,
                           120)],
             '$134load_global.0': [(<numba.core.ir.Assign object at 0x7c89f00aaf80>,
                                    134)],
             '$136load_method.1': [(<numba.core.ir.Assign object at 0x7c89f00aab00>,
                                    134)],
             '$140load_global.3': [(<numba.core.ir.Assign object at 0x7c89f00aa8f0>,
                                    134)],
             '$148binary_subtract.7': [(<numba.core.ir.Assign object at 0x7c89f00a8310>,
                                        134)],
             '$150call_function.8': [(<numba.core.ir.Assign object at 0x7c89f00a8700>,
                                      134)],
             '$152load_global.9': [(<numba.core.ir.Assign object at 0x7c89f00a8430>,
                                    134)],
             '$158binary_add.12': [(<numba.core.ir.Assign object at 0x7c89f00a8c10>,
                                    134)],
             '$162load_attr.14': [(<numba.core.ir.Assign object at 0x7c89f00a9030>,
                                   134)],
             '$166binary_subscr.16': [(<numba.core.ir.Assign object at 0x7c89ebde2530>,
                                       134)],
             '$168call_function.17': [(<numba.core.ir.Assign object at 0x7c89f00a9570>,
                                       134)],
             '$16load_global.7': [(<numba.core.ir.Assign object at 0x7c89ebdac910>,
                                   0)],
             '$170build_slice.18': [(<numba.core.ir.Assign object at 0x7c89f00a92a0>,
                                     134)],
             '$170build_slice.19': [(<numba.core.ir.Assign object at 0x7c89f00a9c90>,
                                     134)],
             '$172binary_subscr.20': [(<numba.core.ir.Assign object at 0x7c89f00aace0>,
                                       134)],
             '$182binary_subscr.24': [(<numba.core.ir.Assign object at 0x7c89f00abeb0>,
                                       134)],
             '$186compare_op.26': [(<numba.core.ir.Assign object at 0x7c89f00a9690>,
                                    134)],
             '$198binary_subscr.31': [(<numba.core.ir.Assign object at 0x7c89f00ab730>,
                                       134)],
             '$200pred': [(<numba.core.ir.Assign object at 0x7c89f00ab580>,
                           134)],
             '$206inplace_add.2': [(<numba.core.ir.Assign object at 0x7c89f00ab760>,
                                    202)],
             '$212load_global.0': [(<numba.core.ir.Assign object at 0x7c89f00aa140>,
                                    212)],
             '$214load_method.1': [(<numba.core.ir.Assign object at 0x7c89f00aa230>,
                                    212)],
             '$218load_global.3': [(<numba.core.ir.Assign object at 0x7c89f00d8b80>,
                                    212)],
             '$226binary_subtract.7': [(<numba.core.ir.Assign object at 0x7c89f00d95d0>,
                                        212)],
             '$228call_function.8': [(<numba.core.ir.Assign object at 0x7c89f00d8b50>,
                                      212)],
             '$22load_attr.10': [(<numba.core.ir.Assign object at 0x7c89ebdbdb10>,
                                  0)],
             '$230load_global.9': [(<numba.core.ir.Assign object at 0x7c89f00d8dc0>,
                                    212)],
             '$236binary_add.12': [(<numba.core.ir.Assign object at 0x7c89f00d80d0>,
                                    212)],
             '$240load_attr.14': [(<numba.core.ir.Assign object at 0x7c89f00d9fc0>,
                                   212)],
             '$244binary_subscr.16': [(<numba.core.ir.Assign object at 0x7c89e8672e60>,
                                       212)],
             '$246call_function.17': [(<numba.core.ir.Assign object at 0x7c89f00d94b0>,
                                       212)],
             '$248build_slice.18': [(<numba.core.ir.Assign object at 0x7c89f00da020>,
                                     212)],
             '$248build_slice.19': [(<numba.core.ir.Assign object at 0x7c89f00db070>,
                                     212)],
             '$250binary_subscr.20': [(<numba.core.ir.Assign object at 0x7c89f00da470>,
                                       212)],
             '$262binary_subscr.26': [(<numba.core.ir.Assign object at 0x7c89f00d9060>,
                                       212)],
             '$268binary_subscr.29': [(<numba.core.ir.Assign object at 0x7c89f00da7d0>,
                                       212)],
             '$26binary_subscr.12': [(<numba.core.ir.Assign object at 0x7c89ebde1b10>,
                                      0)],
             '$274binary_add.32': [(<numba.core.ir.Assign object at 0x7c89f00dbb50>,
                                    212)],
             '$276compare_op.33': [(<numba.core.ir.Assign object at 0x7c89f00db820>,
                                    212)],
             '$278inplace_and.34': [(<numba.core.ir.Assign object at 0x7c89f00dbca0>,
                                     212)],
             '$288binary_subscr.37': [(<numba.core.ir.Assign object at 0x7c89f00d8c10>,
                                       212)],
             '$28call_function.13': [(<numba.core.ir.Assign object at 0x7c89ebb00ee0>,
                                      0)],
             '$290pred': [(<numba.core.ir.Assign object at 0x7c89f00db1c0>,
                           212)],
             '$296inplace_add.2': [(<numba.core.ir.Assign object at 0x7c89f00da530>,
                                    292)],
             '$308binary_add.3': [(<numba.core.ir.Assign object at 0x7c89f00da8f0>,
                                   302)],
             '$30build_slice.14': [(<numba.core.ir.Assign object at 0x7c89ebb029b0>,
                                    0)],
             '$30build_slice.15': [(<numba.core.ir.Assign object at 0x7c89e8c52bc0>,
                                    0)],
             '$310inplace_add.4': [(<numba.core.ir.Assign object at 0x7c89f00daad0>,
                                    302)],
             '$318load_attr.7': [(<numba.core.ir.Assign object at 0x7c89ebde3f40>,
                                  302)],
             '$322binary_subscr.9': [(<numba.core.ir.Assign object at 0x7c89e86718a0>,
                                      302)],
             '$324compare_op.10': [(<numba.core.ir.Assign object at 0x7c89ebde08e0>,
                                    302)],
             '$326pred': [(<numba.core.ir.Assign object at 0x7c89ebde04f0>,
                           302)],
             '$32binary_subscr.16': [(<numba.core.ir.Assign object at 0x7c89f0237d90>,
                                      0)],
             '$330return_value.1': [(<numba.core.ir.Assign object at 0x7c89ebde0130>,
                                     328)],
             '$334return_value.1': [(<numba.core.ir.Assign object at 0x7c89ebde0eb0>,
                                     332)],
             '$34call_method.17': [(<numba.core.ir.Assign object at 0x7c89ebb388e0>,
                                    0)],
             '$36compare_op.18': [(<numba.core.ir.Assign object at 0x7c89f0243520>,
                                   0)],
             '$50binary_subscr.25': [(<numba.core.ir.Assign object at 0x7c89ebde1bd0>,
                                      0)],
             '$56binary_subscr.28': [(<numba.core.ir.Assign object at 0x7c89ebde1ab0>,
                                      0)],
             '$58load_global.29': [(<numba.core.ir.Assign object at 0x7c89f029ae60>,
                                    0)],
             '$60load_method.30': [(<numba.core.ir.Assign object at 0x7c89f0298eb0>,
                                    0)],
             '$66load_global.33': [(<numba.core.ir.Assign object at 0x7c89f0298dc0>,
                                    0)],
             '$6binary_subscr.2': [(<numba.core.ir.Assign object at 0x7c89ebde1de0>,
                                    0)],
             '$72load_attr.36': [(<numba.core.ir.Assign object at 0x7c89f02da740>,
                                  0)],
             '$76binary_subscr.38': [(<numba.core.ir.Assign object at 0x7c89ebde19f0>,
                                      0)],
             '$78call_function.39': [(<numba.core.ir.Assign object at 0x7c89f02da320>,
                                      0)],
             '$80build_slice.40': [(<numba.core.ir.Assign object at 0x7c89f02dbb50>,
                                    0)],
             '$80build_slice.41': [(<numba.core.ir.Assign object at 0x7c89f02db880>,
                                    0)],
             '$82binary_subscr.42': [(<numba.core.ir.Assign object at 0x7c89f02d92d0>,
                                      0)],
             '$84call_method.43': [(<numba.core.ir.Assign object at 0x7c89f02d91b0>,
                                    0)],
             '$88binary_add.45': [(<numba.core.ir.Assign object at 0x7c89f02db340>,
                                   0)],
             '$8load_global.3': [(<numba.core.ir.Assign object at 0x7c89e87031c0>,
                                  0)],
             '$90compare_op.46': [(<numba.core.ir.Assign object at 0x7c89f02da530>,
                                   0)],
             '$92inplace_and.47': [(<numba.core.ir.Assign object at 0x7c89f02d9ba0>,
                                    0)],
             '$const100.49': [(<numba.core.ir.Assign object at 0x7c89ebe64550>,
                               0)],
             '$const108.1': [(<numba.core.ir.Assign object at 0x7c89f0298c10>,
                              106)],
             '$const126.3': [(<numba.core.ir.Assign object at 0x7c89f00aa7d0>,
                              120)],
             '$const14.6': [(<numba.core.ir.Assign object at 0x7c89e88ed480>,
                             0)],
             '$const142.4': [(<numba.core.ir.Assign object at 0x7c89f00a8220>,
                              134)],
             '$const164.15': [(<numba.core.ir.Assign object at 0x7c89f00a8f10>,
                               134)],
             '$const204.1': [(<numba.core.ir.Assign object at 0x7c89f00aa1a0>,
                              202)],
             '$const220.4': [(<numba.core.ir.Assign object at 0x7c89f00d91b0>,
                              212)],
             '$const24.11': [(<numba.core.ir.Assign object at 0x7c89ebb025f0>,
                              0)],
             '$const242.15': [(<numba.core.ir.Assign object at 0x7c89f00d9090>,
                               212)],
             '$const294.1': [(<numba.core.ir.Assign object at 0x7c89f00db550>,
                              292)],
             '$const306.2': [(<numba.core.ir.Assign object at 0x7c89f00daa40>,
                              302)],
             '$const320.8': [(<numba.core.ir.Assign object at 0x7c89ebde3190>,
                              302)],
             '$const328.0': [(<numba.core.ir.Assign object at 0x7c89ebde0700>,
                              328)],
             '$const332.0': [(<numba.core.ir.Assign object at 0x7c89ebde0460>,
                              332)],
             '$const4.1': [(<numba.core.ir.Assign object at 0x7c89e8703730>,
                            0)],
             '$const40.20': [(<numba.core.ir.Assign object at 0x7c89e88c9060>,
                              0)],
             '$const46.22': [(<numba.core.ir.Assign object at 0x7c89e86e4a00>,
                              0)],
             '$const54.27': [(<numba.core.ir.Assign object at 0x7c89ebad9330>,
                              0)],
             '$const64.32': [(<numba.core.ir.Assign object at 0x7c89f0298b50>,
                              0)],
             '$const74.37': [(<numba.core.ir.Assign object at 0x7c89f02db7f0>,
                              0)],
             'avgn': [(<numba.core.ir.Assign object at 0x7c89f00d9f00>, 212)],
             'bool104': [(<numba.core.ir.Assign object at 0x7c89ebe66290>, 0)],
             'bool132': [(<numba.core.ir.Assign object at 0x7c89f00aaec0>,
                          120)],
             'bool200': [(<numba.core.ir.Assign object at 0x7c89f00ab4c0>,
                          134)],
             'bool290': [(<numba.core.ir.Assign object at 0x7c89f00db340>,
                          212)],
             'bool326': [(<numba.core.ir.Assign object at 0x7c89ebde0850>,
                          302)],
             'delta': [(<numba.core.ir.Assign object at 0x7c89e88f1a50>, 0)],
             'maxn': [(<numba.core.ir.Assign object at 0x7c89f00a9ff0>, 134)],
             'n': [(<numba.core.ir.Assign object at 0x7c89f02dbd30>, 106),
                   (<numba.core.ir.Assign object at 0x7c89ebe646a0>, 116),
                   (<numba.core.ir.Assign object at 0x7c89f00ab6a0>, 202),
                   (<numba.core.ir.Assign object at 0x7c89f00db580>, 292),
                   (<numba.core.ir.Assign object at 0x7c89f00db5b0>, 302)],
             'peaks': [(<numba.core.ir.Assign object at 0x7c89e88f33d0>, 0)],
             'post_avg': [(<numba.core.ir.Assign object at 0x7c89e88f28c0>, 0)],
             'post_max': [(<numba.core.ir.Assign object at 0x7c89e88f2ef0>, 0)],
             'pre_avg': [(<numba.core.ir.Assign object at 0x7c89e88f3c40>, 0)],
             'pre_max': [(<numba.core.ir.Assign object at 0x7c89e88f3fd0>, 0)],
             'wait': [(<numba.core.ir.Assign object at 0x7c89e88f1420>, 0)],
             'x': [(<numba.core.ir.Assign object at 0x7c89e88aa110>, 0)]})
2025-01-31 15:31:41,291 - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x7c89f00a8940>
2025-01-31 15:31:41,291 - DEBUG - Fix SSA violator on var n
2025-01-31 15:31:41,291 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-31 15:31:41,292 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e8673b50>
2025-01-31 15:31:41,292 - DEBUG - on stmt: x = arg(0, name=x)
2025-01-31 15:31:41,292 - DEBUG - on stmt: pre_max = arg(1, name=pre_max)
2025-01-31 15:31:41,292 - DEBUG - on stmt: post_max = arg(2, name=post_max)
2025-01-31 15:31:41,292 - DEBUG - on stmt: pre_avg = arg(3, name=pre_avg)
2025-01-31 15:31:41,292 - DEBUG - on stmt: post_avg = arg(4, name=post_avg)
2025-01-31 15:31:41,292 - DEBUG - on stmt: delta = arg(5, name=delta)
2025-01-31 15:31:41,292 - DEBUG - on stmt: wait = arg(6, name=wait)
2025-01-31 15:31:41,292 - DEBUG - on stmt: peaks = arg(7, name=peaks)
2025-01-31 15:31:41,292 - DEBUG - on stmt: $const4.1 = const(int, 0)
2025-01-31 15:31:41,292 - DEBUG - on stmt: $6binary_subscr.2 = static_getitem(value=x, index=0, index_var=$const4.1, fn=<built-in function getitem>)
2025-01-31 15:31:41,292 - DEBUG - on stmt: $8load_global.3 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:41,292 - DEBUG - on stmt: $10load_method.4 = getattr(value=$8load_global.3, attr=max)
2025-01-31 15:31:41,292 - DEBUG - on stmt: $const14.6 = const(NoneType, None)
2025-01-31 15:31:41,292 - DEBUG - on stmt: $16load_global.7 = global(min: <built-in function min>)
2025-01-31 15:31:41,292 - DEBUG - on stmt: $22load_attr.10 = getattr(value=x, attr=shape)
2025-01-31 15:31:41,292 - DEBUG - on stmt: $const24.11 = const(int, 0)
2025-01-31 15:31:41,292 - DEBUG - on stmt: $26binary_subscr.12 = static_getitem(value=$22load_attr.10, index=0, index_var=$const24.11, fn=<built-in function getitem>)
2025-01-31 15:31:41,292 - DEBUG - on stmt: $28call_function.13 = call $16load_global.7(post_max, $26binary_subscr.12, func=$16load_global.7, args=[Var(post_max, utils.py:1209), Var($26binary_subscr.12, utils.py:1221)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,292 - DEBUG - on stmt: $30build_slice.14 = global(slice: <class 'slice'>)
2025-01-31 15:31:41,292 - DEBUG - on stmt: $30build_slice.15 = call $30build_slice.14($const14.6, $28call_function.13, func=$30build_slice.14, args=(Var($const14.6, utils.py:1221), Var($28call_function.13, utils.py:1221)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,292 - DEBUG - on stmt: $32binary_subscr.16 = getitem(value=x, index=$30build_slice.15, fn=<built-in function getitem>)
2025-01-31 15:31:41,292 - DEBUG - on stmt: $34call_method.17 = call $10load_method.4($32binary_subscr.16, func=$10load_method.4, args=[Var($32binary_subscr.16, utils.py:1221)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,292 - DEBUG - on stmt: $36compare_op.18 = $6binary_subscr.2 >= $34call_method.17
2025-01-31 15:31:41,292 - DEBUG - on stmt: $const40.20 = const(int, 0)
2025-01-31 15:31:41,292 - DEBUG - on stmt: peaks[0] = $36compare_op.18
2025-01-31 15:31:41,292 - DEBUG - on stmt: $const46.22 = const(int, 0)
2025-01-31 15:31:41,293 - DEBUG - on stmt: $50binary_subscr.25 = static_getitem(value=peaks, index=0, index_var=$const46.22, fn=<built-in function getitem>)
2025-01-31 15:31:41,293 - DEBUG - on stmt: $const54.27 = const(int, 0)
2025-01-31 15:31:41,293 - DEBUG - on stmt: $56binary_subscr.28 = static_getitem(value=x, index=0, index_var=$const54.27, fn=<built-in function getitem>)
2025-01-31 15:31:41,293 - DEBUG - on stmt: $58load_global.29 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:41,293 - DEBUG - on stmt: $60load_method.30 = getattr(value=$58load_global.29, attr=mean)
2025-01-31 15:31:41,293 - DEBUG - on stmt: $const64.32 = const(NoneType, None)
2025-01-31 15:31:41,293 - DEBUG - on stmt: $66load_global.33 = global(min: <built-in function min>)
2025-01-31 15:31:41,293 - DEBUG - on stmt: $72load_attr.36 = getattr(value=x, attr=shape)
2025-01-31 15:31:41,293 - DEBUG - on stmt: $const74.37 = const(int, 0)
2025-01-31 15:31:41,293 - DEBUG - on stmt: $76binary_subscr.38 = static_getitem(value=$72load_attr.36, index=0, index_var=$const74.37, fn=<built-in function getitem>)
2025-01-31 15:31:41,293 - DEBUG - on stmt: $78call_function.39 = call $66load_global.33(post_avg, $76binary_subscr.38, func=$66load_global.33, args=[Var(post_avg, utils.py:1209), Var($76binary_subscr.38, utils.py:1222)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,293 - DEBUG - on stmt: $80build_slice.40 = global(slice: <class 'slice'>)
2025-01-31 15:31:41,293 - DEBUG - on stmt: $80build_slice.41 = call $80build_slice.40($const64.32, $78call_function.39, func=$80build_slice.40, args=(Var($const64.32, utils.py:1222), Var($78call_function.39, utils.py:1222)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,293 - DEBUG - on stmt: $82binary_subscr.42 = getitem(value=x, index=$80build_slice.41, fn=<built-in function getitem>)
2025-01-31 15:31:41,293 - DEBUG - on stmt: $84call_method.43 = call $60load_method.30($82binary_subscr.42, func=$60load_method.30, args=[Var($82binary_subscr.42, utils.py:1222)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,293 - DEBUG - on stmt: $88binary_add.45 = $84call_method.43 + delta
2025-01-31 15:31:41,293 - DEBUG - on stmt: $90compare_op.46 = $56binary_subscr.28 >= $88binary_add.45
2025-01-31 15:31:41,293 - DEBUG - on stmt: $92inplace_and.47 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$50binary_subscr.25, rhs=$90compare_op.46, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:41,293 - DEBUG - on stmt: peaks[0] = $92inplace_and.47
2025-01-31 15:31:41,293 - DEBUG - on stmt: $const100.49 = const(int, 0)
2025-01-31 15:31:41,293 - DEBUG - on stmt: $102binary_subscr.50 = static_getitem(value=peaks, index=0, index_var=$const100.49, fn=<built-in function getitem>)
2025-01-31 15:31:41,293 - DEBUG - on stmt: bool104 = global(bool: <class 'bool'>)
2025-01-31 15:31:41,293 - DEBUG - on stmt: $104pred = call bool104($102binary_subscr.50, func=bool104, args=(Var($102binary_subscr.50, utils.py:1224),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,293 - DEBUG - on stmt: branch $104pred, 106, 116
2025-01-31 15:31:41,293 - DEBUG - ==== SSA block rewrite pass on 106
2025-01-31 15:31:41,293 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e8673b50>
2025-01-31 15:31:41,294 - DEBUG - on stmt: $const108.1 = const(int, 1)
2025-01-31 15:31:41,294 - DEBUG - on stmt: n = wait + $const108.1
2025-01-31 15:31:41,294 - DEBUG - first assign: n
2025-01-31 15:31:41,294 - DEBUG - replaced with: n = wait + $const108.1
2025-01-31 15:31:41,294 - DEBUG - on stmt: jump 120
2025-01-31 15:31:41,294 - DEBUG - ==== SSA block rewrite pass on 116
2025-01-31 15:31:41,294 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e8673b50>
2025-01-31 15:31:41,294 - DEBUG - on stmt: n = const(int, 1)
2025-01-31 15:31:41,294 - DEBUG - replaced with: n.1 = const(int, 1)
2025-01-31 15:31:41,294 - DEBUG - on stmt: jump 120
2025-01-31 15:31:41,294 - DEBUG - ==== SSA block rewrite pass on 120
2025-01-31 15:31:41,294 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e8673b50>
2025-01-31 15:31:41,294 - DEBUG - on stmt: $124load_attr.2 = getattr(value=x, attr=shape)
2025-01-31 15:31:41,294 - DEBUG - on stmt: $const126.3 = const(int, 0)
2025-01-31 15:31:41,294 - DEBUG - on stmt: $128binary_subscr.4 = static_getitem(value=$124load_attr.2, index=0, index_var=$const126.3, fn=<built-in function getitem>)
2025-01-31 15:31:41,294 - DEBUG - on stmt: $130compare_op.5 = n < $128binary_subscr.4
2025-01-31 15:31:41,294 - DEBUG - on stmt: bool132 = global(bool: <class 'bool'>)
2025-01-31 15:31:41,294 - DEBUG - on stmt: $132pred = call bool132($130compare_op.5, func=bool132, args=(Var($130compare_op.5, utils.py:1229),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,294 - DEBUG - on stmt: branch $132pred, 134, 332
2025-01-31 15:31:41,294 - DEBUG - ==== SSA block rewrite pass on 134
2025-01-31 15:31:41,294 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e8673b50>
2025-01-31 15:31:41,294 - DEBUG - on stmt: $134load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:41,294 - DEBUG - on stmt: $136load_method.1 = getattr(value=$134load_global.0, attr=max)
2025-01-31 15:31:41,294 - DEBUG - on stmt: $140load_global.3 = global(max: <built-in function max>)
2025-01-31 15:31:41,294 - DEBUG - on stmt: $const142.4 = const(int, 0)
2025-01-31 15:31:41,294 - DEBUG - on stmt: $148binary_subtract.7 = n - pre_max
2025-01-31 15:31:41,294 - DEBUG - on stmt: $150call_function.8 = call $140load_global.3($const142.4, $148binary_subtract.7, func=$140load_global.3, args=[Var($const142.4, utils.py:1230), Var($148binary_subtract.7, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,294 - DEBUG - on stmt: $152load_global.9 = global(min: <built-in function min>)
2025-01-31 15:31:41,295 - DEBUG - on stmt: $158binary_add.12 = n + post_max
2025-01-31 15:31:41,295 - DEBUG - on stmt: $162load_attr.14 = getattr(value=x, attr=shape)
2025-01-31 15:31:41,295 - DEBUG - on stmt: $const164.15 = const(int, 0)
2025-01-31 15:31:41,295 - DEBUG - on stmt: $166binary_subscr.16 = static_getitem(value=$162load_attr.14, index=0, index_var=$const164.15, fn=<built-in function getitem>)
2025-01-31 15:31:41,295 - DEBUG - on stmt: $168call_function.17 = call $152load_global.9($158binary_add.12, $166binary_subscr.16, func=$152load_global.9, args=[Var($158binary_add.12, utils.py:1230), Var($166binary_subscr.16, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,295 - DEBUG - on stmt: $170build_slice.18 = global(slice: <class 'slice'>)
2025-01-31 15:31:41,295 - DEBUG - on stmt: $170build_slice.19 = call $170build_slice.18($150call_function.8, $168call_function.17, func=$170build_slice.18, args=(Var($150call_function.8, utils.py:1230), Var($168call_function.17, utils.py:1230)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,295 - DEBUG - on stmt: $172binary_subscr.20 = getitem(value=x, index=$170build_slice.19, fn=<built-in function getitem>)
2025-01-31 15:31:41,295 - DEBUG - on stmt: maxn = call $136load_method.1($172binary_subscr.20, func=$136load_method.1, args=[Var($172binary_subscr.20, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,295 - DEBUG - on stmt: $182binary_subscr.24 = getitem(value=x, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:41,295 - DEBUG - on stmt: $186compare_op.26 = $182binary_subscr.24 == maxn
2025-01-31 15:31:41,295 - DEBUG - on stmt: peaks[n] = $186compare_op.26
2025-01-31 15:31:41,295 - DEBUG - on stmt: $198binary_subscr.31 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:41,295 - DEBUG - on stmt: bool200 = global(bool: <class 'bool'>)
2025-01-31 15:31:41,295 - DEBUG - on stmt: $200pred = call bool200($198binary_subscr.31, func=bool200, args=(Var($198binary_subscr.31, utils.py:1235),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,295 - DEBUG - on stmt: branch $200pred, 212, 202
2025-01-31 15:31:41,295 - DEBUG - ==== SSA block rewrite pass on 202
2025-01-31 15:31:41,295 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e8673b50>
2025-01-31 15:31:41,295 - DEBUG - on stmt: $const204.1 = const(int, 1)
2025-01-31 15:31:41,295 - DEBUG - on stmt: $206inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const204.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:41,295 - DEBUG - on stmt: n = $206inplace_add.2
2025-01-31 15:31:41,295 - DEBUG - replaced with: n.2 = $206inplace_add.2
2025-01-31 15:31:41,295 - DEBUG - on stmt: jump 333
2025-01-31 15:31:41,295 - DEBUG - ==== SSA block rewrite pass on 212
2025-01-31 15:31:41,295 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e8673b50>
2025-01-31 15:31:41,295 - DEBUG - on stmt: $212load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:41,296 - DEBUG - on stmt: $214load_method.1 = getattr(value=$212load_global.0, attr=mean)
2025-01-31 15:31:41,296 - DEBUG - on stmt: $218load_global.3 = global(max: <built-in function max>)
2025-01-31 15:31:41,296 - DEBUG - on stmt: $const220.4 = const(int, 0)
2025-01-31 15:31:41,296 - DEBUG - on stmt: $226binary_subtract.7 = n - pre_avg
2025-01-31 15:31:41,296 - DEBUG - on stmt: $228call_function.8 = call $218load_global.3($const220.4, $226binary_subtract.7, func=$218load_global.3, args=[Var($const220.4, utils.py:1239), Var($226binary_subtract.7, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,296 - DEBUG - on stmt: $230load_global.9 = global(min: <built-in function min>)
2025-01-31 15:31:41,296 - DEBUG - on stmt: $236binary_add.12 = n + post_avg
2025-01-31 15:31:41,296 - DEBUG - on stmt: $240load_attr.14 = getattr(value=x, attr=shape)
2025-01-31 15:31:41,296 - DEBUG - on stmt: $const242.15 = const(int, 0)
2025-01-31 15:31:41,296 - DEBUG - on stmt: $244binary_subscr.16 = static_getitem(value=$240load_attr.14, index=0, index_var=$const242.15, fn=<built-in function getitem>)
2025-01-31 15:31:41,296 - DEBUG - on stmt: $246call_function.17 = call $230load_global.9($236binary_add.12, $244binary_subscr.16, func=$230load_global.9, args=[Var($236binary_add.12, utils.py:1239), Var($244binary_subscr.16, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,296 - DEBUG - on stmt: $248build_slice.18 = global(slice: <class 'slice'>)
2025-01-31 15:31:41,296 - DEBUG - on stmt: $248build_slice.19 = call $248build_slice.18($228call_function.8, $246call_function.17, func=$248build_slice.18, args=(Var($228call_function.8, utils.py:1239), Var($246call_function.17, utils.py:1239)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,296 - DEBUG - on stmt: $250binary_subscr.20 = getitem(value=x, index=$248build_slice.19, fn=<built-in function getitem>)
2025-01-31 15:31:41,296 - DEBUG - on stmt: avgn = call $214load_method.1($250binary_subscr.20, func=$214load_method.1, args=[Var($250binary_subscr.20, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,296 - DEBUG - on stmt: $262binary_subscr.26 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:41,296 - DEBUG - on stmt: $268binary_subscr.29 = getitem(value=x, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:41,296 - DEBUG - on stmt: $274binary_add.32 = avgn + delta
2025-01-31 15:31:41,296 - DEBUG - on stmt: $276compare_op.33 = $268binary_subscr.29 >= $274binary_add.32
2025-01-31 15:31:41,296 - DEBUG - on stmt: $278inplace_and.34 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$262binary_subscr.26, rhs=$276compare_op.33, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:41,296 - DEBUG - on stmt: peaks[n] = $278inplace_and.34
2025-01-31 15:31:41,296 - DEBUG - on stmt: $288binary_subscr.37 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:41,296 - DEBUG - on stmt: bool290 = global(bool: <class 'bool'>)
2025-01-31 15:31:41,296 - DEBUG - on stmt: $290pred = call bool290($288binary_subscr.37, func=bool290, args=(Var($288binary_subscr.37, utils.py:1242),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,296 - DEBUG - on stmt: branch $290pred, 302, 292
2025-01-31 15:31:41,296 - DEBUG - ==== SSA block rewrite pass on 292
2025-01-31 15:31:41,297 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e8673b50>
2025-01-31 15:31:41,297 - DEBUG - on stmt: $const294.1 = const(int, 1)
2025-01-31 15:31:41,297 - DEBUG - on stmt: $296inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const294.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:41,297 - DEBUG - on stmt: n = $296inplace_add.2
2025-01-31 15:31:41,297 - DEBUG - replaced with: n.3 = $296inplace_add.2
2025-01-31 15:31:41,297 - DEBUG - on stmt: jump 333
2025-01-31 15:31:41,297 - DEBUG - ==== SSA block rewrite pass on 302
2025-01-31 15:31:41,297 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e8673b50>
2025-01-31 15:31:41,297 - DEBUG - on stmt: $const306.2 = const(int, 1)
2025-01-31 15:31:41,297 - DEBUG - on stmt: $308binary_add.3 = wait + $const306.2
2025-01-31 15:31:41,297 - DEBUG - on stmt: $310inplace_add.4 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$308binary_add.3, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:41,297 - DEBUG - on stmt: n = $310inplace_add.4
2025-01-31 15:31:41,297 - DEBUG - replaced with: n.4 = $310inplace_add.4
2025-01-31 15:31:41,297 - DEBUG - on stmt: $318load_attr.7 = getattr(value=x, attr=shape)
2025-01-31 15:31:41,297 - DEBUG - on stmt: $const320.8 = const(int, 0)
2025-01-31 15:31:41,297 - DEBUG - on stmt: $322binary_subscr.9 = static_getitem(value=$318load_attr.7, index=0, index_var=$const320.8, fn=<built-in function getitem>)
2025-01-31 15:31:41,297 - DEBUG - on stmt: $324compare_op.10 = n < $322binary_subscr.9
2025-01-31 15:31:41,297 - DEBUG - on stmt: bool326 = global(bool: <class 'bool'>)
2025-01-31 15:31:41,297 - DEBUG - on stmt: $326pred = call bool326($324compare_op.10, func=bool326, args=(Var($324compare_op.10, utils.py:1229),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,297 - DEBUG - on stmt: branch $326pred, 134, 328
2025-01-31 15:31:41,297 - DEBUG - ==== SSA block rewrite pass on 328
2025-01-31 15:31:41,297 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e8673b50>
2025-01-31 15:31:41,297 - DEBUG - on stmt: $const328.0 = const(NoneType, None)
2025-01-31 15:31:41,297 - DEBUG - on stmt: $330return_value.1 = cast(value=$const328.0)
2025-01-31 15:31:41,297 - DEBUG - on stmt: return $330return_value.1
2025-01-31 15:31:41,297 - DEBUG - ==== SSA block rewrite pass on 332
2025-01-31 15:31:41,297 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e8673b50>
2025-01-31 15:31:41,297 - DEBUG - on stmt: $const332.0 = const(NoneType, None)
2025-01-31 15:31:41,297 - DEBUG - on stmt: $334return_value.1 = cast(value=$const332.0)
2025-01-31 15:31:41,297 - DEBUG - on stmt: return $334return_value.1
2025-01-31 15:31:41,298 - DEBUG - ==== SSA block rewrite pass on 333
2025-01-31 15:31:41,298 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e8673b50>
2025-01-31 15:31:41,298 - DEBUG - on stmt: jump 120
2025-01-31 15:31:41,298 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {106: [<numba.core.ir.Assign object at 0x7c89ebde2770>],
             116: [<numba.core.ir.Assign object at 0x7c89ebde1060>],
             202: [<numba.core.ir.Assign object at 0x7c89ebde32b0>],
             292: [<numba.core.ir.Assign object at 0x7c89ebde3a00>],
             302: [<numba.core.ir.Assign object at 0x7c89ebde0940>]})
2025-01-31 15:31:41,298 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-31 15:31:41,298 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e8673b50>
2025-01-31 15:31:41,298 - DEBUG - on stmt: x = arg(0, name=x)
2025-01-31 15:31:41,298 - DEBUG - on stmt: pre_max = arg(1, name=pre_max)
2025-01-31 15:31:41,298 - DEBUG - on stmt: post_max = arg(2, name=post_max)
2025-01-31 15:31:41,298 - DEBUG - on stmt: pre_avg = arg(3, name=pre_avg)
2025-01-31 15:31:41,298 - DEBUG - on stmt: post_avg = arg(4, name=post_avg)
2025-01-31 15:31:41,298 - DEBUG - on stmt: delta = arg(5, name=delta)
2025-01-31 15:31:41,298 - DEBUG - on stmt: wait = arg(6, name=wait)
2025-01-31 15:31:41,298 - DEBUG - on stmt: peaks = arg(7, name=peaks)
2025-01-31 15:31:41,298 - DEBUG - on stmt: $const4.1 = const(int, 0)
2025-01-31 15:31:41,298 - DEBUG - on stmt: $6binary_subscr.2 = static_getitem(value=x, index=0, index_var=$const4.1, fn=<built-in function getitem>)
2025-01-31 15:31:41,298 - DEBUG - on stmt: $8load_global.3 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:41,298 - DEBUG - on stmt: $10load_method.4 = getattr(value=$8load_global.3, attr=max)
2025-01-31 15:31:41,298 - DEBUG - on stmt: $const14.6 = const(NoneType, None)
2025-01-31 15:31:41,298 - DEBUG - on stmt: $16load_global.7 = global(min: <built-in function min>)
2025-01-31 15:31:41,298 - DEBUG - on stmt: $22load_attr.10 = getattr(value=x, attr=shape)
2025-01-31 15:31:41,298 - DEBUG - on stmt: $const24.11 = const(int, 0)
2025-01-31 15:31:41,298 - DEBUG - on stmt: $26binary_subscr.12 = static_getitem(value=$22load_attr.10, index=0, index_var=$const24.11, fn=<built-in function getitem>)
2025-01-31 15:31:41,298 - DEBUG - on stmt: $28call_function.13 = call $16load_global.7(post_max, $26binary_subscr.12, func=$16load_global.7, args=[Var(post_max, utils.py:1209), Var($26binary_subscr.12, utils.py:1221)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,298 - DEBUG - on stmt: $30build_slice.14 = global(slice: <class 'slice'>)
2025-01-31 15:31:41,298 - DEBUG - on stmt: $30build_slice.15 = call $30build_slice.14($const14.6, $28call_function.13, func=$30build_slice.14, args=(Var($const14.6, utils.py:1221), Var($28call_function.13, utils.py:1221)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,299 - DEBUG - on stmt: $32binary_subscr.16 = getitem(value=x, index=$30build_slice.15, fn=<built-in function getitem>)
2025-01-31 15:31:41,299 - DEBUG - on stmt: $34call_method.17 = call $10load_method.4($32binary_subscr.16, func=$10load_method.4, args=[Var($32binary_subscr.16, utils.py:1221)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,299 - DEBUG - on stmt: $36compare_op.18 = $6binary_subscr.2 >= $34call_method.17
2025-01-31 15:31:41,299 - DEBUG - on stmt: $const40.20 = const(int, 0)
2025-01-31 15:31:41,299 - DEBUG - on stmt: peaks[0] = $36compare_op.18
2025-01-31 15:31:41,299 - DEBUG - on stmt: $const46.22 = const(int, 0)
2025-01-31 15:31:41,299 - DEBUG - on stmt: $50binary_subscr.25 = static_getitem(value=peaks, index=0, index_var=$const46.22, fn=<built-in function getitem>)
2025-01-31 15:31:41,299 - DEBUG - on stmt: $const54.27 = const(int, 0)
2025-01-31 15:31:41,299 - DEBUG - on stmt: $56binary_subscr.28 = static_getitem(value=x, index=0, index_var=$const54.27, fn=<built-in function getitem>)
2025-01-31 15:31:41,299 - DEBUG - on stmt: $58load_global.29 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:41,299 - DEBUG - on stmt: $60load_method.30 = getattr(value=$58load_global.29, attr=mean)
2025-01-31 15:31:41,299 - DEBUG - on stmt: $const64.32 = const(NoneType, None)
2025-01-31 15:31:41,299 - DEBUG - on stmt: $66load_global.33 = global(min: <built-in function min>)
2025-01-31 15:31:41,299 - DEBUG - on stmt: $72load_attr.36 = getattr(value=x, attr=shape)
2025-01-31 15:31:41,299 - DEBUG - on stmt: $const74.37 = const(int, 0)
2025-01-31 15:31:41,299 - DEBUG - on stmt: $76binary_subscr.38 = static_getitem(value=$72load_attr.36, index=0, index_var=$const74.37, fn=<built-in function getitem>)
2025-01-31 15:31:41,299 - DEBUG - on stmt: $78call_function.39 = call $66load_global.33(post_avg, $76binary_subscr.38, func=$66load_global.33, args=[Var(post_avg, utils.py:1209), Var($76binary_subscr.38, utils.py:1222)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,299 - DEBUG - on stmt: $80build_slice.40 = global(slice: <class 'slice'>)
2025-01-31 15:31:41,299 - DEBUG - on stmt: $80build_slice.41 = call $80build_slice.40($const64.32, $78call_function.39, func=$80build_slice.40, args=(Var($const64.32, utils.py:1222), Var($78call_function.39, utils.py:1222)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,299 - DEBUG - on stmt: $82binary_subscr.42 = getitem(value=x, index=$80build_slice.41, fn=<built-in function getitem>)
2025-01-31 15:31:41,299 - DEBUG - on stmt: $84call_method.43 = call $60load_method.30($82binary_subscr.42, func=$60load_method.30, args=[Var($82binary_subscr.42, utils.py:1222)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,299 - DEBUG - on stmt: $88binary_add.45 = $84call_method.43 + delta
2025-01-31 15:31:41,300 - DEBUG - on stmt: $90compare_op.46 = $56binary_subscr.28 >= $88binary_add.45
2025-01-31 15:31:41,300 - DEBUG - on stmt: $92inplace_and.47 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$50binary_subscr.25, rhs=$90compare_op.46, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:41,300 - DEBUG - on stmt: peaks[0] = $92inplace_and.47
2025-01-31 15:31:41,300 - DEBUG - on stmt: $const100.49 = const(int, 0)
2025-01-31 15:31:41,300 - DEBUG - on stmt: $102binary_subscr.50 = static_getitem(value=peaks, index=0, index_var=$const100.49, fn=<built-in function getitem>)
2025-01-31 15:31:41,300 - DEBUG - on stmt: bool104 = global(bool: <class 'bool'>)
2025-01-31 15:31:41,300 - DEBUG - on stmt: $104pred = call bool104($102binary_subscr.50, func=bool104, args=(Var($102binary_subscr.50, utils.py:1224),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,300 - DEBUG - on stmt: branch $104pred, 106, 116
2025-01-31 15:31:41,300 - DEBUG - ==== SSA block rewrite pass on 106
2025-01-31 15:31:41,300 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e8673b50>
2025-01-31 15:31:41,300 - DEBUG - on stmt: $const108.1 = const(int, 1)
2025-01-31 15:31:41,300 - DEBUG - on stmt: n = wait + $const108.1
2025-01-31 15:31:41,300 - DEBUG - on stmt: jump 120
2025-01-31 15:31:41,300 - DEBUG - ==== SSA block rewrite pass on 116
2025-01-31 15:31:41,300 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e8673b50>
2025-01-31 15:31:41,300 - DEBUG - on stmt: n.1 = const(int, 1)
2025-01-31 15:31:41,300 - DEBUG - on stmt: jump 120
2025-01-31 15:31:41,300 - DEBUG - ==== SSA block rewrite pass on 120
2025-01-31 15:31:41,300 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e8673b50>
2025-01-31 15:31:41,300 - DEBUG - on stmt: $124load_attr.2 = getattr(value=x, attr=shape)
2025-01-31 15:31:41,300 - DEBUG - on stmt: $const126.3 = const(int, 0)
2025-01-31 15:31:41,300 - DEBUG - on stmt: $128binary_subscr.4 = static_getitem(value=$124load_attr.2, index=0, index_var=$const126.3, fn=<built-in function getitem>)
2025-01-31 15:31:41,300 - DEBUG - on stmt: $130compare_op.5 = n < $128binary_subscr.4
2025-01-31 15:31:41,300 - DEBUG - find_def var='n' stmt=$130compare_op.5 = n < $128binary_subscr.4
2025-01-31 15:31:41,300 - DEBUG - find_def_from_top label 120
2025-01-31 15:31:41,300 - DEBUG - insert phi node n.5 = phi(incoming_values=[], incoming_blocks=[]) at 120
2025-01-31 15:31:41,301 - DEBUG - find_def_from_bottom label 106
2025-01-31 15:31:41,301 - DEBUG - incoming_def n = wait + $const108.1
2025-01-31 15:31:41,301 - DEBUG - find_def_from_bottom label 116
2025-01-31 15:31:41,301 - DEBUG - incoming_def n.1 = const(int, 1)
2025-01-31 15:31:41,301 - DEBUG - find_def_from_bottom label 333
2025-01-31 15:31:41,301 - DEBUG - find_def_from_top label 333
2025-01-31 15:31:41,301 - DEBUG - insert phi node n.6 = phi(incoming_values=[], incoming_blocks=[]) at 333
2025-01-31 15:31:41,301 - DEBUG - find_def_from_bottom label 202
2025-01-31 15:31:41,301 - DEBUG - incoming_def n.2 = $206inplace_add.2
2025-01-31 15:31:41,301 - DEBUG - find_def_from_bottom label 292
2025-01-31 15:31:41,301 - DEBUG - incoming_def n.3 = $296inplace_add.2
2025-01-31 15:31:41,301 - DEBUG - incoming_def n.6 = phi(incoming_values=[Var(n.2, utils.py:1236), Var(n.3, utils.py:1243)], incoming_blocks=[202, 292])
2025-01-31 15:31:41,301 - DEBUG - replaced with: $130compare_op.5 = n.5 < $128binary_subscr.4
2025-01-31 15:31:41,301 - DEBUG - on stmt: bool132 = global(bool: <class 'bool'>)
2025-01-31 15:31:41,301 - DEBUG - on stmt: $132pred = call bool132($130compare_op.5, func=bool132, args=(Var($130compare_op.5, utils.py:1229),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,301 - DEBUG - on stmt: branch $132pred, 134, 332
2025-01-31 15:31:41,301 - DEBUG - ==== SSA block rewrite pass on 134
2025-01-31 15:31:41,301 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e8673b50>
2025-01-31 15:31:41,301 - DEBUG - on stmt: $134load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:41,301 - DEBUG - on stmt: $136load_method.1 = getattr(value=$134load_global.0, attr=max)
2025-01-31 15:31:41,301 - DEBUG - on stmt: $140load_global.3 = global(max: <built-in function max>)
2025-01-31 15:31:41,301 - DEBUG - on stmt: $const142.4 = const(int, 0)
2025-01-31 15:31:41,301 - DEBUG - on stmt: $148binary_subtract.7 = n - pre_max
2025-01-31 15:31:41,301 - DEBUG - find_def var='n' stmt=$148binary_subtract.7 = n - pre_max
2025-01-31 15:31:41,301 - DEBUG - find_def_from_top label 134
2025-01-31 15:31:41,301 - DEBUG - insert phi node n.7 = phi(incoming_values=[], incoming_blocks=[]) at 134
2025-01-31 15:31:41,302 - DEBUG - find_def_from_bottom label 120
2025-01-31 15:31:41,302 - DEBUG - incoming_def n.5 = phi(incoming_values=[Var(n, utils.py:1225), Var(n.1, utils.py:1227), Var(n.6, utils.py:1229)], incoming_blocks=[106, 116, 333])
2025-01-31 15:31:41,302 - DEBUG - find_def_from_bottom label 302
2025-01-31 15:31:41,302 - DEBUG - incoming_def n.4 = $310inplace_add.4
2025-01-31 15:31:41,302 - DEBUG - replaced with: $148binary_subtract.7 = n.7 - pre_max
2025-01-31 15:31:41,302 - DEBUG - on stmt: $150call_function.8 = call $140load_global.3($const142.4, $148binary_subtract.7, func=$140load_global.3, args=[Var($const142.4, utils.py:1230), Var($148binary_subtract.7, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,302 - DEBUG - on stmt: $152load_global.9 = global(min: <built-in function min>)
2025-01-31 15:31:41,302 - DEBUG - on stmt: $158binary_add.12 = n + post_max
2025-01-31 15:31:41,302 - DEBUG - find_def var='n' stmt=$158binary_add.12 = n + post_max
2025-01-31 15:31:41,302 - DEBUG - replaced with: $158binary_add.12 = n.7 + post_max
2025-01-31 15:31:41,302 - DEBUG - on stmt: $162load_attr.14 = getattr(value=x, attr=shape)
2025-01-31 15:31:41,302 - DEBUG - on stmt: $const164.15 = const(int, 0)
2025-01-31 15:31:41,302 - DEBUG - on stmt: $166binary_subscr.16 = static_getitem(value=$162load_attr.14, index=0, index_var=$const164.15, fn=<built-in function getitem>)
2025-01-31 15:31:41,302 - DEBUG - on stmt: $168call_function.17 = call $152load_global.9($158binary_add.12, $166binary_subscr.16, func=$152load_global.9, args=[Var($158binary_add.12, utils.py:1230), Var($166binary_subscr.16, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,317 - DEBUG - on stmt: $170build_slice.18 = global(slice: <class 'slice'>)
2025-01-31 15:31:41,317 - DEBUG - on stmt: $170build_slice.19 = call $170build_slice.18($150call_function.8, $168call_function.17, func=$170build_slice.18, args=(Var($150call_function.8, utils.py:1230), Var($168call_function.17, utils.py:1230)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,317 - DEBUG - on stmt: $172binary_subscr.20 = getitem(value=x, index=$170build_slice.19, fn=<built-in function getitem>)
2025-01-31 15:31:41,317 - DEBUG - on stmt: maxn = call $136load_method.1($172binary_subscr.20, func=$136load_method.1, args=[Var($172binary_subscr.20, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,317 - DEBUG - on stmt: $182binary_subscr.24 = getitem(value=x, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:41,317 - DEBUG - find_def var='n' stmt=$182binary_subscr.24 = getitem(value=x, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:41,317 - DEBUG - replaced with: $182binary_subscr.24 = getitem(value=x, index=n.7, fn=<built-in function getitem>)
2025-01-31 15:31:41,317 - DEBUG - on stmt: $186compare_op.26 = $182binary_subscr.24 == maxn
2025-01-31 15:31:41,317 - DEBUG - on stmt: peaks[n] = $186compare_op.26
2025-01-31 15:31:41,318 - DEBUG - find_def var='n' stmt=peaks[n] = $186compare_op.26
2025-01-31 15:31:41,318 - DEBUG - replaced with: peaks[n.7] = $186compare_op.26
2025-01-31 15:31:41,318 - DEBUG - on stmt: $198binary_subscr.31 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:41,318 - DEBUG - find_def var='n' stmt=$198binary_subscr.31 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:41,318 - DEBUG - replaced with: $198binary_subscr.31 = getitem(value=peaks, index=n.7, fn=<built-in function getitem>)
2025-01-31 15:31:41,318 - DEBUG - on stmt: bool200 = global(bool: <class 'bool'>)
2025-01-31 15:31:41,318 - DEBUG - on stmt: $200pred = call bool200($198binary_subscr.31, func=bool200, args=(Var($198binary_subscr.31, utils.py:1235),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,318 - DEBUG - on stmt: branch $200pred, 212, 202
2025-01-31 15:31:41,318 - DEBUG - ==== SSA block rewrite pass on 202
2025-01-31 15:31:41,318 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e8673b50>
2025-01-31 15:31:41,318 - DEBUG - on stmt: $const204.1 = const(int, 1)
2025-01-31 15:31:41,318 - DEBUG - on stmt: $206inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const204.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:41,318 - DEBUG - find_def var='n' stmt=$206inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const204.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:41,318 - DEBUG - find_def_from_top label 202
2025-01-31 15:31:41,318 - DEBUG - idom 134 from label 202
2025-01-31 15:31:41,318 - DEBUG - find_def_from_bottom label 134
2025-01-31 15:31:41,318 - DEBUG - replaced with: $206inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n.7, rhs=$const204.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:41,318 - DEBUG - on stmt: n.2 = $206inplace_add.2
2025-01-31 15:31:41,318 - DEBUG - on stmt: jump 333
2025-01-31 15:31:41,318 - DEBUG - ==== SSA block rewrite pass on 212
2025-01-31 15:31:41,318 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e8673b50>
2025-01-31 15:31:41,318 - DEBUG - on stmt: $212load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:41,318 - DEBUG - on stmt: $214load_method.1 = getattr(value=$212load_global.0, attr=mean)
2025-01-31 15:31:41,318 - DEBUG - on stmt: $218load_global.3 = global(max: <built-in function max>)
2025-01-31 15:31:41,319 - DEBUG - on stmt: $const220.4 = const(int, 0)
2025-01-31 15:31:41,319 - DEBUG - on stmt: $226binary_subtract.7 = n - pre_avg
2025-01-31 15:31:41,319 - DEBUG - find_def var='n' stmt=$226binary_subtract.7 = n - pre_avg
2025-01-31 15:31:41,319 - DEBUG - find_def_from_top label 212
2025-01-31 15:31:41,319 - DEBUG - idom 134 from label 212
2025-01-31 15:31:41,319 - DEBUG - find_def_from_bottom label 134
2025-01-31 15:31:41,319 - DEBUG - replaced with: $226binary_subtract.7 = n.7 - pre_avg
2025-01-31 15:31:41,319 - DEBUG - on stmt: $228call_function.8 = call $218load_global.3($const220.4, $226binary_subtract.7, func=$218load_global.3, args=[Var($const220.4, utils.py:1239), Var($226binary_subtract.7, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,319 - DEBUG - on stmt: $230load_global.9 = global(min: <built-in function min>)
2025-01-31 15:31:41,319 - DEBUG - on stmt: $236binary_add.12 = n + post_avg
2025-01-31 15:31:41,319 - DEBUG - find_def var='n' stmt=$236binary_add.12 = n + post_avg
2025-01-31 15:31:41,319 - DEBUG - find_def_from_top label 212
2025-01-31 15:31:41,319 - DEBUG - idom 134 from label 212
2025-01-31 15:31:41,319 - DEBUG - find_def_from_bottom label 134
2025-01-31 15:31:41,319 - DEBUG - replaced with: $236binary_add.12 = n.7 + post_avg
2025-01-31 15:31:41,319 - DEBUG - on stmt: $240load_attr.14 = getattr(value=x, attr=shape)
2025-01-31 15:31:41,319 - DEBUG - on stmt: $const242.15 = const(int, 0)
2025-01-31 15:31:41,319 - DEBUG - on stmt: $244binary_subscr.16 = static_getitem(value=$240load_attr.14, index=0, index_var=$const242.15, fn=<built-in function getitem>)
2025-01-31 15:31:41,319 - DEBUG - on stmt: $246call_function.17 = call $230load_global.9($236binary_add.12, $244binary_subscr.16, func=$230load_global.9, args=[Var($236binary_add.12, utils.py:1239), Var($244binary_subscr.16, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,319 - DEBUG - on stmt: $248build_slice.18 = global(slice: <class 'slice'>)
2025-01-31 15:31:41,319 - DEBUG - on stmt: $248build_slice.19 = call $248build_slice.18($228call_function.8, $246call_function.17, func=$248build_slice.18, args=(Var($228call_function.8, utils.py:1239), Var($246call_function.17, utils.py:1239)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,319 - DEBUG - on stmt: $250binary_subscr.20 = getitem(value=x, index=$248build_slice.19, fn=<built-in function getitem>)
2025-01-31 15:31:41,319 - DEBUG - on stmt: avgn = call $214load_method.1($250binary_subscr.20, func=$214load_method.1, args=[Var($250binary_subscr.20, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,319 - DEBUG - on stmt: $262binary_subscr.26 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:41,320 - DEBUG - find_def var='n' stmt=$262binary_subscr.26 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:41,320 - DEBUG - find_def_from_top label 212
2025-01-31 15:31:41,320 - DEBUG - idom 134 from label 212
2025-01-31 15:31:41,320 - DEBUG - find_def_from_bottom label 134
2025-01-31 15:31:41,320 - DEBUG - replaced with: $262binary_subscr.26 = getitem(value=peaks, index=n.7, fn=<built-in function getitem>)
2025-01-31 15:31:41,320 - DEBUG - on stmt: $268binary_subscr.29 = getitem(value=x, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:41,320 - DEBUG - find_def var='n' stmt=$268binary_subscr.29 = getitem(value=x, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:41,320 - DEBUG - find_def_from_top label 212
2025-01-31 15:31:41,320 - DEBUG - idom 134 from label 212
2025-01-31 15:31:41,320 - DEBUG - find_def_from_bottom label 134
2025-01-31 15:31:41,320 - DEBUG - replaced with: $268binary_subscr.29 = getitem(value=x, index=n.7, fn=<built-in function getitem>)
2025-01-31 15:31:41,320 - DEBUG - on stmt: $274binary_add.32 = avgn + delta
2025-01-31 15:31:41,320 - DEBUG - on stmt: $276compare_op.33 = $268binary_subscr.29 >= $274binary_add.32
2025-01-31 15:31:41,320 - DEBUG - on stmt: $278inplace_and.34 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$262binary_subscr.26, rhs=$276compare_op.33, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:41,320 - DEBUG - on stmt: peaks[n] = $278inplace_and.34
2025-01-31 15:31:41,320 - DEBUG - find_def var='n' stmt=peaks[n] = $278inplace_and.34
2025-01-31 15:31:41,320 - DEBUG - find_def_from_top label 212
2025-01-31 15:31:41,320 - DEBUG - idom 134 from label 212
2025-01-31 15:31:41,320 - DEBUG - find_def_from_bottom label 134
2025-01-31 15:31:41,320 - DEBUG - replaced with: peaks[n.7] = $278inplace_and.34
2025-01-31 15:31:41,320 - DEBUG - on stmt: $288binary_subscr.37 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:41,320 - DEBUG - find_def var='n' stmt=$288binary_subscr.37 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:41,320 - DEBUG - find_def_from_top label 212
2025-01-31 15:31:41,320 - DEBUG - idom 134 from label 212
2025-01-31 15:31:41,320 - DEBUG - find_def_from_bottom label 134
2025-01-31 15:31:41,320 - DEBUG - replaced with: $288binary_subscr.37 = getitem(value=peaks, index=n.7, fn=<built-in function getitem>)
2025-01-31 15:31:41,321 - DEBUG - on stmt: bool290 = global(bool: <class 'bool'>)
2025-01-31 15:31:41,321 - DEBUG - on stmt: $290pred = call bool290($288binary_subscr.37, func=bool290, args=(Var($288binary_subscr.37, utils.py:1242),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,321 - DEBUG - on stmt: branch $290pred, 302, 292
2025-01-31 15:31:41,321 - DEBUG - ==== SSA block rewrite pass on 292
2025-01-31 15:31:41,321 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e8673b50>
2025-01-31 15:31:41,321 - DEBUG - on stmt: $const294.1 = const(int, 1)
2025-01-31 15:31:41,321 - DEBUG - on stmt: $296inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const294.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:41,321 - DEBUG - find_def var='n' stmt=$296inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const294.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:41,321 - DEBUG - find_def_from_top label 292
2025-01-31 15:31:41,321 - DEBUG - idom 212 from label 292
2025-01-31 15:31:41,321 - DEBUG - find_def_from_bottom label 212
2025-01-31 15:31:41,321 - DEBUG - find_def_from_top label 212
2025-01-31 15:31:41,321 - DEBUG - idom 134 from label 212
2025-01-31 15:31:41,321 - DEBUG - find_def_from_bottom label 134
2025-01-31 15:31:41,321 - DEBUG - replaced with: $296inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n.7, rhs=$const294.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:41,321 - DEBUG - on stmt: n.3 = $296inplace_add.2
2025-01-31 15:31:41,321 - DEBUG - on stmt: jump 333
2025-01-31 15:31:41,321 - DEBUG - ==== SSA block rewrite pass on 302
2025-01-31 15:31:41,321 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e8673b50>
2025-01-31 15:31:41,321 - DEBUG - on stmt: $const306.2 = const(int, 1)
2025-01-31 15:31:41,321 - DEBUG - on stmt: $308binary_add.3 = wait + $const306.2
2025-01-31 15:31:41,321 - DEBUG - on stmt: $310inplace_add.4 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$308binary_add.3, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:41,321 - DEBUG - find_def var='n' stmt=$310inplace_add.4 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$308binary_add.3, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:41,321 - DEBUG - find_def_from_top label 302
2025-01-31 15:31:41,321 - DEBUG - idom 212 from label 302
2025-01-31 15:31:41,321 - DEBUG - find_def_from_bottom label 212
2025-01-31 15:31:41,321 - DEBUG - find_def_from_top label 212
2025-01-31 15:31:41,321 - DEBUG - idom 134 from label 212
2025-01-31 15:31:41,322 - DEBUG - find_def_from_bottom label 134
2025-01-31 15:31:41,322 - DEBUG - replaced with: $310inplace_add.4 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n.7, rhs=$308binary_add.3, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:41,322 - DEBUG - on stmt: n.4 = $310inplace_add.4
2025-01-31 15:31:41,322 - DEBUG - on stmt: $318load_attr.7 = getattr(value=x, attr=shape)
2025-01-31 15:31:41,322 - DEBUG - on stmt: $const320.8 = const(int, 0)
2025-01-31 15:31:41,322 - DEBUG - on stmt: $322binary_subscr.9 = static_getitem(value=$318load_attr.7, index=0, index_var=$const320.8, fn=<built-in function getitem>)
2025-01-31 15:31:41,322 - DEBUG - on stmt: $324compare_op.10 = n < $322binary_subscr.9
2025-01-31 15:31:41,322 - DEBUG - find_def var='n' stmt=$324compare_op.10 = n < $322binary_subscr.9
2025-01-31 15:31:41,322 - DEBUG - replaced with: $324compare_op.10 = n.4 < $322binary_subscr.9
2025-01-31 15:31:41,322 - DEBUG - on stmt: bool326 = global(bool: <class 'bool'>)
2025-01-31 15:31:41,322 - DEBUG - on stmt: $326pred = call bool326($324compare_op.10, func=bool326, args=(Var($324compare_op.10, utils.py:1229),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,322 - DEBUG - on stmt: branch $326pred, 134, 328
2025-01-31 15:31:41,322 - DEBUG - ==== SSA block rewrite pass on 328
2025-01-31 15:31:41,322 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e8673b50>
2025-01-31 15:31:41,322 - DEBUG - on stmt: $const328.0 = const(NoneType, None)
2025-01-31 15:31:41,322 - DEBUG - on stmt: $330return_value.1 = cast(value=$const328.0)
2025-01-31 15:31:41,322 - DEBUG - on stmt: return $330return_value.1
2025-01-31 15:31:41,322 - DEBUG - ==== SSA block rewrite pass on 332
2025-01-31 15:31:41,322 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e8673b50>
2025-01-31 15:31:41,322 - DEBUG - on stmt: $const332.0 = const(NoneType, None)
2025-01-31 15:31:41,322 - DEBUG - on stmt: $334return_value.1 = cast(value=$const332.0)
2025-01-31 15:31:41,322 - DEBUG - on stmt: return $334return_value.1
2025-01-31 15:31:41,322 - DEBUG - ==== SSA block rewrite pass on 333
2025-01-31 15:31:41,322 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e8673b50>
2025-01-31 15:31:41,322 - DEBUG - on stmt: jump 120
2025-01-31 15:31:41,330 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=570)
           2	LOAD_FAST(arg=0, lineno=571)
           4	LOAD_ATTR(arg=0, lineno=571)
           6	LOAD_CONST(arg=1, lineno=571)
           8	COMPARE_OP(arg=2, lineno=571)
          10	POP_JUMP_IF_FALSE(arg=11, lineno=571)
          12	LOAD_GLOBAL(arg=1, lineno=572)
          14	LOAD_CONST(arg=2, lineno=572)
          16	CALL_FUNCTION(arg=1, lineno=572)
          18	RAISE_VARARGS(arg=1, lineno=572)
>         20	LOAD_GLOBAL(arg=2, lineno=575)
          22	LOAD_METHOD(arg=3, lineno=575)
          24	LOAD_FAST(arg=0, lineno=575)
          26	CALL_METHOD(arg=1, lineno=575)
          28	STORE_FAST(arg=1, lineno=575)
          30	LOAD_GLOBAL(arg=4, lineno=576)
          32	LOAD_FAST(arg=1, lineno=576)
          34	CALL_FUNCTION(arg=1, lineno=576)
          36	LOAD_METHOD(arg=5, lineno=576)
          38	LOAD_CONST(arg=1, lineno=576)
          40	CALL_METHOD(arg=1, lineno=576)
          42	STORE_FAST(arg=2, lineno=576)
          44	LOAD_DEREF(arg=1, lineno=577)
          46	LOAD_FAST(arg=2, lineno=577)
          48	CALL_FUNCTION(arg=1, lineno=577)
          50	POP_JUMP_IF_FALSE(arg=29, lineno=577)
          52	LOAD_FAST(arg=2, lineno=578)
          54	RETURN_VALUE(arg=None, lineno=578)
>         56	LOAD_FAST(arg=1, lineno=580)
          58	GET_ITER(arg=None, lineno=580)
>         60	FOR_ITER(arg=21, lineno=580)
          62	STORE_FAST(arg=3, lineno=580)
          64	LOAD_FAST(arg=3, lineno=581)
          66	LOAD_METHOD(arg=6, lineno=581)
          68	CALL_METHOD(arg=0, lineno=581)
          70	STORE_FAST(arg=4, lineno=581)
          72	LOAD_DEREF(arg=1, lineno=582)
          74	LOAD_FAST(arg=4, lineno=582)
          76	CALL_FUNCTION(arg=1, lineno=582)
          78	POP_JUMP_IF_FALSE(arg=45, lineno=582)
          80	LOAD_FAST(arg=4, lineno=583)
          82	ROT_TWO(arg=None, lineno=583)
          84	POP_TOP(arg=None, lineno=583)
          86	RETURN_VALUE(arg=None, lineno=583)
>         88	LOAD_DEREF(arg=0, lineno=584)
          90	LOAD_FAST(arg=4, lineno=584)
          92	LOAD_FAST(arg=2, lineno=584)
          94	CALL_FUNCTION(arg=2, lineno=584)
          96	POP_JUMP_IF_FALSE(arg=52, lineno=584)
          98	LOAD_FAST(arg=4, lineno=585)
         100	STORE_FAST(arg=2, lineno=585)
>        102	JUMP_ABSOLUTE(arg=31, lineno=585)
>        104	LOAD_FAST(arg=2, lineno=586)
         106	RETURN_VALUE(arg=None, lineno=586)
2025-01-31 15:31:41,330 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:31:41,330 - DEBUG - stack: []
2025-01-31 15:31:41,330 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:31:41,330 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=570)
2025-01-31 15:31:41,330 - DEBUG - stack []
2025-01-31 15:31:41,330 - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=571)
2025-01-31 15:31:41,330 - DEBUG - stack []
2025-01-31 15:31:41,330 - DEBUG - dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=571)
2025-01-31 15:31:41,330 - DEBUG - stack ['$a2.0']
2025-01-31 15:31:41,330 - DEBUG - dispatch pc=6, inst=LOAD_CONST(arg=1, lineno=571)
2025-01-31 15:31:41,330 - DEBUG - stack ['$4load_attr.1']
2025-01-31 15:31:41,330 - DEBUG - dispatch pc=8, inst=COMPARE_OP(arg=2, lineno=571)
2025-01-31 15:31:41,330 - DEBUG - stack ['$4load_attr.1', '$const6.2']
2025-01-31 15:31:41,330 - DEBUG - dispatch pc=10, inst=POP_JUMP_IF_FALSE(arg=11, lineno=571)
2025-01-31 15:31:41,330 - DEBUG - stack ['$8compare_op.3']
2025-01-31 15:31:41,330 - DEBUG - end state. edges=[Edge(pc=12, stack=(), blockstack=(), npush=0), Edge(pc=20, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:41,330 - DEBUG - pending: deque([State(pc_initial=12 nstack_initial=0), State(pc_initial=20 nstack_initial=0)])
2025-01-31 15:31:41,330 - DEBUG - stack: []
2025-01-31 15:31:41,330 - DEBUG - state.pc_initial: State(pc_initial=12 nstack_initial=0)
2025-01-31 15:31:41,330 - DEBUG - dispatch pc=12, inst=LOAD_GLOBAL(arg=1, lineno=572)
2025-01-31 15:31:41,330 - DEBUG - stack []
2025-01-31 15:31:41,331 - DEBUG - dispatch pc=14, inst=LOAD_CONST(arg=2, lineno=572)
2025-01-31 15:31:41,331 - DEBUG - stack ['$12load_global.0']
2025-01-31 15:31:41,331 - DEBUG - dispatch pc=16, inst=CALL_FUNCTION(arg=1, lineno=572)
2025-01-31 15:31:41,331 - DEBUG - stack ['$12load_global.0', '$const14.1']
2025-01-31 15:31:41,331 - DEBUG - dispatch pc=18, inst=RAISE_VARARGS(arg=1, lineno=572)
2025-01-31 15:31:41,331 - DEBUG - stack ['$16call_function.2']
2025-01-31 15:31:41,331 - DEBUG - end state. edges=[]
2025-01-31 15:31:41,331 - DEBUG - pending: deque([State(pc_initial=20 nstack_initial=0)])
2025-01-31 15:31:41,331 - DEBUG - stack: []
2025-01-31 15:31:41,331 - DEBUG - state.pc_initial: State(pc_initial=20 nstack_initial=0)
2025-01-31 15:31:41,331 - DEBUG - dispatch pc=20, inst=LOAD_GLOBAL(arg=2, lineno=575)
2025-01-31 15:31:41,331 - DEBUG - stack []
2025-01-31 15:31:41,331 - DEBUG - dispatch pc=22, inst=LOAD_METHOD(arg=3, lineno=575)
2025-01-31 15:31:41,331 - DEBUG - stack ['$20load_global.0']
2025-01-31 15:31:41,331 - DEBUG - dispatch pc=24, inst=LOAD_FAST(arg=0, lineno=575)
2025-01-31 15:31:41,331 - DEBUG - stack ['$22load_method.1']
2025-01-31 15:31:41,331 - DEBUG - dispatch pc=26, inst=CALL_METHOD(arg=1, lineno=575)
2025-01-31 15:31:41,331 - DEBUG - stack ['$22load_method.1', '$a24.2']
2025-01-31 15:31:41,331 - DEBUG - dispatch pc=28, inst=STORE_FAST(arg=1, lineno=575)
2025-01-31 15:31:41,331 - DEBUG - stack ['$26call_method.3']
2025-01-31 15:31:41,331 - DEBUG - dispatch pc=30, inst=LOAD_GLOBAL(arg=4, lineno=576)
2025-01-31 15:31:41,331 - DEBUG - stack []
2025-01-31 15:31:41,331 - DEBUG - dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=576)
2025-01-31 15:31:41,331 - DEBUG - stack ['$30load_global.4']
2025-01-31 15:31:41,331 - DEBUG - dispatch pc=34, inst=CALL_FUNCTION(arg=1, lineno=576)
2025-01-31 15:31:41,331 - DEBUG - stack ['$30load_global.4', '$it32.5']
2025-01-31 15:31:41,331 - DEBUG - dispatch pc=36, inst=LOAD_METHOD(arg=5, lineno=576)
2025-01-31 15:31:41,331 - DEBUG - stack ['$34call_function.6']
2025-01-31 15:31:41,331 - DEBUG - dispatch pc=38, inst=LOAD_CONST(arg=1, lineno=576)
2025-01-31 15:31:41,332 - DEBUG - stack ['$36load_method.7']
2025-01-31 15:31:41,332 - DEBUG - dispatch pc=40, inst=CALL_METHOD(arg=1, lineno=576)
2025-01-31 15:31:41,332 - DEBUG - stack ['$36load_method.7', '$const38.8']
2025-01-31 15:31:41,332 - DEBUG - dispatch pc=42, inst=STORE_FAST(arg=2, lineno=576)
2025-01-31 15:31:41,332 - DEBUG - stack ['$40call_method.9']
2025-01-31 15:31:41,332 - DEBUG - dispatch pc=44, inst=LOAD_DEREF(arg=1, lineno=577)
2025-01-31 15:31:41,332 - DEBUG - stack []
2025-01-31 15:31:41,332 - DEBUG - dispatch pc=46, inst=LOAD_FAST(arg=2, lineno=577)
2025-01-31 15:31:41,332 - DEBUG - stack ['$44load_deref.10']
2025-01-31 15:31:41,332 - DEBUG - dispatch pc=48, inst=CALL_FUNCTION(arg=1, lineno=577)
2025-01-31 15:31:41,332 - DEBUG - stack ['$44load_deref.10', '$max_value46.11']
2025-01-31 15:31:41,332 - DEBUG - dispatch pc=50, inst=POP_JUMP_IF_FALSE(arg=29, lineno=577)
2025-01-31 15:31:41,332 - DEBUG - stack ['$48call_function.12']
2025-01-31 15:31:41,332 - DEBUG - end state. edges=[Edge(pc=52, stack=(), blockstack=(), npush=0), Edge(pc=56, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:41,332 - DEBUG - pending: deque([State(pc_initial=52 nstack_initial=0), State(pc_initial=56 nstack_initial=0)])
2025-01-31 15:31:41,332 - DEBUG - stack: []
2025-01-31 15:31:41,332 - DEBUG - state.pc_initial: State(pc_initial=52 nstack_initial=0)
2025-01-31 15:31:41,332 - DEBUG - dispatch pc=52, inst=LOAD_FAST(arg=2, lineno=578)
2025-01-31 15:31:41,332 - DEBUG - stack []
2025-01-31 15:31:41,332 - DEBUG - dispatch pc=54, inst=RETURN_VALUE(arg=None, lineno=578)
2025-01-31 15:31:41,332 - DEBUG - stack ['$max_value52.0']
2025-01-31 15:31:41,332 - DEBUG - end state. edges=[]
2025-01-31 15:31:41,332 - DEBUG - pending: deque([State(pc_initial=56 nstack_initial=0)])
2025-01-31 15:31:41,332 - DEBUG - stack: []
2025-01-31 15:31:41,332 - DEBUG - state.pc_initial: State(pc_initial=56 nstack_initial=0)
2025-01-31 15:31:41,332 - DEBUG - dispatch pc=56, inst=LOAD_FAST(arg=1, lineno=580)
2025-01-31 15:31:41,332 - DEBUG - stack []
2025-01-31 15:31:41,332 - DEBUG - dispatch pc=58, inst=GET_ITER(arg=None, lineno=580)
2025-01-31 15:31:41,332 - DEBUG - stack ['$it56.0']
2025-01-31 15:31:41,332 - DEBUG - end state. edges=[Edge(pc=60, stack=('$58get_iter.1',), blockstack=(), npush=0)]
2025-01-31 15:31:41,333 - DEBUG - pending: deque([State(pc_initial=60 nstack_initial=1)])
2025-01-31 15:31:41,333 - DEBUG - stack: ['$phi60.0']
2025-01-31 15:31:41,333 - DEBUG - state.pc_initial: State(pc_initial=60 nstack_initial=1)
2025-01-31 15:31:41,333 - DEBUG - dispatch pc=60, inst=FOR_ITER(arg=21, lineno=580)
2025-01-31 15:31:41,333 - DEBUG - stack ['$phi60.0']
2025-01-31 15:31:41,333 - DEBUG - end state. edges=[Edge(pc=104, stack=(), blockstack=(), npush=0), Edge(pc=62, stack=('$phi60.0', '$60for_iter.2'), blockstack=(), npush=0)]
2025-01-31 15:31:41,333 - DEBUG - pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=62 nstack_initial=2)])
2025-01-31 15:31:41,333 - DEBUG - stack: []
2025-01-31 15:31:41,333 - DEBUG - state.pc_initial: State(pc_initial=104 nstack_initial=0)
2025-01-31 15:31:41,333 - DEBUG - dispatch pc=104, inst=LOAD_FAST(arg=2, lineno=586)
2025-01-31 15:31:41,333 - DEBUG - stack []
2025-01-31 15:31:41,333 - DEBUG - dispatch pc=106, inst=RETURN_VALUE(arg=None, lineno=586)
2025-01-31 15:31:41,333 - DEBUG - stack ['$max_value104.0']
2025-01-31 15:31:41,333 - DEBUG - end state. edges=[]
2025-01-31 15:31:41,333 - DEBUG - pending: deque([State(pc_initial=62 nstack_initial=2)])
2025-01-31 15:31:41,333 - DEBUG - stack: ['$phi62.0', '$phi62.1']
2025-01-31 15:31:41,333 - DEBUG - state.pc_initial: State(pc_initial=62 nstack_initial=2)
2025-01-31 15:31:41,333 - DEBUG - dispatch pc=62, inst=STORE_FAST(arg=3, lineno=580)
2025-01-31 15:31:41,333 - DEBUG - stack ['$phi62.0', '$phi62.1']
2025-01-31 15:31:41,333 - DEBUG - dispatch pc=64, inst=LOAD_FAST(arg=3, lineno=581)
2025-01-31 15:31:41,333 - DEBUG - stack ['$phi62.0']
2025-01-31 15:31:41,333 - DEBUG - dispatch pc=66, inst=LOAD_METHOD(arg=6, lineno=581)
2025-01-31 15:31:41,333 - DEBUG - stack ['$phi62.0', '$view64.2']
2025-01-31 15:31:41,333 - DEBUG - dispatch pc=68, inst=CALL_METHOD(arg=0, lineno=581)
2025-01-31 15:31:41,333 - DEBUG - stack ['$phi62.0', '$66load_method.3']
2025-01-31 15:31:41,333 - DEBUG - dispatch pc=70, inst=STORE_FAST(arg=4, lineno=581)
2025-01-31 15:31:41,333 - DEBUG - stack ['$phi62.0', '$68call_method.4']
2025-01-31 15:31:41,333 - DEBUG - dispatch pc=72, inst=LOAD_DEREF(arg=1, lineno=582)
2025-01-31 15:31:41,334 - DEBUG - stack ['$phi62.0']
2025-01-31 15:31:41,334 - DEBUG - dispatch pc=74, inst=LOAD_FAST(arg=4, lineno=582)
2025-01-31 15:31:41,334 - DEBUG - stack ['$phi62.0', '$72load_deref.5']
2025-01-31 15:31:41,334 - DEBUG - dispatch pc=76, inst=CALL_FUNCTION(arg=1, lineno=582)
2025-01-31 15:31:41,334 - DEBUG - stack ['$phi62.0', '$72load_deref.5', '$v74.6']
2025-01-31 15:31:41,334 - DEBUG - dispatch pc=78, inst=POP_JUMP_IF_FALSE(arg=45, lineno=582)
2025-01-31 15:31:41,334 - DEBUG - stack ['$phi62.0', '$76call_function.7']
2025-01-31 15:31:41,334 - DEBUG - end state. edges=[Edge(pc=80, stack=('$phi62.0',), blockstack=(), npush=0), Edge(pc=88, stack=('$phi62.0',), blockstack=(), npush=0)]
2025-01-31 15:31:41,334 - DEBUG - pending: deque([State(pc_initial=80 nstack_initial=1), State(pc_initial=88 nstack_initial=1)])
2025-01-31 15:31:41,334 - DEBUG - stack: ['$phi80.0']
2025-01-31 15:31:41,334 - DEBUG - state.pc_initial: State(pc_initial=80 nstack_initial=1)
2025-01-31 15:31:41,334 - DEBUG - dispatch pc=80, inst=LOAD_FAST(arg=4, lineno=583)
2025-01-31 15:31:41,334 - DEBUG - stack ['$phi80.0']
2025-01-31 15:31:41,334 - DEBUG - dispatch pc=82, inst=ROT_TWO(arg=None, lineno=583)
2025-01-31 15:31:41,334 - DEBUG - stack ['$phi80.0', '$v80.1']
2025-01-31 15:31:41,334 - DEBUG - dispatch pc=84, inst=POP_TOP(arg=None, lineno=583)
2025-01-31 15:31:41,334 - DEBUG - stack ['$v80.1', '$phi80.0']
2025-01-31 15:31:41,334 - DEBUG - dispatch pc=86, inst=RETURN_VALUE(arg=None, lineno=583)
2025-01-31 15:31:41,334 - DEBUG - stack ['$v80.1']
2025-01-31 15:31:41,334 - DEBUG - end state. edges=[]
2025-01-31 15:31:41,334 - DEBUG - pending: deque([State(pc_initial=88 nstack_initial=1)])
2025-01-31 15:31:41,334 - DEBUG - stack: ['$phi88.0']
2025-01-31 15:31:41,334 - DEBUG - state.pc_initial: State(pc_initial=88 nstack_initial=1)
2025-01-31 15:31:41,334 - DEBUG - dispatch pc=88, inst=LOAD_DEREF(arg=0, lineno=584)
2025-01-31 15:31:41,334 - DEBUG - stack ['$phi88.0']
2025-01-31 15:31:41,334 - DEBUG - dispatch pc=90, inst=LOAD_FAST(arg=4, lineno=584)
2025-01-31 15:31:41,334 - DEBUG - stack ['$phi88.0', '$88load_deref.1']
2025-01-31 15:31:41,334 - DEBUG - dispatch pc=92, inst=LOAD_FAST(arg=2, lineno=584)
2025-01-31 15:31:41,334 - DEBUG - stack ['$phi88.0', '$88load_deref.1', '$v90.2']
2025-01-31 15:31:41,334 - DEBUG - dispatch pc=94, inst=CALL_FUNCTION(arg=2, lineno=584)
2025-01-31 15:31:41,335 - DEBUG - stack ['$phi88.0', '$88load_deref.1', '$v90.2', '$max_value92.3']
2025-01-31 15:31:41,335 - DEBUG - dispatch pc=96, inst=POP_JUMP_IF_FALSE(arg=52, lineno=584)
2025-01-31 15:31:41,335 - DEBUG - stack ['$phi88.0', '$94call_function.4']
2025-01-31 15:31:41,335 - DEBUG - end state. edges=[Edge(pc=98, stack=('$phi88.0',), blockstack=(), npush=0), Edge(pc=102, stack=('$phi88.0',), blockstack=(), npush=0)]
2025-01-31 15:31:41,335 - DEBUG - pending: deque([State(pc_initial=98 nstack_initial=1), State(pc_initial=102 nstack_initial=1)])
2025-01-31 15:31:41,335 - DEBUG - stack: ['$phi98.0']
2025-01-31 15:31:41,335 - DEBUG - state.pc_initial: State(pc_initial=98 nstack_initial=1)
2025-01-31 15:31:41,335 - DEBUG - dispatch pc=98, inst=LOAD_FAST(arg=4, lineno=585)
2025-01-31 15:31:41,335 - DEBUG - stack ['$phi98.0']
2025-01-31 15:31:41,335 - DEBUG - dispatch pc=100, inst=STORE_FAST(arg=2, lineno=585)
2025-01-31 15:31:41,335 - DEBUG - stack ['$phi98.0', '$v98.1']
2025-01-31 15:31:41,335 - DEBUG - end state. edges=[Edge(pc=102, stack=('$phi98.0',), blockstack=(), npush=0)]
2025-01-31 15:31:41,335 - DEBUG - pending: deque([State(pc_initial=102 nstack_initial=1), State(pc_initial=102 nstack_initial=1)])
2025-01-31 15:31:41,335 - DEBUG - stack: ['$phi102.0']
2025-01-31 15:31:41,335 - DEBUG - state.pc_initial: State(pc_initial=102 nstack_initial=1)
2025-01-31 15:31:41,335 - DEBUG - dispatch pc=102, inst=JUMP_ABSOLUTE(arg=31, lineno=585)
2025-01-31 15:31:41,335 - DEBUG - stack ['$phi102.0']
2025-01-31 15:31:41,335 - DEBUG - end state. edges=[Edge(pc=60, stack=('$phi102.0',), blockstack=(), npush=0)]
2025-01-31 15:31:41,335 - DEBUG - pending: deque([State(pc_initial=102 nstack_initial=1), State(pc_initial=60 nstack_initial=1)])
2025-01-31 15:31:41,335 - DEBUG - pending: deque([State(pc_initial=60 nstack_initial=1)])
2025-01-31 15:31:41,335 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:31:41,335 - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=12 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=0): set(),
             State(pc_initial=52 nstack_initial=0): set(),
             State(pc_initial=56 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=1): {'$phi60.0'},
             State(pc_initial=62 nstack_initial=2): {'$phi62.1'},
             State(pc_initial=80 nstack_initial=1): set(),
             State(pc_initial=88 nstack_initial=1): set(),
             State(pc_initial=98 nstack_initial=1): set(),
             State(pc_initial=102 nstack_initial=1): set(),
             State(pc_initial=104 nstack_initial=0): set()})
2025-01-31 15:31:41,336 - DEBUG - defmap: {'$phi60.0': State(pc_initial=56 nstack_initial=0),
 '$phi62.1': State(pc_initial=60 nstack_initial=1)}
2025-01-31 15:31:41,336 - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi102.0': {('$phi88.0', State(pc_initial=88 nstack_initial=1)),
                           ('$phi98.0', State(pc_initial=98 nstack_initial=1))},
             '$phi60.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0)),
                          ('$phi102.0',
                           State(pc_initial=102 nstack_initial=1))},
             '$phi62.0': {('$phi60.0', State(pc_initial=60 nstack_initial=1))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))},
             '$phi80.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi88.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi98.0': {('$phi88.0', State(pc_initial=88 nstack_initial=1))}})
2025-01-31 15:31:41,336 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi102.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi60.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0)),
                          ('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi62.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0)),
                          ('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))},
             '$phi80.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi88.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi98.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))}})
2025-01-31 15:31:41,336 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi102.0': {('$58get_iter.1',
                            State(pc_initial=56 nstack_initial=0))},
             '$phi60.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi62.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))},
             '$phi80.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi88.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi98.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))}})
2025-01-31 15:31:41,336 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi102.0': {('$58get_iter.1',
                            State(pc_initial=56 nstack_initial=0))},
             '$phi60.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi62.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))},
             '$phi80.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi88.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi98.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))}})
2025-01-31 15:31:41,337 - DEBUG - keep phismap: {'$phi60.0': {('$58get_iter.1', State(pc_initial=56 nstack_initial=0))},
 '$phi62.1': {('$60for_iter.2', State(pc_initial=60 nstack_initial=1))}}
2025-01-31 15:31:41,337 - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=56 nstack_initial=0): {'$phi60.0': '$58get_iter.1'},
             State(pc_initial=60 nstack_initial=1): {'$phi62.1': '$60for_iter.2'}})
2025-01-31 15:31:41,337 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:31:41,337 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'item': '$a2.0', 'res': '$4load_attr.1'}), (6, {'res': '$const6.2'}), (8, {'lhs': '$4load_attr.1', 'rhs': '$const6.2', 'res': '$8compare_op.3'}), (10, {'pred': '$8compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={12: (), 20: ()})
2025-01-31 15:31:41,337 - DEBUG - block_infos State(pc_initial=12 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$12load_global.0'}), (14, {'res': '$const14.1'}), (16, {'func': '$12load_global.0', 'args': ['$const14.1'], 'res': '$16call_function.2'}), (18, {'exc': '$16call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:41,337 - DEBUG - block_infos State(pc_initial=20 nstack_initial=0):
AdaptBlockInfo(insts=((20, {'res': '$20load_global.0'}), (22, {'item': '$20load_global.0', 'res': '$22load_method.1'}), (24, {'res': '$a24.2'}), (26, {'func': '$22load_method.1', 'args': ['$a24.2'], 'res': '$26call_method.3'}), (28, {'value': '$26call_method.3'}), (30, {'res': '$30load_global.4'}), (32, {'res': '$it32.5'}), (34, {'func': '$30load_global.4', 'args': ['$it32.5'], 'res': '$34call_function.6'}), (36, {'item': '$34call_function.6', 'res': '$36load_method.7'}), (38, {'res': '$const38.8'}), (40, {'func': '$36load_method.7', 'args': ['$const38.8'], 'res': '$40call_method.9'}), (42, {'value': '$40call_method.9'}), (44, {'res': '$44load_deref.10'}), (46, {'res': '$max_value46.11'}), (48, {'func': '$44load_deref.10', 'args': ['$max_value46.11'], 'res': '$48call_function.12'}), (50, {'pred': '$48call_function.12'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={52: (), 56: ()})
2025-01-31 15:31:41,337 - DEBUG - block_infos State(pc_initial=52 nstack_initial=0):
AdaptBlockInfo(insts=((52, {'res': '$max_value52.0'}), (54, {'retval': '$max_value52.0', 'castval': '$54return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:41,337 - DEBUG - block_infos State(pc_initial=56 nstack_initial=0):
AdaptBlockInfo(insts=((56, {'res': '$it56.0'}), (58, {'value': '$it56.0', 'res': '$58get_iter.1'})), outgoing_phis={'$phi60.0': '$58get_iter.1'}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: ('$58get_iter.1',)})
2025-01-31 15:31:41,337 - DEBUG - block_infos State(pc_initial=60 nstack_initial=1):
AdaptBlockInfo(insts=((60, {'iterator': '$phi60.0', 'pair': '$60for_iter.1', 'indval': '$60for_iter.2', 'pred': '$60for_iter.3'}),), outgoing_phis={'$phi62.1': '$60for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={104: (), 62: ('$phi60.0', '$60for_iter.2')})
2025-01-31 15:31:41,337 - DEBUG - block_infos State(pc_initial=62 nstack_initial=2):
AdaptBlockInfo(insts=((62, {'value': '$phi62.1'}), (64, {'res': '$view64.2'}), (66, {'item': '$view64.2', 'res': '$66load_method.3'}), (68, {'func': '$66load_method.3', 'args': [], 'res': '$68call_method.4'}), (70, {'value': '$68call_method.4'}), (72, {'res': '$72load_deref.5'}), (74, {'res': '$v74.6'}), (76, {'func': '$72load_deref.5', 'args': ['$v74.6'], 'res': '$76call_function.7'}), (78, {'pred': '$76call_function.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$phi62.0',), 88: ('$phi62.0',)})
2025-01-31 15:31:41,337 - DEBUG - block_infos State(pc_initial=80 nstack_initial=1):
AdaptBlockInfo(insts=((80, {'res': '$v80.1'}), (86, {'retval': '$v80.1', 'castval': '$86return_value.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:41,337 - DEBUG - block_infos State(pc_initial=88 nstack_initial=1):
AdaptBlockInfo(insts=((88, {'res': '$88load_deref.1'}), (90, {'res': '$v90.2'}), (92, {'res': '$max_value92.3'}), (94, {'func': '$88load_deref.1', 'args': ['$v90.2', '$max_value92.3'], 'res': '$94call_function.4'}), (96, {'pred': '$94call_function.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={98: ('$phi88.0',), 102: ('$phi88.0',)})
2025-01-31 15:31:41,338 - DEBUG - block_infos State(pc_initial=98 nstack_initial=1):
AdaptBlockInfo(insts=((98, {'res': '$v98.1'}), (100, {'value': '$v98.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={102: ('$phi98.0',)})
2025-01-31 15:31:41,338 - DEBUG - block_infos State(pc_initial=102 nstack_initial=1):
AdaptBlockInfo(insts=((102, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: ('$phi102.0',)})
2025-01-31 15:31:41,338 - DEBUG - block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$max_value104.0'}), (106, {'retval': '$max_value104.0', 'castval': '$106return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:41,339 - DEBUG - label 0:
    a = arg(0, name=a)                       ['a']
    $4load_attr.1 = getattr(value=a, attr=size) ['$4load_attr.1', 'a']
    $const6.2 = const(int, 0)                ['$const6.2']
    $8compare_op.3 = $4load_attr.1 == $const6.2 ['$4load_attr.1', '$8compare_op.3', '$const6.2']
    bool10 = global(bool: <class 'bool'>)    ['bool10']
    $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:571),), kws=(), vararg=None, varkwarg=None, target=None) ['$10pred', '$8compare_op.3', 'bool10']
    branch $10pred, 12, 20                   ['$10pred']
label 12:
    $12load_global.0 = global(ValueError: <class 'ValueError'>) ['$12load_global.0']
    $const14.1 = const(str, zero-size array to reduction operation maximum which has no identity) ['$const14.1']
    $16call_function.2 = call $12load_global.0($const14.1, func=$12load_global.0, args=[Var($const14.1, arraymath.py:572)], kws=(), vararg=None, varkwarg=None, target=None) ['$12load_global.0', '$16call_function.2', '$const14.1']
    raise $16call_function.2                 ['$16call_function.2']
label 20:
    $20load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>) ['$20load_global.0']
    $22load_method.1 = getattr(value=$20load_global.0, attr=nditer) ['$20load_global.0', '$22load_method.1']
    it = call $22load_method.1(a, func=$22load_method.1, args=[Var(a, arraymath.py:570)], kws=(), vararg=None, varkwarg=None, target=None) ['$22load_method.1', 'a', 'it']
    $30load_global.4 = global(next: <built-in function next>) ['$30load_global.4']
    $34call_function.6 = call $30load_global.4(it, func=$30load_global.4, args=[Var(it, arraymath.py:575)], kws=(), vararg=None, varkwarg=None, target=None) ['$30load_global.4', '$34call_function.6', 'it']
    $36load_method.7 = getattr(value=$34call_function.6, attr=take) ['$34call_function.6', '$36load_method.7']
    $const38.8 = const(int, 0)               ['$const38.8']
    max_value = call $36load_method.7($const38.8, func=$36load_method.7, args=[Var($const38.8, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None) ['$36load_method.7', '$const38.8', 'max_value']
    $44load_deref.10 = freevar(pre_return_func: <ufunc 'isnan'>) ['$44load_deref.10']
    $48call_function.12 = call $44load_deref.10(max_value, func=$44load_deref.10, args=[Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None) ['$44load_deref.10', '$48call_function.12', 'max_value']
    bool50 = global(bool: <class 'bool'>)    ['bool50']
    $50pred = call bool50($48call_function.12, func=bool50, args=(Var($48call_function.12, arraymath.py:577),), kws=(), vararg=None, varkwarg=None, target=None) ['$48call_function.12', '$50pred', 'bool50']
    branch $50pred, 52, 56                   ['$50pred']
label 52:
    $54return_value.1 = cast(value=max_value) ['$54return_value.1', 'max_value']
    return $54return_value.1                 ['$54return_value.1']
label 56:
    $58get_iter.1 = getiter(value=it)        ['$58get_iter.1', 'it']
    $phi60.0 = $58get_iter.1                 ['$58get_iter.1', '$phi60.0']
    jump 60                                  []
label 60:
    $60for_iter.1 = iternext(value=$phi60.0) ['$60for_iter.1', '$phi60.0']
    $60for_iter.2 = pair_first(value=$60for_iter.1) ['$60for_iter.1', '$60for_iter.2']
    $60for_iter.3 = pair_second(value=$60for_iter.1) ['$60for_iter.1', '$60for_iter.3']
    $phi62.1 = $60for_iter.2                 ['$60for_iter.2', '$phi62.1']
    branch $60for_iter.3, 62, 104            ['$60for_iter.3']
label 62:
    view = $phi62.1                          ['$phi62.1', 'view']
    $66load_method.3 = getattr(value=view, attr=item) ['$66load_method.3', 'view']
    v = call $66load_method.3(func=$66load_method.3, args=[], kws=(), vararg=None, varkwarg=None, target=None) ['$66load_method.3', 'v']
    $72load_deref.5 = freevar(pre_return_func: <ufunc 'isnan'>) ['$72load_deref.5']
    $76call_function.7 = call $72load_deref.5(v, func=$72load_deref.5, args=[Var(v, arraymath.py:581)], kws=(), vararg=None, varkwarg=None, target=None) ['$72load_deref.5', '$76call_function.7', 'v']
    bool78 = global(bool: <class 'bool'>)    ['bool78']
    $78pred = call bool78($76call_function.7, func=bool78, args=(Var($76call_function.7, arraymath.py:582),), kws=(), vararg=None, varkwarg=None, target=None) ['$76call_function.7', '$78pred', 'bool78']
    branch $78pred, 80, 88                   ['$78pred']
label 80:
    $86return_value.2 = cast(value=v)        ['$86return_value.2', 'v']
    return $86return_value.2                 ['$86return_value.2']
label 88:
    $88load_deref.1 = freevar(comparator: <function max_comparator at 0x7c89f0822440>) ['$88load_deref.1']
    $94call_function.4 = call $88load_deref.1(v, max_value, func=$88load_deref.1, args=[Var(v, arraymath.py:581), Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None) ['$88load_deref.1', '$94call_function.4', 'max_value', 'v']
    bool96 = global(bool: <class 'bool'>)    ['bool96']
    $96pred = call bool96($94call_function.4, func=bool96, args=(Var($94call_function.4, arraymath.py:584),), kws=(), vararg=None, varkwarg=None, target=None) ['$94call_function.4', '$96pred', 'bool96']
    branch $96pred, 98, 102                  ['$96pred']
label 98:
    max_value = v                            ['max_value', 'v']
    jump 102                                 []
label 102:
    jump 60                                  []
label 104:
    $106return_value.1 = cast(value=max_value) ['$106return_value.1', 'max_value']
    return $106return_value.1                ['$106return_value.1']

2025-01-31 15:31:41,346 - DEBUG - ==== SSA block analysis pass on 0
2025-01-31 15:31:41,346 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89ebad9b10>
2025-01-31 15:31:41,346 - DEBUG - on stmt: a = arg(0, name=a)
2025-01-31 15:31:41,346 - DEBUG - on stmt: $4load_attr.1 = getattr(value=a, attr=size)
2025-01-31 15:31:41,346 - DEBUG - on stmt: $const6.2 = const(int, 0)
2025-01-31 15:31:41,346 - DEBUG - on stmt: $8compare_op.3 = $4load_attr.1 == $const6.2
2025-01-31 15:31:41,346 - DEBUG - on stmt: bool10 = global(bool: <class 'bool'>)
2025-01-31 15:31:41,346 - DEBUG - on stmt: $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:571),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,346 - DEBUG - on stmt: branch $10pred, 12, 20
2025-01-31 15:31:41,347 - DEBUG - ==== SSA block analysis pass on 12
2025-01-31 15:31:41,347 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89ebad9b10>
2025-01-31 15:31:41,347 - DEBUG - on stmt: $12load_global.0 = global(ValueError: <class 'ValueError'>)
2025-01-31 15:31:41,347 - DEBUG - on stmt: $const14.1 = const(str, zero-size array to reduction operation maximum which has no identity)
2025-01-31 15:31:41,347 - DEBUG - on stmt: $16call_function.2 = call $12load_global.0($const14.1, func=$12load_global.0, args=[Var($const14.1, arraymath.py:572)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,347 - DEBUG - on stmt: <static> raise <class 'ValueError'>('zero-size array to reduction operation maximum which has no identity')
2025-01-31 15:31:41,347 - DEBUG - ==== SSA block analysis pass on 20
2025-01-31 15:31:41,347 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89ebad9b10>
2025-01-31 15:31:41,347 - DEBUG - on stmt: $20load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:41,347 - DEBUG - on stmt: $22load_method.1 = getattr(value=$20load_global.0, attr=nditer)
2025-01-31 15:31:41,347 - DEBUG - on stmt: it = call $22load_method.1(a, func=$22load_method.1, args=[Var(a, arraymath.py:570)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,347 - DEBUG - on stmt: $30load_global.4 = global(next: <built-in function next>)
2025-01-31 15:31:41,347 - DEBUG - on stmt: $34call_function.6 = call $30load_global.4(it, func=$30load_global.4, args=[Var(it, arraymath.py:575)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,347 - DEBUG - on stmt: $36load_method.7 = getattr(value=$34call_function.6, attr=take)
2025-01-31 15:31:41,347 - DEBUG - on stmt: $const38.8 = const(int, 0)
2025-01-31 15:31:41,347 - DEBUG - on stmt: max_value = call $36load_method.7($const38.8, func=$36load_method.7, args=[Var($const38.8, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,347 - DEBUG - on stmt: $44load_deref.10 = freevar(pre_return_func: <ufunc 'isnan'>)
2025-01-31 15:31:41,347 - DEBUG - on stmt: $48call_function.12 = call $44load_deref.10(max_value, func=$44load_deref.10, args=[Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,347 - DEBUG - on stmt: bool50 = global(bool: <class 'bool'>)
2025-01-31 15:31:41,347 - DEBUG - on stmt: $50pred = call bool50($48call_function.12, func=bool50, args=(Var($48call_function.12, arraymath.py:577),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,347 - DEBUG - on stmt: branch $50pred, 52, 56
2025-01-31 15:31:41,347 - DEBUG - ==== SSA block analysis pass on 52
2025-01-31 15:31:41,347 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89ebad9b10>
2025-01-31 15:31:41,347 - DEBUG - on stmt: $54return_value.1 = cast(value=max_value)
2025-01-31 15:31:41,348 - DEBUG - on stmt: return $54return_value.1
2025-01-31 15:31:41,348 - DEBUG - ==== SSA block analysis pass on 56
2025-01-31 15:31:41,348 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89ebad9b10>
2025-01-31 15:31:41,348 - DEBUG - on stmt: $58get_iter.1 = getiter(value=it)
2025-01-31 15:31:41,348 - DEBUG - on stmt: $phi60.0 = $58get_iter.1
2025-01-31 15:31:41,348 - DEBUG - on stmt: jump 60
2025-01-31 15:31:41,348 - DEBUG - ==== SSA block analysis pass on 60
2025-01-31 15:31:41,348 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89ebad9b10>
2025-01-31 15:31:41,348 - DEBUG - on stmt: $60for_iter.1 = iternext(value=$phi60.0)
2025-01-31 15:31:41,348 - DEBUG - on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
2025-01-31 15:31:41,348 - DEBUG - on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
2025-01-31 15:31:41,348 - DEBUG - on stmt: $phi62.1 = $60for_iter.2
2025-01-31 15:31:41,348 - DEBUG - on stmt: branch $60for_iter.3, 62, 104
2025-01-31 15:31:41,348 - DEBUG - ==== SSA block analysis pass on 62
2025-01-31 15:31:41,348 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89ebad9b10>
2025-01-31 15:31:41,348 - DEBUG - on stmt: view = $phi62.1
2025-01-31 15:31:41,348 - DEBUG - on stmt: $66load_method.3 = getattr(value=view, attr=item)
2025-01-31 15:31:41,348 - DEBUG - on stmt: v = call $66load_method.3(func=$66load_method.3, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,348 - DEBUG - on stmt: $72load_deref.5 = freevar(pre_return_func: <ufunc 'isnan'>)
2025-01-31 15:31:41,348 - DEBUG - on stmt: $76call_function.7 = call $72load_deref.5(v, func=$72load_deref.5, args=[Var(v, arraymath.py:581)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,348 - DEBUG - on stmt: bool78 = global(bool: <class 'bool'>)
2025-01-31 15:31:41,348 - DEBUG - on stmt: $78pred = call bool78($76call_function.7, func=bool78, args=(Var($76call_function.7, arraymath.py:582),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,348 - DEBUG - on stmt: branch $78pred, 80, 88
2025-01-31 15:31:41,348 - DEBUG - ==== SSA block analysis pass on 80
2025-01-31 15:31:41,348 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89ebad9b10>
2025-01-31 15:31:41,348 - DEBUG - on stmt: $86return_value.2 = cast(value=v)
2025-01-31 15:31:41,348 - DEBUG - on stmt: return $86return_value.2
2025-01-31 15:31:41,349 - DEBUG - ==== SSA block analysis pass on 88
2025-01-31 15:31:41,349 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89ebad9b10>
2025-01-31 15:31:41,349 - DEBUG - on stmt: $88load_deref.1 = freevar(comparator: <function max_comparator at 0x7c89f0822440>)
2025-01-31 15:31:41,349 - DEBUG - on stmt: $94call_function.4 = call $88load_deref.1(v, max_value, func=$88load_deref.1, args=[Var(v, arraymath.py:581), Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,349 - DEBUG - on stmt: bool96 = global(bool: <class 'bool'>)
2025-01-31 15:31:41,349 - DEBUG - on stmt: $96pred = call bool96($94call_function.4, func=bool96, args=(Var($94call_function.4, arraymath.py:584),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,349 - DEBUG - on stmt: branch $96pred, 98, 102
2025-01-31 15:31:41,349 - DEBUG - ==== SSA block analysis pass on 98
2025-01-31 15:31:41,349 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89ebad9b10>
2025-01-31 15:31:41,349 - DEBUG - on stmt: max_value = v
2025-01-31 15:31:41,349 - DEBUG - on stmt: jump 102
2025-01-31 15:31:41,349 - DEBUG - ==== SSA block analysis pass on 102
2025-01-31 15:31:41,349 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89ebad9b10>
2025-01-31 15:31:41,349 - DEBUG - on stmt: jump 60
2025-01-31 15:31:41,349 - DEBUG - ==== SSA block analysis pass on 104
2025-01-31 15:31:41,349 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89ebad9b10>
2025-01-31 15:31:41,349 - DEBUG - on stmt: $106return_value.1 = cast(value=max_value)
2025-01-31 15:31:41,349 - DEBUG - on stmt: return $106return_value.1
2025-01-31 15:31:41,350 - DEBUG - defs defaultdict(<class 'list'>,
            {'$106return_value.1': [(<numba.core.ir.Assign object at 0x7c89ebadbf10>,
                                     104)],
             '$10pred': [(<numba.core.ir.Assign object at 0x7c89ebd1e3b0>, 0)],
             '$12load_global.0': [(<numba.core.ir.Assign object at 0x7c89ebdf3a00>,
                                   12)],
             '$16call_function.2': [(<numba.core.ir.Assign object at 0x7c89f02bff40>,
                                     12)],
             '$20load_global.0': [(<numba.core.ir.Assign object at 0x7c89f02bfd90>,
                                   20)],
             '$22load_method.1': [(<numba.core.ir.Assign object at 0x7c89f02bc430>,
                                   20)],
             '$30load_global.4': [(<numba.core.ir.Assign object at 0x7c89f02bfb50>,
                                   20)],
             '$34call_function.6': [(<numba.core.ir.Assign object at 0x7c89f02bdcf0>,
                                     20)],
             '$36load_method.7': [(<numba.core.ir.Assign object at 0x7c89ebad9d80>,
                                   20)],
             '$44load_deref.10': [(<numba.core.ir.Assign object at 0x7c89ebad94e0>,
                                   20)],
             '$48call_function.12': [(<numba.core.ir.Assign object at 0x7c89ebad8280>,
                                      20)],
             '$4load_attr.1': [(<numba.core.ir.Assign object at 0x7c89ebd1cd30>,
                                0)],
             '$50pred': [(<numba.core.ir.Assign object at 0x7c89ebad8070>, 20)],
             '$54return_value.1': [(<numba.core.ir.Assign object at 0x7c89ebad9570>,
                                    52)],
             '$58get_iter.1': [(<numba.core.ir.Assign object at 0x7c89ebad8dc0>,
                                56)],
             '$60for_iter.1': [(<numba.core.ir.Assign object at 0x7c89ebad9450>,
                                60)],
             '$60for_iter.2': [(<numba.core.ir.Assign object at 0x7c89ebadb880>,
                                60)],
             '$60for_iter.3': [(<numba.core.ir.Assign object at 0x7c89ebad8610>,
                                60)],
             '$66load_method.3': [(<numba.core.ir.Assign object at 0x7c89ebd1c4f0>,
                                   62)],
             '$72load_deref.5': [(<numba.core.ir.Assign object at 0x7c89ebd1dba0>,
                                  62)],
             '$76call_function.7': [(<numba.core.ir.Assign object at 0x7c89ebd1f7c0>,
                                     62)],
             '$78pred': [(<numba.core.ir.Assign object at 0x7c89ebadb340>, 62)],
             '$86return_value.2': [(<numba.core.ir.Assign object at 0x7c89ebada860>,
                                    80)],
             '$88load_deref.1': [(<numba.core.ir.Assign object at 0x7c89ebad8190>,
                                  88)],
             '$8compare_op.3': [(<numba.core.ir.Assign object at 0x7c89ebd1c580>,
                                 0)],
             '$94call_function.4': [(<numba.core.ir.Assign object at 0x7c89ebadb7c0>,
                                     88)],
             '$96pred': [(<numba.core.ir.Assign object at 0x7c89ebada230>, 88)],
             '$const14.1': [(<numba.core.ir.Assign object at 0x7c89ebdf32e0>,
                             12)],
             '$const38.8': [(<numba.core.ir.Assign object at 0x7c89ebad82b0>,
                             20)],
             '$const6.2': [(<numba.core.ir.Assign object at 0x7c89ebd1e4d0>,
                            0)],
             '$phi60.0': [(<numba.core.ir.Assign object at 0x7c89ebadbc70>,
                           56)],
             '$phi62.1': [(<numba.core.ir.Assign object at 0x7c89ebadba30>,
                           60)],
             'a': [(<numba.core.ir.Assign object at 0x7c89ebd1ee00>, 0)],
             'bool10': [(<numba.core.ir.Assign object at 0x7c89ebd1eef0>, 0)],
             'bool50': [(<numba.core.ir.Assign object at 0x7c89ebad8820>, 20)],
             'bool78': [(<numba.core.ir.Assign object at 0x7c89f02229e0>, 62)],
             'bool96': [(<numba.core.ir.Assign object at 0x7c89ebad9a50>, 88)],
             'it': [(<numba.core.ir.Assign object at 0x7c89f02be560>, 20)],
             'max_value': [(<numba.core.ir.Assign object at 0x7c89ebad8910>,
                            20),
                           (<numba.core.ir.Assign object at 0x7c89ebada6e0>,
                            98)],
             'v': [(<numba.core.ir.Assign object at 0x7c89ebd1fbb0>, 62)],
             'view': [(<numba.core.ir.Assign object at 0x7c89ebadb970>, 62)]})
2025-01-31 15:31:41,350 - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x7c89ebca3b80>
2025-01-31 15:31:41,350 - DEBUG - Fix SSA violator on var max_value
2025-01-31 15:31:41,350 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-31 15:31:41,350 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89f00e2080>
2025-01-31 15:31:41,350 - DEBUG - on stmt: a = arg(0, name=a)
2025-01-31 15:31:41,350 - DEBUG - on stmt: $4load_attr.1 = getattr(value=a, attr=size)
2025-01-31 15:31:41,350 - DEBUG - on stmt: $const6.2 = const(int, 0)
2025-01-31 15:31:41,350 - DEBUG - on stmt: $8compare_op.3 = $4load_attr.1 == $const6.2
2025-01-31 15:31:41,350 - DEBUG - on stmt: bool10 = global(bool: <class 'bool'>)
2025-01-31 15:31:41,350 - DEBUG - on stmt: $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:571),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,350 - DEBUG - on stmt: branch $10pred, 12, 20
2025-01-31 15:31:41,350 - DEBUG - ==== SSA block rewrite pass on 12
2025-01-31 15:31:41,350 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89f00e2080>
2025-01-31 15:31:41,350 - DEBUG - on stmt: $12load_global.0 = global(ValueError: <class 'ValueError'>)
2025-01-31 15:31:41,350 - DEBUG - on stmt: $const14.1 = const(str, zero-size array to reduction operation maximum which has no identity)
2025-01-31 15:31:41,350 - DEBUG - on stmt: $16call_function.2 = call $12load_global.0($const14.1, func=$12load_global.0, args=[Var($const14.1, arraymath.py:572)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,350 - DEBUG - on stmt: <static> raise <class 'ValueError'>('zero-size array to reduction operation maximum which has no identity')
2025-01-31 15:31:41,351 - DEBUG - ==== SSA block rewrite pass on 20
2025-01-31 15:31:41,351 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89f00e2080>
2025-01-31 15:31:41,351 - DEBUG - on stmt: $20load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:41,351 - DEBUG - on stmt: $22load_method.1 = getattr(value=$20load_global.0, attr=nditer)
2025-01-31 15:31:41,351 - DEBUG - on stmt: it = call $22load_method.1(a, func=$22load_method.1, args=[Var(a, arraymath.py:570)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,351 - DEBUG - on stmt: $30load_global.4 = global(next: <built-in function next>)
2025-01-31 15:31:41,351 - DEBUG - on stmt: $34call_function.6 = call $30load_global.4(it, func=$30load_global.4, args=[Var(it, arraymath.py:575)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,351 - DEBUG - on stmt: $36load_method.7 = getattr(value=$34call_function.6, attr=take)
2025-01-31 15:31:41,351 - DEBUG - on stmt: $const38.8 = const(int, 0)
2025-01-31 15:31:41,351 - DEBUG - on stmt: max_value = call $36load_method.7($const38.8, func=$36load_method.7, args=[Var($const38.8, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,351 - DEBUG - first assign: max_value
2025-01-31 15:31:41,351 - DEBUG - replaced with: max_value = call $36load_method.7($const38.8, func=$36load_method.7, args=[Var($const38.8, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,351 - DEBUG - on stmt: $44load_deref.10 = freevar(pre_return_func: <ufunc 'isnan'>)
2025-01-31 15:31:41,351 - DEBUG - on stmt: $48call_function.12 = call $44load_deref.10(max_value, func=$44load_deref.10, args=[Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,351 - DEBUG - on stmt: bool50 = global(bool: <class 'bool'>)
2025-01-31 15:31:41,351 - DEBUG - on stmt: $50pred = call bool50($48call_function.12, func=bool50, args=(Var($48call_function.12, arraymath.py:577),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,351 - DEBUG - on stmt: branch $50pred, 52, 56
2025-01-31 15:31:41,351 - DEBUG - ==== SSA block rewrite pass on 52
2025-01-31 15:31:41,351 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89f00e2080>
2025-01-31 15:31:41,351 - DEBUG - on stmt: $54return_value.1 = cast(value=max_value)
2025-01-31 15:31:41,351 - DEBUG - on stmt: return $54return_value.1
2025-01-31 15:31:41,351 - DEBUG - ==== SSA block rewrite pass on 56
2025-01-31 15:31:41,351 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89f00e2080>
2025-01-31 15:31:41,351 - DEBUG - on stmt: $58get_iter.1 = getiter(value=it)
2025-01-31 15:31:41,351 - DEBUG - on stmt: $phi60.0 = $58get_iter.1
2025-01-31 15:31:41,351 - DEBUG - on stmt: jump 60
2025-01-31 15:31:41,351 - DEBUG - ==== SSA block rewrite pass on 60
2025-01-31 15:31:41,352 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89f00e2080>
2025-01-31 15:31:41,352 - DEBUG - on stmt: $60for_iter.1 = iternext(value=$phi60.0)
2025-01-31 15:31:41,352 - DEBUG - on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
2025-01-31 15:31:41,352 - DEBUG - on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
2025-01-31 15:31:41,352 - DEBUG - on stmt: $phi62.1 = $60for_iter.2
2025-01-31 15:31:41,352 - DEBUG - on stmt: branch $60for_iter.3, 62, 104
2025-01-31 15:31:41,352 - DEBUG - ==== SSA block rewrite pass on 62
2025-01-31 15:31:41,352 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89f00e2080>
2025-01-31 15:31:41,352 - DEBUG - on stmt: view = $phi62.1
2025-01-31 15:31:41,352 - DEBUG - on stmt: $66load_method.3 = getattr(value=view, attr=item)
2025-01-31 15:31:41,352 - DEBUG - on stmt: v = call $66load_method.3(func=$66load_method.3, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,352 - DEBUG - on stmt: $72load_deref.5 = freevar(pre_return_func: <ufunc 'isnan'>)
2025-01-31 15:31:41,352 - DEBUG - on stmt: $76call_function.7 = call $72load_deref.5(v, func=$72load_deref.5, args=[Var(v, arraymath.py:581)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,352 - DEBUG - on stmt: bool78 = global(bool: <class 'bool'>)
2025-01-31 15:31:41,352 - DEBUG - on stmt: $78pred = call bool78($76call_function.7, func=bool78, args=(Var($76call_function.7, arraymath.py:582),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,352 - DEBUG - on stmt: branch $78pred, 80, 88
2025-01-31 15:31:41,352 - DEBUG - ==== SSA block rewrite pass on 80
2025-01-31 15:31:41,352 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89f00e2080>
2025-01-31 15:31:41,352 - DEBUG - on stmt: $86return_value.2 = cast(value=v)
2025-01-31 15:31:41,352 - DEBUG - on stmt: return $86return_value.2
2025-01-31 15:31:41,352 - DEBUG - ==== SSA block rewrite pass on 88
2025-01-31 15:31:41,352 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89f00e2080>
2025-01-31 15:31:41,352 - DEBUG - on stmt: $88load_deref.1 = freevar(comparator: <function max_comparator at 0x7c89f0822440>)
2025-01-31 15:31:41,352 - DEBUG - on stmt: $94call_function.4 = call $88load_deref.1(v, max_value, func=$88load_deref.1, args=[Var(v, arraymath.py:581), Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,352 - DEBUG - on stmt: bool96 = global(bool: <class 'bool'>)
2025-01-31 15:31:41,352 - DEBUG - on stmt: $96pred = call bool96($94call_function.4, func=bool96, args=(Var($94call_function.4, arraymath.py:584),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,352 - DEBUG - on stmt: branch $96pred, 98, 102
2025-01-31 15:31:41,352 - DEBUG - ==== SSA block rewrite pass on 98
2025-01-31 15:31:41,352 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89f00e2080>
2025-01-31 15:31:41,353 - DEBUG - on stmt: max_value = v
2025-01-31 15:31:41,353 - DEBUG - replaced with: max_value.1 = v
2025-01-31 15:31:41,353 - DEBUG - on stmt: jump 102
2025-01-31 15:31:41,353 - DEBUG - ==== SSA block rewrite pass on 102
2025-01-31 15:31:41,353 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89f00e2080>
2025-01-31 15:31:41,353 - DEBUG - on stmt: jump 60
2025-01-31 15:31:41,353 - DEBUG - ==== SSA block rewrite pass on 104
2025-01-31 15:31:41,353 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89f00e2080>
2025-01-31 15:31:41,353 - DEBUG - on stmt: $106return_value.1 = cast(value=max_value)
2025-01-31 15:31:41,353 - DEBUG - on stmt: return $106return_value.1
2025-01-31 15:31:41,353 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {20: [<numba.core.ir.Assign object at 0x7c89ebd1f7f0>],
             98: [<numba.core.ir.Assign object at 0x7c89ebd1c3a0>]})
2025-01-31 15:31:41,353 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-31 15:31:41,353 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89f00e2080>
2025-01-31 15:31:41,353 - DEBUG - on stmt: a = arg(0, name=a)
2025-01-31 15:31:41,353 - DEBUG - on stmt: $4load_attr.1 = getattr(value=a, attr=size)
2025-01-31 15:31:41,353 - DEBUG - on stmt: $const6.2 = const(int, 0)
2025-01-31 15:31:41,353 - DEBUG - on stmt: $8compare_op.3 = $4load_attr.1 == $const6.2
2025-01-31 15:31:41,353 - DEBUG - on stmt: bool10 = global(bool: <class 'bool'>)
2025-01-31 15:31:41,353 - DEBUG - on stmt: $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:571),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,353 - DEBUG - on stmt: branch $10pred, 12, 20
2025-01-31 15:31:41,353 - DEBUG - ==== SSA block rewrite pass on 12
2025-01-31 15:31:41,353 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89f00e2080>
2025-01-31 15:31:41,353 - DEBUG - on stmt: $12load_global.0 = global(ValueError: <class 'ValueError'>)
2025-01-31 15:31:41,353 - DEBUG - on stmt: $const14.1 = const(str, zero-size array to reduction operation maximum which has no identity)
2025-01-31 15:31:41,353 - DEBUG - on stmt: $16call_function.2 = call $12load_global.0($const14.1, func=$12load_global.0, args=[Var($const14.1, arraymath.py:572)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,353 - DEBUG - on stmt: <static> raise <class 'ValueError'>('zero-size array to reduction operation maximum which has no identity')
2025-01-31 15:31:41,353 - DEBUG - ==== SSA block rewrite pass on 20
2025-01-31 15:31:41,354 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89f00e2080>
2025-01-31 15:31:41,354 - DEBUG - on stmt: $20load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:41,354 - DEBUG - on stmt: $22load_method.1 = getattr(value=$20load_global.0, attr=nditer)
2025-01-31 15:31:41,354 - DEBUG - on stmt: it = call $22load_method.1(a, func=$22load_method.1, args=[Var(a, arraymath.py:570)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,354 - DEBUG - on stmt: $30load_global.4 = global(next: <built-in function next>)
2025-01-31 15:31:41,354 - DEBUG - on stmt: $34call_function.6 = call $30load_global.4(it, func=$30load_global.4, args=[Var(it, arraymath.py:575)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,354 - DEBUG - on stmt: $36load_method.7 = getattr(value=$34call_function.6, attr=take)
2025-01-31 15:31:41,354 - DEBUG - on stmt: $const38.8 = const(int, 0)
2025-01-31 15:31:41,354 - DEBUG - on stmt: max_value = call $36load_method.7($const38.8, func=$36load_method.7, args=[Var($const38.8, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,354 - DEBUG - on stmt: $44load_deref.10 = freevar(pre_return_func: <ufunc 'isnan'>)
2025-01-31 15:31:41,354 - DEBUG - on stmt: $48call_function.12 = call $44load_deref.10(max_value, func=$44load_deref.10, args=[Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,354 - DEBUG - find_def var='max_value' stmt=$48call_function.12 = call $44load_deref.10(max_value, func=$44load_deref.10, args=[Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,354 - DEBUG - on stmt: bool50 = global(bool: <class 'bool'>)
2025-01-31 15:31:41,354 - DEBUG - on stmt: $50pred = call bool50($48call_function.12, func=bool50, args=(Var($48call_function.12, arraymath.py:577),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,354 - DEBUG - on stmt: branch $50pred, 52, 56
2025-01-31 15:31:41,354 - DEBUG - ==== SSA block rewrite pass on 52
2025-01-31 15:31:41,354 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89f00e2080>
2025-01-31 15:31:41,354 - DEBUG - on stmt: $54return_value.1 = cast(value=max_value)
2025-01-31 15:31:41,354 - DEBUG - find_def var='max_value' stmt=$54return_value.1 = cast(value=max_value)
2025-01-31 15:31:41,354 - DEBUG - find_def_from_top label 52
2025-01-31 15:31:41,354 - DEBUG - idom 20 from label 52
2025-01-31 15:31:41,354 - DEBUG - find_def_from_bottom label 20
2025-01-31 15:31:41,354 - DEBUG - on stmt: return $54return_value.1
2025-01-31 15:31:41,354 - DEBUG - ==== SSA block rewrite pass on 56
2025-01-31 15:31:41,354 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89f00e2080>
2025-01-31 15:31:41,355 - DEBUG - on stmt: $58get_iter.1 = getiter(value=it)
2025-01-31 15:31:41,355 - DEBUG - on stmt: $phi60.0 = $58get_iter.1
2025-01-31 15:31:41,355 - DEBUG - on stmt: jump 60
2025-01-31 15:31:41,355 - DEBUG - ==== SSA block rewrite pass on 60
2025-01-31 15:31:41,355 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89f00e2080>
2025-01-31 15:31:41,355 - DEBUG - on stmt: $60for_iter.1 = iternext(value=$phi60.0)
2025-01-31 15:31:41,355 - DEBUG - on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
2025-01-31 15:31:41,355 - DEBUG - on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
2025-01-31 15:31:41,355 - DEBUG - on stmt: $phi62.1 = $60for_iter.2
2025-01-31 15:31:41,355 - DEBUG - on stmt: branch $60for_iter.3, 62, 104
2025-01-31 15:31:41,355 - DEBUG - ==== SSA block rewrite pass on 62
2025-01-31 15:31:41,355 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89f00e2080>
2025-01-31 15:31:41,355 - DEBUG - on stmt: view = $phi62.1
2025-01-31 15:31:41,355 - DEBUG - on stmt: $66load_method.3 = getattr(value=view, attr=item)
2025-01-31 15:31:41,355 - DEBUG - on stmt: v = call $66load_method.3(func=$66load_method.3, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,355 - DEBUG - on stmt: $72load_deref.5 = freevar(pre_return_func: <ufunc 'isnan'>)
2025-01-31 15:31:41,355 - DEBUG - on stmt: $76call_function.7 = call $72load_deref.5(v, func=$72load_deref.5, args=[Var(v, arraymath.py:581)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,355 - DEBUG - on stmt: bool78 = global(bool: <class 'bool'>)
2025-01-31 15:31:41,355 - DEBUG - on stmt: $78pred = call bool78($76call_function.7, func=bool78, args=(Var($76call_function.7, arraymath.py:582),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,355 - DEBUG - on stmt: branch $78pred, 80, 88
2025-01-31 15:31:41,355 - DEBUG - ==== SSA block rewrite pass on 80
2025-01-31 15:31:41,355 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89f00e2080>
2025-01-31 15:31:41,355 - DEBUG - on stmt: $86return_value.2 = cast(value=v)
2025-01-31 15:31:41,355 - DEBUG - on stmt: return $86return_value.2
2025-01-31 15:31:41,355 - DEBUG - ==== SSA block rewrite pass on 88
2025-01-31 15:31:41,355 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89f00e2080>
2025-01-31 15:31:41,355 - DEBUG - on stmt: $88load_deref.1 = freevar(comparator: <function max_comparator at 0x7c89f0822440>)
2025-01-31 15:31:41,356 - DEBUG - on stmt: $94call_function.4 = call $88load_deref.1(v, max_value, func=$88load_deref.1, args=[Var(v, arraymath.py:581), Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,356 - DEBUG - find_def var='max_value' stmt=$94call_function.4 = call $88load_deref.1(v, max_value, func=$88load_deref.1, args=[Var(v, arraymath.py:581), Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,356 - DEBUG - find_def_from_top label 88
2025-01-31 15:31:41,356 - DEBUG - idom 62 from label 88
2025-01-31 15:31:41,356 - DEBUG - find_def_from_bottom label 62
2025-01-31 15:31:41,356 - DEBUG - find_def_from_top label 62
2025-01-31 15:31:41,356 - DEBUG - idom 60 from label 62
2025-01-31 15:31:41,356 - DEBUG - find_def_from_bottom label 60
2025-01-31 15:31:41,356 - DEBUG - find_def_from_top label 60
2025-01-31 15:31:41,356 - DEBUG - insert phi node max_value.2 = phi(incoming_values=[], incoming_blocks=[]) at 60
2025-01-31 15:31:41,356 - DEBUG - find_def_from_bottom label 56
2025-01-31 15:31:41,356 - DEBUG - find_def_from_top label 56
2025-01-31 15:31:41,356 - DEBUG - idom 20 from label 56
2025-01-31 15:31:41,356 - DEBUG - find_def_from_bottom label 20
2025-01-31 15:31:41,356 - DEBUG - incoming_def max_value = call $36load_method.7($const38.8, func=$36load_method.7, args=[Var($const38.8, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,356 - DEBUG - find_def_from_bottom label 102
2025-01-31 15:31:41,356 - DEBUG - find_def_from_top label 102
2025-01-31 15:31:41,356 - DEBUG - insert phi node max_value.3 = phi(incoming_values=[], incoming_blocks=[]) at 102
2025-01-31 15:31:41,356 - DEBUG - find_def_from_bottom label 88
2025-01-31 15:31:41,356 - DEBUG - find_def_from_top label 88
2025-01-31 15:31:41,356 - DEBUG - idom 62 from label 88
2025-01-31 15:31:41,356 - DEBUG - find_def_from_bottom label 62
2025-01-31 15:31:41,356 - DEBUG - find_def_from_top label 62
2025-01-31 15:31:41,356 - DEBUG - idom 60 from label 62
2025-01-31 15:31:41,356 - DEBUG - find_def_from_bottom label 60
2025-01-31 15:31:41,356 - DEBUG - incoming_def max_value.2 = phi(incoming_values=[Var(max_value, arraymath.py:576)], incoming_blocks=[56])
2025-01-31 15:31:41,356 - DEBUG - find_def_from_bottom label 98
2025-01-31 15:31:41,356 - DEBUG - incoming_def max_value.1 = v
2025-01-31 15:31:41,356 - DEBUG - incoming_def max_value.3 = phi(incoming_values=[Var(max_value.2, arraymath.py:584), Var(max_value.1, arraymath.py:585)], incoming_blocks=[88, 98])
2025-01-31 15:31:41,357 - DEBUG - replaced with: $94call_function.4 = call $88load_deref.1(v, max_value.2, func=$88load_deref.1, args=[Var(v, arraymath.py:581), Var(max_value.2, arraymath.py:584)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,357 - DEBUG - on stmt: bool96 = global(bool: <class 'bool'>)
2025-01-31 15:31:41,357 - DEBUG - on stmt: $96pred = call bool96($94call_function.4, func=bool96, args=(Var($94call_function.4, arraymath.py:584),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,357 - DEBUG - on stmt: branch $96pred, 98, 102
2025-01-31 15:31:41,357 - DEBUG - ==== SSA block rewrite pass on 98
2025-01-31 15:31:41,357 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89f00e2080>
2025-01-31 15:31:41,357 - DEBUG - on stmt: max_value.1 = v
2025-01-31 15:31:41,357 - DEBUG - on stmt: jump 102
2025-01-31 15:31:41,357 - DEBUG - ==== SSA block rewrite pass on 102
2025-01-31 15:31:41,357 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89f00e2080>
2025-01-31 15:31:41,357 - DEBUG - on stmt: jump 60
2025-01-31 15:31:41,357 - DEBUG - ==== SSA block rewrite pass on 104
2025-01-31 15:31:41,357 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89f00e2080>
2025-01-31 15:31:41,357 - DEBUG - on stmt: $106return_value.1 = cast(value=max_value)
2025-01-31 15:31:41,357 - DEBUG - find_def var='max_value' stmt=$106return_value.1 = cast(value=max_value)
2025-01-31 15:31:41,357 - DEBUG - find_def_from_top label 104
2025-01-31 15:31:41,357 - DEBUG - idom 60 from label 104
2025-01-31 15:31:41,357 - DEBUG - find_def_from_bottom label 60
2025-01-31 15:31:41,357 - DEBUG - replaced with: $106return_value.1 = cast(value=max_value.2)
2025-01-31 15:31:41,357 - DEBUG - on stmt: return $106return_value.1
2025-01-31 15:31:41,362 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=4691)
           2	LOAD_FAST(arg=1, lineno=4692)
           4	LOAD_FAST(arg=0, lineno=4692)
           6	LOAD_ATTR(arg=0, lineno=4692)
           8	LOAD_CONST(arg=1, lineno=4692)
          10	BINARY_SUBTRACT(arg=None, lineno=4692)
          12	COMPARE_OP(arg=4, lineno=4692)
          14	POP_JUMP_IF_TRUE(arg=15, lineno=4692)
          16	LOAD_FAST(arg=1, lineno=4692)
          18	LOAD_FAST(arg=0, lineno=4692)
          20	LOAD_ATTR(arg=0, lineno=4692)
          22	UNARY_NEGATIVE(arg=None, lineno=4692)
          24	COMPARE_OP(arg=0, lineno=4692)
          26	POP_JUMP_IF_FALSE(arg=19, lineno=4692)
>         28	LOAD_GLOBAL(arg=1, lineno=4693)
          30	LOAD_CONST(arg=2, lineno=4693)
          32	CALL_FUNCTION(arg=1, lineno=4693)
          34	RAISE_VARARGS(arg=1, lineno=4693)
>         36	LOAD_FAST(arg=0, lineno=4694)
          38	LOAD_METHOD(arg=2, lineno=4694)
          40	CALL_METHOD(arg=0, lineno=4694)
          42	LOAD_FAST(arg=1, lineno=4694)
          44	BINARY_SUBSCR(arg=None, lineno=4694)
          46	RETURN_VALUE(arg=None, lineno=4694)
2025-01-31 15:31:41,362 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:31:41,362 - DEBUG - stack: []
2025-01-31 15:31:41,362 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:31:41,362 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=4691)
2025-01-31 15:31:41,362 - DEBUG - stack []
2025-01-31 15:31:41,362 - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=4692)
2025-01-31 15:31:41,362 - DEBUG - stack []
2025-01-31 15:31:41,362 - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=4692)
2025-01-31 15:31:41,362 - DEBUG - stack ['$indices2.0']
2025-01-31 15:31:41,362 - DEBUG - dispatch pc=6, inst=LOAD_ATTR(arg=0, lineno=4692)
2025-01-31 15:31:41,362 - DEBUG - stack ['$indices2.0', '$a4.1']
2025-01-31 15:31:41,362 - DEBUG - dispatch pc=8, inst=LOAD_CONST(arg=1, lineno=4692)
2025-01-31 15:31:41,362 - DEBUG - stack ['$indices2.0', '$6load_attr.2']
2025-01-31 15:31:41,362 - DEBUG - dispatch pc=10, inst=BINARY_SUBTRACT(arg=None, lineno=4692)
2025-01-31 15:31:41,362 - DEBUG - stack ['$indices2.0', '$6load_attr.2', '$const8.3']
2025-01-31 15:31:41,362 - DEBUG - dispatch pc=12, inst=COMPARE_OP(arg=4, lineno=4692)
2025-01-31 15:31:41,362 - DEBUG - stack ['$indices2.0', '$10binary_subtract.4']
2025-01-31 15:31:41,362 - DEBUG - dispatch pc=14, inst=POP_JUMP_IF_TRUE(arg=15, lineno=4692)
2025-01-31 15:31:41,362 - DEBUG - stack ['$12compare_op.5']
2025-01-31 15:31:41,362 - DEBUG - end state. edges=[Edge(pc=16, stack=(), blockstack=(), npush=0), Edge(pc=28, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:41,362 - DEBUG - pending: deque([State(pc_initial=16 nstack_initial=0), State(pc_initial=28 nstack_initial=0)])
2025-01-31 15:31:41,362 - DEBUG - stack: []
2025-01-31 15:31:41,362 - DEBUG - state.pc_initial: State(pc_initial=16 nstack_initial=0)
2025-01-31 15:31:41,362 - DEBUG - dispatch pc=16, inst=LOAD_FAST(arg=1, lineno=4692)
2025-01-31 15:31:41,362 - DEBUG - stack []
2025-01-31 15:31:41,363 - DEBUG - dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=4692)
2025-01-31 15:31:41,363 - DEBUG - stack ['$indices16.0']
2025-01-31 15:31:41,363 - DEBUG - dispatch pc=20, inst=LOAD_ATTR(arg=0, lineno=4692)
2025-01-31 15:31:41,363 - DEBUG - stack ['$indices16.0', '$a18.1']
2025-01-31 15:31:41,363 - DEBUG - dispatch pc=22, inst=UNARY_NEGATIVE(arg=None, lineno=4692)
2025-01-31 15:31:41,363 - DEBUG - stack ['$indices16.0', '$20load_attr.2']
2025-01-31 15:31:41,363 - DEBUG - dispatch pc=24, inst=COMPARE_OP(arg=0, lineno=4692)
2025-01-31 15:31:41,363 - DEBUG - stack ['$indices16.0', '$22unary_negative.3']
2025-01-31 15:31:41,363 - DEBUG - dispatch pc=26, inst=POP_JUMP_IF_FALSE(arg=19, lineno=4692)
2025-01-31 15:31:41,363 - DEBUG - stack ['$24compare_op.4']
2025-01-31 15:31:41,363 - DEBUG - end state. edges=[Edge(pc=28, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:41,363 - DEBUG - pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2025-01-31 15:31:41,363 - DEBUG - stack: []
2025-01-31 15:31:41,363 - DEBUG - state.pc_initial: State(pc_initial=28 nstack_initial=0)
2025-01-31 15:31:41,363 - DEBUG - dispatch pc=28, inst=LOAD_GLOBAL(arg=1, lineno=4693)
2025-01-31 15:31:41,363 - DEBUG - stack []
2025-01-31 15:31:41,363 - DEBUG - dispatch pc=30, inst=LOAD_CONST(arg=2, lineno=4693)
2025-01-31 15:31:41,363 - DEBUG - stack ['$28load_global.0']
2025-01-31 15:31:41,363 - DEBUG - dispatch pc=32, inst=CALL_FUNCTION(arg=1, lineno=4693)
2025-01-31 15:31:41,363 - DEBUG - stack ['$28load_global.0', '$const30.1']
2025-01-31 15:31:41,363 - DEBUG - dispatch pc=34, inst=RAISE_VARARGS(arg=1, lineno=4693)
2025-01-31 15:31:41,363 - DEBUG - stack ['$32call_function.2']
2025-01-31 15:31:41,363 - DEBUG - end state. edges=[]
2025-01-31 15:31:41,363 - DEBUG - pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2025-01-31 15:31:41,363 - DEBUG - pending: deque([State(pc_initial=36 nstack_initial=0)])
2025-01-31 15:31:41,363 - DEBUG - stack: []
2025-01-31 15:31:41,363 - DEBUG - state.pc_initial: State(pc_initial=36 nstack_initial=0)
2025-01-31 15:31:41,363 - DEBUG - dispatch pc=36, inst=LOAD_FAST(arg=0, lineno=4694)
2025-01-31 15:31:41,363 - DEBUG - stack []
2025-01-31 15:31:41,364 - DEBUG - dispatch pc=38, inst=LOAD_METHOD(arg=2, lineno=4694)
2025-01-31 15:31:41,364 - DEBUG - stack ['$a36.0']
2025-01-31 15:31:41,364 - DEBUG - dispatch pc=40, inst=CALL_METHOD(arg=0, lineno=4694)
2025-01-31 15:31:41,364 - DEBUG - stack ['$38load_method.1']
2025-01-31 15:31:41,364 - DEBUG - dispatch pc=42, inst=LOAD_FAST(arg=1, lineno=4694)
2025-01-31 15:31:41,364 - DEBUG - stack ['$40call_method.2']
2025-01-31 15:31:41,364 - DEBUG - dispatch pc=44, inst=BINARY_SUBSCR(arg=None, lineno=4694)
2025-01-31 15:31:41,364 - DEBUG - stack ['$40call_method.2', '$indices42.3']
2025-01-31 15:31:41,364 - DEBUG - dispatch pc=46, inst=RETURN_VALUE(arg=None, lineno=4694)
2025-01-31 15:31:41,364 - DEBUG - stack ['$44binary_subscr.4']
2025-01-31 15:31:41,364 - DEBUG - end state. edges=[]
2025-01-31 15:31:41,364 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:31:41,364 - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=16 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set()})
2025-01-31 15:31:41,364 - DEBUG - defmap: {}
2025-01-31 15:31:41,364 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:41,364 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:41,364 - DEBUG - keep phismap: {}
2025-01-31 15:31:41,364 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-01-31 15:31:41,364 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:31:41,364 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$indices2.0'}), (4, {'res': '$a4.1'}), (6, {'item': '$a4.1', 'res': '$6load_attr.2'}), (8, {'res': '$const8.3'}), (10, {'lhs': '$6load_attr.2', 'rhs': '$const8.3', 'res': '$10binary_subtract.4'}), (12, {'lhs': '$indices2.0', 'rhs': '$10binary_subtract.4', 'res': '$12compare_op.5'}), (14, {'pred': '$12compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={16: (), 28: ()})
2025-01-31 15:31:41,364 - DEBUG - block_infos State(pc_initial=16 nstack_initial=0):
AdaptBlockInfo(insts=((16, {'res': '$indices16.0'}), (18, {'res': '$a18.1'}), (20, {'item': '$a18.1', 'res': '$20load_attr.2'}), (22, {'value': '$20load_attr.2', 'res': '$22unary_negative.3'}), (24, {'lhs': '$indices16.0', 'rhs': '$22unary_negative.3', 'res': '$24compare_op.4'}), (26, {'pred': '$24compare_op.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: (), 36: ()})
2025-01-31 15:31:41,364 - DEBUG - block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$28load_global.0'}), (30, {'res': '$const30.1'}), (32, {'func': '$28load_global.0', 'args': ['$const30.1'], 'res': '$32call_function.2'}), (34, {'exc': '$32call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:41,364 - DEBUG - block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$a36.0'}), (38, {'item': '$a36.0', 'res': '$38load_method.1'}), (40, {'func': '$38load_method.1', 'args': [], 'res': '$40call_method.2'}), (42, {'res': '$indices42.3'}), (44, {'index': '$indices42.3', 'target': '$40call_method.2', 'res': '$44binary_subscr.4'}), (46, {'retval': '$44binary_subscr.4', 'castval': '$46return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:41,365 - DEBUG - label 0:
    a = arg(0, name=a)                       ['a']
    indices = arg(1, name=indices)           ['indices']
    $6load_attr.2 = getattr(value=a, attr=size) ['$6load_attr.2', 'a']
    $const8.3 = const(int, 1)                ['$const8.3']
    $10binary_subtract.4 = $6load_attr.2 - $const8.3 ['$10binary_subtract.4', '$6load_attr.2', '$const8.3']
    $12compare_op.5 = indices > $10binary_subtract.4 ['$10binary_subtract.4', '$12compare_op.5', 'indices']
    bool14 = global(bool: <class 'bool'>)    ['bool14']
    $14pred = call bool14($12compare_op.5, func=bool14, args=(Var($12compare_op.5, arrayobj.py:4692),), kws=(), vararg=None, varkwarg=None, target=None) ['$12compare_op.5', '$14pred', 'bool14']
    branch $14pred, 28, 16                   ['$14pred']
label 16:
    $20load_attr.2 = getattr(value=a, attr=size) ['$20load_attr.2', 'a']
    $22unary_negative.3 = unary(fn=<built-in function neg>, value=$20load_attr.2) ['$20load_attr.2', '$22unary_negative.3']
    $24compare_op.4 = indices < $22unary_negative.3 ['$22unary_negative.3', '$24compare_op.4', 'indices']
    bool26 = global(bool: <class 'bool'>)    ['bool26']
    $26pred = call bool26($24compare_op.4, func=bool26, args=(Var($24compare_op.4, arrayobj.py:4692),), kws=(), vararg=None, varkwarg=None, target=None) ['$24compare_op.4', '$26pred', 'bool26']
    branch $26pred, 28, 36                   ['$26pred']
label 28:
    $28load_global.0 = global(IndexError: <class 'IndexError'>) ['$28load_global.0']
    $const30.1 = const(str, Index out of bounds) ['$const30.1']
    $32call_function.2 = call $28load_global.0($const30.1, func=$28load_global.0, args=[Var($const30.1, arrayobj.py:4693)], kws=(), vararg=None, varkwarg=None, target=None) ['$28load_global.0', '$32call_function.2', '$const30.1']
    raise $32call_function.2                 ['$32call_function.2']
label 36:
    $38load_method.1 = getattr(value=a, attr=ravel) ['$38load_method.1', 'a']
    $40call_method.2 = call $38load_method.1(func=$38load_method.1, args=[], kws=(), vararg=None, varkwarg=None, target=None) ['$38load_method.1', '$40call_method.2']
    $44binary_subscr.4 = getitem(value=$40call_method.2, index=indices, fn=<built-in function getitem>) ['$40call_method.2', '$44binary_subscr.4', 'indices']
    $46return_value.5 = cast(value=$44binary_subscr.4) ['$44binary_subscr.4', '$46return_value.5']
    return $46return_value.5                 ['$46return_value.5']

2025-01-31 15:31:41,370 - DEBUG - ==== SSA block analysis pass on 0
2025-01-31 15:31:41,370 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89f0033f10>
2025-01-31 15:31:41,370 - DEBUG - on stmt: a = arg(0, name=a)
2025-01-31 15:31:41,370 - DEBUG - on stmt: indices = arg(1, name=indices)
2025-01-31 15:31:41,370 - DEBUG - on stmt: $6load_attr.2 = getattr(value=a, attr=size)
2025-01-31 15:31:41,370 - DEBUG - on stmt: $const8.3 = const(int, 1)
2025-01-31 15:31:41,370 - DEBUG - on stmt: $10binary_subtract.4 = $6load_attr.2 - $const8.3
2025-01-31 15:31:41,370 - DEBUG - on stmt: $12compare_op.5 = indices > $10binary_subtract.4
2025-01-31 15:31:41,370 - DEBUG - on stmt: bool14 = global(bool: <class 'bool'>)
2025-01-31 15:31:41,370 - DEBUG - on stmt: $14pred = call bool14($12compare_op.5, func=bool14, args=(Var($12compare_op.5, arrayobj.py:4692),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,371 - DEBUG - on stmt: branch $14pred, 28, 16
2025-01-31 15:31:41,371 - DEBUG - ==== SSA block analysis pass on 16
2025-01-31 15:31:41,371 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89f0033f10>
2025-01-31 15:31:41,371 - DEBUG - on stmt: $20load_attr.2 = getattr(value=a, attr=size)
2025-01-31 15:31:41,371 - DEBUG - on stmt: $22unary_negative.3 = unary(fn=<built-in function neg>, value=$20load_attr.2)
2025-01-31 15:31:41,371 - DEBUG - on stmt: $24compare_op.4 = indices < $22unary_negative.3
2025-01-31 15:31:41,371 - DEBUG - on stmt: bool26 = global(bool: <class 'bool'>)
2025-01-31 15:31:41,371 - DEBUG - on stmt: $26pred = call bool26($24compare_op.4, func=bool26, args=(Var($24compare_op.4, arrayobj.py:4692),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,371 - DEBUG - on stmt: branch $26pred, 28, 36
2025-01-31 15:31:41,371 - DEBUG - ==== SSA block analysis pass on 28
2025-01-31 15:31:41,371 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89f0033f10>
2025-01-31 15:31:41,371 - DEBUG - on stmt: $28load_global.0 = global(IndexError: <class 'IndexError'>)
2025-01-31 15:31:41,371 - DEBUG - on stmt: $const30.1 = const(str, Index out of bounds)
2025-01-31 15:31:41,371 - DEBUG - on stmt: $32call_function.2 = call $28load_global.0($const30.1, func=$28load_global.0, args=[Var($const30.1, arrayobj.py:4693)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,371 - DEBUG - on stmt: <static> raise <class 'IndexError'>('Index out of bounds')
2025-01-31 15:31:41,371 - DEBUG - ==== SSA block analysis pass on 36
2025-01-31 15:31:41,371 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89f0033f10>
2025-01-31 15:31:41,371 - DEBUG - on stmt: $38load_method.1 = getattr(value=a, attr=ravel)
2025-01-31 15:31:41,371 - DEBUG - on stmt: $40call_method.2 = call $38load_method.1(func=$38load_method.1, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,371 - DEBUG - on stmt: $44binary_subscr.4 = getitem(value=$40call_method.2, index=indices, fn=<built-in function getitem>)
2025-01-31 15:31:41,371 - DEBUG - on stmt: $46return_value.5 = cast(value=$44binary_subscr.4)
2025-01-31 15:31:41,371 - DEBUG - on stmt: return $46return_value.5
2025-01-31 15:31:41,372 - DEBUG - defs defaultdict(<class 'list'>,
            {'$10binary_subtract.4': [(<numba.core.ir.Assign object at 0x7c89f0030a90>,
                                       0)],
             '$12compare_op.5': [(<numba.core.ir.Assign object at 0x7c89f0032ec0>,
                                  0)],
             '$14pred': [(<numba.core.ir.Assign object at 0x7c89f0032590>, 0)],
             '$20load_attr.2': [(<numba.core.ir.Assign object at 0x7c89f0032890>,
                                 16)],
             '$22unary_negative.3': [(<numba.core.ir.Assign object at 0x7c89f0031fc0>,
                                      16)],
             '$24compare_op.4': [(<numba.core.ir.Assign object at 0x7c89f0032080>,
                                  16)],
             '$26pred': [(<numba.core.ir.Assign object at 0x7c89f0031bd0>, 16)],
             '$28load_global.0': [(<numba.core.ir.Assign object at 0x7c89f0031840>,
                                   28)],
             '$32call_function.2': [(<numba.core.ir.Assign object at 0x7c89f0031630>,
                                     28)],
             '$38load_method.1': [(<numba.core.ir.Assign object at 0x7c89f0031d80>,
                                   36)],
             '$40call_method.2': [(<numba.core.ir.Assign object at 0x7c89f00320b0>,
                                   36)],
             '$44binary_subscr.4': [(<numba.core.ir.Assign object at 0x7c89f0032c50>,
                                     36)],
             '$46return_value.5': [(<numba.core.ir.Assign object at 0x7c89f00316f0>,
                                    36)],
             '$6load_attr.2': [(<numba.core.ir.Assign object at 0x7c89f0030160>,
                                0)],
             '$const30.1': [(<numba.core.ir.Assign object at 0x7c89f00307c0>,
                             28)],
             '$const8.3': [(<numba.core.ir.Assign object at 0x7c89f0032aa0>,
                            0)],
             'a': [(<numba.core.ir.Assign object at 0x7c89f0030be0>, 0)],
             'bool14': [(<numba.core.ir.Assign object at 0x7c89f0032950>, 0)],
             'bool26': [(<numba.core.ir.Assign object at 0x7c89f0031ed0>, 16)],
             'indices': [(<numba.core.ir.Assign object at 0x7c89f0030280>, 0)]})
2025-01-31 15:31:41,372 - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x7c89f0033f10>
2025-01-31 15:31:41,386 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=2230)
           2	LOAD_FAST(arg=0, lineno=2232)
           4	LOAD_METHOD(arg=0, lineno=2232)
           6	LOAD_FAST(arg=0, lineno=2232)
           8	LOAD_ATTR(arg=1, lineno=2232)
          10	CALL_METHOD(arg=1, lineno=2232)
          12	RETURN_VALUE(arg=None, lineno=2232)
2025-01-31 15:31:41,387 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:31:41,387 - DEBUG - stack: []
2025-01-31 15:31:41,387 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:31:41,387 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=2230)
2025-01-31 15:31:41,387 - DEBUG - stack []
2025-01-31 15:31:41,387 - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=2232)
2025-01-31 15:31:41,387 - DEBUG - stack []
2025-01-31 15:31:41,387 - DEBUG - dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=2232)
2025-01-31 15:31:41,387 - DEBUG - stack ['$ary2.0']
2025-01-31 15:31:41,387 - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=2232)
2025-01-31 15:31:41,387 - DEBUG - stack ['$4load_method.1']
2025-01-31 15:31:41,387 - DEBUG - dispatch pc=8, inst=LOAD_ATTR(arg=1, lineno=2232)
2025-01-31 15:31:41,387 - DEBUG - stack ['$4load_method.1', '$ary6.2']
2025-01-31 15:31:41,387 - DEBUG - dispatch pc=10, inst=CALL_METHOD(arg=1, lineno=2232)
2025-01-31 15:31:41,387 - DEBUG - stack ['$4load_method.1', '$8load_attr.3']
2025-01-31 15:31:41,387 - DEBUG - dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=2232)
2025-01-31 15:31:41,387 - DEBUG - stack ['$10call_method.4']
2025-01-31 15:31:41,387 - DEBUG - end state. edges=[]
2025-01-31 15:31:41,387 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:31:41,387 - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-01-31 15:31:41,387 - DEBUG - defmap: {}
2025-01-31 15:31:41,387 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:41,387 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:41,387 - DEBUG - keep phismap: {}
2025-01-31 15:31:41,387 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-01-31 15:31:41,387 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:31:41,388 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$ary2.0'}), (4, {'item': '$ary2.0', 'res': '$4load_method.1'}), (6, {'res': '$ary6.2'}), (8, {'item': '$ary6.2', 'res': '$8load_attr.3'}), (10, {'func': '$4load_method.1', 'args': ['$8load_attr.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:41,388 - DEBUG - label 0:
    ary = arg(0, name=ary)                   ['ary']
    $4load_method.1 = getattr(value=ary, attr=reshape) ['$4load_method.1', 'ary']
    $8load_attr.3 = getattr(value=ary, attr=size) ['$8load_attr.3', 'ary']
    $10call_method.4 = call $4load_method.1($8load_attr.3, func=$4load_method.1, args=[Var($8load_attr.3, arrayobj.py:2232)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_method.4', '$4load_method.1', '$8load_attr.3']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2025-01-31 15:31:41,391 - DEBUG - ==== SSA block analysis pass on 0
2025-01-31 15:31:41,391 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89ebd28a30>
2025-01-31 15:31:41,391 - DEBUG - on stmt: ary = arg(0, name=ary)
2025-01-31 15:31:41,391 - DEBUG - on stmt: $4load_method.1 = getattr(value=ary, attr=reshape)
2025-01-31 15:31:41,391 - DEBUG - on stmt: $8load_attr.3 = getattr(value=ary, attr=size)
2025-01-31 15:31:41,391 - DEBUG - on stmt: $10call_method.4 = call $4load_method.1($8load_attr.3, func=$4load_method.1, args=[Var($8load_attr.3, arrayobj.py:2232)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,391 - DEBUG - on stmt: $12return_value.5 = cast(value=$10call_method.4)
2025-01-31 15:31:41,391 - DEBUG - on stmt: return $12return_value.5
2025-01-31 15:31:41,392 - DEBUG - defs defaultdict(<class 'list'>,
            {'$10call_method.4': [(<numba.core.ir.Assign object at 0x7c89ebd298a0>,
                                   0)],
             '$12return_value.5': [(<numba.core.ir.Assign object at 0x7c89ebd2b1f0>,
                                    0)],
             '$4load_method.1': [(<numba.core.ir.Assign object at 0x7c89ebd28be0>,
                                  0)],
             '$8load_attr.3': [(<numba.core.ir.Assign object at 0x7c89ebd2b910>,
                                0)],
             'ary': [(<numba.core.ir.Assign object at 0x7c89ebd28430>, 0)]})
2025-01-31 15:31:41,393 - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x7c89ebd28a30>
2025-01-31 15:31:41,459 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=481)
           2	LOAD_FAST(arg=0, lineno=483)
           4	LOAD_FAST(arg=1, lineno=483)
           6	COMPARE_OP(arg=4, lineno=483)
           8	RETURN_VALUE(arg=None, lineno=483)
2025-01-31 15:31:41,459 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:31:41,459 - DEBUG - stack: []
2025-01-31 15:31:41,459 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:31:41,459 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=481)
2025-01-31 15:31:41,459 - DEBUG - stack []
2025-01-31 15:31:41,459 - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=483)
2025-01-31 15:31:41,459 - DEBUG - stack []
2025-01-31 15:31:41,459 - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=483)
2025-01-31 15:31:41,459 - DEBUG - stack ['$a2.0']
2025-01-31 15:31:41,459 - DEBUG - dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=483)
2025-01-31 15:31:41,459 - DEBUG - stack ['$a2.0', '$min_val4.1']
2025-01-31 15:31:41,460 - DEBUG - dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=483)
2025-01-31 15:31:41,460 - DEBUG - stack ['$6compare_op.2']
2025-01-31 15:31:41,460 - DEBUG - end state. edges=[]
2025-01-31 15:31:41,460 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:31:41,460 - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-01-31 15:31:41,460 - DEBUG - defmap: {}
2025-01-31 15:31:41,460 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:41,460 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:41,460 - DEBUG - keep phismap: {}
2025-01-31 15:31:41,460 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-01-31 15:31:41,460 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:31:41,460 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'res': '$min_val4.1'}), (6, {'lhs': '$a2.0', 'rhs': '$min_val4.1', 'res': '$6compare_op.2'}), (8, {'retval': '$6compare_op.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:41,460 - DEBUG - label 0:
    a = arg(0, name=a)                       ['a']
    min_val = arg(1, name=min_val)           ['min_val']
    $6compare_op.2 = a > min_val             ['$6compare_op.2', 'a', 'min_val']
    $8return_value.3 = cast(value=$6compare_op.2) ['$6compare_op.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2025-01-31 15:31:41,463 - DEBUG - ==== SSA block analysis pass on 0
2025-01-31 15:31:41,463 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89ebad9d20>
2025-01-31 15:31:41,463 - DEBUG - on stmt: a = arg(0, name=a)
2025-01-31 15:31:41,463 - DEBUG - on stmt: min_val = arg(1, name=min_val)
2025-01-31 15:31:41,463 - DEBUG - on stmt: $6compare_op.2 = a > min_val
2025-01-31 15:31:41,463 - DEBUG - on stmt: $8return_value.3 = cast(value=$6compare_op.2)
2025-01-31 15:31:41,464 - DEBUG - on stmt: return $8return_value.3
2025-01-31 15:31:41,464 - DEBUG - defs defaultdict(<class 'list'>,
            {'$6compare_op.2': [(<numba.core.ir.Assign object at 0x7c89e8c1e3e0>,
                                 0)],
             '$8return_value.3': [(<numba.core.ir.Assign object at 0x7c89e8c1f310>,
                                   0)],
             'a': [(<numba.core.ir.Assign object at 0x7c89e8c1fb20>, 0)],
             'min_val': [(<numba.core.ir.Assign object at 0x7c89e8c1d750>, 0)]})
2025-01-31 15:31:41,464 - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x7c89ebad9d20>
2025-01-31 15:31:41,550 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=437)
           2	LOAD_DEREF(arg=0, lineno=440)
           4	STORE_FAST(arg=1, lineno=440)
           6	LOAD_GLOBAL(arg=0, lineno=441)
           8	LOAD_METHOD(arg=1, lineno=441)
          10	LOAD_FAST(arg=0, lineno=441)
          12	CALL_METHOD(arg=1, lineno=441)
          14	GET_ITER(arg=None, lineno=441)
>         16	FOR_ITER(arg=8, lineno=441)
          18	STORE_FAST(arg=2, lineno=441)
          20	LOAD_FAST(arg=1, lineno=442)
          22	LOAD_FAST(arg=2, lineno=442)
          24	LOAD_METHOD(arg=2, lineno=442)
          26	CALL_METHOD(arg=0, lineno=442)
          28	INPLACE_ADD(arg=None, lineno=442)
          30	STORE_FAST(arg=1, lineno=442)
          32	JUMP_ABSOLUTE(arg=9, lineno=442)
>         34	LOAD_FAST(arg=1, lineno=443)
          36	LOAD_FAST(arg=0, lineno=443)
          38	LOAD_ATTR(arg=3, lineno=443)
          40	BINARY_TRUE_DIVIDE(arg=None, lineno=443)
          42	RETURN_VALUE(arg=None, lineno=443)
2025-01-31 15:31:41,550 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:31:41,550 - DEBUG - stack: []
2025-01-31 15:31:41,550 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:31:41,550 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=437)
2025-01-31 15:31:41,550 - DEBUG - stack []
2025-01-31 15:31:41,550 - DEBUG - dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=440)
2025-01-31 15:31:41,550 - DEBUG - stack []
2025-01-31 15:31:41,550 - DEBUG - dispatch pc=4, inst=STORE_FAST(arg=1, lineno=440)
2025-01-31 15:31:41,550 - DEBUG - stack ['$2load_deref.0']
2025-01-31 15:31:41,550 - DEBUG - dispatch pc=6, inst=LOAD_GLOBAL(arg=0, lineno=441)
2025-01-31 15:31:41,550 - DEBUG - stack []
2025-01-31 15:31:41,550 - DEBUG - dispatch pc=8, inst=LOAD_METHOD(arg=1, lineno=441)
2025-01-31 15:31:41,550 - DEBUG - stack ['$6load_global.1']
2025-01-31 15:31:41,550 - DEBUG - dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=441)
2025-01-31 15:31:41,550 - DEBUG - stack ['$8load_method.2']
2025-01-31 15:31:41,550 - DEBUG - dispatch pc=12, inst=CALL_METHOD(arg=1, lineno=441)
2025-01-31 15:31:41,550 - DEBUG - stack ['$8load_method.2', '$a10.3']
2025-01-31 15:31:41,550 - DEBUG - dispatch pc=14, inst=GET_ITER(arg=None, lineno=441)
2025-01-31 15:31:41,550 - DEBUG - stack ['$12call_method.4']
2025-01-31 15:31:41,550 - DEBUG - end state. edges=[Edge(pc=16, stack=('$14get_iter.5',), blockstack=(), npush=0)]
2025-01-31 15:31:41,550 - DEBUG - pending: deque([State(pc_initial=16 nstack_initial=1)])
2025-01-31 15:31:41,550 - DEBUG - stack: ['$phi16.0']
2025-01-31 15:31:41,551 - DEBUG - state.pc_initial: State(pc_initial=16 nstack_initial=1)
2025-01-31 15:31:41,551 - DEBUG - dispatch pc=16, inst=FOR_ITER(arg=8, lineno=441)
2025-01-31 15:31:41,551 - DEBUG - stack ['$phi16.0']
2025-01-31 15:31:41,551 - DEBUG - end state. edges=[Edge(pc=34, stack=(), blockstack=(), npush=0), Edge(pc=18, stack=('$phi16.0', '$16for_iter.2'), blockstack=(), npush=0)]
2025-01-31 15:31:41,551 - DEBUG - pending: deque([State(pc_initial=34 nstack_initial=0), State(pc_initial=18 nstack_initial=2)])
2025-01-31 15:31:41,551 - DEBUG - stack: []
2025-01-31 15:31:41,551 - DEBUG - state.pc_initial: State(pc_initial=34 nstack_initial=0)
2025-01-31 15:31:41,551 - DEBUG - dispatch pc=34, inst=LOAD_FAST(arg=1, lineno=443)
2025-01-31 15:31:41,551 - DEBUG - stack []
2025-01-31 15:31:41,551 - DEBUG - dispatch pc=36, inst=LOAD_FAST(arg=0, lineno=443)
2025-01-31 15:31:41,551 - DEBUG - stack ['$c34.0']
2025-01-31 15:31:41,551 - DEBUG - dispatch pc=38, inst=LOAD_ATTR(arg=3, lineno=443)
2025-01-31 15:31:41,551 - DEBUG - stack ['$c34.0', '$a36.1']
2025-01-31 15:31:41,551 - DEBUG - dispatch pc=40, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=443)
2025-01-31 15:31:41,551 - DEBUG - stack ['$c34.0', '$38load_attr.2']
2025-01-31 15:31:41,551 - DEBUG - dispatch pc=42, inst=RETURN_VALUE(arg=None, lineno=443)
2025-01-31 15:31:41,551 - DEBUG - stack ['$40binary_true_divide.3']
2025-01-31 15:31:41,551 - DEBUG - end state. edges=[]
2025-01-31 15:31:41,551 - DEBUG - pending: deque([State(pc_initial=18 nstack_initial=2)])
2025-01-31 15:31:41,551 - DEBUG - stack: ['$phi18.0', '$phi18.1']
2025-01-31 15:31:41,551 - DEBUG - state.pc_initial: State(pc_initial=18 nstack_initial=2)
2025-01-31 15:31:41,551 - DEBUG - dispatch pc=18, inst=STORE_FAST(arg=2, lineno=441)
2025-01-31 15:31:41,551 - DEBUG - stack ['$phi18.0', '$phi18.1']
2025-01-31 15:31:41,551 - DEBUG - dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=442)
2025-01-31 15:31:41,551 - DEBUG - stack ['$phi18.0']
2025-01-31 15:31:41,551 - DEBUG - dispatch pc=22, inst=LOAD_FAST(arg=2, lineno=442)
2025-01-31 15:31:41,551 - DEBUG - stack ['$phi18.0', '$c20.2']
2025-01-31 15:31:41,551 - DEBUG - dispatch pc=24, inst=LOAD_METHOD(arg=2, lineno=442)
2025-01-31 15:31:41,551 - DEBUG - stack ['$phi18.0', '$c20.2', '$v22.3']
2025-01-31 15:31:41,552 - DEBUG - dispatch pc=26, inst=CALL_METHOD(arg=0, lineno=442)
2025-01-31 15:31:41,552 - DEBUG - stack ['$phi18.0', '$c20.2', '$24load_method.4']
2025-01-31 15:31:41,552 - DEBUG - dispatch pc=28, inst=INPLACE_ADD(arg=None, lineno=442)
2025-01-31 15:31:41,552 - DEBUG - stack ['$phi18.0', '$c20.2', '$26call_method.5']
2025-01-31 15:31:41,552 - DEBUG - dispatch pc=30, inst=STORE_FAST(arg=1, lineno=442)
2025-01-31 15:31:41,552 - DEBUG - stack ['$phi18.0', '$28inplace_add.6']
2025-01-31 15:31:41,552 - DEBUG - dispatch pc=32, inst=JUMP_ABSOLUTE(arg=9, lineno=442)
2025-01-31 15:31:41,552 - DEBUG - stack ['$phi18.0']
2025-01-31 15:31:41,552 - DEBUG - end state. edges=[Edge(pc=16, stack=('$phi18.0',), blockstack=(), npush=0)]
2025-01-31 15:31:41,552 - DEBUG - pending: deque([State(pc_initial=16 nstack_initial=1)])
2025-01-31 15:31:41,552 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:31:41,552 - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=16 nstack_initial=1): {'$phi16.0'},
             State(pc_initial=18 nstack_initial=2): {'$phi18.1'},
             State(pc_initial=34 nstack_initial=0): set()})
2025-01-31 15:31:41,552 - DEBUG - defmap: {'$phi16.0': State(pc_initial=0 nstack_initial=0),
 '$phi18.1': State(pc_initial=16 nstack_initial=1)}
2025-01-31 15:31:41,552 - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi18.0', State(pc_initial=18 nstack_initial=2))},
             '$phi18.0': {('$phi16.0', State(pc_initial=16 nstack_initial=1))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
2025-01-31 15:31:41,552 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi16.0', State(pc_initial=16 nstack_initial=1))},
             '$phi18.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
2025-01-31 15:31:41,553 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
2025-01-31 15:31:41,553 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
2025-01-31 15:31:41,553 - DEBUG - keep phismap: {'$phi16.0': {('$14get_iter.5', State(pc_initial=0 nstack_initial=0))},
 '$phi18.1': {('$16for_iter.2', State(pc_initial=16 nstack_initial=1))}}
2025-01-31 15:31:41,553 - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi16.0': '$14get_iter.5'},
             State(pc_initial=16 nstack_initial=1): {'$phi18.1': '$16for_iter.2'}})
2025-01-31 15:31:41,553 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:31:41,553 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'value': '$2load_deref.0'}), (6, {'res': '$6load_global.1'}), (8, {'item': '$6load_global.1', 'res': '$8load_method.2'}), (10, {'res': '$a10.3'}), (12, {'func': '$8load_method.2', 'args': ['$a10.3'], 'res': '$12call_method.4'}), (14, {'value': '$12call_method.4', 'res': '$14get_iter.5'})), outgoing_phis={'$phi16.0': '$14get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={16: ('$14get_iter.5',)})
2025-01-31 15:31:41,553 - DEBUG - block_infos State(pc_initial=16 nstack_initial=1):
AdaptBlockInfo(insts=((16, {'iterator': '$phi16.0', 'pair': '$16for_iter.1', 'indval': '$16for_iter.2', 'pred': '$16for_iter.3'}),), outgoing_phis={'$phi18.1': '$16for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: (), 18: ('$phi16.0', '$16for_iter.2')})
2025-01-31 15:31:41,553 - DEBUG - block_infos State(pc_initial=18 nstack_initial=2):
AdaptBlockInfo(insts=((18, {'value': '$phi18.1'}), (20, {'res': '$c20.2'}), (22, {'res': '$v22.3'}), (24, {'item': '$v22.3', 'res': '$24load_method.4'}), (26, {'func': '$24load_method.4', 'args': [], 'res': '$26call_method.5'}), (28, {'lhs': '$c20.2', 'rhs': '$26call_method.5', 'res': '$28inplace_add.6'}), (30, {'value': '$28inplace_add.6'}), (32, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={16: ('$phi18.0',)})
2025-01-31 15:31:41,553 - DEBUG - block_infos State(pc_initial=34 nstack_initial=0):
AdaptBlockInfo(insts=((34, {'res': '$c34.0'}), (36, {'res': '$a36.1'}), (38, {'item': '$a36.1', 'res': '$38load_attr.2'}), (40, {'lhs': '$c34.0', 'rhs': '$38load_attr.2', 'res': '$40binary_true_divide.3'}), (42, {'retval': '$40binary_true_divide.3', 'castval': '$42return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:41,554 - DEBUG - label 0:
    a = arg(0, name=a)                       ['a']
    c = freevar(acc_init: 0.0)               ['c']
    $6load_global.1 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>) ['$6load_global.1']
    $8load_method.2 = getattr(value=$6load_global.1, attr=nditer) ['$6load_global.1', '$8load_method.2']
    $12call_method.4 = call $8load_method.2(a, func=$8load_method.2, args=[Var(a, arraymath.py:437)], kws=(), vararg=None, varkwarg=None, target=None) ['$12call_method.4', '$8load_method.2', 'a']
    $14get_iter.5 = getiter(value=$12call_method.4) ['$12call_method.4', '$14get_iter.5']
    $phi16.0 = $14get_iter.5                 ['$14get_iter.5', '$phi16.0']
    jump 16                                  []
label 16:
    $16for_iter.1 = iternext(value=$phi16.0) ['$16for_iter.1', '$phi16.0']
    $16for_iter.2 = pair_first(value=$16for_iter.1) ['$16for_iter.1', '$16for_iter.2']
    $16for_iter.3 = pair_second(value=$16for_iter.1) ['$16for_iter.1', '$16for_iter.3']
    $phi18.1 = $16for_iter.2                 ['$16for_iter.2', '$phi18.1']
    branch $16for_iter.3, 18, 34             ['$16for_iter.3']
label 18:
    v = $phi18.1                             ['$phi18.1', 'v']
    $24load_method.4 = getattr(value=v, attr=item) ['$24load_method.4', 'v']
    $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None, varkwarg=None, target=None) ['$24load_method.4', '$26call_method.5']
    $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined) ['$26call_method.5', '$28inplace_add.6', 'c']
    c = $28inplace_add.6                     ['$28inplace_add.6', 'c']
    jump 16                                  []
label 34:
    $38load_attr.2 = getattr(value=a, attr=size) ['$38load_attr.2', 'a']
    $40binary_true_divide.3 = c / $38load_attr.2 ['$38load_attr.2', '$40binary_true_divide.3', 'c']
    $42return_value.4 = cast(value=$40binary_true_divide.3) ['$40binary_true_divide.3', '$42return_value.4']
    return $42return_value.4                 ['$42return_value.4']

2025-01-31 15:31:41,559 - DEBUG - ==== SSA block analysis pass on 0
2025-01-31 15:31:41,559 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89ebd96680>
2025-01-31 15:31:41,559 - DEBUG - on stmt: a = arg(0, name=a)
2025-01-31 15:31:41,559 - DEBUG - on stmt: c = freevar(acc_init: 0.0)
2025-01-31 15:31:41,559 - DEBUG - on stmt: $6load_global.1 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:41,559 - DEBUG - on stmt: $8load_method.2 = getattr(value=$6load_global.1, attr=nditer)
2025-01-31 15:31:41,559 - DEBUG - on stmt: $12call_method.4 = call $8load_method.2(a, func=$8load_method.2, args=[Var(a, arraymath.py:437)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,559 - DEBUG - on stmt: $14get_iter.5 = getiter(value=$12call_method.4)
2025-01-31 15:31:41,559 - DEBUG - on stmt: $phi16.0 = $14get_iter.5
2025-01-31 15:31:41,559 - DEBUG - on stmt: jump 16
2025-01-31 15:31:41,559 - DEBUG - ==== SSA block analysis pass on 16
2025-01-31 15:31:41,559 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89ebd96680>
2025-01-31 15:31:41,559 - DEBUG - on stmt: $16for_iter.1 = iternext(value=$phi16.0)
2025-01-31 15:31:41,559 - DEBUG - on stmt: $16for_iter.2 = pair_first(value=$16for_iter.1)
2025-01-31 15:31:41,559 - DEBUG - on stmt: $16for_iter.3 = pair_second(value=$16for_iter.1)
2025-01-31 15:31:41,559 - DEBUG - on stmt: $phi18.1 = $16for_iter.2
2025-01-31 15:31:41,559 - DEBUG - on stmt: branch $16for_iter.3, 18, 34
2025-01-31 15:31:41,559 - DEBUG - ==== SSA block analysis pass on 18
2025-01-31 15:31:41,559 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89ebd96680>
2025-01-31 15:31:41,559 - DEBUG - on stmt: v = $phi18.1
2025-01-31 15:31:41,559 - DEBUG - on stmt: $24load_method.4 = getattr(value=v, attr=item)
2025-01-31 15:31:41,560 - DEBUG - on stmt: $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,560 - DEBUG - on stmt: $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:41,560 - DEBUG - on stmt: c = $28inplace_add.6
2025-01-31 15:31:41,560 - DEBUG - on stmt: jump 16
2025-01-31 15:31:41,560 - DEBUG - ==== SSA block analysis pass on 34
2025-01-31 15:31:41,560 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89ebd96680>
2025-01-31 15:31:41,560 - DEBUG - on stmt: $38load_attr.2 = getattr(value=a, attr=size)
2025-01-31 15:31:41,560 - DEBUG - on stmt: $40binary_true_divide.3 = c / $38load_attr.2
2025-01-31 15:31:41,560 - DEBUG - on stmt: $42return_value.4 = cast(value=$40binary_true_divide.3)
2025-01-31 15:31:41,560 - DEBUG - on stmt: return $42return_value.4
2025-01-31 15:31:41,560 - DEBUG - defs defaultdict(<class 'list'>,
            {'$12call_method.4': [(<numba.core.ir.Assign object at 0x7c89e8a78850>,
                                   0)],
             '$14get_iter.5': [(<numba.core.ir.Assign object at 0x7c89e8a79360>,
                                0)],
             '$16for_iter.1': [(<numba.core.ir.Assign object at 0x7c89e8a78e50>,
                                16)],
             '$16for_iter.2': [(<numba.core.ir.Assign object at 0x7c89e8a79660>,
                                16)],
             '$16for_iter.3': [(<numba.core.ir.Assign object at 0x7c89e8a795d0>,
                                16)],
             '$24load_method.4': [(<numba.core.ir.Assign object at 0x7c89e8a7a9b0>,
                                   18)],
             '$26call_method.5': [(<numba.core.ir.Assign object at 0x7c89e8a7a1a0>,
                                   18)],
             '$28inplace_add.6': [(<numba.core.ir.Assign object at 0x7c89e8a7a080>,
                                   18)],
             '$38load_attr.2': [(<numba.core.ir.Assign object at 0x7c89e8a7ae00>,
                                 34)],
             '$40binary_true_divide.3': [(<numba.core.ir.Assign object at 0x7c89e8a7b040>,
                                          34)],
             '$42return_value.4': [(<numba.core.ir.Assign object at 0x7c89e8a7b340>,
                                    34)],
             '$6load_global.1': [(<numba.core.ir.Assign object at 0x7c89e8a7a650>,
                                  0)],
             '$8load_method.2': [(<numba.core.ir.Assign object at 0x7c89e8a78ee0>,
                                  0)],
             '$phi16.0': [(<numba.core.ir.Assign object at 0x7c89e8c541f0>, 0)],
             '$phi18.1': [(<numba.core.ir.Assign object at 0x7c89e8a78a30>,
                           16)],
             'a': [(<numba.core.ir.Assign object at 0x7c89ebd94c10>, 0)],
             'c': [(<numba.core.ir.Assign object at 0x7c89eba18bb0>, 0),
                   (<numba.core.ir.Assign object at 0x7c89e8a7ac20>, 18)],
             'v': [(<numba.core.ir.Assign object at 0x7c89e8a79300>, 18)]})
2025-01-31 15:31:41,560 - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x7c89ebd96680>
2025-01-31 15:31:41,560 - DEBUG - Fix SSA violator on var c
2025-01-31 15:31:41,560 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-31 15:31:41,560 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89ebd1e410>
2025-01-31 15:31:41,560 - DEBUG - on stmt: a = arg(0, name=a)
2025-01-31 15:31:41,561 - DEBUG - on stmt: c = freevar(acc_init: 0.0)
2025-01-31 15:31:41,561 - DEBUG - first assign: c
2025-01-31 15:31:41,561 - DEBUG - replaced with: c = freevar(acc_init: 0.0)
2025-01-31 15:31:41,561 - DEBUG - on stmt: $6load_global.1 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:41,561 - DEBUG - on stmt: $8load_method.2 = getattr(value=$6load_global.1, attr=nditer)
2025-01-31 15:31:41,561 - DEBUG - on stmt: $12call_method.4 = call $8load_method.2(a, func=$8load_method.2, args=[Var(a, arraymath.py:437)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,561 - DEBUG - on stmt: $14get_iter.5 = getiter(value=$12call_method.4)
2025-01-31 15:31:41,561 - DEBUG - on stmt: $phi16.0 = $14get_iter.5
2025-01-31 15:31:41,561 - DEBUG - on stmt: jump 16
2025-01-31 15:31:41,561 - DEBUG - ==== SSA block rewrite pass on 16
2025-01-31 15:31:41,561 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89ebd1e410>
2025-01-31 15:31:41,561 - DEBUG - on stmt: $16for_iter.1 = iternext(value=$phi16.0)
2025-01-31 15:31:41,561 - DEBUG - on stmt: $16for_iter.2 = pair_first(value=$16for_iter.1)
2025-01-31 15:31:41,561 - DEBUG - on stmt: $16for_iter.3 = pair_second(value=$16for_iter.1)
2025-01-31 15:31:41,561 - DEBUG - on stmt: $phi18.1 = $16for_iter.2
2025-01-31 15:31:41,561 - DEBUG - on stmt: branch $16for_iter.3, 18, 34
2025-01-31 15:31:41,561 - DEBUG - ==== SSA block rewrite pass on 18
2025-01-31 15:31:41,561 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89ebd1e410>
2025-01-31 15:31:41,561 - DEBUG - on stmt: v = $phi18.1
2025-01-31 15:31:41,561 - DEBUG - on stmt: $24load_method.4 = getattr(value=v, attr=item)
2025-01-31 15:31:41,561 - DEBUG - on stmt: $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,561 - DEBUG - on stmt: $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:41,561 - DEBUG - on stmt: c = $28inplace_add.6
2025-01-31 15:31:41,561 - DEBUG - replaced with: c.1 = $28inplace_add.6
2025-01-31 15:31:41,561 - DEBUG - on stmt: jump 16
2025-01-31 15:31:41,561 - DEBUG - ==== SSA block rewrite pass on 34
2025-01-31 15:31:41,561 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89ebd1e410>
2025-01-31 15:31:41,561 - DEBUG - on stmt: $38load_attr.2 = getattr(value=a, attr=size)
2025-01-31 15:31:41,561 - DEBUG - on stmt: $40binary_true_divide.3 = c / $38load_attr.2
2025-01-31 15:31:41,562 - DEBUG - on stmt: $42return_value.4 = cast(value=$40binary_true_divide.3)
2025-01-31 15:31:41,562 - DEBUG - on stmt: return $42return_value.4
2025-01-31 15:31:41,562 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7c89ebd1f400>],
             18: [<numba.core.ir.Assign object at 0x7c89ebad8910>]})
2025-01-31 15:31:41,562 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-31 15:31:41,562 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89ebd1e410>
2025-01-31 15:31:41,562 - DEBUG - on stmt: a = arg(0, name=a)
2025-01-31 15:31:41,562 - DEBUG - on stmt: c = freevar(acc_init: 0.0)
2025-01-31 15:31:41,562 - DEBUG - on stmt: $6load_global.1 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:41,562 - DEBUG - on stmt: $8load_method.2 = getattr(value=$6load_global.1, attr=nditer)
2025-01-31 15:31:41,562 - DEBUG - on stmt: $12call_method.4 = call $8load_method.2(a, func=$8load_method.2, args=[Var(a, arraymath.py:437)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,562 - DEBUG - on stmt: $14get_iter.5 = getiter(value=$12call_method.4)
2025-01-31 15:31:41,562 - DEBUG - on stmt: $phi16.0 = $14get_iter.5
2025-01-31 15:31:41,562 - DEBUG - on stmt: jump 16
2025-01-31 15:31:41,562 - DEBUG - ==== SSA block rewrite pass on 16
2025-01-31 15:31:41,562 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89ebd1e410>
2025-01-31 15:31:41,562 - DEBUG - on stmt: $16for_iter.1 = iternext(value=$phi16.0)
2025-01-31 15:31:41,562 - DEBUG - on stmt: $16for_iter.2 = pair_first(value=$16for_iter.1)
2025-01-31 15:31:41,562 - DEBUG - on stmt: $16for_iter.3 = pair_second(value=$16for_iter.1)
2025-01-31 15:31:41,562 - DEBUG - on stmt: $phi18.1 = $16for_iter.2
2025-01-31 15:31:41,562 - DEBUG - on stmt: branch $16for_iter.3, 18, 34
2025-01-31 15:31:41,562 - DEBUG - ==== SSA block rewrite pass on 18
2025-01-31 15:31:41,562 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89ebd1e410>
2025-01-31 15:31:41,562 - DEBUG - on stmt: v = $phi18.1
2025-01-31 15:31:41,562 - DEBUG - on stmt: $24load_method.4 = getattr(value=v, attr=item)
2025-01-31 15:31:41,562 - DEBUG - on stmt: $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,562 - DEBUG - on stmt: $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:41,563 - DEBUG - find_def var='c' stmt=$28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:41,563 - DEBUG - find_def_from_top label 18
2025-01-31 15:31:41,563 - DEBUG - idom 16 from label 18
2025-01-31 15:31:41,563 - DEBUG - find_def_from_bottom label 16
2025-01-31 15:31:41,563 - DEBUG - find_def_from_top label 16
2025-01-31 15:31:41,563 - DEBUG - insert phi node c.2 = phi(incoming_values=[], incoming_blocks=[]) at 16
2025-01-31 15:31:41,563 - DEBUG - find_def_from_bottom label 0
2025-01-31 15:31:41,563 - DEBUG - incoming_def c = freevar(acc_init: 0.0)
2025-01-31 15:31:41,563 - DEBUG - find_def_from_bottom label 18
2025-01-31 15:31:41,563 - DEBUG - incoming_def c.1 = $28inplace_add.6
2025-01-31 15:31:41,563 - DEBUG - replaced with: $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c.2, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:41,563 - DEBUG - on stmt: c.1 = $28inplace_add.6
2025-01-31 15:31:41,563 - DEBUG - on stmt: jump 16
2025-01-31 15:31:41,563 - DEBUG - ==== SSA block rewrite pass on 34
2025-01-31 15:31:41,563 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89ebd1e410>
2025-01-31 15:31:41,563 - DEBUG - on stmt: $38load_attr.2 = getattr(value=a, attr=size)
2025-01-31 15:31:41,563 - DEBUG - on stmt: $40binary_true_divide.3 = c / $38load_attr.2
2025-01-31 15:31:41,563 - DEBUG - find_def var='c' stmt=$40binary_true_divide.3 = c / $38load_attr.2
2025-01-31 15:31:41,563 - DEBUG - find_def_from_top label 34
2025-01-31 15:31:41,563 - DEBUG - idom 16 from label 34
2025-01-31 15:31:41,563 - DEBUG - find_def_from_bottom label 16
2025-01-31 15:31:41,563 - DEBUG - replaced with: $40binary_true_divide.3 = c.2 / $38load_attr.2
2025-01-31 15:31:41,563 - DEBUG - on stmt: $42return_value.4 = cast(value=$40binary_true_divide.3)
2025-01-31 15:31:41,563 - DEBUG - on stmt: return $42return_value.4
2025-01-31 15:31:41,783 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=1209)
           2	LOAD_FAST(arg=0, lineno=1221)
           4	LOAD_CONST(arg=1, lineno=1221)
           6	BINARY_SUBSCR(arg=None, lineno=1221)
           8	LOAD_GLOBAL(arg=0, lineno=1221)
          10	LOAD_METHOD(arg=1, lineno=1221)
          12	LOAD_FAST(arg=0, lineno=1221)
          14	LOAD_CONST(arg=2, lineno=1221)
          16	LOAD_GLOBAL(arg=2, lineno=1221)
          18	LOAD_FAST(arg=2, lineno=1221)
          20	LOAD_FAST(arg=0, lineno=1221)
          22	LOAD_ATTR(arg=3, lineno=1221)
          24	LOAD_CONST(arg=1, lineno=1221)
          26	BINARY_SUBSCR(arg=None, lineno=1221)
          28	CALL_FUNCTION(arg=2, lineno=1221)
          30	BUILD_SLICE(arg=2, lineno=1221)
          32	BINARY_SUBSCR(arg=None, lineno=1221)
          34	CALL_METHOD(arg=1, lineno=1221)
          36	COMPARE_OP(arg=5, lineno=1221)
          38	LOAD_FAST(arg=7, lineno=1221)
          40	LOAD_CONST(arg=1, lineno=1221)
          42	STORE_SUBSCR(arg=None, lineno=1221)
          44	LOAD_FAST(arg=7, lineno=1222)
          46	LOAD_CONST(arg=1, lineno=1222)
          48	DUP_TOP_TWO(arg=None, lineno=1222)
          50	BINARY_SUBSCR(arg=None, lineno=1222)
          52	LOAD_FAST(arg=0, lineno=1222)
          54	LOAD_CONST(arg=1, lineno=1222)
          56	BINARY_SUBSCR(arg=None, lineno=1222)
          58	LOAD_GLOBAL(arg=0, lineno=1222)
          60	LOAD_METHOD(arg=4, lineno=1222)
          62	LOAD_FAST(arg=0, lineno=1222)
          64	LOAD_CONST(arg=2, lineno=1222)
          66	LOAD_GLOBAL(arg=2, lineno=1222)
          68	LOAD_FAST(arg=4, lineno=1222)
          70	LOAD_FAST(arg=0, lineno=1222)
          72	LOAD_ATTR(arg=3, lineno=1222)
          74	LOAD_CONST(arg=1, lineno=1222)
          76	BINARY_SUBSCR(arg=None, lineno=1222)
          78	CALL_FUNCTION(arg=2, lineno=1222)
          80	BUILD_SLICE(arg=2, lineno=1222)
          82	BINARY_SUBSCR(arg=None, lineno=1222)
          84	CALL_METHOD(arg=1, lineno=1222)
          86	LOAD_FAST(arg=5, lineno=1222)
          88	BINARY_ADD(arg=None, lineno=1222)
          90	COMPARE_OP(arg=5, lineno=1222)
          92	INPLACE_AND(arg=None, lineno=1222)
          94	ROT_THREE(arg=None, lineno=1222)
          96	STORE_SUBSCR(arg=None, lineno=1222)
          98	LOAD_FAST(arg=7, lineno=1224)
         100	LOAD_CONST(arg=1, lineno=1224)
         102	BINARY_SUBSCR(arg=None, lineno=1224)
         104	POP_JUMP_IF_FALSE(arg=59, lineno=1224)
         106	LOAD_FAST(arg=6, lineno=1225)
         108	LOAD_CONST(arg=3, lineno=1225)
         110	BINARY_ADD(arg=None, lineno=1225)
         112	STORE_FAST(arg=8, lineno=1225)
         114	JUMP_FORWARD(arg=2, lineno=1225)
>        116	LOAD_CONST(arg=3, lineno=1227)
         118	STORE_FAST(arg=8, lineno=1227)
>        120	LOAD_FAST(arg=8, lineno=1229)
         122	LOAD_FAST(arg=0, lineno=1229)
         124	LOAD_ATTR(arg=3, lineno=1229)
         126	LOAD_CONST(arg=1, lineno=1229)
         128	BINARY_SUBSCR(arg=None, lineno=1229)
         130	COMPARE_OP(arg=0, lineno=1229)
         132	POP_JUMP_IF_FALSE(arg=167, lineno=1229)
>        134	LOAD_GLOBAL(arg=0, lineno=1230)
         136	LOAD_METHOD(arg=1, lineno=1230)
         138	LOAD_FAST(arg=0, lineno=1230)
         140	LOAD_GLOBAL(arg=1, lineno=1230)
         142	LOAD_CONST(arg=1, lineno=1230)
         144	LOAD_FAST(arg=8, lineno=1230)
         146	LOAD_FAST(arg=1, lineno=1230)
         148	BINARY_SUBTRACT(arg=None, lineno=1230)
         150	CALL_FUNCTION(arg=2, lineno=1230)
         152	LOAD_GLOBAL(arg=2, lineno=1230)
         154	LOAD_FAST(arg=8, lineno=1230)
         156	LOAD_FAST(arg=2, lineno=1230)
         158	BINARY_ADD(arg=None, lineno=1230)
         160	LOAD_FAST(arg=0, lineno=1230)
         162	LOAD_ATTR(arg=3, lineno=1230)
         164	LOAD_CONST(arg=1, lineno=1230)
         166	BINARY_SUBSCR(arg=None, lineno=1230)
         168	CALL_FUNCTION(arg=2, lineno=1230)
         170	BUILD_SLICE(arg=2, lineno=1230)
         172	BINARY_SUBSCR(arg=None, lineno=1230)
         174	CALL_METHOD(arg=1, lineno=1230)
         176	STORE_FAST(arg=9, lineno=1230)
         178	LOAD_FAST(arg=0, lineno=1233)
         180	LOAD_FAST(arg=8, lineno=1233)
         182	BINARY_SUBSCR(arg=None, lineno=1233)
         184	LOAD_FAST(arg=9, lineno=1233)
         186	COMPARE_OP(arg=2, lineno=1233)
         188	LOAD_FAST(arg=7, lineno=1233)
         190	LOAD_FAST(arg=8, lineno=1233)
         192	STORE_SUBSCR(arg=None, lineno=1233)
         194	LOAD_FAST(arg=7, lineno=1235)
         196	LOAD_FAST(arg=8, lineno=1235)
         198	BINARY_SUBSCR(arg=None, lineno=1235)
         200	POP_JUMP_IF_TRUE(arg=107, lineno=1235)
         202	LOAD_FAST(arg=8, lineno=1236)
         204	LOAD_CONST(arg=3, lineno=1236)
         206	INPLACE_ADD(arg=None, lineno=1236)
         208	STORE_FAST(arg=8, lineno=1236)
         210	JUMP_ABSOLUTE(arg=61, lineno=1237)
>        212	LOAD_GLOBAL(arg=0, lineno=1239)
         214	LOAD_METHOD(arg=4, lineno=1239)
         216	LOAD_FAST(arg=0, lineno=1239)
         218	LOAD_GLOBAL(arg=1, lineno=1239)
         220	LOAD_CONST(arg=1, lineno=1239)
         222	LOAD_FAST(arg=8, lineno=1239)
         224	LOAD_FAST(arg=3, lineno=1239)
         226	BINARY_SUBTRACT(arg=None, lineno=1239)
         228	CALL_FUNCTION(arg=2, lineno=1239)
         230	LOAD_GLOBAL(arg=2, lineno=1239)
         232	LOAD_FAST(arg=8, lineno=1239)
         234	LOAD_FAST(arg=4, lineno=1239)
         236	BINARY_ADD(arg=None, lineno=1239)
         238	LOAD_FAST(arg=0, lineno=1239)
         240	LOAD_ATTR(arg=3, lineno=1239)
         242	LOAD_CONST(arg=1, lineno=1239)
         244	BINARY_SUBSCR(arg=None, lineno=1239)
         246	CALL_FUNCTION(arg=2, lineno=1239)
         248	BUILD_SLICE(arg=2, lineno=1239)
         250	BINARY_SUBSCR(arg=None, lineno=1239)
         252	CALL_METHOD(arg=1, lineno=1239)
         254	STORE_FAST(arg=10, lineno=1239)
         256	LOAD_FAST(arg=7, lineno=1240)
         258	LOAD_FAST(arg=8, lineno=1240)
         260	DUP_TOP_TWO(arg=None, lineno=1240)
         262	BINARY_SUBSCR(arg=None, lineno=1240)
         264	LOAD_FAST(arg=0, lineno=1240)
         266	LOAD_FAST(arg=8, lineno=1240)
         268	BINARY_SUBSCR(arg=None, lineno=1240)
         270	LOAD_FAST(arg=10, lineno=1240)
         272	LOAD_FAST(arg=5, lineno=1240)
         274	BINARY_ADD(arg=None, lineno=1240)
         276	COMPARE_OP(arg=5, lineno=1240)
         278	INPLACE_AND(arg=None, lineno=1240)
         280	ROT_THREE(arg=None, lineno=1240)
         282	STORE_SUBSCR(arg=None, lineno=1240)
         284	LOAD_FAST(arg=7, lineno=1242)
         286	LOAD_FAST(arg=8, lineno=1242)
         288	BINARY_SUBSCR(arg=None, lineno=1242)
         290	POP_JUMP_IF_TRUE(arg=152, lineno=1242)
         292	LOAD_FAST(arg=8, lineno=1243)
         294	LOAD_CONST(arg=3, lineno=1243)
         296	INPLACE_ADD(arg=None, lineno=1243)
         298	STORE_FAST(arg=8, lineno=1243)
         300	JUMP_ABSOLUTE(arg=61, lineno=1244)
>        302	LOAD_FAST(arg=8, lineno=1247)
         304	LOAD_FAST(arg=6, lineno=1247)
         306	LOAD_CONST(arg=3, lineno=1247)
         308	BINARY_ADD(arg=None, lineno=1247)
         310	INPLACE_ADD(arg=None, lineno=1247)
         312	STORE_FAST(arg=8, lineno=1247)
         314	LOAD_FAST(arg=8, lineno=1229)
         316	LOAD_FAST(arg=0, lineno=1229)
         318	LOAD_ATTR(arg=3, lineno=1229)
         320	LOAD_CONST(arg=1, lineno=1229)
         322	BINARY_SUBSCR(arg=None, lineno=1229)
         324	COMPARE_OP(arg=0, lineno=1229)
         326	POP_JUMP_IF_TRUE(arg=68, lineno=1229)
         328	LOAD_CONST(arg=2, lineno=1229)
         330	RETURN_VALUE(arg=None, lineno=1229)
>        332	LOAD_CONST(arg=2, lineno=1229)
         334	RETURN_VALUE(arg=None, lineno=1229)
2025-01-31 15:31:41,784 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:31:41,784 - DEBUG - stack: []
2025-01-31 15:31:41,784 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:31:41,784 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=1209)
2025-01-31 15:31:41,784 - DEBUG - stack []
2025-01-31 15:31:41,784 - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1221)
2025-01-31 15:31:41,784 - DEBUG - stack []
2025-01-31 15:31:41,784 - DEBUG - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1221)
2025-01-31 15:31:41,784 - DEBUG - stack ['$x2.0']
2025-01-31 15:31:41,784 - DEBUG - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=1221)
2025-01-31 15:31:41,784 - DEBUG - stack ['$x2.0', '$const4.1']
2025-01-31 15:31:41,784 - DEBUG - dispatch pc=8, inst=LOAD_GLOBAL(arg=0, lineno=1221)
2025-01-31 15:31:41,784 - DEBUG - stack ['$6binary_subscr.2']
2025-01-31 15:31:41,784 - DEBUG - dispatch pc=10, inst=LOAD_METHOD(arg=1, lineno=1221)
2025-01-31 15:31:41,784 - DEBUG - stack ['$6binary_subscr.2', '$8load_global.3']
2025-01-31 15:31:41,784 - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=1221)
2025-01-31 15:31:41,784 - DEBUG - stack ['$6binary_subscr.2', '$10load_method.4']
2025-01-31 15:31:41,784 - DEBUG - dispatch pc=14, inst=LOAD_CONST(arg=2, lineno=1221)
2025-01-31 15:31:41,784 - DEBUG - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5']
2025-01-31 15:31:41,784 - DEBUG - dispatch pc=16, inst=LOAD_GLOBAL(arg=2, lineno=1221)
2025-01-31 15:31:41,784 - DEBUG - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$const14.6']
2025-01-31 15:31:41,784 - DEBUG - dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=1221)
2025-01-31 15:31:41,784 - DEBUG - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$const14.6', '$16load_global.7']
2025-01-31 15:31:41,784 - DEBUG - dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=1221)
2025-01-31 15:31:41,784 - DEBUG - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$const14.6', '$16load_global.7', '$post_max18.8']
2025-01-31 15:31:41,785 - DEBUG - dispatch pc=22, inst=LOAD_ATTR(arg=3, lineno=1221)
2025-01-31 15:31:41,785 - DEBUG - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$const14.6', '$16load_global.7', '$post_max18.8', '$x20.9']
2025-01-31 15:31:41,785 - DEBUG - dispatch pc=24, inst=LOAD_CONST(arg=1, lineno=1221)
2025-01-31 15:31:41,785 - DEBUG - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$const14.6', '$16load_global.7', '$post_max18.8', '$22load_attr.10']
2025-01-31 15:31:41,785 - DEBUG - dispatch pc=26, inst=BINARY_SUBSCR(arg=None, lineno=1221)
2025-01-31 15:31:41,785 - DEBUG - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$const14.6', '$16load_global.7', '$post_max18.8', '$22load_attr.10', '$const24.11']
2025-01-31 15:31:41,785 - DEBUG - dispatch pc=28, inst=CALL_FUNCTION(arg=2, lineno=1221)
2025-01-31 15:31:41,785 - DEBUG - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$const14.6', '$16load_global.7', '$post_max18.8', '$26binary_subscr.12']
2025-01-31 15:31:41,785 - DEBUG - dispatch pc=30, inst=BUILD_SLICE(arg=2, lineno=1221)
2025-01-31 15:31:41,785 - DEBUG - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$const14.6', '$28call_function.13']
2025-01-31 15:31:41,785 - DEBUG - dispatch pc=32, inst=BINARY_SUBSCR(arg=None, lineno=1221)
2025-01-31 15:31:41,785 - DEBUG - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$30build_slice.15']
2025-01-31 15:31:41,785 - DEBUG - dispatch pc=34, inst=CALL_METHOD(arg=1, lineno=1221)
2025-01-31 15:31:41,785 - DEBUG - stack ['$6binary_subscr.2', '$10load_method.4', '$32binary_subscr.16']
2025-01-31 15:31:41,785 - DEBUG - dispatch pc=36, inst=COMPARE_OP(arg=5, lineno=1221)
2025-01-31 15:31:41,785 - DEBUG - stack ['$6binary_subscr.2', '$34call_method.17']
2025-01-31 15:31:41,785 - DEBUG - dispatch pc=38, inst=LOAD_FAST(arg=7, lineno=1221)
2025-01-31 15:31:41,785 - DEBUG - stack ['$36compare_op.18']
2025-01-31 15:31:41,785 - DEBUG - dispatch pc=40, inst=LOAD_CONST(arg=1, lineno=1221)
2025-01-31 15:31:41,785 - DEBUG - stack ['$36compare_op.18', '$peaks38.19']
2025-01-31 15:31:41,785 - DEBUG - dispatch pc=42, inst=STORE_SUBSCR(arg=None, lineno=1221)
2025-01-31 15:31:41,785 - DEBUG - stack ['$36compare_op.18', '$peaks38.19', '$const40.20']
2025-01-31 15:31:41,785 - DEBUG - dispatch pc=44, inst=LOAD_FAST(arg=7, lineno=1222)
2025-01-31 15:31:41,785 - DEBUG - stack []
2025-01-31 15:31:41,785 - DEBUG - dispatch pc=46, inst=LOAD_CONST(arg=1, lineno=1222)
2025-01-31 15:31:41,785 - DEBUG - stack ['$peaks44.21']
2025-01-31 15:31:41,785 - DEBUG - dispatch pc=48, inst=DUP_TOP_TWO(arg=None, lineno=1222)
2025-01-31 15:31:41,785 - DEBUG - stack ['$peaks44.21', '$const46.22']
2025-01-31 15:31:41,786 - DEBUG - dispatch pc=50, inst=BINARY_SUBSCR(arg=None, lineno=1222)
2025-01-31 15:31:41,786 - DEBUG - stack ['$peaks44.21', '$const46.22', '$48dup_top_two.23', '$48dup_top_two.24']
2025-01-31 15:31:41,786 - DEBUG - dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=1222)
2025-01-31 15:31:41,786 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25']
2025-01-31 15:31:41,786 - DEBUG - dispatch pc=54, inst=LOAD_CONST(arg=1, lineno=1222)
2025-01-31 15:31:41,786 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$x52.26']
2025-01-31 15:31:41,786 - DEBUG - dispatch pc=56, inst=BINARY_SUBSCR(arg=None, lineno=1222)
2025-01-31 15:31:41,786 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$x52.26', '$const54.27']
2025-01-31 15:31:41,786 - DEBUG - dispatch pc=58, inst=LOAD_GLOBAL(arg=0, lineno=1222)
2025-01-31 15:31:41,786 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28']
2025-01-31 15:31:41,786 - DEBUG - dispatch pc=60, inst=LOAD_METHOD(arg=4, lineno=1222)
2025-01-31 15:31:41,786 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$58load_global.29']
2025-01-31 15:31:41,786 - DEBUG - dispatch pc=62, inst=LOAD_FAST(arg=0, lineno=1222)
2025-01-31 15:31:41,786 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30']
2025-01-31 15:31:41,786 - DEBUG - dispatch pc=64, inst=LOAD_CONST(arg=2, lineno=1222)
2025-01-31 15:31:41,786 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31']
2025-01-31 15:31:41,786 - DEBUG - dispatch pc=66, inst=LOAD_GLOBAL(arg=2, lineno=1222)
2025-01-31 15:31:41,786 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$const64.32']
2025-01-31 15:31:41,786 - DEBUG - dispatch pc=68, inst=LOAD_FAST(arg=4, lineno=1222)
2025-01-31 15:31:41,786 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$const64.32', '$66load_global.33']
2025-01-31 15:31:41,786 - DEBUG - dispatch pc=70, inst=LOAD_FAST(arg=0, lineno=1222)
2025-01-31 15:31:41,786 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$const64.32', '$66load_global.33', '$post_avg68.34']
2025-01-31 15:31:41,786 - DEBUG - dispatch pc=72, inst=LOAD_ATTR(arg=3, lineno=1222)
2025-01-31 15:31:41,786 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$const64.32', '$66load_global.33', '$post_avg68.34', '$x70.35']
2025-01-31 15:31:41,786 - DEBUG - dispatch pc=74, inst=LOAD_CONST(arg=1, lineno=1222)
2025-01-31 15:31:41,786 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$const64.32', '$66load_global.33', '$post_avg68.34', '$72load_attr.36']
2025-01-31 15:31:41,786 - DEBUG - dispatch pc=76, inst=BINARY_SUBSCR(arg=None, lineno=1222)
2025-01-31 15:31:41,786 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$const64.32', '$66load_global.33', '$post_avg68.34', '$72load_attr.36', '$const74.37']
2025-01-31 15:31:41,786 - DEBUG - dispatch pc=78, inst=CALL_FUNCTION(arg=2, lineno=1222)
2025-01-31 15:31:41,787 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$const64.32', '$66load_global.33', '$post_avg68.34', '$76binary_subscr.38']
2025-01-31 15:31:41,787 - DEBUG - dispatch pc=80, inst=BUILD_SLICE(arg=2, lineno=1222)
2025-01-31 15:31:41,787 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$const64.32', '$78call_function.39']
2025-01-31 15:31:41,787 - DEBUG - dispatch pc=82, inst=BINARY_SUBSCR(arg=None, lineno=1222)
2025-01-31 15:31:41,787 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$80build_slice.41']
2025-01-31 15:31:41,787 - DEBUG - dispatch pc=84, inst=CALL_METHOD(arg=1, lineno=1222)
2025-01-31 15:31:41,787 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$82binary_subscr.42']
2025-01-31 15:31:41,787 - DEBUG - dispatch pc=86, inst=LOAD_FAST(arg=5, lineno=1222)
2025-01-31 15:31:41,787 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$84call_method.43']
2025-01-31 15:31:41,787 - DEBUG - dispatch pc=88, inst=BINARY_ADD(arg=None, lineno=1222)
2025-01-31 15:31:41,787 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$84call_method.43', '$delta86.44']
2025-01-31 15:31:41,787 - DEBUG - dispatch pc=90, inst=COMPARE_OP(arg=5, lineno=1222)
2025-01-31 15:31:41,787 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$88binary_add.45']
2025-01-31 15:31:41,787 - DEBUG - dispatch pc=92, inst=INPLACE_AND(arg=None, lineno=1222)
2025-01-31 15:31:41,787 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$90compare_op.46']
2025-01-31 15:31:41,787 - DEBUG - dispatch pc=94, inst=ROT_THREE(arg=None, lineno=1222)
2025-01-31 15:31:41,787 - DEBUG - stack ['$peaks44.21', '$const46.22', '$92inplace_and.47']
2025-01-31 15:31:41,787 - DEBUG - dispatch pc=96, inst=STORE_SUBSCR(arg=None, lineno=1222)
2025-01-31 15:31:41,787 - DEBUG - stack ['$92inplace_and.47', '$peaks44.21', '$const46.22']
2025-01-31 15:31:41,787 - DEBUG - dispatch pc=98, inst=LOAD_FAST(arg=7, lineno=1224)
2025-01-31 15:31:41,787 - DEBUG - stack []
2025-01-31 15:31:41,787 - DEBUG - dispatch pc=100, inst=LOAD_CONST(arg=1, lineno=1224)
2025-01-31 15:31:41,787 - DEBUG - stack ['$peaks98.48']
2025-01-31 15:31:41,787 - DEBUG - dispatch pc=102, inst=BINARY_SUBSCR(arg=None, lineno=1224)
2025-01-31 15:31:41,787 - DEBUG - stack ['$peaks98.48', '$const100.49']
2025-01-31 15:31:41,787 - DEBUG - dispatch pc=104, inst=POP_JUMP_IF_FALSE(arg=59, lineno=1224)
2025-01-31 15:31:41,787 - DEBUG - stack ['$102binary_subscr.50']
2025-01-31 15:31:41,787 - DEBUG - end state. edges=[Edge(pc=106, stack=(), blockstack=(), npush=0), Edge(pc=116, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:41,788 - DEBUG - pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=116 nstack_initial=0)])
2025-01-31 15:31:41,788 - DEBUG - stack: []
2025-01-31 15:31:41,788 - DEBUG - state.pc_initial: State(pc_initial=106 nstack_initial=0)
2025-01-31 15:31:41,788 - DEBUG - dispatch pc=106, inst=LOAD_FAST(arg=6, lineno=1225)
2025-01-31 15:31:41,788 - DEBUG - stack []
2025-01-31 15:31:41,788 - DEBUG - dispatch pc=108, inst=LOAD_CONST(arg=3, lineno=1225)
2025-01-31 15:31:41,788 - DEBUG - stack ['$wait106.0']
2025-01-31 15:31:41,788 - DEBUG - dispatch pc=110, inst=BINARY_ADD(arg=None, lineno=1225)
2025-01-31 15:31:41,788 - DEBUG - stack ['$wait106.0', '$const108.1']
2025-01-31 15:31:41,788 - DEBUG - dispatch pc=112, inst=STORE_FAST(arg=8, lineno=1225)
2025-01-31 15:31:41,788 - DEBUG - stack ['$110binary_add.2']
2025-01-31 15:31:41,788 - DEBUG - dispatch pc=114, inst=JUMP_FORWARD(arg=2, lineno=1225)
2025-01-31 15:31:41,788 - DEBUG - stack []
2025-01-31 15:31:41,788 - DEBUG - end state. edges=[Edge(pc=120, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:41,788 - DEBUG - pending: deque([State(pc_initial=116 nstack_initial=0), State(pc_initial=120 nstack_initial=0)])
2025-01-31 15:31:41,788 - DEBUG - stack: []
2025-01-31 15:31:41,788 - DEBUG - state.pc_initial: State(pc_initial=116 nstack_initial=0)
2025-01-31 15:31:41,788 - DEBUG - dispatch pc=116, inst=LOAD_CONST(arg=3, lineno=1227)
2025-01-31 15:31:41,788 - DEBUG - stack []
2025-01-31 15:31:41,788 - DEBUG - dispatch pc=118, inst=STORE_FAST(arg=8, lineno=1227)
2025-01-31 15:31:41,788 - DEBUG - stack ['$const116.0']
2025-01-31 15:31:41,788 - DEBUG - end state. edges=[Edge(pc=120, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:41,788 - DEBUG - pending: deque([State(pc_initial=120 nstack_initial=0), State(pc_initial=120 nstack_initial=0)])
2025-01-31 15:31:41,788 - DEBUG - stack: []
2025-01-31 15:31:41,788 - DEBUG - state.pc_initial: State(pc_initial=120 nstack_initial=0)
2025-01-31 15:31:41,788 - DEBUG - dispatch pc=120, inst=LOAD_FAST(arg=8, lineno=1229)
2025-01-31 15:31:41,788 - DEBUG - stack []
2025-01-31 15:31:41,788 - DEBUG - dispatch pc=122, inst=LOAD_FAST(arg=0, lineno=1229)
2025-01-31 15:31:41,788 - DEBUG - stack ['$n120.0']
2025-01-31 15:31:41,789 - DEBUG - dispatch pc=124, inst=LOAD_ATTR(arg=3, lineno=1229)
2025-01-31 15:31:41,789 - DEBUG - stack ['$n120.0', '$x122.1']
2025-01-31 15:31:41,789 - DEBUG - dispatch pc=126, inst=LOAD_CONST(arg=1, lineno=1229)
2025-01-31 15:31:41,789 - DEBUG - stack ['$n120.0', '$124load_attr.2']
2025-01-31 15:31:41,789 - DEBUG - dispatch pc=128, inst=BINARY_SUBSCR(arg=None, lineno=1229)
2025-01-31 15:31:41,789 - DEBUG - stack ['$n120.0', '$124load_attr.2', '$const126.3']
2025-01-31 15:31:41,789 - DEBUG - dispatch pc=130, inst=COMPARE_OP(arg=0, lineno=1229)
2025-01-31 15:31:41,789 - DEBUG - stack ['$n120.0', '$128binary_subscr.4']
2025-01-31 15:31:41,789 - DEBUG - dispatch pc=132, inst=POP_JUMP_IF_FALSE(arg=167, lineno=1229)
2025-01-31 15:31:41,789 - DEBUG - stack ['$130compare_op.5']
2025-01-31 15:31:41,789 - DEBUG - end state. edges=[Edge(pc=134, stack=(), blockstack=(), npush=0), Edge(pc=332, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:41,789 - DEBUG - pending: deque([State(pc_initial=120 nstack_initial=0), State(pc_initial=134 nstack_initial=0), State(pc_initial=332 nstack_initial=0)])
2025-01-31 15:31:41,789 - DEBUG - pending: deque([State(pc_initial=134 nstack_initial=0), State(pc_initial=332 nstack_initial=0)])
2025-01-31 15:31:41,789 - DEBUG - stack: []
2025-01-31 15:31:41,789 - DEBUG - state.pc_initial: State(pc_initial=134 nstack_initial=0)
2025-01-31 15:31:41,789 - DEBUG - dispatch pc=134, inst=LOAD_GLOBAL(arg=0, lineno=1230)
2025-01-31 15:31:41,789 - DEBUG - stack []
2025-01-31 15:31:41,789 - DEBUG - dispatch pc=136, inst=LOAD_METHOD(arg=1, lineno=1230)
2025-01-31 15:31:41,789 - DEBUG - stack ['$134load_global.0']
2025-01-31 15:31:41,789 - DEBUG - dispatch pc=138, inst=LOAD_FAST(arg=0, lineno=1230)
2025-01-31 15:31:41,789 - DEBUG - stack ['$136load_method.1']
2025-01-31 15:31:41,789 - DEBUG - dispatch pc=140, inst=LOAD_GLOBAL(arg=1, lineno=1230)
2025-01-31 15:31:41,789 - DEBUG - stack ['$136load_method.1', '$x138.2']
2025-01-31 15:31:41,789 - DEBUG - dispatch pc=142, inst=LOAD_CONST(arg=1, lineno=1230)
2025-01-31 15:31:41,789 - DEBUG - stack ['$136load_method.1', '$x138.2', '$140load_global.3']
2025-01-31 15:31:41,789 - DEBUG - dispatch pc=144, inst=LOAD_FAST(arg=8, lineno=1230)
2025-01-31 15:31:41,789 - DEBUG - stack ['$136load_method.1', '$x138.2', '$140load_global.3', '$const142.4']
2025-01-31 15:31:41,789 - DEBUG - dispatch pc=146, inst=LOAD_FAST(arg=1, lineno=1230)
2025-01-31 15:31:41,790 - DEBUG - stack ['$136load_method.1', '$x138.2', '$140load_global.3', '$const142.4', '$n144.5']
2025-01-31 15:31:41,790 - DEBUG - dispatch pc=148, inst=BINARY_SUBTRACT(arg=None, lineno=1230)
2025-01-31 15:31:41,790 - DEBUG - stack ['$136load_method.1', '$x138.2', '$140load_global.3', '$const142.4', '$n144.5', '$pre_max146.6']
2025-01-31 15:31:41,790 - DEBUG - dispatch pc=150, inst=CALL_FUNCTION(arg=2, lineno=1230)
2025-01-31 15:31:41,790 - DEBUG - stack ['$136load_method.1', '$x138.2', '$140load_global.3', '$const142.4', '$148binary_subtract.7']
2025-01-31 15:31:41,790 - DEBUG - dispatch pc=152, inst=LOAD_GLOBAL(arg=2, lineno=1230)
2025-01-31 15:31:41,790 - DEBUG - stack ['$136load_method.1', '$x138.2', '$150call_function.8']
2025-01-31 15:31:41,790 - DEBUG - dispatch pc=154, inst=LOAD_FAST(arg=8, lineno=1230)
2025-01-31 15:31:41,790 - DEBUG - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$152load_global.9']
2025-01-31 15:31:41,790 - DEBUG - dispatch pc=156, inst=LOAD_FAST(arg=2, lineno=1230)
2025-01-31 15:31:41,790 - DEBUG - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$152load_global.9', '$n154.10']
2025-01-31 15:31:41,790 - DEBUG - dispatch pc=158, inst=BINARY_ADD(arg=None, lineno=1230)
2025-01-31 15:31:41,790 - DEBUG - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$152load_global.9', '$n154.10', '$post_max156.11']
2025-01-31 15:31:41,790 - DEBUG - dispatch pc=160, inst=LOAD_FAST(arg=0, lineno=1230)
2025-01-31 15:31:41,790 - DEBUG - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$152load_global.9', '$158binary_add.12']
2025-01-31 15:31:41,790 - DEBUG - dispatch pc=162, inst=LOAD_ATTR(arg=3, lineno=1230)
2025-01-31 15:31:41,790 - DEBUG - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$152load_global.9', '$158binary_add.12', '$x160.13']
2025-01-31 15:31:41,790 - DEBUG - dispatch pc=164, inst=LOAD_CONST(arg=1, lineno=1230)
2025-01-31 15:31:41,790 - DEBUG - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$152load_global.9', '$158binary_add.12', '$162load_attr.14']
2025-01-31 15:31:41,790 - DEBUG - dispatch pc=166, inst=BINARY_SUBSCR(arg=None, lineno=1230)
2025-01-31 15:31:41,790 - DEBUG - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$152load_global.9', '$158binary_add.12', '$162load_attr.14', '$const164.15']
2025-01-31 15:31:41,790 - DEBUG - dispatch pc=168, inst=CALL_FUNCTION(arg=2, lineno=1230)
2025-01-31 15:31:41,790 - DEBUG - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$152load_global.9', '$158binary_add.12', '$166binary_subscr.16']
2025-01-31 15:31:41,790 - DEBUG - dispatch pc=170, inst=BUILD_SLICE(arg=2, lineno=1230)
2025-01-31 15:31:41,790 - DEBUG - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$168call_function.17']
2025-01-31 15:31:41,790 - DEBUG - dispatch pc=172, inst=BINARY_SUBSCR(arg=None, lineno=1230)
2025-01-31 15:31:41,790 - DEBUG - stack ['$136load_method.1', '$x138.2', '$170build_slice.19']
2025-01-31 15:31:41,790 - DEBUG - dispatch pc=174, inst=CALL_METHOD(arg=1, lineno=1230)
2025-01-31 15:31:41,791 - DEBUG - stack ['$136load_method.1', '$172binary_subscr.20']
2025-01-31 15:31:41,791 - DEBUG - dispatch pc=176, inst=STORE_FAST(arg=9, lineno=1230)
2025-01-31 15:31:41,791 - DEBUG - stack ['$174call_method.21']
2025-01-31 15:31:41,791 - DEBUG - dispatch pc=178, inst=LOAD_FAST(arg=0, lineno=1233)
2025-01-31 15:31:41,791 - DEBUG - stack []
2025-01-31 15:31:41,791 - DEBUG - dispatch pc=180, inst=LOAD_FAST(arg=8, lineno=1233)
2025-01-31 15:31:41,791 - DEBUG - stack ['$x178.22']
2025-01-31 15:31:41,791 - DEBUG - dispatch pc=182, inst=BINARY_SUBSCR(arg=None, lineno=1233)
2025-01-31 15:31:41,791 - DEBUG - stack ['$x178.22', '$n180.23']
2025-01-31 15:31:41,791 - DEBUG - dispatch pc=184, inst=LOAD_FAST(arg=9, lineno=1233)
2025-01-31 15:31:41,791 - DEBUG - stack ['$182binary_subscr.24']
2025-01-31 15:31:41,791 - DEBUG - dispatch pc=186, inst=COMPARE_OP(arg=2, lineno=1233)
2025-01-31 15:31:41,791 - DEBUG - stack ['$182binary_subscr.24', '$maxn184.25']
2025-01-31 15:31:41,791 - DEBUG - dispatch pc=188, inst=LOAD_FAST(arg=7, lineno=1233)
2025-01-31 15:31:41,791 - DEBUG - stack ['$186compare_op.26']
2025-01-31 15:31:41,791 - DEBUG - dispatch pc=190, inst=LOAD_FAST(arg=8, lineno=1233)
2025-01-31 15:31:41,791 - DEBUG - stack ['$186compare_op.26', '$peaks188.27']
2025-01-31 15:31:41,791 - DEBUG - dispatch pc=192, inst=STORE_SUBSCR(arg=None, lineno=1233)
2025-01-31 15:31:41,791 - DEBUG - stack ['$186compare_op.26', '$peaks188.27', '$n190.28']
2025-01-31 15:31:41,791 - DEBUG - dispatch pc=194, inst=LOAD_FAST(arg=7, lineno=1235)
2025-01-31 15:31:41,791 - DEBUG - stack []
2025-01-31 15:31:41,791 - DEBUG - dispatch pc=196, inst=LOAD_FAST(arg=8, lineno=1235)
2025-01-31 15:31:41,791 - DEBUG - stack ['$peaks194.29']
2025-01-31 15:31:41,791 - DEBUG - dispatch pc=198, inst=BINARY_SUBSCR(arg=None, lineno=1235)
2025-01-31 15:31:41,791 - DEBUG - stack ['$peaks194.29', '$n196.30']
2025-01-31 15:31:41,791 - DEBUG - dispatch pc=200, inst=POP_JUMP_IF_TRUE(arg=107, lineno=1235)
2025-01-31 15:31:41,791 - DEBUG - stack ['$198binary_subscr.31']
2025-01-31 15:31:41,791 - DEBUG - end state. edges=[Edge(pc=202, stack=(), blockstack=(), npush=0), Edge(pc=212, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:41,791 - DEBUG - pending: deque([State(pc_initial=332 nstack_initial=0), State(pc_initial=202 nstack_initial=0), State(pc_initial=212 nstack_initial=0)])
2025-01-31 15:31:41,792 - DEBUG - stack: []
2025-01-31 15:31:41,792 - DEBUG - state.pc_initial: State(pc_initial=332 nstack_initial=0)
2025-01-31 15:31:41,792 - DEBUG - dispatch pc=332, inst=LOAD_CONST(arg=2, lineno=1229)
2025-01-31 15:31:41,792 - DEBUG - stack []
2025-01-31 15:31:41,792 - DEBUG - dispatch pc=334, inst=RETURN_VALUE(arg=None, lineno=1229)
2025-01-31 15:31:41,792 - DEBUG - stack ['$const332.0']
2025-01-31 15:31:41,792 - DEBUG - end state. edges=[]
2025-01-31 15:31:41,792 - DEBUG - pending: deque([State(pc_initial=202 nstack_initial=0), State(pc_initial=212 nstack_initial=0)])
2025-01-31 15:31:41,792 - DEBUG - stack: []
2025-01-31 15:31:41,792 - DEBUG - state.pc_initial: State(pc_initial=202 nstack_initial=0)
2025-01-31 15:31:41,792 - DEBUG - dispatch pc=202, inst=LOAD_FAST(arg=8, lineno=1236)
2025-01-31 15:31:41,792 - DEBUG - stack []
2025-01-31 15:31:41,792 - DEBUG - dispatch pc=204, inst=LOAD_CONST(arg=3, lineno=1236)
2025-01-31 15:31:41,792 - DEBUG - stack ['$n202.0']
2025-01-31 15:31:41,792 - DEBUG - dispatch pc=206, inst=INPLACE_ADD(arg=None, lineno=1236)
2025-01-31 15:31:41,792 - DEBUG - stack ['$n202.0', '$const204.1']
2025-01-31 15:31:41,792 - DEBUG - dispatch pc=208, inst=STORE_FAST(arg=8, lineno=1236)
2025-01-31 15:31:41,792 - DEBUG - stack ['$206inplace_add.2']
2025-01-31 15:31:41,792 - DEBUG - dispatch pc=210, inst=JUMP_ABSOLUTE(arg=61, lineno=1237)
2025-01-31 15:31:41,792 - DEBUG - stack []
2025-01-31 15:31:41,792 - DEBUG - end state. edges=[Edge(pc=120, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:41,792 - DEBUG - pending: deque([State(pc_initial=212 nstack_initial=0), State(pc_initial=120 nstack_initial=0)])
2025-01-31 15:31:41,792 - DEBUG - stack: []
2025-01-31 15:31:41,792 - DEBUG - state.pc_initial: State(pc_initial=212 nstack_initial=0)
2025-01-31 15:31:41,792 - DEBUG - dispatch pc=212, inst=LOAD_GLOBAL(arg=0, lineno=1239)
2025-01-31 15:31:41,792 - DEBUG - stack []
2025-01-31 15:31:41,792 - DEBUG - dispatch pc=214, inst=LOAD_METHOD(arg=4, lineno=1239)
2025-01-31 15:31:41,792 - DEBUG - stack ['$212load_global.0']
2025-01-31 15:31:41,792 - DEBUG - dispatch pc=216, inst=LOAD_FAST(arg=0, lineno=1239)
2025-01-31 15:31:41,792 - DEBUG - stack ['$214load_method.1']
2025-01-31 15:31:41,793 - DEBUG - dispatch pc=218, inst=LOAD_GLOBAL(arg=1, lineno=1239)
2025-01-31 15:31:41,793 - DEBUG - stack ['$214load_method.1', '$x216.2']
2025-01-31 15:31:41,793 - DEBUG - dispatch pc=220, inst=LOAD_CONST(arg=1, lineno=1239)
2025-01-31 15:31:41,793 - DEBUG - stack ['$214load_method.1', '$x216.2', '$218load_global.3']
2025-01-31 15:31:41,793 - DEBUG - dispatch pc=222, inst=LOAD_FAST(arg=8, lineno=1239)
2025-01-31 15:31:41,793 - DEBUG - stack ['$214load_method.1', '$x216.2', '$218load_global.3', '$const220.4']
2025-01-31 15:31:41,793 - DEBUG - dispatch pc=224, inst=LOAD_FAST(arg=3, lineno=1239)
2025-01-31 15:31:41,793 - DEBUG - stack ['$214load_method.1', '$x216.2', '$218load_global.3', '$const220.4', '$n222.5']
2025-01-31 15:31:41,793 - DEBUG - dispatch pc=226, inst=BINARY_SUBTRACT(arg=None, lineno=1239)
2025-01-31 15:31:41,793 - DEBUG - stack ['$214load_method.1', '$x216.2', '$218load_global.3', '$const220.4', '$n222.5', '$pre_avg224.6']
2025-01-31 15:31:41,793 - DEBUG - dispatch pc=228, inst=CALL_FUNCTION(arg=2, lineno=1239)
2025-01-31 15:31:41,793 - DEBUG - stack ['$214load_method.1', '$x216.2', '$218load_global.3', '$const220.4', '$226binary_subtract.7']
2025-01-31 15:31:41,793 - DEBUG - dispatch pc=230, inst=LOAD_GLOBAL(arg=2, lineno=1239)
2025-01-31 15:31:41,793 - DEBUG - stack ['$214load_method.1', '$x216.2', '$228call_function.8']
2025-01-31 15:31:41,793 - DEBUG - dispatch pc=232, inst=LOAD_FAST(arg=8, lineno=1239)
2025-01-31 15:31:41,793 - DEBUG - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$230load_global.9']
2025-01-31 15:31:41,793 - DEBUG - dispatch pc=234, inst=LOAD_FAST(arg=4, lineno=1239)
2025-01-31 15:31:41,793 - DEBUG - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$230load_global.9', '$n232.10']
2025-01-31 15:31:41,793 - DEBUG - dispatch pc=236, inst=BINARY_ADD(arg=None, lineno=1239)
2025-01-31 15:31:41,793 - DEBUG - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$230load_global.9', '$n232.10', '$post_avg234.11']
2025-01-31 15:31:41,793 - DEBUG - dispatch pc=238, inst=LOAD_FAST(arg=0, lineno=1239)
2025-01-31 15:31:41,793 - DEBUG - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$230load_global.9', '$236binary_add.12']
2025-01-31 15:31:41,793 - DEBUG - dispatch pc=240, inst=LOAD_ATTR(arg=3, lineno=1239)
2025-01-31 15:31:41,793 - DEBUG - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$230load_global.9', '$236binary_add.12', '$x238.13']
2025-01-31 15:31:41,793 - DEBUG - dispatch pc=242, inst=LOAD_CONST(arg=1, lineno=1239)
2025-01-31 15:31:41,793 - DEBUG - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$230load_global.9', '$236binary_add.12', '$240load_attr.14']
2025-01-31 15:31:41,793 - DEBUG - dispatch pc=244, inst=BINARY_SUBSCR(arg=None, lineno=1239)
2025-01-31 15:31:41,793 - DEBUG - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$230load_global.9', '$236binary_add.12', '$240load_attr.14', '$const242.15']
2025-01-31 15:31:41,793 - DEBUG - dispatch pc=246, inst=CALL_FUNCTION(arg=2, lineno=1239)
2025-01-31 15:31:41,794 - DEBUG - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$230load_global.9', '$236binary_add.12', '$244binary_subscr.16']
2025-01-31 15:31:41,794 - DEBUG - dispatch pc=248, inst=BUILD_SLICE(arg=2, lineno=1239)
2025-01-31 15:31:41,794 - DEBUG - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$246call_function.17']
2025-01-31 15:31:41,794 - DEBUG - dispatch pc=250, inst=BINARY_SUBSCR(arg=None, lineno=1239)
2025-01-31 15:31:41,794 - DEBUG - stack ['$214load_method.1', '$x216.2', '$248build_slice.19']
2025-01-31 15:31:41,794 - DEBUG - dispatch pc=252, inst=CALL_METHOD(arg=1, lineno=1239)
2025-01-31 15:31:41,794 - DEBUG - stack ['$214load_method.1', '$250binary_subscr.20']
2025-01-31 15:31:41,794 - DEBUG - dispatch pc=254, inst=STORE_FAST(arg=10, lineno=1239)
2025-01-31 15:31:41,794 - DEBUG - stack ['$252call_method.21']
2025-01-31 15:31:41,794 - DEBUG - dispatch pc=256, inst=LOAD_FAST(arg=7, lineno=1240)
2025-01-31 15:31:41,794 - DEBUG - stack []
2025-01-31 15:31:41,794 - DEBUG - dispatch pc=258, inst=LOAD_FAST(arg=8, lineno=1240)
2025-01-31 15:31:41,794 - DEBUG - stack ['$peaks256.22']
2025-01-31 15:31:41,794 - DEBUG - dispatch pc=260, inst=DUP_TOP_TWO(arg=None, lineno=1240)
2025-01-31 15:31:41,794 - DEBUG - stack ['$peaks256.22', '$n258.23']
2025-01-31 15:31:41,794 - DEBUG - dispatch pc=262, inst=BINARY_SUBSCR(arg=None, lineno=1240)
2025-01-31 15:31:41,794 - DEBUG - stack ['$peaks256.22', '$n258.23', '$260dup_top_two.24', '$260dup_top_two.25']
2025-01-31 15:31:41,794 - DEBUG - dispatch pc=264, inst=LOAD_FAST(arg=0, lineno=1240)
2025-01-31 15:31:41,794 - DEBUG - stack ['$peaks256.22', '$n258.23', '$262binary_subscr.26']
2025-01-31 15:31:41,794 - DEBUG - dispatch pc=266, inst=LOAD_FAST(arg=8, lineno=1240)
2025-01-31 15:31:41,794 - DEBUG - stack ['$peaks256.22', '$n258.23', '$262binary_subscr.26', '$x264.27']
2025-01-31 15:31:41,794 - DEBUG - dispatch pc=268, inst=BINARY_SUBSCR(arg=None, lineno=1240)
2025-01-31 15:31:41,794 - DEBUG - stack ['$peaks256.22', '$n258.23', '$262binary_subscr.26', '$x264.27', '$n266.28']
2025-01-31 15:31:41,794 - DEBUG - dispatch pc=270, inst=LOAD_FAST(arg=10, lineno=1240)
2025-01-31 15:31:41,794 - DEBUG - stack ['$peaks256.22', '$n258.23', '$262binary_subscr.26', '$268binary_subscr.29']
2025-01-31 15:31:41,794 - DEBUG - dispatch pc=272, inst=LOAD_FAST(arg=5, lineno=1240)
2025-01-31 15:31:41,794 - DEBUG - stack ['$peaks256.22', '$n258.23', '$262binary_subscr.26', '$268binary_subscr.29', '$avgn270.30']
2025-01-31 15:31:41,794 - DEBUG - dispatch pc=274, inst=BINARY_ADD(arg=None, lineno=1240)
2025-01-31 15:31:41,795 - DEBUG - stack ['$peaks256.22', '$n258.23', '$262binary_subscr.26', '$268binary_subscr.29', '$avgn270.30', '$delta272.31']
2025-01-31 15:31:41,795 - DEBUG - dispatch pc=276, inst=COMPARE_OP(arg=5, lineno=1240)
2025-01-31 15:31:41,795 - DEBUG - stack ['$peaks256.22', '$n258.23', '$262binary_subscr.26', '$268binary_subscr.29', '$274binary_add.32']
2025-01-31 15:31:41,795 - DEBUG - dispatch pc=278, inst=INPLACE_AND(arg=None, lineno=1240)
2025-01-31 15:31:41,795 - DEBUG - stack ['$peaks256.22', '$n258.23', '$262binary_subscr.26', '$276compare_op.33']
2025-01-31 15:31:41,795 - DEBUG - dispatch pc=280, inst=ROT_THREE(arg=None, lineno=1240)
2025-01-31 15:31:41,795 - DEBUG - stack ['$peaks256.22', '$n258.23', '$278inplace_and.34']
2025-01-31 15:31:41,795 - DEBUG - dispatch pc=282, inst=STORE_SUBSCR(arg=None, lineno=1240)
2025-01-31 15:31:41,795 - DEBUG - stack ['$278inplace_and.34', '$peaks256.22', '$n258.23']
2025-01-31 15:31:41,795 - DEBUG - dispatch pc=284, inst=LOAD_FAST(arg=7, lineno=1242)
2025-01-31 15:31:41,795 - DEBUG - stack []
2025-01-31 15:31:41,795 - DEBUG - dispatch pc=286, inst=LOAD_FAST(arg=8, lineno=1242)
2025-01-31 15:31:41,795 - DEBUG - stack ['$peaks284.35']
2025-01-31 15:31:41,795 - DEBUG - dispatch pc=288, inst=BINARY_SUBSCR(arg=None, lineno=1242)
2025-01-31 15:31:41,795 - DEBUG - stack ['$peaks284.35', '$n286.36']
2025-01-31 15:31:41,795 - DEBUG - dispatch pc=290, inst=POP_JUMP_IF_TRUE(arg=152, lineno=1242)
2025-01-31 15:31:41,795 - DEBUG - stack ['$288binary_subscr.37']
2025-01-31 15:31:41,795 - DEBUG - end state. edges=[Edge(pc=292, stack=(), blockstack=(), npush=0), Edge(pc=302, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:41,795 - DEBUG - pending: deque([State(pc_initial=120 nstack_initial=0), State(pc_initial=292 nstack_initial=0), State(pc_initial=302 nstack_initial=0)])
2025-01-31 15:31:41,795 - DEBUG - pending: deque([State(pc_initial=292 nstack_initial=0), State(pc_initial=302 nstack_initial=0)])
2025-01-31 15:31:41,795 - DEBUG - stack: []
2025-01-31 15:31:41,795 - DEBUG - state.pc_initial: State(pc_initial=292 nstack_initial=0)
2025-01-31 15:31:41,795 - DEBUG - dispatch pc=292, inst=LOAD_FAST(arg=8, lineno=1243)
2025-01-31 15:31:41,795 - DEBUG - stack []
2025-01-31 15:31:41,795 - DEBUG - dispatch pc=294, inst=LOAD_CONST(arg=3, lineno=1243)
2025-01-31 15:31:41,795 - DEBUG - stack ['$n292.0']
2025-01-31 15:31:41,795 - DEBUG - dispatch pc=296, inst=INPLACE_ADD(arg=None, lineno=1243)
2025-01-31 15:31:41,795 - DEBUG - stack ['$n292.0', '$const294.1']
2025-01-31 15:31:41,795 - DEBUG - dispatch pc=298, inst=STORE_FAST(arg=8, lineno=1243)
2025-01-31 15:31:41,796 - DEBUG - stack ['$296inplace_add.2']
2025-01-31 15:31:41,796 - DEBUG - dispatch pc=300, inst=JUMP_ABSOLUTE(arg=61, lineno=1244)
2025-01-31 15:31:41,796 - DEBUG - stack []
2025-01-31 15:31:41,796 - DEBUG - end state. edges=[Edge(pc=120, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:41,796 - DEBUG - pending: deque([State(pc_initial=302 nstack_initial=0), State(pc_initial=120 nstack_initial=0)])
2025-01-31 15:31:41,796 - DEBUG - stack: []
2025-01-31 15:31:41,796 - DEBUG - state.pc_initial: State(pc_initial=302 nstack_initial=0)
2025-01-31 15:31:41,796 - DEBUG - dispatch pc=302, inst=LOAD_FAST(arg=8, lineno=1247)
2025-01-31 15:31:41,796 - DEBUG - stack []
2025-01-31 15:31:41,796 - DEBUG - dispatch pc=304, inst=LOAD_FAST(arg=6, lineno=1247)
2025-01-31 15:31:41,796 - DEBUG - stack ['$n302.0']
2025-01-31 15:31:41,796 - DEBUG - dispatch pc=306, inst=LOAD_CONST(arg=3, lineno=1247)
2025-01-31 15:31:41,796 - DEBUG - stack ['$n302.0', '$wait304.1']
2025-01-31 15:31:41,796 - DEBUG - dispatch pc=308, inst=BINARY_ADD(arg=None, lineno=1247)
2025-01-31 15:31:41,796 - DEBUG - stack ['$n302.0', '$wait304.1', '$const306.2']
2025-01-31 15:31:41,796 - DEBUG - dispatch pc=310, inst=INPLACE_ADD(arg=None, lineno=1247)
2025-01-31 15:31:41,796 - DEBUG - stack ['$n302.0', '$308binary_add.3']
2025-01-31 15:31:41,796 - DEBUG - dispatch pc=312, inst=STORE_FAST(arg=8, lineno=1247)
2025-01-31 15:31:41,796 - DEBUG - stack ['$310inplace_add.4']
2025-01-31 15:31:41,796 - DEBUG - dispatch pc=314, inst=LOAD_FAST(arg=8, lineno=1229)
2025-01-31 15:31:41,796 - DEBUG - stack []
2025-01-31 15:31:41,796 - DEBUG - dispatch pc=316, inst=LOAD_FAST(arg=0, lineno=1229)
2025-01-31 15:31:41,796 - DEBUG - stack ['$n314.5']
2025-01-31 15:31:41,796 - DEBUG - dispatch pc=318, inst=LOAD_ATTR(arg=3, lineno=1229)
2025-01-31 15:31:41,796 - DEBUG - stack ['$n314.5', '$x316.6']
2025-01-31 15:31:41,796 - DEBUG - dispatch pc=320, inst=LOAD_CONST(arg=1, lineno=1229)
2025-01-31 15:31:41,796 - DEBUG - stack ['$n314.5', '$318load_attr.7']
2025-01-31 15:31:41,796 - DEBUG - dispatch pc=322, inst=BINARY_SUBSCR(arg=None, lineno=1229)
2025-01-31 15:31:41,796 - DEBUG - stack ['$n314.5', '$318load_attr.7', '$const320.8']
2025-01-31 15:31:41,797 - DEBUG - dispatch pc=324, inst=COMPARE_OP(arg=0, lineno=1229)
2025-01-31 15:31:41,797 - DEBUG - stack ['$n314.5', '$322binary_subscr.9']
2025-01-31 15:31:41,797 - DEBUG - dispatch pc=326, inst=POP_JUMP_IF_TRUE(arg=68, lineno=1229)
2025-01-31 15:31:41,797 - DEBUG - stack ['$324compare_op.10']
2025-01-31 15:31:41,797 - DEBUG - end state. edges=[Edge(pc=328, stack=(), blockstack=(), npush=0), Edge(pc=134, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:41,797 - DEBUG - pending: deque([State(pc_initial=120 nstack_initial=0), State(pc_initial=328 nstack_initial=0), State(pc_initial=134 nstack_initial=0)])
2025-01-31 15:31:41,797 - DEBUG - pending: deque([State(pc_initial=328 nstack_initial=0), State(pc_initial=134 nstack_initial=0)])
2025-01-31 15:31:41,797 - DEBUG - stack: []
2025-01-31 15:31:41,797 - DEBUG - state.pc_initial: State(pc_initial=328 nstack_initial=0)
2025-01-31 15:31:41,797 - DEBUG - dispatch pc=328, inst=LOAD_CONST(arg=2, lineno=1229)
2025-01-31 15:31:41,797 - DEBUG - stack []
2025-01-31 15:31:41,797 - DEBUG - dispatch pc=330, inst=RETURN_VALUE(arg=None, lineno=1229)
2025-01-31 15:31:41,797 - DEBUG - stack ['$const328.0']
2025-01-31 15:31:41,797 - DEBUG - end state. edges=[]
2025-01-31 15:31:41,797 - DEBUG - pending: deque([State(pc_initial=134 nstack_initial=0)])
2025-01-31 15:31:41,797 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:31:41,797 - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=106 nstack_initial=0): set(),
             State(pc_initial=116 nstack_initial=0): set(),
             State(pc_initial=120 nstack_initial=0): set(),
             State(pc_initial=134 nstack_initial=0): set(),
             State(pc_initial=202 nstack_initial=0): set(),
             State(pc_initial=212 nstack_initial=0): set(),
             State(pc_initial=292 nstack_initial=0): set(),
             State(pc_initial=302 nstack_initial=0): set(),
             State(pc_initial=328 nstack_initial=0): set(),
             State(pc_initial=332 nstack_initial=0): set()})
2025-01-31 15:31:41,797 - DEBUG - defmap: {}
2025-01-31 15:31:41,798 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:41,798 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:41,798 - DEBUG - keep phismap: {}
2025-01-31 15:31:41,798 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-01-31 15:31:41,798 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:31:41,798 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'res': '$8load_global.3'}), (10, {'item': '$8load_global.3', 'res': '$10load_method.4'}), (12, {'res': '$x12.5'}), (14, {'res': '$const14.6'}), (16, {'res': '$16load_global.7'}), (18, {'res': '$post_max18.8'}), (20, {'res': '$x20.9'}), (22, {'item': '$x20.9', 'res': '$22load_attr.10'}), (24, {'res': '$const24.11'}), (26, {'index': '$const24.11', 'target': '$22load_attr.10', 'res': '$26binary_subscr.12'}), (28, {'func': '$16load_global.7', 'args': ['$post_max18.8', '$26binary_subscr.12'], 'res': '$28call_function.13'}), (30, {'start': '$const14.6', 'stop': '$28call_function.13', 'step': None, 'res': '$30build_slice.15', 'slicevar': '$30build_slice.14'}), (32, {'index': '$30build_slice.15', 'target': '$x12.5', 'res': '$32binary_subscr.16'}), (34, {'func': '$10load_method.4', 'args': ['$32binary_subscr.16'], 'res': '$34call_method.17'}), (36, {'lhs': '$6binary_subscr.2', 'rhs': '$34call_method.17', 'res': '$36compare_op.18'}), (38, {'res': '$peaks38.19'}), (40, {'res': '$const40.20'}), (42, {'target': '$peaks38.19', 'index': '$const40.20', 'value': '$36compare_op.18'}), (44, {'res': '$peaks44.21'}), (46, {'res': '$const46.22'}), (48, {'orig': ['$peaks44.21', '$const46.22'], 'duped': ['$48dup_top_two.23', '$48dup_top_two.24']}), (50, {'index': '$48dup_top_two.24', 'target': '$48dup_top_two.23', 'res': '$50binary_subscr.25'}), (52, {'res': '$x52.26'}), (54, {'res': '$const54.27'}), (56, {'index': '$const54.27', 'target': '$x52.26', 'res': '$56binary_subscr.28'}), (58, {'res': '$58load_global.29'}), (60, {'item': '$58load_global.29', 'res': '$60load_method.30'}), (62, {'res': '$x62.31'}), (64, {'res': '$const64.32'}), (66, {'res': '$66load_global.33'}), (68, {'res': '$post_avg68.34'}), (70, {'res': '$x70.35'}), (72, {'item': '$x70.35', 'res': '$72load_attr.36'}), (74, {'res': '$const74.37'}), (76, {'index': '$const74.37', 'target': '$72load_attr.36', 'res': '$76binary_subscr.38'}), (78, {'func': '$66load_global.33', 'args': ['$post_avg68.34', '$76binary_subscr.38'], 'res': '$78call_function.39'}), (80, {'start': '$const64.32', 'stop': '$78call_function.39', 'step': None, 'res': '$80build_slice.41', 'slicevar': '$80build_slice.40'}), (82, {'index': '$80build_slice.41', 'target': '$x62.31', 'res': '$82binary_subscr.42'}), (84, {'func': '$60load_method.30', 'args': ['$82binary_subscr.42'], 'res': '$84call_method.43'}), (86, {'res': '$delta86.44'}), (88, {'lhs': '$84call_method.43', 'rhs': '$delta86.44', 'res': '$88binary_add.45'}), (90, {'lhs': '$56binary_subscr.28', 'rhs': '$88binary_add.45', 'res': '$90compare_op.46'}), (92, {'lhs': '$50binary_subscr.25', 'rhs': '$90compare_op.46', 'res': '$92inplace_and.47'}), (96, {'target': '$peaks44.21', 'index': '$const46.22', 'value': '$92inplace_and.47'}), (98, {'res': '$peaks98.48'}), (100, {'res': '$const100.49'}), (102, {'index': '$const100.49', 'target': '$peaks98.48', 'res': '$102binary_subscr.50'}), (104, {'pred': '$102binary_subscr.50'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={106: (), 116: ()})
2025-01-31 15:31:41,798 - DEBUG - block_infos State(pc_initial=106 nstack_initial=0):
AdaptBlockInfo(insts=((106, {'res': '$wait106.0'}), (108, {'res': '$const108.1'}), (110, {'lhs': '$wait106.0', 'rhs': '$const108.1', 'res': '$110binary_add.2'}), (112, {'value': '$110binary_add.2'}), (114, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={120: ()})
2025-01-31 15:31:41,798 - DEBUG - block_infos State(pc_initial=116 nstack_initial=0):
AdaptBlockInfo(insts=((116, {'res': '$const116.0'}), (118, {'value': '$const116.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={120: ()})
2025-01-31 15:31:41,798 - DEBUG - block_infos State(pc_initial=120 nstack_initial=0):
AdaptBlockInfo(insts=((120, {'res': '$n120.0'}), (122, {'res': '$x122.1'}), (124, {'item': '$x122.1', 'res': '$124load_attr.2'}), (126, {'res': '$const126.3'}), (128, {'index': '$const126.3', 'target': '$124load_attr.2', 'res': '$128binary_subscr.4'}), (130, {'lhs': '$n120.0', 'rhs': '$128binary_subscr.4', 'res': '$130compare_op.5'}), (132, {'pred': '$130compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={134: (), 332: ()})
2025-01-31 15:31:41,798 - DEBUG - block_infos State(pc_initial=134 nstack_initial=0):
AdaptBlockInfo(insts=((134, {'res': '$134load_global.0'}), (136, {'item': '$134load_global.0', 'res': '$136load_method.1'}), (138, {'res': '$x138.2'}), (140, {'res': '$140load_global.3'}), (142, {'res': '$const142.4'}), (144, {'res': '$n144.5'}), (146, {'res': '$pre_max146.6'}), (148, {'lhs': '$n144.5', 'rhs': '$pre_max146.6', 'res': '$148binary_subtract.7'}), (150, {'func': '$140load_global.3', 'args': ['$const142.4', '$148binary_subtract.7'], 'res': '$150call_function.8'}), (152, {'res': '$152load_global.9'}), (154, {'res': '$n154.10'}), (156, {'res': '$post_max156.11'}), (158, {'lhs': '$n154.10', 'rhs': '$post_max156.11', 'res': '$158binary_add.12'}), (160, {'res': '$x160.13'}), (162, {'item': '$x160.13', 'res': '$162load_attr.14'}), (164, {'res': '$const164.15'}), (166, {'index': '$const164.15', 'target': '$162load_attr.14', 'res': '$166binary_subscr.16'}), (168, {'func': '$152load_global.9', 'args': ['$158binary_add.12', '$166binary_subscr.16'], 'res': '$168call_function.17'}), (170, {'start': '$150call_function.8', 'stop': '$168call_function.17', 'step': None, 'res': '$170build_slice.19', 'slicevar': '$170build_slice.18'}), (172, {'index': '$170build_slice.19', 'target': '$x138.2', 'res': '$172binary_subscr.20'}), (174, {'func': '$136load_method.1', 'args': ['$172binary_subscr.20'], 'res': '$174call_method.21'}), (176, {'value': '$174call_method.21'}), (178, {'res': '$x178.22'}), (180, {'res': '$n180.23'}), (182, {'index': '$n180.23', 'target': '$x178.22', 'res': '$182binary_subscr.24'}), (184, {'res': '$maxn184.25'}), (186, {'lhs': '$182binary_subscr.24', 'rhs': '$maxn184.25', 'res': '$186compare_op.26'}), (188, {'res': '$peaks188.27'}), (190, {'res': '$n190.28'}), (192, {'target': '$peaks188.27', 'index': '$n190.28', 'value': '$186compare_op.26'}), (194, {'res': '$peaks194.29'}), (196, {'res': '$n196.30'}), (198, {'index': '$n196.30', 'target': '$peaks194.29', 'res': '$198binary_subscr.31'}), (200, {'pred': '$198binary_subscr.31'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={202: (), 212: ()})
2025-01-31 15:31:41,798 - DEBUG - block_infos State(pc_initial=202 nstack_initial=0):
AdaptBlockInfo(insts=((202, {'res': '$n202.0'}), (204, {'res': '$const204.1'}), (206, {'lhs': '$n202.0', 'rhs': '$const204.1', 'res': '$206inplace_add.2'}), (208, {'value': '$206inplace_add.2'}), (210, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={120: ()})
2025-01-31 15:31:41,798 - DEBUG - block_infos State(pc_initial=212 nstack_initial=0):
AdaptBlockInfo(insts=((212, {'res': '$212load_global.0'}), (214, {'item': '$212load_global.0', 'res': '$214load_method.1'}), (216, {'res': '$x216.2'}), (218, {'res': '$218load_global.3'}), (220, {'res': '$const220.4'}), (222, {'res': '$n222.5'}), (224, {'res': '$pre_avg224.6'}), (226, {'lhs': '$n222.5', 'rhs': '$pre_avg224.6', 'res': '$226binary_subtract.7'}), (228, {'func': '$218load_global.3', 'args': ['$const220.4', '$226binary_subtract.7'], 'res': '$228call_function.8'}), (230, {'res': '$230load_global.9'}), (232, {'res': '$n232.10'}), (234, {'res': '$post_avg234.11'}), (236, {'lhs': '$n232.10', 'rhs': '$post_avg234.11', 'res': '$236binary_add.12'}), (238, {'res': '$x238.13'}), (240, {'item': '$x238.13', 'res': '$240load_attr.14'}), (242, {'res': '$const242.15'}), (244, {'index': '$const242.15', 'target': '$240load_attr.14', 'res': '$244binary_subscr.16'}), (246, {'func': '$230load_global.9', 'args': ['$236binary_add.12', '$244binary_subscr.16'], 'res': '$246call_function.17'}), (248, {'start': '$228call_function.8', 'stop': '$246call_function.17', 'step': None, 'res': '$248build_slice.19', 'slicevar': '$248build_slice.18'}), (250, {'index': '$248build_slice.19', 'target': '$x216.2', 'res': '$250binary_subscr.20'}), (252, {'func': '$214load_method.1', 'args': ['$250binary_subscr.20'], 'res': '$252call_method.21'}), (254, {'value': '$252call_method.21'}), (256, {'res': '$peaks256.22'}), (258, {'res': '$n258.23'}), (260, {'orig': ['$peaks256.22', '$n258.23'], 'duped': ['$260dup_top_two.24', '$260dup_top_two.25']}), (262, {'index': '$260dup_top_two.25', 'target': '$260dup_top_two.24', 'res': '$262binary_subscr.26'}), (264, {'res': '$x264.27'}), (266, {'res': '$n266.28'}), (268, {'index': '$n266.28', 'target': '$x264.27', 'res': '$268binary_subscr.29'}), (270, {'res': '$avgn270.30'}), (272, {'res': '$delta272.31'}), (274, {'lhs': '$avgn270.30', 'rhs': '$delta272.31', 'res': '$274binary_add.32'}), (276, {'lhs': '$268binary_subscr.29', 'rhs': '$274binary_add.32', 'res': '$276compare_op.33'}), (278, {'lhs': '$262binary_subscr.26', 'rhs': '$276compare_op.33', 'res': '$278inplace_and.34'}), (282, {'target': '$peaks256.22', 'index': '$n258.23', 'value': '$278inplace_and.34'}), (284, {'res': '$peaks284.35'}), (286, {'res': '$n286.36'}), (288, {'index': '$n286.36', 'target': '$peaks284.35', 'res': '$288binary_subscr.37'}), (290, {'pred': '$288binary_subscr.37'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={292: (), 302: ()})
2025-01-31 15:31:41,798 - DEBUG - block_infos State(pc_initial=292 nstack_initial=0):
AdaptBlockInfo(insts=((292, {'res': '$n292.0'}), (294, {'res': '$const294.1'}), (296, {'lhs': '$n292.0', 'rhs': '$const294.1', 'res': '$296inplace_add.2'}), (298, {'value': '$296inplace_add.2'}), (300, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={120: ()})
2025-01-31 15:31:41,798 - DEBUG - block_infos State(pc_initial=302 nstack_initial=0):
AdaptBlockInfo(insts=((302, {'res': '$n302.0'}), (304, {'res': '$wait304.1'}), (306, {'res': '$const306.2'}), (308, {'lhs': '$wait304.1', 'rhs': '$const306.2', 'res': '$308binary_add.3'}), (310, {'lhs': '$n302.0', 'rhs': '$308binary_add.3', 'res': '$310inplace_add.4'}), (312, {'value': '$310inplace_add.4'}), (314, {'res': '$n314.5'}), (316, {'res': '$x316.6'}), (318, {'item': '$x316.6', 'res': '$318load_attr.7'}), (320, {'res': '$const320.8'}), (322, {'index': '$const320.8', 'target': '$318load_attr.7', 'res': '$322binary_subscr.9'}), (324, {'lhs': '$n314.5', 'rhs': '$322binary_subscr.9', 'res': '$324compare_op.10'}), (326, {'pred': '$324compare_op.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={328: (), 134: ()})
2025-01-31 15:31:41,798 - DEBUG - block_infos State(pc_initial=328 nstack_initial=0):
AdaptBlockInfo(insts=((328, {'res': '$const328.0'}), (330, {'retval': '$const328.0', 'castval': '$330return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:41,799 - DEBUG - block_infos State(pc_initial=332 nstack_initial=0):
AdaptBlockInfo(insts=((332, {'res': '$const332.0'}), (334, {'retval': '$const332.0', 'castval': '$334return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:41,801 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    pre_max = arg(1, name=pre_max)           ['pre_max']
    post_max = arg(2, name=post_max)         ['post_max']
    pre_avg = arg(3, name=pre_avg)           ['pre_avg']
    post_avg = arg(4, name=post_avg)         ['post_avg']
    delta = arg(5, name=delta)               ['delta']
    wait = arg(6, name=wait)                 ['wait']
    peaks = arg(7, name=peaks)               ['peaks']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6binary_subscr.2 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$6binary_subscr.2', '$const4.1', 'x']
    $8load_global.3 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>) ['$8load_global.3']
    $10load_method.4 = getattr(value=$8load_global.3, attr=max) ['$10load_method.4', '$8load_global.3']
    $const14.6 = const(NoneType, None)       ['$const14.6']
    $16load_global.7 = global(min: <built-in function min>) ['$16load_global.7']
    $22load_attr.10 = getattr(value=x, attr=shape) ['$22load_attr.10', 'x']
    $const24.11 = const(int, 0)              ['$const24.11']
    $26binary_subscr.12 = getitem(value=$22load_attr.10, index=$const24.11, fn=<built-in function getitem>) ['$22load_attr.10', '$26binary_subscr.12', '$const24.11']
    $28call_function.13 = call $16load_global.7(post_max, $26binary_subscr.12, func=$16load_global.7, args=[Var(post_max, utils.py:1209), Var($26binary_subscr.12, utils.py:1221)], kws=(), vararg=None, varkwarg=None, target=None) ['$16load_global.7', '$26binary_subscr.12', '$28call_function.13', 'post_max']
    $30build_slice.14 = global(slice: <class 'slice'>) ['$30build_slice.14']
    $30build_slice.15 = call $30build_slice.14($const14.6, $28call_function.13, func=$30build_slice.14, args=(Var($const14.6, utils.py:1221), Var($28call_function.13, utils.py:1221)), kws=(), vararg=None, varkwarg=None, target=None) ['$28call_function.13', '$30build_slice.14', '$30build_slice.15', '$const14.6']
    $32binary_subscr.16 = getitem(value=x, index=$30build_slice.15, fn=<built-in function getitem>) ['$30build_slice.15', '$32binary_subscr.16', 'x']
    $34call_method.17 = call $10load_method.4($32binary_subscr.16, func=$10load_method.4, args=[Var($32binary_subscr.16, utils.py:1221)], kws=(), vararg=None, varkwarg=None, target=None) ['$10load_method.4', '$32binary_subscr.16', '$34call_method.17']
    $36compare_op.18 = $6binary_subscr.2 >= $34call_method.17 ['$34call_method.17', '$36compare_op.18', '$6binary_subscr.2']
    $const40.20 = const(int, 0)              ['$const40.20']
    peaks[$const40.20] = $36compare_op.18    ['$36compare_op.18', '$const40.20', 'peaks']
    $const46.22 = const(int, 0)              ['$const46.22']
    $50binary_subscr.25 = getitem(value=peaks, index=$const46.22, fn=<built-in function getitem>) ['$50binary_subscr.25', '$const46.22', 'peaks']
    $const54.27 = const(int, 0)              ['$const54.27']
    $56binary_subscr.28 = getitem(value=x, index=$const54.27, fn=<built-in function getitem>) ['$56binary_subscr.28', '$const54.27', 'x']
    $58load_global.29 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>) ['$58load_global.29']
    $60load_method.30 = getattr(value=$58load_global.29, attr=mean) ['$58load_global.29', '$60load_method.30']
    $const64.32 = const(NoneType, None)      ['$const64.32']
    $66load_global.33 = global(min: <built-in function min>) ['$66load_global.33']
    $72load_attr.36 = getattr(value=x, attr=shape) ['$72load_attr.36', 'x']
    $const74.37 = const(int, 0)              ['$const74.37']
    $76binary_subscr.38 = getitem(value=$72load_attr.36, index=$const74.37, fn=<built-in function getitem>) ['$72load_attr.36', '$76binary_subscr.38', '$const74.37']
    $78call_function.39 = call $66load_global.33(post_avg, $76binary_subscr.38, func=$66load_global.33, args=[Var(post_avg, utils.py:1209), Var($76binary_subscr.38, utils.py:1222)], kws=(), vararg=None, varkwarg=None, target=None) ['$66load_global.33', '$76binary_subscr.38', '$78call_function.39', 'post_avg']
    $80build_slice.40 = global(slice: <class 'slice'>) ['$80build_slice.40']
    $80build_slice.41 = call $80build_slice.40($const64.32, $78call_function.39, func=$80build_slice.40, args=(Var($const64.32, utils.py:1222), Var($78call_function.39, utils.py:1222)), kws=(), vararg=None, varkwarg=None, target=None) ['$78call_function.39', '$80build_slice.40', '$80build_slice.41', '$const64.32']
    $82binary_subscr.42 = getitem(value=x, index=$80build_slice.41, fn=<built-in function getitem>) ['$80build_slice.41', '$82binary_subscr.42', 'x']
    $84call_method.43 = call $60load_method.30($82binary_subscr.42, func=$60load_method.30, args=[Var($82binary_subscr.42, utils.py:1222)], kws=(), vararg=None, varkwarg=None, target=None) ['$60load_method.30', '$82binary_subscr.42', '$84call_method.43']
    $88binary_add.45 = $84call_method.43 + delta ['$84call_method.43', '$88binary_add.45', 'delta']
    $90compare_op.46 = $56binary_subscr.28 >= $88binary_add.45 ['$56binary_subscr.28', '$88binary_add.45', '$90compare_op.46']
    $92inplace_and.47 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$50binary_subscr.25, rhs=$90compare_op.46, static_lhs=Undefined, static_rhs=Undefined) ['$50binary_subscr.25', '$90compare_op.46', '$92inplace_and.47']
    peaks[$const46.22] = $92inplace_and.47   ['$92inplace_and.47', '$const46.22', 'peaks']
    $const100.49 = const(int, 0)             ['$const100.49']
    $102binary_subscr.50 = getitem(value=peaks, index=$const100.49, fn=<built-in function getitem>) ['$102binary_subscr.50', '$const100.49', 'peaks']
    bool104 = global(bool: <class 'bool'>)   ['bool104']
    $104pred = call bool104($102binary_subscr.50, func=bool104, args=(Var($102binary_subscr.50, utils.py:1224),), kws=(), vararg=None, varkwarg=None, target=None) ['$102binary_subscr.50', '$104pred', 'bool104']
    branch $104pred, 106, 116                ['$104pred']
label 106:
    $const108.1 = const(int, 1)              ['$const108.1']
    n = wait + $const108.1                   ['$const108.1', 'n', 'wait']
    jump 120                                 []
label 116:
    n = const(int, 1)                        ['n']
    jump 120                                 []
label 120:
    $124load_attr.2 = getattr(value=x, attr=shape) ['$124load_attr.2', 'x']
    $const126.3 = const(int, 0)              ['$const126.3']
    $128binary_subscr.4 = getitem(value=$124load_attr.2, index=$const126.3, fn=<built-in function getitem>) ['$124load_attr.2', '$128binary_subscr.4', '$const126.3']
    $130compare_op.5 = n < $128binary_subscr.4 ['$128binary_subscr.4', '$130compare_op.5', 'n']
    bool132 = global(bool: <class 'bool'>)   ['bool132']
    $132pred = call bool132($130compare_op.5, func=bool132, args=(Var($130compare_op.5, utils.py:1229),), kws=(), vararg=None, varkwarg=None, target=None) ['$130compare_op.5', '$132pred', 'bool132']
    branch $132pred, 134, 332                ['$132pred']
label 134:
    $134load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>) ['$134load_global.0']
    $136load_method.1 = getattr(value=$134load_global.0, attr=max) ['$134load_global.0', '$136load_method.1']
    $140load_global.3 = global(max: <built-in function max>) ['$140load_global.3']
    $const142.4 = const(int, 0)              ['$const142.4']
    $148binary_subtract.7 = n - pre_max      ['$148binary_subtract.7', 'n', 'pre_max']
    $150call_function.8 = call $140load_global.3($const142.4, $148binary_subtract.7, func=$140load_global.3, args=[Var($const142.4, utils.py:1230), Var($148binary_subtract.7, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None) ['$140load_global.3', '$148binary_subtract.7', '$150call_function.8', '$const142.4']
    $152load_global.9 = global(min: <built-in function min>) ['$152load_global.9']
    $158binary_add.12 = n + post_max         ['$158binary_add.12', 'n', 'post_max']
    $162load_attr.14 = getattr(value=x, attr=shape) ['$162load_attr.14', 'x']
    $const164.15 = const(int, 0)             ['$const164.15']
    $166binary_subscr.16 = getitem(value=$162load_attr.14, index=$const164.15, fn=<built-in function getitem>) ['$162load_attr.14', '$166binary_subscr.16', '$const164.15']
    $168call_function.17 = call $152load_global.9($158binary_add.12, $166binary_subscr.16, func=$152load_global.9, args=[Var($158binary_add.12, utils.py:1230), Var($166binary_subscr.16, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None) ['$152load_global.9', '$158binary_add.12', '$166binary_subscr.16', '$168call_function.17']
    $170build_slice.18 = global(slice: <class 'slice'>) ['$170build_slice.18']
    $170build_slice.19 = call $170build_slice.18($150call_function.8, $168call_function.17, func=$170build_slice.18, args=(Var($150call_function.8, utils.py:1230), Var($168call_function.17, utils.py:1230)), kws=(), vararg=None, varkwarg=None, target=None) ['$150call_function.8', '$168call_function.17', '$170build_slice.18', '$170build_slice.19']
    $172binary_subscr.20 = getitem(value=x, index=$170build_slice.19, fn=<built-in function getitem>) ['$170build_slice.19', '$172binary_subscr.20', 'x']
    maxn = call $136load_method.1($172binary_subscr.20, func=$136load_method.1, args=[Var($172binary_subscr.20, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None) ['$136load_method.1', '$172binary_subscr.20', 'maxn']
    $182binary_subscr.24 = getitem(value=x, index=n, fn=<built-in function getitem>) ['$182binary_subscr.24', 'n', 'x']
    $186compare_op.26 = $182binary_subscr.24 == maxn ['$182binary_subscr.24', '$186compare_op.26', 'maxn']
    peaks[n] = $186compare_op.26             ['$186compare_op.26', 'n', 'peaks']
    $198binary_subscr.31 = getitem(value=peaks, index=n, fn=<built-in function getitem>) ['$198binary_subscr.31', 'n', 'peaks']
    bool200 = global(bool: <class 'bool'>)   ['bool200']
    $200pred = call bool200($198binary_subscr.31, func=bool200, args=(Var($198binary_subscr.31, utils.py:1235),), kws=(), vararg=None, varkwarg=None, target=None) ['$198binary_subscr.31', '$200pred', 'bool200']
    branch $200pred, 212, 202                ['$200pred']
label 202:
    $const204.1 = const(int, 1)              ['$const204.1']
    $206inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const204.1, static_lhs=Undefined, static_rhs=Undefined) ['$206inplace_add.2', '$const204.1', 'n']
    n = $206inplace_add.2                    ['$206inplace_add.2', 'n']
    jump 120                                 []
label 212:
    $212load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>) ['$212load_global.0']
    $214load_method.1 = getattr(value=$212load_global.0, attr=mean) ['$212load_global.0', '$214load_method.1']
    $218load_global.3 = global(max: <built-in function max>) ['$218load_global.3']
    $const220.4 = const(int, 0)              ['$const220.4']
    $226binary_subtract.7 = n - pre_avg      ['$226binary_subtract.7', 'n', 'pre_avg']
    $228call_function.8 = call $218load_global.3($const220.4, $226binary_subtract.7, func=$218load_global.3, args=[Var($const220.4, utils.py:1239), Var($226binary_subtract.7, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None) ['$218load_global.3', '$226binary_subtract.7', '$228call_function.8', '$const220.4']
    $230load_global.9 = global(min: <built-in function min>) ['$230load_global.9']
    $236binary_add.12 = n + post_avg         ['$236binary_add.12', 'n', 'post_avg']
    $240load_attr.14 = getattr(value=x, attr=shape) ['$240load_attr.14', 'x']
    $const242.15 = const(int, 0)             ['$const242.15']
    $244binary_subscr.16 = getitem(value=$240load_attr.14, index=$const242.15, fn=<built-in function getitem>) ['$240load_attr.14', '$244binary_subscr.16', '$const242.15']
    $246call_function.17 = call $230load_global.9($236binary_add.12, $244binary_subscr.16, func=$230load_global.9, args=[Var($236binary_add.12, utils.py:1239), Var($244binary_subscr.16, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None) ['$230load_global.9', '$236binary_add.12', '$244binary_subscr.16', '$246call_function.17']
    $248build_slice.18 = global(slice: <class 'slice'>) ['$248build_slice.18']
    $248build_slice.19 = call $248build_slice.18($228call_function.8, $246call_function.17, func=$248build_slice.18, args=(Var($228call_function.8, utils.py:1239), Var($246call_function.17, utils.py:1239)), kws=(), vararg=None, varkwarg=None, target=None) ['$228call_function.8', '$246call_function.17', '$248build_slice.18', '$248build_slice.19']
    $250binary_subscr.20 = getitem(value=x, index=$248build_slice.19, fn=<built-in function getitem>) ['$248build_slice.19', '$250binary_subscr.20', 'x']
    avgn = call $214load_method.1($250binary_subscr.20, func=$214load_method.1, args=[Var($250binary_subscr.20, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None) ['$214load_method.1', '$250binary_subscr.20', 'avgn']
    $262binary_subscr.26 = getitem(value=peaks, index=n, fn=<built-in function getitem>) ['$262binary_subscr.26', 'n', 'peaks']
    $268binary_subscr.29 = getitem(value=x, index=n, fn=<built-in function getitem>) ['$268binary_subscr.29', 'n', 'x']
    $274binary_add.32 = avgn + delta         ['$274binary_add.32', 'avgn', 'delta']
    $276compare_op.33 = $268binary_subscr.29 >= $274binary_add.32 ['$268binary_subscr.29', '$274binary_add.32', '$276compare_op.33']
    $278inplace_and.34 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$262binary_subscr.26, rhs=$276compare_op.33, static_lhs=Undefined, static_rhs=Undefined) ['$262binary_subscr.26', '$276compare_op.33', '$278inplace_and.34']
    peaks[n] = $278inplace_and.34            ['$278inplace_and.34', 'n', 'peaks']
    $288binary_subscr.37 = getitem(value=peaks, index=n, fn=<built-in function getitem>) ['$288binary_subscr.37', 'n', 'peaks']
    bool290 = global(bool: <class 'bool'>)   ['bool290']
    $290pred = call bool290($288binary_subscr.37, func=bool290, args=(Var($288binary_subscr.37, utils.py:1242),), kws=(), vararg=None, varkwarg=None, target=None) ['$288binary_subscr.37', '$290pred', 'bool290']
    branch $290pred, 302, 292                ['$290pred']
label 292:
    $const294.1 = const(int, 1)              ['$const294.1']
    $296inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const294.1, static_lhs=Undefined, static_rhs=Undefined) ['$296inplace_add.2', '$const294.1', 'n']
    n = $296inplace_add.2                    ['$296inplace_add.2', 'n']
    jump 120                                 []
label 302:
    $const306.2 = const(int, 1)              ['$const306.2']
    $308binary_add.3 = wait + $const306.2    ['$308binary_add.3', '$const306.2', 'wait']
    $310inplace_add.4 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$308binary_add.3, static_lhs=Undefined, static_rhs=Undefined) ['$308binary_add.3', '$310inplace_add.4', 'n']
    n = $310inplace_add.4                    ['$310inplace_add.4', 'n']
    $318load_attr.7 = getattr(value=x, attr=shape) ['$318load_attr.7', 'x']
    $const320.8 = const(int, 0)              ['$const320.8']
    $322binary_subscr.9 = getitem(value=$318load_attr.7, index=$const320.8, fn=<built-in function getitem>) ['$318load_attr.7', '$322binary_subscr.9', '$const320.8']
    $324compare_op.10 = n < $322binary_subscr.9 ['$322binary_subscr.9', '$324compare_op.10', 'n']
    bool326 = global(bool: <class 'bool'>)   ['bool326']
    $326pred = call bool326($324compare_op.10, func=bool326, args=(Var($324compare_op.10, utils.py:1229),), kws=(), vararg=None, varkwarg=None, target=None) ['$324compare_op.10', '$326pred', 'bool326']
    branch $326pred, 134, 328                ['$326pred']
label 328:
    $const328.0 = const(NoneType, None)      ['$const328.0']
    $330return_value.1 = cast(value=$const328.0) ['$330return_value.1', '$const328.0']
    return $330return_value.1                ['$330return_value.1']
label 332:
    $const332.0 = const(NoneType, None)      ['$const332.0']
    $334return_value.1 = cast(value=$const332.0) ['$334return_value.1', '$const332.0']
    return $334return_value.1                ['$334return_value.1']

2025-01-31 15:31:41,813 - DEBUG - ==== SSA block analysis pass on 0
2025-01-31 15:31:41,813 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8829f60>
2025-01-31 15:31:41,814 - DEBUG - on stmt: x = arg(0, name=x)
2025-01-31 15:31:41,814 - DEBUG - on stmt: pre_max = arg(1, name=pre_max)
2025-01-31 15:31:41,814 - DEBUG - on stmt: post_max = arg(2, name=post_max)
2025-01-31 15:31:41,814 - DEBUG - on stmt: pre_avg = arg(3, name=pre_avg)
2025-01-31 15:31:41,814 - DEBUG - on stmt: post_avg = arg(4, name=post_avg)
2025-01-31 15:31:41,814 - DEBUG - on stmt: delta = arg(5, name=delta)
2025-01-31 15:31:41,814 - DEBUG - on stmt: wait = arg(6, name=wait)
2025-01-31 15:31:41,814 - DEBUG - on stmt: peaks = arg(7, name=peaks)
2025-01-31 15:31:41,814 - DEBUG - on stmt: $const4.1 = const(int, 0)
2025-01-31 15:31:41,814 - DEBUG - on stmt: $6binary_subscr.2 = static_getitem(value=x, index=0, index_var=$const4.1, fn=<built-in function getitem>)
2025-01-31 15:31:41,814 - DEBUG - on stmt: $8load_global.3 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:41,814 - DEBUG - on stmt: $10load_method.4 = getattr(value=$8load_global.3, attr=max)
2025-01-31 15:31:41,814 - DEBUG - on stmt: $const14.6 = const(NoneType, None)
2025-01-31 15:31:41,814 - DEBUG - on stmt: $16load_global.7 = global(min: <built-in function min>)
2025-01-31 15:31:41,814 - DEBUG - on stmt: $22load_attr.10 = getattr(value=x, attr=shape)
2025-01-31 15:31:41,814 - DEBUG - on stmt: $const24.11 = const(int, 0)
2025-01-31 15:31:41,814 - DEBUG - on stmt: $26binary_subscr.12 = static_getitem(value=$22load_attr.10, index=0, index_var=$const24.11, fn=<built-in function getitem>)
2025-01-31 15:31:41,814 - DEBUG - on stmt: $28call_function.13 = call $16load_global.7(post_max, $26binary_subscr.12, func=$16load_global.7, args=[Var(post_max, utils.py:1209), Var($26binary_subscr.12, utils.py:1221)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,814 - DEBUG - on stmt: $30build_slice.14 = global(slice: <class 'slice'>)
2025-01-31 15:31:41,814 - DEBUG - on stmt: $30build_slice.15 = call $30build_slice.14($const14.6, $28call_function.13, func=$30build_slice.14, args=(Var($const14.6, utils.py:1221), Var($28call_function.13, utils.py:1221)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,814 - DEBUG - on stmt: $32binary_subscr.16 = getitem(value=x, index=$30build_slice.15, fn=<built-in function getitem>)
2025-01-31 15:31:41,814 - DEBUG - on stmt: $34call_method.17 = call $10load_method.4($32binary_subscr.16, func=$10load_method.4, args=[Var($32binary_subscr.16, utils.py:1221)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,814 - DEBUG - on stmt: $36compare_op.18 = $6binary_subscr.2 >= $34call_method.17
2025-01-31 15:31:41,815 - DEBUG - on stmt: $const40.20 = const(int, 0)
2025-01-31 15:31:41,815 - DEBUG - on stmt: peaks[0] = $36compare_op.18
2025-01-31 15:31:41,815 - DEBUG - on stmt: $const46.22 = const(int, 0)
2025-01-31 15:31:41,815 - DEBUG - on stmt: $50binary_subscr.25 = static_getitem(value=peaks, index=0, index_var=$const46.22, fn=<built-in function getitem>)
2025-01-31 15:31:41,815 - DEBUG - on stmt: $const54.27 = const(int, 0)
2025-01-31 15:31:41,815 - DEBUG - on stmt: $56binary_subscr.28 = static_getitem(value=x, index=0, index_var=$const54.27, fn=<built-in function getitem>)
2025-01-31 15:31:41,815 - DEBUG - on stmt: $58load_global.29 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:41,815 - DEBUG - on stmt: $60load_method.30 = getattr(value=$58load_global.29, attr=mean)
2025-01-31 15:31:41,815 - DEBUG - on stmt: $const64.32 = const(NoneType, None)
2025-01-31 15:31:41,815 - DEBUG - on stmt: $66load_global.33 = global(min: <built-in function min>)
2025-01-31 15:31:41,815 - DEBUG - on stmt: $72load_attr.36 = getattr(value=x, attr=shape)
2025-01-31 15:31:41,815 - DEBUG - on stmt: $const74.37 = const(int, 0)
2025-01-31 15:31:41,815 - DEBUG - on stmt: $76binary_subscr.38 = static_getitem(value=$72load_attr.36, index=0, index_var=$const74.37, fn=<built-in function getitem>)
2025-01-31 15:31:41,815 - DEBUG - on stmt: $78call_function.39 = call $66load_global.33(post_avg, $76binary_subscr.38, func=$66load_global.33, args=[Var(post_avg, utils.py:1209), Var($76binary_subscr.38, utils.py:1222)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,815 - DEBUG - on stmt: $80build_slice.40 = global(slice: <class 'slice'>)
2025-01-31 15:31:41,815 - DEBUG - on stmt: $80build_slice.41 = call $80build_slice.40($const64.32, $78call_function.39, func=$80build_slice.40, args=(Var($const64.32, utils.py:1222), Var($78call_function.39, utils.py:1222)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,815 - DEBUG - on stmt: $82binary_subscr.42 = getitem(value=x, index=$80build_slice.41, fn=<built-in function getitem>)
2025-01-31 15:31:41,815 - DEBUG - on stmt: $84call_method.43 = call $60load_method.30($82binary_subscr.42, func=$60load_method.30, args=[Var($82binary_subscr.42, utils.py:1222)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,815 - DEBUG - on stmt: $88binary_add.45 = $84call_method.43 + delta
2025-01-31 15:31:41,815 - DEBUG - on stmt: $90compare_op.46 = $56binary_subscr.28 >= $88binary_add.45
2025-01-31 15:31:41,815 - DEBUG - on stmt: $92inplace_and.47 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$50binary_subscr.25, rhs=$90compare_op.46, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:41,815 - DEBUG - on stmt: peaks[0] = $92inplace_and.47
2025-01-31 15:31:41,815 - DEBUG - on stmt: $const100.49 = const(int, 0)
2025-01-31 15:31:41,815 - DEBUG - on stmt: $102binary_subscr.50 = static_getitem(value=peaks, index=0, index_var=$const100.49, fn=<built-in function getitem>)
2025-01-31 15:31:41,816 - DEBUG - on stmt: bool104 = global(bool: <class 'bool'>)
2025-01-31 15:31:41,816 - DEBUG - on stmt: $104pred = call bool104($102binary_subscr.50, func=bool104, args=(Var($102binary_subscr.50, utils.py:1224),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,816 - DEBUG - on stmt: branch $104pred, 106, 116
2025-01-31 15:31:41,816 - DEBUG - ==== SSA block analysis pass on 106
2025-01-31 15:31:41,816 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8829f60>
2025-01-31 15:31:41,816 - DEBUG - on stmt: $const108.1 = const(int, 1)
2025-01-31 15:31:41,816 - DEBUG - on stmt: n = wait + $const108.1
2025-01-31 15:31:41,816 - DEBUG - on stmt: jump 120
2025-01-31 15:31:41,816 - DEBUG - ==== SSA block analysis pass on 116
2025-01-31 15:31:41,816 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8829f60>
2025-01-31 15:31:41,816 - DEBUG - on stmt: n = const(int, 1)
2025-01-31 15:31:41,816 - DEBUG - on stmt: jump 120
2025-01-31 15:31:41,816 - DEBUG - ==== SSA block analysis pass on 120
2025-01-31 15:31:41,816 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8829f60>
2025-01-31 15:31:41,816 - DEBUG - on stmt: $124load_attr.2 = getattr(value=x, attr=shape)
2025-01-31 15:31:41,816 - DEBUG - on stmt: $const126.3 = const(int, 0)
2025-01-31 15:31:41,816 - DEBUG - on stmt: $128binary_subscr.4 = static_getitem(value=$124load_attr.2, index=0, index_var=$const126.3, fn=<built-in function getitem>)
2025-01-31 15:31:41,816 - DEBUG - on stmt: $130compare_op.5 = n < $128binary_subscr.4
2025-01-31 15:31:41,816 - DEBUG - on stmt: bool132 = global(bool: <class 'bool'>)
2025-01-31 15:31:41,816 - DEBUG - on stmt: $132pred = call bool132($130compare_op.5, func=bool132, args=(Var($130compare_op.5, utils.py:1229),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,816 - DEBUG - on stmt: branch $132pred, 134, 332
2025-01-31 15:31:41,816 - DEBUG - ==== SSA block analysis pass on 134
2025-01-31 15:31:41,816 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8829f60>
2025-01-31 15:31:41,816 - DEBUG - on stmt: $134load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:41,816 - DEBUG - on stmt: $136load_method.1 = getattr(value=$134load_global.0, attr=max)
2025-01-31 15:31:41,816 - DEBUG - on stmt: $140load_global.3 = global(max: <built-in function max>)
2025-01-31 15:31:41,817 - DEBUG - on stmt: $const142.4 = const(int, 0)
2025-01-31 15:31:41,817 - DEBUG - on stmt: $148binary_subtract.7 = n - pre_max
2025-01-31 15:31:41,817 - DEBUG - on stmt: $150call_function.8 = call $140load_global.3($const142.4, $148binary_subtract.7, func=$140load_global.3, args=[Var($const142.4, utils.py:1230), Var($148binary_subtract.7, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,817 - DEBUG - on stmt: $152load_global.9 = global(min: <built-in function min>)
2025-01-31 15:31:41,817 - DEBUG - on stmt: $158binary_add.12 = n + post_max
2025-01-31 15:31:41,817 - DEBUG - on stmt: $162load_attr.14 = getattr(value=x, attr=shape)
2025-01-31 15:31:41,817 - DEBUG - on stmt: $const164.15 = const(int, 0)
2025-01-31 15:31:41,817 - DEBUG - on stmt: $166binary_subscr.16 = static_getitem(value=$162load_attr.14, index=0, index_var=$const164.15, fn=<built-in function getitem>)
2025-01-31 15:31:41,817 - DEBUG - on stmt: $168call_function.17 = call $152load_global.9($158binary_add.12, $166binary_subscr.16, func=$152load_global.9, args=[Var($158binary_add.12, utils.py:1230), Var($166binary_subscr.16, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,817 - DEBUG - on stmt: $170build_slice.18 = global(slice: <class 'slice'>)
2025-01-31 15:31:41,817 - DEBUG - on stmt: $170build_slice.19 = call $170build_slice.18($150call_function.8, $168call_function.17, func=$170build_slice.18, args=(Var($150call_function.8, utils.py:1230), Var($168call_function.17, utils.py:1230)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,817 - DEBUG - on stmt: $172binary_subscr.20 = getitem(value=x, index=$170build_slice.19, fn=<built-in function getitem>)
2025-01-31 15:31:41,817 - DEBUG - on stmt: maxn = call $136load_method.1($172binary_subscr.20, func=$136load_method.1, args=[Var($172binary_subscr.20, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,817 - DEBUG - on stmt: $182binary_subscr.24 = getitem(value=x, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:41,817 - DEBUG - on stmt: $186compare_op.26 = $182binary_subscr.24 == maxn
2025-01-31 15:31:41,817 - DEBUG - on stmt: peaks[n] = $186compare_op.26
2025-01-31 15:31:41,817 - DEBUG - on stmt: $198binary_subscr.31 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:41,817 - DEBUG - on stmt: bool200 = global(bool: <class 'bool'>)
2025-01-31 15:31:41,817 - DEBUG - on stmt: $200pred = call bool200($198binary_subscr.31, func=bool200, args=(Var($198binary_subscr.31, utils.py:1235),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,817 - DEBUG - on stmt: branch $200pred, 212, 202
2025-01-31 15:31:41,817 - DEBUG - ==== SSA block analysis pass on 202
2025-01-31 15:31:41,817 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8829f60>
2025-01-31 15:31:41,817 - DEBUG - on stmt: $const204.1 = const(int, 1)
2025-01-31 15:31:41,818 - DEBUG - on stmt: $206inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const204.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:41,818 - DEBUG - on stmt: n = $206inplace_add.2
2025-01-31 15:31:41,818 - DEBUG - on stmt: jump 333
2025-01-31 15:31:41,818 - DEBUG - ==== SSA block analysis pass on 212
2025-01-31 15:31:41,818 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8829f60>
2025-01-31 15:31:41,818 - DEBUG - on stmt: $212load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:41,818 - DEBUG - on stmt: $214load_method.1 = getattr(value=$212load_global.0, attr=mean)
2025-01-31 15:31:41,818 - DEBUG - on stmt: $218load_global.3 = global(max: <built-in function max>)
2025-01-31 15:31:41,818 - DEBUG - on stmt: $const220.4 = const(int, 0)
2025-01-31 15:31:41,818 - DEBUG - on stmt: $226binary_subtract.7 = n - pre_avg
2025-01-31 15:31:41,818 - DEBUG - on stmt: $228call_function.8 = call $218load_global.3($const220.4, $226binary_subtract.7, func=$218load_global.3, args=[Var($const220.4, utils.py:1239), Var($226binary_subtract.7, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,818 - DEBUG - on stmt: $230load_global.9 = global(min: <built-in function min>)
2025-01-31 15:31:41,818 - DEBUG - on stmt: $236binary_add.12 = n + post_avg
2025-01-31 15:31:41,818 - DEBUG - on stmt: $240load_attr.14 = getattr(value=x, attr=shape)
2025-01-31 15:31:41,818 - DEBUG - on stmt: $const242.15 = const(int, 0)
2025-01-31 15:31:41,818 - DEBUG - on stmt: $244binary_subscr.16 = static_getitem(value=$240load_attr.14, index=0, index_var=$const242.15, fn=<built-in function getitem>)
2025-01-31 15:31:41,818 - DEBUG - on stmt: $246call_function.17 = call $230load_global.9($236binary_add.12, $244binary_subscr.16, func=$230load_global.9, args=[Var($236binary_add.12, utils.py:1239), Var($244binary_subscr.16, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,818 - DEBUG - on stmt: $248build_slice.18 = global(slice: <class 'slice'>)
2025-01-31 15:31:41,818 - DEBUG - on stmt: $248build_slice.19 = call $248build_slice.18($228call_function.8, $246call_function.17, func=$248build_slice.18, args=(Var($228call_function.8, utils.py:1239), Var($246call_function.17, utils.py:1239)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,818 - DEBUG - on stmt: $250binary_subscr.20 = getitem(value=x, index=$248build_slice.19, fn=<built-in function getitem>)
2025-01-31 15:31:41,818 - DEBUG - on stmt: avgn = call $214load_method.1($250binary_subscr.20, func=$214load_method.1, args=[Var($250binary_subscr.20, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,818 - DEBUG - on stmt: $262binary_subscr.26 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:41,818 - DEBUG - on stmt: $268binary_subscr.29 = getitem(value=x, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:41,819 - DEBUG - on stmt: $274binary_add.32 = avgn + delta
2025-01-31 15:31:41,819 - DEBUG - on stmt: $276compare_op.33 = $268binary_subscr.29 >= $274binary_add.32
2025-01-31 15:31:41,819 - DEBUG - on stmt: $278inplace_and.34 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$262binary_subscr.26, rhs=$276compare_op.33, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:41,819 - DEBUG - on stmt: peaks[n] = $278inplace_and.34
2025-01-31 15:31:41,819 - DEBUG - on stmt: $288binary_subscr.37 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:41,819 - DEBUG - on stmt: bool290 = global(bool: <class 'bool'>)
2025-01-31 15:31:41,819 - DEBUG - on stmt: $290pred = call bool290($288binary_subscr.37, func=bool290, args=(Var($288binary_subscr.37, utils.py:1242),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,819 - DEBUG - on stmt: branch $290pred, 302, 292
2025-01-31 15:31:41,819 - DEBUG - ==== SSA block analysis pass on 292
2025-01-31 15:31:41,819 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8829f60>
2025-01-31 15:31:41,819 - DEBUG - on stmt: $const294.1 = const(int, 1)
2025-01-31 15:31:41,819 - DEBUG - on stmt: $296inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const294.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:41,819 - DEBUG - on stmt: n = $296inplace_add.2
2025-01-31 15:31:41,819 - DEBUG - on stmt: jump 333
2025-01-31 15:31:41,819 - DEBUG - ==== SSA block analysis pass on 302
2025-01-31 15:31:41,819 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8829f60>
2025-01-31 15:31:41,819 - DEBUG - on stmt: $const306.2 = const(int, 1)
2025-01-31 15:31:41,819 - DEBUG - on stmt: $308binary_add.3 = wait + $const306.2
2025-01-31 15:31:41,819 - DEBUG - on stmt: $310inplace_add.4 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$308binary_add.3, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:41,819 - DEBUG - on stmt: n = $310inplace_add.4
2025-01-31 15:31:41,819 - DEBUG - on stmt: $318load_attr.7 = getattr(value=x, attr=shape)
2025-01-31 15:31:41,819 - DEBUG - on stmt: $const320.8 = const(int, 0)
2025-01-31 15:31:41,819 - DEBUG - on stmt: $322binary_subscr.9 = static_getitem(value=$318load_attr.7, index=0, index_var=$const320.8, fn=<built-in function getitem>)
2025-01-31 15:31:41,819 - DEBUG - on stmt: $324compare_op.10 = n < $322binary_subscr.9
2025-01-31 15:31:41,819 - DEBUG - on stmt: bool326 = global(bool: <class 'bool'>)
2025-01-31 15:31:41,820 - DEBUG - on stmt: $326pred = call bool326($324compare_op.10, func=bool326, args=(Var($324compare_op.10, utils.py:1229),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,820 - DEBUG - on stmt: branch $326pred, 134, 328
2025-01-31 15:31:41,820 - DEBUG - ==== SSA block analysis pass on 328
2025-01-31 15:31:41,820 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8829f60>
2025-01-31 15:31:41,820 - DEBUG - on stmt: $const328.0 = const(NoneType, None)
2025-01-31 15:31:41,820 - DEBUG - on stmt: $330return_value.1 = cast(value=$const328.0)
2025-01-31 15:31:41,820 - DEBUG - on stmt: return $330return_value.1
2025-01-31 15:31:41,820 - DEBUG - ==== SSA block analysis pass on 332
2025-01-31 15:31:41,820 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8829f60>
2025-01-31 15:31:41,820 - DEBUG - on stmt: $const332.0 = const(NoneType, None)
2025-01-31 15:31:41,820 - DEBUG - on stmt: $334return_value.1 = cast(value=$const332.0)
2025-01-31 15:31:41,820 - DEBUG - on stmt: return $334return_value.1
2025-01-31 15:31:41,820 - DEBUG - ==== SSA block analysis pass on 333
2025-01-31 15:31:41,820 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8829f60>
2025-01-31 15:31:41,820 - DEBUG - on stmt: jump 120
2025-01-31 15:31:41,822 - DEBUG - defs defaultdict(<class 'list'>,
            {'$102binary_subscr.50': [(<numba.core.ir.Assign object at 0x7c89e88afbb0>,
                                       0)],
             '$104pred': [(<numba.core.ir.Assign object at 0x7c89e8836290>, 0)],
             '$10load_method.4': [(<numba.core.ir.Assign object at 0x7c89f00ab6a0>,
                                   0)],
             '$124load_attr.2': [(<numba.core.ir.Assign object at 0x7c89e8836ad0>,
                                  120)],
             '$128binary_subscr.4': [(<numba.core.ir.Assign object at 0x7c89e88af640>,
                                      120)],
             '$130compare_op.5': [(<numba.core.ir.Assign object at 0x7c89e8836f80>,
                                   120)],
             '$132pred': [(<numba.core.ir.Assign object at 0x7c89e88371f0>,
                           120)],
             '$134load_global.0': [(<numba.core.ir.Assign object at 0x7c89e88373d0>,
                                    134)],
             '$136load_method.1': [(<numba.core.ir.Assign object at 0x7c89e8837550>,
                                    134)],
             '$140load_global.3': [(<numba.core.ir.Assign object at 0x7c89e88377f0>,
                                    134)],
             '$148binary_subtract.7': [(<numba.core.ir.Assign object at 0x7c89e8837d60>,
                                        134)],
             '$150call_function.8': [(<numba.core.ir.Assign object at 0x7c89e8837f10>,
                                      134)],
             '$152load_global.9': [(<numba.core.ir.Assign object at 0x7c89e88a4070>,
                                    134)],
             '$158binary_add.12': [(<numba.core.ir.Assign object at 0x7c89e88a4460>,
                                    134)],
             '$162load_attr.14': [(<numba.core.ir.Assign object at 0x7c89e88a46d0>,
                                   134)],
             '$166binary_subscr.16': [(<numba.core.ir.Assign object at 0x7c89e88af1f0>,
                                       134)],
             '$168call_function.17': [(<numba.core.ir.Assign object at 0x7c89e88a4bb0>,
                                       134)],
             '$16load_global.7': [(<numba.core.ir.Assign object at 0x7c89ebd33ac0>,
                                   0)],
             '$170build_slice.18': [(<numba.core.ir.Assign object at 0x7c89e88a4cd0>,
                                     134)],
             '$170build_slice.19': [(<numba.core.ir.Assign object at 0x7c89e88a4df0>,
                                     134)],
             '$172binary_subscr.20': [(<numba.core.ir.Assign object at 0x7c89e88a4fa0>,
                                       134)],
             '$182binary_subscr.24': [(<numba.core.ir.Assign object at 0x7c89e88a5600>,
                                       134)],
             '$186compare_op.26': [(<numba.core.ir.Assign object at 0x7c89e88a58a0>,
                                    134)],
             '$198binary_subscr.31': [(<numba.core.ir.Assign object at 0x7c89e88a5f60>,
                                       134)],
             '$200pred': [(<numba.core.ir.Assign object at 0x7c89e88a61d0>,
                           134)],
             '$206inplace_add.2': [(<numba.core.ir.Assign object at 0x7c89e88a5c90>,
                                    202)],
             '$212load_global.0': [(<numba.core.ir.Assign object at 0x7c89e88a6530>,
                                    212)],
             '$214load_method.1': [(<numba.core.ir.Assign object at 0x7c89e88a66b0>,
                                    212)],
             '$218load_global.3': [(<numba.core.ir.Assign object at 0x7c89e88a6950>,
                                    212)],
             '$226binary_subtract.7': [(<numba.core.ir.Assign object at 0x7c89e88a6ec0>,
                                        212)],
             '$228call_function.8': [(<numba.core.ir.Assign object at 0x7c89e88a7070>,
                                      212)],
             '$22load_attr.10': [(<numba.core.ir.Assign object at 0x7c89e8ad9f30>,
                                  0)],
             '$230load_global.9': [(<numba.core.ir.Assign object at 0x7c89e88a7190>,
                                    212)],
             '$236binary_add.12': [(<numba.core.ir.Assign object at 0x7c89e88a7580>,
                                    212)],
             '$240load_attr.14': [(<numba.core.ir.Assign object at 0x7c89e88a77f0>,
                                   212)],
             '$244binary_subscr.16': [(<numba.core.ir.Assign object at 0x7c89e8a7bd30>,
                                       212)],
             '$246call_function.17': [(<numba.core.ir.Assign object at 0x7c89e88a7cd0>,
                                       212)],
             '$248build_slice.18': [(<numba.core.ir.Assign object at 0x7c89e88a7df0>,
                                     212)],
             '$248build_slice.19': [(<numba.core.ir.Assign object at 0x7c89e88a7f10>,
                                     212)],
             '$250binary_subscr.20': [(<numba.core.ir.Assign object at 0x7c89e88ac100>,
                                       212)],
             '$262binary_subscr.26': [(<numba.core.ir.Assign object at 0x7c89e88ac940>,
                                       212)],
             '$268binary_subscr.29': [(<numba.core.ir.Assign object at 0x7c89e88acd00>,
                                       212)],
             '$26binary_subscr.12': [(<numba.core.ir.Assign object at 0x7c89e88af8b0>,
                                      0)],
             '$274binary_add.32': [(<numba.core.ir.Assign object at 0x7c89e88ad0c0>,
                                    212)],
             '$276compare_op.33': [(<numba.core.ir.Assign object at 0x7c89e88ad240>,
                                    212)],
             '$278inplace_and.34': [(<numba.core.ir.Assign object at 0x7c89e88ad3c0>,
                                     212)],
             '$288binary_subscr.37': [(<numba.core.ir.Assign object at 0x7c89e88ad840>,
                                       212)],
             '$28call_function.13': [(<numba.core.ir.Assign object at 0x7c89ebaeb040>,
                                      0)],
             '$290pred': [(<numba.core.ir.Assign object at 0x7c89e88adab0>,
                           212)],
             '$296inplace_add.2': [(<numba.core.ir.Assign object at 0x7c89e88acb50>,
                                    292)],
             '$308binary_add.3': [(<numba.core.ir.Assign object at 0x7c89e88ae0e0>,
                                   302)],
             '$30build_slice.14': [(<numba.core.ir.Assign object at 0x7c89ebae96f0>,
                                    0)],
             '$30build_slice.15': [(<numba.core.ir.Assign object at 0x7c89e8b52080>,
                                    0)],
             '$310inplace_add.4': [(<numba.core.ir.Assign object at 0x7c89e88ae260>,
                                    302)],
             '$318load_attr.7': [(<numba.core.ir.Assign object at 0x7c89e88ae6b0>,
                                  302)],
             '$322binary_subscr.9': [(<numba.core.ir.Assign object at 0x7c89e8a78e80>,
                                      302)],
             '$324compare_op.10': [(<numba.core.ir.Assign object at 0x7c89e88aeb60>,
                                    302)],
             '$326pred': [(<numba.core.ir.Assign object at 0x7c89e88aedd0>,
                           302)],
             '$32binary_subscr.16': [(<numba.core.ir.Assign object at 0x7c89e8cd8220>,
                                      0)],
             '$330return_value.1': [(<numba.core.ir.Assign object at 0x7c89e88af070>,
                                     328)],
             '$334return_value.1': [(<numba.core.ir.Assign object at 0x7c89e88af490>,
                                     332)],
             '$34call_method.17': [(<numba.core.ir.Assign object at 0x7c89ebd94f10>,
                                    0)],
             '$36compare_op.18': [(<numba.core.ir.Assign object at 0x7c89ebd96bc0>,
                                   0)],
             '$50binary_subscr.25': [(<numba.core.ir.Assign object at 0x7c89e88af970>,
                                      0)],
             '$56binary_subscr.28': [(<numba.core.ir.Assign object at 0x7c89e88afa30>,
                                      0)],
             '$58load_global.29': [(<numba.core.ir.Assign object at 0x7c89e88341f0>,
                                    0)],
             '$60load_method.30': [(<numba.core.ir.Assign object at 0x7c89e8834370>,
                                    0)],
             '$66load_global.33': [(<numba.core.ir.Assign object at 0x7c89e8834790>,
                                    0)],
             '$6binary_subscr.2': [(<numba.core.ir.Assign object at 0x7c89e88af850>,
                                    0)],
             '$72load_attr.36': [(<numba.core.ir.Assign object at 0x7c89e8834b50>,
                                  0)],
             '$76binary_subscr.38': [(<numba.core.ir.Assign object at 0x7c89e88afaf0>,
                                      0)],
             '$78call_function.39': [(<numba.core.ir.Assign object at 0x7c89e8835030>,
                                      0)],
             '$80build_slice.40': [(<numba.core.ir.Assign object at 0x7c89e8835150>,
                                    0)],
             '$80build_slice.41': [(<numba.core.ir.Assign object at 0x7c89e8835270>,
                                    0)],
             '$82binary_subscr.42': [(<numba.core.ir.Assign object at 0x7c89e8835420>,
                                      0)],
             '$84call_method.43': [(<numba.core.ir.Assign object at 0x7c89e8835600>,
                                    0)],
             '$88binary_add.45': [(<numba.core.ir.Assign object at 0x7c89e8835840>,
                                   0)],
             '$8load_global.3': [(<numba.core.ir.Assign object at 0x7c89f00ab2b0>,
                                  0)],
             '$90compare_op.46': [(<numba.core.ir.Assign object at 0x7c89e88359c0>,
                                   0)],
             '$92inplace_and.47': [(<numba.core.ir.Assign object at 0x7c89e8835b40>,
                                    0)],
             '$const100.49': [(<numba.core.ir.Assign object at 0x7c89e8835e70>,
                               0)],
             '$const108.1': [(<numba.core.ir.Assign object at 0x7c89e8b4f400>,
                              106)],
             '$const126.3': [(<numba.core.ir.Assign object at 0x7c89e8836c50>,
                              120)],
             '$const14.6': [(<numba.core.ir.Assign object at 0x7c89f00a8940>,
                             0)],
             '$const142.4': [(<numba.core.ir.Assign object at 0x7c89e8837970>,
                              134)],
             '$const164.15': [(<numba.core.ir.Assign object at 0x7c89e88a4850>,
                               134)],
             '$const204.1': [(<numba.core.ir.Assign object at 0x7c89e88a53c0>,
                              202)],
             '$const220.4': [(<numba.core.ir.Assign object at 0x7c89e88a6ad0>,
                              212)],
             '$const24.11': [(<numba.core.ir.Assign object at 0x7c89e8ad9ed0>,
                              0)],
             '$const242.15': [(<numba.core.ir.Assign object at 0x7c89e88a7970>,
                               212)],
             '$const294.1': [(<numba.core.ir.Assign object at 0x7c89e88ac520>,
                              292)],
             '$const306.2': [(<numba.core.ir.Assign object at 0x7c89e88adf30>,
                              302)],
             '$const320.8': [(<numba.core.ir.Assign object at 0x7c89e88ae830>,
                              302)],
             '$const328.0': [(<numba.core.ir.Assign object at 0x7c89e88aeef0>,
                              328)],
             '$const332.0': [(<numba.core.ir.Assign object at 0x7c89e88af310>,
                              332)],
             '$const4.1': [(<numba.core.ir.Assign object at 0x7c89f00a8c10>,
                            0)],
             '$const40.20': [(<numba.core.ir.Assign object at 0x7c89ebde02e0>,
                              0)],
             '$const46.22': [(<numba.core.ir.Assign object at 0x7c89ebde3400>,
                              0)],
             '$const54.27': [(<numba.core.ir.Assign object at 0x7c89e83f3f10>,
                              0)],
             '$const64.32': [(<numba.core.ir.Assign object at 0x7c89e8834610>,
                              0)],
             '$const74.37': [(<numba.core.ir.Assign object at 0x7c89e8834cd0>,
                              0)],
             'avgn': [(<numba.core.ir.Assign object at 0x7c89e88ac2e0>, 212)],
             'bool104': [(<numba.core.ir.Assign object at 0x7c89e8836170>, 0)],
             'bool132': [(<numba.core.ir.Assign object at 0x7c89e88370d0>,
                          120)],
             'bool200': [(<numba.core.ir.Assign object at 0x7c89e88a60b0>,
                          134)],
             'bool290': [(<numba.core.ir.Assign object at 0x7c89e88ad990>,
                          212)],
             'bool326': [(<numba.core.ir.Assign object at 0x7c89e88aecb0>,
                          302)],
             'delta': [(<numba.core.ir.Assign object at 0x7c89f00d9060>, 0)],
             'maxn': [(<numba.core.ir.Assign object at 0x7c89e88a5180>, 134)],
             'n': [(<numba.core.ir.Assign object at 0x7c89e8835660>, 106),
                   (<numba.core.ir.Assign object at 0x7c89e88365f0>, 116),
                   (<numba.core.ir.Assign object at 0x7c89e88a6290>, 202),
                   (<numba.core.ir.Assign object at 0x7c89e88acf10>, 292),
                   (<numba.core.ir.Assign object at 0x7c89e88ae320>, 302)],
             'peaks': [(<numba.core.ir.Assign object at 0x7c89f00db460>, 0)],
             'post_avg': [(<numba.core.ir.Assign object at 0x7c89f00da770>, 0)],
             'post_max': [(<numba.core.ir.Assign object at 0x7c89f00db040>, 0)],
             'pre_avg': [(<numba.core.ir.Assign object at 0x7c89f00d8e80>, 0)],
             'pre_max': [(<numba.core.ir.Assign object at 0x7c89f00db520>, 0)],
             'wait': [(<numba.core.ir.Assign object at 0x7c89f00d8e20>, 0)],
             'x': [(<numba.core.ir.Assign object at 0x7c89f00d95d0>, 0)]})
2025-01-31 15:31:41,822 - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x7c89f0299240>
2025-01-31 15:31:41,822 - DEBUG - Fix SSA violator on var n
2025-01-31 15:31:41,822 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-31 15:31:41,822 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e88a82b0>
2025-01-31 15:31:41,822 - DEBUG - on stmt: x = arg(0, name=x)
2025-01-31 15:31:41,823 - DEBUG - on stmt: pre_max = arg(1, name=pre_max)
2025-01-31 15:31:41,823 - DEBUG - on stmt: post_max = arg(2, name=post_max)
2025-01-31 15:31:41,823 - DEBUG - on stmt: pre_avg = arg(3, name=pre_avg)
2025-01-31 15:31:41,823 - DEBUG - on stmt: post_avg = arg(4, name=post_avg)
2025-01-31 15:31:41,823 - DEBUG - on stmt: delta = arg(5, name=delta)
2025-01-31 15:31:41,823 - DEBUG - on stmt: wait = arg(6, name=wait)
2025-01-31 15:31:41,823 - DEBUG - on stmt: peaks = arg(7, name=peaks)
2025-01-31 15:31:41,823 - DEBUG - on stmt: $const4.1 = const(int, 0)
2025-01-31 15:31:41,823 - DEBUG - on stmt: $6binary_subscr.2 = static_getitem(value=x, index=0, index_var=$const4.1, fn=<built-in function getitem>)
2025-01-31 15:31:41,823 - DEBUG - on stmt: $8load_global.3 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:41,823 - DEBUG - on stmt: $10load_method.4 = getattr(value=$8load_global.3, attr=max)
2025-01-31 15:31:41,823 - DEBUG - on stmt: $const14.6 = const(NoneType, None)
2025-01-31 15:31:41,823 - DEBUG - on stmt: $16load_global.7 = global(min: <built-in function min>)
2025-01-31 15:31:41,823 - DEBUG - on stmt: $22load_attr.10 = getattr(value=x, attr=shape)
2025-01-31 15:31:41,823 - DEBUG - on stmt: $const24.11 = const(int, 0)
2025-01-31 15:31:41,823 - DEBUG - on stmt: $26binary_subscr.12 = static_getitem(value=$22load_attr.10, index=0, index_var=$const24.11, fn=<built-in function getitem>)
2025-01-31 15:31:41,823 - DEBUG - on stmt: $28call_function.13 = call $16load_global.7(post_max, $26binary_subscr.12, func=$16load_global.7, args=[Var(post_max, utils.py:1209), Var($26binary_subscr.12, utils.py:1221)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,823 - DEBUG - on stmt: $30build_slice.14 = global(slice: <class 'slice'>)
2025-01-31 15:31:41,823 - DEBUG - on stmt: $30build_slice.15 = call $30build_slice.14($const14.6, $28call_function.13, func=$30build_slice.14, args=(Var($const14.6, utils.py:1221), Var($28call_function.13, utils.py:1221)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,823 - DEBUG - on stmt: $32binary_subscr.16 = getitem(value=x, index=$30build_slice.15, fn=<built-in function getitem>)
2025-01-31 15:31:41,823 - DEBUG - on stmt: $34call_method.17 = call $10load_method.4($32binary_subscr.16, func=$10load_method.4, args=[Var($32binary_subscr.16, utils.py:1221)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,823 - DEBUG - on stmt: $36compare_op.18 = $6binary_subscr.2 >= $34call_method.17
2025-01-31 15:31:41,823 - DEBUG - on stmt: $const40.20 = const(int, 0)
2025-01-31 15:31:41,823 - DEBUG - on stmt: peaks[0] = $36compare_op.18
2025-01-31 15:31:41,823 - DEBUG - on stmt: $const46.22 = const(int, 0)
2025-01-31 15:31:41,823 - DEBUG - on stmt: $50binary_subscr.25 = static_getitem(value=peaks, index=0, index_var=$const46.22, fn=<built-in function getitem>)
2025-01-31 15:31:41,823 - DEBUG - on stmt: $const54.27 = const(int, 0)
2025-01-31 15:31:41,824 - DEBUG - on stmt: $56binary_subscr.28 = static_getitem(value=x, index=0, index_var=$const54.27, fn=<built-in function getitem>)
2025-01-31 15:31:41,824 - DEBUG - on stmt: $58load_global.29 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:41,824 - DEBUG - on stmt: $60load_method.30 = getattr(value=$58load_global.29, attr=mean)
2025-01-31 15:31:41,824 - DEBUG - on stmt: $const64.32 = const(NoneType, None)
2025-01-31 15:31:41,824 - DEBUG - on stmt: $66load_global.33 = global(min: <built-in function min>)
2025-01-31 15:31:41,824 - DEBUG - on stmt: $72load_attr.36 = getattr(value=x, attr=shape)
2025-01-31 15:31:41,824 - DEBUG - on stmt: $const74.37 = const(int, 0)
2025-01-31 15:31:41,824 - DEBUG - on stmt: $76binary_subscr.38 = static_getitem(value=$72load_attr.36, index=0, index_var=$const74.37, fn=<built-in function getitem>)
2025-01-31 15:31:41,824 - DEBUG - on stmt: $78call_function.39 = call $66load_global.33(post_avg, $76binary_subscr.38, func=$66load_global.33, args=[Var(post_avg, utils.py:1209), Var($76binary_subscr.38, utils.py:1222)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,824 - DEBUG - on stmt: $80build_slice.40 = global(slice: <class 'slice'>)
2025-01-31 15:31:41,824 - DEBUG - on stmt: $80build_slice.41 = call $80build_slice.40($const64.32, $78call_function.39, func=$80build_slice.40, args=(Var($const64.32, utils.py:1222), Var($78call_function.39, utils.py:1222)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,824 - DEBUG - on stmt: $82binary_subscr.42 = getitem(value=x, index=$80build_slice.41, fn=<built-in function getitem>)
2025-01-31 15:31:41,824 - DEBUG - on stmt: $84call_method.43 = call $60load_method.30($82binary_subscr.42, func=$60load_method.30, args=[Var($82binary_subscr.42, utils.py:1222)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,824 - DEBUG - on stmt: $88binary_add.45 = $84call_method.43 + delta
2025-01-31 15:31:41,824 - DEBUG - on stmt: $90compare_op.46 = $56binary_subscr.28 >= $88binary_add.45
2025-01-31 15:31:41,824 - DEBUG - on stmt: $92inplace_and.47 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$50binary_subscr.25, rhs=$90compare_op.46, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:41,824 - DEBUG - on stmt: peaks[0] = $92inplace_and.47
2025-01-31 15:31:41,824 - DEBUG - on stmt: $const100.49 = const(int, 0)
2025-01-31 15:31:41,824 - DEBUG - on stmt: $102binary_subscr.50 = static_getitem(value=peaks, index=0, index_var=$const100.49, fn=<built-in function getitem>)
2025-01-31 15:31:41,824 - DEBUG - on stmt: bool104 = global(bool: <class 'bool'>)
2025-01-31 15:31:41,824 - DEBUG - on stmt: $104pred = call bool104($102binary_subscr.50, func=bool104, args=(Var($102binary_subscr.50, utils.py:1224),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,824 - DEBUG - on stmt: branch $104pred, 106, 116
2025-01-31 15:31:41,824 - DEBUG - ==== SSA block rewrite pass on 106
2025-01-31 15:31:41,824 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e88a82b0>
2025-01-31 15:31:41,824 - DEBUG - on stmt: $const108.1 = const(int, 1)
2025-01-31 15:31:41,824 - DEBUG - on stmt: n = wait + $const108.1
2025-01-31 15:31:41,825 - DEBUG - first assign: n
2025-01-31 15:31:41,825 - DEBUG - replaced with: n = wait + $const108.1
2025-01-31 15:31:41,825 - DEBUG - on stmt: jump 120
2025-01-31 15:31:41,825 - DEBUG - ==== SSA block rewrite pass on 116
2025-01-31 15:31:41,825 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e88a82b0>
2025-01-31 15:31:41,825 - DEBUG - on stmt: n = const(int, 1)
2025-01-31 15:31:41,825 - DEBUG - replaced with: n.1 = const(int, 1)
2025-01-31 15:31:41,825 - DEBUG - on stmt: jump 120
2025-01-31 15:31:41,825 - DEBUG - ==== SSA block rewrite pass on 120
2025-01-31 15:31:41,825 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e88a82b0>
2025-01-31 15:31:41,825 - DEBUG - on stmt: $124load_attr.2 = getattr(value=x, attr=shape)
2025-01-31 15:31:41,825 - DEBUG - on stmt: $const126.3 = const(int, 0)
2025-01-31 15:31:41,825 - DEBUG - on stmt: $128binary_subscr.4 = static_getitem(value=$124load_attr.2, index=0, index_var=$const126.3, fn=<built-in function getitem>)
2025-01-31 15:31:41,825 - DEBUG - on stmt: $130compare_op.5 = n < $128binary_subscr.4
2025-01-31 15:31:41,825 - DEBUG - on stmt: bool132 = global(bool: <class 'bool'>)
2025-01-31 15:31:41,825 - DEBUG - on stmt: $132pred = call bool132($130compare_op.5, func=bool132, args=(Var($130compare_op.5, utils.py:1229),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,825 - DEBUG - on stmt: branch $132pred, 134, 332
2025-01-31 15:31:41,825 - DEBUG - ==== SSA block rewrite pass on 134
2025-01-31 15:31:41,825 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e88a82b0>
2025-01-31 15:31:41,825 - DEBUG - on stmt: $134load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:41,825 - DEBUG - on stmt: $136load_method.1 = getattr(value=$134load_global.0, attr=max)
2025-01-31 15:31:41,825 - DEBUG - on stmt: $140load_global.3 = global(max: <built-in function max>)
2025-01-31 15:31:41,825 - DEBUG - on stmt: $const142.4 = const(int, 0)
2025-01-31 15:31:41,825 - DEBUG - on stmt: $148binary_subtract.7 = n - pre_max
2025-01-31 15:31:41,825 - DEBUG - on stmt: $150call_function.8 = call $140load_global.3($const142.4, $148binary_subtract.7, func=$140load_global.3, args=[Var($const142.4, utils.py:1230), Var($148binary_subtract.7, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,825 - DEBUG - on stmt: $152load_global.9 = global(min: <built-in function min>)
2025-01-31 15:31:41,825 - DEBUG - on stmt: $158binary_add.12 = n + post_max
2025-01-31 15:31:41,825 - DEBUG - on stmt: $162load_attr.14 = getattr(value=x, attr=shape)
2025-01-31 15:31:41,825 - DEBUG - on stmt: $const164.15 = const(int, 0)
2025-01-31 15:31:41,826 - DEBUG - on stmt: $166binary_subscr.16 = static_getitem(value=$162load_attr.14, index=0, index_var=$const164.15, fn=<built-in function getitem>)
2025-01-31 15:31:41,826 - DEBUG - on stmt: $168call_function.17 = call $152load_global.9($158binary_add.12, $166binary_subscr.16, func=$152load_global.9, args=[Var($158binary_add.12, utils.py:1230), Var($166binary_subscr.16, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,826 - DEBUG - on stmt: $170build_slice.18 = global(slice: <class 'slice'>)
2025-01-31 15:31:41,826 - DEBUG - on stmt: $170build_slice.19 = call $170build_slice.18($150call_function.8, $168call_function.17, func=$170build_slice.18, args=(Var($150call_function.8, utils.py:1230), Var($168call_function.17, utils.py:1230)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,826 - DEBUG - on stmt: $172binary_subscr.20 = getitem(value=x, index=$170build_slice.19, fn=<built-in function getitem>)
2025-01-31 15:31:41,826 - DEBUG - on stmt: maxn = call $136load_method.1($172binary_subscr.20, func=$136load_method.1, args=[Var($172binary_subscr.20, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,826 - DEBUG - on stmt: $182binary_subscr.24 = getitem(value=x, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:41,826 - DEBUG - on stmt: $186compare_op.26 = $182binary_subscr.24 == maxn
2025-01-31 15:31:41,826 - DEBUG - on stmt: peaks[n] = $186compare_op.26
2025-01-31 15:31:41,826 - DEBUG - on stmt: $198binary_subscr.31 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:41,826 - DEBUG - on stmt: bool200 = global(bool: <class 'bool'>)
2025-01-31 15:31:41,826 - DEBUG - on stmt: $200pred = call bool200($198binary_subscr.31, func=bool200, args=(Var($198binary_subscr.31, utils.py:1235),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,826 - DEBUG - on stmt: branch $200pred, 212, 202
2025-01-31 15:31:41,826 - DEBUG - ==== SSA block rewrite pass on 202
2025-01-31 15:31:41,826 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e88a82b0>
2025-01-31 15:31:41,826 - DEBUG - on stmt: $const204.1 = const(int, 1)
2025-01-31 15:31:41,826 - DEBUG - on stmt: $206inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const204.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:41,826 - DEBUG - on stmt: n = $206inplace_add.2
2025-01-31 15:31:41,826 - DEBUG - replaced with: n.2 = $206inplace_add.2
2025-01-31 15:31:41,826 - DEBUG - on stmt: jump 333
2025-01-31 15:31:41,826 - DEBUG - ==== SSA block rewrite pass on 212
2025-01-31 15:31:41,826 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e88a82b0>
2025-01-31 15:31:41,826 - DEBUG - on stmt: $212load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:41,826 - DEBUG - on stmt: $214load_method.1 = getattr(value=$212load_global.0, attr=mean)
2025-01-31 15:31:41,826 - DEBUG - on stmt: $218load_global.3 = global(max: <built-in function max>)
2025-01-31 15:31:41,826 - DEBUG - on stmt: $const220.4 = const(int, 0)
2025-01-31 15:31:41,827 - DEBUG - on stmt: $226binary_subtract.7 = n - pre_avg
2025-01-31 15:31:41,827 - DEBUG - on stmt: $228call_function.8 = call $218load_global.3($const220.4, $226binary_subtract.7, func=$218load_global.3, args=[Var($const220.4, utils.py:1239), Var($226binary_subtract.7, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,827 - DEBUG - on stmt: $230load_global.9 = global(min: <built-in function min>)
2025-01-31 15:31:41,827 - DEBUG - on stmt: $236binary_add.12 = n + post_avg
2025-01-31 15:31:41,827 - DEBUG - on stmt: $240load_attr.14 = getattr(value=x, attr=shape)
2025-01-31 15:31:41,827 - DEBUG - on stmt: $const242.15 = const(int, 0)
2025-01-31 15:31:41,827 - DEBUG - on stmt: $244binary_subscr.16 = static_getitem(value=$240load_attr.14, index=0, index_var=$const242.15, fn=<built-in function getitem>)
2025-01-31 15:31:41,827 - DEBUG - on stmt: $246call_function.17 = call $230load_global.9($236binary_add.12, $244binary_subscr.16, func=$230load_global.9, args=[Var($236binary_add.12, utils.py:1239), Var($244binary_subscr.16, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,827 - DEBUG - on stmt: $248build_slice.18 = global(slice: <class 'slice'>)
2025-01-31 15:31:41,827 - DEBUG - on stmt: $248build_slice.19 = call $248build_slice.18($228call_function.8, $246call_function.17, func=$248build_slice.18, args=(Var($228call_function.8, utils.py:1239), Var($246call_function.17, utils.py:1239)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,827 - DEBUG - on stmt: $250binary_subscr.20 = getitem(value=x, index=$248build_slice.19, fn=<built-in function getitem>)
2025-01-31 15:31:41,827 - DEBUG - on stmt: avgn = call $214load_method.1($250binary_subscr.20, func=$214load_method.1, args=[Var($250binary_subscr.20, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,827 - DEBUG - on stmt: $262binary_subscr.26 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:41,827 - DEBUG - on stmt: $268binary_subscr.29 = getitem(value=x, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:41,827 - DEBUG - on stmt: $274binary_add.32 = avgn + delta
2025-01-31 15:31:41,827 - DEBUG - on stmt: $276compare_op.33 = $268binary_subscr.29 >= $274binary_add.32
2025-01-31 15:31:41,827 - DEBUG - on stmt: $278inplace_and.34 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$262binary_subscr.26, rhs=$276compare_op.33, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:41,827 - DEBUG - on stmt: peaks[n] = $278inplace_and.34
2025-01-31 15:31:41,827 - DEBUG - on stmt: $288binary_subscr.37 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:41,827 - DEBUG - on stmt: bool290 = global(bool: <class 'bool'>)
2025-01-31 15:31:41,827 - DEBUG - on stmt: $290pred = call bool290($288binary_subscr.37, func=bool290, args=(Var($288binary_subscr.37, utils.py:1242),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,827 - DEBUG - on stmt: branch $290pred, 302, 292
2025-01-31 15:31:41,827 - DEBUG - ==== SSA block rewrite pass on 292
2025-01-31 15:31:41,827 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e88a82b0>
2025-01-31 15:31:41,827 - DEBUG - on stmt: $const294.1 = const(int, 1)
2025-01-31 15:31:41,827 - DEBUG - on stmt: $296inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const294.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:41,828 - DEBUG - on stmt: n = $296inplace_add.2
2025-01-31 15:31:41,828 - DEBUG - replaced with: n.3 = $296inplace_add.2
2025-01-31 15:31:41,828 - DEBUG - on stmt: jump 333
2025-01-31 15:31:41,828 - DEBUG - ==== SSA block rewrite pass on 302
2025-01-31 15:31:41,828 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e88a82b0>
2025-01-31 15:31:41,828 - DEBUG - on stmt: $const306.2 = const(int, 1)
2025-01-31 15:31:41,828 - DEBUG - on stmt: $308binary_add.3 = wait + $const306.2
2025-01-31 15:31:41,828 - DEBUG - on stmt: $310inplace_add.4 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$308binary_add.3, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:41,828 - DEBUG - on stmt: n = $310inplace_add.4
2025-01-31 15:31:41,828 - DEBUG - replaced with: n.4 = $310inplace_add.4
2025-01-31 15:31:41,828 - DEBUG - on stmt: $318load_attr.7 = getattr(value=x, attr=shape)
2025-01-31 15:31:41,828 - DEBUG - on stmt: $const320.8 = const(int, 0)
2025-01-31 15:31:41,828 - DEBUG - on stmt: $322binary_subscr.9 = static_getitem(value=$318load_attr.7, index=0, index_var=$const320.8, fn=<built-in function getitem>)
2025-01-31 15:31:41,828 - DEBUG - on stmt: $324compare_op.10 = n < $322binary_subscr.9
2025-01-31 15:31:41,828 - DEBUG - on stmt: bool326 = global(bool: <class 'bool'>)
2025-01-31 15:31:41,828 - DEBUG - on stmt: $326pred = call bool326($324compare_op.10, func=bool326, args=(Var($324compare_op.10, utils.py:1229),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,828 - DEBUG - on stmt: branch $326pred, 134, 328
2025-01-31 15:31:41,828 - DEBUG - ==== SSA block rewrite pass on 328
2025-01-31 15:31:41,828 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e88a82b0>
2025-01-31 15:31:41,828 - DEBUG - on stmt: $const328.0 = const(NoneType, None)
2025-01-31 15:31:41,828 - DEBUG - on stmt: $330return_value.1 = cast(value=$const328.0)
2025-01-31 15:31:41,828 - DEBUG - on stmt: return $330return_value.1
2025-01-31 15:31:41,828 - DEBUG - ==== SSA block rewrite pass on 332
2025-01-31 15:31:41,828 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e88a82b0>
2025-01-31 15:31:41,828 - DEBUG - on stmt: $const332.0 = const(NoneType, None)
2025-01-31 15:31:41,828 - DEBUG - on stmt: $334return_value.1 = cast(value=$const332.0)
2025-01-31 15:31:41,828 - DEBUG - on stmt: return $334return_value.1
2025-01-31 15:31:41,828 - DEBUG - ==== SSA block rewrite pass on 333
2025-01-31 15:31:41,828 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e88a82b0>
2025-01-31 15:31:41,828 - DEBUG - on stmt: jump 120
2025-01-31 15:31:41,829 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {106: [<numba.core.ir.Assign object at 0x7c89e88af610>],
             116: [<numba.core.ir.Assign object at 0x7c89e88af730>],
             202: [<numba.core.ir.Assign object at 0x7c89e88aff40>],
             292: [<numba.core.ir.Assign object at 0x7c89e881c190>],
             302: [<numba.core.ir.Assign object at 0x7c89e881c2b0>]})
2025-01-31 15:31:41,829 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-31 15:31:41,829 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e88a82b0>
2025-01-31 15:31:41,829 - DEBUG - on stmt: x = arg(0, name=x)
2025-01-31 15:31:41,829 - DEBUG - on stmt: pre_max = arg(1, name=pre_max)
2025-01-31 15:31:41,829 - DEBUG - on stmt: post_max = arg(2, name=post_max)
2025-01-31 15:31:41,829 - DEBUG - on stmt: pre_avg = arg(3, name=pre_avg)
2025-01-31 15:31:41,829 - DEBUG - on stmt: post_avg = arg(4, name=post_avg)
2025-01-31 15:31:41,829 - DEBUG - on stmt: delta = arg(5, name=delta)
2025-01-31 15:31:41,829 - DEBUG - on stmt: wait = arg(6, name=wait)
2025-01-31 15:31:41,829 - DEBUG - on stmt: peaks = arg(7, name=peaks)
2025-01-31 15:31:41,829 - DEBUG - on stmt: $const4.1 = const(int, 0)
2025-01-31 15:31:41,829 - DEBUG - on stmt: $6binary_subscr.2 = static_getitem(value=x, index=0, index_var=$const4.1, fn=<built-in function getitem>)
2025-01-31 15:31:41,829 - DEBUG - on stmt: $8load_global.3 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:41,829 - DEBUG - on stmt: $10load_method.4 = getattr(value=$8load_global.3, attr=max)
2025-01-31 15:31:41,829 - DEBUG - on stmt: $const14.6 = const(NoneType, None)
2025-01-31 15:31:41,829 - DEBUG - on stmt: $16load_global.7 = global(min: <built-in function min>)
2025-01-31 15:31:41,829 - DEBUG - on stmt: $22load_attr.10 = getattr(value=x, attr=shape)
2025-01-31 15:31:41,829 - DEBUG - on stmt: $const24.11 = const(int, 0)
2025-01-31 15:31:41,829 - DEBUG - on stmt: $26binary_subscr.12 = static_getitem(value=$22load_attr.10, index=0, index_var=$const24.11, fn=<built-in function getitem>)
2025-01-31 15:31:41,829 - DEBUG - on stmt: $28call_function.13 = call $16load_global.7(post_max, $26binary_subscr.12, func=$16load_global.7, args=[Var(post_max, utils.py:1209), Var($26binary_subscr.12, utils.py:1221)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,829 - DEBUG - on stmt: $30build_slice.14 = global(slice: <class 'slice'>)
2025-01-31 15:31:41,829 - DEBUG - on stmt: $30build_slice.15 = call $30build_slice.14($const14.6, $28call_function.13, func=$30build_slice.14, args=(Var($const14.6, utils.py:1221), Var($28call_function.13, utils.py:1221)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,829 - DEBUG - on stmt: $32binary_subscr.16 = getitem(value=x, index=$30build_slice.15, fn=<built-in function getitem>)
2025-01-31 15:31:41,829 - DEBUG - on stmt: $34call_method.17 = call $10load_method.4($32binary_subscr.16, func=$10load_method.4, args=[Var($32binary_subscr.16, utils.py:1221)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,830 - DEBUG - on stmt: $36compare_op.18 = $6binary_subscr.2 >= $34call_method.17
2025-01-31 15:31:41,830 - DEBUG - on stmt: $const40.20 = const(int, 0)
2025-01-31 15:31:41,830 - DEBUG - on stmt: peaks[0] = $36compare_op.18
2025-01-31 15:31:41,830 - DEBUG - on stmt: $const46.22 = const(int, 0)
2025-01-31 15:31:41,830 - DEBUG - on stmt: $50binary_subscr.25 = static_getitem(value=peaks, index=0, index_var=$const46.22, fn=<built-in function getitem>)
2025-01-31 15:31:41,830 - DEBUG - on stmt: $const54.27 = const(int, 0)
2025-01-31 15:31:41,830 - DEBUG - on stmt: $56binary_subscr.28 = static_getitem(value=x, index=0, index_var=$const54.27, fn=<built-in function getitem>)
2025-01-31 15:31:41,830 - DEBUG - on stmt: $58load_global.29 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:41,830 - DEBUG - on stmt: $60load_method.30 = getattr(value=$58load_global.29, attr=mean)
2025-01-31 15:31:41,830 - DEBUG - on stmt: $const64.32 = const(NoneType, None)
2025-01-31 15:31:41,830 - DEBUG - on stmt: $66load_global.33 = global(min: <built-in function min>)
2025-01-31 15:31:41,830 - DEBUG - on stmt: $72load_attr.36 = getattr(value=x, attr=shape)
2025-01-31 15:31:41,830 - DEBUG - on stmt: $const74.37 = const(int, 0)
2025-01-31 15:31:41,830 - DEBUG - on stmt: $76binary_subscr.38 = static_getitem(value=$72load_attr.36, index=0, index_var=$const74.37, fn=<built-in function getitem>)
2025-01-31 15:31:41,830 - DEBUG - on stmt: $78call_function.39 = call $66load_global.33(post_avg, $76binary_subscr.38, func=$66load_global.33, args=[Var(post_avg, utils.py:1209), Var($76binary_subscr.38, utils.py:1222)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,830 - DEBUG - on stmt: $80build_slice.40 = global(slice: <class 'slice'>)
2025-01-31 15:31:41,830 - DEBUG - on stmt: $80build_slice.41 = call $80build_slice.40($const64.32, $78call_function.39, func=$80build_slice.40, args=(Var($const64.32, utils.py:1222), Var($78call_function.39, utils.py:1222)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,830 - DEBUG - on stmt: $82binary_subscr.42 = getitem(value=x, index=$80build_slice.41, fn=<built-in function getitem>)
2025-01-31 15:31:41,830 - DEBUG - on stmt: $84call_method.43 = call $60load_method.30($82binary_subscr.42, func=$60load_method.30, args=[Var($82binary_subscr.42, utils.py:1222)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,830 - DEBUG - on stmt: $88binary_add.45 = $84call_method.43 + delta
2025-01-31 15:31:41,830 - DEBUG - on stmt: $90compare_op.46 = $56binary_subscr.28 >= $88binary_add.45
2025-01-31 15:31:41,830 - DEBUG - on stmt: $92inplace_and.47 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$50binary_subscr.25, rhs=$90compare_op.46, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:41,830 - DEBUG - on stmt: peaks[0] = $92inplace_and.47
2025-01-31 15:31:41,831 - DEBUG - on stmt: $const100.49 = const(int, 0)
2025-01-31 15:31:41,831 - DEBUG - on stmt: $102binary_subscr.50 = static_getitem(value=peaks, index=0, index_var=$const100.49, fn=<built-in function getitem>)
2025-01-31 15:31:41,831 - DEBUG - on stmt: bool104 = global(bool: <class 'bool'>)
2025-01-31 15:31:41,831 - DEBUG - on stmt: $104pred = call bool104($102binary_subscr.50, func=bool104, args=(Var($102binary_subscr.50, utils.py:1224),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,831 - DEBUG - on stmt: branch $104pred, 106, 116
2025-01-31 15:31:41,831 - DEBUG - ==== SSA block rewrite pass on 106
2025-01-31 15:31:41,831 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e88a82b0>
2025-01-31 15:31:41,831 - DEBUG - on stmt: $const108.1 = const(int, 1)
2025-01-31 15:31:41,831 - DEBUG - on stmt: n = wait + $const108.1
2025-01-31 15:31:41,831 - DEBUG - on stmt: jump 120
2025-01-31 15:31:41,831 - DEBUG - ==== SSA block rewrite pass on 116
2025-01-31 15:31:41,831 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e88a82b0>
2025-01-31 15:31:41,831 - DEBUG - on stmt: n.1 = const(int, 1)
2025-01-31 15:31:41,831 - DEBUG - on stmt: jump 120
2025-01-31 15:31:41,831 - DEBUG - ==== SSA block rewrite pass on 120
2025-01-31 15:31:41,831 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e88a82b0>
2025-01-31 15:31:41,831 - DEBUG - on stmt: $124load_attr.2 = getattr(value=x, attr=shape)
2025-01-31 15:31:41,831 - DEBUG - on stmt: $const126.3 = const(int, 0)
2025-01-31 15:31:41,831 - DEBUG - on stmt: $128binary_subscr.4 = static_getitem(value=$124load_attr.2, index=0, index_var=$const126.3, fn=<built-in function getitem>)
2025-01-31 15:31:41,831 - DEBUG - on stmt: $130compare_op.5 = n < $128binary_subscr.4
2025-01-31 15:31:41,831 - DEBUG - find_def var='n' stmt=$130compare_op.5 = n < $128binary_subscr.4
2025-01-31 15:31:41,831 - DEBUG - find_def_from_top label 120
2025-01-31 15:31:41,831 - DEBUG - insert phi node n.5 = phi(incoming_values=[], incoming_blocks=[]) at 120
2025-01-31 15:31:41,849 - DEBUG - find_def_from_bottom label 106
2025-01-31 15:31:41,849 - DEBUG - incoming_def n = wait + $const108.1
2025-01-31 15:31:41,849 - DEBUG - find_def_from_bottom label 116
2025-01-31 15:31:41,849 - DEBUG - incoming_def n.1 = const(int, 1)
2025-01-31 15:31:41,849 - DEBUG - find_def_from_bottom label 333
2025-01-31 15:31:41,849 - DEBUG - find_def_from_top label 333
2025-01-31 15:31:41,849 - DEBUG - insert phi node n.6 = phi(incoming_values=[], incoming_blocks=[]) at 333
2025-01-31 15:31:41,849 - DEBUG - find_def_from_bottom label 202
2025-01-31 15:31:41,849 - DEBUG - incoming_def n.2 = $206inplace_add.2
2025-01-31 15:31:41,849 - DEBUG - find_def_from_bottom label 292
2025-01-31 15:31:41,849 - DEBUG - incoming_def n.3 = $296inplace_add.2
2025-01-31 15:31:41,849 - DEBUG - incoming_def n.6 = phi(incoming_values=[Var(n.2, utils.py:1236), Var(n.3, utils.py:1243)], incoming_blocks=[202, 292])
2025-01-31 15:31:41,849 - DEBUG - replaced with: $130compare_op.5 = n.5 < $128binary_subscr.4
2025-01-31 15:31:41,849 - DEBUG - on stmt: bool132 = global(bool: <class 'bool'>)
2025-01-31 15:31:41,849 - DEBUG - on stmt: $132pred = call bool132($130compare_op.5, func=bool132, args=(Var($130compare_op.5, utils.py:1229),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,850 - DEBUG - on stmt: branch $132pred, 134, 332
2025-01-31 15:31:41,850 - DEBUG - ==== SSA block rewrite pass on 134
2025-01-31 15:31:41,850 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e88a82b0>
2025-01-31 15:31:41,850 - DEBUG - on stmt: $134load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:41,850 - DEBUG - on stmt: $136load_method.1 = getattr(value=$134load_global.0, attr=max)
2025-01-31 15:31:41,850 - DEBUG - on stmt: $140load_global.3 = global(max: <built-in function max>)
2025-01-31 15:31:41,850 - DEBUG - on stmt: $const142.4 = const(int, 0)
2025-01-31 15:31:41,850 - DEBUG - on stmt: $148binary_subtract.7 = n - pre_max
2025-01-31 15:31:41,850 - DEBUG - find_def var='n' stmt=$148binary_subtract.7 = n - pre_max
2025-01-31 15:31:41,850 - DEBUG - find_def_from_top label 134
2025-01-31 15:31:41,850 - DEBUG - insert phi node n.7 = phi(incoming_values=[], incoming_blocks=[]) at 134
2025-01-31 15:31:41,850 - DEBUG - find_def_from_bottom label 120
2025-01-31 15:31:41,850 - DEBUG - incoming_def n.5 = phi(incoming_values=[Var(n, utils.py:1225), Var(n.1, utils.py:1227), Var(n.6, utils.py:1229)], incoming_blocks=[106, 116, 333])
2025-01-31 15:31:41,850 - DEBUG - find_def_from_bottom label 302
2025-01-31 15:31:41,850 - DEBUG - incoming_def n.4 = $310inplace_add.4
2025-01-31 15:31:41,850 - DEBUG - replaced with: $148binary_subtract.7 = n.7 - pre_max
2025-01-31 15:31:41,850 - DEBUG - on stmt: $150call_function.8 = call $140load_global.3($const142.4, $148binary_subtract.7, func=$140load_global.3, args=[Var($const142.4, utils.py:1230), Var($148binary_subtract.7, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,850 - DEBUG - on stmt: $152load_global.9 = global(min: <built-in function min>)
2025-01-31 15:31:41,850 - DEBUG - on stmt: $158binary_add.12 = n + post_max
2025-01-31 15:31:41,850 - DEBUG - find_def var='n' stmt=$158binary_add.12 = n + post_max
2025-01-31 15:31:41,850 - DEBUG - replaced with: $158binary_add.12 = n.7 + post_max
2025-01-31 15:31:41,850 - DEBUG - on stmt: $162load_attr.14 = getattr(value=x, attr=shape)
2025-01-31 15:31:41,850 - DEBUG - on stmt: $const164.15 = const(int, 0)
2025-01-31 15:31:41,850 - DEBUG - on stmt: $166binary_subscr.16 = static_getitem(value=$162load_attr.14, index=0, index_var=$const164.15, fn=<built-in function getitem>)
2025-01-31 15:31:41,851 - DEBUG - on stmt: $168call_function.17 = call $152load_global.9($158binary_add.12, $166binary_subscr.16, func=$152load_global.9, args=[Var($158binary_add.12, utils.py:1230), Var($166binary_subscr.16, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,851 - DEBUG - on stmt: $170build_slice.18 = global(slice: <class 'slice'>)
2025-01-31 15:31:41,851 - DEBUG - on stmt: $170build_slice.19 = call $170build_slice.18($150call_function.8, $168call_function.17, func=$170build_slice.18, args=(Var($150call_function.8, utils.py:1230), Var($168call_function.17, utils.py:1230)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,851 - DEBUG - on stmt: $172binary_subscr.20 = getitem(value=x, index=$170build_slice.19, fn=<built-in function getitem>)
2025-01-31 15:31:41,851 - DEBUG - on stmt: maxn = call $136load_method.1($172binary_subscr.20, func=$136load_method.1, args=[Var($172binary_subscr.20, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,851 - DEBUG - on stmt: $182binary_subscr.24 = getitem(value=x, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:41,851 - DEBUG - find_def var='n' stmt=$182binary_subscr.24 = getitem(value=x, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:41,851 - DEBUG - replaced with: $182binary_subscr.24 = getitem(value=x, index=n.7, fn=<built-in function getitem>)
2025-01-31 15:31:41,851 - DEBUG - on stmt: $186compare_op.26 = $182binary_subscr.24 == maxn
2025-01-31 15:31:41,851 - DEBUG - on stmt: peaks[n] = $186compare_op.26
2025-01-31 15:31:41,851 - DEBUG - find_def var='n' stmt=peaks[n] = $186compare_op.26
2025-01-31 15:31:41,851 - DEBUG - replaced with: peaks[n.7] = $186compare_op.26
2025-01-31 15:31:41,851 - DEBUG - on stmt: $198binary_subscr.31 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:41,851 - DEBUG - find_def var='n' stmt=$198binary_subscr.31 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:41,851 - DEBUG - replaced with: $198binary_subscr.31 = getitem(value=peaks, index=n.7, fn=<built-in function getitem>)
2025-01-31 15:31:41,851 - DEBUG - on stmt: bool200 = global(bool: <class 'bool'>)
2025-01-31 15:31:41,851 - DEBUG - on stmt: $200pred = call bool200($198binary_subscr.31, func=bool200, args=(Var($198binary_subscr.31, utils.py:1235),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,851 - DEBUG - on stmt: branch $200pred, 212, 202
2025-01-31 15:31:41,851 - DEBUG - ==== SSA block rewrite pass on 202
2025-01-31 15:31:41,851 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e88a82b0>
2025-01-31 15:31:41,851 - DEBUG - on stmt: $const204.1 = const(int, 1)
2025-01-31 15:31:41,851 - DEBUG - on stmt: $206inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const204.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:41,852 - DEBUG - find_def var='n' stmt=$206inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const204.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:41,852 - DEBUG - find_def_from_top label 202
2025-01-31 15:31:41,852 - DEBUG - idom 134 from label 202
2025-01-31 15:31:41,852 - DEBUG - find_def_from_bottom label 134
2025-01-31 15:31:41,852 - DEBUG - replaced with: $206inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n.7, rhs=$const204.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:41,852 - DEBUG - on stmt: n.2 = $206inplace_add.2
2025-01-31 15:31:41,852 - DEBUG - on stmt: jump 333
2025-01-31 15:31:41,852 - DEBUG - ==== SSA block rewrite pass on 212
2025-01-31 15:31:41,852 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e88a82b0>
2025-01-31 15:31:41,852 - DEBUG - on stmt: $212load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:41,852 - DEBUG - on stmt: $214load_method.1 = getattr(value=$212load_global.0, attr=mean)
2025-01-31 15:31:41,852 - DEBUG - on stmt: $218load_global.3 = global(max: <built-in function max>)
2025-01-31 15:31:41,852 - DEBUG - on stmt: $const220.4 = const(int, 0)
2025-01-31 15:31:41,852 - DEBUG - on stmt: $226binary_subtract.7 = n - pre_avg
2025-01-31 15:31:41,852 - DEBUG - find_def var='n' stmt=$226binary_subtract.7 = n - pre_avg
2025-01-31 15:31:41,852 - DEBUG - find_def_from_top label 212
2025-01-31 15:31:41,852 - DEBUG - idom 134 from label 212
2025-01-31 15:31:41,852 - DEBUG - find_def_from_bottom label 134
2025-01-31 15:31:41,852 - DEBUG - replaced with: $226binary_subtract.7 = n.7 - pre_avg
2025-01-31 15:31:41,852 - DEBUG - on stmt: $228call_function.8 = call $218load_global.3($const220.4, $226binary_subtract.7, func=$218load_global.3, args=[Var($const220.4, utils.py:1239), Var($226binary_subtract.7, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,852 - DEBUG - on stmt: $230load_global.9 = global(min: <built-in function min>)
2025-01-31 15:31:41,852 - DEBUG - on stmt: $236binary_add.12 = n + post_avg
2025-01-31 15:31:41,852 - DEBUG - find_def var='n' stmt=$236binary_add.12 = n + post_avg
2025-01-31 15:31:41,852 - DEBUG - find_def_from_top label 212
2025-01-31 15:31:41,852 - DEBUG - idom 134 from label 212
2025-01-31 15:31:41,852 - DEBUG - find_def_from_bottom label 134
2025-01-31 15:31:41,853 - DEBUG - replaced with: $236binary_add.12 = n.7 + post_avg
2025-01-31 15:31:41,853 - DEBUG - on stmt: $240load_attr.14 = getattr(value=x, attr=shape)
2025-01-31 15:31:41,853 - DEBUG - on stmt: $const242.15 = const(int, 0)
2025-01-31 15:31:41,853 - DEBUG - on stmt: $244binary_subscr.16 = static_getitem(value=$240load_attr.14, index=0, index_var=$const242.15, fn=<built-in function getitem>)
2025-01-31 15:31:41,853 - DEBUG - on stmt: $246call_function.17 = call $230load_global.9($236binary_add.12, $244binary_subscr.16, func=$230load_global.9, args=[Var($236binary_add.12, utils.py:1239), Var($244binary_subscr.16, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,853 - DEBUG - on stmt: $248build_slice.18 = global(slice: <class 'slice'>)
2025-01-31 15:31:41,853 - DEBUG - on stmt: $248build_slice.19 = call $248build_slice.18($228call_function.8, $246call_function.17, func=$248build_slice.18, args=(Var($228call_function.8, utils.py:1239), Var($246call_function.17, utils.py:1239)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,853 - DEBUG - on stmt: $250binary_subscr.20 = getitem(value=x, index=$248build_slice.19, fn=<built-in function getitem>)
2025-01-31 15:31:41,853 - DEBUG - on stmt: avgn = call $214load_method.1($250binary_subscr.20, func=$214load_method.1, args=[Var($250binary_subscr.20, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,853 - DEBUG - on stmt: $262binary_subscr.26 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:41,853 - DEBUG - find_def var='n' stmt=$262binary_subscr.26 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:41,853 - DEBUG - find_def_from_top label 212
2025-01-31 15:31:41,853 - DEBUG - idom 134 from label 212
2025-01-31 15:31:41,853 - DEBUG - find_def_from_bottom label 134
2025-01-31 15:31:41,853 - DEBUG - replaced with: $262binary_subscr.26 = getitem(value=peaks, index=n.7, fn=<built-in function getitem>)
2025-01-31 15:31:41,853 - DEBUG - on stmt: $268binary_subscr.29 = getitem(value=x, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:41,853 - DEBUG - find_def var='n' stmt=$268binary_subscr.29 = getitem(value=x, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:41,853 - DEBUG - find_def_from_top label 212
2025-01-31 15:31:41,853 - DEBUG - idom 134 from label 212
2025-01-31 15:31:41,853 - DEBUG - find_def_from_bottom label 134
2025-01-31 15:31:41,853 - DEBUG - replaced with: $268binary_subscr.29 = getitem(value=x, index=n.7, fn=<built-in function getitem>)
2025-01-31 15:31:41,853 - DEBUG - on stmt: $274binary_add.32 = avgn + delta
2025-01-31 15:31:41,853 - DEBUG - on stmt: $276compare_op.33 = $268binary_subscr.29 >= $274binary_add.32
2025-01-31 15:31:41,854 - DEBUG - on stmt: $278inplace_and.34 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$262binary_subscr.26, rhs=$276compare_op.33, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:41,854 - DEBUG - on stmt: peaks[n] = $278inplace_and.34
2025-01-31 15:31:41,854 - DEBUG - find_def var='n' stmt=peaks[n] = $278inplace_and.34
2025-01-31 15:31:41,854 - DEBUG - find_def_from_top label 212
2025-01-31 15:31:41,854 - DEBUG - idom 134 from label 212
2025-01-31 15:31:41,854 - DEBUG - find_def_from_bottom label 134
2025-01-31 15:31:41,854 - DEBUG - replaced with: peaks[n.7] = $278inplace_and.34
2025-01-31 15:31:41,854 - DEBUG - on stmt: $288binary_subscr.37 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:41,854 - DEBUG - find_def var='n' stmt=$288binary_subscr.37 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:41,854 - DEBUG - find_def_from_top label 212
2025-01-31 15:31:41,854 - DEBUG - idom 134 from label 212
2025-01-31 15:31:41,854 - DEBUG - find_def_from_bottom label 134
2025-01-31 15:31:41,854 - DEBUG - replaced with: $288binary_subscr.37 = getitem(value=peaks, index=n.7, fn=<built-in function getitem>)
2025-01-31 15:31:41,854 - DEBUG - on stmt: bool290 = global(bool: <class 'bool'>)
2025-01-31 15:31:41,854 - DEBUG - on stmt: $290pred = call bool290($288binary_subscr.37, func=bool290, args=(Var($288binary_subscr.37, utils.py:1242),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,854 - DEBUG - on stmt: branch $290pred, 302, 292
2025-01-31 15:31:41,854 - DEBUG - ==== SSA block rewrite pass on 292
2025-01-31 15:31:41,854 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e88a82b0>
2025-01-31 15:31:41,854 - DEBUG - on stmt: $const294.1 = const(int, 1)
2025-01-31 15:31:41,854 - DEBUG - on stmt: $296inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const294.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:41,854 - DEBUG - find_def var='n' stmt=$296inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const294.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:41,854 - DEBUG - find_def_from_top label 292
2025-01-31 15:31:41,854 - DEBUG - idom 212 from label 292
2025-01-31 15:31:41,854 - DEBUG - find_def_from_bottom label 212
2025-01-31 15:31:41,854 - DEBUG - find_def_from_top label 212
2025-01-31 15:31:41,854 - DEBUG - idom 134 from label 212
2025-01-31 15:31:41,854 - DEBUG - find_def_from_bottom label 134
2025-01-31 15:31:41,855 - DEBUG - replaced with: $296inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n.7, rhs=$const294.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:41,855 - DEBUG - on stmt: n.3 = $296inplace_add.2
2025-01-31 15:31:41,855 - DEBUG - on stmt: jump 333
2025-01-31 15:31:41,855 - DEBUG - ==== SSA block rewrite pass on 302
2025-01-31 15:31:41,855 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e88a82b0>
2025-01-31 15:31:41,855 - DEBUG - on stmt: $const306.2 = const(int, 1)
2025-01-31 15:31:41,855 - DEBUG - on stmt: $308binary_add.3 = wait + $const306.2
2025-01-31 15:31:41,855 - DEBUG - on stmt: $310inplace_add.4 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$308binary_add.3, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:41,855 - DEBUG - find_def var='n' stmt=$310inplace_add.4 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$308binary_add.3, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:41,855 - DEBUG - find_def_from_top label 302
2025-01-31 15:31:41,855 - DEBUG - idom 212 from label 302
2025-01-31 15:31:41,855 - DEBUG - find_def_from_bottom label 212
2025-01-31 15:31:41,855 - DEBUG - find_def_from_top label 212
2025-01-31 15:31:41,855 - DEBUG - idom 134 from label 212
2025-01-31 15:31:41,855 - DEBUG - find_def_from_bottom label 134
2025-01-31 15:31:41,855 - DEBUG - replaced with: $310inplace_add.4 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n.7, rhs=$308binary_add.3, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:41,855 - DEBUG - on stmt: n.4 = $310inplace_add.4
2025-01-31 15:31:41,855 - DEBUG - on stmt: $318load_attr.7 = getattr(value=x, attr=shape)
2025-01-31 15:31:41,855 - DEBUG - on stmt: $const320.8 = const(int, 0)
2025-01-31 15:31:41,855 - DEBUG - on stmt: $322binary_subscr.9 = static_getitem(value=$318load_attr.7, index=0, index_var=$const320.8, fn=<built-in function getitem>)
2025-01-31 15:31:41,855 - DEBUG - on stmt: $324compare_op.10 = n < $322binary_subscr.9
2025-01-31 15:31:41,855 - DEBUG - find_def var='n' stmt=$324compare_op.10 = n < $322binary_subscr.9
2025-01-31 15:31:41,855 - DEBUG - replaced with: $324compare_op.10 = n.4 < $322binary_subscr.9
2025-01-31 15:31:41,855 - DEBUG - on stmt: bool326 = global(bool: <class 'bool'>)
2025-01-31 15:31:41,855 - DEBUG - on stmt: $326pred = call bool326($324compare_op.10, func=bool326, args=(Var($324compare_op.10, utils.py:1229),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,855 - DEBUG - on stmt: branch $326pred, 134, 328
2025-01-31 15:31:41,856 - DEBUG - ==== SSA block rewrite pass on 328
2025-01-31 15:31:41,856 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e88a82b0>
2025-01-31 15:31:41,856 - DEBUG - on stmt: $const328.0 = const(NoneType, None)
2025-01-31 15:31:41,856 - DEBUG - on stmt: $330return_value.1 = cast(value=$const328.0)
2025-01-31 15:31:41,856 - DEBUG - on stmt: return $330return_value.1
2025-01-31 15:31:41,856 - DEBUG - ==== SSA block rewrite pass on 332
2025-01-31 15:31:41,856 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e88a82b0>
2025-01-31 15:31:41,856 - DEBUG - on stmt: $const332.0 = const(NoneType, None)
2025-01-31 15:31:41,856 - DEBUG - on stmt: $334return_value.1 = cast(value=$const332.0)
2025-01-31 15:31:41,856 - DEBUG - on stmt: return $334return_value.1
2025-01-31 15:31:41,856 - DEBUG - ==== SSA block rewrite pass on 333
2025-01-31 15:31:41,856 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e88a82b0>
2025-01-31 15:31:41,856 - DEBUG - on stmt: jump 120
2025-01-31 15:31:41,863 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=570)
           2	LOAD_FAST(arg=0, lineno=571)
           4	LOAD_ATTR(arg=0, lineno=571)
           6	LOAD_CONST(arg=1, lineno=571)
           8	COMPARE_OP(arg=2, lineno=571)
          10	POP_JUMP_IF_FALSE(arg=11, lineno=571)
          12	LOAD_GLOBAL(arg=1, lineno=572)
          14	LOAD_CONST(arg=2, lineno=572)
          16	CALL_FUNCTION(arg=1, lineno=572)
          18	RAISE_VARARGS(arg=1, lineno=572)
>         20	LOAD_GLOBAL(arg=2, lineno=575)
          22	LOAD_METHOD(arg=3, lineno=575)
          24	LOAD_FAST(arg=0, lineno=575)
          26	CALL_METHOD(arg=1, lineno=575)
          28	STORE_FAST(arg=1, lineno=575)
          30	LOAD_GLOBAL(arg=4, lineno=576)
          32	LOAD_FAST(arg=1, lineno=576)
          34	CALL_FUNCTION(arg=1, lineno=576)
          36	LOAD_METHOD(arg=5, lineno=576)
          38	LOAD_CONST(arg=1, lineno=576)
          40	CALL_METHOD(arg=1, lineno=576)
          42	STORE_FAST(arg=2, lineno=576)
          44	LOAD_DEREF(arg=1, lineno=577)
          46	LOAD_FAST(arg=2, lineno=577)
          48	CALL_FUNCTION(arg=1, lineno=577)
          50	POP_JUMP_IF_FALSE(arg=29, lineno=577)
          52	LOAD_FAST(arg=2, lineno=578)
          54	RETURN_VALUE(arg=None, lineno=578)
>         56	LOAD_FAST(arg=1, lineno=580)
          58	GET_ITER(arg=None, lineno=580)
>         60	FOR_ITER(arg=21, lineno=580)
          62	STORE_FAST(arg=3, lineno=580)
          64	LOAD_FAST(arg=3, lineno=581)
          66	LOAD_METHOD(arg=6, lineno=581)
          68	CALL_METHOD(arg=0, lineno=581)
          70	STORE_FAST(arg=4, lineno=581)
          72	LOAD_DEREF(arg=1, lineno=582)
          74	LOAD_FAST(arg=4, lineno=582)
          76	CALL_FUNCTION(arg=1, lineno=582)
          78	POP_JUMP_IF_FALSE(arg=45, lineno=582)
          80	LOAD_FAST(arg=4, lineno=583)
          82	ROT_TWO(arg=None, lineno=583)
          84	POP_TOP(arg=None, lineno=583)
          86	RETURN_VALUE(arg=None, lineno=583)
>         88	LOAD_DEREF(arg=0, lineno=584)
          90	LOAD_FAST(arg=4, lineno=584)
          92	LOAD_FAST(arg=2, lineno=584)
          94	CALL_FUNCTION(arg=2, lineno=584)
          96	POP_JUMP_IF_FALSE(arg=52, lineno=584)
          98	LOAD_FAST(arg=4, lineno=585)
         100	STORE_FAST(arg=2, lineno=585)
>        102	JUMP_ABSOLUTE(arg=31, lineno=585)
>        104	LOAD_FAST(arg=2, lineno=586)
         106	RETURN_VALUE(arg=None, lineno=586)
2025-01-31 15:31:41,863 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:31:41,863 - DEBUG - stack: []
2025-01-31 15:31:41,863 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:31:41,863 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=570)
2025-01-31 15:31:41,863 - DEBUG - stack []
2025-01-31 15:31:41,863 - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=571)
2025-01-31 15:31:41,863 - DEBUG - stack []
2025-01-31 15:31:41,863 - DEBUG - dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=571)
2025-01-31 15:31:41,863 - DEBUG - stack ['$a2.0']
2025-01-31 15:31:41,863 - DEBUG - dispatch pc=6, inst=LOAD_CONST(arg=1, lineno=571)
2025-01-31 15:31:41,863 - DEBUG - stack ['$4load_attr.1']
2025-01-31 15:31:41,863 - DEBUG - dispatch pc=8, inst=COMPARE_OP(arg=2, lineno=571)
2025-01-31 15:31:41,863 - DEBUG - stack ['$4load_attr.1', '$const6.2']
2025-01-31 15:31:41,864 - DEBUG - dispatch pc=10, inst=POP_JUMP_IF_FALSE(arg=11, lineno=571)
2025-01-31 15:31:41,864 - DEBUG - stack ['$8compare_op.3']
2025-01-31 15:31:41,864 - DEBUG - end state. edges=[Edge(pc=12, stack=(), blockstack=(), npush=0), Edge(pc=20, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:41,864 - DEBUG - pending: deque([State(pc_initial=12 nstack_initial=0), State(pc_initial=20 nstack_initial=0)])
2025-01-31 15:31:41,864 - DEBUG - stack: []
2025-01-31 15:31:41,864 - DEBUG - state.pc_initial: State(pc_initial=12 nstack_initial=0)
2025-01-31 15:31:41,864 - DEBUG - dispatch pc=12, inst=LOAD_GLOBAL(arg=1, lineno=572)
2025-01-31 15:31:41,864 - DEBUG - stack []
2025-01-31 15:31:41,864 - DEBUG - dispatch pc=14, inst=LOAD_CONST(arg=2, lineno=572)
2025-01-31 15:31:41,864 - DEBUG - stack ['$12load_global.0']
2025-01-31 15:31:41,864 - DEBUG - dispatch pc=16, inst=CALL_FUNCTION(arg=1, lineno=572)
2025-01-31 15:31:41,864 - DEBUG - stack ['$12load_global.0', '$const14.1']
2025-01-31 15:31:41,864 - DEBUG - dispatch pc=18, inst=RAISE_VARARGS(arg=1, lineno=572)
2025-01-31 15:31:41,864 - DEBUG - stack ['$16call_function.2']
2025-01-31 15:31:41,864 - DEBUG - end state. edges=[]
2025-01-31 15:31:41,864 - DEBUG - pending: deque([State(pc_initial=20 nstack_initial=0)])
2025-01-31 15:31:41,864 - DEBUG - stack: []
2025-01-31 15:31:41,864 - DEBUG - state.pc_initial: State(pc_initial=20 nstack_initial=0)
2025-01-31 15:31:41,864 - DEBUG - dispatch pc=20, inst=LOAD_GLOBAL(arg=2, lineno=575)
2025-01-31 15:31:41,864 - DEBUG - stack []
2025-01-31 15:31:41,864 - DEBUG - dispatch pc=22, inst=LOAD_METHOD(arg=3, lineno=575)
2025-01-31 15:31:41,864 - DEBUG - stack ['$20load_global.0']
2025-01-31 15:31:41,864 - DEBUG - dispatch pc=24, inst=LOAD_FAST(arg=0, lineno=575)
2025-01-31 15:31:41,864 - DEBUG - stack ['$22load_method.1']
2025-01-31 15:31:41,864 - DEBUG - dispatch pc=26, inst=CALL_METHOD(arg=1, lineno=575)
2025-01-31 15:31:41,864 - DEBUG - stack ['$22load_method.1', '$a24.2']
2025-01-31 15:31:41,864 - DEBUG - dispatch pc=28, inst=STORE_FAST(arg=1, lineno=575)
2025-01-31 15:31:41,864 - DEBUG - stack ['$26call_method.3']
2025-01-31 15:31:41,864 - DEBUG - dispatch pc=30, inst=LOAD_GLOBAL(arg=4, lineno=576)
2025-01-31 15:31:41,865 - DEBUG - stack []
2025-01-31 15:31:41,865 - DEBUG - dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=576)
2025-01-31 15:31:41,865 - DEBUG - stack ['$30load_global.4']
2025-01-31 15:31:41,865 - DEBUG - dispatch pc=34, inst=CALL_FUNCTION(arg=1, lineno=576)
2025-01-31 15:31:41,865 - DEBUG - stack ['$30load_global.4', '$it32.5']
2025-01-31 15:31:41,865 - DEBUG - dispatch pc=36, inst=LOAD_METHOD(arg=5, lineno=576)
2025-01-31 15:31:41,865 - DEBUG - stack ['$34call_function.6']
2025-01-31 15:31:41,865 - DEBUG - dispatch pc=38, inst=LOAD_CONST(arg=1, lineno=576)
2025-01-31 15:31:41,865 - DEBUG - stack ['$36load_method.7']
2025-01-31 15:31:41,865 - DEBUG - dispatch pc=40, inst=CALL_METHOD(arg=1, lineno=576)
2025-01-31 15:31:41,865 - DEBUG - stack ['$36load_method.7', '$const38.8']
2025-01-31 15:31:41,865 - DEBUG - dispatch pc=42, inst=STORE_FAST(arg=2, lineno=576)
2025-01-31 15:31:41,865 - DEBUG - stack ['$40call_method.9']
2025-01-31 15:31:41,865 - DEBUG - dispatch pc=44, inst=LOAD_DEREF(arg=1, lineno=577)
2025-01-31 15:31:41,865 - DEBUG - stack []
2025-01-31 15:31:41,865 - DEBUG - dispatch pc=46, inst=LOAD_FAST(arg=2, lineno=577)
2025-01-31 15:31:41,865 - DEBUG - stack ['$44load_deref.10']
2025-01-31 15:31:41,865 - DEBUG - dispatch pc=48, inst=CALL_FUNCTION(arg=1, lineno=577)
2025-01-31 15:31:41,865 - DEBUG - stack ['$44load_deref.10', '$max_value46.11']
2025-01-31 15:31:41,865 - DEBUG - dispatch pc=50, inst=POP_JUMP_IF_FALSE(arg=29, lineno=577)
2025-01-31 15:31:41,865 - DEBUG - stack ['$48call_function.12']
2025-01-31 15:31:41,865 - DEBUG - end state. edges=[Edge(pc=52, stack=(), blockstack=(), npush=0), Edge(pc=56, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:41,865 - DEBUG - pending: deque([State(pc_initial=52 nstack_initial=0), State(pc_initial=56 nstack_initial=0)])
2025-01-31 15:31:41,865 - DEBUG - stack: []
2025-01-31 15:31:41,865 - DEBUG - state.pc_initial: State(pc_initial=52 nstack_initial=0)
2025-01-31 15:31:41,865 - DEBUG - dispatch pc=52, inst=LOAD_FAST(arg=2, lineno=578)
2025-01-31 15:31:41,865 - DEBUG - stack []
2025-01-31 15:31:41,865 - DEBUG - dispatch pc=54, inst=RETURN_VALUE(arg=None, lineno=578)
2025-01-31 15:31:41,866 - DEBUG - stack ['$max_value52.0']
2025-01-31 15:31:41,866 - DEBUG - end state. edges=[]
2025-01-31 15:31:41,866 - DEBUG - pending: deque([State(pc_initial=56 nstack_initial=0)])
2025-01-31 15:31:41,866 - DEBUG - stack: []
2025-01-31 15:31:41,866 - DEBUG - state.pc_initial: State(pc_initial=56 nstack_initial=0)
2025-01-31 15:31:41,866 - DEBUG - dispatch pc=56, inst=LOAD_FAST(arg=1, lineno=580)
2025-01-31 15:31:41,866 - DEBUG - stack []
2025-01-31 15:31:41,866 - DEBUG - dispatch pc=58, inst=GET_ITER(arg=None, lineno=580)
2025-01-31 15:31:41,866 - DEBUG - stack ['$it56.0']
2025-01-31 15:31:41,866 - DEBUG - end state. edges=[Edge(pc=60, stack=('$58get_iter.1',), blockstack=(), npush=0)]
2025-01-31 15:31:41,866 - DEBUG - pending: deque([State(pc_initial=60 nstack_initial=1)])
2025-01-31 15:31:41,866 - DEBUG - stack: ['$phi60.0']
2025-01-31 15:31:41,866 - DEBUG - state.pc_initial: State(pc_initial=60 nstack_initial=1)
2025-01-31 15:31:41,866 - DEBUG - dispatch pc=60, inst=FOR_ITER(arg=21, lineno=580)
2025-01-31 15:31:41,866 - DEBUG - stack ['$phi60.0']
2025-01-31 15:31:41,866 - DEBUG - end state. edges=[Edge(pc=104, stack=(), blockstack=(), npush=0), Edge(pc=62, stack=('$phi60.0', '$60for_iter.2'), blockstack=(), npush=0)]
2025-01-31 15:31:41,866 - DEBUG - pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=62 nstack_initial=2)])
2025-01-31 15:31:41,866 - DEBUG - stack: []
2025-01-31 15:31:41,866 - DEBUG - state.pc_initial: State(pc_initial=104 nstack_initial=0)
2025-01-31 15:31:41,866 - DEBUG - dispatch pc=104, inst=LOAD_FAST(arg=2, lineno=586)
2025-01-31 15:31:41,866 - DEBUG - stack []
2025-01-31 15:31:41,866 - DEBUG - dispatch pc=106, inst=RETURN_VALUE(arg=None, lineno=586)
2025-01-31 15:31:41,866 - DEBUG - stack ['$max_value104.0']
2025-01-31 15:31:41,866 - DEBUG - end state. edges=[]
2025-01-31 15:31:41,866 - DEBUG - pending: deque([State(pc_initial=62 nstack_initial=2)])
2025-01-31 15:31:41,866 - DEBUG - stack: ['$phi62.0', '$phi62.1']
2025-01-31 15:31:41,866 - DEBUG - state.pc_initial: State(pc_initial=62 nstack_initial=2)
2025-01-31 15:31:41,866 - DEBUG - dispatch pc=62, inst=STORE_FAST(arg=3, lineno=580)
2025-01-31 15:31:41,866 - DEBUG - stack ['$phi62.0', '$phi62.1']
2025-01-31 15:31:41,867 - DEBUG - dispatch pc=64, inst=LOAD_FAST(arg=3, lineno=581)
2025-01-31 15:31:41,867 - DEBUG - stack ['$phi62.0']
2025-01-31 15:31:41,867 - DEBUG - dispatch pc=66, inst=LOAD_METHOD(arg=6, lineno=581)
2025-01-31 15:31:41,867 - DEBUG - stack ['$phi62.0', '$view64.2']
2025-01-31 15:31:41,867 - DEBUG - dispatch pc=68, inst=CALL_METHOD(arg=0, lineno=581)
2025-01-31 15:31:41,867 - DEBUG - stack ['$phi62.0', '$66load_method.3']
2025-01-31 15:31:41,867 - DEBUG - dispatch pc=70, inst=STORE_FAST(arg=4, lineno=581)
2025-01-31 15:31:41,867 - DEBUG - stack ['$phi62.0', '$68call_method.4']
2025-01-31 15:31:41,867 - DEBUG - dispatch pc=72, inst=LOAD_DEREF(arg=1, lineno=582)
2025-01-31 15:31:41,867 - DEBUG - stack ['$phi62.0']
2025-01-31 15:31:41,867 - DEBUG - dispatch pc=74, inst=LOAD_FAST(arg=4, lineno=582)
2025-01-31 15:31:41,867 - DEBUG - stack ['$phi62.0', '$72load_deref.5']
2025-01-31 15:31:41,867 - DEBUG - dispatch pc=76, inst=CALL_FUNCTION(arg=1, lineno=582)
2025-01-31 15:31:41,867 - DEBUG - stack ['$phi62.0', '$72load_deref.5', '$v74.6']
2025-01-31 15:31:41,867 - DEBUG - dispatch pc=78, inst=POP_JUMP_IF_FALSE(arg=45, lineno=582)
2025-01-31 15:31:41,867 - DEBUG - stack ['$phi62.0', '$76call_function.7']
2025-01-31 15:31:41,867 - DEBUG - end state. edges=[Edge(pc=80, stack=('$phi62.0',), blockstack=(), npush=0), Edge(pc=88, stack=('$phi62.0',), blockstack=(), npush=0)]
2025-01-31 15:31:41,867 - DEBUG - pending: deque([State(pc_initial=80 nstack_initial=1), State(pc_initial=88 nstack_initial=1)])
2025-01-31 15:31:41,867 - DEBUG - stack: ['$phi80.0']
2025-01-31 15:31:41,867 - DEBUG - state.pc_initial: State(pc_initial=80 nstack_initial=1)
2025-01-31 15:31:41,867 - DEBUG - dispatch pc=80, inst=LOAD_FAST(arg=4, lineno=583)
2025-01-31 15:31:41,867 - DEBUG - stack ['$phi80.0']
2025-01-31 15:31:41,867 - DEBUG - dispatch pc=82, inst=ROT_TWO(arg=None, lineno=583)
2025-01-31 15:31:41,867 - DEBUG - stack ['$phi80.0', '$v80.1']
2025-01-31 15:31:41,867 - DEBUG - dispatch pc=84, inst=POP_TOP(arg=None, lineno=583)
2025-01-31 15:31:41,867 - DEBUG - stack ['$v80.1', '$phi80.0']
2025-01-31 15:31:41,867 - DEBUG - dispatch pc=86, inst=RETURN_VALUE(arg=None, lineno=583)
2025-01-31 15:31:41,867 - DEBUG - stack ['$v80.1']
2025-01-31 15:31:41,867 - DEBUG - end state. edges=[]
2025-01-31 15:31:41,868 - DEBUG - pending: deque([State(pc_initial=88 nstack_initial=1)])
2025-01-31 15:31:41,868 - DEBUG - stack: ['$phi88.0']
2025-01-31 15:31:41,868 - DEBUG - state.pc_initial: State(pc_initial=88 nstack_initial=1)
2025-01-31 15:31:41,868 - DEBUG - dispatch pc=88, inst=LOAD_DEREF(arg=0, lineno=584)
2025-01-31 15:31:41,868 - DEBUG - stack ['$phi88.0']
2025-01-31 15:31:41,868 - DEBUG - dispatch pc=90, inst=LOAD_FAST(arg=4, lineno=584)
2025-01-31 15:31:41,868 - DEBUG - stack ['$phi88.0', '$88load_deref.1']
2025-01-31 15:31:41,868 - DEBUG - dispatch pc=92, inst=LOAD_FAST(arg=2, lineno=584)
2025-01-31 15:31:41,868 - DEBUG - stack ['$phi88.0', '$88load_deref.1', '$v90.2']
2025-01-31 15:31:41,868 - DEBUG - dispatch pc=94, inst=CALL_FUNCTION(arg=2, lineno=584)
2025-01-31 15:31:41,868 - DEBUG - stack ['$phi88.0', '$88load_deref.1', '$v90.2', '$max_value92.3']
2025-01-31 15:31:41,868 - DEBUG - dispatch pc=96, inst=POP_JUMP_IF_FALSE(arg=52, lineno=584)
2025-01-31 15:31:41,868 - DEBUG - stack ['$phi88.0', '$94call_function.4']
2025-01-31 15:31:41,868 - DEBUG - end state. edges=[Edge(pc=98, stack=('$phi88.0',), blockstack=(), npush=0), Edge(pc=102, stack=('$phi88.0',), blockstack=(), npush=0)]
2025-01-31 15:31:41,868 - DEBUG - pending: deque([State(pc_initial=98 nstack_initial=1), State(pc_initial=102 nstack_initial=1)])
2025-01-31 15:31:41,868 - DEBUG - stack: ['$phi98.0']
2025-01-31 15:31:41,868 - DEBUG - state.pc_initial: State(pc_initial=98 nstack_initial=1)
2025-01-31 15:31:41,868 - DEBUG - dispatch pc=98, inst=LOAD_FAST(arg=4, lineno=585)
2025-01-31 15:31:41,868 - DEBUG - stack ['$phi98.0']
2025-01-31 15:31:41,868 - DEBUG - dispatch pc=100, inst=STORE_FAST(arg=2, lineno=585)
2025-01-31 15:31:41,868 - DEBUG - stack ['$phi98.0', '$v98.1']
2025-01-31 15:31:41,868 - DEBUG - end state. edges=[Edge(pc=102, stack=('$phi98.0',), blockstack=(), npush=0)]
2025-01-31 15:31:41,868 - DEBUG - pending: deque([State(pc_initial=102 nstack_initial=1), State(pc_initial=102 nstack_initial=1)])
2025-01-31 15:31:41,868 - DEBUG - stack: ['$phi102.0']
2025-01-31 15:31:41,868 - DEBUG - state.pc_initial: State(pc_initial=102 nstack_initial=1)
2025-01-31 15:31:41,868 - DEBUG - dispatch pc=102, inst=JUMP_ABSOLUTE(arg=31, lineno=585)
2025-01-31 15:31:41,868 - DEBUG - stack ['$phi102.0']
2025-01-31 15:31:41,868 - DEBUG - end state. edges=[Edge(pc=60, stack=('$phi102.0',), blockstack=(), npush=0)]
2025-01-31 15:31:41,869 - DEBUG - pending: deque([State(pc_initial=102 nstack_initial=1), State(pc_initial=60 nstack_initial=1)])
2025-01-31 15:31:41,869 - DEBUG - pending: deque([State(pc_initial=60 nstack_initial=1)])
2025-01-31 15:31:41,869 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:31:41,869 - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=12 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=0): set(),
             State(pc_initial=52 nstack_initial=0): set(),
             State(pc_initial=56 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=1): {'$phi60.0'},
             State(pc_initial=62 nstack_initial=2): {'$phi62.1'},
             State(pc_initial=80 nstack_initial=1): set(),
             State(pc_initial=88 nstack_initial=1): set(),
             State(pc_initial=98 nstack_initial=1): set(),
             State(pc_initial=102 nstack_initial=1): set(),
             State(pc_initial=104 nstack_initial=0): set()})
2025-01-31 15:31:41,869 - DEBUG - defmap: {'$phi60.0': State(pc_initial=56 nstack_initial=0),
 '$phi62.1': State(pc_initial=60 nstack_initial=1)}
2025-01-31 15:31:41,869 - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi102.0': {('$phi88.0', State(pc_initial=88 nstack_initial=1)),
                           ('$phi98.0', State(pc_initial=98 nstack_initial=1))},
             '$phi60.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0)),
                          ('$phi102.0',
                           State(pc_initial=102 nstack_initial=1))},
             '$phi62.0': {('$phi60.0', State(pc_initial=60 nstack_initial=1))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))},
             '$phi80.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi88.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi98.0': {('$phi88.0', State(pc_initial=88 nstack_initial=1))}})
2025-01-31 15:31:41,869 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi102.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi60.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0)),
                          ('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi62.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0)),
                          ('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))},
             '$phi80.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi88.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi98.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))}})
2025-01-31 15:31:41,870 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi102.0': {('$58get_iter.1',
                            State(pc_initial=56 nstack_initial=0))},
             '$phi60.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi62.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))},
             '$phi80.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi88.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi98.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))}})
2025-01-31 15:31:41,870 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi102.0': {('$58get_iter.1',
                            State(pc_initial=56 nstack_initial=0))},
             '$phi60.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi62.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))},
             '$phi80.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi88.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi98.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))}})
2025-01-31 15:31:41,870 - DEBUG - keep phismap: {'$phi60.0': {('$58get_iter.1', State(pc_initial=56 nstack_initial=0))},
 '$phi62.1': {('$60for_iter.2', State(pc_initial=60 nstack_initial=1))}}
2025-01-31 15:31:41,870 - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=56 nstack_initial=0): {'$phi60.0': '$58get_iter.1'},
             State(pc_initial=60 nstack_initial=1): {'$phi62.1': '$60for_iter.2'}})
2025-01-31 15:31:41,870 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:31:41,870 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'item': '$a2.0', 'res': '$4load_attr.1'}), (6, {'res': '$const6.2'}), (8, {'lhs': '$4load_attr.1', 'rhs': '$const6.2', 'res': '$8compare_op.3'}), (10, {'pred': '$8compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={12: (), 20: ()})
2025-01-31 15:31:41,870 - DEBUG - block_infos State(pc_initial=12 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$12load_global.0'}), (14, {'res': '$const14.1'}), (16, {'func': '$12load_global.0', 'args': ['$const14.1'], 'res': '$16call_function.2'}), (18, {'exc': '$16call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:41,871 - DEBUG - block_infos State(pc_initial=20 nstack_initial=0):
AdaptBlockInfo(insts=((20, {'res': '$20load_global.0'}), (22, {'item': '$20load_global.0', 'res': '$22load_method.1'}), (24, {'res': '$a24.2'}), (26, {'func': '$22load_method.1', 'args': ['$a24.2'], 'res': '$26call_method.3'}), (28, {'value': '$26call_method.3'}), (30, {'res': '$30load_global.4'}), (32, {'res': '$it32.5'}), (34, {'func': '$30load_global.4', 'args': ['$it32.5'], 'res': '$34call_function.6'}), (36, {'item': '$34call_function.6', 'res': '$36load_method.7'}), (38, {'res': '$const38.8'}), (40, {'func': '$36load_method.7', 'args': ['$const38.8'], 'res': '$40call_method.9'}), (42, {'value': '$40call_method.9'}), (44, {'res': '$44load_deref.10'}), (46, {'res': '$max_value46.11'}), (48, {'func': '$44load_deref.10', 'args': ['$max_value46.11'], 'res': '$48call_function.12'}), (50, {'pred': '$48call_function.12'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={52: (), 56: ()})
2025-01-31 15:31:41,871 - DEBUG - block_infos State(pc_initial=52 nstack_initial=0):
AdaptBlockInfo(insts=((52, {'res': '$max_value52.0'}), (54, {'retval': '$max_value52.0', 'castval': '$54return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:41,871 - DEBUG - block_infos State(pc_initial=56 nstack_initial=0):
AdaptBlockInfo(insts=((56, {'res': '$it56.0'}), (58, {'value': '$it56.0', 'res': '$58get_iter.1'})), outgoing_phis={'$phi60.0': '$58get_iter.1'}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: ('$58get_iter.1',)})
2025-01-31 15:31:41,871 - DEBUG - block_infos State(pc_initial=60 nstack_initial=1):
AdaptBlockInfo(insts=((60, {'iterator': '$phi60.0', 'pair': '$60for_iter.1', 'indval': '$60for_iter.2', 'pred': '$60for_iter.3'}),), outgoing_phis={'$phi62.1': '$60for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={104: (), 62: ('$phi60.0', '$60for_iter.2')})
2025-01-31 15:31:41,871 - DEBUG - block_infos State(pc_initial=62 nstack_initial=2):
AdaptBlockInfo(insts=((62, {'value': '$phi62.1'}), (64, {'res': '$view64.2'}), (66, {'item': '$view64.2', 'res': '$66load_method.3'}), (68, {'func': '$66load_method.3', 'args': [], 'res': '$68call_method.4'}), (70, {'value': '$68call_method.4'}), (72, {'res': '$72load_deref.5'}), (74, {'res': '$v74.6'}), (76, {'func': '$72load_deref.5', 'args': ['$v74.6'], 'res': '$76call_function.7'}), (78, {'pred': '$76call_function.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$phi62.0',), 88: ('$phi62.0',)})
2025-01-31 15:31:41,871 - DEBUG - block_infos State(pc_initial=80 nstack_initial=1):
AdaptBlockInfo(insts=((80, {'res': '$v80.1'}), (86, {'retval': '$v80.1', 'castval': '$86return_value.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:41,871 - DEBUG - block_infos State(pc_initial=88 nstack_initial=1):
AdaptBlockInfo(insts=((88, {'res': '$88load_deref.1'}), (90, {'res': '$v90.2'}), (92, {'res': '$max_value92.3'}), (94, {'func': '$88load_deref.1', 'args': ['$v90.2', '$max_value92.3'], 'res': '$94call_function.4'}), (96, {'pred': '$94call_function.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={98: ('$phi88.0',), 102: ('$phi88.0',)})
2025-01-31 15:31:41,871 - DEBUG - block_infos State(pc_initial=98 nstack_initial=1):
AdaptBlockInfo(insts=((98, {'res': '$v98.1'}), (100, {'value': '$v98.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={102: ('$phi98.0',)})
2025-01-31 15:31:41,871 - DEBUG - block_infos State(pc_initial=102 nstack_initial=1):
AdaptBlockInfo(insts=((102, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: ('$phi102.0',)})
2025-01-31 15:31:41,871 - DEBUG - block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$max_value104.0'}), (106, {'retval': '$max_value104.0', 'castval': '$106return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:41,872 - DEBUG - label 0:
    a = arg(0, name=a)                       ['a']
    $4load_attr.1 = getattr(value=a, attr=size) ['$4load_attr.1', 'a']
    $const6.2 = const(int, 0)                ['$const6.2']
    $8compare_op.3 = $4load_attr.1 == $const6.2 ['$4load_attr.1', '$8compare_op.3', '$const6.2']
    bool10 = global(bool: <class 'bool'>)    ['bool10']
    $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:571),), kws=(), vararg=None, varkwarg=None, target=None) ['$10pred', '$8compare_op.3', 'bool10']
    branch $10pred, 12, 20                   ['$10pred']
label 12:
    $12load_global.0 = global(ValueError: <class 'ValueError'>) ['$12load_global.0']
    $const14.1 = const(str, zero-size array to reduction operation maximum which has no identity) ['$const14.1']
    $16call_function.2 = call $12load_global.0($const14.1, func=$12load_global.0, args=[Var($const14.1, arraymath.py:572)], kws=(), vararg=None, varkwarg=None, target=None) ['$12load_global.0', '$16call_function.2', '$const14.1']
    raise $16call_function.2                 ['$16call_function.2']
label 20:
    $20load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>) ['$20load_global.0']
    $22load_method.1 = getattr(value=$20load_global.0, attr=nditer) ['$20load_global.0', '$22load_method.1']
    it = call $22load_method.1(a, func=$22load_method.1, args=[Var(a, arraymath.py:570)], kws=(), vararg=None, varkwarg=None, target=None) ['$22load_method.1', 'a', 'it']
    $30load_global.4 = global(next: <built-in function next>) ['$30load_global.4']
    $34call_function.6 = call $30load_global.4(it, func=$30load_global.4, args=[Var(it, arraymath.py:575)], kws=(), vararg=None, varkwarg=None, target=None) ['$30load_global.4', '$34call_function.6', 'it']
    $36load_method.7 = getattr(value=$34call_function.6, attr=take) ['$34call_function.6', '$36load_method.7']
    $const38.8 = const(int, 0)               ['$const38.8']
    max_value = call $36load_method.7($const38.8, func=$36load_method.7, args=[Var($const38.8, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None) ['$36load_method.7', '$const38.8', 'max_value']
    $44load_deref.10 = freevar(pre_return_func: <function return_false at 0x7c89f0822950>) ['$44load_deref.10']
    $48call_function.12 = call $44load_deref.10(max_value, func=$44load_deref.10, args=[Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None) ['$44load_deref.10', '$48call_function.12', 'max_value']
    bool50 = global(bool: <class 'bool'>)    ['bool50']
    $50pred = call bool50($48call_function.12, func=bool50, args=(Var($48call_function.12, arraymath.py:577),), kws=(), vararg=None, varkwarg=None, target=None) ['$48call_function.12', '$50pred', 'bool50']
    branch $50pred, 52, 56                   ['$50pred']
label 52:
    $54return_value.1 = cast(value=max_value) ['$54return_value.1', 'max_value']
    return $54return_value.1                 ['$54return_value.1']
label 56:
    $58get_iter.1 = getiter(value=it)        ['$58get_iter.1', 'it']
    $phi60.0 = $58get_iter.1                 ['$58get_iter.1', '$phi60.0']
    jump 60                                  []
label 60:
    $60for_iter.1 = iternext(value=$phi60.0) ['$60for_iter.1', '$phi60.0']
    $60for_iter.2 = pair_first(value=$60for_iter.1) ['$60for_iter.1', '$60for_iter.2']
    $60for_iter.3 = pair_second(value=$60for_iter.1) ['$60for_iter.1', '$60for_iter.3']
    $phi62.1 = $60for_iter.2                 ['$60for_iter.2', '$phi62.1']
    branch $60for_iter.3, 62, 104            ['$60for_iter.3']
label 62:
    view = $phi62.1                          ['$phi62.1', 'view']
    $66load_method.3 = getattr(value=view, attr=item) ['$66load_method.3', 'view']
    v = call $66load_method.3(func=$66load_method.3, args=[], kws=(), vararg=None, varkwarg=None, target=None) ['$66load_method.3', 'v']
    $72load_deref.5 = freevar(pre_return_func: <function return_false at 0x7c89f0822950>) ['$72load_deref.5']
    $76call_function.7 = call $72load_deref.5(v, func=$72load_deref.5, args=[Var(v, arraymath.py:581)], kws=(), vararg=None, varkwarg=None, target=None) ['$72load_deref.5', '$76call_function.7', 'v']
    bool78 = global(bool: <class 'bool'>)    ['bool78']
    $78pred = call bool78($76call_function.7, func=bool78, args=(Var($76call_function.7, arraymath.py:582),), kws=(), vararg=None, varkwarg=None, target=None) ['$76call_function.7', '$78pred', 'bool78']
    branch $78pred, 80, 88                   ['$78pred']
label 80:
    $86return_value.2 = cast(value=v)        ['$86return_value.2', 'v']
    return $86return_value.2                 ['$86return_value.2']
label 88:
    $88load_deref.1 = freevar(comparator: <function max_comparator at 0x7c89f0822440>) ['$88load_deref.1']
    $94call_function.4 = call $88load_deref.1(v, max_value, func=$88load_deref.1, args=[Var(v, arraymath.py:581), Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None) ['$88load_deref.1', '$94call_function.4', 'max_value', 'v']
    bool96 = global(bool: <class 'bool'>)    ['bool96']
    $96pred = call bool96($94call_function.4, func=bool96, args=(Var($94call_function.4, arraymath.py:584),), kws=(), vararg=None, varkwarg=None, target=None) ['$94call_function.4', '$96pred', 'bool96']
    branch $96pred, 98, 102                  ['$96pred']
label 98:
    max_value = v                            ['max_value', 'v']
    jump 102                                 []
label 102:
    jump 60                                  []
label 104:
    $106return_value.1 = cast(value=max_value) ['$106return_value.1', 'max_value']
    return $106return_value.1                ['$106return_value.1']

2025-01-31 15:31:41,880 - DEBUG - ==== SSA block analysis pass on 0
2025-01-31 15:31:41,880 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8b4d5d0>
2025-01-31 15:31:41,880 - DEBUG - on stmt: a = arg(0, name=a)
2025-01-31 15:31:41,880 - DEBUG - on stmt: $4load_attr.1 = getattr(value=a, attr=size)
2025-01-31 15:31:41,880 - DEBUG - on stmt: $const6.2 = const(int, 0)
2025-01-31 15:31:41,880 - DEBUG - on stmt: $8compare_op.3 = $4load_attr.1 == $const6.2
2025-01-31 15:31:41,880 - DEBUG - on stmt: bool10 = global(bool: <class 'bool'>)
2025-01-31 15:31:41,880 - DEBUG - on stmt: $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:571),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,880 - DEBUG - on stmt: branch $10pred, 12, 20
2025-01-31 15:31:41,880 - DEBUG - ==== SSA block analysis pass on 12
2025-01-31 15:31:41,880 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8b4d5d0>
2025-01-31 15:31:41,880 - DEBUG - on stmt: $12load_global.0 = global(ValueError: <class 'ValueError'>)
2025-01-31 15:31:41,880 - DEBUG - on stmt: $const14.1 = const(str, zero-size array to reduction operation maximum which has no identity)
2025-01-31 15:31:41,880 - DEBUG - on stmt: $16call_function.2 = call $12load_global.0($const14.1, func=$12load_global.0, args=[Var($const14.1, arraymath.py:572)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,880 - DEBUG - on stmt: <static> raise <class 'ValueError'>('zero-size array to reduction operation maximum which has no identity')
2025-01-31 15:31:41,880 - DEBUG - ==== SSA block analysis pass on 20
2025-01-31 15:31:41,880 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8b4d5d0>
2025-01-31 15:31:41,880 - DEBUG - on stmt: $20load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:41,881 - DEBUG - on stmt: $22load_method.1 = getattr(value=$20load_global.0, attr=nditer)
2025-01-31 15:31:41,881 - DEBUG - on stmt: it = call $22load_method.1(a, func=$22load_method.1, args=[Var(a, arraymath.py:570)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,881 - DEBUG - on stmt: $30load_global.4 = global(next: <built-in function next>)
2025-01-31 15:31:41,881 - DEBUG - on stmt: $34call_function.6 = call $30load_global.4(it, func=$30load_global.4, args=[Var(it, arraymath.py:575)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,881 - DEBUG - on stmt: $36load_method.7 = getattr(value=$34call_function.6, attr=take)
2025-01-31 15:31:41,881 - DEBUG - on stmt: $const38.8 = const(int, 0)
2025-01-31 15:31:41,881 - DEBUG - on stmt: max_value = call $36load_method.7($const38.8, func=$36load_method.7, args=[Var($const38.8, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,881 - DEBUG - on stmt: $44load_deref.10 = freevar(pre_return_func: <function return_false at 0x7c89f0822950>)
2025-01-31 15:31:41,881 - DEBUG - on stmt: $48call_function.12 = call $44load_deref.10(max_value, func=$44load_deref.10, args=[Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,881 - DEBUG - on stmt: bool50 = global(bool: <class 'bool'>)
2025-01-31 15:31:41,881 - DEBUG - on stmt: $50pred = call bool50($48call_function.12, func=bool50, args=(Var($48call_function.12, arraymath.py:577),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,881 - DEBUG - on stmt: branch $50pred, 52, 56
2025-01-31 15:31:41,881 - DEBUG - ==== SSA block analysis pass on 52
2025-01-31 15:31:41,881 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8b4d5d0>
2025-01-31 15:31:41,881 - DEBUG - on stmt: $54return_value.1 = cast(value=max_value)
2025-01-31 15:31:41,881 - DEBUG - on stmt: return $54return_value.1
2025-01-31 15:31:41,881 - DEBUG - ==== SSA block analysis pass on 56
2025-01-31 15:31:41,881 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8b4d5d0>
2025-01-31 15:31:41,881 - DEBUG - on stmt: $58get_iter.1 = getiter(value=it)
2025-01-31 15:31:41,881 - DEBUG - on stmt: $phi60.0 = $58get_iter.1
2025-01-31 15:31:41,881 - DEBUG - on stmt: jump 60
2025-01-31 15:31:41,881 - DEBUG - ==== SSA block analysis pass on 60
2025-01-31 15:31:41,881 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8b4d5d0>
2025-01-31 15:31:41,881 - DEBUG - on stmt: $60for_iter.1 = iternext(value=$phi60.0)
2025-01-31 15:31:41,881 - DEBUG - on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
2025-01-31 15:31:41,882 - DEBUG - on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
2025-01-31 15:31:41,882 - DEBUG - on stmt: $phi62.1 = $60for_iter.2
2025-01-31 15:31:41,882 - DEBUG - on stmt: branch $60for_iter.3, 62, 104
2025-01-31 15:31:41,882 - DEBUG - ==== SSA block analysis pass on 62
2025-01-31 15:31:41,882 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8b4d5d0>
2025-01-31 15:31:41,882 - DEBUG - on stmt: view = $phi62.1
2025-01-31 15:31:41,882 - DEBUG - on stmt: $66load_method.3 = getattr(value=view, attr=item)
2025-01-31 15:31:41,882 - DEBUG - on stmt: v = call $66load_method.3(func=$66load_method.3, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,882 - DEBUG - on stmt: $72load_deref.5 = freevar(pre_return_func: <function return_false at 0x7c89f0822950>)
2025-01-31 15:31:41,882 - DEBUG - on stmt: $76call_function.7 = call $72load_deref.5(v, func=$72load_deref.5, args=[Var(v, arraymath.py:581)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,882 - DEBUG - on stmt: bool78 = global(bool: <class 'bool'>)
2025-01-31 15:31:41,882 - DEBUG - on stmt: $78pred = call bool78($76call_function.7, func=bool78, args=(Var($76call_function.7, arraymath.py:582),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,882 - DEBUG - on stmt: branch $78pred, 80, 88
2025-01-31 15:31:41,882 - DEBUG - ==== SSA block analysis pass on 80
2025-01-31 15:31:41,882 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8b4d5d0>
2025-01-31 15:31:41,882 - DEBUG - on stmt: $86return_value.2 = cast(value=v)
2025-01-31 15:31:41,882 - DEBUG - on stmt: return $86return_value.2
2025-01-31 15:31:41,882 - DEBUG - ==== SSA block analysis pass on 88
2025-01-31 15:31:41,882 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8b4d5d0>
2025-01-31 15:31:41,882 - DEBUG - on stmt: $88load_deref.1 = freevar(comparator: <function max_comparator at 0x7c89f0822440>)
2025-01-31 15:31:41,882 - DEBUG - on stmt: $94call_function.4 = call $88load_deref.1(v, max_value, func=$88load_deref.1, args=[Var(v, arraymath.py:581), Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,882 - DEBUG - on stmt: bool96 = global(bool: <class 'bool'>)
2025-01-31 15:31:41,882 - DEBUG - on stmt: $96pred = call bool96($94call_function.4, func=bool96, args=(Var($94call_function.4, arraymath.py:584),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,882 - DEBUG - on stmt: branch $96pred, 98, 102
2025-01-31 15:31:41,882 - DEBUG - ==== SSA block analysis pass on 98
2025-01-31 15:31:41,882 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8b4d5d0>
2025-01-31 15:31:41,883 - DEBUG - on stmt: max_value = v
2025-01-31 15:31:41,883 - DEBUG - on stmt: jump 102
2025-01-31 15:31:41,883 - DEBUG - ==== SSA block analysis pass on 102
2025-01-31 15:31:41,883 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8b4d5d0>
2025-01-31 15:31:41,883 - DEBUG - on stmt: jump 60
2025-01-31 15:31:41,883 - DEBUG - ==== SSA block analysis pass on 104
2025-01-31 15:31:41,883 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8b4d5d0>
2025-01-31 15:31:41,883 - DEBUG - on stmt: $106return_value.1 = cast(value=max_value)
2025-01-31 15:31:41,883 - DEBUG - on stmt: return $106return_value.1
2025-01-31 15:31:41,883 - DEBUG - defs defaultdict(<class 'list'>,
            {'$106return_value.1': [(<numba.core.ir.Assign object at 0x7c89e8b4d330>,
                                     104)],
             '$10pred': [(<numba.core.ir.Assign object at 0x7c89e83f15d0>, 0)],
             '$12load_global.0': [(<numba.core.ir.Assign object at 0x7c89e83f1420>,
                                   12)],
             '$16call_function.2': [(<numba.core.ir.Assign object at 0x7c89e83f1030>,
                                     12)],
             '$20load_global.0': [(<numba.core.ir.Assign object at 0x7c89e83f0940>,
                                   20)],
             '$22load_method.1': [(<numba.core.ir.Assign object at 0x7c89e83f0880>,
                                   20)],
             '$30load_global.4': [(<numba.core.ir.Assign object at 0x7c89e83f04f0>,
                                   20)],
             '$34call_function.6': [(<numba.core.ir.Assign object at 0x7c89e83f0160>,
                                     20)],
             '$36load_method.7': [(<numba.core.ir.Assign object at 0x7c89e83f1d80>,
                                   20)],
             '$44load_deref.10': [(<numba.core.ir.Assign object at 0x7c89e83f2cb0>,
                                   20)],
             '$48call_function.12': [(<numba.core.ir.Assign object at 0x7c89e83f2aa0>,
                                      20)],
             '$4load_attr.1': [(<numba.core.ir.Assign object at 0x7c89e83f1b40>,
                                0)],
             '$50pred': [(<numba.core.ir.Assign object at 0x7c89e83f0e50>, 20)],
             '$54return_value.1': [(<numba.core.ir.Assign object at 0x7c89e8b4feb0>,
                                    52)],
             '$58get_iter.1': [(<numba.core.ir.Assign object at 0x7c89e8b4fb80>,
                                56)],
             '$60for_iter.1': [(<numba.core.ir.Assign object at 0x7c89e8b4faf0>,
                                60)],
             '$60for_iter.2': [(<numba.core.ir.Assign object at 0x7c89e8b4f8b0>,
                                60)],
             '$60for_iter.3': [(<numba.core.ir.Assign object at 0x7c89e8b4f5b0>,
                                60)],
             '$66load_method.3': [(<numba.core.ir.Assign object at 0x7c89e83f2710>,
                                   62)],
             '$72load_deref.5': [(<numba.core.ir.Assign object at 0x7c89e83f3760>,
                                  62)],
             '$76call_function.7': [(<numba.core.ir.Assign object at 0x7c89e83f3160>,
                                     62)],
             '$78pred': [(<numba.core.ir.Assign object at 0x7c89e8b4e710>, 62)],
             '$86return_value.2': [(<numba.core.ir.Assign object at 0x7c89e8b4ed40>,
                                    80)],
             '$88load_deref.1': [(<numba.core.ir.Assign object at 0x7c89e8b4e350>,
                                  88)],
             '$8compare_op.3': [(<numba.core.ir.Assign object at 0x7c89e83f1960>,
                                 0)],
             '$94call_function.4': [(<numba.core.ir.Assign object at 0x7c89e8b4e110>,
                                     88)],
             '$96pred': [(<numba.core.ir.Assign object at 0x7c89e8b4f040>, 88)],
             '$const14.1': [(<numba.core.ir.Assign object at 0x7c89e83f1180>,
                             12)],
             '$const38.8': [(<numba.core.ir.Assign object at 0x7c89e83f00a0>,
                             20)],
             '$const6.2': [(<numba.core.ir.Assign object at 0x7c89e83f1810>,
                            0)],
             '$phi60.0': [(<numba.core.ir.Assign object at 0x7c89e8b4fbe0>,
                           56)],
             '$phi62.1': [(<numba.core.ir.Assign object at 0x7c89e8b4fc10>,
                           60)],
             'a': [(<numba.core.ir.Assign object at 0x7c89e83f2170>, 0)],
             'bool10': [(<numba.core.ir.Assign object at 0x7c89e83f1690>, 0)],
             'bool50': [(<numba.core.ir.Assign object at 0x7c89e83f0e20>, 20)],
             'bool78': [(<numba.core.ir.Assign object at 0x7c89e83f3b50>, 62)],
             'bool96': [(<numba.core.ir.Assign object at 0x7c89e8b4e770>, 88)],
             'it': [(<numba.core.ir.Assign object at 0x7c89e83f05e0>, 20)],
             'max_value': [(<numba.core.ir.Assign object at 0x7c89e83f3a60>,
                            20),
                           (<numba.core.ir.Assign object at 0x7c89e8b4ea40>,
                            98)],
             'v': [(<numba.core.ir.Assign object at 0x7c89e83f23e0>, 62)],
             'view': [(<numba.core.ir.Assign object at 0x7c89e8b4f310>, 62)]})
2025-01-31 15:31:41,884 - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x7c89ebae9840>
2025-01-31 15:31:41,884 - DEBUG - Fix SSA violator on var max_value
2025-01-31 15:31:41,884 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-31 15:31:41,884 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89eb99cf10>
2025-01-31 15:31:41,884 - DEBUG - on stmt: a = arg(0, name=a)
2025-01-31 15:31:41,884 - DEBUG - on stmt: $4load_attr.1 = getattr(value=a, attr=size)
2025-01-31 15:31:41,884 - DEBUG - on stmt: $const6.2 = const(int, 0)
2025-01-31 15:31:41,884 - DEBUG - on stmt: $8compare_op.3 = $4load_attr.1 == $const6.2
2025-01-31 15:31:41,884 - DEBUG - on stmt: bool10 = global(bool: <class 'bool'>)
2025-01-31 15:31:41,884 - DEBUG - on stmt: $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:571),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,884 - DEBUG - on stmt: branch $10pred, 12, 20
2025-01-31 15:31:41,884 - DEBUG - ==== SSA block rewrite pass on 12
2025-01-31 15:31:41,884 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89eb99cf10>
2025-01-31 15:31:41,884 - DEBUG - on stmt: $12load_global.0 = global(ValueError: <class 'ValueError'>)
2025-01-31 15:31:41,884 - DEBUG - on stmt: $const14.1 = const(str, zero-size array to reduction operation maximum which has no identity)
2025-01-31 15:31:41,884 - DEBUG - on stmt: $16call_function.2 = call $12load_global.0($const14.1, func=$12load_global.0, args=[Var($const14.1, arraymath.py:572)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,884 - DEBUG - on stmt: <static> raise <class 'ValueError'>('zero-size array to reduction operation maximum which has no identity')
2025-01-31 15:31:41,884 - DEBUG - ==== SSA block rewrite pass on 20
2025-01-31 15:31:41,884 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89eb99cf10>
2025-01-31 15:31:41,884 - DEBUG - on stmt: $20load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:41,884 - DEBUG - on stmt: $22load_method.1 = getattr(value=$20load_global.0, attr=nditer)
2025-01-31 15:31:41,884 - DEBUG - on stmt: it = call $22load_method.1(a, func=$22load_method.1, args=[Var(a, arraymath.py:570)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,884 - DEBUG - on stmt: $30load_global.4 = global(next: <built-in function next>)
2025-01-31 15:31:41,884 - DEBUG - on stmt: $34call_function.6 = call $30load_global.4(it, func=$30load_global.4, args=[Var(it, arraymath.py:575)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,884 - DEBUG - on stmt: $36load_method.7 = getattr(value=$34call_function.6, attr=take)
2025-01-31 15:31:41,884 - DEBUG - on stmt: $const38.8 = const(int, 0)
2025-01-31 15:31:41,885 - DEBUG - on stmt: max_value = call $36load_method.7($const38.8, func=$36load_method.7, args=[Var($const38.8, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,885 - DEBUG - first assign: max_value
2025-01-31 15:31:41,885 - DEBUG - replaced with: max_value = call $36load_method.7($const38.8, func=$36load_method.7, args=[Var($const38.8, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,885 - DEBUG - on stmt: $44load_deref.10 = freevar(pre_return_func: <function return_false at 0x7c89f0822950>)
2025-01-31 15:31:41,885 - DEBUG - on stmt: $48call_function.12 = call $44load_deref.10(max_value, func=$44load_deref.10, args=[Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,885 - DEBUG - on stmt: bool50 = global(bool: <class 'bool'>)
2025-01-31 15:31:41,885 - DEBUG - on stmt: $50pred = call bool50($48call_function.12, func=bool50, args=(Var($48call_function.12, arraymath.py:577),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,885 - DEBUG - on stmt: branch $50pred, 52, 56
2025-01-31 15:31:41,885 - DEBUG - ==== SSA block rewrite pass on 52
2025-01-31 15:31:41,885 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89eb99cf10>
2025-01-31 15:31:41,885 - DEBUG - on stmt: $54return_value.1 = cast(value=max_value)
2025-01-31 15:31:41,885 - DEBUG - on stmt: return $54return_value.1
2025-01-31 15:31:41,885 - DEBUG - ==== SSA block rewrite pass on 56
2025-01-31 15:31:41,885 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89eb99cf10>
2025-01-31 15:31:41,885 - DEBUG - on stmt: $58get_iter.1 = getiter(value=it)
2025-01-31 15:31:41,885 - DEBUG - on stmt: $phi60.0 = $58get_iter.1
2025-01-31 15:31:41,885 - DEBUG - on stmt: jump 60
2025-01-31 15:31:41,885 - DEBUG - ==== SSA block rewrite pass on 60
2025-01-31 15:31:41,885 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89eb99cf10>
2025-01-31 15:31:41,885 - DEBUG - on stmt: $60for_iter.1 = iternext(value=$phi60.0)
2025-01-31 15:31:41,885 - DEBUG - on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
2025-01-31 15:31:41,885 - DEBUG - on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
2025-01-31 15:31:41,885 - DEBUG - on stmt: $phi62.1 = $60for_iter.2
2025-01-31 15:31:41,885 - DEBUG - on stmt: branch $60for_iter.3, 62, 104
2025-01-31 15:31:41,885 - DEBUG - ==== SSA block rewrite pass on 62
2025-01-31 15:31:41,885 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89eb99cf10>
2025-01-31 15:31:41,885 - DEBUG - on stmt: view = $phi62.1
2025-01-31 15:31:41,885 - DEBUG - on stmt: $66load_method.3 = getattr(value=view, attr=item)
2025-01-31 15:31:41,885 - DEBUG - on stmt: v = call $66load_method.3(func=$66load_method.3, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,886 - DEBUG - on stmt: $72load_deref.5 = freevar(pre_return_func: <function return_false at 0x7c89f0822950>)
2025-01-31 15:31:41,886 - DEBUG - on stmt: $76call_function.7 = call $72load_deref.5(v, func=$72load_deref.5, args=[Var(v, arraymath.py:581)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,886 - DEBUG - on stmt: bool78 = global(bool: <class 'bool'>)
2025-01-31 15:31:41,886 - DEBUG - on stmt: $78pred = call bool78($76call_function.7, func=bool78, args=(Var($76call_function.7, arraymath.py:582),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,886 - DEBUG - on stmt: branch $78pred, 80, 88
2025-01-31 15:31:41,886 - DEBUG - ==== SSA block rewrite pass on 80
2025-01-31 15:31:41,886 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89eb99cf10>
2025-01-31 15:31:41,886 - DEBUG - on stmt: $86return_value.2 = cast(value=v)
2025-01-31 15:31:41,886 - DEBUG - on stmt: return $86return_value.2
2025-01-31 15:31:41,886 - DEBUG - ==== SSA block rewrite pass on 88
2025-01-31 15:31:41,886 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89eb99cf10>
2025-01-31 15:31:41,886 - DEBUG - on stmt: $88load_deref.1 = freevar(comparator: <function max_comparator at 0x7c89f0822440>)
2025-01-31 15:31:41,886 - DEBUG - on stmt: $94call_function.4 = call $88load_deref.1(v, max_value, func=$88load_deref.1, args=[Var(v, arraymath.py:581), Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,886 - DEBUG - on stmt: bool96 = global(bool: <class 'bool'>)
2025-01-31 15:31:41,886 - DEBUG - on stmt: $96pred = call bool96($94call_function.4, func=bool96, args=(Var($94call_function.4, arraymath.py:584),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,886 - DEBUG - on stmt: branch $96pred, 98, 102
2025-01-31 15:31:41,886 - DEBUG - ==== SSA block rewrite pass on 98
2025-01-31 15:31:41,886 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89eb99cf10>
2025-01-31 15:31:41,886 - DEBUG - on stmt: max_value = v
2025-01-31 15:31:41,886 - DEBUG - replaced with: max_value.1 = v
2025-01-31 15:31:41,886 - DEBUG - on stmt: jump 102
2025-01-31 15:31:41,886 - DEBUG - ==== SSA block rewrite pass on 102
2025-01-31 15:31:41,886 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89eb99cf10>
2025-01-31 15:31:41,886 - DEBUG - on stmt: jump 60
2025-01-31 15:31:41,886 - DEBUG - ==== SSA block rewrite pass on 104
2025-01-31 15:31:41,886 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89eb99cf10>
2025-01-31 15:31:41,886 - DEBUG - on stmt: $106return_value.1 = cast(value=max_value)
2025-01-31 15:31:41,886 - DEBUG - on stmt: return $106return_value.1
2025-01-31 15:31:41,887 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {20: [<numba.core.ir.Assign object at 0x7c89eb99cf40>],
             98: [<numba.core.ir.Assign object at 0x7c89e83f32e0>]})
2025-01-31 15:31:41,887 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-31 15:31:41,887 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89eb99cf10>
2025-01-31 15:31:41,887 - DEBUG - on stmt: a = arg(0, name=a)
2025-01-31 15:31:41,887 - DEBUG - on stmt: $4load_attr.1 = getattr(value=a, attr=size)
2025-01-31 15:31:41,887 - DEBUG - on stmt: $const6.2 = const(int, 0)
2025-01-31 15:31:41,887 - DEBUG - on stmt: $8compare_op.3 = $4load_attr.1 == $const6.2
2025-01-31 15:31:41,887 - DEBUG - on stmt: bool10 = global(bool: <class 'bool'>)
2025-01-31 15:31:41,887 - DEBUG - on stmt: $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:571),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,887 - DEBUG - on stmt: branch $10pred, 12, 20
2025-01-31 15:31:41,887 - DEBUG - ==== SSA block rewrite pass on 12
2025-01-31 15:31:41,887 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89eb99cf10>
2025-01-31 15:31:41,887 - DEBUG - on stmt: $12load_global.0 = global(ValueError: <class 'ValueError'>)
2025-01-31 15:31:41,887 - DEBUG - on stmt: $const14.1 = const(str, zero-size array to reduction operation maximum which has no identity)
2025-01-31 15:31:41,887 - DEBUG - on stmt: $16call_function.2 = call $12load_global.0($const14.1, func=$12load_global.0, args=[Var($const14.1, arraymath.py:572)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,887 - DEBUG - on stmt: <static> raise <class 'ValueError'>('zero-size array to reduction operation maximum which has no identity')
2025-01-31 15:31:41,887 - DEBUG - ==== SSA block rewrite pass on 20
2025-01-31 15:31:41,887 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89eb99cf10>
2025-01-31 15:31:41,887 - DEBUG - on stmt: $20load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:41,887 - DEBUG - on stmt: $22load_method.1 = getattr(value=$20load_global.0, attr=nditer)
2025-01-31 15:31:41,887 - DEBUG - on stmt: it = call $22load_method.1(a, func=$22load_method.1, args=[Var(a, arraymath.py:570)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,887 - DEBUG - on stmt: $30load_global.4 = global(next: <built-in function next>)
2025-01-31 15:31:41,887 - DEBUG - on stmt: $34call_function.6 = call $30load_global.4(it, func=$30load_global.4, args=[Var(it, arraymath.py:575)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,887 - DEBUG - on stmt: $36load_method.7 = getattr(value=$34call_function.6, attr=take)
2025-01-31 15:31:41,888 - DEBUG - on stmt: $const38.8 = const(int, 0)
2025-01-31 15:31:41,888 - DEBUG - on stmt: max_value = call $36load_method.7($const38.8, func=$36load_method.7, args=[Var($const38.8, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,888 - DEBUG - on stmt: $44load_deref.10 = freevar(pre_return_func: <function return_false at 0x7c89f0822950>)
2025-01-31 15:31:41,888 - DEBUG - on stmt: $48call_function.12 = call $44load_deref.10(max_value, func=$44load_deref.10, args=[Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,888 - DEBUG - find_def var='max_value' stmt=$48call_function.12 = call $44load_deref.10(max_value, func=$44load_deref.10, args=[Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,888 - DEBUG - on stmt: bool50 = global(bool: <class 'bool'>)
2025-01-31 15:31:41,888 - DEBUG - on stmt: $50pred = call bool50($48call_function.12, func=bool50, args=(Var($48call_function.12, arraymath.py:577),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,888 - DEBUG - on stmt: branch $50pred, 52, 56
2025-01-31 15:31:41,888 - DEBUG - ==== SSA block rewrite pass on 52
2025-01-31 15:31:41,888 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89eb99cf10>
2025-01-31 15:31:41,888 - DEBUG - on stmt: $54return_value.1 = cast(value=max_value)
2025-01-31 15:31:41,888 - DEBUG - find_def var='max_value' stmt=$54return_value.1 = cast(value=max_value)
2025-01-31 15:31:41,888 - DEBUG - find_def_from_top label 52
2025-01-31 15:31:41,888 - DEBUG - idom 20 from label 52
2025-01-31 15:31:41,888 - DEBUG - find_def_from_bottom label 20
2025-01-31 15:31:41,888 - DEBUG - on stmt: return $54return_value.1
2025-01-31 15:31:41,888 - DEBUG - ==== SSA block rewrite pass on 56
2025-01-31 15:31:41,888 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89eb99cf10>
2025-01-31 15:31:41,888 - DEBUG - on stmt: $58get_iter.1 = getiter(value=it)
2025-01-31 15:31:41,888 - DEBUG - on stmt: $phi60.0 = $58get_iter.1
2025-01-31 15:31:41,888 - DEBUG - on stmt: jump 60
2025-01-31 15:31:41,888 - DEBUG - ==== SSA block rewrite pass on 60
2025-01-31 15:31:41,888 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89eb99cf10>
2025-01-31 15:31:41,888 - DEBUG - on stmt: $60for_iter.1 = iternext(value=$phi60.0)
2025-01-31 15:31:41,888 - DEBUG - on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
2025-01-31 15:31:41,888 - DEBUG - on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
2025-01-31 15:31:41,888 - DEBUG - on stmt: $phi62.1 = $60for_iter.2
2025-01-31 15:31:41,889 - DEBUG - on stmt: branch $60for_iter.3, 62, 104
2025-01-31 15:31:41,889 - DEBUG - ==== SSA block rewrite pass on 62
2025-01-31 15:31:41,889 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89eb99cf10>
2025-01-31 15:31:41,889 - DEBUG - on stmt: view = $phi62.1
2025-01-31 15:31:41,889 - DEBUG - on stmt: $66load_method.3 = getattr(value=view, attr=item)
2025-01-31 15:31:41,889 - DEBUG - on stmt: v = call $66load_method.3(func=$66load_method.3, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,889 - DEBUG - on stmt: $72load_deref.5 = freevar(pre_return_func: <function return_false at 0x7c89f0822950>)
2025-01-31 15:31:41,889 - DEBUG - on stmt: $76call_function.7 = call $72load_deref.5(v, func=$72load_deref.5, args=[Var(v, arraymath.py:581)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,889 - DEBUG - on stmt: bool78 = global(bool: <class 'bool'>)
2025-01-31 15:31:41,889 - DEBUG - on stmt: $78pred = call bool78($76call_function.7, func=bool78, args=(Var($76call_function.7, arraymath.py:582),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,889 - DEBUG - on stmt: branch $78pred, 80, 88
2025-01-31 15:31:41,889 - DEBUG - ==== SSA block rewrite pass on 80
2025-01-31 15:31:41,889 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89eb99cf10>
2025-01-31 15:31:41,889 - DEBUG - on stmt: $86return_value.2 = cast(value=v)
2025-01-31 15:31:41,889 - DEBUG - on stmt: return $86return_value.2
2025-01-31 15:31:41,889 - DEBUG - ==== SSA block rewrite pass on 88
2025-01-31 15:31:41,889 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89eb99cf10>
2025-01-31 15:31:41,889 - DEBUG - on stmt: $88load_deref.1 = freevar(comparator: <function max_comparator at 0x7c89f0822440>)
2025-01-31 15:31:41,889 - DEBUG - on stmt: $94call_function.4 = call $88load_deref.1(v, max_value, func=$88load_deref.1, args=[Var(v, arraymath.py:581), Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,889 - DEBUG - find_def var='max_value' stmt=$94call_function.4 = call $88load_deref.1(v, max_value, func=$88load_deref.1, args=[Var(v, arraymath.py:581), Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,889 - DEBUG - find_def_from_top label 88
2025-01-31 15:31:41,889 - DEBUG - idom 62 from label 88
2025-01-31 15:31:41,889 - DEBUG - find_def_from_bottom label 62
2025-01-31 15:31:41,889 - DEBUG - find_def_from_top label 62
2025-01-31 15:31:41,889 - DEBUG - idom 60 from label 62
2025-01-31 15:31:41,889 - DEBUG - find_def_from_bottom label 60
2025-01-31 15:31:41,889 - DEBUG - find_def_from_top label 60
2025-01-31 15:31:41,890 - DEBUG - insert phi node max_value.2 = phi(incoming_values=[], incoming_blocks=[]) at 60
2025-01-31 15:31:41,890 - DEBUG - find_def_from_bottom label 56
2025-01-31 15:31:41,890 - DEBUG - find_def_from_top label 56
2025-01-31 15:31:41,890 - DEBUG - idom 20 from label 56
2025-01-31 15:31:41,890 - DEBUG - find_def_from_bottom label 20
2025-01-31 15:31:41,890 - DEBUG - incoming_def max_value = call $36load_method.7($const38.8, func=$36load_method.7, args=[Var($const38.8, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,890 - DEBUG - find_def_from_bottom label 102
2025-01-31 15:31:41,890 - DEBUG - find_def_from_top label 102
2025-01-31 15:31:41,890 - DEBUG - insert phi node max_value.3 = phi(incoming_values=[], incoming_blocks=[]) at 102
2025-01-31 15:31:41,890 - DEBUG - find_def_from_bottom label 88
2025-01-31 15:31:41,890 - DEBUG - find_def_from_top label 88
2025-01-31 15:31:41,890 - DEBUG - idom 62 from label 88
2025-01-31 15:31:41,890 - DEBUG - find_def_from_bottom label 62
2025-01-31 15:31:41,890 - DEBUG - find_def_from_top label 62
2025-01-31 15:31:41,890 - DEBUG - idom 60 from label 62
2025-01-31 15:31:41,890 - DEBUG - find_def_from_bottom label 60
2025-01-31 15:31:41,890 - DEBUG - incoming_def max_value.2 = phi(incoming_values=[Var(max_value, arraymath.py:576)], incoming_blocks=[56])
2025-01-31 15:31:41,890 - DEBUG - find_def_from_bottom label 98
2025-01-31 15:31:41,890 - DEBUG - incoming_def max_value.1 = v
2025-01-31 15:31:41,890 - DEBUG - incoming_def max_value.3 = phi(incoming_values=[Var(max_value.2, arraymath.py:584), Var(max_value.1, arraymath.py:585)], incoming_blocks=[88, 98])
2025-01-31 15:31:41,890 - DEBUG - replaced with: $94call_function.4 = call $88load_deref.1(v, max_value.2, func=$88load_deref.1, args=[Var(v, arraymath.py:581), Var(max_value.2, arraymath.py:584)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,890 - DEBUG - on stmt: bool96 = global(bool: <class 'bool'>)
2025-01-31 15:31:41,890 - DEBUG - on stmt: $96pred = call bool96($94call_function.4, func=bool96, args=(Var($94call_function.4, arraymath.py:584),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,890 - DEBUG - on stmt: branch $96pred, 98, 102
2025-01-31 15:31:41,890 - DEBUG - ==== SSA block rewrite pass on 98
2025-01-31 15:31:41,890 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89eb99cf10>
2025-01-31 15:31:41,890 - DEBUG - on stmt: max_value.1 = v
2025-01-31 15:31:41,891 - DEBUG - on stmt: jump 102
2025-01-31 15:31:41,891 - DEBUG - ==== SSA block rewrite pass on 102
2025-01-31 15:31:41,891 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89eb99cf10>
2025-01-31 15:31:41,891 - DEBUG - on stmt: jump 60
2025-01-31 15:31:41,891 - DEBUG - ==== SSA block rewrite pass on 104
2025-01-31 15:31:41,891 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89eb99cf10>
2025-01-31 15:31:41,891 - DEBUG - on stmt: $106return_value.1 = cast(value=max_value)
2025-01-31 15:31:41,891 - DEBUG - find_def var='max_value' stmt=$106return_value.1 = cast(value=max_value)
2025-01-31 15:31:41,891 - DEBUG - find_def_from_top label 104
2025-01-31 15:31:41,891 - DEBUG - idom 60 from label 104
2025-01-31 15:31:41,891 - DEBUG - find_def_from_bottom label 60
2025-01-31 15:31:41,891 - DEBUG - replaced with: $106return_value.1 = cast(value=max_value.2)
2025-01-31 15:31:41,891 - DEBUG - on stmt: return $106return_value.1
2025-01-31 15:31:41,895 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=4691)
           2	LOAD_FAST(arg=1, lineno=4692)
           4	LOAD_FAST(arg=0, lineno=4692)
           6	LOAD_ATTR(arg=0, lineno=4692)
           8	LOAD_CONST(arg=1, lineno=4692)
          10	BINARY_SUBTRACT(arg=None, lineno=4692)
          12	COMPARE_OP(arg=4, lineno=4692)
          14	POP_JUMP_IF_TRUE(arg=15, lineno=4692)
          16	LOAD_FAST(arg=1, lineno=4692)
          18	LOAD_FAST(arg=0, lineno=4692)
          20	LOAD_ATTR(arg=0, lineno=4692)
          22	UNARY_NEGATIVE(arg=None, lineno=4692)
          24	COMPARE_OP(arg=0, lineno=4692)
          26	POP_JUMP_IF_FALSE(arg=19, lineno=4692)
>         28	LOAD_GLOBAL(arg=1, lineno=4693)
          30	LOAD_CONST(arg=2, lineno=4693)
          32	CALL_FUNCTION(arg=1, lineno=4693)
          34	RAISE_VARARGS(arg=1, lineno=4693)
>         36	LOAD_FAST(arg=0, lineno=4694)
          38	LOAD_METHOD(arg=2, lineno=4694)
          40	CALL_METHOD(arg=0, lineno=4694)
          42	LOAD_FAST(arg=1, lineno=4694)
          44	BINARY_SUBSCR(arg=None, lineno=4694)
          46	RETURN_VALUE(arg=None, lineno=4694)
2025-01-31 15:31:41,895 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:31:41,895 - DEBUG - stack: []
2025-01-31 15:31:41,895 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:31:41,895 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=4691)
2025-01-31 15:31:41,895 - DEBUG - stack []
2025-01-31 15:31:41,896 - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=4692)
2025-01-31 15:31:41,896 - DEBUG - stack []
2025-01-31 15:31:41,896 - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=4692)
2025-01-31 15:31:41,896 - DEBUG - stack ['$indices2.0']
2025-01-31 15:31:41,896 - DEBUG - dispatch pc=6, inst=LOAD_ATTR(arg=0, lineno=4692)
2025-01-31 15:31:41,896 - DEBUG - stack ['$indices2.0', '$a4.1']
2025-01-31 15:31:41,896 - DEBUG - dispatch pc=8, inst=LOAD_CONST(arg=1, lineno=4692)
2025-01-31 15:31:41,896 - DEBUG - stack ['$indices2.0', '$6load_attr.2']
2025-01-31 15:31:41,896 - DEBUG - dispatch pc=10, inst=BINARY_SUBTRACT(arg=None, lineno=4692)
2025-01-31 15:31:41,896 - DEBUG - stack ['$indices2.0', '$6load_attr.2', '$const8.3']
2025-01-31 15:31:41,896 - DEBUG - dispatch pc=12, inst=COMPARE_OP(arg=4, lineno=4692)
2025-01-31 15:31:41,896 - DEBUG - stack ['$indices2.0', '$10binary_subtract.4']
2025-01-31 15:31:41,896 - DEBUG - dispatch pc=14, inst=POP_JUMP_IF_TRUE(arg=15, lineno=4692)
2025-01-31 15:31:41,896 - DEBUG - stack ['$12compare_op.5']
2025-01-31 15:31:41,896 - DEBUG - end state. edges=[Edge(pc=16, stack=(), blockstack=(), npush=0), Edge(pc=28, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:41,896 - DEBUG - pending: deque([State(pc_initial=16 nstack_initial=0), State(pc_initial=28 nstack_initial=0)])
2025-01-31 15:31:41,896 - DEBUG - stack: []
2025-01-31 15:31:41,896 - DEBUG - state.pc_initial: State(pc_initial=16 nstack_initial=0)
2025-01-31 15:31:41,896 - DEBUG - dispatch pc=16, inst=LOAD_FAST(arg=1, lineno=4692)
2025-01-31 15:31:41,896 - DEBUG - stack []
2025-01-31 15:31:41,896 - DEBUG - dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=4692)
2025-01-31 15:31:41,896 - DEBUG - stack ['$indices16.0']
2025-01-31 15:31:41,896 - DEBUG - dispatch pc=20, inst=LOAD_ATTR(arg=0, lineno=4692)
2025-01-31 15:31:41,896 - DEBUG - stack ['$indices16.0', '$a18.1']
2025-01-31 15:31:41,896 - DEBUG - dispatch pc=22, inst=UNARY_NEGATIVE(arg=None, lineno=4692)
2025-01-31 15:31:41,896 - DEBUG - stack ['$indices16.0', '$20load_attr.2']
2025-01-31 15:31:41,896 - DEBUG - dispatch pc=24, inst=COMPARE_OP(arg=0, lineno=4692)
2025-01-31 15:31:41,896 - DEBUG - stack ['$indices16.0', '$22unary_negative.3']
2025-01-31 15:31:41,897 - DEBUG - dispatch pc=26, inst=POP_JUMP_IF_FALSE(arg=19, lineno=4692)
2025-01-31 15:31:41,897 - DEBUG - stack ['$24compare_op.4']
2025-01-31 15:31:41,897 - DEBUG - end state. edges=[Edge(pc=28, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:41,897 - DEBUG - pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2025-01-31 15:31:41,897 - DEBUG - stack: []
2025-01-31 15:31:41,897 - DEBUG - state.pc_initial: State(pc_initial=28 nstack_initial=0)
2025-01-31 15:31:41,897 - DEBUG - dispatch pc=28, inst=LOAD_GLOBAL(arg=1, lineno=4693)
2025-01-31 15:31:41,897 - DEBUG - stack []
2025-01-31 15:31:41,897 - DEBUG - dispatch pc=30, inst=LOAD_CONST(arg=2, lineno=4693)
2025-01-31 15:31:41,897 - DEBUG - stack ['$28load_global.0']
2025-01-31 15:31:41,897 - DEBUG - dispatch pc=32, inst=CALL_FUNCTION(arg=1, lineno=4693)
2025-01-31 15:31:41,897 - DEBUG - stack ['$28load_global.0', '$const30.1']
2025-01-31 15:31:41,897 - DEBUG - dispatch pc=34, inst=RAISE_VARARGS(arg=1, lineno=4693)
2025-01-31 15:31:41,897 - DEBUG - stack ['$32call_function.2']
2025-01-31 15:31:41,897 - DEBUG - end state. edges=[]
2025-01-31 15:31:41,897 - DEBUG - pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2025-01-31 15:31:41,897 - DEBUG - pending: deque([State(pc_initial=36 nstack_initial=0)])
2025-01-31 15:31:41,897 - DEBUG - stack: []
2025-01-31 15:31:41,897 - DEBUG - state.pc_initial: State(pc_initial=36 nstack_initial=0)
2025-01-31 15:31:41,897 - DEBUG - dispatch pc=36, inst=LOAD_FAST(arg=0, lineno=4694)
2025-01-31 15:31:41,897 - DEBUG - stack []
2025-01-31 15:31:41,897 - DEBUG - dispatch pc=38, inst=LOAD_METHOD(arg=2, lineno=4694)
2025-01-31 15:31:41,897 - DEBUG - stack ['$a36.0']
2025-01-31 15:31:41,897 - DEBUG - dispatch pc=40, inst=CALL_METHOD(arg=0, lineno=4694)
2025-01-31 15:31:41,897 - DEBUG - stack ['$38load_method.1']
2025-01-31 15:31:41,897 - DEBUG - dispatch pc=42, inst=LOAD_FAST(arg=1, lineno=4694)
2025-01-31 15:31:41,897 - DEBUG - stack ['$40call_method.2']
2025-01-31 15:31:41,897 - DEBUG - dispatch pc=44, inst=BINARY_SUBSCR(arg=None, lineno=4694)
2025-01-31 15:31:41,897 - DEBUG - stack ['$40call_method.2', '$indices42.3']
2025-01-31 15:31:41,897 - DEBUG - dispatch pc=46, inst=RETURN_VALUE(arg=None, lineno=4694)
2025-01-31 15:31:41,898 - DEBUG - stack ['$44binary_subscr.4']
2025-01-31 15:31:41,898 - DEBUG - end state. edges=[]
2025-01-31 15:31:41,898 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:31:41,898 - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=16 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set()})
2025-01-31 15:31:41,898 - DEBUG - defmap: {}
2025-01-31 15:31:41,898 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:41,898 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:41,898 - DEBUG - keep phismap: {}
2025-01-31 15:31:41,898 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-01-31 15:31:41,898 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:31:41,898 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$indices2.0'}), (4, {'res': '$a4.1'}), (6, {'item': '$a4.1', 'res': '$6load_attr.2'}), (8, {'res': '$const8.3'}), (10, {'lhs': '$6load_attr.2', 'rhs': '$const8.3', 'res': '$10binary_subtract.4'}), (12, {'lhs': '$indices2.0', 'rhs': '$10binary_subtract.4', 'res': '$12compare_op.5'}), (14, {'pred': '$12compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={16: (), 28: ()})
2025-01-31 15:31:41,898 - DEBUG - block_infos State(pc_initial=16 nstack_initial=0):
AdaptBlockInfo(insts=((16, {'res': '$indices16.0'}), (18, {'res': '$a18.1'}), (20, {'item': '$a18.1', 'res': '$20load_attr.2'}), (22, {'value': '$20load_attr.2', 'res': '$22unary_negative.3'}), (24, {'lhs': '$indices16.0', 'rhs': '$22unary_negative.3', 'res': '$24compare_op.4'}), (26, {'pred': '$24compare_op.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: (), 36: ()})
2025-01-31 15:31:41,898 - DEBUG - block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$28load_global.0'}), (30, {'res': '$const30.1'}), (32, {'func': '$28load_global.0', 'args': ['$const30.1'], 'res': '$32call_function.2'}), (34, {'exc': '$32call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:41,898 - DEBUG - block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$a36.0'}), (38, {'item': '$a36.0', 'res': '$38load_method.1'}), (40, {'func': '$38load_method.1', 'args': [], 'res': '$40call_method.2'}), (42, {'res': '$indices42.3'}), (44, {'index': '$indices42.3', 'target': '$40call_method.2', 'res': '$44binary_subscr.4'}), (46, {'retval': '$44binary_subscr.4', 'castval': '$46return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:41,899 - DEBUG - label 0:
    a = arg(0, name=a)                       ['a']
    indices = arg(1, name=indices)           ['indices']
    $6load_attr.2 = getattr(value=a, attr=size) ['$6load_attr.2', 'a']
    $const8.3 = const(int, 1)                ['$const8.3']
    $10binary_subtract.4 = $6load_attr.2 - $const8.3 ['$10binary_subtract.4', '$6load_attr.2', '$const8.3']
    $12compare_op.5 = indices > $10binary_subtract.4 ['$10binary_subtract.4', '$12compare_op.5', 'indices']
    bool14 = global(bool: <class 'bool'>)    ['bool14']
    $14pred = call bool14($12compare_op.5, func=bool14, args=(Var($12compare_op.5, arrayobj.py:4692),), kws=(), vararg=None, varkwarg=None, target=None) ['$12compare_op.5', '$14pred', 'bool14']
    branch $14pred, 28, 16                   ['$14pred']
label 16:
    $20load_attr.2 = getattr(value=a, attr=size) ['$20load_attr.2', 'a']
    $22unary_negative.3 = unary(fn=<built-in function neg>, value=$20load_attr.2) ['$20load_attr.2', '$22unary_negative.3']
    $24compare_op.4 = indices < $22unary_negative.3 ['$22unary_negative.3', '$24compare_op.4', 'indices']
    bool26 = global(bool: <class 'bool'>)    ['bool26']
    $26pred = call bool26($24compare_op.4, func=bool26, args=(Var($24compare_op.4, arrayobj.py:4692),), kws=(), vararg=None, varkwarg=None, target=None) ['$24compare_op.4', '$26pred', 'bool26']
    branch $26pred, 28, 36                   ['$26pred']
label 28:
    $28load_global.0 = global(IndexError: <class 'IndexError'>) ['$28load_global.0']
    $const30.1 = const(str, Index out of bounds) ['$const30.1']
    $32call_function.2 = call $28load_global.0($const30.1, func=$28load_global.0, args=[Var($const30.1, arrayobj.py:4693)], kws=(), vararg=None, varkwarg=None, target=None) ['$28load_global.0', '$32call_function.2', '$const30.1']
    raise $32call_function.2                 ['$32call_function.2']
label 36:
    $38load_method.1 = getattr(value=a, attr=ravel) ['$38load_method.1', 'a']
    $40call_method.2 = call $38load_method.1(func=$38load_method.1, args=[], kws=(), vararg=None, varkwarg=None, target=None) ['$38load_method.1', '$40call_method.2']
    $44binary_subscr.4 = getitem(value=$40call_method.2, index=indices, fn=<built-in function getitem>) ['$40call_method.2', '$44binary_subscr.4', 'indices']
    $46return_value.5 = cast(value=$44binary_subscr.4) ['$44binary_subscr.4', '$46return_value.5']
    return $46return_value.5                 ['$46return_value.5']

2025-01-31 15:31:41,904 - DEBUG - ==== SSA block analysis pass on 0
2025-01-31 15:31:41,904 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e882b0d0>
2025-01-31 15:31:41,904 - DEBUG - on stmt: a = arg(0, name=a)
2025-01-31 15:31:41,904 - DEBUG - on stmt: indices = arg(1, name=indices)
2025-01-31 15:31:41,904 - DEBUG - on stmt: $6load_attr.2 = getattr(value=a, attr=size)
2025-01-31 15:31:41,904 - DEBUG - on stmt: $const8.3 = const(int, 1)
2025-01-31 15:31:41,904 - DEBUG - on stmt: $10binary_subtract.4 = $6load_attr.2 - $const8.3
2025-01-31 15:31:41,904 - DEBUG - on stmt: $12compare_op.5 = indices > $10binary_subtract.4
2025-01-31 15:31:41,904 - DEBUG - on stmt: bool14 = global(bool: <class 'bool'>)
2025-01-31 15:31:41,904 - DEBUG - on stmt: $14pred = call bool14($12compare_op.5, func=bool14, args=(Var($12compare_op.5, arrayobj.py:4692),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,904 - DEBUG - on stmt: branch $14pred, 28, 16
2025-01-31 15:31:41,904 - DEBUG - ==== SSA block analysis pass on 16
2025-01-31 15:31:41,904 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e882b0d0>
2025-01-31 15:31:41,904 - DEBUG - on stmt: $20load_attr.2 = getattr(value=a, attr=size)
2025-01-31 15:31:41,904 - DEBUG - on stmt: $22unary_negative.3 = unary(fn=<built-in function neg>, value=$20load_attr.2)
2025-01-31 15:31:41,904 - DEBUG - on stmt: $24compare_op.4 = indices < $22unary_negative.3
2025-01-31 15:31:41,904 - DEBUG - on stmt: bool26 = global(bool: <class 'bool'>)
2025-01-31 15:31:41,904 - DEBUG - on stmt: $26pred = call bool26($24compare_op.4, func=bool26, args=(Var($24compare_op.4, arrayobj.py:4692),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,904 - DEBUG - on stmt: branch $26pred, 28, 36
2025-01-31 15:31:41,904 - DEBUG - ==== SSA block analysis pass on 28
2025-01-31 15:31:41,905 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e882b0d0>
2025-01-31 15:31:41,905 - DEBUG - on stmt: $28load_global.0 = global(IndexError: <class 'IndexError'>)
2025-01-31 15:31:41,905 - DEBUG - on stmt: $const30.1 = const(str, Index out of bounds)
2025-01-31 15:31:41,905 - DEBUG - on stmt: $32call_function.2 = call $28load_global.0($const30.1, func=$28load_global.0, args=[Var($const30.1, arrayobj.py:4693)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,905 - DEBUG - on stmt: <static> raise <class 'IndexError'>('Index out of bounds')
2025-01-31 15:31:41,905 - DEBUG - ==== SSA block analysis pass on 36
2025-01-31 15:31:41,905 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e882b0d0>
2025-01-31 15:31:41,905 - DEBUG - on stmt: $38load_method.1 = getattr(value=a, attr=ravel)
2025-01-31 15:31:41,905 - DEBUG - on stmt: $40call_method.2 = call $38load_method.1(func=$38load_method.1, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,905 - DEBUG - on stmt: $44binary_subscr.4 = getitem(value=$40call_method.2, index=indices, fn=<built-in function getitem>)
2025-01-31 15:31:41,905 - DEBUG - on stmt: $46return_value.5 = cast(value=$44binary_subscr.4)
2025-01-31 15:31:41,905 - DEBUG - on stmt: return $46return_value.5
2025-01-31 15:31:41,905 - DEBUG - defs defaultdict(<class 'list'>,
            {'$10binary_subtract.4': [(<numba.core.ir.Assign object at 0x7c89e882beb0>,
                                       0)],
             '$12compare_op.5': [(<numba.core.ir.Assign object at 0x7c89e8830070>,
                                  0)],
             '$14pred': [(<numba.core.ir.Assign object at 0x7c89e88302e0>, 0)],
             '$20load_attr.2': [(<numba.core.ir.Assign object at 0x7c89e8830700>,
                                 16)],
             '$22unary_negative.3': [(<numba.core.ir.Assign object at 0x7c89e8830880>,
                                      16)],
             '$24compare_op.4': [(<numba.core.ir.Assign object at 0x7c89e8830a30>,
                                  16)],
             '$26pred': [(<numba.core.ir.Assign object at 0x7c89e8830ca0>, 16)],
             '$28load_global.0': [(<numba.core.ir.Assign object at 0x7c89e8830e80>,
                                   28)],
             '$32call_function.2': [(<numba.core.ir.Assign object at 0x7c89e88311e0>,
                                     28)],
             '$38load_method.1': [(<numba.core.ir.Assign object at 0x7c89e88315a0>,
                                   36)],
             '$40call_method.2': [(<numba.core.ir.Assign object at 0x7c89e88317b0>,
                                   36)],
             '$44binary_subscr.4': [(<numba.core.ir.Assign object at 0x7c89e88319f0>,
                                     36)],
             '$46return_value.5': [(<numba.core.ir.Assign object at 0x7c89e8831b40>,
                                    36)],
             '$6load_attr.2': [(<numba.core.ir.Assign object at 0x7c89e882bb80>,
                                0)],
             '$const30.1': [(<numba.core.ir.Assign object at 0x7c89e8831000>,
                             28)],
             '$const8.3': [(<numba.core.ir.Assign object at 0x7c89e882bd00>,
                            0)],
             'a': [(<numba.core.ir.Assign object at 0x7c89e882a8c0>, 0)],
             'bool14': [(<numba.core.ir.Assign object at 0x7c89e88301c0>, 0)],
             'bool26': [(<numba.core.ir.Assign object at 0x7c89e8830b80>, 16)],
             'indices': [(<numba.core.ir.Assign object at 0x7c89e882b7c0>, 0)]})
2025-01-31 15:31:41,905 - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x7c89e882b0d0>
2025-01-31 15:31:41,920 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=2230)
           2	LOAD_FAST(arg=0, lineno=2232)
           4	LOAD_METHOD(arg=0, lineno=2232)
           6	LOAD_FAST(arg=0, lineno=2232)
           8	LOAD_ATTR(arg=1, lineno=2232)
          10	CALL_METHOD(arg=1, lineno=2232)
          12	RETURN_VALUE(arg=None, lineno=2232)
2025-01-31 15:31:41,920 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:31:41,920 - DEBUG - stack: []
2025-01-31 15:31:41,920 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:31:41,929 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=2230)
2025-01-31 15:31:41,929 - DEBUG - stack []
2025-01-31 15:31:41,929 - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=2232)
2025-01-31 15:31:41,929 - DEBUG - stack []
2025-01-31 15:31:41,929 - DEBUG - dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=2232)
2025-01-31 15:31:41,929 - DEBUG - stack ['$ary2.0']
2025-01-31 15:31:41,929 - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=2232)
2025-01-31 15:31:41,929 - DEBUG - stack ['$4load_method.1']
2025-01-31 15:31:41,929 - DEBUG - dispatch pc=8, inst=LOAD_ATTR(arg=1, lineno=2232)
2025-01-31 15:31:41,929 - DEBUG - stack ['$4load_method.1', '$ary6.2']
2025-01-31 15:31:41,929 - DEBUG - dispatch pc=10, inst=CALL_METHOD(arg=1, lineno=2232)
2025-01-31 15:31:41,929 - DEBUG - stack ['$4load_method.1', '$8load_attr.3']
2025-01-31 15:31:41,929 - DEBUG - dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=2232)
2025-01-31 15:31:41,929 - DEBUG - stack ['$10call_method.4']
2025-01-31 15:31:41,929 - DEBUG - end state. edges=[]
2025-01-31 15:31:41,929 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:31:41,929 - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-01-31 15:31:41,929 - DEBUG - defmap: {}
2025-01-31 15:31:41,929 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:41,930 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:41,930 - DEBUG - keep phismap: {}
2025-01-31 15:31:41,930 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-01-31 15:31:41,930 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:31:41,930 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$ary2.0'}), (4, {'item': '$ary2.0', 'res': '$4load_method.1'}), (6, {'res': '$ary6.2'}), (8, {'item': '$ary6.2', 'res': '$8load_attr.3'}), (10, {'func': '$4load_method.1', 'args': ['$8load_attr.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:41,930 - DEBUG - label 0:
    ary = arg(0, name=ary)                   ['ary']
    $4load_method.1 = getattr(value=ary, attr=reshape) ['$4load_method.1', 'ary']
    $8load_attr.3 = getattr(value=ary, attr=size) ['$8load_attr.3', 'ary']
    $10call_method.4 = call $4load_method.1($8load_attr.3, func=$4load_method.1, args=[Var($8load_attr.3, arrayobj.py:2232)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_method.4', '$4load_method.1', '$8load_attr.3']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2025-01-31 15:31:41,933 - DEBUG - ==== SSA block analysis pass on 0
2025-01-31 15:31:41,934 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e886b760>
2025-01-31 15:31:41,934 - DEBUG - on stmt: ary = arg(0, name=ary)
2025-01-31 15:31:41,934 - DEBUG - on stmt: $4load_method.1 = getattr(value=ary, attr=reshape)
2025-01-31 15:31:41,934 - DEBUG - on stmt: $8load_attr.3 = getattr(value=ary, attr=size)
2025-01-31 15:31:41,934 - DEBUG - on stmt: $10call_method.4 = call $4load_method.1($8load_attr.3, func=$4load_method.1, args=[Var($8load_attr.3, arrayobj.py:2232)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:41,934 - DEBUG - on stmt: $12return_value.5 = cast(value=$10call_method.4)
2025-01-31 15:31:41,934 - DEBUG - on stmt: return $12return_value.5
2025-01-31 15:31:41,934 - DEBUG - defs defaultdict(<class 'list'>,
            {'$10call_method.4': [(<numba.core.ir.Assign object at 0x7c89e88322f0>,
                                   0)],
             '$12return_value.5': [(<numba.core.ir.Assign object at 0x7c89e8868ac0>,
                                    0)],
             '$4load_method.1': [(<numba.core.ir.Assign object at 0x7c89e8868580>,
                                  0)],
             '$8load_attr.3': [(<numba.core.ir.Assign object at 0x7c89e88693c0>,
                                0)],
             'ary': [(<numba.core.ir.Assign object at 0x7c89e886b850>, 0)]})
2025-01-31 15:31:41,934 - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x7c89e886b760>
2025-01-31 15:31:41,999 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=486)
           2	LOAD_CONST(arg=1, lineno=488)
           4	RETURN_VALUE(arg=None, lineno=488)
2025-01-31 15:31:41,999 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:31:41,999 - DEBUG - stack: []
2025-01-31 15:31:41,999 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:31:41,999 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=486)
2025-01-31 15:31:41,999 - DEBUG - stack []
2025-01-31 15:31:41,999 - DEBUG - dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=488)
2025-01-31 15:31:41,999 - DEBUG - stack []
2025-01-31 15:31:41,999 - DEBUG - dispatch pc=4, inst=RETURN_VALUE(arg=None, lineno=488)
2025-01-31 15:31:41,999 - DEBUG - stack ['$const2.0']
2025-01-31 15:31:41,999 - DEBUG - end state. edges=[]
2025-01-31 15:31:41,999 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:31:41,999 - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-01-31 15:31:41,999 - DEBUG - defmap: {}
2025-01-31 15:31:41,999 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:41,999 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:41,999 - DEBUG - keep phismap: {}
2025-01-31 15:31:42,000 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-01-31 15:31:42,000 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:31:42,000 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'retval': '$const2.0', 'castval': '$4return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:42,000 - DEBUG - label 0:
    a = arg(0, name=a)                       ['a']
    $const2.0 = const(bool, False)           ['$const2.0']
    $4return_value.1 = cast(value=$const2.0) ['$4return_value.1', '$const2.0']
    return $4return_value.1                  ['$4return_value.1']

2025-01-31 15:31:42,003 - DEBUG - ==== SSA block analysis pass on 0
2025-01-31 15:31:42,003 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8831300>
2025-01-31 15:31:42,003 - DEBUG - on stmt: a = arg(0, name=a)
2025-01-31 15:31:42,003 - DEBUG - on stmt: $const2.0 = const(bool, False)
2025-01-31 15:31:42,003 - DEBUG - on stmt: $4return_value.1 = cast(value=$const2.0)
2025-01-31 15:31:42,003 - DEBUG - on stmt: return $4return_value.1
2025-01-31 15:31:42,003 - DEBUG - defs defaultdict(<class 'list'>,
            {'$4return_value.1': [(<numba.core.ir.Assign object at 0x7c89e8a2e860>,
                                   0)],
             '$const2.0': [(<numba.core.ir.Assign object at 0x7c89e8a2e6e0>,
                            0)],
             'a': [(<numba.core.ir.Assign object at 0x7c89e8a2df90>, 0)]})
2025-01-31 15:31:42,003 - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x7c89e8831300>
2025-01-31 15:31:42,019 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=481)
           2	LOAD_FAST(arg=0, lineno=483)
           4	LOAD_FAST(arg=1, lineno=483)
           6	COMPARE_OP(arg=4, lineno=483)
           8	RETURN_VALUE(arg=None, lineno=483)
2025-01-31 15:31:42,019 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:31:42,019 - DEBUG - stack: []
2025-01-31 15:31:42,020 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:31:42,020 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=481)
2025-01-31 15:31:42,020 - DEBUG - stack []
2025-01-31 15:31:42,020 - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=483)
2025-01-31 15:31:42,020 - DEBUG - stack []
2025-01-31 15:31:42,020 - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=483)
2025-01-31 15:31:42,020 - DEBUG - stack ['$a2.0']
2025-01-31 15:31:42,020 - DEBUG - dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=483)
2025-01-31 15:31:42,020 - DEBUG - stack ['$a2.0', '$min_val4.1']
2025-01-31 15:31:42,020 - DEBUG - dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=483)
2025-01-31 15:31:42,020 - DEBUG - stack ['$6compare_op.2']
2025-01-31 15:31:42,020 - DEBUG - end state. edges=[]
2025-01-31 15:31:42,020 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:31:42,020 - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-01-31 15:31:42,020 - DEBUG - defmap: {}
2025-01-31 15:31:42,020 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:42,020 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:42,020 - DEBUG - keep phismap: {}
2025-01-31 15:31:42,020 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-01-31 15:31:42,020 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:31:42,020 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'res': '$min_val4.1'}), (6, {'lhs': '$a2.0', 'rhs': '$min_val4.1', 'res': '$6compare_op.2'}), (8, {'retval': '$6compare_op.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:42,021 - DEBUG - label 0:
    a = arg(0, name=a)                       ['a']
    min_val = arg(1, name=min_val)           ['min_val']
    $6compare_op.2 = a > min_val             ['$6compare_op.2', 'a', 'min_val']
    $8return_value.3 = cast(value=$6compare_op.2) ['$6compare_op.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2025-01-31 15:31:42,024 - DEBUG - ==== SSA block analysis pass on 0
2025-01-31 15:31:42,024 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8a71720>
2025-01-31 15:31:42,024 - DEBUG - on stmt: a = arg(0, name=a)
2025-01-31 15:31:42,024 - DEBUG - on stmt: min_val = arg(1, name=min_val)
2025-01-31 15:31:42,024 - DEBUG - on stmt: $6compare_op.2 = a > min_val
2025-01-31 15:31:42,024 - DEBUG - on stmt: $8return_value.3 = cast(value=$6compare_op.2)
2025-01-31 15:31:42,024 - DEBUG - on stmt: return $8return_value.3
2025-01-31 15:31:42,024 - DEBUG - defs defaultdict(<class 'list'>,
            {'$6compare_op.2': [(<numba.core.ir.Assign object at 0x7c89e8a82bf0>,
                                 0)],
             '$8return_value.3': [(<numba.core.ir.Assign object at 0x7c89e8a80310>,
                                   0)],
             'a': [(<numba.core.ir.Assign object at 0x7c89e8a83220>, 0)],
             'min_val': [(<numba.core.ir.Assign object at 0x7c89e8a82e60>, 0)]})
2025-01-31 15:31:42,024 - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x7c89e8a71720>
2025-01-31 15:31:42,117 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=437)
           2	LOAD_DEREF(arg=0, lineno=440)
           4	STORE_FAST(arg=1, lineno=440)
           6	LOAD_GLOBAL(arg=0, lineno=441)
           8	LOAD_METHOD(arg=1, lineno=441)
          10	LOAD_FAST(arg=0, lineno=441)
          12	CALL_METHOD(arg=1, lineno=441)
          14	GET_ITER(arg=None, lineno=441)
>         16	FOR_ITER(arg=8, lineno=441)
          18	STORE_FAST(arg=2, lineno=441)
          20	LOAD_FAST(arg=1, lineno=442)
          22	LOAD_FAST(arg=2, lineno=442)
          24	LOAD_METHOD(arg=2, lineno=442)
          26	CALL_METHOD(arg=0, lineno=442)
          28	INPLACE_ADD(arg=None, lineno=442)
          30	STORE_FAST(arg=1, lineno=442)
          32	JUMP_ABSOLUTE(arg=9, lineno=442)
>         34	LOAD_FAST(arg=1, lineno=443)
          36	LOAD_FAST(arg=0, lineno=443)
          38	LOAD_ATTR(arg=3, lineno=443)
          40	BINARY_TRUE_DIVIDE(arg=None, lineno=443)
          42	RETURN_VALUE(arg=None, lineno=443)
2025-01-31 15:31:42,117 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:31:42,117 - DEBUG - stack: []
2025-01-31 15:31:42,117 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:31:42,117 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=437)
2025-01-31 15:31:42,117 - DEBUG - stack []
2025-01-31 15:31:42,117 - DEBUG - dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=440)
2025-01-31 15:31:42,117 - DEBUG - stack []
2025-01-31 15:31:42,117 - DEBUG - dispatch pc=4, inst=STORE_FAST(arg=1, lineno=440)
2025-01-31 15:31:42,117 - DEBUG - stack ['$2load_deref.0']
2025-01-31 15:31:42,117 - DEBUG - dispatch pc=6, inst=LOAD_GLOBAL(arg=0, lineno=441)
2025-01-31 15:31:42,117 - DEBUG - stack []
2025-01-31 15:31:42,117 - DEBUG - dispatch pc=8, inst=LOAD_METHOD(arg=1, lineno=441)
2025-01-31 15:31:42,117 - DEBUG - stack ['$6load_global.1']
2025-01-31 15:31:42,117 - DEBUG - dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=441)
2025-01-31 15:31:42,117 - DEBUG - stack ['$8load_method.2']
2025-01-31 15:31:42,118 - DEBUG - dispatch pc=12, inst=CALL_METHOD(arg=1, lineno=441)
2025-01-31 15:31:42,118 - DEBUG - stack ['$8load_method.2', '$a10.3']
2025-01-31 15:31:42,118 - DEBUG - dispatch pc=14, inst=GET_ITER(arg=None, lineno=441)
2025-01-31 15:31:42,118 - DEBUG - stack ['$12call_method.4']
2025-01-31 15:31:42,118 - DEBUG - end state. edges=[Edge(pc=16, stack=('$14get_iter.5',), blockstack=(), npush=0)]
2025-01-31 15:31:42,118 - DEBUG - pending: deque([State(pc_initial=16 nstack_initial=1)])
2025-01-31 15:31:42,118 - DEBUG - stack: ['$phi16.0']
2025-01-31 15:31:42,118 - DEBUG - state.pc_initial: State(pc_initial=16 nstack_initial=1)
2025-01-31 15:31:42,118 - DEBUG - dispatch pc=16, inst=FOR_ITER(arg=8, lineno=441)
2025-01-31 15:31:42,118 - DEBUG - stack ['$phi16.0']
2025-01-31 15:31:42,118 - DEBUG - end state. edges=[Edge(pc=34, stack=(), blockstack=(), npush=0), Edge(pc=18, stack=('$phi16.0', '$16for_iter.2'), blockstack=(), npush=0)]
2025-01-31 15:31:42,118 - DEBUG - pending: deque([State(pc_initial=34 nstack_initial=0), State(pc_initial=18 nstack_initial=2)])
2025-01-31 15:31:42,118 - DEBUG - stack: []
2025-01-31 15:31:42,118 - DEBUG - state.pc_initial: State(pc_initial=34 nstack_initial=0)
2025-01-31 15:31:42,118 - DEBUG - dispatch pc=34, inst=LOAD_FAST(arg=1, lineno=443)
2025-01-31 15:31:42,118 - DEBUG - stack []
2025-01-31 15:31:42,118 - DEBUG - dispatch pc=36, inst=LOAD_FAST(arg=0, lineno=443)
2025-01-31 15:31:42,118 - DEBUG - stack ['$c34.0']
2025-01-31 15:31:42,118 - DEBUG - dispatch pc=38, inst=LOAD_ATTR(arg=3, lineno=443)
2025-01-31 15:31:42,118 - DEBUG - stack ['$c34.0', '$a36.1']
2025-01-31 15:31:42,118 - DEBUG - dispatch pc=40, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=443)
2025-01-31 15:31:42,118 - DEBUG - stack ['$c34.0', '$38load_attr.2']
2025-01-31 15:31:42,118 - DEBUG - dispatch pc=42, inst=RETURN_VALUE(arg=None, lineno=443)
2025-01-31 15:31:42,118 - DEBUG - stack ['$40binary_true_divide.3']
2025-01-31 15:31:42,118 - DEBUG - end state. edges=[]
2025-01-31 15:31:42,118 - DEBUG - pending: deque([State(pc_initial=18 nstack_initial=2)])
2025-01-31 15:31:42,118 - DEBUG - stack: ['$phi18.0', '$phi18.1']
2025-01-31 15:31:42,118 - DEBUG - state.pc_initial: State(pc_initial=18 nstack_initial=2)
2025-01-31 15:31:42,119 - DEBUG - dispatch pc=18, inst=STORE_FAST(arg=2, lineno=441)
2025-01-31 15:31:42,119 - DEBUG - stack ['$phi18.0', '$phi18.1']
2025-01-31 15:31:42,119 - DEBUG - dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=442)
2025-01-31 15:31:42,119 - DEBUG - stack ['$phi18.0']
2025-01-31 15:31:42,119 - DEBUG - dispatch pc=22, inst=LOAD_FAST(arg=2, lineno=442)
2025-01-31 15:31:42,119 - DEBUG - stack ['$phi18.0', '$c20.2']
2025-01-31 15:31:42,119 - DEBUG - dispatch pc=24, inst=LOAD_METHOD(arg=2, lineno=442)
2025-01-31 15:31:42,119 - DEBUG - stack ['$phi18.0', '$c20.2', '$v22.3']
2025-01-31 15:31:42,119 - DEBUG - dispatch pc=26, inst=CALL_METHOD(arg=0, lineno=442)
2025-01-31 15:31:42,119 - DEBUG - stack ['$phi18.0', '$c20.2', '$24load_method.4']
2025-01-31 15:31:42,119 - DEBUG - dispatch pc=28, inst=INPLACE_ADD(arg=None, lineno=442)
2025-01-31 15:31:42,119 - DEBUG - stack ['$phi18.0', '$c20.2', '$26call_method.5']
2025-01-31 15:31:42,119 - DEBUG - dispatch pc=30, inst=STORE_FAST(arg=1, lineno=442)
2025-01-31 15:31:42,119 - DEBUG - stack ['$phi18.0', '$28inplace_add.6']
2025-01-31 15:31:42,119 - DEBUG - dispatch pc=32, inst=JUMP_ABSOLUTE(arg=9, lineno=442)
2025-01-31 15:31:42,119 - DEBUG - stack ['$phi18.0']
2025-01-31 15:31:42,119 - DEBUG - end state. edges=[Edge(pc=16, stack=('$phi18.0',), blockstack=(), npush=0)]
2025-01-31 15:31:42,119 - DEBUG - pending: deque([State(pc_initial=16 nstack_initial=1)])
2025-01-31 15:31:42,119 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:31:42,119 - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=16 nstack_initial=1): {'$phi16.0'},
             State(pc_initial=18 nstack_initial=2): {'$phi18.1'},
             State(pc_initial=34 nstack_initial=0): set()})
2025-01-31 15:31:42,119 - DEBUG - defmap: {'$phi16.0': State(pc_initial=0 nstack_initial=0),
 '$phi18.1': State(pc_initial=16 nstack_initial=1)}
2025-01-31 15:31:42,119 - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi18.0', State(pc_initial=18 nstack_initial=2))},
             '$phi18.0': {('$phi16.0', State(pc_initial=16 nstack_initial=1))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
2025-01-31 15:31:42,120 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi16.0', State(pc_initial=16 nstack_initial=1))},
             '$phi18.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
2025-01-31 15:31:42,120 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
2025-01-31 15:31:42,120 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
2025-01-31 15:31:42,120 - DEBUG - keep phismap: {'$phi16.0': {('$14get_iter.5', State(pc_initial=0 nstack_initial=0))},
 '$phi18.1': {('$16for_iter.2', State(pc_initial=16 nstack_initial=1))}}
2025-01-31 15:31:42,120 - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi16.0': '$14get_iter.5'},
             State(pc_initial=16 nstack_initial=1): {'$phi18.1': '$16for_iter.2'}})
2025-01-31 15:31:42,120 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:31:42,120 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'value': '$2load_deref.0'}), (6, {'res': '$6load_global.1'}), (8, {'item': '$6load_global.1', 'res': '$8load_method.2'}), (10, {'res': '$a10.3'}), (12, {'func': '$8load_method.2', 'args': ['$a10.3'], 'res': '$12call_method.4'}), (14, {'value': '$12call_method.4', 'res': '$14get_iter.5'})), outgoing_phis={'$phi16.0': '$14get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={16: ('$14get_iter.5',)})
2025-01-31 15:31:42,120 - DEBUG - block_infos State(pc_initial=16 nstack_initial=1):
AdaptBlockInfo(insts=((16, {'iterator': '$phi16.0', 'pair': '$16for_iter.1', 'indval': '$16for_iter.2', 'pred': '$16for_iter.3'}),), outgoing_phis={'$phi18.1': '$16for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: (), 18: ('$phi16.0', '$16for_iter.2')})
2025-01-31 15:31:42,121 - DEBUG - block_infos State(pc_initial=18 nstack_initial=2):
AdaptBlockInfo(insts=((18, {'value': '$phi18.1'}), (20, {'res': '$c20.2'}), (22, {'res': '$v22.3'}), (24, {'item': '$v22.3', 'res': '$24load_method.4'}), (26, {'func': '$24load_method.4', 'args': [], 'res': '$26call_method.5'}), (28, {'lhs': '$c20.2', 'rhs': '$26call_method.5', 'res': '$28inplace_add.6'}), (30, {'value': '$28inplace_add.6'}), (32, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={16: ('$phi18.0',)})
2025-01-31 15:31:42,121 - DEBUG - block_infos State(pc_initial=34 nstack_initial=0):
AdaptBlockInfo(insts=((34, {'res': '$c34.0'}), (36, {'res': '$a36.1'}), (38, {'item': '$a36.1', 'res': '$38load_attr.2'}), (40, {'lhs': '$c34.0', 'rhs': '$38load_attr.2', 'res': '$40binary_true_divide.3'}), (42, {'retval': '$40binary_true_divide.3', 'castval': '$42return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:42,121 - DEBUG - label 0:
    a = arg(0, name=a)                       ['a']
    c = freevar(acc_init: 0.0)               ['c']
    $6load_global.1 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>) ['$6load_global.1']
    $8load_method.2 = getattr(value=$6load_global.1, attr=nditer) ['$6load_global.1', '$8load_method.2']
    $12call_method.4 = call $8load_method.2(a, func=$8load_method.2, args=[Var(a, arraymath.py:437)], kws=(), vararg=None, varkwarg=None, target=None) ['$12call_method.4', '$8load_method.2', 'a']
    $14get_iter.5 = getiter(value=$12call_method.4) ['$12call_method.4', '$14get_iter.5']
    $phi16.0 = $14get_iter.5                 ['$14get_iter.5', '$phi16.0']
    jump 16                                  []
label 16:
    $16for_iter.1 = iternext(value=$phi16.0) ['$16for_iter.1', '$phi16.0']
    $16for_iter.2 = pair_first(value=$16for_iter.1) ['$16for_iter.1', '$16for_iter.2']
    $16for_iter.3 = pair_second(value=$16for_iter.1) ['$16for_iter.1', '$16for_iter.3']
    $phi18.1 = $16for_iter.2                 ['$16for_iter.2', '$phi18.1']
    branch $16for_iter.3, 18, 34             ['$16for_iter.3']
label 18:
    v = $phi18.1                             ['$phi18.1', 'v']
    $24load_method.4 = getattr(value=v, attr=item) ['$24load_method.4', 'v']
    $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None, varkwarg=None, target=None) ['$24load_method.4', '$26call_method.5']
    $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined) ['$26call_method.5', '$28inplace_add.6', 'c']
    c = $28inplace_add.6                     ['$28inplace_add.6', 'c']
    jump 16                                  []
label 34:
    $38load_attr.2 = getattr(value=a, attr=size) ['$38load_attr.2', 'a']
    $40binary_true_divide.3 = c / $38load_attr.2 ['$38load_attr.2', '$40binary_true_divide.3', 'c']
    $42return_value.4 = cast(value=$40binary_true_divide.3) ['$40binary_true_divide.3', '$42return_value.4']
    return $42return_value.4                 ['$42return_value.4']

2025-01-31 15:31:42,126 - DEBUG - ==== SSA block analysis pass on 0
2025-01-31 15:31:42,126 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8829ba0>
2025-01-31 15:31:42,126 - DEBUG - on stmt: a = arg(0, name=a)
2025-01-31 15:31:42,126 - DEBUG - on stmt: c = freevar(acc_init: 0.0)
2025-01-31 15:31:42,126 - DEBUG - on stmt: $6load_global.1 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:42,126 - DEBUG - on stmt: $8load_method.2 = getattr(value=$6load_global.1, attr=nditer)
2025-01-31 15:31:42,126 - DEBUG - on stmt: $12call_method.4 = call $8load_method.2(a, func=$8load_method.2, args=[Var(a, arraymath.py:437)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,126 - DEBUG - on stmt: $14get_iter.5 = getiter(value=$12call_method.4)
2025-01-31 15:31:42,126 - DEBUG - on stmt: $phi16.0 = $14get_iter.5
2025-01-31 15:31:42,126 - DEBUG - on stmt: jump 16
2025-01-31 15:31:42,126 - DEBUG - ==== SSA block analysis pass on 16
2025-01-31 15:31:42,126 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8829ba0>
2025-01-31 15:31:42,126 - DEBUG - on stmt: $16for_iter.1 = iternext(value=$phi16.0)
2025-01-31 15:31:42,126 - DEBUG - on stmt: $16for_iter.2 = pair_first(value=$16for_iter.1)
2025-01-31 15:31:42,126 - DEBUG - on stmt: $16for_iter.3 = pair_second(value=$16for_iter.1)
2025-01-31 15:31:42,127 - DEBUG - on stmt: $phi18.1 = $16for_iter.2
2025-01-31 15:31:42,127 - DEBUG - on stmt: branch $16for_iter.3, 18, 34
2025-01-31 15:31:42,127 - DEBUG - ==== SSA block analysis pass on 18
2025-01-31 15:31:42,127 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8829ba0>
2025-01-31 15:31:42,127 - DEBUG - on stmt: v = $phi18.1
2025-01-31 15:31:42,127 - DEBUG - on stmt: $24load_method.4 = getattr(value=v, attr=item)
2025-01-31 15:31:42,127 - DEBUG - on stmt: $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,127 - DEBUG - on stmt: $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:42,127 - DEBUG - on stmt: c = $28inplace_add.6
2025-01-31 15:31:42,127 - DEBUG - on stmt: jump 16
2025-01-31 15:31:42,127 - DEBUG - ==== SSA block analysis pass on 34
2025-01-31 15:31:42,127 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8829ba0>
2025-01-31 15:31:42,127 - DEBUG - on stmt: $38load_attr.2 = getattr(value=a, attr=size)
2025-01-31 15:31:42,127 - DEBUG - on stmt: $40binary_true_divide.3 = c / $38load_attr.2
2025-01-31 15:31:42,127 - DEBUG - on stmt: $42return_value.4 = cast(value=$40binary_true_divide.3)
2025-01-31 15:31:42,127 - DEBUG - on stmt: return $42return_value.4
2025-01-31 15:31:42,127 - DEBUG - defs defaultdict(<class 'list'>,
            {'$12call_method.4': [(<numba.core.ir.Assign object at 0x7c89e87a4e80>,
                                   0)],
             '$14get_iter.5': [(<numba.core.ir.Assign object at 0x7c89e87a4f70>,
                                0)],
             '$16for_iter.1': [(<numba.core.ir.Assign object at 0x7c89e87a5240>,
                                16)],
             '$16for_iter.2': [(<numba.core.ir.Assign object at 0x7c89e87a5360>,
                                16)],
             '$16for_iter.3': [(<numba.core.ir.Assign object at 0x7c89e87a5480>,
                                16)],
             '$24load_method.4': [(<numba.core.ir.Assign object at 0x7c89e87a5b10>,
                                   18)],
             '$26call_method.5': [(<numba.core.ir.Assign object at 0x7c89e87a5d20>,
                                   18)],
             '$28inplace_add.6': [(<numba.core.ir.Assign object at 0x7c89e87a5e40>,
                                   18)],
             '$38load_attr.2': [(<numba.core.ir.Assign object at 0x7c89e87a6350>,
                                 34)],
             '$40binary_true_divide.3': [(<numba.core.ir.Assign object at 0x7c89e87a6500>,
                                          34)],
             '$42return_value.4': [(<numba.core.ir.Assign object at 0x7c89e87a6650>,
                                    34)],
             '$6load_global.1': [(<numba.core.ir.Assign object at 0x7c89e87a49d0>,
                                  0)],
             '$8load_method.2': [(<numba.core.ir.Assign object at 0x7c89e87a4b50>,
                                  0)],
             '$phi16.0': [(<numba.core.ir.Assign object at 0x7c89e8b4e200>, 0)],
             '$phi18.1': [(<numba.core.ir.Assign object at 0x7c89e87a5180>,
                           16)],
             'a': [(<numba.core.ir.Assign object at 0x7c89e886a8f0>, 0)],
             'c': [(<numba.core.ir.Assign object at 0x7c89e8869000>, 0),
                   (<numba.core.ir.Assign object at 0x7c89e87a5f00>, 18)],
             'v': [(<numba.core.ir.Assign object at 0x7c89e87a5750>, 18)]})
2025-01-31 15:31:42,128 - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x7c89e8829ba0>
2025-01-31 15:31:42,128 - DEBUG - Fix SSA violator on var c
2025-01-31 15:31:42,128 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-31 15:31:42,128 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e8829030>
2025-01-31 15:31:42,128 - DEBUG - on stmt: a = arg(0, name=a)
2025-01-31 15:31:42,128 - DEBUG - on stmt: c = freevar(acc_init: 0.0)
2025-01-31 15:31:42,128 - DEBUG - first assign: c
2025-01-31 15:31:42,128 - DEBUG - replaced with: c = freevar(acc_init: 0.0)
2025-01-31 15:31:42,128 - DEBUG - on stmt: $6load_global.1 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:42,128 - DEBUG - on stmt: $8load_method.2 = getattr(value=$6load_global.1, attr=nditer)
2025-01-31 15:31:42,128 - DEBUG - on stmt: $12call_method.4 = call $8load_method.2(a, func=$8load_method.2, args=[Var(a, arraymath.py:437)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,128 - DEBUG - on stmt: $14get_iter.5 = getiter(value=$12call_method.4)
2025-01-31 15:31:42,128 - DEBUG - on stmt: $phi16.0 = $14get_iter.5
2025-01-31 15:31:42,128 - DEBUG - on stmt: jump 16
2025-01-31 15:31:42,128 - DEBUG - ==== SSA block rewrite pass on 16
2025-01-31 15:31:42,128 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e8829030>
2025-01-31 15:31:42,128 - DEBUG - on stmt: $16for_iter.1 = iternext(value=$phi16.0)
2025-01-31 15:31:42,128 - DEBUG - on stmt: $16for_iter.2 = pair_first(value=$16for_iter.1)
2025-01-31 15:31:42,128 - DEBUG - on stmt: $16for_iter.3 = pair_second(value=$16for_iter.1)
2025-01-31 15:31:42,128 - DEBUG - on stmt: $phi18.1 = $16for_iter.2
2025-01-31 15:31:42,128 - DEBUG - on stmt: branch $16for_iter.3, 18, 34
2025-01-31 15:31:42,128 - DEBUG - ==== SSA block rewrite pass on 18
2025-01-31 15:31:42,128 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e8829030>
2025-01-31 15:31:42,128 - DEBUG - on stmt: v = $phi18.1
2025-01-31 15:31:42,128 - DEBUG - on stmt: $24load_method.4 = getattr(value=v, attr=item)
2025-01-31 15:31:42,128 - DEBUG - on stmt: $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,128 - DEBUG - on stmt: $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:42,129 - DEBUG - on stmt: c = $28inplace_add.6
2025-01-31 15:31:42,129 - DEBUG - replaced with: c.1 = $28inplace_add.6
2025-01-31 15:31:42,129 - DEBUG - on stmt: jump 16
2025-01-31 15:31:42,129 - DEBUG - ==== SSA block rewrite pass on 34
2025-01-31 15:31:42,129 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e8829030>
2025-01-31 15:31:42,129 - DEBUG - on stmt: $38load_attr.2 = getattr(value=a, attr=size)
2025-01-31 15:31:42,129 - DEBUG - on stmt: $40binary_true_divide.3 = c / $38load_attr.2
2025-01-31 15:31:42,129 - DEBUG - on stmt: $42return_value.4 = cast(value=$40binary_true_divide.3)
2025-01-31 15:31:42,129 - DEBUG - on stmt: return $42return_value.4
2025-01-31 15:31:42,129 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7c89e8829450>],
             18: [<numba.core.ir.Assign object at 0x7c89e8b4d0c0>]})
2025-01-31 15:31:42,129 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-31 15:31:42,129 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e8829030>
2025-01-31 15:31:42,129 - DEBUG - on stmt: a = arg(0, name=a)
2025-01-31 15:31:42,129 - DEBUG - on stmt: c = freevar(acc_init: 0.0)
2025-01-31 15:31:42,129 - DEBUG - on stmt: $6load_global.1 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:42,129 - DEBUG - on stmt: $8load_method.2 = getattr(value=$6load_global.1, attr=nditer)
2025-01-31 15:31:42,129 - DEBUG - on stmt: $12call_method.4 = call $8load_method.2(a, func=$8load_method.2, args=[Var(a, arraymath.py:437)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,129 - DEBUG - on stmt: $14get_iter.5 = getiter(value=$12call_method.4)
2025-01-31 15:31:42,129 - DEBUG - on stmt: $phi16.0 = $14get_iter.5
2025-01-31 15:31:42,129 - DEBUG - on stmt: jump 16
2025-01-31 15:31:42,129 - DEBUG - ==== SSA block rewrite pass on 16
2025-01-31 15:31:42,129 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e8829030>
2025-01-31 15:31:42,129 - DEBUG - on stmt: $16for_iter.1 = iternext(value=$phi16.0)
2025-01-31 15:31:42,129 - DEBUG - on stmt: $16for_iter.2 = pair_first(value=$16for_iter.1)
2025-01-31 15:31:42,129 - DEBUG - on stmt: $16for_iter.3 = pair_second(value=$16for_iter.1)
2025-01-31 15:31:42,129 - DEBUG - on stmt: $phi18.1 = $16for_iter.2
2025-01-31 15:31:42,130 - DEBUG - on stmt: branch $16for_iter.3, 18, 34
2025-01-31 15:31:42,130 - DEBUG - ==== SSA block rewrite pass on 18
2025-01-31 15:31:42,130 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e8829030>
2025-01-31 15:31:42,130 - DEBUG - on stmt: v = $phi18.1
2025-01-31 15:31:42,130 - DEBUG - on stmt: $24load_method.4 = getattr(value=v, attr=item)
2025-01-31 15:31:42,130 - DEBUG - on stmt: $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,130 - DEBUG - on stmt: $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:42,130 - DEBUG - find_def var='c' stmt=$28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:42,130 - DEBUG - find_def_from_top label 18
2025-01-31 15:31:42,130 - DEBUG - idom 16 from label 18
2025-01-31 15:31:42,130 - DEBUG - find_def_from_bottom label 16
2025-01-31 15:31:42,130 - DEBUG - find_def_from_top label 16
2025-01-31 15:31:42,130 - DEBUG - insert phi node c.2 = phi(incoming_values=[], incoming_blocks=[]) at 16
2025-01-31 15:31:42,130 - DEBUG - find_def_from_bottom label 0
2025-01-31 15:31:42,130 - DEBUG - incoming_def c = freevar(acc_init: 0.0)
2025-01-31 15:31:42,130 - DEBUG - find_def_from_bottom label 18
2025-01-31 15:31:42,130 - DEBUG - incoming_def c.1 = $28inplace_add.6
2025-01-31 15:31:42,130 - DEBUG - replaced with: $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c.2, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:42,130 - DEBUG - on stmt: c.1 = $28inplace_add.6
2025-01-31 15:31:42,130 - DEBUG - on stmt: jump 16
2025-01-31 15:31:42,130 - DEBUG - ==== SSA block rewrite pass on 34
2025-01-31 15:31:42,130 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e8829030>
2025-01-31 15:31:42,130 - DEBUG - on stmt: $38load_attr.2 = getattr(value=a, attr=size)
2025-01-31 15:31:42,130 - DEBUG - on stmt: $40binary_true_divide.3 = c / $38load_attr.2
2025-01-31 15:31:42,130 - DEBUG - find_def var='c' stmt=$40binary_true_divide.3 = c / $38load_attr.2
2025-01-31 15:31:42,130 - DEBUG - find_def_from_top label 34
2025-01-31 15:31:42,130 - DEBUG - idom 16 from label 34
2025-01-31 15:31:42,131 - DEBUG - find_def_from_bottom label 16
2025-01-31 15:31:42,131 - DEBUG - replaced with: $40binary_true_divide.3 = c.2 / $38load_attr.2
2025-01-31 15:31:42,131 - DEBUG - on stmt: $42return_value.4 = cast(value=$40binary_true_divide.3)
2025-01-31 15:31:42,131 - DEBUG - on stmt: return $42return_value.4
2025-01-31 15:31:42,356 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=1209)
           2	LOAD_FAST(arg=0, lineno=1221)
           4	LOAD_CONST(arg=1, lineno=1221)
           6	BINARY_SUBSCR(arg=None, lineno=1221)
           8	LOAD_GLOBAL(arg=0, lineno=1221)
          10	LOAD_METHOD(arg=1, lineno=1221)
          12	LOAD_FAST(arg=0, lineno=1221)
          14	LOAD_CONST(arg=2, lineno=1221)
          16	LOAD_GLOBAL(arg=2, lineno=1221)
          18	LOAD_FAST(arg=2, lineno=1221)
          20	LOAD_FAST(arg=0, lineno=1221)
          22	LOAD_ATTR(arg=3, lineno=1221)
          24	LOAD_CONST(arg=1, lineno=1221)
          26	BINARY_SUBSCR(arg=None, lineno=1221)
          28	CALL_FUNCTION(arg=2, lineno=1221)
          30	BUILD_SLICE(arg=2, lineno=1221)
          32	BINARY_SUBSCR(arg=None, lineno=1221)
          34	CALL_METHOD(arg=1, lineno=1221)
          36	COMPARE_OP(arg=5, lineno=1221)
          38	LOAD_FAST(arg=7, lineno=1221)
          40	LOAD_CONST(arg=1, lineno=1221)
          42	STORE_SUBSCR(arg=None, lineno=1221)
          44	LOAD_FAST(arg=7, lineno=1222)
          46	LOAD_CONST(arg=1, lineno=1222)
          48	DUP_TOP_TWO(arg=None, lineno=1222)
          50	BINARY_SUBSCR(arg=None, lineno=1222)
          52	LOAD_FAST(arg=0, lineno=1222)
          54	LOAD_CONST(arg=1, lineno=1222)
          56	BINARY_SUBSCR(arg=None, lineno=1222)
          58	LOAD_GLOBAL(arg=0, lineno=1222)
          60	LOAD_METHOD(arg=4, lineno=1222)
          62	LOAD_FAST(arg=0, lineno=1222)
          64	LOAD_CONST(arg=2, lineno=1222)
          66	LOAD_GLOBAL(arg=2, lineno=1222)
          68	LOAD_FAST(arg=4, lineno=1222)
          70	LOAD_FAST(arg=0, lineno=1222)
          72	LOAD_ATTR(arg=3, lineno=1222)
          74	LOAD_CONST(arg=1, lineno=1222)
          76	BINARY_SUBSCR(arg=None, lineno=1222)
          78	CALL_FUNCTION(arg=2, lineno=1222)
          80	BUILD_SLICE(arg=2, lineno=1222)
          82	BINARY_SUBSCR(arg=None, lineno=1222)
          84	CALL_METHOD(arg=1, lineno=1222)
          86	LOAD_FAST(arg=5, lineno=1222)
          88	BINARY_ADD(arg=None, lineno=1222)
          90	COMPARE_OP(arg=5, lineno=1222)
          92	INPLACE_AND(arg=None, lineno=1222)
          94	ROT_THREE(arg=None, lineno=1222)
          96	STORE_SUBSCR(arg=None, lineno=1222)
          98	LOAD_FAST(arg=7, lineno=1224)
         100	LOAD_CONST(arg=1, lineno=1224)
         102	BINARY_SUBSCR(arg=None, lineno=1224)
         104	POP_JUMP_IF_FALSE(arg=59, lineno=1224)
         106	LOAD_FAST(arg=6, lineno=1225)
         108	LOAD_CONST(arg=3, lineno=1225)
         110	BINARY_ADD(arg=None, lineno=1225)
         112	STORE_FAST(arg=8, lineno=1225)
         114	JUMP_FORWARD(arg=2, lineno=1225)
>        116	LOAD_CONST(arg=3, lineno=1227)
         118	STORE_FAST(arg=8, lineno=1227)
>        120	LOAD_FAST(arg=8, lineno=1229)
         122	LOAD_FAST(arg=0, lineno=1229)
         124	LOAD_ATTR(arg=3, lineno=1229)
         126	LOAD_CONST(arg=1, lineno=1229)
         128	BINARY_SUBSCR(arg=None, lineno=1229)
         130	COMPARE_OP(arg=0, lineno=1229)
         132	POP_JUMP_IF_FALSE(arg=167, lineno=1229)
>        134	LOAD_GLOBAL(arg=0, lineno=1230)
         136	LOAD_METHOD(arg=1, lineno=1230)
         138	LOAD_FAST(arg=0, lineno=1230)
         140	LOAD_GLOBAL(arg=1, lineno=1230)
         142	LOAD_CONST(arg=1, lineno=1230)
         144	LOAD_FAST(arg=8, lineno=1230)
         146	LOAD_FAST(arg=1, lineno=1230)
         148	BINARY_SUBTRACT(arg=None, lineno=1230)
         150	CALL_FUNCTION(arg=2, lineno=1230)
         152	LOAD_GLOBAL(arg=2, lineno=1230)
         154	LOAD_FAST(arg=8, lineno=1230)
         156	LOAD_FAST(arg=2, lineno=1230)
         158	BINARY_ADD(arg=None, lineno=1230)
         160	LOAD_FAST(arg=0, lineno=1230)
         162	LOAD_ATTR(arg=3, lineno=1230)
         164	LOAD_CONST(arg=1, lineno=1230)
         166	BINARY_SUBSCR(arg=None, lineno=1230)
         168	CALL_FUNCTION(arg=2, lineno=1230)
         170	BUILD_SLICE(arg=2, lineno=1230)
         172	BINARY_SUBSCR(arg=None, lineno=1230)
         174	CALL_METHOD(arg=1, lineno=1230)
         176	STORE_FAST(arg=9, lineno=1230)
         178	LOAD_FAST(arg=0, lineno=1233)
         180	LOAD_FAST(arg=8, lineno=1233)
         182	BINARY_SUBSCR(arg=None, lineno=1233)
         184	LOAD_FAST(arg=9, lineno=1233)
         186	COMPARE_OP(arg=2, lineno=1233)
         188	LOAD_FAST(arg=7, lineno=1233)
         190	LOAD_FAST(arg=8, lineno=1233)
         192	STORE_SUBSCR(arg=None, lineno=1233)
         194	LOAD_FAST(arg=7, lineno=1235)
         196	LOAD_FAST(arg=8, lineno=1235)
         198	BINARY_SUBSCR(arg=None, lineno=1235)
         200	POP_JUMP_IF_TRUE(arg=107, lineno=1235)
         202	LOAD_FAST(arg=8, lineno=1236)
         204	LOAD_CONST(arg=3, lineno=1236)
         206	INPLACE_ADD(arg=None, lineno=1236)
         208	STORE_FAST(arg=8, lineno=1236)
         210	JUMP_ABSOLUTE(arg=61, lineno=1237)
>        212	LOAD_GLOBAL(arg=0, lineno=1239)
         214	LOAD_METHOD(arg=4, lineno=1239)
         216	LOAD_FAST(arg=0, lineno=1239)
         218	LOAD_GLOBAL(arg=1, lineno=1239)
         220	LOAD_CONST(arg=1, lineno=1239)
         222	LOAD_FAST(arg=8, lineno=1239)
         224	LOAD_FAST(arg=3, lineno=1239)
         226	BINARY_SUBTRACT(arg=None, lineno=1239)
         228	CALL_FUNCTION(arg=2, lineno=1239)
         230	LOAD_GLOBAL(arg=2, lineno=1239)
         232	LOAD_FAST(arg=8, lineno=1239)
         234	LOAD_FAST(arg=4, lineno=1239)
         236	BINARY_ADD(arg=None, lineno=1239)
         238	LOAD_FAST(arg=0, lineno=1239)
         240	LOAD_ATTR(arg=3, lineno=1239)
         242	LOAD_CONST(arg=1, lineno=1239)
         244	BINARY_SUBSCR(arg=None, lineno=1239)
         246	CALL_FUNCTION(arg=2, lineno=1239)
         248	BUILD_SLICE(arg=2, lineno=1239)
         250	BINARY_SUBSCR(arg=None, lineno=1239)
         252	CALL_METHOD(arg=1, lineno=1239)
         254	STORE_FAST(arg=10, lineno=1239)
         256	LOAD_FAST(arg=7, lineno=1240)
         258	LOAD_FAST(arg=8, lineno=1240)
         260	DUP_TOP_TWO(arg=None, lineno=1240)
         262	BINARY_SUBSCR(arg=None, lineno=1240)
         264	LOAD_FAST(arg=0, lineno=1240)
         266	LOAD_FAST(arg=8, lineno=1240)
         268	BINARY_SUBSCR(arg=None, lineno=1240)
         270	LOAD_FAST(arg=10, lineno=1240)
         272	LOAD_FAST(arg=5, lineno=1240)
         274	BINARY_ADD(arg=None, lineno=1240)
         276	COMPARE_OP(arg=5, lineno=1240)
         278	INPLACE_AND(arg=None, lineno=1240)
         280	ROT_THREE(arg=None, lineno=1240)
         282	STORE_SUBSCR(arg=None, lineno=1240)
         284	LOAD_FAST(arg=7, lineno=1242)
         286	LOAD_FAST(arg=8, lineno=1242)
         288	BINARY_SUBSCR(arg=None, lineno=1242)
         290	POP_JUMP_IF_TRUE(arg=152, lineno=1242)
         292	LOAD_FAST(arg=8, lineno=1243)
         294	LOAD_CONST(arg=3, lineno=1243)
         296	INPLACE_ADD(arg=None, lineno=1243)
         298	STORE_FAST(arg=8, lineno=1243)
         300	JUMP_ABSOLUTE(arg=61, lineno=1244)
>        302	LOAD_FAST(arg=8, lineno=1247)
         304	LOAD_FAST(arg=6, lineno=1247)
         306	LOAD_CONST(arg=3, lineno=1247)
         308	BINARY_ADD(arg=None, lineno=1247)
         310	INPLACE_ADD(arg=None, lineno=1247)
         312	STORE_FAST(arg=8, lineno=1247)
         314	LOAD_FAST(arg=8, lineno=1229)
         316	LOAD_FAST(arg=0, lineno=1229)
         318	LOAD_ATTR(arg=3, lineno=1229)
         320	LOAD_CONST(arg=1, lineno=1229)
         322	BINARY_SUBSCR(arg=None, lineno=1229)
         324	COMPARE_OP(arg=0, lineno=1229)
         326	POP_JUMP_IF_TRUE(arg=68, lineno=1229)
         328	LOAD_CONST(arg=2, lineno=1229)
         330	RETURN_VALUE(arg=None, lineno=1229)
>        332	LOAD_CONST(arg=2, lineno=1229)
         334	RETURN_VALUE(arg=None, lineno=1229)
2025-01-31 15:31:42,356 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:31:42,356 - DEBUG - stack: []
2025-01-31 15:31:42,356 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:31:42,356 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=1209)
2025-01-31 15:31:42,356 - DEBUG - stack []
2025-01-31 15:31:42,356 - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1221)
2025-01-31 15:31:42,356 - DEBUG - stack []
2025-01-31 15:31:42,356 - DEBUG - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1221)
2025-01-31 15:31:42,356 - DEBUG - stack ['$x2.0']
2025-01-31 15:31:42,356 - DEBUG - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=1221)
2025-01-31 15:31:42,356 - DEBUG - stack ['$x2.0', '$const4.1']
2025-01-31 15:31:42,356 - DEBUG - dispatch pc=8, inst=LOAD_GLOBAL(arg=0, lineno=1221)
2025-01-31 15:31:42,356 - DEBUG - stack ['$6binary_subscr.2']
2025-01-31 15:31:42,356 - DEBUG - dispatch pc=10, inst=LOAD_METHOD(arg=1, lineno=1221)
2025-01-31 15:31:42,356 - DEBUG - stack ['$6binary_subscr.2', '$8load_global.3']
2025-01-31 15:31:42,356 - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=1221)
2025-01-31 15:31:42,356 - DEBUG - stack ['$6binary_subscr.2', '$10load_method.4']
2025-01-31 15:31:42,356 - DEBUG - dispatch pc=14, inst=LOAD_CONST(arg=2, lineno=1221)
2025-01-31 15:31:42,357 - DEBUG - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5']
2025-01-31 15:31:42,357 - DEBUG - dispatch pc=16, inst=LOAD_GLOBAL(arg=2, lineno=1221)
2025-01-31 15:31:42,357 - DEBUG - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$const14.6']
2025-01-31 15:31:42,357 - DEBUG - dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=1221)
2025-01-31 15:31:42,357 - DEBUG - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$const14.6', '$16load_global.7']
2025-01-31 15:31:42,357 - DEBUG - dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=1221)
2025-01-31 15:31:42,357 - DEBUG - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$const14.6', '$16load_global.7', '$post_max18.8']
2025-01-31 15:31:42,357 - DEBUG - dispatch pc=22, inst=LOAD_ATTR(arg=3, lineno=1221)
2025-01-31 15:31:42,357 - DEBUG - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$const14.6', '$16load_global.7', '$post_max18.8', '$x20.9']
2025-01-31 15:31:42,357 - DEBUG - dispatch pc=24, inst=LOAD_CONST(arg=1, lineno=1221)
2025-01-31 15:31:42,357 - DEBUG - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$const14.6', '$16load_global.7', '$post_max18.8', '$22load_attr.10']
2025-01-31 15:31:42,357 - DEBUG - dispatch pc=26, inst=BINARY_SUBSCR(arg=None, lineno=1221)
2025-01-31 15:31:42,357 - DEBUG - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$const14.6', '$16load_global.7', '$post_max18.8', '$22load_attr.10', '$const24.11']
2025-01-31 15:31:42,357 - DEBUG - dispatch pc=28, inst=CALL_FUNCTION(arg=2, lineno=1221)
2025-01-31 15:31:42,357 - DEBUG - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$const14.6', '$16load_global.7', '$post_max18.8', '$26binary_subscr.12']
2025-01-31 15:31:42,357 - DEBUG - dispatch pc=30, inst=BUILD_SLICE(arg=2, lineno=1221)
2025-01-31 15:31:42,357 - DEBUG - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$const14.6', '$28call_function.13']
2025-01-31 15:31:42,357 - DEBUG - dispatch pc=32, inst=BINARY_SUBSCR(arg=None, lineno=1221)
2025-01-31 15:31:42,357 - DEBUG - stack ['$6binary_subscr.2', '$10load_method.4', '$x12.5', '$30build_slice.15']
2025-01-31 15:31:42,357 - DEBUG - dispatch pc=34, inst=CALL_METHOD(arg=1, lineno=1221)
2025-01-31 15:31:42,357 - DEBUG - stack ['$6binary_subscr.2', '$10load_method.4', '$32binary_subscr.16']
2025-01-31 15:31:42,357 - DEBUG - dispatch pc=36, inst=COMPARE_OP(arg=5, lineno=1221)
2025-01-31 15:31:42,357 - DEBUG - stack ['$6binary_subscr.2', '$34call_method.17']
2025-01-31 15:31:42,357 - DEBUG - dispatch pc=38, inst=LOAD_FAST(arg=7, lineno=1221)
2025-01-31 15:31:42,357 - DEBUG - stack ['$36compare_op.18']
2025-01-31 15:31:42,357 - DEBUG - dispatch pc=40, inst=LOAD_CONST(arg=1, lineno=1221)
2025-01-31 15:31:42,357 - DEBUG - stack ['$36compare_op.18', '$peaks38.19']
2025-01-31 15:31:42,357 - DEBUG - dispatch pc=42, inst=STORE_SUBSCR(arg=None, lineno=1221)
2025-01-31 15:31:42,358 - DEBUG - stack ['$36compare_op.18', '$peaks38.19', '$const40.20']
2025-01-31 15:31:42,358 - DEBUG - dispatch pc=44, inst=LOAD_FAST(arg=7, lineno=1222)
2025-01-31 15:31:42,358 - DEBUG - stack []
2025-01-31 15:31:42,358 - DEBUG - dispatch pc=46, inst=LOAD_CONST(arg=1, lineno=1222)
2025-01-31 15:31:42,358 - DEBUG - stack ['$peaks44.21']
2025-01-31 15:31:42,358 - DEBUG - dispatch pc=48, inst=DUP_TOP_TWO(arg=None, lineno=1222)
2025-01-31 15:31:42,358 - DEBUG - stack ['$peaks44.21', '$const46.22']
2025-01-31 15:31:42,358 - DEBUG - dispatch pc=50, inst=BINARY_SUBSCR(arg=None, lineno=1222)
2025-01-31 15:31:42,358 - DEBUG - stack ['$peaks44.21', '$const46.22', '$48dup_top_two.23', '$48dup_top_two.24']
2025-01-31 15:31:42,358 - DEBUG - dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=1222)
2025-01-31 15:31:42,358 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25']
2025-01-31 15:31:42,358 - DEBUG - dispatch pc=54, inst=LOAD_CONST(arg=1, lineno=1222)
2025-01-31 15:31:42,358 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$x52.26']
2025-01-31 15:31:42,358 - DEBUG - dispatch pc=56, inst=BINARY_SUBSCR(arg=None, lineno=1222)
2025-01-31 15:31:42,358 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$x52.26', '$const54.27']
2025-01-31 15:31:42,358 - DEBUG - dispatch pc=58, inst=LOAD_GLOBAL(arg=0, lineno=1222)
2025-01-31 15:31:42,358 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28']
2025-01-31 15:31:42,358 - DEBUG - dispatch pc=60, inst=LOAD_METHOD(arg=4, lineno=1222)
2025-01-31 15:31:42,358 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$58load_global.29']
2025-01-31 15:31:42,358 - DEBUG - dispatch pc=62, inst=LOAD_FAST(arg=0, lineno=1222)
2025-01-31 15:31:42,358 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30']
2025-01-31 15:31:42,358 - DEBUG - dispatch pc=64, inst=LOAD_CONST(arg=2, lineno=1222)
2025-01-31 15:31:42,358 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31']
2025-01-31 15:31:42,358 - DEBUG - dispatch pc=66, inst=LOAD_GLOBAL(arg=2, lineno=1222)
2025-01-31 15:31:42,358 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$const64.32']
2025-01-31 15:31:42,358 - DEBUG - dispatch pc=68, inst=LOAD_FAST(arg=4, lineno=1222)
2025-01-31 15:31:42,358 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$const64.32', '$66load_global.33']
2025-01-31 15:31:42,358 - DEBUG - dispatch pc=70, inst=LOAD_FAST(arg=0, lineno=1222)
2025-01-31 15:31:42,359 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$const64.32', '$66load_global.33', '$post_avg68.34']
2025-01-31 15:31:42,359 - DEBUG - dispatch pc=72, inst=LOAD_ATTR(arg=3, lineno=1222)
2025-01-31 15:31:42,359 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$const64.32', '$66load_global.33', '$post_avg68.34', '$x70.35']
2025-01-31 15:31:42,359 - DEBUG - dispatch pc=74, inst=LOAD_CONST(arg=1, lineno=1222)
2025-01-31 15:31:42,359 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$const64.32', '$66load_global.33', '$post_avg68.34', '$72load_attr.36']
2025-01-31 15:31:42,359 - DEBUG - dispatch pc=76, inst=BINARY_SUBSCR(arg=None, lineno=1222)
2025-01-31 15:31:42,359 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$const64.32', '$66load_global.33', '$post_avg68.34', '$72load_attr.36', '$const74.37']
2025-01-31 15:31:42,359 - DEBUG - dispatch pc=78, inst=CALL_FUNCTION(arg=2, lineno=1222)
2025-01-31 15:31:42,359 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$const64.32', '$66load_global.33', '$post_avg68.34', '$76binary_subscr.38']
2025-01-31 15:31:42,359 - DEBUG - dispatch pc=80, inst=BUILD_SLICE(arg=2, lineno=1222)
2025-01-31 15:31:42,359 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$const64.32', '$78call_function.39']
2025-01-31 15:31:42,359 - DEBUG - dispatch pc=82, inst=BINARY_SUBSCR(arg=None, lineno=1222)
2025-01-31 15:31:42,359 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$x62.31', '$80build_slice.41']
2025-01-31 15:31:42,359 - DEBUG - dispatch pc=84, inst=CALL_METHOD(arg=1, lineno=1222)
2025-01-31 15:31:42,359 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$60load_method.30', '$82binary_subscr.42']
2025-01-31 15:31:42,359 - DEBUG - dispatch pc=86, inst=LOAD_FAST(arg=5, lineno=1222)
2025-01-31 15:31:42,359 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$84call_method.43']
2025-01-31 15:31:42,359 - DEBUG - dispatch pc=88, inst=BINARY_ADD(arg=None, lineno=1222)
2025-01-31 15:31:42,359 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$84call_method.43', '$delta86.44']
2025-01-31 15:31:42,359 - DEBUG - dispatch pc=90, inst=COMPARE_OP(arg=5, lineno=1222)
2025-01-31 15:31:42,359 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$56binary_subscr.28', '$88binary_add.45']
2025-01-31 15:31:42,359 - DEBUG - dispatch pc=92, inst=INPLACE_AND(arg=None, lineno=1222)
2025-01-31 15:31:42,359 - DEBUG - stack ['$peaks44.21', '$const46.22', '$50binary_subscr.25', '$90compare_op.46']
2025-01-31 15:31:42,359 - DEBUG - dispatch pc=94, inst=ROT_THREE(arg=None, lineno=1222)
2025-01-31 15:31:42,359 - DEBUG - stack ['$peaks44.21', '$const46.22', '$92inplace_and.47']
2025-01-31 15:31:42,359 - DEBUG - dispatch pc=96, inst=STORE_SUBSCR(arg=None, lineno=1222)
2025-01-31 15:31:42,359 - DEBUG - stack ['$92inplace_and.47', '$peaks44.21', '$const46.22']
2025-01-31 15:31:42,359 - DEBUG - dispatch pc=98, inst=LOAD_FAST(arg=7, lineno=1224)
2025-01-31 15:31:42,359 - DEBUG - stack []
2025-01-31 15:31:42,360 - DEBUG - dispatch pc=100, inst=LOAD_CONST(arg=1, lineno=1224)
2025-01-31 15:31:42,360 - DEBUG - stack ['$peaks98.48']
2025-01-31 15:31:42,360 - DEBUG - dispatch pc=102, inst=BINARY_SUBSCR(arg=None, lineno=1224)
2025-01-31 15:31:42,360 - DEBUG - stack ['$peaks98.48', '$const100.49']
2025-01-31 15:31:42,360 - DEBUG - dispatch pc=104, inst=POP_JUMP_IF_FALSE(arg=59, lineno=1224)
2025-01-31 15:31:42,360 - DEBUG - stack ['$102binary_subscr.50']
2025-01-31 15:31:42,360 - DEBUG - end state. edges=[Edge(pc=106, stack=(), blockstack=(), npush=0), Edge(pc=116, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:42,360 - DEBUG - pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=116 nstack_initial=0)])
2025-01-31 15:31:42,360 - DEBUG - stack: []
2025-01-31 15:31:42,360 - DEBUG - state.pc_initial: State(pc_initial=106 nstack_initial=0)
2025-01-31 15:31:42,360 - DEBUG - dispatch pc=106, inst=LOAD_FAST(arg=6, lineno=1225)
2025-01-31 15:31:42,360 - DEBUG - stack []
2025-01-31 15:31:42,360 - DEBUG - dispatch pc=108, inst=LOAD_CONST(arg=3, lineno=1225)
2025-01-31 15:31:42,360 - DEBUG - stack ['$wait106.0']
2025-01-31 15:31:42,360 - DEBUG - dispatch pc=110, inst=BINARY_ADD(arg=None, lineno=1225)
2025-01-31 15:31:42,360 - DEBUG - stack ['$wait106.0', '$const108.1']
2025-01-31 15:31:42,360 - DEBUG - dispatch pc=112, inst=STORE_FAST(arg=8, lineno=1225)
2025-01-31 15:31:42,360 - DEBUG - stack ['$110binary_add.2']
2025-01-31 15:31:42,360 - DEBUG - dispatch pc=114, inst=JUMP_FORWARD(arg=2, lineno=1225)
2025-01-31 15:31:42,360 - DEBUG - stack []
2025-01-31 15:31:42,360 - DEBUG - end state. edges=[Edge(pc=120, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:42,360 - DEBUG - pending: deque([State(pc_initial=116 nstack_initial=0), State(pc_initial=120 nstack_initial=0)])
2025-01-31 15:31:42,360 - DEBUG - stack: []
2025-01-31 15:31:42,360 - DEBUG - state.pc_initial: State(pc_initial=116 nstack_initial=0)
2025-01-31 15:31:42,360 - DEBUG - dispatch pc=116, inst=LOAD_CONST(arg=3, lineno=1227)
2025-01-31 15:31:42,360 - DEBUG - stack []
2025-01-31 15:31:42,360 - DEBUG - dispatch pc=118, inst=STORE_FAST(arg=8, lineno=1227)
2025-01-31 15:31:42,360 - DEBUG - stack ['$const116.0']
2025-01-31 15:31:42,361 - DEBUG - end state. edges=[Edge(pc=120, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:42,361 - DEBUG - pending: deque([State(pc_initial=120 nstack_initial=0), State(pc_initial=120 nstack_initial=0)])
2025-01-31 15:31:42,361 - DEBUG - stack: []
2025-01-31 15:31:42,361 - DEBUG - state.pc_initial: State(pc_initial=120 nstack_initial=0)
2025-01-31 15:31:42,361 - DEBUG - dispatch pc=120, inst=LOAD_FAST(arg=8, lineno=1229)
2025-01-31 15:31:42,361 - DEBUG - stack []
2025-01-31 15:31:42,361 - DEBUG - dispatch pc=122, inst=LOAD_FAST(arg=0, lineno=1229)
2025-01-31 15:31:42,361 - DEBUG - stack ['$n120.0']
2025-01-31 15:31:42,361 - DEBUG - dispatch pc=124, inst=LOAD_ATTR(arg=3, lineno=1229)
2025-01-31 15:31:42,361 - DEBUG - stack ['$n120.0', '$x122.1']
2025-01-31 15:31:42,361 - DEBUG - dispatch pc=126, inst=LOAD_CONST(arg=1, lineno=1229)
2025-01-31 15:31:42,361 - DEBUG - stack ['$n120.0', '$124load_attr.2']
2025-01-31 15:31:42,361 - DEBUG - dispatch pc=128, inst=BINARY_SUBSCR(arg=None, lineno=1229)
2025-01-31 15:31:42,361 - DEBUG - stack ['$n120.0', '$124load_attr.2', '$const126.3']
2025-01-31 15:31:42,361 - DEBUG - dispatch pc=130, inst=COMPARE_OP(arg=0, lineno=1229)
2025-01-31 15:31:42,361 - DEBUG - stack ['$n120.0', '$128binary_subscr.4']
2025-01-31 15:31:42,361 - DEBUG - dispatch pc=132, inst=POP_JUMP_IF_FALSE(arg=167, lineno=1229)
2025-01-31 15:31:42,361 - DEBUG - stack ['$130compare_op.5']
2025-01-31 15:31:42,361 - DEBUG - end state. edges=[Edge(pc=134, stack=(), blockstack=(), npush=0), Edge(pc=332, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:42,361 - DEBUG - pending: deque([State(pc_initial=120 nstack_initial=0), State(pc_initial=134 nstack_initial=0), State(pc_initial=332 nstack_initial=0)])
2025-01-31 15:31:42,361 - DEBUG - pending: deque([State(pc_initial=134 nstack_initial=0), State(pc_initial=332 nstack_initial=0)])
2025-01-31 15:31:42,361 - DEBUG - stack: []
2025-01-31 15:31:42,361 - DEBUG - state.pc_initial: State(pc_initial=134 nstack_initial=0)
2025-01-31 15:31:42,361 - DEBUG - dispatch pc=134, inst=LOAD_GLOBAL(arg=0, lineno=1230)
2025-01-31 15:31:42,361 - DEBUG - stack []
2025-01-31 15:31:42,361 - DEBUG - dispatch pc=136, inst=LOAD_METHOD(arg=1, lineno=1230)
2025-01-31 15:31:42,361 - DEBUG - stack ['$134load_global.0']
2025-01-31 15:31:42,361 - DEBUG - dispatch pc=138, inst=LOAD_FAST(arg=0, lineno=1230)
2025-01-31 15:31:42,361 - DEBUG - stack ['$136load_method.1']
2025-01-31 15:31:42,362 - DEBUG - dispatch pc=140, inst=LOAD_GLOBAL(arg=1, lineno=1230)
2025-01-31 15:31:42,362 - DEBUG - stack ['$136load_method.1', '$x138.2']
2025-01-31 15:31:42,362 - DEBUG - dispatch pc=142, inst=LOAD_CONST(arg=1, lineno=1230)
2025-01-31 15:31:42,362 - DEBUG - stack ['$136load_method.1', '$x138.2', '$140load_global.3']
2025-01-31 15:31:42,362 - DEBUG - dispatch pc=144, inst=LOAD_FAST(arg=8, lineno=1230)
2025-01-31 15:31:42,362 - DEBUG - stack ['$136load_method.1', '$x138.2', '$140load_global.3', '$const142.4']
2025-01-31 15:31:42,362 - DEBUG - dispatch pc=146, inst=LOAD_FAST(arg=1, lineno=1230)
2025-01-31 15:31:42,362 - DEBUG - stack ['$136load_method.1', '$x138.2', '$140load_global.3', '$const142.4', '$n144.5']
2025-01-31 15:31:42,362 - DEBUG - dispatch pc=148, inst=BINARY_SUBTRACT(arg=None, lineno=1230)
2025-01-31 15:31:42,362 - DEBUG - stack ['$136load_method.1', '$x138.2', '$140load_global.3', '$const142.4', '$n144.5', '$pre_max146.6']
2025-01-31 15:31:42,362 - DEBUG - dispatch pc=150, inst=CALL_FUNCTION(arg=2, lineno=1230)
2025-01-31 15:31:42,362 - DEBUG - stack ['$136load_method.1', '$x138.2', '$140load_global.3', '$const142.4', '$148binary_subtract.7']
2025-01-31 15:31:42,362 - DEBUG - dispatch pc=152, inst=LOAD_GLOBAL(arg=2, lineno=1230)
2025-01-31 15:31:42,362 - DEBUG - stack ['$136load_method.1', '$x138.2', '$150call_function.8']
2025-01-31 15:31:42,362 - DEBUG - dispatch pc=154, inst=LOAD_FAST(arg=8, lineno=1230)
2025-01-31 15:31:42,362 - DEBUG - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$152load_global.9']
2025-01-31 15:31:42,362 - DEBUG - dispatch pc=156, inst=LOAD_FAST(arg=2, lineno=1230)
2025-01-31 15:31:42,362 - DEBUG - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$152load_global.9', '$n154.10']
2025-01-31 15:31:42,362 - DEBUG - dispatch pc=158, inst=BINARY_ADD(arg=None, lineno=1230)
2025-01-31 15:31:42,362 - DEBUG - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$152load_global.9', '$n154.10', '$post_max156.11']
2025-01-31 15:31:42,362 - DEBUG - dispatch pc=160, inst=LOAD_FAST(arg=0, lineno=1230)
2025-01-31 15:31:42,362 - DEBUG - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$152load_global.9', '$158binary_add.12']
2025-01-31 15:31:42,362 - DEBUG - dispatch pc=162, inst=LOAD_ATTR(arg=3, lineno=1230)
2025-01-31 15:31:42,362 - DEBUG - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$152load_global.9', '$158binary_add.12', '$x160.13']
2025-01-31 15:31:42,362 - DEBUG - dispatch pc=164, inst=LOAD_CONST(arg=1, lineno=1230)
2025-01-31 15:31:42,362 - DEBUG - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$152load_global.9', '$158binary_add.12', '$162load_attr.14']
2025-01-31 15:31:42,362 - DEBUG - dispatch pc=166, inst=BINARY_SUBSCR(arg=None, lineno=1230)
2025-01-31 15:31:42,362 - DEBUG - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$152load_global.9', '$158binary_add.12', '$162load_attr.14', '$const164.15']
2025-01-31 15:31:42,363 - DEBUG - dispatch pc=168, inst=CALL_FUNCTION(arg=2, lineno=1230)
2025-01-31 15:31:42,363 - DEBUG - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$152load_global.9', '$158binary_add.12', '$166binary_subscr.16']
2025-01-31 15:31:42,363 - DEBUG - dispatch pc=170, inst=BUILD_SLICE(arg=2, lineno=1230)
2025-01-31 15:31:42,363 - DEBUG - stack ['$136load_method.1', '$x138.2', '$150call_function.8', '$168call_function.17']
2025-01-31 15:31:42,363 - DEBUG - dispatch pc=172, inst=BINARY_SUBSCR(arg=None, lineno=1230)
2025-01-31 15:31:42,363 - DEBUG - stack ['$136load_method.1', '$x138.2', '$170build_slice.19']
2025-01-31 15:31:42,363 - DEBUG - dispatch pc=174, inst=CALL_METHOD(arg=1, lineno=1230)
2025-01-31 15:31:42,363 - DEBUG - stack ['$136load_method.1', '$172binary_subscr.20']
2025-01-31 15:31:42,363 - DEBUG - dispatch pc=176, inst=STORE_FAST(arg=9, lineno=1230)
2025-01-31 15:31:42,363 - DEBUG - stack ['$174call_method.21']
2025-01-31 15:31:42,363 - DEBUG - dispatch pc=178, inst=LOAD_FAST(arg=0, lineno=1233)
2025-01-31 15:31:42,363 - DEBUG - stack []
2025-01-31 15:31:42,363 - DEBUG - dispatch pc=180, inst=LOAD_FAST(arg=8, lineno=1233)
2025-01-31 15:31:42,363 - DEBUG - stack ['$x178.22']
2025-01-31 15:31:42,363 - DEBUG - dispatch pc=182, inst=BINARY_SUBSCR(arg=None, lineno=1233)
2025-01-31 15:31:42,363 - DEBUG - stack ['$x178.22', '$n180.23']
2025-01-31 15:31:42,363 - DEBUG - dispatch pc=184, inst=LOAD_FAST(arg=9, lineno=1233)
2025-01-31 15:31:42,363 - DEBUG - stack ['$182binary_subscr.24']
2025-01-31 15:31:42,363 - DEBUG - dispatch pc=186, inst=COMPARE_OP(arg=2, lineno=1233)
2025-01-31 15:31:42,363 - DEBUG - stack ['$182binary_subscr.24', '$maxn184.25']
2025-01-31 15:31:42,363 - DEBUG - dispatch pc=188, inst=LOAD_FAST(arg=7, lineno=1233)
2025-01-31 15:31:42,363 - DEBUG - stack ['$186compare_op.26']
2025-01-31 15:31:42,363 - DEBUG - dispatch pc=190, inst=LOAD_FAST(arg=8, lineno=1233)
2025-01-31 15:31:42,363 - DEBUG - stack ['$186compare_op.26', '$peaks188.27']
2025-01-31 15:31:42,363 - DEBUG - dispatch pc=192, inst=STORE_SUBSCR(arg=None, lineno=1233)
2025-01-31 15:31:42,363 - DEBUG - stack ['$186compare_op.26', '$peaks188.27', '$n190.28']
2025-01-31 15:31:42,363 - DEBUG - dispatch pc=194, inst=LOAD_FAST(arg=7, lineno=1235)
2025-01-31 15:31:42,363 - DEBUG - stack []
2025-01-31 15:31:42,363 - DEBUG - dispatch pc=196, inst=LOAD_FAST(arg=8, lineno=1235)
2025-01-31 15:31:42,364 - DEBUG - stack ['$peaks194.29']
2025-01-31 15:31:42,364 - DEBUG - dispatch pc=198, inst=BINARY_SUBSCR(arg=None, lineno=1235)
2025-01-31 15:31:42,364 - DEBUG - stack ['$peaks194.29', '$n196.30']
2025-01-31 15:31:42,364 - DEBUG - dispatch pc=200, inst=POP_JUMP_IF_TRUE(arg=107, lineno=1235)
2025-01-31 15:31:42,364 - DEBUG - stack ['$198binary_subscr.31']
2025-01-31 15:31:42,364 - DEBUG - end state. edges=[Edge(pc=202, stack=(), blockstack=(), npush=0), Edge(pc=212, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:42,364 - DEBUG - pending: deque([State(pc_initial=332 nstack_initial=0), State(pc_initial=202 nstack_initial=0), State(pc_initial=212 nstack_initial=0)])
2025-01-31 15:31:42,364 - DEBUG - stack: []
2025-01-31 15:31:42,364 - DEBUG - state.pc_initial: State(pc_initial=332 nstack_initial=0)
2025-01-31 15:31:42,364 - DEBUG - dispatch pc=332, inst=LOAD_CONST(arg=2, lineno=1229)
2025-01-31 15:31:42,364 - DEBUG - stack []
2025-01-31 15:31:42,364 - DEBUG - dispatch pc=334, inst=RETURN_VALUE(arg=None, lineno=1229)
2025-01-31 15:31:42,364 - DEBUG - stack ['$const332.0']
2025-01-31 15:31:42,364 - DEBUG - end state. edges=[]
2025-01-31 15:31:42,364 - DEBUG - pending: deque([State(pc_initial=202 nstack_initial=0), State(pc_initial=212 nstack_initial=0)])
2025-01-31 15:31:42,364 - DEBUG - stack: []
2025-01-31 15:31:42,364 - DEBUG - state.pc_initial: State(pc_initial=202 nstack_initial=0)
2025-01-31 15:31:42,364 - DEBUG - dispatch pc=202, inst=LOAD_FAST(arg=8, lineno=1236)
2025-01-31 15:31:42,364 - DEBUG - stack []
2025-01-31 15:31:42,364 - DEBUG - dispatch pc=204, inst=LOAD_CONST(arg=3, lineno=1236)
2025-01-31 15:31:42,364 - DEBUG - stack ['$n202.0']
2025-01-31 15:31:42,364 - DEBUG - dispatch pc=206, inst=INPLACE_ADD(arg=None, lineno=1236)
2025-01-31 15:31:42,364 - DEBUG - stack ['$n202.0', '$const204.1']
2025-01-31 15:31:42,364 - DEBUG - dispatch pc=208, inst=STORE_FAST(arg=8, lineno=1236)
2025-01-31 15:31:42,364 - DEBUG - stack ['$206inplace_add.2']
2025-01-31 15:31:42,364 - DEBUG - dispatch pc=210, inst=JUMP_ABSOLUTE(arg=61, lineno=1237)
2025-01-31 15:31:42,364 - DEBUG - stack []
2025-01-31 15:31:42,364 - DEBUG - end state. edges=[Edge(pc=120, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:42,364 - DEBUG - pending: deque([State(pc_initial=212 nstack_initial=0), State(pc_initial=120 nstack_initial=0)])
2025-01-31 15:31:42,365 - DEBUG - stack: []
2025-01-31 15:31:42,365 - DEBUG - state.pc_initial: State(pc_initial=212 nstack_initial=0)
2025-01-31 15:31:42,365 - DEBUG - dispatch pc=212, inst=LOAD_GLOBAL(arg=0, lineno=1239)
2025-01-31 15:31:42,365 - DEBUG - stack []
2025-01-31 15:31:42,365 - DEBUG - dispatch pc=214, inst=LOAD_METHOD(arg=4, lineno=1239)
2025-01-31 15:31:42,365 - DEBUG - stack ['$212load_global.0']
2025-01-31 15:31:42,365 - DEBUG - dispatch pc=216, inst=LOAD_FAST(arg=0, lineno=1239)
2025-01-31 15:31:42,365 - DEBUG - stack ['$214load_method.1']
2025-01-31 15:31:42,365 - DEBUG - dispatch pc=218, inst=LOAD_GLOBAL(arg=1, lineno=1239)
2025-01-31 15:31:42,365 - DEBUG - stack ['$214load_method.1', '$x216.2']
2025-01-31 15:31:42,365 - DEBUG - dispatch pc=220, inst=LOAD_CONST(arg=1, lineno=1239)
2025-01-31 15:31:42,365 - DEBUG - stack ['$214load_method.1', '$x216.2', '$218load_global.3']
2025-01-31 15:31:42,365 - DEBUG - dispatch pc=222, inst=LOAD_FAST(arg=8, lineno=1239)
2025-01-31 15:31:42,365 - DEBUG - stack ['$214load_method.1', '$x216.2', '$218load_global.3', '$const220.4']
2025-01-31 15:31:42,365 - DEBUG - dispatch pc=224, inst=LOAD_FAST(arg=3, lineno=1239)
2025-01-31 15:31:42,365 - DEBUG - stack ['$214load_method.1', '$x216.2', '$218load_global.3', '$const220.4', '$n222.5']
2025-01-31 15:31:42,365 - DEBUG - dispatch pc=226, inst=BINARY_SUBTRACT(arg=None, lineno=1239)
2025-01-31 15:31:42,365 - DEBUG - stack ['$214load_method.1', '$x216.2', '$218load_global.3', '$const220.4', '$n222.5', '$pre_avg224.6']
2025-01-31 15:31:42,365 - DEBUG - dispatch pc=228, inst=CALL_FUNCTION(arg=2, lineno=1239)
2025-01-31 15:31:42,365 - DEBUG - stack ['$214load_method.1', '$x216.2', '$218load_global.3', '$const220.4', '$226binary_subtract.7']
2025-01-31 15:31:42,365 - DEBUG - dispatch pc=230, inst=LOAD_GLOBAL(arg=2, lineno=1239)
2025-01-31 15:31:42,365 - DEBUG - stack ['$214load_method.1', '$x216.2', '$228call_function.8']
2025-01-31 15:31:42,365 - DEBUG - dispatch pc=232, inst=LOAD_FAST(arg=8, lineno=1239)
2025-01-31 15:31:42,365 - DEBUG - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$230load_global.9']
2025-01-31 15:31:42,365 - DEBUG - dispatch pc=234, inst=LOAD_FAST(arg=4, lineno=1239)
2025-01-31 15:31:42,365 - DEBUG - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$230load_global.9', '$n232.10']
2025-01-31 15:31:42,365 - DEBUG - dispatch pc=236, inst=BINARY_ADD(arg=None, lineno=1239)
2025-01-31 15:31:42,365 - DEBUG - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$230load_global.9', '$n232.10', '$post_avg234.11']
2025-01-31 15:31:42,365 - DEBUG - dispatch pc=238, inst=LOAD_FAST(arg=0, lineno=1239)
2025-01-31 15:31:42,366 - DEBUG - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$230load_global.9', '$236binary_add.12']
2025-01-31 15:31:42,366 - DEBUG - dispatch pc=240, inst=LOAD_ATTR(arg=3, lineno=1239)
2025-01-31 15:31:42,366 - DEBUG - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$230load_global.9', '$236binary_add.12', '$x238.13']
2025-01-31 15:31:42,366 - DEBUG - dispatch pc=242, inst=LOAD_CONST(arg=1, lineno=1239)
2025-01-31 15:31:42,366 - DEBUG - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$230load_global.9', '$236binary_add.12', '$240load_attr.14']
2025-01-31 15:31:42,366 - DEBUG - dispatch pc=244, inst=BINARY_SUBSCR(arg=None, lineno=1239)
2025-01-31 15:31:42,366 - DEBUG - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$230load_global.9', '$236binary_add.12', '$240load_attr.14', '$const242.15']
2025-01-31 15:31:42,366 - DEBUG - dispatch pc=246, inst=CALL_FUNCTION(arg=2, lineno=1239)
2025-01-31 15:31:42,366 - DEBUG - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$230load_global.9', '$236binary_add.12', '$244binary_subscr.16']
2025-01-31 15:31:42,366 - DEBUG - dispatch pc=248, inst=BUILD_SLICE(arg=2, lineno=1239)
2025-01-31 15:31:42,366 - DEBUG - stack ['$214load_method.1', '$x216.2', '$228call_function.8', '$246call_function.17']
2025-01-31 15:31:42,366 - DEBUG - dispatch pc=250, inst=BINARY_SUBSCR(arg=None, lineno=1239)
2025-01-31 15:31:42,366 - DEBUG - stack ['$214load_method.1', '$x216.2', '$248build_slice.19']
2025-01-31 15:31:42,366 - DEBUG - dispatch pc=252, inst=CALL_METHOD(arg=1, lineno=1239)
2025-01-31 15:31:42,366 - DEBUG - stack ['$214load_method.1', '$250binary_subscr.20']
2025-01-31 15:31:42,366 - DEBUG - dispatch pc=254, inst=STORE_FAST(arg=10, lineno=1239)
2025-01-31 15:31:42,366 - DEBUG - stack ['$252call_method.21']
2025-01-31 15:31:42,366 - DEBUG - dispatch pc=256, inst=LOAD_FAST(arg=7, lineno=1240)
2025-01-31 15:31:42,366 - DEBUG - stack []
2025-01-31 15:31:42,366 - DEBUG - dispatch pc=258, inst=LOAD_FAST(arg=8, lineno=1240)
2025-01-31 15:31:42,366 - DEBUG - stack ['$peaks256.22']
2025-01-31 15:31:42,366 - DEBUG - dispatch pc=260, inst=DUP_TOP_TWO(arg=None, lineno=1240)
2025-01-31 15:31:42,366 - DEBUG - stack ['$peaks256.22', '$n258.23']
2025-01-31 15:31:42,366 - DEBUG - dispatch pc=262, inst=BINARY_SUBSCR(arg=None, lineno=1240)
2025-01-31 15:31:42,366 - DEBUG - stack ['$peaks256.22', '$n258.23', '$260dup_top_two.24', '$260dup_top_two.25']
2025-01-31 15:31:42,366 - DEBUG - dispatch pc=264, inst=LOAD_FAST(arg=0, lineno=1240)
2025-01-31 15:31:42,366 - DEBUG - stack ['$peaks256.22', '$n258.23', '$262binary_subscr.26']
2025-01-31 15:31:42,366 - DEBUG - dispatch pc=266, inst=LOAD_FAST(arg=8, lineno=1240)
2025-01-31 15:31:42,367 - DEBUG - stack ['$peaks256.22', '$n258.23', '$262binary_subscr.26', '$x264.27']
2025-01-31 15:31:42,367 - DEBUG - dispatch pc=268, inst=BINARY_SUBSCR(arg=None, lineno=1240)
2025-01-31 15:31:42,367 - DEBUG - stack ['$peaks256.22', '$n258.23', '$262binary_subscr.26', '$x264.27', '$n266.28']
2025-01-31 15:31:42,367 - DEBUG - dispatch pc=270, inst=LOAD_FAST(arg=10, lineno=1240)
2025-01-31 15:31:42,367 - DEBUG - stack ['$peaks256.22', '$n258.23', '$262binary_subscr.26', '$268binary_subscr.29']
2025-01-31 15:31:42,367 - DEBUG - dispatch pc=272, inst=LOAD_FAST(arg=5, lineno=1240)
2025-01-31 15:31:42,367 - DEBUG - stack ['$peaks256.22', '$n258.23', '$262binary_subscr.26', '$268binary_subscr.29', '$avgn270.30']
2025-01-31 15:31:42,367 - DEBUG - dispatch pc=274, inst=BINARY_ADD(arg=None, lineno=1240)
2025-01-31 15:31:42,367 - DEBUG - stack ['$peaks256.22', '$n258.23', '$262binary_subscr.26', '$268binary_subscr.29', '$avgn270.30', '$delta272.31']
2025-01-31 15:31:42,367 - DEBUG - dispatch pc=276, inst=COMPARE_OP(arg=5, lineno=1240)
2025-01-31 15:31:42,367 - DEBUG - stack ['$peaks256.22', '$n258.23', '$262binary_subscr.26', '$268binary_subscr.29', '$274binary_add.32']
2025-01-31 15:31:42,367 - DEBUG - dispatch pc=278, inst=INPLACE_AND(arg=None, lineno=1240)
2025-01-31 15:31:42,367 - DEBUG - stack ['$peaks256.22', '$n258.23', '$262binary_subscr.26', '$276compare_op.33']
2025-01-31 15:31:42,367 - DEBUG - dispatch pc=280, inst=ROT_THREE(arg=None, lineno=1240)
2025-01-31 15:31:42,367 - DEBUG - stack ['$peaks256.22', '$n258.23', '$278inplace_and.34']
2025-01-31 15:31:42,367 - DEBUG - dispatch pc=282, inst=STORE_SUBSCR(arg=None, lineno=1240)
2025-01-31 15:31:42,367 - DEBUG - stack ['$278inplace_and.34', '$peaks256.22', '$n258.23']
2025-01-31 15:31:42,367 - DEBUG - dispatch pc=284, inst=LOAD_FAST(arg=7, lineno=1242)
2025-01-31 15:31:42,367 - DEBUG - stack []
2025-01-31 15:31:42,367 - DEBUG - dispatch pc=286, inst=LOAD_FAST(arg=8, lineno=1242)
2025-01-31 15:31:42,367 - DEBUG - stack ['$peaks284.35']
2025-01-31 15:31:42,367 - DEBUG - dispatch pc=288, inst=BINARY_SUBSCR(arg=None, lineno=1242)
2025-01-31 15:31:42,367 - DEBUG - stack ['$peaks284.35', '$n286.36']
2025-01-31 15:31:42,367 - DEBUG - dispatch pc=290, inst=POP_JUMP_IF_TRUE(arg=152, lineno=1242)
2025-01-31 15:31:42,367 - DEBUG - stack ['$288binary_subscr.37']
2025-01-31 15:31:42,367 - DEBUG - end state. edges=[Edge(pc=292, stack=(), blockstack=(), npush=0), Edge(pc=302, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:42,367 - DEBUG - pending: deque([State(pc_initial=120 nstack_initial=0), State(pc_initial=292 nstack_initial=0), State(pc_initial=302 nstack_initial=0)])
2025-01-31 15:31:42,367 - DEBUG - pending: deque([State(pc_initial=292 nstack_initial=0), State(pc_initial=302 nstack_initial=0)])
2025-01-31 15:31:42,368 - DEBUG - stack: []
2025-01-31 15:31:42,368 - DEBUG - state.pc_initial: State(pc_initial=292 nstack_initial=0)
2025-01-31 15:31:42,368 - DEBUG - dispatch pc=292, inst=LOAD_FAST(arg=8, lineno=1243)
2025-01-31 15:31:42,368 - DEBUG - stack []
2025-01-31 15:31:42,368 - DEBUG - dispatch pc=294, inst=LOAD_CONST(arg=3, lineno=1243)
2025-01-31 15:31:42,368 - DEBUG - stack ['$n292.0']
2025-01-31 15:31:42,368 - DEBUG - dispatch pc=296, inst=INPLACE_ADD(arg=None, lineno=1243)
2025-01-31 15:31:42,368 - DEBUG - stack ['$n292.0', '$const294.1']
2025-01-31 15:31:42,368 - DEBUG - dispatch pc=298, inst=STORE_FAST(arg=8, lineno=1243)
2025-01-31 15:31:42,368 - DEBUG - stack ['$296inplace_add.2']
2025-01-31 15:31:42,368 - DEBUG - dispatch pc=300, inst=JUMP_ABSOLUTE(arg=61, lineno=1244)
2025-01-31 15:31:42,368 - DEBUG - stack []
2025-01-31 15:31:42,368 - DEBUG - end state. edges=[Edge(pc=120, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:42,368 - DEBUG - pending: deque([State(pc_initial=302 nstack_initial=0), State(pc_initial=120 nstack_initial=0)])
2025-01-31 15:31:42,368 - DEBUG - stack: []
2025-01-31 15:31:42,368 - DEBUG - state.pc_initial: State(pc_initial=302 nstack_initial=0)
2025-01-31 15:31:42,368 - DEBUG - dispatch pc=302, inst=LOAD_FAST(arg=8, lineno=1247)
2025-01-31 15:31:42,368 - DEBUG - stack []
2025-01-31 15:31:42,368 - DEBUG - dispatch pc=304, inst=LOAD_FAST(arg=6, lineno=1247)
2025-01-31 15:31:42,368 - DEBUG - stack ['$n302.0']
2025-01-31 15:31:42,368 - DEBUG - dispatch pc=306, inst=LOAD_CONST(arg=3, lineno=1247)
2025-01-31 15:31:42,368 - DEBUG - stack ['$n302.0', '$wait304.1']
2025-01-31 15:31:42,368 - DEBUG - dispatch pc=308, inst=BINARY_ADD(arg=None, lineno=1247)
2025-01-31 15:31:42,368 - DEBUG - stack ['$n302.0', '$wait304.1', '$const306.2']
2025-01-31 15:31:42,368 - DEBUG - dispatch pc=310, inst=INPLACE_ADD(arg=None, lineno=1247)
2025-01-31 15:31:42,368 - DEBUG - stack ['$n302.0', '$308binary_add.3']
2025-01-31 15:31:42,368 - DEBUG - dispatch pc=312, inst=STORE_FAST(arg=8, lineno=1247)
2025-01-31 15:31:42,368 - DEBUG - stack ['$310inplace_add.4']
2025-01-31 15:31:42,368 - DEBUG - dispatch pc=314, inst=LOAD_FAST(arg=8, lineno=1229)
2025-01-31 15:31:42,368 - DEBUG - stack []
2025-01-31 15:31:42,369 - DEBUG - dispatch pc=316, inst=LOAD_FAST(arg=0, lineno=1229)
2025-01-31 15:31:42,369 - DEBUG - stack ['$n314.5']
2025-01-31 15:31:42,369 - DEBUG - dispatch pc=318, inst=LOAD_ATTR(arg=3, lineno=1229)
2025-01-31 15:31:42,369 - DEBUG - stack ['$n314.5', '$x316.6']
2025-01-31 15:31:42,369 - DEBUG - dispatch pc=320, inst=LOAD_CONST(arg=1, lineno=1229)
2025-01-31 15:31:42,369 - DEBUG - stack ['$n314.5', '$318load_attr.7']
2025-01-31 15:31:42,369 - DEBUG - dispatch pc=322, inst=BINARY_SUBSCR(arg=None, lineno=1229)
2025-01-31 15:31:42,369 - DEBUG - stack ['$n314.5', '$318load_attr.7', '$const320.8']
2025-01-31 15:31:42,369 - DEBUG - dispatch pc=324, inst=COMPARE_OP(arg=0, lineno=1229)
2025-01-31 15:31:42,369 - DEBUG - stack ['$n314.5', '$322binary_subscr.9']
2025-01-31 15:31:42,369 - DEBUG - dispatch pc=326, inst=POP_JUMP_IF_TRUE(arg=68, lineno=1229)
2025-01-31 15:31:42,369 - DEBUG - stack ['$324compare_op.10']
2025-01-31 15:31:42,369 - DEBUG - end state. edges=[Edge(pc=328, stack=(), blockstack=(), npush=0), Edge(pc=134, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:42,369 - DEBUG - pending: deque([State(pc_initial=120 nstack_initial=0), State(pc_initial=328 nstack_initial=0), State(pc_initial=134 nstack_initial=0)])
2025-01-31 15:31:42,369 - DEBUG - pending: deque([State(pc_initial=328 nstack_initial=0), State(pc_initial=134 nstack_initial=0)])
2025-01-31 15:31:42,369 - DEBUG - stack: []
2025-01-31 15:31:42,369 - DEBUG - state.pc_initial: State(pc_initial=328 nstack_initial=0)
2025-01-31 15:31:42,369 - DEBUG - dispatch pc=328, inst=LOAD_CONST(arg=2, lineno=1229)
2025-01-31 15:31:42,369 - DEBUG - stack []
2025-01-31 15:31:42,369 - DEBUG - dispatch pc=330, inst=RETURN_VALUE(arg=None, lineno=1229)
2025-01-31 15:31:42,369 - DEBUG - stack ['$const328.0']
2025-01-31 15:31:42,369 - DEBUG - end state. edges=[]
2025-01-31 15:31:42,369 - DEBUG - pending: deque([State(pc_initial=134 nstack_initial=0)])
2025-01-31 15:31:42,369 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:31:42,369 - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=106 nstack_initial=0): set(),
             State(pc_initial=116 nstack_initial=0): set(),
             State(pc_initial=120 nstack_initial=0): set(),
             State(pc_initial=134 nstack_initial=0): set(),
             State(pc_initial=202 nstack_initial=0): set(),
             State(pc_initial=212 nstack_initial=0): set(),
             State(pc_initial=292 nstack_initial=0): set(),
             State(pc_initial=302 nstack_initial=0): set(),
             State(pc_initial=328 nstack_initial=0): set(),
             State(pc_initial=332 nstack_initial=0): set()})
2025-01-31 15:31:42,370 - DEBUG - defmap: {}
2025-01-31 15:31:42,370 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:42,370 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:42,370 - DEBUG - keep phismap: {}
2025-01-31 15:31:42,370 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-01-31 15:31:42,370 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:31:42,370 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'res': '$8load_global.3'}), (10, {'item': '$8load_global.3', 'res': '$10load_method.4'}), (12, {'res': '$x12.5'}), (14, {'res': '$const14.6'}), (16, {'res': '$16load_global.7'}), (18, {'res': '$post_max18.8'}), (20, {'res': '$x20.9'}), (22, {'item': '$x20.9', 'res': '$22load_attr.10'}), (24, {'res': '$const24.11'}), (26, {'index': '$const24.11', 'target': '$22load_attr.10', 'res': '$26binary_subscr.12'}), (28, {'func': '$16load_global.7', 'args': ['$post_max18.8', '$26binary_subscr.12'], 'res': '$28call_function.13'}), (30, {'start': '$const14.6', 'stop': '$28call_function.13', 'step': None, 'res': '$30build_slice.15', 'slicevar': '$30build_slice.14'}), (32, {'index': '$30build_slice.15', 'target': '$x12.5', 'res': '$32binary_subscr.16'}), (34, {'func': '$10load_method.4', 'args': ['$32binary_subscr.16'], 'res': '$34call_method.17'}), (36, {'lhs': '$6binary_subscr.2', 'rhs': '$34call_method.17', 'res': '$36compare_op.18'}), (38, {'res': '$peaks38.19'}), (40, {'res': '$const40.20'}), (42, {'target': '$peaks38.19', 'index': '$const40.20', 'value': '$36compare_op.18'}), (44, {'res': '$peaks44.21'}), (46, {'res': '$const46.22'}), (48, {'orig': ['$peaks44.21', '$const46.22'], 'duped': ['$48dup_top_two.23', '$48dup_top_two.24']}), (50, {'index': '$48dup_top_two.24', 'target': '$48dup_top_two.23', 'res': '$50binary_subscr.25'}), (52, {'res': '$x52.26'}), (54, {'res': '$const54.27'}), (56, {'index': '$const54.27', 'target': '$x52.26', 'res': '$56binary_subscr.28'}), (58, {'res': '$58load_global.29'}), (60, {'item': '$58load_global.29', 'res': '$60load_method.30'}), (62, {'res': '$x62.31'}), (64, {'res': '$const64.32'}), (66, {'res': '$66load_global.33'}), (68, {'res': '$post_avg68.34'}), (70, {'res': '$x70.35'}), (72, {'item': '$x70.35', 'res': '$72load_attr.36'}), (74, {'res': '$const74.37'}), (76, {'index': '$const74.37', 'target': '$72load_attr.36', 'res': '$76binary_subscr.38'}), (78, {'func': '$66load_global.33', 'args': ['$post_avg68.34', '$76binary_subscr.38'], 'res': '$78call_function.39'}), (80, {'start': '$const64.32', 'stop': '$78call_function.39', 'step': None, 'res': '$80build_slice.41', 'slicevar': '$80build_slice.40'}), (82, {'index': '$80build_slice.41', 'target': '$x62.31', 'res': '$82binary_subscr.42'}), (84, {'func': '$60load_method.30', 'args': ['$82binary_subscr.42'], 'res': '$84call_method.43'}), (86, {'res': '$delta86.44'}), (88, {'lhs': '$84call_method.43', 'rhs': '$delta86.44', 'res': '$88binary_add.45'}), (90, {'lhs': '$56binary_subscr.28', 'rhs': '$88binary_add.45', 'res': '$90compare_op.46'}), (92, {'lhs': '$50binary_subscr.25', 'rhs': '$90compare_op.46', 'res': '$92inplace_and.47'}), (96, {'target': '$peaks44.21', 'index': '$const46.22', 'value': '$92inplace_and.47'}), (98, {'res': '$peaks98.48'}), (100, {'res': '$const100.49'}), (102, {'index': '$const100.49', 'target': '$peaks98.48', 'res': '$102binary_subscr.50'}), (104, {'pred': '$102binary_subscr.50'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={106: (), 116: ()})
2025-01-31 15:31:42,370 - DEBUG - block_infos State(pc_initial=106 nstack_initial=0):
AdaptBlockInfo(insts=((106, {'res': '$wait106.0'}), (108, {'res': '$const108.1'}), (110, {'lhs': '$wait106.0', 'rhs': '$const108.1', 'res': '$110binary_add.2'}), (112, {'value': '$110binary_add.2'}), (114, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={120: ()})
2025-01-31 15:31:42,370 - DEBUG - block_infos State(pc_initial=116 nstack_initial=0):
AdaptBlockInfo(insts=((116, {'res': '$const116.0'}), (118, {'value': '$const116.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={120: ()})
2025-01-31 15:31:42,370 - DEBUG - block_infos State(pc_initial=120 nstack_initial=0):
AdaptBlockInfo(insts=((120, {'res': '$n120.0'}), (122, {'res': '$x122.1'}), (124, {'item': '$x122.1', 'res': '$124load_attr.2'}), (126, {'res': '$const126.3'}), (128, {'index': '$const126.3', 'target': '$124load_attr.2', 'res': '$128binary_subscr.4'}), (130, {'lhs': '$n120.0', 'rhs': '$128binary_subscr.4', 'res': '$130compare_op.5'}), (132, {'pred': '$130compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={134: (), 332: ()})
2025-01-31 15:31:42,370 - DEBUG - block_infos State(pc_initial=134 nstack_initial=0):
AdaptBlockInfo(insts=((134, {'res': '$134load_global.0'}), (136, {'item': '$134load_global.0', 'res': '$136load_method.1'}), (138, {'res': '$x138.2'}), (140, {'res': '$140load_global.3'}), (142, {'res': '$const142.4'}), (144, {'res': '$n144.5'}), (146, {'res': '$pre_max146.6'}), (148, {'lhs': '$n144.5', 'rhs': '$pre_max146.6', 'res': '$148binary_subtract.7'}), (150, {'func': '$140load_global.3', 'args': ['$const142.4', '$148binary_subtract.7'], 'res': '$150call_function.8'}), (152, {'res': '$152load_global.9'}), (154, {'res': '$n154.10'}), (156, {'res': '$post_max156.11'}), (158, {'lhs': '$n154.10', 'rhs': '$post_max156.11', 'res': '$158binary_add.12'}), (160, {'res': '$x160.13'}), (162, {'item': '$x160.13', 'res': '$162load_attr.14'}), (164, {'res': '$const164.15'}), (166, {'index': '$const164.15', 'target': '$162load_attr.14', 'res': '$166binary_subscr.16'}), (168, {'func': '$152load_global.9', 'args': ['$158binary_add.12', '$166binary_subscr.16'], 'res': '$168call_function.17'}), (170, {'start': '$150call_function.8', 'stop': '$168call_function.17', 'step': None, 'res': '$170build_slice.19', 'slicevar': '$170build_slice.18'}), (172, {'index': '$170build_slice.19', 'target': '$x138.2', 'res': '$172binary_subscr.20'}), (174, {'func': '$136load_method.1', 'args': ['$172binary_subscr.20'], 'res': '$174call_method.21'}), (176, {'value': '$174call_method.21'}), (178, {'res': '$x178.22'}), (180, {'res': '$n180.23'}), (182, {'index': '$n180.23', 'target': '$x178.22', 'res': '$182binary_subscr.24'}), (184, {'res': '$maxn184.25'}), (186, {'lhs': '$182binary_subscr.24', 'rhs': '$maxn184.25', 'res': '$186compare_op.26'}), (188, {'res': '$peaks188.27'}), (190, {'res': '$n190.28'}), (192, {'target': '$peaks188.27', 'index': '$n190.28', 'value': '$186compare_op.26'}), (194, {'res': '$peaks194.29'}), (196, {'res': '$n196.30'}), (198, {'index': '$n196.30', 'target': '$peaks194.29', 'res': '$198binary_subscr.31'}), (200, {'pred': '$198binary_subscr.31'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={202: (), 212: ()})
2025-01-31 15:31:42,370 - DEBUG - block_infos State(pc_initial=202 nstack_initial=0):
AdaptBlockInfo(insts=((202, {'res': '$n202.0'}), (204, {'res': '$const204.1'}), (206, {'lhs': '$n202.0', 'rhs': '$const204.1', 'res': '$206inplace_add.2'}), (208, {'value': '$206inplace_add.2'}), (210, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={120: ()})
2025-01-31 15:31:42,371 - DEBUG - block_infos State(pc_initial=212 nstack_initial=0):
AdaptBlockInfo(insts=((212, {'res': '$212load_global.0'}), (214, {'item': '$212load_global.0', 'res': '$214load_method.1'}), (216, {'res': '$x216.2'}), (218, {'res': '$218load_global.3'}), (220, {'res': '$const220.4'}), (222, {'res': '$n222.5'}), (224, {'res': '$pre_avg224.6'}), (226, {'lhs': '$n222.5', 'rhs': '$pre_avg224.6', 'res': '$226binary_subtract.7'}), (228, {'func': '$218load_global.3', 'args': ['$const220.4', '$226binary_subtract.7'], 'res': '$228call_function.8'}), (230, {'res': '$230load_global.9'}), (232, {'res': '$n232.10'}), (234, {'res': '$post_avg234.11'}), (236, {'lhs': '$n232.10', 'rhs': '$post_avg234.11', 'res': '$236binary_add.12'}), (238, {'res': '$x238.13'}), (240, {'item': '$x238.13', 'res': '$240load_attr.14'}), (242, {'res': '$const242.15'}), (244, {'index': '$const242.15', 'target': '$240load_attr.14', 'res': '$244binary_subscr.16'}), (246, {'func': '$230load_global.9', 'args': ['$236binary_add.12', '$244binary_subscr.16'], 'res': '$246call_function.17'}), (248, {'start': '$228call_function.8', 'stop': '$246call_function.17', 'step': None, 'res': '$248build_slice.19', 'slicevar': '$248build_slice.18'}), (250, {'index': '$248build_slice.19', 'target': '$x216.2', 'res': '$250binary_subscr.20'}), (252, {'func': '$214load_method.1', 'args': ['$250binary_subscr.20'], 'res': '$252call_method.21'}), (254, {'value': '$252call_method.21'}), (256, {'res': '$peaks256.22'}), (258, {'res': '$n258.23'}), (260, {'orig': ['$peaks256.22', '$n258.23'], 'duped': ['$260dup_top_two.24', '$260dup_top_two.25']}), (262, {'index': '$260dup_top_two.25', 'target': '$260dup_top_two.24', 'res': '$262binary_subscr.26'}), (264, {'res': '$x264.27'}), (266, {'res': '$n266.28'}), (268, {'index': '$n266.28', 'target': '$x264.27', 'res': '$268binary_subscr.29'}), (270, {'res': '$avgn270.30'}), (272, {'res': '$delta272.31'}), (274, {'lhs': '$avgn270.30', 'rhs': '$delta272.31', 'res': '$274binary_add.32'}), (276, {'lhs': '$268binary_subscr.29', 'rhs': '$274binary_add.32', 'res': '$276compare_op.33'}), (278, {'lhs': '$262binary_subscr.26', 'rhs': '$276compare_op.33', 'res': '$278inplace_and.34'}), (282, {'target': '$peaks256.22', 'index': '$n258.23', 'value': '$278inplace_and.34'}), (284, {'res': '$peaks284.35'}), (286, {'res': '$n286.36'}), (288, {'index': '$n286.36', 'target': '$peaks284.35', 'res': '$288binary_subscr.37'}), (290, {'pred': '$288binary_subscr.37'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={292: (), 302: ()})
2025-01-31 15:31:42,371 - DEBUG - block_infos State(pc_initial=292 nstack_initial=0):
AdaptBlockInfo(insts=((292, {'res': '$n292.0'}), (294, {'res': '$const294.1'}), (296, {'lhs': '$n292.0', 'rhs': '$const294.1', 'res': '$296inplace_add.2'}), (298, {'value': '$296inplace_add.2'}), (300, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={120: ()})
2025-01-31 15:31:42,371 - DEBUG - block_infos State(pc_initial=302 nstack_initial=0):
AdaptBlockInfo(insts=((302, {'res': '$n302.0'}), (304, {'res': '$wait304.1'}), (306, {'res': '$const306.2'}), (308, {'lhs': '$wait304.1', 'rhs': '$const306.2', 'res': '$308binary_add.3'}), (310, {'lhs': '$n302.0', 'rhs': '$308binary_add.3', 'res': '$310inplace_add.4'}), (312, {'value': '$310inplace_add.4'}), (314, {'res': '$n314.5'}), (316, {'res': '$x316.6'}), (318, {'item': '$x316.6', 'res': '$318load_attr.7'}), (320, {'res': '$const320.8'}), (322, {'index': '$const320.8', 'target': '$318load_attr.7', 'res': '$322binary_subscr.9'}), (324, {'lhs': '$n314.5', 'rhs': '$322binary_subscr.9', 'res': '$324compare_op.10'}), (326, {'pred': '$324compare_op.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={328: (), 134: ()})
2025-01-31 15:31:42,371 - DEBUG - block_infos State(pc_initial=328 nstack_initial=0):
AdaptBlockInfo(insts=((328, {'res': '$const328.0'}), (330, {'retval': '$const328.0', 'castval': '$330return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:42,371 - DEBUG - block_infos State(pc_initial=332 nstack_initial=0):
AdaptBlockInfo(insts=((332, {'res': '$const332.0'}), (334, {'retval': '$const332.0', 'castval': '$334return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:42,374 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    pre_max = arg(1, name=pre_max)           ['pre_max']
    post_max = arg(2, name=post_max)         ['post_max']
    pre_avg = arg(3, name=pre_avg)           ['pre_avg']
    post_avg = arg(4, name=post_avg)         ['post_avg']
    delta = arg(5, name=delta)               ['delta']
    wait = arg(6, name=wait)                 ['wait']
    peaks = arg(7, name=peaks)               ['peaks']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6binary_subscr.2 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$6binary_subscr.2', '$const4.1', 'x']
    $8load_global.3 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>) ['$8load_global.3']
    $10load_method.4 = getattr(value=$8load_global.3, attr=max) ['$10load_method.4', '$8load_global.3']
    $const14.6 = const(NoneType, None)       ['$const14.6']
    $16load_global.7 = global(min: <built-in function min>) ['$16load_global.7']
    $22load_attr.10 = getattr(value=x, attr=shape) ['$22load_attr.10', 'x']
    $const24.11 = const(int, 0)              ['$const24.11']
    $26binary_subscr.12 = getitem(value=$22load_attr.10, index=$const24.11, fn=<built-in function getitem>) ['$22load_attr.10', '$26binary_subscr.12', '$const24.11']
    $28call_function.13 = call $16load_global.7(post_max, $26binary_subscr.12, func=$16load_global.7, args=[Var(post_max, utils.py:1209), Var($26binary_subscr.12, utils.py:1221)], kws=(), vararg=None, varkwarg=None, target=None) ['$16load_global.7', '$26binary_subscr.12', '$28call_function.13', 'post_max']
    $30build_slice.14 = global(slice: <class 'slice'>) ['$30build_slice.14']
    $30build_slice.15 = call $30build_slice.14($const14.6, $28call_function.13, func=$30build_slice.14, args=(Var($const14.6, utils.py:1221), Var($28call_function.13, utils.py:1221)), kws=(), vararg=None, varkwarg=None, target=None) ['$28call_function.13', '$30build_slice.14', '$30build_slice.15', '$const14.6']
    $32binary_subscr.16 = getitem(value=x, index=$30build_slice.15, fn=<built-in function getitem>) ['$30build_slice.15', '$32binary_subscr.16', 'x']
    $34call_method.17 = call $10load_method.4($32binary_subscr.16, func=$10load_method.4, args=[Var($32binary_subscr.16, utils.py:1221)], kws=(), vararg=None, varkwarg=None, target=None) ['$10load_method.4', '$32binary_subscr.16', '$34call_method.17']
    $36compare_op.18 = $6binary_subscr.2 >= $34call_method.17 ['$34call_method.17', '$36compare_op.18', '$6binary_subscr.2']
    $const40.20 = const(int, 0)              ['$const40.20']
    peaks[$const40.20] = $36compare_op.18    ['$36compare_op.18', '$const40.20', 'peaks']
    $const46.22 = const(int, 0)              ['$const46.22']
    $50binary_subscr.25 = getitem(value=peaks, index=$const46.22, fn=<built-in function getitem>) ['$50binary_subscr.25', '$const46.22', 'peaks']
    $const54.27 = const(int, 0)              ['$const54.27']
    $56binary_subscr.28 = getitem(value=x, index=$const54.27, fn=<built-in function getitem>) ['$56binary_subscr.28', '$const54.27', 'x']
    $58load_global.29 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>) ['$58load_global.29']
    $60load_method.30 = getattr(value=$58load_global.29, attr=mean) ['$58load_global.29', '$60load_method.30']
    $const64.32 = const(NoneType, None)      ['$const64.32']
    $66load_global.33 = global(min: <built-in function min>) ['$66load_global.33']
    $72load_attr.36 = getattr(value=x, attr=shape) ['$72load_attr.36', 'x']
    $const74.37 = const(int, 0)              ['$const74.37']
    $76binary_subscr.38 = getitem(value=$72load_attr.36, index=$const74.37, fn=<built-in function getitem>) ['$72load_attr.36', '$76binary_subscr.38', '$const74.37']
    $78call_function.39 = call $66load_global.33(post_avg, $76binary_subscr.38, func=$66load_global.33, args=[Var(post_avg, utils.py:1209), Var($76binary_subscr.38, utils.py:1222)], kws=(), vararg=None, varkwarg=None, target=None) ['$66load_global.33', '$76binary_subscr.38', '$78call_function.39', 'post_avg']
    $80build_slice.40 = global(slice: <class 'slice'>) ['$80build_slice.40']
    $80build_slice.41 = call $80build_slice.40($const64.32, $78call_function.39, func=$80build_slice.40, args=(Var($const64.32, utils.py:1222), Var($78call_function.39, utils.py:1222)), kws=(), vararg=None, varkwarg=None, target=None) ['$78call_function.39', '$80build_slice.40', '$80build_slice.41', '$const64.32']
    $82binary_subscr.42 = getitem(value=x, index=$80build_slice.41, fn=<built-in function getitem>) ['$80build_slice.41', '$82binary_subscr.42', 'x']
    $84call_method.43 = call $60load_method.30($82binary_subscr.42, func=$60load_method.30, args=[Var($82binary_subscr.42, utils.py:1222)], kws=(), vararg=None, varkwarg=None, target=None) ['$60load_method.30', '$82binary_subscr.42', '$84call_method.43']
    $88binary_add.45 = $84call_method.43 + delta ['$84call_method.43', '$88binary_add.45', 'delta']
    $90compare_op.46 = $56binary_subscr.28 >= $88binary_add.45 ['$56binary_subscr.28', '$88binary_add.45', '$90compare_op.46']
    $92inplace_and.47 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$50binary_subscr.25, rhs=$90compare_op.46, static_lhs=Undefined, static_rhs=Undefined) ['$50binary_subscr.25', '$90compare_op.46', '$92inplace_and.47']
    peaks[$const46.22] = $92inplace_and.47   ['$92inplace_and.47', '$const46.22', 'peaks']
    $const100.49 = const(int, 0)             ['$const100.49']
    $102binary_subscr.50 = getitem(value=peaks, index=$const100.49, fn=<built-in function getitem>) ['$102binary_subscr.50', '$const100.49', 'peaks']
    bool104 = global(bool: <class 'bool'>)   ['bool104']
    $104pred = call bool104($102binary_subscr.50, func=bool104, args=(Var($102binary_subscr.50, utils.py:1224),), kws=(), vararg=None, varkwarg=None, target=None) ['$102binary_subscr.50', '$104pred', 'bool104']
    branch $104pred, 106, 116                ['$104pred']
label 106:
    $const108.1 = const(int, 1)              ['$const108.1']
    n = wait + $const108.1                   ['$const108.1', 'n', 'wait']
    jump 120                                 []
label 116:
    n = const(int, 1)                        ['n']
    jump 120                                 []
label 120:
    $124load_attr.2 = getattr(value=x, attr=shape) ['$124load_attr.2', 'x']
    $const126.3 = const(int, 0)              ['$const126.3']
    $128binary_subscr.4 = getitem(value=$124load_attr.2, index=$const126.3, fn=<built-in function getitem>) ['$124load_attr.2', '$128binary_subscr.4', '$const126.3']
    $130compare_op.5 = n < $128binary_subscr.4 ['$128binary_subscr.4', '$130compare_op.5', 'n']
    bool132 = global(bool: <class 'bool'>)   ['bool132']
    $132pred = call bool132($130compare_op.5, func=bool132, args=(Var($130compare_op.5, utils.py:1229),), kws=(), vararg=None, varkwarg=None, target=None) ['$130compare_op.5', '$132pred', 'bool132']
    branch $132pred, 134, 332                ['$132pred']
label 134:
    $134load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>) ['$134load_global.0']
    $136load_method.1 = getattr(value=$134load_global.0, attr=max) ['$134load_global.0', '$136load_method.1']
    $140load_global.3 = global(max: <built-in function max>) ['$140load_global.3']
    $const142.4 = const(int, 0)              ['$const142.4']
    $148binary_subtract.7 = n - pre_max      ['$148binary_subtract.7', 'n', 'pre_max']
    $150call_function.8 = call $140load_global.3($const142.4, $148binary_subtract.7, func=$140load_global.3, args=[Var($const142.4, utils.py:1230), Var($148binary_subtract.7, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None) ['$140load_global.3', '$148binary_subtract.7', '$150call_function.8', '$const142.4']
    $152load_global.9 = global(min: <built-in function min>) ['$152load_global.9']
    $158binary_add.12 = n + post_max         ['$158binary_add.12', 'n', 'post_max']
    $162load_attr.14 = getattr(value=x, attr=shape) ['$162load_attr.14', 'x']
    $const164.15 = const(int, 0)             ['$const164.15']
    $166binary_subscr.16 = getitem(value=$162load_attr.14, index=$const164.15, fn=<built-in function getitem>) ['$162load_attr.14', '$166binary_subscr.16', '$const164.15']
    $168call_function.17 = call $152load_global.9($158binary_add.12, $166binary_subscr.16, func=$152load_global.9, args=[Var($158binary_add.12, utils.py:1230), Var($166binary_subscr.16, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None) ['$152load_global.9', '$158binary_add.12', '$166binary_subscr.16', '$168call_function.17']
    $170build_slice.18 = global(slice: <class 'slice'>) ['$170build_slice.18']
    $170build_slice.19 = call $170build_slice.18($150call_function.8, $168call_function.17, func=$170build_slice.18, args=(Var($150call_function.8, utils.py:1230), Var($168call_function.17, utils.py:1230)), kws=(), vararg=None, varkwarg=None, target=None) ['$150call_function.8', '$168call_function.17', '$170build_slice.18', '$170build_slice.19']
    $172binary_subscr.20 = getitem(value=x, index=$170build_slice.19, fn=<built-in function getitem>) ['$170build_slice.19', '$172binary_subscr.20', 'x']
    maxn = call $136load_method.1($172binary_subscr.20, func=$136load_method.1, args=[Var($172binary_subscr.20, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None) ['$136load_method.1', '$172binary_subscr.20', 'maxn']
    $182binary_subscr.24 = getitem(value=x, index=n, fn=<built-in function getitem>) ['$182binary_subscr.24', 'n', 'x']
    $186compare_op.26 = $182binary_subscr.24 == maxn ['$182binary_subscr.24', '$186compare_op.26', 'maxn']
    peaks[n] = $186compare_op.26             ['$186compare_op.26', 'n', 'peaks']
    $198binary_subscr.31 = getitem(value=peaks, index=n, fn=<built-in function getitem>) ['$198binary_subscr.31', 'n', 'peaks']
    bool200 = global(bool: <class 'bool'>)   ['bool200']
    $200pred = call bool200($198binary_subscr.31, func=bool200, args=(Var($198binary_subscr.31, utils.py:1235),), kws=(), vararg=None, varkwarg=None, target=None) ['$198binary_subscr.31', '$200pred', 'bool200']
    branch $200pred, 212, 202                ['$200pred']
label 202:
    $const204.1 = const(int, 1)              ['$const204.1']
    $206inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const204.1, static_lhs=Undefined, static_rhs=Undefined) ['$206inplace_add.2', '$const204.1', 'n']
    n = $206inplace_add.2                    ['$206inplace_add.2', 'n']
    jump 120                                 []
label 212:
    $212load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>) ['$212load_global.0']
    $214load_method.1 = getattr(value=$212load_global.0, attr=mean) ['$212load_global.0', '$214load_method.1']
    $218load_global.3 = global(max: <built-in function max>) ['$218load_global.3']
    $const220.4 = const(int, 0)              ['$const220.4']
    $226binary_subtract.7 = n - pre_avg      ['$226binary_subtract.7', 'n', 'pre_avg']
    $228call_function.8 = call $218load_global.3($const220.4, $226binary_subtract.7, func=$218load_global.3, args=[Var($const220.4, utils.py:1239), Var($226binary_subtract.7, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None) ['$218load_global.3', '$226binary_subtract.7', '$228call_function.8', '$const220.4']
    $230load_global.9 = global(min: <built-in function min>) ['$230load_global.9']
    $236binary_add.12 = n + post_avg         ['$236binary_add.12', 'n', 'post_avg']
    $240load_attr.14 = getattr(value=x, attr=shape) ['$240load_attr.14', 'x']
    $const242.15 = const(int, 0)             ['$const242.15']
    $244binary_subscr.16 = getitem(value=$240load_attr.14, index=$const242.15, fn=<built-in function getitem>) ['$240load_attr.14', '$244binary_subscr.16', '$const242.15']
    $246call_function.17 = call $230load_global.9($236binary_add.12, $244binary_subscr.16, func=$230load_global.9, args=[Var($236binary_add.12, utils.py:1239), Var($244binary_subscr.16, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None) ['$230load_global.9', '$236binary_add.12', '$244binary_subscr.16', '$246call_function.17']
    $248build_slice.18 = global(slice: <class 'slice'>) ['$248build_slice.18']
    $248build_slice.19 = call $248build_slice.18($228call_function.8, $246call_function.17, func=$248build_slice.18, args=(Var($228call_function.8, utils.py:1239), Var($246call_function.17, utils.py:1239)), kws=(), vararg=None, varkwarg=None, target=None) ['$228call_function.8', '$246call_function.17', '$248build_slice.18', '$248build_slice.19']
    $250binary_subscr.20 = getitem(value=x, index=$248build_slice.19, fn=<built-in function getitem>) ['$248build_slice.19', '$250binary_subscr.20', 'x']
    avgn = call $214load_method.1($250binary_subscr.20, func=$214load_method.1, args=[Var($250binary_subscr.20, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None) ['$214load_method.1', '$250binary_subscr.20', 'avgn']
    $262binary_subscr.26 = getitem(value=peaks, index=n, fn=<built-in function getitem>) ['$262binary_subscr.26', 'n', 'peaks']
    $268binary_subscr.29 = getitem(value=x, index=n, fn=<built-in function getitem>) ['$268binary_subscr.29', 'n', 'x']
    $274binary_add.32 = avgn + delta         ['$274binary_add.32', 'avgn', 'delta']
    $276compare_op.33 = $268binary_subscr.29 >= $274binary_add.32 ['$268binary_subscr.29', '$274binary_add.32', '$276compare_op.33']
    $278inplace_and.34 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$262binary_subscr.26, rhs=$276compare_op.33, static_lhs=Undefined, static_rhs=Undefined) ['$262binary_subscr.26', '$276compare_op.33', '$278inplace_and.34']
    peaks[n] = $278inplace_and.34            ['$278inplace_and.34', 'n', 'peaks']
    $288binary_subscr.37 = getitem(value=peaks, index=n, fn=<built-in function getitem>) ['$288binary_subscr.37', 'n', 'peaks']
    bool290 = global(bool: <class 'bool'>)   ['bool290']
    $290pred = call bool290($288binary_subscr.37, func=bool290, args=(Var($288binary_subscr.37, utils.py:1242),), kws=(), vararg=None, varkwarg=None, target=None) ['$288binary_subscr.37', '$290pred', 'bool290']
    branch $290pred, 302, 292                ['$290pred']
label 292:
    $const294.1 = const(int, 1)              ['$const294.1']
    $296inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const294.1, static_lhs=Undefined, static_rhs=Undefined) ['$296inplace_add.2', '$const294.1', 'n']
    n = $296inplace_add.2                    ['$296inplace_add.2', 'n']
    jump 120                                 []
label 302:
    $const306.2 = const(int, 1)              ['$const306.2']
    $308binary_add.3 = wait + $const306.2    ['$308binary_add.3', '$const306.2', 'wait']
    $310inplace_add.4 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$308binary_add.3, static_lhs=Undefined, static_rhs=Undefined) ['$308binary_add.3', '$310inplace_add.4', 'n']
    n = $310inplace_add.4                    ['$310inplace_add.4', 'n']
    $318load_attr.7 = getattr(value=x, attr=shape) ['$318load_attr.7', 'x']
    $const320.8 = const(int, 0)              ['$const320.8']
    $322binary_subscr.9 = getitem(value=$318load_attr.7, index=$const320.8, fn=<built-in function getitem>) ['$318load_attr.7', '$322binary_subscr.9', '$const320.8']
    $324compare_op.10 = n < $322binary_subscr.9 ['$322binary_subscr.9', '$324compare_op.10', 'n']
    bool326 = global(bool: <class 'bool'>)   ['bool326']
    $326pred = call bool326($324compare_op.10, func=bool326, args=(Var($324compare_op.10, utils.py:1229),), kws=(), vararg=None, varkwarg=None, target=None) ['$324compare_op.10', '$326pred', 'bool326']
    branch $326pred, 134, 328                ['$326pred']
label 328:
    $const328.0 = const(NoneType, None)      ['$const328.0']
    $330return_value.1 = cast(value=$const328.0) ['$330return_value.1', '$const328.0']
    return $330return_value.1                ['$330return_value.1']
label 332:
    $const332.0 = const(NoneType, None)      ['$const332.0']
    $334return_value.1 = cast(value=$const332.0) ['$334return_value.1', '$const332.0']
    return $334return_value.1                ['$334return_value.1']

2025-01-31 15:31:42,386 - DEBUG - ==== SSA block analysis pass on 0
2025-01-31 15:31:42,387 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8985120>
2025-01-31 15:31:42,387 - DEBUG - on stmt: x = arg(0, name=x)
2025-01-31 15:31:42,387 - DEBUG - on stmt: pre_max = arg(1, name=pre_max)
2025-01-31 15:31:42,387 - DEBUG - on stmt: post_max = arg(2, name=post_max)
2025-01-31 15:31:42,387 - DEBUG - on stmt: pre_avg = arg(3, name=pre_avg)
2025-01-31 15:31:42,387 - DEBUG - on stmt: post_avg = arg(4, name=post_avg)
2025-01-31 15:31:42,387 - DEBUG - on stmt: delta = arg(5, name=delta)
2025-01-31 15:31:42,387 - DEBUG - on stmt: wait = arg(6, name=wait)
2025-01-31 15:31:42,387 - DEBUG - on stmt: peaks = arg(7, name=peaks)
2025-01-31 15:31:42,387 - DEBUG - on stmt: $const4.1 = const(int, 0)
2025-01-31 15:31:42,387 - DEBUG - on stmt: $6binary_subscr.2 = static_getitem(value=x, index=0, index_var=$const4.1, fn=<built-in function getitem>)
2025-01-31 15:31:42,387 - DEBUG - on stmt: $8load_global.3 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:42,387 - DEBUG - on stmt: $10load_method.4 = getattr(value=$8load_global.3, attr=max)
2025-01-31 15:31:42,387 - DEBUG - on stmt: $const14.6 = const(NoneType, None)
2025-01-31 15:31:42,387 - DEBUG - on stmt: $16load_global.7 = global(min: <built-in function min>)
2025-01-31 15:31:42,387 - DEBUG - on stmt: $22load_attr.10 = getattr(value=x, attr=shape)
2025-01-31 15:31:42,387 - DEBUG - on stmt: $const24.11 = const(int, 0)
2025-01-31 15:31:42,387 - DEBUG - on stmt: $26binary_subscr.12 = static_getitem(value=$22load_attr.10, index=0, index_var=$const24.11, fn=<built-in function getitem>)
2025-01-31 15:31:42,387 - DEBUG - on stmt: $28call_function.13 = call $16load_global.7(post_max, $26binary_subscr.12, func=$16load_global.7, args=[Var(post_max, utils.py:1209), Var($26binary_subscr.12, utils.py:1221)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,387 - DEBUG - on stmt: $30build_slice.14 = global(slice: <class 'slice'>)
2025-01-31 15:31:42,387 - DEBUG - on stmt: $30build_slice.15 = call $30build_slice.14($const14.6, $28call_function.13, func=$30build_slice.14, args=(Var($const14.6, utils.py:1221), Var($28call_function.13, utils.py:1221)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,387 - DEBUG - on stmt: $32binary_subscr.16 = getitem(value=x, index=$30build_slice.15, fn=<built-in function getitem>)
2025-01-31 15:31:42,387 - DEBUG - on stmt: $34call_method.17 = call $10load_method.4($32binary_subscr.16, func=$10load_method.4, args=[Var($32binary_subscr.16, utils.py:1221)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,388 - DEBUG - on stmt: $36compare_op.18 = $6binary_subscr.2 >= $34call_method.17
2025-01-31 15:31:42,388 - DEBUG - on stmt: $const40.20 = const(int, 0)
2025-01-31 15:31:42,388 - DEBUG - on stmt: peaks[0] = $36compare_op.18
2025-01-31 15:31:42,388 - DEBUG - on stmt: $const46.22 = const(int, 0)
2025-01-31 15:31:42,388 - DEBUG - on stmt: $50binary_subscr.25 = static_getitem(value=peaks, index=0, index_var=$const46.22, fn=<built-in function getitem>)
2025-01-31 15:31:42,388 - DEBUG - on stmt: $const54.27 = const(int, 0)
2025-01-31 15:31:42,388 - DEBUG - on stmt: $56binary_subscr.28 = static_getitem(value=x, index=0, index_var=$const54.27, fn=<built-in function getitem>)
2025-01-31 15:31:42,388 - DEBUG - on stmt: $58load_global.29 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:42,388 - DEBUG - on stmt: $60load_method.30 = getattr(value=$58load_global.29, attr=mean)
2025-01-31 15:31:42,388 - DEBUG - on stmt: $const64.32 = const(NoneType, None)
2025-01-31 15:31:42,388 - DEBUG - on stmt: $66load_global.33 = global(min: <built-in function min>)
2025-01-31 15:31:42,388 - DEBUG - on stmt: $72load_attr.36 = getattr(value=x, attr=shape)
2025-01-31 15:31:42,388 - DEBUG - on stmt: $const74.37 = const(int, 0)
2025-01-31 15:31:42,388 - DEBUG - on stmt: $76binary_subscr.38 = static_getitem(value=$72load_attr.36, index=0, index_var=$const74.37, fn=<built-in function getitem>)
2025-01-31 15:31:42,388 - DEBUG - on stmt: $78call_function.39 = call $66load_global.33(post_avg, $76binary_subscr.38, func=$66load_global.33, args=[Var(post_avg, utils.py:1209), Var($76binary_subscr.38, utils.py:1222)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,388 - DEBUG - on stmt: $80build_slice.40 = global(slice: <class 'slice'>)
2025-01-31 15:31:42,388 - DEBUG - on stmt: $80build_slice.41 = call $80build_slice.40($const64.32, $78call_function.39, func=$80build_slice.40, args=(Var($const64.32, utils.py:1222), Var($78call_function.39, utils.py:1222)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,388 - DEBUG - on stmt: $82binary_subscr.42 = getitem(value=x, index=$80build_slice.41, fn=<built-in function getitem>)
2025-01-31 15:31:42,388 - DEBUG - on stmt: $84call_method.43 = call $60load_method.30($82binary_subscr.42, func=$60load_method.30, args=[Var($82binary_subscr.42, utils.py:1222)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,388 - DEBUG - on stmt: $88binary_add.45 = $84call_method.43 + delta
2025-01-31 15:31:42,388 - DEBUG - on stmt: $90compare_op.46 = $56binary_subscr.28 >= $88binary_add.45
2025-01-31 15:31:42,388 - DEBUG - on stmt: $92inplace_and.47 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$50binary_subscr.25, rhs=$90compare_op.46, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:42,388 - DEBUG - on stmt: peaks[0] = $92inplace_and.47
2025-01-31 15:31:42,389 - DEBUG - on stmt: $const100.49 = const(int, 0)
2025-01-31 15:31:42,389 - DEBUG - on stmt: $102binary_subscr.50 = static_getitem(value=peaks, index=0, index_var=$const100.49, fn=<built-in function getitem>)
2025-01-31 15:31:42,389 - DEBUG - on stmt: bool104 = global(bool: <class 'bool'>)
2025-01-31 15:31:42,389 - DEBUG - on stmt: $104pred = call bool104($102binary_subscr.50, func=bool104, args=(Var($102binary_subscr.50, utils.py:1224),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,389 - DEBUG - on stmt: branch $104pred, 106, 116
2025-01-31 15:31:42,389 - DEBUG - ==== SSA block analysis pass on 106
2025-01-31 15:31:42,389 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8985120>
2025-01-31 15:31:42,389 - DEBUG - on stmt: $const108.1 = const(int, 1)
2025-01-31 15:31:42,389 - DEBUG - on stmt: n = wait + $const108.1
2025-01-31 15:31:42,389 - DEBUG - on stmt: jump 120
2025-01-31 15:31:42,389 - DEBUG - ==== SSA block analysis pass on 116
2025-01-31 15:31:42,389 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8985120>
2025-01-31 15:31:42,389 - DEBUG - on stmt: n = const(int, 1)
2025-01-31 15:31:42,389 - DEBUG - on stmt: jump 120
2025-01-31 15:31:42,389 - DEBUG - ==== SSA block analysis pass on 120
2025-01-31 15:31:42,389 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8985120>
2025-01-31 15:31:42,389 - DEBUG - on stmt: $124load_attr.2 = getattr(value=x, attr=shape)
2025-01-31 15:31:42,389 - DEBUG - on stmt: $const126.3 = const(int, 0)
2025-01-31 15:31:42,389 - DEBUG - on stmt: $128binary_subscr.4 = static_getitem(value=$124load_attr.2, index=0, index_var=$const126.3, fn=<built-in function getitem>)
2025-01-31 15:31:42,389 - DEBUG - on stmt: $130compare_op.5 = n < $128binary_subscr.4
2025-01-31 15:31:42,389 - DEBUG - on stmt: bool132 = global(bool: <class 'bool'>)
2025-01-31 15:31:42,389 - DEBUG - on stmt: $132pred = call bool132($130compare_op.5, func=bool132, args=(Var($130compare_op.5, utils.py:1229),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,389 - DEBUG - on stmt: branch $132pred, 134, 332
2025-01-31 15:31:42,389 - DEBUG - ==== SSA block analysis pass on 134
2025-01-31 15:31:42,389 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8985120>
2025-01-31 15:31:42,389 - DEBUG - on stmt: $134load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:42,389 - DEBUG - on stmt: $136load_method.1 = getattr(value=$134load_global.0, attr=max)
2025-01-31 15:31:42,390 - DEBUG - on stmt: $140load_global.3 = global(max: <built-in function max>)
2025-01-31 15:31:42,390 - DEBUG - on stmt: $const142.4 = const(int, 0)
2025-01-31 15:31:42,390 - DEBUG - on stmt: $148binary_subtract.7 = n - pre_max
2025-01-31 15:31:42,390 - DEBUG - on stmt: $150call_function.8 = call $140load_global.3($const142.4, $148binary_subtract.7, func=$140load_global.3, args=[Var($const142.4, utils.py:1230), Var($148binary_subtract.7, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,390 - DEBUG - on stmt: $152load_global.9 = global(min: <built-in function min>)
2025-01-31 15:31:42,390 - DEBUG - on stmt: $158binary_add.12 = n + post_max
2025-01-31 15:31:42,390 - DEBUG - on stmt: $162load_attr.14 = getattr(value=x, attr=shape)
2025-01-31 15:31:42,390 - DEBUG - on stmt: $const164.15 = const(int, 0)
2025-01-31 15:31:42,390 - DEBUG - on stmt: $166binary_subscr.16 = static_getitem(value=$162load_attr.14, index=0, index_var=$const164.15, fn=<built-in function getitem>)
2025-01-31 15:31:42,390 - DEBUG - on stmt: $168call_function.17 = call $152load_global.9($158binary_add.12, $166binary_subscr.16, func=$152load_global.9, args=[Var($158binary_add.12, utils.py:1230), Var($166binary_subscr.16, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,390 - DEBUG - on stmt: $170build_slice.18 = global(slice: <class 'slice'>)
2025-01-31 15:31:42,390 - DEBUG - on stmt: $170build_slice.19 = call $170build_slice.18($150call_function.8, $168call_function.17, func=$170build_slice.18, args=(Var($150call_function.8, utils.py:1230), Var($168call_function.17, utils.py:1230)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,390 - DEBUG - on stmt: $172binary_subscr.20 = getitem(value=x, index=$170build_slice.19, fn=<built-in function getitem>)
2025-01-31 15:31:42,390 - DEBUG - on stmt: maxn = call $136load_method.1($172binary_subscr.20, func=$136load_method.1, args=[Var($172binary_subscr.20, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,390 - DEBUG - on stmt: $182binary_subscr.24 = getitem(value=x, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:42,390 - DEBUG - on stmt: $186compare_op.26 = $182binary_subscr.24 == maxn
2025-01-31 15:31:42,390 - DEBUG - on stmt: peaks[n] = $186compare_op.26
2025-01-31 15:31:42,390 - DEBUG - on stmt: $198binary_subscr.31 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:42,390 - DEBUG - on stmt: bool200 = global(bool: <class 'bool'>)
2025-01-31 15:31:42,390 - DEBUG - on stmt: $200pred = call bool200($198binary_subscr.31, func=bool200, args=(Var($198binary_subscr.31, utils.py:1235),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,390 - DEBUG - on stmt: branch $200pred, 212, 202
2025-01-31 15:31:42,390 - DEBUG - ==== SSA block analysis pass on 202
2025-01-31 15:31:42,390 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8985120>
2025-01-31 15:31:42,391 - DEBUG - on stmt: $const204.1 = const(int, 1)
2025-01-31 15:31:42,391 - DEBUG - on stmt: $206inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const204.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:42,391 - DEBUG - on stmt: n = $206inplace_add.2
2025-01-31 15:31:42,391 - DEBUG - on stmt: jump 333
2025-01-31 15:31:42,391 - DEBUG - ==== SSA block analysis pass on 212
2025-01-31 15:31:42,391 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8985120>
2025-01-31 15:31:42,391 - DEBUG - on stmt: $212load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:42,391 - DEBUG - on stmt: $214load_method.1 = getattr(value=$212load_global.0, attr=mean)
2025-01-31 15:31:42,391 - DEBUG - on stmt: $218load_global.3 = global(max: <built-in function max>)
2025-01-31 15:31:42,391 - DEBUG - on stmt: $const220.4 = const(int, 0)
2025-01-31 15:31:42,391 - DEBUG - on stmt: $226binary_subtract.7 = n - pre_avg
2025-01-31 15:31:42,391 - DEBUG - on stmt: $228call_function.8 = call $218load_global.3($const220.4, $226binary_subtract.7, func=$218load_global.3, args=[Var($const220.4, utils.py:1239), Var($226binary_subtract.7, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,391 - DEBUG - on stmt: $230load_global.9 = global(min: <built-in function min>)
2025-01-31 15:31:42,391 - DEBUG - on stmt: $236binary_add.12 = n + post_avg
2025-01-31 15:31:42,391 - DEBUG - on stmt: $240load_attr.14 = getattr(value=x, attr=shape)
2025-01-31 15:31:42,391 - DEBUG - on stmt: $const242.15 = const(int, 0)
2025-01-31 15:31:42,391 - DEBUG - on stmt: $244binary_subscr.16 = static_getitem(value=$240load_attr.14, index=0, index_var=$const242.15, fn=<built-in function getitem>)
2025-01-31 15:31:42,391 - DEBUG - on stmt: $246call_function.17 = call $230load_global.9($236binary_add.12, $244binary_subscr.16, func=$230load_global.9, args=[Var($236binary_add.12, utils.py:1239), Var($244binary_subscr.16, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,391 - DEBUG - on stmt: $248build_slice.18 = global(slice: <class 'slice'>)
2025-01-31 15:31:42,391 - DEBUG - on stmt: $248build_slice.19 = call $248build_slice.18($228call_function.8, $246call_function.17, func=$248build_slice.18, args=(Var($228call_function.8, utils.py:1239), Var($246call_function.17, utils.py:1239)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,391 - DEBUG - on stmt: $250binary_subscr.20 = getitem(value=x, index=$248build_slice.19, fn=<built-in function getitem>)
2025-01-31 15:31:42,391 - DEBUG - on stmt: avgn = call $214load_method.1($250binary_subscr.20, func=$214load_method.1, args=[Var($250binary_subscr.20, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,391 - DEBUG - on stmt: $262binary_subscr.26 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:42,392 - DEBUG - on stmt: $268binary_subscr.29 = getitem(value=x, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:42,392 - DEBUG - on stmt: $274binary_add.32 = avgn + delta
2025-01-31 15:31:42,392 - DEBUG - on stmt: $276compare_op.33 = $268binary_subscr.29 >= $274binary_add.32
2025-01-31 15:31:42,392 - DEBUG - on stmt: $278inplace_and.34 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$262binary_subscr.26, rhs=$276compare_op.33, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:42,392 - DEBUG - on stmt: peaks[n] = $278inplace_and.34
2025-01-31 15:31:42,392 - DEBUG - on stmt: $288binary_subscr.37 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:42,392 - DEBUG - on stmt: bool290 = global(bool: <class 'bool'>)
2025-01-31 15:31:42,392 - DEBUG - on stmt: $290pred = call bool290($288binary_subscr.37, func=bool290, args=(Var($288binary_subscr.37, utils.py:1242),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,392 - DEBUG - on stmt: branch $290pred, 302, 292
2025-01-31 15:31:42,392 - DEBUG - ==== SSA block analysis pass on 292
2025-01-31 15:31:42,392 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8985120>
2025-01-31 15:31:42,392 - DEBUG - on stmt: $const294.1 = const(int, 1)
2025-01-31 15:31:42,392 - DEBUG - on stmt: $296inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const294.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:42,392 - DEBUG - on stmt: n = $296inplace_add.2
2025-01-31 15:31:42,392 - DEBUG - on stmt: jump 333
2025-01-31 15:31:42,392 - DEBUG - ==== SSA block analysis pass on 302
2025-01-31 15:31:42,392 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8985120>
2025-01-31 15:31:42,392 - DEBUG - on stmt: $const306.2 = const(int, 1)
2025-01-31 15:31:42,392 - DEBUG - on stmt: $308binary_add.3 = wait + $const306.2
2025-01-31 15:31:42,392 - DEBUG - on stmt: $310inplace_add.4 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$308binary_add.3, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:42,392 - DEBUG - on stmt: n = $310inplace_add.4
2025-01-31 15:31:42,392 - DEBUG - on stmt: $318load_attr.7 = getattr(value=x, attr=shape)
2025-01-31 15:31:42,392 - DEBUG - on stmt: $const320.8 = const(int, 0)
2025-01-31 15:31:42,392 - DEBUG - on stmt: $322binary_subscr.9 = static_getitem(value=$318load_attr.7, index=0, index_var=$const320.8, fn=<built-in function getitem>)
2025-01-31 15:31:42,392 - DEBUG - on stmt: $324compare_op.10 = n < $322binary_subscr.9
2025-01-31 15:31:42,393 - DEBUG - on stmt: bool326 = global(bool: <class 'bool'>)
2025-01-31 15:31:42,393 - DEBUG - on stmt: $326pred = call bool326($324compare_op.10, func=bool326, args=(Var($324compare_op.10, utils.py:1229),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,393 - DEBUG - on stmt: branch $326pred, 134, 328
2025-01-31 15:31:42,393 - DEBUG - ==== SSA block analysis pass on 328
2025-01-31 15:31:42,393 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8985120>
2025-01-31 15:31:42,393 - DEBUG - on stmt: $const328.0 = const(NoneType, None)
2025-01-31 15:31:42,393 - DEBUG - on stmt: $330return_value.1 = cast(value=$const328.0)
2025-01-31 15:31:42,393 - DEBUG - on stmt: return $330return_value.1
2025-01-31 15:31:42,393 - DEBUG - ==== SSA block analysis pass on 332
2025-01-31 15:31:42,393 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8985120>
2025-01-31 15:31:42,393 - DEBUG - on stmt: $const332.0 = const(NoneType, None)
2025-01-31 15:31:42,393 - DEBUG - on stmt: $334return_value.1 = cast(value=$const332.0)
2025-01-31 15:31:42,393 - DEBUG - on stmt: return $334return_value.1
2025-01-31 15:31:42,393 - DEBUG - ==== SSA block analysis pass on 333
2025-01-31 15:31:42,393 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8985120>
2025-01-31 15:31:42,393 - DEBUG - on stmt: jump 120
2025-01-31 15:31:42,395 - DEBUG - defs defaultdict(<class 'list'>,
            {'$102binary_subscr.50': [(<numba.core.ir.Assign object at 0x7c89e8985930>,
                                       0)],
             '$104pred': [(<numba.core.ir.Assign object at 0x7c89e89e0820>, 0)],
             '$10load_method.4': [(<numba.core.ir.Assign object at 0x7c89e88ac880>,
                                   0)],
             '$124load_attr.2': [(<numba.core.ir.Assign object at 0x7c89e89e1060>,
                                  120)],
             '$128binary_subscr.4': [(<numba.core.ir.Assign object at 0x7c89e89843a0>,
                                      120)],
             '$130compare_op.5': [(<numba.core.ir.Assign object at 0x7c89e89e1510>,
                                   120)],
             '$132pred': [(<numba.core.ir.Assign object at 0x7c89e89e1780>,
                           120)],
             '$134load_global.0': [(<numba.core.ir.Assign object at 0x7c89e89e1960>,
                                    134)],
             '$136load_method.1': [(<numba.core.ir.Assign object at 0x7c89e89e1ae0>,
                                    134)],
             '$140load_global.3': [(<numba.core.ir.Assign object at 0x7c89e89e1d80>,
                                    134)],
             '$148binary_subtract.7': [(<numba.core.ir.Assign object at 0x7c89e89e22f0>,
                                        134)],
             '$150call_function.8': [(<numba.core.ir.Assign object at 0x7c89e89e24a0>,
                                      134)],
             '$152load_global.9': [(<numba.core.ir.Assign object at 0x7c89e89e25c0>,
                                    134)],
             '$158binary_add.12': [(<numba.core.ir.Assign object at 0x7c89e89e29b0>,
                                    134)],
             '$162load_attr.14': [(<numba.core.ir.Assign object at 0x7c89e89e2c20>,
                                   134)],
             '$166binary_subscr.16': [(<numba.core.ir.Assign object at 0x7c89e89842e0>,
                                       134)],
             '$168call_function.17': [(<numba.core.ir.Assign object at 0x7c89e89e3100>,
                                       134)],
             '$16load_global.7': [(<numba.core.ir.Assign object at 0x7c89e8622a40>,
                                   0)],
             '$170build_slice.18': [(<numba.core.ir.Assign object at 0x7c89e89e3220>,
                                     134)],
             '$170build_slice.19': [(<numba.core.ir.Assign object at 0x7c89e89e3340>,
                                     134)],
             '$172binary_subscr.20': [(<numba.core.ir.Assign object at 0x7c89e89e34f0>,
                                       134)],
             '$182binary_subscr.24': [(<numba.core.ir.Assign object at 0x7c89e89e3b50>,
                                       134)],
             '$186compare_op.26': [(<numba.core.ir.Assign object at 0x7c89e89e3df0>,
                                    134)],
             '$198binary_subscr.31': [(<numba.core.ir.Assign object at 0x7c89e89544f0>,
                                       134)],
             '$200pred': [(<numba.core.ir.Assign object at 0x7c89e8954760>,
                           134)],
             '$206inplace_add.2': [(<numba.core.ir.Assign object at 0x7c89e8954220>,
                                    202)],
             '$212load_global.0': [(<numba.core.ir.Assign object at 0x7c89e8954ac0>,
                                    212)],
             '$214load_method.1': [(<numba.core.ir.Assign object at 0x7c89e8954c40>,
                                    212)],
             '$218load_global.3': [(<numba.core.ir.Assign object at 0x7c89e8954ee0>,
                                    212)],
             '$226binary_subtract.7': [(<numba.core.ir.Assign object at 0x7c89e8955450>,
                                        212)],
             '$228call_function.8': [(<numba.core.ir.Assign object at 0x7c89e8955600>,
                                      212)],
             '$22load_attr.10': [(<numba.core.ir.Assign object at 0x7c89e8836680>,
                                  0)],
             '$230load_global.9': [(<numba.core.ir.Assign object at 0x7c89e8955720>,
                                    212)],
             '$236binary_add.12': [(<numba.core.ir.Assign object at 0x7c89e8955b10>,
                                    212)],
             '$240load_attr.14': [(<numba.core.ir.Assign object at 0x7c89e8955d80>,
                                   212)],
             '$244binary_subscr.16': [(<numba.core.ir.Assign object at 0x7c89e881c640>,
                                       212)],
             '$246call_function.17': [(<numba.core.ir.Assign object at 0x7c89e8956260>,
                                       212)],
             '$248build_slice.18': [(<numba.core.ir.Assign object at 0x7c89e8956380>,
                                     212)],
             '$248build_slice.19': [(<numba.core.ir.Assign object at 0x7c89e89564a0>,
                                     212)],
             '$250binary_subscr.20': [(<numba.core.ir.Assign object at 0x7c89e8956650>,
                                       212)],
             '$262binary_subscr.26': [(<numba.core.ir.Assign object at 0x7c89e8956e90>,
                                       212)],
             '$268binary_subscr.29': [(<numba.core.ir.Assign object at 0x7c89e8957250>,
                                       212)],
             '$26binary_subscr.12': [(<numba.core.ir.Assign object at 0x7c89e89860b0>,
                                      0)],
             '$274binary_add.32': [(<numba.core.ir.Assign object at 0x7c89e8957610>,
                                    212)],
             '$276compare_op.33': [(<numba.core.ir.Assign object at 0x7c89e8957790>,
                                    212)],
             '$278inplace_and.34': [(<numba.core.ir.Assign object at 0x7c89e8957910>,
                                     212)],
             '$288binary_subscr.37': [(<numba.core.ir.Assign object at 0x7c89e8957d90>,
                                       212)],
             '$28call_function.13': [(<numba.core.ir.Assign object at 0x7c89e856f850>,
                                      0)],
             '$290pred': [(<numba.core.ir.Assign object at 0x7c89e8924040>,
                           212)],
             '$296inplace_add.2': [(<numba.core.ir.Assign object at 0x7c89e8957130>,
                                    292)],
             '$308binary_add.3': [(<numba.core.ir.Assign object at 0x7c89e855f670>,
                                   302)],
             '$30build_slice.14': [(<numba.core.ir.Assign object at 0x7c89e85b1090>,
                                    0)],
             '$30build_slice.15': [(<numba.core.ir.Assign object at 0x7c89e85b1030>,
                                    0)],
             '$310inplace_add.4': [(<numba.core.ir.Assign object at 0x7c89e855f910>,
                                    302)],
             '$318load_attr.7': [(<numba.core.ir.Assign object at 0x7c89e855fd60>,
                                  302)],
             '$322binary_subscr.9': [(<numba.core.ir.Assign object at 0x7c89e881dc30>,
                                      302)],
             '$324compare_op.10': [(<numba.core.ir.Assign object at 0x7c89e8986140>,
                                    302)],
             '$326pred': [(<numba.core.ir.Assign object at 0x7c89e8985900>,
                           302)],
             '$32binary_subscr.16': [(<numba.core.ir.Assign object at 0x7c89e87bcee0>,
                                      0)],
             '$330return_value.1': [(<numba.core.ir.Assign object at 0x7c89e89855a0>,
                                     328)],
             '$334return_value.1': [(<numba.core.ir.Assign object at 0x7c89e89852a0>,
                                     332)],
             '$34call_method.17': [(<numba.core.ir.Assign object at 0x7c89e87bc790>,
                                    0)],
             '$36compare_op.18': [(<numba.core.ir.Assign object at 0x7c89e87bc4f0>,
                                   0)],
             '$50binary_subscr.25': [(<numba.core.ir.Assign object at 0x7c89e8985ff0>,
                                      0)],
             '$56binary_subscr.28': [(<numba.core.ir.Assign object at 0x7c89e8986080>,
                                      0)],
             '$58load_global.29': [(<numba.core.ir.Assign object at 0x7c89e8986740>,
                                    0)],
             '$60load_method.30': [(<numba.core.ir.Assign object at 0x7c89e89868c0>,
                                    0)],
             '$66load_global.33': [(<numba.core.ir.Assign object at 0x7c89e8986ce0>,
                                    0)],
             '$6binary_subscr.2': [(<numba.core.ir.Assign object at 0x7c89e8984430>,
                                    0)],
             '$72load_attr.36': [(<numba.core.ir.Assign object at 0x7c89e89870a0>,
                                  0)],
             '$76binary_subscr.38': [(<numba.core.ir.Assign object at 0x7c89e8985330>,
                                      0)],
             '$78call_function.39': [(<numba.core.ir.Assign object at 0x7c89e8987580>,
                                      0)],
             '$80build_slice.40': [(<numba.core.ir.Assign object at 0x7c89e89876a0>,
                                    0)],
             '$80build_slice.41': [(<numba.core.ir.Assign object at 0x7c89e89877c0>,
                                    0)],
             '$82binary_subscr.42': [(<numba.core.ir.Assign object at 0x7c89e8987970>,
                                      0)],
             '$84call_method.43': [(<numba.core.ir.Assign object at 0x7c89e8987b50>,
                                    0)],
             '$88binary_add.45': [(<numba.core.ir.Assign object at 0x7c89e8987d90>,
                                   0)],
             '$8load_global.3': [(<numba.core.ir.Assign object at 0x7c89e88addb0>,
                                  0)],
             '$90compare_op.46': [(<numba.core.ir.Assign object at 0x7c89e8987f10>,
                                   0)],
             '$92inplace_and.47': [(<numba.core.ir.Assign object at 0x7c89e89e00d0>,
                                    0)],
             '$const100.49': [(<numba.core.ir.Assign object at 0x7c89e89e0400>,
                               0)],
             '$const108.1': [(<numba.core.ir.Assign object at 0x7c89e89869e0>,
                              106)],
             '$const126.3': [(<numba.core.ir.Assign object at 0x7c89e89e11e0>,
                              120)],
             '$const14.6': [(<numba.core.ir.Assign object at 0x7c89f02d99c0>,
                             0)],
             '$const142.4': [(<numba.core.ir.Assign object at 0x7c89e89e1f00>,
                              134)],
             '$const164.15': [(<numba.core.ir.Assign object at 0x7c89e89e2da0>,
                               134)],
             '$const204.1': [(<numba.core.ir.Assign object at 0x7c89e89e39a0>,
                              202)],
             '$const220.4': [(<numba.core.ir.Assign object at 0x7c89e8955060>,
                              212)],
             '$const24.11': [(<numba.core.ir.Assign object at 0x7c89e8834df0>,
                              0)],
             '$const242.15': [(<numba.core.ir.Assign object at 0x7c89e8955f00>,
                               212)],
             '$const294.1': [(<numba.core.ir.Assign object at 0x7c89e8956b00>,
                              292)],
             '$const306.2': [(<numba.core.ir.Assign object at 0x7c89e881fee0>,
                              302)],
             '$const320.8': [(<numba.core.ir.Assign object at 0x7c89e855fee0>,
                              302)],
             '$const328.0': [(<numba.core.ir.Assign object at 0x7c89e8985870>,
                              328)],
             '$const332.0': [(<numba.core.ir.Assign object at 0x7c89e8985510>,
                              332)],
             '$const4.1': [(<numba.core.ir.Assign object at 0x7c89e88acd00>,
                            0)],
             '$const40.20': [(<numba.core.ir.Assign object at 0x7c89e8790820>,
                              0)],
             '$const46.22': [(<numba.core.ir.Assign object at 0x7c89e8768130>,
                              0)],
             '$const54.27': [(<numba.core.ir.Assign object at 0x7c89e89864a0>,
                              0)],
             '$const64.32': [(<numba.core.ir.Assign object at 0x7c89e8986b60>,
                              0)],
             '$const74.37': [(<numba.core.ir.Assign object at 0x7c89e8987220>,
                              0)],
             'avgn': [(<numba.core.ir.Assign object at 0x7c89e8956830>, 212)],
             'bool104': [(<numba.core.ir.Assign object at 0x7c89e89e0700>, 0)],
             'bool132': [(<numba.core.ir.Assign object at 0x7c89e89e1660>,
                          120)],
             'bool200': [(<numba.core.ir.Assign object at 0x7c89e8954640>,
                          134)],
             'bool290': [(<numba.core.ir.Assign object at 0x7c89e8957ee0>,
                          212)],
             'bool326': [(<numba.core.ir.Assign object at 0x7c89e8985d20>,
                          302)],
             'delta': [(<numba.core.ir.Assign object at 0x7c89e88a5570>, 0)],
             'maxn': [(<numba.core.ir.Assign object at 0x7c89e89e36d0>, 134)],
             'n': [(<numba.core.ir.Assign object at 0x7c89e881c760>, 106),
                   (<numba.core.ir.Assign object at 0x7c89e89e0b80>, 116),
                   (<numba.core.ir.Assign object at 0x7c89e8954820>, 202),
                   (<numba.core.ir.Assign object at 0x7c89e89574f0>, 292),
                   (<numba.core.ir.Assign object at 0x7c89e855f9d0>, 302)],
             'peaks': [(<numba.core.ir.Assign object at 0x7c89e88ae260>, 0)],
             'post_avg': [(<numba.core.ir.Assign object at 0x7c89e88a5ed0>, 0)],
             'post_max': [(<numba.core.ir.Assign object at 0x7c89e88a5ab0>, 0)],
             'pre_avg': [(<numba.core.ir.Assign object at 0x7c89e88a7bb0>, 0)],
             'pre_max': [(<numba.core.ir.Assign object at 0x7c89e88a7520>, 0)],
             'wait': [(<numba.core.ir.Assign object at 0x7c89e88a6f50>, 0)],
             'x': [(<numba.core.ir.Assign object at 0x7c89e88a5600>, 0)]})
2025-01-31 15:31:42,395 - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x7c89ebe66350>
2025-01-31 15:31:42,395 - DEBUG - Fix SSA violator on var n
2025-01-31 15:31:42,395 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-31 15:31:42,396 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e8954910>
2025-01-31 15:31:42,396 - DEBUG - on stmt: x = arg(0, name=x)
2025-01-31 15:31:42,396 - DEBUG - on stmt: pre_max = arg(1, name=pre_max)
2025-01-31 15:31:42,396 - DEBUG - on stmt: post_max = arg(2, name=post_max)
2025-01-31 15:31:42,396 - DEBUG - on stmt: pre_avg = arg(3, name=pre_avg)
2025-01-31 15:31:42,396 - DEBUG - on stmt: post_avg = arg(4, name=post_avg)
2025-01-31 15:31:42,396 - DEBUG - on stmt: delta = arg(5, name=delta)
2025-01-31 15:31:42,396 - DEBUG - on stmt: wait = arg(6, name=wait)
2025-01-31 15:31:42,396 - DEBUG - on stmt: peaks = arg(7, name=peaks)
2025-01-31 15:31:42,396 - DEBUG - on stmt: $const4.1 = const(int, 0)
2025-01-31 15:31:42,396 - DEBUG - on stmt: $6binary_subscr.2 = static_getitem(value=x, index=0, index_var=$const4.1, fn=<built-in function getitem>)
2025-01-31 15:31:42,396 - DEBUG - on stmt: $8load_global.3 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:42,396 - DEBUG - on stmt: $10load_method.4 = getattr(value=$8load_global.3, attr=max)
2025-01-31 15:31:42,396 - DEBUG - on stmt: $const14.6 = const(NoneType, None)
2025-01-31 15:31:42,396 - DEBUG - on stmt: $16load_global.7 = global(min: <built-in function min>)
2025-01-31 15:31:42,396 - DEBUG - on stmt: $22load_attr.10 = getattr(value=x, attr=shape)
2025-01-31 15:31:42,396 - DEBUG - on stmt: $const24.11 = const(int, 0)
2025-01-31 15:31:42,396 - DEBUG - on stmt: $26binary_subscr.12 = static_getitem(value=$22load_attr.10, index=0, index_var=$const24.11, fn=<built-in function getitem>)
2025-01-31 15:31:42,396 - DEBUG - on stmt: $28call_function.13 = call $16load_global.7(post_max, $26binary_subscr.12, func=$16load_global.7, args=[Var(post_max, utils.py:1209), Var($26binary_subscr.12, utils.py:1221)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,396 - DEBUG - on stmt: $30build_slice.14 = global(slice: <class 'slice'>)
2025-01-31 15:31:42,396 - DEBUG - on stmt: $30build_slice.15 = call $30build_slice.14($const14.6, $28call_function.13, func=$30build_slice.14, args=(Var($const14.6, utils.py:1221), Var($28call_function.13, utils.py:1221)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,396 - DEBUG - on stmt: $32binary_subscr.16 = getitem(value=x, index=$30build_slice.15, fn=<built-in function getitem>)
2025-01-31 15:31:42,396 - DEBUG - on stmt: $34call_method.17 = call $10load_method.4($32binary_subscr.16, func=$10load_method.4, args=[Var($32binary_subscr.16, utils.py:1221)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,396 - DEBUG - on stmt: $36compare_op.18 = $6binary_subscr.2 >= $34call_method.17
2025-01-31 15:31:42,396 - DEBUG - on stmt: $const40.20 = const(int, 0)
2025-01-31 15:31:42,396 - DEBUG - on stmt: peaks[0] = $36compare_op.18
2025-01-31 15:31:42,396 - DEBUG - on stmt: $const46.22 = const(int, 0)
2025-01-31 15:31:42,397 - DEBUG - on stmt: $50binary_subscr.25 = static_getitem(value=peaks, index=0, index_var=$const46.22, fn=<built-in function getitem>)
2025-01-31 15:31:42,397 - DEBUG - on stmt: $const54.27 = const(int, 0)
2025-01-31 15:31:42,397 - DEBUG - on stmt: $56binary_subscr.28 = static_getitem(value=x, index=0, index_var=$const54.27, fn=<built-in function getitem>)
2025-01-31 15:31:42,397 - DEBUG - on stmt: $58load_global.29 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:42,397 - DEBUG - on stmt: $60load_method.30 = getattr(value=$58load_global.29, attr=mean)
2025-01-31 15:31:42,397 - DEBUG - on stmt: $const64.32 = const(NoneType, None)
2025-01-31 15:31:42,397 - DEBUG - on stmt: $66load_global.33 = global(min: <built-in function min>)
2025-01-31 15:31:42,397 - DEBUG - on stmt: $72load_attr.36 = getattr(value=x, attr=shape)
2025-01-31 15:31:42,397 - DEBUG - on stmt: $const74.37 = const(int, 0)
2025-01-31 15:31:42,397 - DEBUG - on stmt: $76binary_subscr.38 = static_getitem(value=$72load_attr.36, index=0, index_var=$const74.37, fn=<built-in function getitem>)
2025-01-31 15:31:42,397 - DEBUG - on stmt: $78call_function.39 = call $66load_global.33(post_avg, $76binary_subscr.38, func=$66load_global.33, args=[Var(post_avg, utils.py:1209), Var($76binary_subscr.38, utils.py:1222)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,397 - DEBUG - on stmt: $80build_slice.40 = global(slice: <class 'slice'>)
2025-01-31 15:31:42,397 - DEBUG - on stmt: $80build_slice.41 = call $80build_slice.40($const64.32, $78call_function.39, func=$80build_slice.40, args=(Var($const64.32, utils.py:1222), Var($78call_function.39, utils.py:1222)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,397 - DEBUG - on stmt: $82binary_subscr.42 = getitem(value=x, index=$80build_slice.41, fn=<built-in function getitem>)
2025-01-31 15:31:42,397 - DEBUG - on stmt: $84call_method.43 = call $60load_method.30($82binary_subscr.42, func=$60load_method.30, args=[Var($82binary_subscr.42, utils.py:1222)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,397 - DEBUG - on stmt: $88binary_add.45 = $84call_method.43 + delta
2025-01-31 15:31:42,397 - DEBUG - on stmt: $90compare_op.46 = $56binary_subscr.28 >= $88binary_add.45
2025-01-31 15:31:42,397 - DEBUG - on stmt: $92inplace_and.47 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$50binary_subscr.25, rhs=$90compare_op.46, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:42,397 - DEBUG - on stmt: peaks[0] = $92inplace_and.47
2025-01-31 15:31:42,397 - DEBUG - on stmt: $const100.49 = const(int, 0)
2025-01-31 15:31:42,397 - DEBUG - on stmt: $102binary_subscr.50 = static_getitem(value=peaks, index=0, index_var=$const100.49, fn=<built-in function getitem>)
2025-01-31 15:31:42,397 - DEBUG - on stmt: bool104 = global(bool: <class 'bool'>)
2025-01-31 15:31:42,397 - DEBUG - on stmt: $104pred = call bool104($102binary_subscr.50, func=bool104, args=(Var($102binary_subscr.50, utils.py:1224),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,397 - DEBUG - on stmt: branch $104pred, 106, 116
2025-01-31 15:31:42,397 - DEBUG - ==== SSA block rewrite pass on 106
2025-01-31 15:31:42,398 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e8954910>
2025-01-31 15:31:42,398 - DEBUG - on stmt: $const108.1 = const(int, 1)
2025-01-31 15:31:42,398 - DEBUG - on stmt: n = wait + $const108.1
2025-01-31 15:31:42,398 - DEBUG - first assign: n
2025-01-31 15:31:42,398 - DEBUG - replaced with: n = wait + $const108.1
2025-01-31 15:31:42,398 - DEBUG - on stmt: jump 120
2025-01-31 15:31:42,398 - DEBUG - ==== SSA block rewrite pass on 116
2025-01-31 15:31:42,398 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e8954910>
2025-01-31 15:31:42,398 - DEBUG - on stmt: n = const(int, 1)
2025-01-31 15:31:42,398 - DEBUG - replaced with: n.1 = const(int, 1)
2025-01-31 15:31:42,398 - DEBUG - on stmt: jump 120
2025-01-31 15:31:42,398 - DEBUG - ==== SSA block rewrite pass on 120
2025-01-31 15:31:42,398 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e8954910>
2025-01-31 15:31:42,398 - DEBUG - on stmt: $124load_attr.2 = getattr(value=x, attr=shape)
2025-01-31 15:31:42,398 - DEBUG - on stmt: $const126.3 = const(int, 0)
2025-01-31 15:31:42,398 - DEBUG - on stmt: $128binary_subscr.4 = static_getitem(value=$124load_attr.2, index=0, index_var=$const126.3, fn=<built-in function getitem>)
2025-01-31 15:31:42,398 - DEBUG - on stmt: $130compare_op.5 = n < $128binary_subscr.4
2025-01-31 15:31:42,398 - DEBUG - on stmt: bool132 = global(bool: <class 'bool'>)
2025-01-31 15:31:42,398 - DEBUG - on stmt: $132pred = call bool132($130compare_op.5, func=bool132, args=(Var($130compare_op.5, utils.py:1229),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,398 - DEBUG - on stmt: branch $132pred, 134, 332
2025-01-31 15:31:42,398 - DEBUG - ==== SSA block rewrite pass on 134
2025-01-31 15:31:42,398 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e8954910>
2025-01-31 15:31:42,398 - DEBUG - on stmt: $134load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:42,398 - DEBUG - on stmt: $136load_method.1 = getattr(value=$134load_global.0, attr=max)
2025-01-31 15:31:42,398 - DEBUG - on stmt: $140load_global.3 = global(max: <built-in function max>)
2025-01-31 15:31:42,398 - DEBUG - on stmt: $const142.4 = const(int, 0)
2025-01-31 15:31:42,398 - DEBUG - on stmt: $148binary_subtract.7 = n - pre_max
2025-01-31 15:31:42,398 - DEBUG - on stmt: $150call_function.8 = call $140load_global.3($const142.4, $148binary_subtract.7, func=$140load_global.3, args=[Var($const142.4, utils.py:1230), Var($148binary_subtract.7, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,399 - DEBUG - on stmt: $152load_global.9 = global(min: <built-in function min>)
2025-01-31 15:31:42,399 - DEBUG - on stmt: $158binary_add.12 = n + post_max
2025-01-31 15:31:42,399 - DEBUG - on stmt: $162load_attr.14 = getattr(value=x, attr=shape)
2025-01-31 15:31:42,399 - DEBUG - on stmt: $const164.15 = const(int, 0)
2025-01-31 15:31:42,399 - DEBUG - on stmt: $166binary_subscr.16 = static_getitem(value=$162load_attr.14, index=0, index_var=$const164.15, fn=<built-in function getitem>)
2025-01-31 15:31:42,399 - DEBUG - on stmt: $168call_function.17 = call $152load_global.9($158binary_add.12, $166binary_subscr.16, func=$152load_global.9, args=[Var($158binary_add.12, utils.py:1230), Var($166binary_subscr.16, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,399 - DEBUG - on stmt: $170build_slice.18 = global(slice: <class 'slice'>)
2025-01-31 15:31:42,399 - DEBUG - on stmt: $170build_slice.19 = call $170build_slice.18($150call_function.8, $168call_function.17, func=$170build_slice.18, args=(Var($150call_function.8, utils.py:1230), Var($168call_function.17, utils.py:1230)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,399 - DEBUG - on stmt: $172binary_subscr.20 = getitem(value=x, index=$170build_slice.19, fn=<built-in function getitem>)
2025-01-31 15:31:42,399 - DEBUG - on stmt: maxn = call $136load_method.1($172binary_subscr.20, func=$136load_method.1, args=[Var($172binary_subscr.20, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,399 - DEBUG - on stmt: $182binary_subscr.24 = getitem(value=x, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:42,399 - DEBUG - on stmt: $186compare_op.26 = $182binary_subscr.24 == maxn
2025-01-31 15:31:42,399 - DEBUG - on stmt: peaks[n] = $186compare_op.26
2025-01-31 15:31:42,399 - DEBUG - on stmt: $198binary_subscr.31 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:42,399 - DEBUG - on stmt: bool200 = global(bool: <class 'bool'>)
2025-01-31 15:31:42,399 - DEBUG - on stmt: $200pred = call bool200($198binary_subscr.31, func=bool200, args=(Var($198binary_subscr.31, utils.py:1235),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,399 - DEBUG - on stmt: branch $200pred, 212, 202
2025-01-31 15:31:42,399 - DEBUG - ==== SSA block rewrite pass on 202
2025-01-31 15:31:42,399 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e8954910>
2025-01-31 15:31:42,399 - DEBUG - on stmt: $const204.1 = const(int, 1)
2025-01-31 15:31:42,399 - DEBUG - on stmt: $206inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const204.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:42,399 - DEBUG - on stmt: n = $206inplace_add.2
2025-01-31 15:31:42,399 - DEBUG - replaced with: n.2 = $206inplace_add.2
2025-01-31 15:31:42,399 - DEBUG - on stmt: jump 333
2025-01-31 15:31:42,399 - DEBUG - ==== SSA block rewrite pass on 212
2025-01-31 15:31:42,399 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e8954910>
2025-01-31 15:31:42,399 - DEBUG - on stmt: $212load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:42,400 - DEBUG - on stmt: $214load_method.1 = getattr(value=$212load_global.0, attr=mean)
2025-01-31 15:31:42,400 - DEBUG - on stmt: $218load_global.3 = global(max: <built-in function max>)
2025-01-31 15:31:42,400 - DEBUG - on stmt: $const220.4 = const(int, 0)
2025-01-31 15:31:42,400 - DEBUG - on stmt: $226binary_subtract.7 = n - pre_avg
2025-01-31 15:31:42,400 - DEBUG - on stmt: $228call_function.8 = call $218load_global.3($const220.4, $226binary_subtract.7, func=$218load_global.3, args=[Var($const220.4, utils.py:1239), Var($226binary_subtract.7, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,400 - DEBUG - on stmt: $230load_global.9 = global(min: <built-in function min>)
2025-01-31 15:31:42,400 - DEBUG - on stmt: $236binary_add.12 = n + post_avg
2025-01-31 15:31:42,400 - DEBUG - on stmt: $240load_attr.14 = getattr(value=x, attr=shape)
2025-01-31 15:31:42,400 - DEBUG - on stmt: $const242.15 = const(int, 0)
2025-01-31 15:31:42,400 - DEBUG - on stmt: $244binary_subscr.16 = static_getitem(value=$240load_attr.14, index=0, index_var=$const242.15, fn=<built-in function getitem>)
2025-01-31 15:31:42,400 - DEBUG - on stmt: $246call_function.17 = call $230load_global.9($236binary_add.12, $244binary_subscr.16, func=$230load_global.9, args=[Var($236binary_add.12, utils.py:1239), Var($244binary_subscr.16, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,400 - DEBUG - on stmt: $248build_slice.18 = global(slice: <class 'slice'>)
2025-01-31 15:31:42,400 - DEBUG - on stmt: $248build_slice.19 = call $248build_slice.18($228call_function.8, $246call_function.17, func=$248build_slice.18, args=(Var($228call_function.8, utils.py:1239), Var($246call_function.17, utils.py:1239)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,400 - DEBUG - on stmt: $250binary_subscr.20 = getitem(value=x, index=$248build_slice.19, fn=<built-in function getitem>)
2025-01-31 15:31:42,400 - DEBUG - on stmt: avgn = call $214load_method.1($250binary_subscr.20, func=$214load_method.1, args=[Var($250binary_subscr.20, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,400 - DEBUG - on stmt: $262binary_subscr.26 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:42,400 - DEBUG - on stmt: $268binary_subscr.29 = getitem(value=x, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:42,400 - DEBUG - on stmt: $274binary_add.32 = avgn + delta
2025-01-31 15:31:42,400 - DEBUG - on stmt: $276compare_op.33 = $268binary_subscr.29 >= $274binary_add.32
2025-01-31 15:31:42,400 - DEBUG - on stmt: $278inplace_and.34 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$262binary_subscr.26, rhs=$276compare_op.33, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:42,400 - DEBUG - on stmt: peaks[n] = $278inplace_and.34
2025-01-31 15:31:42,400 - DEBUG - on stmt: $288binary_subscr.37 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:42,400 - DEBUG - on stmt: bool290 = global(bool: <class 'bool'>)
2025-01-31 15:31:42,400 - DEBUG - on stmt: $290pred = call bool290($288binary_subscr.37, func=bool290, args=(Var($288binary_subscr.37, utils.py:1242),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,400 - DEBUG - on stmt: branch $290pred, 302, 292
2025-01-31 15:31:42,401 - DEBUG - ==== SSA block rewrite pass on 292
2025-01-31 15:31:42,401 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e8954910>
2025-01-31 15:31:42,401 - DEBUG - on stmt: $const294.1 = const(int, 1)
2025-01-31 15:31:42,401 - DEBUG - on stmt: $296inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const294.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:42,401 - DEBUG - on stmt: n = $296inplace_add.2
2025-01-31 15:31:42,401 - DEBUG - replaced with: n.3 = $296inplace_add.2
2025-01-31 15:31:42,401 - DEBUG - on stmt: jump 333
2025-01-31 15:31:42,401 - DEBUG - ==== SSA block rewrite pass on 302
2025-01-31 15:31:42,401 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e8954910>
2025-01-31 15:31:42,401 - DEBUG - on stmt: $const306.2 = const(int, 1)
2025-01-31 15:31:42,401 - DEBUG - on stmt: $308binary_add.3 = wait + $const306.2
2025-01-31 15:31:42,401 - DEBUG - on stmt: $310inplace_add.4 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$308binary_add.3, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:42,401 - DEBUG - on stmt: n = $310inplace_add.4
2025-01-31 15:31:42,401 - DEBUG - replaced with: n.4 = $310inplace_add.4
2025-01-31 15:31:42,401 - DEBUG - on stmt: $318load_attr.7 = getattr(value=x, attr=shape)
2025-01-31 15:31:42,401 - DEBUG - on stmt: $const320.8 = const(int, 0)
2025-01-31 15:31:42,401 - DEBUG - on stmt: $322binary_subscr.9 = static_getitem(value=$318load_attr.7, index=0, index_var=$const320.8, fn=<built-in function getitem>)
2025-01-31 15:31:42,401 - DEBUG - on stmt: $324compare_op.10 = n < $322binary_subscr.9
2025-01-31 15:31:42,401 - DEBUG - on stmt: bool326 = global(bool: <class 'bool'>)
2025-01-31 15:31:42,401 - DEBUG - on stmt: $326pred = call bool326($324compare_op.10, func=bool326, args=(Var($324compare_op.10, utils.py:1229),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,401 - DEBUG - on stmt: branch $326pred, 134, 328
2025-01-31 15:31:42,401 - DEBUG - ==== SSA block rewrite pass on 328
2025-01-31 15:31:42,401 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e8954910>
2025-01-31 15:31:42,401 - DEBUG - on stmt: $const328.0 = const(NoneType, None)
2025-01-31 15:31:42,401 - DEBUG - on stmt: $330return_value.1 = cast(value=$const328.0)
2025-01-31 15:31:42,401 - DEBUG - on stmt: return $330return_value.1
2025-01-31 15:31:42,401 - DEBUG - ==== SSA block rewrite pass on 332
2025-01-31 15:31:42,401 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e8954910>
2025-01-31 15:31:42,401 - DEBUG - on stmt: $const332.0 = const(NoneType, None)
2025-01-31 15:31:42,402 - DEBUG - on stmt: $334return_value.1 = cast(value=$const332.0)
2025-01-31 15:31:42,402 - DEBUG - on stmt: return $334return_value.1
2025-01-31 15:31:42,402 - DEBUG - ==== SSA block rewrite pass on 333
2025-01-31 15:31:42,402 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e8954910>
2025-01-31 15:31:42,402 - DEBUG - on stmt: jump 120
2025-01-31 15:31:42,402 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {106: [<numba.core.ir.Assign object at 0x7c89e89849d0>],
             116: [<numba.core.ir.Assign object at 0x7c89e8986350>],
             202: [<numba.core.ir.Assign object at 0x7c89e8984250>],
             292: [<numba.core.ir.Assign object at 0x7c89e8984040>],
             302: [<numba.core.ir.Assign object at 0x7c89e8984070>]})
2025-01-31 15:31:42,402 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-31 15:31:42,402 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e8954910>
2025-01-31 15:31:42,402 - DEBUG - on stmt: x = arg(0, name=x)
2025-01-31 15:31:42,402 - DEBUG - on stmt: pre_max = arg(1, name=pre_max)
2025-01-31 15:31:42,402 - DEBUG - on stmt: post_max = arg(2, name=post_max)
2025-01-31 15:31:42,402 - DEBUG - on stmt: pre_avg = arg(3, name=pre_avg)
2025-01-31 15:31:42,402 - DEBUG - on stmt: post_avg = arg(4, name=post_avg)
2025-01-31 15:31:42,402 - DEBUG - on stmt: delta = arg(5, name=delta)
2025-01-31 15:31:42,402 - DEBUG - on stmt: wait = arg(6, name=wait)
2025-01-31 15:31:42,402 - DEBUG - on stmt: peaks = arg(7, name=peaks)
2025-01-31 15:31:42,402 - DEBUG - on stmt: $const4.1 = const(int, 0)
2025-01-31 15:31:42,402 - DEBUG - on stmt: $6binary_subscr.2 = static_getitem(value=x, index=0, index_var=$const4.1, fn=<built-in function getitem>)
2025-01-31 15:31:42,402 - DEBUG - on stmt: $8load_global.3 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:42,402 - DEBUG - on stmt: $10load_method.4 = getattr(value=$8load_global.3, attr=max)
2025-01-31 15:31:42,402 - DEBUG - on stmt: $const14.6 = const(NoneType, None)
2025-01-31 15:31:42,402 - DEBUG - on stmt: $16load_global.7 = global(min: <built-in function min>)
2025-01-31 15:31:42,402 - DEBUG - on stmt: $22load_attr.10 = getattr(value=x, attr=shape)
2025-01-31 15:31:42,402 - DEBUG - on stmt: $const24.11 = const(int, 0)
2025-01-31 15:31:42,402 - DEBUG - on stmt: $26binary_subscr.12 = static_getitem(value=$22load_attr.10, index=0, index_var=$const24.11, fn=<built-in function getitem>)
2025-01-31 15:31:42,402 - DEBUG - on stmt: $28call_function.13 = call $16load_global.7(post_max, $26binary_subscr.12, func=$16load_global.7, args=[Var(post_max, utils.py:1209), Var($26binary_subscr.12, utils.py:1221)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,403 - DEBUG - on stmt: $30build_slice.14 = global(slice: <class 'slice'>)
2025-01-31 15:31:42,403 - DEBUG - on stmt: $30build_slice.15 = call $30build_slice.14($const14.6, $28call_function.13, func=$30build_slice.14, args=(Var($const14.6, utils.py:1221), Var($28call_function.13, utils.py:1221)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,403 - DEBUG - on stmt: $32binary_subscr.16 = getitem(value=x, index=$30build_slice.15, fn=<built-in function getitem>)
2025-01-31 15:31:42,403 - DEBUG - on stmt: $34call_method.17 = call $10load_method.4($32binary_subscr.16, func=$10load_method.4, args=[Var($32binary_subscr.16, utils.py:1221)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,403 - DEBUG - on stmt: $36compare_op.18 = $6binary_subscr.2 >= $34call_method.17
2025-01-31 15:31:42,403 - DEBUG - on stmt: $const40.20 = const(int, 0)
2025-01-31 15:31:42,403 - DEBUG - on stmt: peaks[0] = $36compare_op.18
2025-01-31 15:31:42,403 - DEBUG - on stmt: $const46.22 = const(int, 0)
2025-01-31 15:31:42,403 - DEBUG - on stmt: $50binary_subscr.25 = static_getitem(value=peaks, index=0, index_var=$const46.22, fn=<built-in function getitem>)
2025-01-31 15:31:42,403 - DEBUG - on stmt: $const54.27 = const(int, 0)
2025-01-31 15:31:42,403 - DEBUG - on stmt: $56binary_subscr.28 = static_getitem(value=x, index=0, index_var=$const54.27, fn=<built-in function getitem>)
2025-01-31 15:31:42,403 - DEBUG - on stmt: $58load_global.29 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:42,403 - DEBUG - on stmt: $60load_method.30 = getattr(value=$58load_global.29, attr=mean)
2025-01-31 15:31:42,403 - DEBUG - on stmt: $const64.32 = const(NoneType, None)
2025-01-31 15:31:42,403 - DEBUG - on stmt: $66load_global.33 = global(min: <built-in function min>)
2025-01-31 15:31:42,403 - DEBUG - on stmt: $72load_attr.36 = getattr(value=x, attr=shape)
2025-01-31 15:31:42,403 - DEBUG - on stmt: $const74.37 = const(int, 0)
2025-01-31 15:31:42,403 - DEBUG - on stmt: $76binary_subscr.38 = static_getitem(value=$72load_attr.36, index=0, index_var=$const74.37, fn=<built-in function getitem>)
2025-01-31 15:31:42,403 - DEBUG - on stmt: $78call_function.39 = call $66load_global.33(post_avg, $76binary_subscr.38, func=$66load_global.33, args=[Var(post_avg, utils.py:1209), Var($76binary_subscr.38, utils.py:1222)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,403 - DEBUG - on stmt: $80build_slice.40 = global(slice: <class 'slice'>)
2025-01-31 15:31:42,403 - DEBUG - on stmt: $80build_slice.41 = call $80build_slice.40($const64.32, $78call_function.39, func=$80build_slice.40, args=(Var($const64.32, utils.py:1222), Var($78call_function.39, utils.py:1222)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,403 - DEBUG - on stmt: $82binary_subscr.42 = getitem(value=x, index=$80build_slice.41, fn=<built-in function getitem>)
2025-01-31 15:31:42,403 - DEBUG - on stmt: $84call_method.43 = call $60load_method.30($82binary_subscr.42, func=$60load_method.30, args=[Var($82binary_subscr.42, utils.py:1222)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,404 - DEBUG - on stmt: $88binary_add.45 = $84call_method.43 + delta
2025-01-31 15:31:42,404 - DEBUG - on stmt: $90compare_op.46 = $56binary_subscr.28 >= $88binary_add.45
2025-01-31 15:31:42,404 - DEBUG - on stmt: $92inplace_and.47 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$50binary_subscr.25, rhs=$90compare_op.46, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:42,404 - DEBUG - on stmt: peaks[0] = $92inplace_and.47
2025-01-31 15:31:42,404 - DEBUG - on stmt: $const100.49 = const(int, 0)
2025-01-31 15:31:42,404 - DEBUG - on stmt: $102binary_subscr.50 = static_getitem(value=peaks, index=0, index_var=$const100.49, fn=<built-in function getitem>)
2025-01-31 15:31:42,404 - DEBUG - on stmt: bool104 = global(bool: <class 'bool'>)
2025-01-31 15:31:42,404 - DEBUG - on stmt: $104pred = call bool104($102binary_subscr.50, func=bool104, args=(Var($102binary_subscr.50, utils.py:1224),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,404 - DEBUG - on stmt: branch $104pred, 106, 116
2025-01-31 15:31:42,404 - DEBUG - ==== SSA block rewrite pass on 106
2025-01-31 15:31:42,404 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e8954910>
2025-01-31 15:31:42,404 - DEBUG - on stmt: $const108.1 = const(int, 1)
2025-01-31 15:31:42,404 - DEBUG - on stmt: n = wait + $const108.1
2025-01-31 15:31:42,404 - DEBUG - on stmt: jump 120
2025-01-31 15:31:42,404 - DEBUG - ==== SSA block rewrite pass on 116
2025-01-31 15:31:42,404 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e8954910>
2025-01-31 15:31:42,404 - DEBUG - on stmt: n.1 = const(int, 1)
2025-01-31 15:31:42,404 - DEBUG - on stmt: jump 120
2025-01-31 15:31:42,404 - DEBUG - ==== SSA block rewrite pass on 120
2025-01-31 15:31:42,404 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e8954910>
2025-01-31 15:31:42,404 - DEBUG - on stmt: $124load_attr.2 = getattr(value=x, attr=shape)
2025-01-31 15:31:42,404 - DEBUG - on stmt: $const126.3 = const(int, 0)
2025-01-31 15:31:42,404 - DEBUG - on stmt: $128binary_subscr.4 = static_getitem(value=$124load_attr.2, index=0, index_var=$const126.3, fn=<built-in function getitem>)
2025-01-31 15:31:42,404 - DEBUG - on stmt: $130compare_op.5 = n < $128binary_subscr.4
2025-01-31 15:31:42,404 - DEBUG - find_def var='n' stmt=$130compare_op.5 = n < $128binary_subscr.4
2025-01-31 15:31:42,404 - DEBUG - find_def_from_top label 120
2025-01-31 15:31:42,405 - DEBUG - insert phi node n.5 = phi(incoming_values=[], incoming_blocks=[]) at 120
2025-01-31 15:31:42,405 - DEBUG - find_def_from_bottom label 106
2025-01-31 15:31:42,405 - DEBUG - incoming_def n = wait + $const108.1
2025-01-31 15:31:42,405 - DEBUG - find_def_from_bottom label 116
2025-01-31 15:31:42,405 - DEBUG - incoming_def n.1 = const(int, 1)
2025-01-31 15:31:42,405 - DEBUG - find_def_from_bottom label 333
2025-01-31 15:31:42,405 - DEBUG - find_def_from_top label 333
2025-01-31 15:31:42,405 - DEBUG - insert phi node n.6 = phi(incoming_values=[], incoming_blocks=[]) at 333
2025-01-31 15:31:42,405 - DEBUG - find_def_from_bottom label 202
2025-01-31 15:31:42,405 - DEBUG - incoming_def n.2 = $206inplace_add.2
2025-01-31 15:31:42,405 - DEBUG - find_def_from_bottom label 292
2025-01-31 15:31:42,405 - DEBUG - incoming_def n.3 = $296inplace_add.2
2025-01-31 15:31:42,405 - DEBUG - incoming_def n.6 = phi(incoming_values=[Var(n.2, utils.py:1236), Var(n.3, utils.py:1243)], incoming_blocks=[202, 292])
2025-01-31 15:31:42,405 - DEBUG - replaced with: $130compare_op.5 = n.5 < $128binary_subscr.4
2025-01-31 15:31:42,405 - DEBUG - on stmt: bool132 = global(bool: <class 'bool'>)
2025-01-31 15:31:42,405 - DEBUG - on stmt: $132pred = call bool132($130compare_op.5, func=bool132, args=(Var($130compare_op.5, utils.py:1229),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,405 - DEBUG - on stmt: branch $132pred, 134, 332
2025-01-31 15:31:42,405 - DEBUG - ==== SSA block rewrite pass on 134
2025-01-31 15:31:42,405 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e8954910>
2025-01-31 15:31:42,405 - DEBUG - on stmt: $134load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:42,405 - DEBUG - on stmt: $136load_method.1 = getattr(value=$134load_global.0, attr=max)
2025-01-31 15:31:42,405 - DEBUG - on stmt: $140load_global.3 = global(max: <built-in function max>)
2025-01-31 15:31:42,405 - DEBUG - on stmt: $const142.4 = const(int, 0)
2025-01-31 15:31:42,405 - DEBUG - on stmt: $148binary_subtract.7 = n - pre_max
2025-01-31 15:31:42,405 - DEBUG - find_def var='n' stmt=$148binary_subtract.7 = n - pre_max
2025-01-31 15:31:42,405 - DEBUG - find_def_from_top label 134
2025-01-31 15:31:42,406 - DEBUG - insert phi node n.7 = phi(incoming_values=[], incoming_blocks=[]) at 134
2025-01-31 15:31:42,406 - DEBUG - find_def_from_bottom label 120
2025-01-31 15:31:42,406 - DEBUG - incoming_def n.5 = phi(incoming_values=[Var(n, utils.py:1225), Var(n.1, utils.py:1227), Var(n.6, utils.py:1229)], incoming_blocks=[106, 116, 333])
2025-01-31 15:31:42,426 - DEBUG - find_def_from_bottom label 302
2025-01-31 15:31:42,426 - DEBUG - incoming_def n.4 = $310inplace_add.4
2025-01-31 15:31:42,426 - DEBUG - replaced with: $148binary_subtract.7 = n.7 - pre_max
2025-01-31 15:31:42,426 - DEBUG - on stmt: $150call_function.8 = call $140load_global.3($const142.4, $148binary_subtract.7, func=$140load_global.3, args=[Var($const142.4, utils.py:1230), Var($148binary_subtract.7, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,427 - DEBUG - on stmt: $152load_global.9 = global(min: <built-in function min>)
2025-01-31 15:31:42,427 - DEBUG - on stmt: $158binary_add.12 = n + post_max
2025-01-31 15:31:42,427 - DEBUG - find_def var='n' stmt=$158binary_add.12 = n + post_max
2025-01-31 15:31:42,427 - DEBUG - replaced with: $158binary_add.12 = n.7 + post_max
2025-01-31 15:31:42,427 - DEBUG - on stmt: $162load_attr.14 = getattr(value=x, attr=shape)
2025-01-31 15:31:42,427 - DEBUG - on stmt: $const164.15 = const(int, 0)
2025-01-31 15:31:42,427 - DEBUG - on stmt: $166binary_subscr.16 = static_getitem(value=$162load_attr.14, index=0, index_var=$const164.15, fn=<built-in function getitem>)
2025-01-31 15:31:42,427 - DEBUG - on stmt: $168call_function.17 = call $152load_global.9($158binary_add.12, $166binary_subscr.16, func=$152load_global.9, args=[Var($158binary_add.12, utils.py:1230), Var($166binary_subscr.16, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,427 - DEBUG - on stmt: $170build_slice.18 = global(slice: <class 'slice'>)
2025-01-31 15:31:42,427 - DEBUG - on stmt: $170build_slice.19 = call $170build_slice.18($150call_function.8, $168call_function.17, func=$170build_slice.18, args=(Var($150call_function.8, utils.py:1230), Var($168call_function.17, utils.py:1230)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,427 - DEBUG - on stmt: $172binary_subscr.20 = getitem(value=x, index=$170build_slice.19, fn=<built-in function getitem>)
2025-01-31 15:31:42,427 - DEBUG - on stmt: maxn = call $136load_method.1($172binary_subscr.20, func=$136load_method.1, args=[Var($172binary_subscr.20, utils.py:1230)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,427 - DEBUG - on stmt: $182binary_subscr.24 = getitem(value=x, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:42,427 - DEBUG - find_def var='n' stmt=$182binary_subscr.24 = getitem(value=x, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:42,427 - DEBUG - replaced with: $182binary_subscr.24 = getitem(value=x, index=n.7, fn=<built-in function getitem>)
2025-01-31 15:31:42,427 - DEBUG - on stmt: $186compare_op.26 = $182binary_subscr.24 == maxn
2025-01-31 15:31:42,427 - DEBUG - on stmt: peaks[n] = $186compare_op.26
2025-01-31 15:31:42,427 - DEBUG - find_def var='n' stmt=peaks[n] = $186compare_op.26
2025-01-31 15:31:42,427 - DEBUG - replaced with: peaks[n.7] = $186compare_op.26
2025-01-31 15:31:42,427 - DEBUG - on stmt: $198binary_subscr.31 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:42,427 - DEBUG - find_def var='n' stmt=$198binary_subscr.31 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:42,428 - DEBUG - replaced with: $198binary_subscr.31 = getitem(value=peaks, index=n.7, fn=<built-in function getitem>)
2025-01-31 15:31:42,428 - DEBUG - on stmt: bool200 = global(bool: <class 'bool'>)
2025-01-31 15:31:42,428 - DEBUG - on stmt: $200pred = call bool200($198binary_subscr.31, func=bool200, args=(Var($198binary_subscr.31, utils.py:1235),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,428 - DEBUG - on stmt: branch $200pred, 212, 202
2025-01-31 15:31:42,428 - DEBUG - ==== SSA block rewrite pass on 202
2025-01-31 15:31:42,428 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e8954910>
2025-01-31 15:31:42,428 - DEBUG - on stmt: $const204.1 = const(int, 1)
2025-01-31 15:31:42,428 - DEBUG - on stmt: $206inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const204.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:42,428 - DEBUG - find_def var='n' stmt=$206inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const204.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:42,428 - DEBUG - find_def_from_top label 202
2025-01-31 15:31:42,428 - DEBUG - idom 134 from label 202
2025-01-31 15:31:42,428 - DEBUG - find_def_from_bottom label 134
2025-01-31 15:31:42,428 - DEBUG - replaced with: $206inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n.7, rhs=$const204.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:42,428 - DEBUG - on stmt: n.2 = $206inplace_add.2
2025-01-31 15:31:42,428 - DEBUG - on stmt: jump 333
2025-01-31 15:31:42,428 - DEBUG - ==== SSA block rewrite pass on 212
2025-01-31 15:31:42,428 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e8954910>
2025-01-31 15:31:42,428 - DEBUG - on stmt: $212load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:42,428 - DEBUG - on stmt: $214load_method.1 = getattr(value=$212load_global.0, attr=mean)
2025-01-31 15:31:42,428 - DEBUG - on stmt: $218load_global.3 = global(max: <built-in function max>)
2025-01-31 15:31:42,428 - DEBUG - on stmt: $const220.4 = const(int, 0)
2025-01-31 15:31:42,428 - DEBUG - on stmt: $226binary_subtract.7 = n - pre_avg
2025-01-31 15:31:42,428 - DEBUG - find_def var='n' stmt=$226binary_subtract.7 = n - pre_avg
2025-01-31 15:31:42,428 - DEBUG - find_def_from_top label 212
2025-01-31 15:31:42,428 - DEBUG - idom 134 from label 212
2025-01-31 15:31:42,428 - DEBUG - find_def_from_bottom label 134
2025-01-31 15:31:42,429 - DEBUG - replaced with: $226binary_subtract.7 = n.7 - pre_avg
2025-01-31 15:31:42,429 - DEBUG - on stmt: $228call_function.8 = call $218load_global.3($const220.4, $226binary_subtract.7, func=$218load_global.3, args=[Var($const220.4, utils.py:1239), Var($226binary_subtract.7, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,429 - DEBUG - on stmt: $230load_global.9 = global(min: <built-in function min>)
2025-01-31 15:31:42,429 - DEBUG - on stmt: $236binary_add.12 = n + post_avg
2025-01-31 15:31:42,429 - DEBUG - find_def var='n' stmt=$236binary_add.12 = n + post_avg
2025-01-31 15:31:42,429 - DEBUG - find_def_from_top label 212
2025-01-31 15:31:42,429 - DEBUG - idom 134 from label 212
2025-01-31 15:31:42,429 - DEBUG - find_def_from_bottom label 134
2025-01-31 15:31:42,429 - DEBUG - replaced with: $236binary_add.12 = n.7 + post_avg
2025-01-31 15:31:42,429 - DEBUG - on stmt: $240load_attr.14 = getattr(value=x, attr=shape)
2025-01-31 15:31:42,429 - DEBUG - on stmt: $const242.15 = const(int, 0)
2025-01-31 15:31:42,429 - DEBUG - on stmt: $244binary_subscr.16 = static_getitem(value=$240load_attr.14, index=0, index_var=$const242.15, fn=<built-in function getitem>)
2025-01-31 15:31:42,429 - DEBUG - on stmt: $246call_function.17 = call $230load_global.9($236binary_add.12, $244binary_subscr.16, func=$230load_global.9, args=[Var($236binary_add.12, utils.py:1239), Var($244binary_subscr.16, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,429 - DEBUG - on stmt: $248build_slice.18 = global(slice: <class 'slice'>)
2025-01-31 15:31:42,429 - DEBUG - on stmt: $248build_slice.19 = call $248build_slice.18($228call_function.8, $246call_function.17, func=$248build_slice.18, args=(Var($228call_function.8, utils.py:1239), Var($246call_function.17, utils.py:1239)), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,429 - DEBUG - on stmt: $250binary_subscr.20 = getitem(value=x, index=$248build_slice.19, fn=<built-in function getitem>)
2025-01-31 15:31:42,429 - DEBUG - on stmt: avgn = call $214load_method.1($250binary_subscr.20, func=$214load_method.1, args=[Var($250binary_subscr.20, utils.py:1239)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,429 - DEBUG - on stmt: $262binary_subscr.26 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:42,429 - DEBUG - find_def var='n' stmt=$262binary_subscr.26 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:42,429 - DEBUG - find_def_from_top label 212
2025-01-31 15:31:42,429 - DEBUG - idom 134 from label 212
2025-01-31 15:31:42,429 - DEBUG - find_def_from_bottom label 134
2025-01-31 15:31:42,429 - DEBUG - replaced with: $262binary_subscr.26 = getitem(value=peaks, index=n.7, fn=<built-in function getitem>)
2025-01-31 15:31:42,430 - DEBUG - on stmt: $268binary_subscr.29 = getitem(value=x, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:42,430 - DEBUG - find_def var='n' stmt=$268binary_subscr.29 = getitem(value=x, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:42,430 - DEBUG - find_def_from_top label 212
2025-01-31 15:31:42,430 - DEBUG - idom 134 from label 212
2025-01-31 15:31:42,430 - DEBUG - find_def_from_bottom label 134
2025-01-31 15:31:42,430 - DEBUG - replaced with: $268binary_subscr.29 = getitem(value=x, index=n.7, fn=<built-in function getitem>)
2025-01-31 15:31:42,430 - DEBUG - on stmt: $274binary_add.32 = avgn + delta
2025-01-31 15:31:42,430 - DEBUG - on stmt: $276compare_op.33 = $268binary_subscr.29 >= $274binary_add.32
2025-01-31 15:31:42,430 - DEBUG - on stmt: $278inplace_and.34 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$262binary_subscr.26, rhs=$276compare_op.33, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:42,430 - DEBUG - on stmt: peaks[n] = $278inplace_and.34
2025-01-31 15:31:42,430 - DEBUG - find_def var='n' stmt=peaks[n] = $278inplace_and.34
2025-01-31 15:31:42,430 - DEBUG - find_def_from_top label 212
2025-01-31 15:31:42,430 - DEBUG - idom 134 from label 212
2025-01-31 15:31:42,430 - DEBUG - find_def_from_bottom label 134
2025-01-31 15:31:42,430 - DEBUG - replaced with: peaks[n.7] = $278inplace_and.34
2025-01-31 15:31:42,430 - DEBUG - on stmt: $288binary_subscr.37 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:42,430 - DEBUG - find_def var='n' stmt=$288binary_subscr.37 = getitem(value=peaks, index=n, fn=<built-in function getitem>)
2025-01-31 15:31:42,430 - DEBUG - find_def_from_top label 212
2025-01-31 15:31:42,430 - DEBUG - idom 134 from label 212
2025-01-31 15:31:42,430 - DEBUG - find_def_from_bottom label 134
2025-01-31 15:31:42,430 - DEBUG - replaced with: $288binary_subscr.37 = getitem(value=peaks, index=n.7, fn=<built-in function getitem>)
2025-01-31 15:31:42,430 - DEBUG - on stmt: bool290 = global(bool: <class 'bool'>)
2025-01-31 15:31:42,430 - DEBUG - on stmt: $290pred = call bool290($288binary_subscr.37, func=bool290, args=(Var($288binary_subscr.37, utils.py:1242),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,430 - DEBUG - on stmt: branch $290pred, 302, 292
2025-01-31 15:31:42,430 - DEBUG - ==== SSA block rewrite pass on 292
2025-01-31 15:31:42,430 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e8954910>
2025-01-31 15:31:42,431 - DEBUG - on stmt: $const294.1 = const(int, 1)
2025-01-31 15:31:42,431 - DEBUG - on stmt: $296inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const294.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:42,431 - DEBUG - find_def var='n' stmt=$296inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const294.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:42,431 - DEBUG - find_def_from_top label 292
2025-01-31 15:31:42,431 - DEBUG - idom 212 from label 292
2025-01-31 15:31:42,431 - DEBUG - find_def_from_bottom label 212
2025-01-31 15:31:42,431 - DEBUG - find_def_from_top label 212
2025-01-31 15:31:42,431 - DEBUG - idom 134 from label 212
2025-01-31 15:31:42,431 - DEBUG - find_def_from_bottom label 134
2025-01-31 15:31:42,431 - DEBUG - replaced with: $296inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n.7, rhs=$const294.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:42,431 - DEBUG - on stmt: n.3 = $296inplace_add.2
2025-01-31 15:31:42,431 - DEBUG - on stmt: jump 333
2025-01-31 15:31:42,431 - DEBUG - ==== SSA block rewrite pass on 302
2025-01-31 15:31:42,431 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e8954910>
2025-01-31 15:31:42,431 - DEBUG - on stmt: $const306.2 = const(int, 1)
2025-01-31 15:31:42,431 - DEBUG - on stmt: $308binary_add.3 = wait + $const306.2
2025-01-31 15:31:42,431 - DEBUG - on stmt: $310inplace_add.4 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$308binary_add.3, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:42,431 - DEBUG - find_def var='n' stmt=$310inplace_add.4 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$308binary_add.3, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:42,431 - DEBUG - find_def_from_top label 302
2025-01-31 15:31:42,431 - DEBUG - idom 212 from label 302
2025-01-31 15:31:42,431 - DEBUG - find_def_from_bottom label 212
2025-01-31 15:31:42,431 - DEBUG - find_def_from_top label 212
2025-01-31 15:31:42,431 - DEBUG - idom 134 from label 212
2025-01-31 15:31:42,431 - DEBUG - find_def_from_bottom label 134
2025-01-31 15:31:42,431 - DEBUG - replaced with: $310inplace_add.4 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n.7, rhs=$308binary_add.3, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:42,431 - DEBUG - on stmt: n.4 = $310inplace_add.4
2025-01-31 15:31:42,431 - DEBUG - on stmt: $318load_attr.7 = getattr(value=x, attr=shape)
2025-01-31 15:31:42,431 - DEBUG - on stmt: $const320.8 = const(int, 0)
2025-01-31 15:31:42,432 - DEBUG - on stmt: $322binary_subscr.9 = static_getitem(value=$318load_attr.7, index=0, index_var=$const320.8, fn=<built-in function getitem>)
2025-01-31 15:31:42,432 - DEBUG - on stmt: $324compare_op.10 = n < $322binary_subscr.9
2025-01-31 15:31:42,432 - DEBUG - find_def var='n' stmt=$324compare_op.10 = n < $322binary_subscr.9
2025-01-31 15:31:42,432 - DEBUG - replaced with: $324compare_op.10 = n.4 < $322binary_subscr.9
2025-01-31 15:31:42,432 - DEBUG - on stmt: bool326 = global(bool: <class 'bool'>)
2025-01-31 15:31:42,432 - DEBUG - on stmt: $326pred = call bool326($324compare_op.10, func=bool326, args=(Var($324compare_op.10, utils.py:1229),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,432 - DEBUG - on stmt: branch $326pred, 134, 328
2025-01-31 15:31:42,432 - DEBUG - ==== SSA block rewrite pass on 328
2025-01-31 15:31:42,432 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e8954910>
2025-01-31 15:31:42,432 - DEBUG - on stmt: $const328.0 = const(NoneType, None)
2025-01-31 15:31:42,432 - DEBUG - on stmt: $330return_value.1 = cast(value=$const328.0)
2025-01-31 15:31:42,432 - DEBUG - on stmt: return $330return_value.1
2025-01-31 15:31:42,432 - DEBUG - ==== SSA block rewrite pass on 332
2025-01-31 15:31:42,432 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e8954910>
2025-01-31 15:31:42,432 - DEBUG - on stmt: $const332.0 = const(NoneType, None)
2025-01-31 15:31:42,432 - DEBUG - on stmt: $334return_value.1 = cast(value=$const332.0)
2025-01-31 15:31:42,432 - DEBUG - on stmt: return $334return_value.1
2025-01-31 15:31:42,432 - DEBUG - ==== SSA block rewrite pass on 333
2025-01-31 15:31:42,432 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e8954910>
2025-01-31 15:31:42,432 - DEBUG - on stmt: jump 120
2025-01-31 15:31:42,439 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=570)
           2	LOAD_FAST(arg=0, lineno=571)
           4	LOAD_ATTR(arg=0, lineno=571)
           6	LOAD_CONST(arg=1, lineno=571)
           8	COMPARE_OP(arg=2, lineno=571)
          10	POP_JUMP_IF_FALSE(arg=11, lineno=571)
          12	LOAD_GLOBAL(arg=1, lineno=572)
          14	LOAD_CONST(arg=2, lineno=572)
          16	CALL_FUNCTION(arg=1, lineno=572)
          18	RAISE_VARARGS(arg=1, lineno=572)
>         20	LOAD_GLOBAL(arg=2, lineno=575)
          22	LOAD_METHOD(arg=3, lineno=575)
          24	LOAD_FAST(arg=0, lineno=575)
          26	CALL_METHOD(arg=1, lineno=575)
          28	STORE_FAST(arg=1, lineno=575)
          30	LOAD_GLOBAL(arg=4, lineno=576)
          32	LOAD_FAST(arg=1, lineno=576)
          34	CALL_FUNCTION(arg=1, lineno=576)
          36	LOAD_METHOD(arg=5, lineno=576)
          38	LOAD_CONST(arg=1, lineno=576)
          40	CALL_METHOD(arg=1, lineno=576)
          42	STORE_FAST(arg=2, lineno=576)
          44	LOAD_DEREF(arg=1, lineno=577)
          46	LOAD_FAST(arg=2, lineno=577)
          48	CALL_FUNCTION(arg=1, lineno=577)
          50	POP_JUMP_IF_FALSE(arg=29, lineno=577)
          52	LOAD_FAST(arg=2, lineno=578)
          54	RETURN_VALUE(arg=None, lineno=578)
>         56	LOAD_FAST(arg=1, lineno=580)
          58	GET_ITER(arg=None, lineno=580)
>         60	FOR_ITER(arg=21, lineno=580)
          62	STORE_FAST(arg=3, lineno=580)
          64	LOAD_FAST(arg=3, lineno=581)
          66	LOAD_METHOD(arg=6, lineno=581)
          68	CALL_METHOD(arg=0, lineno=581)
          70	STORE_FAST(arg=4, lineno=581)
          72	LOAD_DEREF(arg=1, lineno=582)
          74	LOAD_FAST(arg=4, lineno=582)
          76	CALL_FUNCTION(arg=1, lineno=582)
          78	POP_JUMP_IF_FALSE(arg=45, lineno=582)
          80	LOAD_FAST(arg=4, lineno=583)
          82	ROT_TWO(arg=None, lineno=583)
          84	POP_TOP(arg=None, lineno=583)
          86	RETURN_VALUE(arg=None, lineno=583)
>         88	LOAD_DEREF(arg=0, lineno=584)
          90	LOAD_FAST(arg=4, lineno=584)
          92	LOAD_FAST(arg=2, lineno=584)
          94	CALL_FUNCTION(arg=2, lineno=584)
          96	POP_JUMP_IF_FALSE(arg=52, lineno=584)
          98	LOAD_FAST(arg=4, lineno=585)
         100	STORE_FAST(arg=2, lineno=585)
>        102	JUMP_ABSOLUTE(arg=31, lineno=585)
>        104	LOAD_FAST(arg=2, lineno=586)
         106	RETURN_VALUE(arg=None, lineno=586)
2025-01-31 15:31:42,439 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:31:42,439 - DEBUG - stack: []
2025-01-31 15:31:42,439 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:31:42,439 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=570)
2025-01-31 15:31:42,439 - DEBUG - stack []
2025-01-31 15:31:42,439 - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=571)
2025-01-31 15:31:42,439 - DEBUG - stack []
2025-01-31 15:31:42,439 - DEBUG - dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=571)
2025-01-31 15:31:42,439 - DEBUG - stack ['$a2.0']
2025-01-31 15:31:42,439 - DEBUG - dispatch pc=6, inst=LOAD_CONST(arg=1, lineno=571)
2025-01-31 15:31:42,439 - DEBUG - stack ['$4load_attr.1']
2025-01-31 15:31:42,439 - DEBUG - dispatch pc=8, inst=COMPARE_OP(arg=2, lineno=571)
2025-01-31 15:31:42,439 - DEBUG - stack ['$4load_attr.1', '$const6.2']
2025-01-31 15:31:42,439 - DEBUG - dispatch pc=10, inst=POP_JUMP_IF_FALSE(arg=11, lineno=571)
2025-01-31 15:31:42,439 - DEBUG - stack ['$8compare_op.3']
2025-01-31 15:31:42,439 - DEBUG - end state. edges=[Edge(pc=12, stack=(), blockstack=(), npush=0), Edge(pc=20, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:42,439 - DEBUG - pending: deque([State(pc_initial=12 nstack_initial=0), State(pc_initial=20 nstack_initial=0)])
2025-01-31 15:31:42,439 - DEBUG - stack: []
2025-01-31 15:31:42,439 - DEBUG - state.pc_initial: State(pc_initial=12 nstack_initial=0)
2025-01-31 15:31:42,439 - DEBUG - dispatch pc=12, inst=LOAD_GLOBAL(arg=1, lineno=572)
2025-01-31 15:31:42,439 - DEBUG - stack []
2025-01-31 15:31:42,440 - DEBUG - dispatch pc=14, inst=LOAD_CONST(arg=2, lineno=572)
2025-01-31 15:31:42,440 - DEBUG - stack ['$12load_global.0']
2025-01-31 15:31:42,440 - DEBUG - dispatch pc=16, inst=CALL_FUNCTION(arg=1, lineno=572)
2025-01-31 15:31:42,440 - DEBUG - stack ['$12load_global.0', '$const14.1']
2025-01-31 15:31:42,440 - DEBUG - dispatch pc=18, inst=RAISE_VARARGS(arg=1, lineno=572)
2025-01-31 15:31:42,440 - DEBUG - stack ['$16call_function.2']
2025-01-31 15:31:42,440 - DEBUG - end state. edges=[]
2025-01-31 15:31:42,440 - DEBUG - pending: deque([State(pc_initial=20 nstack_initial=0)])
2025-01-31 15:31:42,440 - DEBUG - stack: []
2025-01-31 15:31:42,440 - DEBUG - state.pc_initial: State(pc_initial=20 nstack_initial=0)
2025-01-31 15:31:42,440 - DEBUG - dispatch pc=20, inst=LOAD_GLOBAL(arg=2, lineno=575)
2025-01-31 15:31:42,440 - DEBUG - stack []
2025-01-31 15:31:42,440 - DEBUG - dispatch pc=22, inst=LOAD_METHOD(arg=3, lineno=575)
2025-01-31 15:31:42,440 - DEBUG - stack ['$20load_global.0']
2025-01-31 15:31:42,440 - DEBUG - dispatch pc=24, inst=LOAD_FAST(arg=0, lineno=575)
2025-01-31 15:31:42,440 - DEBUG - stack ['$22load_method.1']
2025-01-31 15:31:42,440 - DEBUG - dispatch pc=26, inst=CALL_METHOD(arg=1, lineno=575)
2025-01-31 15:31:42,440 - DEBUG - stack ['$22load_method.1', '$a24.2']
2025-01-31 15:31:42,440 - DEBUG - dispatch pc=28, inst=STORE_FAST(arg=1, lineno=575)
2025-01-31 15:31:42,440 - DEBUG - stack ['$26call_method.3']
2025-01-31 15:31:42,440 - DEBUG - dispatch pc=30, inst=LOAD_GLOBAL(arg=4, lineno=576)
2025-01-31 15:31:42,440 - DEBUG - stack []
2025-01-31 15:31:42,440 - DEBUG - dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=576)
2025-01-31 15:31:42,440 - DEBUG - stack ['$30load_global.4']
2025-01-31 15:31:42,440 - DEBUG - dispatch pc=34, inst=CALL_FUNCTION(arg=1, lineno=576)
2025-01-31 15:31:42,440 - DEBUG - stack ['$30load_global.4', '$it32.5']
2025-01-31 15:31:42,440 - DEBUG - dispatch pc=36, inst=LOAD_METHOD(arg=5, lineno=576)
2025-01-31 15:31:42,440 - DEBUG - stack ['$34call_function.6']
2025-01-31 15:31:42,440 - DEBUG - dispatch pc=38, inst=LOAD_CONST(arg=1, lineno=576)
2025-01-31 15:31:42,441 - DEBUG - stack ['$36load_method.7']
2025-01-31 15:31:42,441 - DEBUG - dispatch pc=40, inst=CALL_METHOD(arg=1, lineno=576)
2025-01-31 15:31:42,441 - DEBUG - stack ['$36load_method.7', '$const38.8']
2025-01-31 15:31:42,441 - DEBUG - dispatch pc=42, inst=STORE_FAST(arg=2, lineno=576)
2025-01-31 15:31:42,441 - DEBUG - stack ['$40call_method.9']
2025-01-31 15:31:42,441 - DEBUG - dispatch pc=44, inst=LOAD_DEREF(arg=1, lineno=577)
2025-01-31 15:31:42,441 - DEBUG - stack []
2025-01-31 15:31:42,441 - DEBUG - dispatch pc=46, inst=LOAD_FAST(arg=2, lineno=577)
2025-01-31 15:31:42,441 - DEBUG - stack ['$44load_deref.10']
2025-01-31 15:31:42,441 - DEBUG - dispatch pc=48, inst=CALL_FUNCTION(arg=1, lineno=577)
2025-01-31 15:31:42,441 - DEBUG - stack ['$44load_deref.10', '$max_value46.11']
2025-01-31 15:31:42,441 - DEBUG - dispatch pc=50, inst=POP_JUMP_IF_FALSE(arg=29, lineno=577)
2025-01-31 15:31:42,441 - DEBUG - stack ['$48call_function.12']
2025-01-31 15:31:42,441 - DEBUG - end state. edges=[Edge(pc=52, stack=(), blockstack=(), npush=0), Edge(pc=56, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:42,441 - DEBUG - pending: deque([State(pc_initial=52 nstack_initial=0), State(pc_initial=56 nstack_initial=0)])
2025-01-31 15:31:42,441 - DEBUG - stack: []
2025-01-31 15:31:42,441 - DEBUG - state.pc_initial: State(pc_initial=52 nstack_initial=0)
2025-01-31 15:31:42,441 - DEBUG - dispatch pc=52, inst=LOAD_FAST(arg=2, lineno=578)
2025-01-31 15:31:42,441 - DEBUG - stack []
2025-01-31 15:31:42,441 - DEBUG - dispatch pc=54, inst=RETURN_VALUE(arg=None, lineno=578)
2025-01-31 15:31:42,441 - DEBUG - stack ['$max_value52.0']
2025-01-31 15:31:42,441 - DEBUG - end state. edges=[]
2025-01-31 15:31:42,441 - DEBUG - pending: deque([State(pc_initial=56 nstack_initial=0)])
2025-01-31 15:31:42,441 - DEBUG - stack: []
2025-01-31 15:31:42,441 - DEBUG - state.pc_initial: State(pc_initial=56 nstack_initial=0)
2025-01-31 15:31:42,441 - DEBUG - dispatch pc=56, inst=LOAD_FAST(arg=1, lineno=580)
2025-01-31 15:31:42,441 - DEBUG - stack []
2025-01-31 15:31:42,441 - DEBUG - dispatch pc=58, inst=GET_ITER(arg=None, lineno=580)
2025-01-31 15:31:42,441 - DEBUG - stack ['$it56.0']
2025-01-31 15:31:42,441 - DEBUG - end state. edges=[Edge(pc=60, stack=('$58get_iter.1',), blockstack=(), npush=0)]
2025-01-31 15:31:42,442 - DEBUG - pending: deque([State(pc_initial=60 nstack_initial=1)])
2025-01-31 15:31:42,442 - DEBUG - stack: ['$phi60.0']
2025-01-31 15:31:42,442 - DEBUG - state.pc_initial: State(pc_initial=60 nstack_initial=1)
2025-01-31 15:31:42,442 - DEBUG - dispatch pc=60, inst=FOR_ITER(arg=21, lineno=580)
2025-01-31 15:31:42,442 - DEBUG - stack ['$phi60.0']
2025-01-31 15:31:42,442 - DEBUG - end state. edges=[Edge(pc=104, stack=(), blockstack=(), npush=0), Edge(pc=62, stack=('$phi60.0', '$60for_iter.2'), blockstack=(), npush=0)]
2025-01-31 15:31:42,442 - DEBUG - pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=62 nstack_initial=2)])
2025-01-31 15:31:42,442 - DEBUG - stack: []
2025-01-31 15:31:42,442 - DEBUG - state.pc_initial: State(pc_initial=104 nstack_initial=0)
2025-01-31 15:31:42,442 - DEBUG - dispatch pc=104, inst=LOAD_FAST(arg=2, lineno=586)
2025-01-31 15:31:42,442 - DEBUG - stack []
2025-01-31 15:31:42,442 - DEBUG - dispatch pc=106, inst=RETURN_VALUE(arg=None, lineno=586)
2025-01-31 15:31:42,442 - DEBUG - stack ['$max_value104.0']
2025-01-31 15:31:42,442 - DEBUG - end state. edges=[]
2025-01-31 15:31:42,442 - DEBUG - pending: deque([State(pc_initial=62 nstack_initial=2)])
2025-01-31 15:31:42,442 - DEBUG - stack: ['$phi62.0', '$phi62.1']
2025-01-31 15:31:42,442 - DEBUG - state.pc_initial: State(pc_initial=62 nstack_initial=2)
2025-01-31 15:31:42,442 - DEBUG - dispatch pc=62, inst=STORE_FAST(arg=3, lineno=580)
2025-01-31 15:31:42,442 - DEBUG - stack ['$phi62.0', '$phi62.1']
2025-01-31 15:31:42,442 - DEBUG - dispatch pc=64, inst=LOAD_FAST(arg=3, lineno=581)
2025-01-31 15:31:42,442 - DEBUG - stack ['$phi62.0']
2025-01-31 15:31:42,442 - DEBUG - dispatch pc=66, inst=LOAD_METHOD(arg=6, lineno=581)
2025-01-31 15:31:42,442 - DEBUG - stack ['$phi62.0', '$view64.2']
2025-01-31 15:31:42,442 - DEBUG - dispatch pc=68, inst=CALL_METHOD(arg=0, lineno=581)
2025-01-31 15:31:42,442 - DEBUG - stack ['$phi62.0', '$66load_method.3']
2025-01-31 15:31:42,442 - DEBUG - dispatch pc=70, inst=STORE_FAST(arg=4, lineno=581)
2025-01-31 15:31:42,442 - DEBUG - stack ['$phi62.0', '$68call_method.4']
2025-01-31 15:31:42,442 - DEBUG - dispatch pc=72, inst=LOAD_DEREF(arg=1, lineno=582)
2025-01-31 15:31:42,442 - DEBUG - stack ['$phi62.0']
2025-01-31 15:31:42,443 - DEBUG - dispatch pc=74, inst=LOAD_FAST(arg=4, lineno=582)
2025-01-31 15:31:42,443 - DEBUG - stack ['$phi62.0', '$72load_deref.5']
2025-01-31 15:31:42,443 - DEBUG - dispatch pc=76, inst=CALL_FUNCTION(arg=1, lineno=582)
2025-01-31 15:31:42,443 - DEBUG - stack ['$phi62.0', '$72load_deref.5', '$v74.6']
2025-01-31 15:31:42,443 - DEBUG - dispatch pc=78, inst=POP_JUMP_IF_FALSE(arg=45, lineno=582)
2025-01-31 15:31:42,443 - DEBUG - stack ['$phi62.0', '$76call_function.7']
2025-01-31 15:31:42,443 - DEBUG - end state. edges=[Edge(pc=80, stack=('$phi62.0',), blockstack=(), npush=0), Edge(pc=88, stack=('$phi62.0',), blockstack=(), npush=0)]
2025-01-31 15:31:42,443 - DEBUG - pending: deque([State(pc_initial=80 nstack_initial=1), State(pc_initial=88 nstack_initial=1)])
2025-01-31 15:31:42,443 - DEBUG - stack: ['$phi80.0']
2025-01-31 15:31:42,443 - DEBUG - state.pc_initial: State(pc_initial=80 nstack_initial=1)
2025-01-31 15:31:42,443 - DEBUG - dispatch pc=80, inst=LOAD_FAST(arg=4, lineno=583)
2025-01-31 15:31:42,443 - DEBUG - stack ['$phi80.0']
2025-01-31 15:31:42,443 - DEBUG - dispatch pc=82, inst=ROT_TWO(arg=None, lineno=583)
2025-01-31 15:31:42,443 - DEBUG - stack ['$phi80.0', '$v80.1']
2025-01-31 15:31:42,443 - DEBUG - dispatch pc=84, inst=POP_TOP(arg=None, lineno=583)
2025-01-31 15:31:42,443 - DEBUG - stack ['$v80.1', '$phi80.0']
2025-01-31 15:31:42,443 - DEBUG - dispatch pc=86, inst=RETURN_VALUE(arg=None, lineno=583)
2025-01-31 15:31:42,443 - DEBUG - stack ['$v80.1']
2025-01-31 15:31:42,443 - DEBUG - end state. edges=[]
2025-01-31 15:31:42,443 - DEBUG - pending: deque([State(pc_initial=88 nstack_initial=1)])
2025-01-31 15:31:42,443 - DEBUG - stack: ['$phi88.0']
2025-01-31 15:31:42,443 - DEBUG - state.pc_initial: State(pc_initial=88 nstack_initial=1)
2025-01-31 15:31:42,443 - DEBUG - dispatch pc=88, inst=LOAD_DEREF(arg=0, lineno=584)
2025-01-31 15:31:42,443 - DEBUG - stack ['$phi88.0']
2025-01-31 15:31:42,443 - DEBUG - dispatch pc=90, inst=LOAD_FAST(arg=4, lineno=584)
2025-01-31 15:31:42,443 - DEBUG - stack ['$phi88.0', '$88load_deref.1']
2025-01-31 15:31:42,443 - DEBUG - dispatch pc=92, inst=LOAD_FAST(arg=2, lineno=584)
2025-01-31 15:31:42,443 - DEBUG - stack ['$phi88.0', '$88load_deref.1', '$v90.2']
2025-01-31 15:31:42,443 - DEBUG - dispatch pc=94, inst=CALL_FUNCTION(arg=2, lineno=584)
2025-01-31 15:31:42,444 - DEBUG - stack ['$phi88.0', '$88load_deref.1', '$v90.2', '$max_value92.3']
2025-01-31 15:31:42,444 - DEBUG - dispatch pc=96, inst=POP_JUMP_IF_FALSE(arg=52, lineno=584)
2025-01-31 15:31:42,444 - DEBUG - stack ['$phi88.0', '$94call_function.4']
2025-01-31 15:31:42,444 - DEBUG - end state. edges=[Edge(pc=98, stack=('$phi88.0',), blockstack=(), npush=0), Edge(pc=102, stack=('$phi88.0',), blockstack=(), npush=0)]
2025-01-31 15:31:42,444 - DEBUG - pending: deque([State(pc_initial=98 nstack_initial=1), State(pc_initial=102 nstack_initial=1)])
2025-01-31 15:31:42,444 - DEBUG - stack: ['$phi98.0']
2025-01-31 15:31:42,444 - DEBUG - state.pc_initial: State(pc_initial=98 nstack_initial=1)
2025-01-31 15:31:42,444 - DEBUG - dispatch pc=98, inst=LOAD_FAST(arg=4, lineno=585)
2025-01-31 15:31:42,444 - DEBUG - stack ['$phi98.0']
2025-01-31 15:31:42,444 - DEBUG - dispatch pc=100, inst=STORE_FAST(arg=2, lineno=585)
2025-01-31 15:31:42,444 - DEBUG - stack ['$phi98.0', '$v98.1']
2025-01-31 15:31:42,444 - DEBUG - end state. edges=[Edge(pc=102, stack=('$phi98.0',), blockstack=(), npush=0)]
2025-01-31 15:31:42,444 - DEBUG - pending: deque([State(pc_initial=102 nstack_initial=1), State(pc_initial=102 nstack_initial=1)])
2025-01-31 15:31:42,444 - DEBUG - stack: ['$phi102.0']
2025-01-31 15:31:42,444 - DEBUG - state.pc_initial: State(pc_initial=102 nstack_initial=1)
2025-01-31 15:31:42,444 - DEBUG - dispatch pc=102, inst=JUMP_ABSOLUTE(arg=31, lineno=585)
2025-01-31 15:31:42,444 - DEBUG - stack ['$phi102.0']
2025-01-31 15:31:42,444 - DEBUG - end state. edges=[Edge(pc=60, stack=('$phi102.0',), blockstack=(), npush=0)]
2025-01-31 15:31:42,444 - DEBUG - pending: deque([State(pc_initial=102 nstack_initial=1), State(pc_initial=60 nstack_initial=1)])
2025-01-31 15:31:42,444 - DEBUG - pending: deque([State(pc_initial=60 nstack_initial=1)])
2025-01-31 15:31:42,444 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:31:42,444 - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=12 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=0): set(),
             State(pc_initial=52 nstack_initial=0): set(),
             State(pc_initial=56 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=1): {'$phi60.0'},
             State(pc_initial=62 nstack_initial=2): {'$phi62.1'},
             State(pc_initial=80 nstack_initial=1): set(),
             State(pc_initial=88 nstack_initial=1): set(),
             State(pc_initial=98 nstack_initial=1): set(),
             State(pc_initial=102 nstack_initial=1): set(),
             State(pc_initial=104 nstack_initial=0): set()})
2025-01-31 15:31:42,445 - DEBUG - defmap: {'$phi60.0': State(pc_initial=56 nstack_initial=0),
 '$phi62.1': State(pc_initial=60 nstack_initial=1)}
2025-01-31 15:31:42,445 - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi102.0': {('$phi88.0', State(pc_initial=88 nstack_initial=1)),
                           ('$phi98.0', State(pc_initial=98 nstack_initial=1))},
             '$phi60.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0)),
                          ('$phi102.0',
                           State(pc_initial=102 nstack_initial=1))},
             '$phi62.0': {('$phi60.0', State(pc_initial=60 nstack_initial=1))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))},
             '$phi80.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi88.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi98.0': {('$phi88.0', State(pc_initial=88 nstack_initial=1))}})
2025-01-31 15:31:42,445 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi102.0': {('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi60.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0)),
                          ('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi62.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0)),
                          ('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))},
             '$phi80.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi88.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi98.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))}})
2025-01-31 15:31:42,445 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi102.0': {('$58get_iter.1',
                            State(pc_initial=56 nstack_initial=0))},
             '$phi60.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi62.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))},
             '$phi80.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi88.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi98.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))}})
2025-01-31 15:31:42,445 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi102.0': {('$58get_iter.1',
                            State(pc_initial=56 nstack_initial=0))},
             '$phi60.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi62.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))},
             '$phi80.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi88.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))},
             '$phi98.0': {('$58get_iter.1',
                           State(pc_initial=56 nstack_initial=0))}})
2025-01-31 15:31:42,446 - DEBUG - keep phismap: {'$phi60.0': {('$58get_iter.1', State(pc_initial=56 nstack_initial=0))},
 '$phi62.1': {('$60for_iter.2', State(pc_initial=60 nstack_initial=1))}}
2025-01-31 15:31:42,446 - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=56 nstack_initial=0): {'$phi60.0': '$58get_iter.1'},
             State(pc_initial=60 nstack_initial=1): {'$phi62.1': '$60for_iter.2'}})
2025-01-31 15:31:42,446 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:31:42,446 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'item': '$a2.0', 'res': '$4load_attr.1'}), (6, {'res': '$const6.2'}), (8, {'lhs': '$4load_attr.1', 'rhs': '$const6.2', 'res': '$8compare_op.3'}), (10, {'pred': '$8compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={12: (), 20: ()})
2025-01-31 15:31:42,446 - DEBUG - block_infos State(pc_initial=12 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$12load_global.0'}), (14, {'res': '$const14.1'}), (16, {'func': '$12load_global.0', 'args': ['$const14.1'], 'res': '$16call_function.2'}), (18, {'exc': '$16call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:42,446 - DEBUG - block_infos State(pc_initial=20 nstack_initial=0):
AdaptBlockInfo(insts=((20, {'res': '$20load_global.0'}), (22, {'item': '$20load_global.0', 'res': '$22load_method.1'}), (24, {'res': '$a24.2'}), (26, {'func': '$22load_method.1', 'args': ['$a24.2'], 'res': '$26call_method.3'}), (28, {'value': '$26call_method.3'}), (30, {'res': '$30load_global.4'}), (32, {'res': '$it32.5'}), (34, {'func': '$30load_global.4', 'args': ['$it32.5'], 'res': '$34call_function.6'}), (36, {'item': '$34call_function.6', 'res': '$36load_method.7'}), (38, {'res': '$const38.8'}), (40, {'func': '$36load_method.7', 'args': ['$const38.8'], 'res': '$40call_method.9'}), (42, {'value': '$40call_method.9'}), (44, {'res': '$44load_deref.10'}), (46, {'res': '$max_value46.11'}), (48, {'func': '$44load_deref.10', 'args': ['$max_value46.11'], 'res': '$48call_function.12'}), (50, {'pred': '$48call_function.12'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={52: (), 56: ()})
2025-01-31 15:31:42,446 - DEBUG - block_infos State(pc_initial=52 nstack_initial=0):
AdaptBlockInfo(insts=((52, {'res': '$max_value52.0'}), (54, {'retval': '$max_value52.0', 'castval': '$54return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:42,446 - DEBUG - block_infos State(pc_initial=56 nstack_initial=0):
AdaptBlockInfo(insts=((56, {'res': '$it56.0'}), (58, {'value': '$it56.0', 'res': '$58get_iter.1'})), outgoing_phis={'$phi60.0': '$58get_iter.1'}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: ('$58get_iter.1',)})
2025-01-31 15:31:42,446 - DEBUG - block_infos State(pc_initial=60 nstack_initial=1):
AdaptBlockInfo(insts=((60, {'iterator': '$phi60.0', 'pair': '$60for_iter.1', 'indval': '$60for_iter.2', 'pred': '$60for_iter.3'}),), outgoing_phis={'$phi62.1': '$60for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={104: (), 62: ('$phi60.0', '$60for_iter.2')})
2025-01-31 15:31:42,446 - DEBUG - block_infos State(pc_initial=62 nstack_initial=2):
AdaptBlockInfo(insts=((62, {'value': '$phi62.1'}), (64, {'res': '$view64.2'}), (66, {'item': '$view64.2', 'res': '$66load_method.3'}), (68, {'func': '$66load_method.3', 'args': [], 'res': '$68call_method.4'}), (70, {'value': '$68call_method.4'}), (72, {'res': '$72load_deref.5'}), (74, {'res': '$v74.6'}), (76, {'func': '$72load_deref.5', 'args': ['$v74.6'], 'res': '$76call_function.7'}), (78, {'pred': '$76call_function.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={80: ('$phi62.0',), 88: ('$phi62.0',)})
2025-01-31 15:31:42,446 - DEBUG - block_infos State(pc_initial=80 nstack_initial=1):
AdaptBlockInfo(insts=((80, {'res': '$v80.1'}), (86, {'retval': '$v80.1', 'castval': '$86return_value.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:42,446 - DEBUG - block_infos State(pc_initial=88 nstack_initial=1):
AdaptBlockInfo(insts=((88, {'res': '$88load_deref.1'}), (90, {'res': '$v90.2'}), (92, {'res': '$max_value92.3'}), (94, {'func': '$88load_deref.1', 'args': ['$v90.2', '$max_value92.3'], 'res': '$94call_function.4'}), (96, {'pred': '$94call_function.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={98: ('$phi88.0',), 102: ('$phi88.0',)})
2025-01-31 15:31:42,447 - DEBUG - block_infos State(pc_initial=98 nstack_initial=1):
AdaptBlockInfo(insts=((98, {'res': '$v98.1'}), (100, {'value': '$v98.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={102: ('$phi98.0',)})
2025-01-31 15:31:42,447 - DEBUG - block_infos State(pc_initial=102 nstack_initial=1):
AdaptBlockInfo(insts=((102, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: ('$phi102.0',)})
2025-01-31 15:31:42,447 - DEBUG - block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$max_value104.0'}), (106, {'retval': '$max_value104.0', 'castval': '$106return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:42,448 - DEBUG - label 0:
    a = arg(0, name=a)                       ['a']
    $4load_attr.1 = getattr(value=a, attr=size) ['$4load_attr.1', 'a']
    $const6.2 = const(int, 0)                ['$const6.2']
    $8compare_op.3 = $4load_attr.1 == $const6.2 ['$4load_attr.1', '$8compare_op.3', '$const6.2']
    bool10 = global(bool: <class 'bool'>)    ['bool10']
    $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:571),), kws=(), vararg=None, varkwarg=None, target=None) ['$10pred', '$8compare_op.3', 'bool10']
    branch $10pred, 12, 20                   ['$10pred']
label 12:
    $12load_global.0 = global(ValueError: <class 'ValueError'>) ['$12load_global.0']
    $const14.1 = const(str, zero-size array to reduction operation maximum which has no identity) ['$const14.1']
    $16call_function.2 = call $12load_global.0($const14.1, func=$12load_global.0, args=[Var($const14.1, arraymath.py:572)], kws=(), vararg=None, varkwarg=None, target=None) ['$12load_global.0', '$16call_function.2', '$const14.1']
    raise $16call_function.2                 ['$16call_function.2']
label 20:
    $20load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>) ['$20load_global.0']
    $22load_method.1 = getattr(value=$20load_global.0, attr=nditer) ['$20load_global.0', '$22load_method.1']
    it = call $22load_method.1(a, func=$22load_method.1, args=[Var(a, arraymath.py:570)], kws=(), vararg=None, varkwarg=None, target=None) ['$22load_method.1', 'a', 'it']
    $30load_global.4 = global(next: <built-in function next>) ['$30load_global.4']
    $34call_function.6 = call $30load_global.4(it, func=$30load_global.4, args=[Var(it, arraymath.py:575)], kws=(), vararg=None, varkwarg=None, target=None) ['$30load_global.4', '$34call_function.6', 'it']
    $36load_method.7 = getattr(value=$34call_function.6, attr=take) ['$34call_function.6', '$36load_method.7']
    $const38.8 = const(int, 0)               ['$const38.8']
    max_value = call $36load_method.7($const38.8, func=$36load_method.7, args=[Var($const38.8, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None) ['$36load_method.7', '$const38.8', 'max_value']
    $44load_deref.10 = freevar(pre_return_func: <function return_false at 0x7c89f0822950>) ['$44load_deref.10']
    $48call_function.12 = call $44load_deref.10(max_value, func=$44load_deref.10, args=[Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None) ['$44load_deref.10', '$48call_function.12', 'max_value']
    bool50 = global(bool: <class 'bool'>)    ['bool50']
    $50pred = call bool50($48call_function.12, func=bool50, args=(Var($48call_function.12, arraymath.py:577),), kws=(), vararg=None, varkwarg=None, target=None) ['$48call_function.12', '$50pred', 'bool50']
    branch $50pred, 52, 56                   ['$50pred']
label 52:
    $54return_value.1 = cast(value=max_value) ['$54return_value.1', 'max_value']
    return $54return_value.1                 ['$54return_value.1']
label 56:
    $58get_iter.1 = getiter(value=it)        ['$58get_iter.1', 'it']
    $phi60.0 = $58get_iter.1                 ['$58get_iter.1', '$phi60.0']
    jump 60                                  []
label 60:
    $60for_iter.1 = iternext(value=$phi60.0) ['$60for_iter.1', '$phi60.0']
    $60for_iter.2 = pair_first(value=$60for_iter.1) ['$60for_iter.1', '$60for_iter.2']
    $60for_iter.3 = pair_second(value=$60for_iter.1) ['$60for_iter.1', '$60for_iter.3']
    $phi62.1 = $60for_iter.2                 ['$60for_iter.2', '$phi62.1']
    branch $60for_iter.3, 62, 104            ['$60for_iter.3']
label 62:
    view = $phi62.1                          ['$phi62.1', 'view']
    $66load_method.3 = getattr(value=view, attr=item) ['$66load_method.3', 'view']
    v = call $66load_method.3(func=$66load_method.3, args=[], kws=(), vararg=None, varkwarg=None, target=None) ['$66load_method.3', 'v']
    $72load_deref.5 = freevar(pre_return_func: <function return_false at 0x7c89f0822950>) ['$72load_deref.5']
    $76call_function.7 = call $72load_deref.5(v, func=$72load_deref.5, args=[Var(v, arraymath.py:581)], kws=(), vararg=None, varkwarg=None, target=None) ['$72load_deref.5', '$76call_function.7', 'v']
    bool78 = global(bool: <class 'bool'>)    ['bool78']
    $78pred = call bool78($76call_function.7, func=bool78, args=(Var($76call_function.7, arraymath.py:582),), kws=(), vararg=None, varkwarg=None, target=None) ['$76call_function.7', '$78pred', 'bool78']
    branch $78pred, 80, 88                   ['$78pred']
label 80:
    $86return_value.2 = cast(value=v)        ['$86return_value.2', 'v']
    return $86return_value.2                 ['$86return_value.2']
label 88:
    $88load_deref.1 = freevar(comparator: <function max_comparator at 0x7c89f0822440>) ['$88load_deref.1']
    $94call_function.4 = call $88load_deref.1(v, max_value, func=$88load_deref.1, args=[Var(v, arraymath.py:581), Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None) ['$88load_deref.1', '$94call_function.4', 'max_value', 'v']
    bool96 = global(bool: <class 'bool'>)    ['bool96']
    $96pred = call bool96($94call_function.4, func=bool96, args=(Var($94call_function.4, arraymath.py:584),), kws=(), vararg=None, varkwarg=None, target=None) ['$94call_function.4', '$96pred', 'bool96']
    branch $96pred, 98, 102                  ['$96pred']
label 98:
    max_value = v                            ['max_value', 'v']
    jump 102                                 []
label 102:
    jump 60                                  []
label 104:
    $106return_value.1 = cast(value=max_value) ['$106return_value.1', 'max_value']
    return $106return_value.1                ['$106return_value.1']

2025-01-31 15:31:42,455 - DEBUG - ==== SSA block analysis pass on 0
2025-01-31 15:31:42,455 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e85b27a0>
2025-01-31 15:31:42,455 - DEBUG - on stmt: a = arg(0, name=a)
2025-01-31 15:31:42,455 - DEBUG - on stmt: $4load_attr.1 = getattr(value=a, attr=size)
2025-01-31 15:31:42,455 - DEBUG - on stmt: $const6.2 = const(int, 0)
2025-01-31 15:31:42,455 - DEBUG - on stmt: $8compare_op.3 = $4load_attr.1 == $const6.2
2025-01-31 15:31:42,455 - DEBUG - on stmt: bool10 = global(bool: <class 'bool'>)
2025-01-31 15:31:42,455 - DEBUG - on stmt: $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:571),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,455 - DEBUG - on stmt: branch $10pred, 12, 20
2025-01-31 15:31:42,455 - DEBUG - ==== SSA block analysis pass on 12
2025-01-31 15:31:42,455 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e85b27a0>
2025-01-31 15:31:42,455 - DEBUG - on stmt: $12load_global.0 = global(ValueError: <class 'ValueError'>)
2025-01-31 15:31:42,456 - DEBUG - on stmt: $const14.1 = const(str, zero-size array to reduction operation maximum which has no identity)
2025-01-31 15:31:42,456 - DEBUG - on stmt: $16call_function.2 = call $12load_global.0($const14.1, func=$12load_global.0, args=[Var($const14.1, arraymath.py:572)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,456 - DEBUG - on stmt: <static> raise <class 'ValueError'>('zero-size array to reduction operation maximum which has no identity')
2025-01-31 15:31:42,456 - DEBUG - ==== SSA block analysis pass on 20
2025-01-31 15:31:42,456 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e85b27a0>
2025-01-31 15:31:42,456 - DEBUG - on stmt: $20load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:42,456 - DEBUG - on stmt: $22load_method.1 = getattr(value=$20load_global.0, attr=nditer)
2025-01-31 15:31:42,456 - DEBUG - on stmt: it = call $22load_method.1(a, func=$22load_method.1, args=[Var(a, arraymath.py:570)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,456 - DEBUG - on stmt: $30load_global.4 = global(next: <built-in function next>)
2025-01-31 15:31:42,456 - DEBUG - on stmt: $34call_function.6 = call $30load_global.4(it, func=$30load_global.4, args=[Var(it, arraymath.py:575)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,456 - DEBUG - on stmt: $36load_method.7 = getattr(value=$34call_function.6, attr=take)
2025-01-31 15:31:42,456 - DEBUG - on stmt: $const38.8 = const(int, 0)
2025-01-31 15:31:42,456 - DEBUG - on stmt: max_value = call $36load_method.7($const38.8, func=$36load_method.7, args=[Var($const38.8, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,456 - DEBUG - on stmt: $44load_deref.10 = freevar(pre_return_func: <function return_false at 0x7c89f0822950>)
2025-01-31 15:31:42,456 - DEBUG - on stmt: $48call_function.12 = call $44load_deref.10(max_value, func=$44load_deref.10, args=[Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,456 - DEBUG - on stmt: bool50 = global(bool: <class 'bool'>)
2025-01-31 15:31:42,456 - DEBUG - on stmt: $50pred = call bool50($48call_function.12, func=bool50, args=(Var($48call_function.12, arraymath.py:577),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,456 - DEBUG - on stmt: branch $50pred, 52, 56
2025-01-31 15:31:42,456 - DEBUG - ==== SSA block analysis pass on 52
2025-01-31 15:31:42,456 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e85b27a0>
2025-01-31 15:31:42,456 - DEBUG - on stmt: $54return_value.1 = cast(value=max_value)
2025-01-31 15:31:42,456 - DEBUG - on stmt: return $54return_value.1
2025-01-31 15:31:42,456 - DEBUG - ==== SSA block analysis pass on 56
2025-01-31 15:31:42,456 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e85b27a0>
2025-01-31 15:31:42,457 - DEBUG - on stmt: $58get_iter.1 = getiter(value=it)
2025-01-31 15:31:42,457 - DEBUG - on stmt: $phi60.0 = $58get_iter.1
2025-01-31 15:31:42,457 - DEBUG - on stmt: jump 60
2025-01-31 15:31:42,457 - DEBUG - ==== SSA block analysis pass on 60
2025-01-31 15:31:42,457 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e85b27a0>
2025-01-31 15:31:42,457 - DEBUG - on stmt: $60for_iter.1 = iternext(value=$phi60.0)
2025-01-31 15:31:42,457 - DEBUG - on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
2025-01-31 15:31:42,457 - DEBUG - on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
2025-01-31 15:31:42,457 - DEBUG - on stmt: $phi62.1 = $60for_iter.2
2025-01-31 15:31:42,457 - DEBUG - on stmt: branch $60for_iter.3, 62, 104
2025-01-31 15:31:42,457 - DEBUG - ==== SSA block analysis pass on 62
2025-01-31 15:31:42,457 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e85b27a0>
2025-01-31 15:31:42,457 - DEBUG - on stmt: view = $phi62.1
2025-01-31 15:31:42,457 - DEBUG - on stmt: $66load_method.3 = getattr(value=view, attr=item)
2025-01-31 15:31:42,457 - DEBUG - on stmt: v = call $66load_method.3(func=$66load_method.3, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,457 - DEBUG - on stmt: $72load_deref.5 = freevar(pre_return_func: <function return_false at 0x7c89f0822950>)
2025-01-31 15:31:42,457 - DEBUG - on stmt: $76call_function.7 = call $72load_deref.5(v, func=$72load_deref.5, args=[Var(v, arraymath.py:581)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,457 - DEBUG - on stmt: bool78 = global(bool: <class 'bool'>)
2025-01-31 15:31:42,457 - DEBUG - on stmt: $78pred = call bool78($76call_function.7, func=bool78, args=(Var($76call_function.7, arraymath.py:582),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,457 - DEBUG - on stmt: branch $78pred, 80, 88
2025-01-31 15:31:42,457 - DEBUG - ==== SSA block analysis pass on 80
2025-01-31 15:31:42,457 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e85b27a0>
2025-01-31 15:31:42,457 - DEBUG - on stmt: $86return_value.2 = cast(value=v)
2025-01-31 15:31:42,457 - DEBUG - on stmt: return $86return_value.2
2025-01-31 15:31:42,457 - DEBUG - ==== SSA block analysis pass on 88
2025-01-31 15:31:42,457 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e85b27a0>
2025-01-31 15:31:42,457 - DEBUG - on stmt: $88load_deref.1 = freevar(comparator: <function max_comparator at 0x7c89f0822440>)
2025-01-31 15:31:42,458 - DEBUG - on stmt: $94call_function.4 = call $88load_deref.1(v, max_value, func=$88load_deref.1, args=[Var(v, arraymath.py:581), Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,458 - DEBUG - on stmt: bool96 = global(bool: <class 'bool'>)
2025-01-31 15:31:42,458 - DEBUG - on stmt: $96pred = call bool96($94call_function.4, func=bool96, args=(Var($94call_function.4, arraymath.py:584),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,458 - DEBUG - on stmt: branch $96pred, 98, 102
2025-01-31 15:31:42,458 - DEBUG - ==== SSA block analysis pass on 98
2025-01-31 15:31:42,458 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e85b27a0>
2025-01-31 15:31:42,458 - DEBUG - on stmt: max_value = v
2025-01-31 15:31:42,458 - DEBUG - on stmt: jump 102
2025-01-31 15:31:42,458 - DEBUG - ==== SSA block analysis pass on 102
2025-01-31 15:31:42,458 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e85b27a0>
2025-01-31 15:31:42,458 - DEBUG - on stmt: jump 60
2025-01-31 15:31:42,458 - DEBUG - ==== SSA block analysis pass on 104
2025-01-31 15:31:42,458 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e85b27a0>
2025-01-31 15:31:42,458 - DEBUG - on stmt: $106return_value.1 = cast(value=max_value)
2025-01-31 15:31:42,458 - DEBUG - on stmt: return $106return_value.1
2025-01-31 15:31:42,459 - DEBUG - defs defaultdict(<class 'list'>,
            {'$106return_value.1': [(<numba.core.ir.Assign object at 0x7c89e8928910>,
                                     104)],
             '$10pred': [(<numba.core.ir.Assign object at 0x7c89e8925de0>, 0)],
             '$12load_global.0': [(<numba.core.ir.Assign object at 0x7c89e8926020>,
                                   12)],
             '$16call_function.2': [(<numba.core.ir.Assign object at 0x7c89e8926380>,
                                     12)],
             '$20load_global.0': [(<numba.core.ir.Assign object at 0x7c89e8926620>,
                                   20)],
             '$22load_method.1': [(<numba.core.ir.Assign object at 0x7c89e89267a0>,
                                   20)],
             '$30load_global.4': [(<numba.core.ir.Assign object at 0x7c89e8926ce0>,
                                   20)],
             '$34call_function.6': [(<numba.core.ir.Assign object at 0x7c89e8926fe0>,
                                     20)],
             '$36load_method.7': [(<numba.core.ir.Assign object at 0x7c89e8927100>,
                                   20)],
             '$44load_deref.10': [(<numba.core.ir.Assign object at 0x7c89e89276a0>,
                                   20)],
             '$48call_function.12': [(<numba.core.ir.Assign object at 0x7c89e89279a0>,
                                      20)],
             '$4load_attr.1': [(<numba.core.ir.Assign object at 0x7c89e8925840>,
                                0)],
             '$50pred': [(<numba.core.ir.Assign object at 0x7c89e8927be0>, 20)],
             '$54return_value.1': [(<numba.core.ir.Assign object at 0x7c89e8927dc0>,
                                    52)],
             '$58get_iter.1': [(<numba.core.ir.Assign object at 0x7c89e8925210>,
                                56)],
             '$60for_iter.1': [(<numba.core.ir.Assign object at 0x7c89e8924ee0>,
                                60)],
             '$60for_iter.2': [(<numba.core.ir.Assign object at 0x7c89e89243d0>,
                                60)],
             '$60for_iter.3': [(<numba.core.ir.Assign object at 0x7c89e8924700>,
                                60)],
             '$66load_method.3': [(<numba.core.ir.Assign object at 0x7c89e892a680>,
                                   62)],
             '$72load_deref.5': [(<numba.core.ir.Assign object at 0x7c89e892a650>,
                                  62)],
             '$76call_function.7': [(<numba.core.ir.Assign object at 0x7c89e892a050>,
                                     62)],
             '$78pred': [(<numba.core.ir.Assign object at 0x7c89e892a170>, 62)],
             '$86return_value.2': [(<numba.core.ir.Assign object at 0x7c89e8929db0>,
                                    80)],
             '$88load_deref.1': [(<numba.core.ir.Assign object at 0x7c89e8929c90>,
                                  88)],
             '$8compare_op.3': [(<numba.core.ir.Assign object at 0x7c89e8925b70>,
                                 0)],
             '$94call_function.4': [(<numba.core.ir.Assign object at 0x7c89e8929450>,
                                     88)],
             '$96pred': [(<numba.core.ir.Assign object at 0x7c89e8929180>, 88)],
             '$const14.1': [(<numba.core.ir.Assign object at 0x7c89e89261a0>,
                             12)],
             '$const38.8': [(<numba.core.ir.Assign object at 0x7c89e8927280>,
                             20)],
             '$const6.2': [(<numba.core.ir.Assign object at 0x7c89e89259c0>,
                            0)],
             '$phi60.0': [(<numba.core.ir.Assign object at 0x7c89e85b11b0>,
                           56)],
             '$phi62.1': [(<numba.core.ir.Assign object at 0x7c89e8924fa0>,
                           60)],
             'a': [(<numba.core.ir.Assign object at 0x7c89e8925420>, 0)],
             'bool10': [(<numba.core.ir.Assign object at 0x7c89e8925cc0>, 0)],
             'bool50': [(<numba.core.ir.Assign object at 0x7c89e8927ac0>, 20)],
             'bool78': [(<numba.core.ir.Assign object at 0x7c89e8929fc0>, 62)],
             'bool96': [(<numba.core.ir.Assign object at 0x7c89e8928df0>, 88)],
             'it': [(<numba.core.ir.Assign object at 0x7c89e8926ad0>, 20)],
             'max_value': [(<numba.core.ir.Assign object at 0x7c89e8927490>,
                            20),
                           (<numba.core.ir.Assign object at 0x7c89e8928a90>,
                            98)],
             'v': [(<numba.core.ir.Assign object at 0x7c89e8929390>, 62)],
             'view': [(<numba.core.ir.Assign object at 0x7c89e892bca0>, 62)]})
2025-01-31 15:31:42,459 - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x7c89e85b27a0>
2025-01-31 15:31:42,459 - DEBUG - Fix SSA violator on var max_value
2025-01-31 15:31:42,459 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-31 15:31:42,459 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e8928e50>
2025-01-31 15:31:42,459 - DEBUG - on stmt: a = arg(0, name=a)
2025-01-31 15:31:42,459 - DEBUG - on stmt: $4load_attr.1 = getattr(value=a, attr=size)
2025-01-31 15:31:42,459 - DEBUG - on stmt: $const6.2 = const(int, 0)
2025-01-31 15:31:42,459 - DEBUG - on stmt: $8compare_op.3 = $4load_attr.1 == $const6.2
2025-01-31 15:31:42,459 - DEBUG - on stmt: bool10 = global(bool: <class 'bool'>)
2025-01-31 15:31:42,459 - DEBUG - on stmt: $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:571),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,459 - DEBUG - on stmt: branch $10pred, 12, 20
2025-01-31 15:31:42,459 - DEBUG - ==== SSA block rewrite pass on 12
2025-01-31 15:31:42,459 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e8928e50>
2025-01-31 15:31:42,459 - DEBUG - on stmt: $12load_global.0 = global(ValueError: <class 'ValueError'>)
2025-01-31 15:31:42,459 - DEBUG - on stmt: $const14.1 = const(str, zero-size array to reduction operation maximum which has no identity)
2025-01-31 15:31:42,459 - DEBUG - on stmt: $16call_function.2 = call $12load_global.0($const14.1, func=$12load_global.0, args=[Var($const14.1, arraymath.py:572)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,459 - DEBUG - on stmt: <static> raise <class 'ValueError'>('zero-size array to reduction operation maximum which has no identity')
2025-01-31 15:31:42,459 - DEBUG - ==== SSA block rewrite pass on 20
2025-01-31 15:31:42,459 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e8928e50>
2025-01-31 15:31:42,459 - DEBUG - on stmt: $20load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:42,460 - DEBUG - on stmt: $22load_method.1 = getattr(value=$20load_global.0, attr=nditer)
2025-01-31 15:31:42,460 - DEBUG - on stmt: it = call $22load_method.1(a, func=$22load_method.1, args=[Var(a, arraymath.py:570)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,460 - DEBUG - on stmt: $30load_global.4 = global(next: <built-in function next>)
2025-01-31 15:31:42,460 - DEBUG - on stmt: $34call_function.6 = call $30load_global.4(it, func=$30load_global.4, args=[Var(it, arraymath.py:575)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,460 - DEBUG - on stmt: $36load_method.7 = getattr(value=$34call_function.6, attr=take)
2025-01-31 15:31:42,460 - DEBUG - on stmt: $const38.8 = const(int, 0)
2025-01-31 15:31:42,460 - DEBUG - on stmt: max_value = call $36load_method.7($const38.8, func=$36load_method.7, args=[Var($const38.8, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,460 - DEBUG - first assign: max_value
2025-01-31 15:31:42,460 - DEBUG - replaced with: max_value = call $36load_method.7($const38.8, func=$36load_method.7, args=[Var($const38.8, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,460 - DEBUG - on stmt: $44load_deref.10 = freevar(pre_return_func: <function return_false at 0x7c89f0822950>)
2025-01-31 15:31:42,460 - DEBUG - on stmt: $48call_function.12 = call $44load_deref.10(max_value, func=$44load_deref.10, args=[Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,460 - DEBUG - on stmt: bool50 = global(bool: <class 'bool'>)
2025-01-31 15:31:42,460 - DEBUG - on stmt: $50pred = call bool50($48call_function.12, func=bool50, args=(Var($48call_function.12, arraymath.py:577),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,460 - DEBUG - on stmt: branch $50pred, 52, 56
2025-01-31 15:31:42,460 - DEBUG - ==== SSA block rewrite pass on 52
2025-01-31 15:31:42,460 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e8928e50>
2025-01-31 15:31:42,460 - DEBUG - on stmt: $54return_value.1 = cast(value=max_value)
2025-01-31 15:31:42,460 - DEBUG - on stmt: return $54return_value.1
2025-01-31 15:31:42,460 - DEBUG - ==== SSA block rewrite pass on 56
2025-01-31 15:31:42,460 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e8928e50>
2025-01-31 15:31:42,460 - DEBUG - on stmt: $58get_iter.1 = getiter(value=it)
2025-01-31 15:31:42,460 - DEBUG - on stmt: $phi60.0 = $58get_iter.1
2025-01-31 15:31:42,460 - DEBUG - on stmt: jump 60
2025-01-31 15:31:42,460 - DEBUG - ==== SSA block rewrite pass on 60
2025-01-31 15:31:42,460 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e8928e50>
2025-01-31 15:31:42,460 - DEBUG - on stmt: $60for_iter.1 = iternext(value=$phi60.0)
2025-01-31 15:31:42,460 - DEBUG - on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
2025-01-31 15:31:42,460 - DEBUG - on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
2025-01-31 15:31:42,461 - DEBUG - on stmt: $phi62.1 = $60for_iter.2
2025-01-31 15:31:42,461 - DEBUG - on stmt: branch $60for_iter.3, 62, 104
2025-01-31 15:31:42,461 - DEBUG - ==== SSA block rewrite pass on 62
2025-01-31 15:31:42,461 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e8928e50>
2025-01-31 15:31:42,461 - DEBUG - on stmt: view = $phi62.1
2025-01-31 15:31:42,461 - DEBUG - on stmt: $66load_method.3 = getattr(value=view, attr=item)
2025-01-31 15:31:42,461 - DEBUG - on stmt: v = call $66load_method.3(func=$66load_method.3, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,461 - DEBUG - on stmt: $72load_deref.5 = freevar(pre_return_func: <function return_false at 0x7c89f0822950>)
2025-01-31 15:31:42,461 - DEBUG - on stmt: $76call_function.7 = call $72load_deref.5(v, func=$72load_deref.5, args=[Var(v, arraymath.py:581)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,461 - DEBUG - on stmt: bool78 = global(bool: <class 'bool'>)
2025-01-31 15:31:42,461 - DEBUG - on stmt: $78pred = call bool78($76call_function.7, func=bool78, args=(Var($76call_function.7, arraymath.py:582),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,461 - DEBUG - on stmt: branch $78pred, 80, 88
2025-01-31 15:31:42,461 - DEBUG - ==== SSA block rewrite pass on 80
2025-01-31 15:31:42,461 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e8928e50>
2025-01-31 15:31:42,461 - DEBUG - on stmt: $86return_value.2 = cast(value=v)
2025-01-31 15:31:42,461 - DEBUG - on stmt: return $86return_value.2
2025-01-31 15:31:42,461 - DEBUG - ==== SSA block rewrite pass on 88
2025-01-31 15:31:42,461 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e8928e50>
2025-01-31 15:31:42,461 - DEBUG - on stmt: $88load_deref.1 = freevar(comparator: <function max_comparator at 0x7c89f0822440>)
2025-01-31 15:31:42,461 - DEBUG - on stmt: $94call_function.4 = call $88load_deref.1(v, max_value, func=$88load_deref.1, args=[Var(v, arraymath.py:581), Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,461 - DEBUG - on stmt: bool96 = global(bool: <class 'bool'>)
2025-01-31 15:31:42,461 - DEBUG - on stmt: $96pred = call bool96($94call_function.4, func=bool96, args=(Var($94call_function.4, arraymath.py:584),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,461 - DEBUG - on stmt: branch $96pred, 98, 102
2025-01-31 15:31:42,461 - DEBUG - ==== SSA block rewrite pass on 98
2025-01-31 15:31:42,461 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e8928e50>
2025-01-31 15:31:42,461 - DEBUG - on stmt: max_value = v
2025-01-31 15:31:42,461 - DEBUG - replaced with: max_value.1 = v
2025-01-31 15:31:42,461 - DEBUG - on stmt: jump 102
2025-01-31 15:31:42,462 - DEBUG - ==== SSA block rewrite pass on 102
2025-01-31 15:31:42,462 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e8928e50>
2025-01-31 15:31:42,462 - DEBUG - on stmt: jump 60
2025-01-31 15:31:42,462 - DEBUG - ==== SSA block rewrite pass on 104
2025-01-31 15:31:42,462 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e8928e50>
2025-01-31 15:31:42,462 - DEBUG - on stmt: $106return_value.1 = cast(value=max_value)
2025-01-31 15:31:42,462 - DEBUG - on stmt: return $106return_value.1
2025-01-31 15:31:42,462 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {20: [<numba.core.ir.Assign object at 0x7c89e8928c10>],
             98: [<numba.core.ir.Assign object at 0x7c89e892add0>]})
2025-01-31 15:31:42,462 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-31 15:31:42,462 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e8928e50>
2025-01-31 15:31:42,462 - DEBUG - on stmt: a = arg(0, name=a)
2025-01-31 15:31:42,462 - DEBUG - on stmt: $4load_attr.1 = getattr(value=a, attr=size)
2025-01-31 15:31:42,462 - DEBUG - on stmt: $const6.2 = const(int, 0)
2025-01-31 15:31:42,462 - DEBUG - on stmt: $8compare_op.3 = $4load_attr.1 == $const6.2
2025-01-31 15:31:42,462 - DEBUG - on stmt: bool10 = global(bool: <class 'bool'>)
2025-01-31 15:31:42,462 - DEBUG - on stmt: $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:571),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,462 - DEBUG - on stmt: branch $10pred, 12, 20
2025-01-31 15:31:42,462 - DEBUG - ==== SSA block rewrite pass on 12
2025-01-31 15:31:42,462 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e8928e50>
2025-01-31 15:31:42,462 - DEBUG - on stmt: $12load_global.0 = global(ValueError: <class 'ValueError'>)
2025-01-31 15:31:42,462 - DEBUG - on stmt: $const14.1 = const(str, zero-size array to reduction operation maximum which has no identity)
2025-01-31 15:31:42,462 - DEBUG - on stmt: $16call_function.2 = call $12load_global.0($const14.1, func=$12load_global.0, args=[Var($const14.1, arraymath.py:572)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,462 - DEBUG - on stmt: <static> raise <class 'ValueError'>('zero-size array to reduction operation maximum which has no identity')
2025-01-31 15:31:42,462 - DEBUG - ==== SSA block rewrite pass on 20
2025-01-31 15:31:42,462 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e8928e50>
2025-01-31 15:31:42,462 - DEBUG - on stmt: $20load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:42,462 - DEBUG - on stmt: $22load_method.1 = getattr(value=$20load_global.0, attr=nditer)
2025-01-31 15:31:42,463 - DEBUG - on stmt: it = call $22load_method.1(a, func=$22load_method.1, args=[Var(a, arraymath.py:570)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,463 - DEBUG - on stmt: $30load_global.4 = global(next: <built-in function next>)
2025-01-31 15:31:42,463 - DEBUG - on stmt: $34call_function.6 = call $30load_global.4(it, func=$30load_global.4, args=[Var(it, arraymath.py:575)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,463 - DEBUG - on stmt: $36load_method.7 = getattr(value=$34call_function.6, attr=take)
2025-01-31 15:31:42,463 - DEBUG - on stmt: $const38.8 = const(int, 0)
2025-01-31 15:31:42,463 - DEBUG - on stmt: max_value = call $36load_method.7($const38.8, func=$36load_method.7, args=[Var($const38.8, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,463 - DEBUG - on stmt: $44load_deref.10 = freevar(pre_return_func: <function return_false at 0x7c89f0822950>)
2025-01-31 15:31:42,463 - DEBUG - on stmt: $48call_function.12 = call $44load_deref.10(max_value, func=$44load_deref.10, args=[Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,463 - DEBUG - find_def var='max_value' stmt=$48call_function.12 = call $44load_deref.10(max_value, func=$44load_deref.10, args=[Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,463 - DEBUG - on stmt: bool50 = global(bool: <class 'bool'>)
2025-01-31 15:31:42,463 - DEBUG - on stmt: $50pred = call bool50($48call_function.12, func=bool50, args=(Var($48call_function.12, arraymath.py:577),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,463 - DEBUG - on stmt: branch $50pred, 52, 56
2025-01-31 15:31:42,463 - DEBUG - ==== SSA block rewrite pass on 52
2025-01-31 15:31:42,463 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e8928e50>
2025-01-31 15:31:42,463 - DEBUG - on stmt: $54return_value.1 = cast(value=max_value)
2025-01-31 15:31:42,463 - DEBUG - find_def var='max_value' stmt=$54return_value.1 = cast(value=max_value)
2025-01-31 15:31:42,463 - DEBUG - find_def_from_top label 52
2025-01-31 15:31:42,463 - DEBUG - idom 20 from label 52
2025-01-31 15:31:42,463 - DEBUG - find_def_from_bottom label 20
2025-01-31 15:31:42,463 - DEBUG - on stmt: return $54return_value.1
2025-01-31 15:31:42,463 - DEBUG - ==== SSA block rewrite pass on 56
2025-01-31 15:31:42,463 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e8928e50>
2025-01-31 15:31:42,463 - DEBUG - on stmt: $58get_iter.1 = getiter(value=it)
2025-01-31 15:31:42,463 - DEBUG - on stmt: $phi60.0 = $58get_iter.1
2025-01-31 15:31:42,463 - DEBUG - on stmt: jump 60
2025-01-31 15:31:42,463 - DEBUG - ==== SSA block rewrite pass on 60
2025-01-31 15:31:42,464 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e8928e50>
2025-01-31 15:31:42,464 - DEBUG - on stmt: $60for_iter.1 = iternext(value=$phi60.0)
2025-01-31 15:31:42,464 - DEBUG - on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
2025-01-31 15:31:42,464 - DEBUG - on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
2025-01-31 15:31:42,464 - DEBUG - on stmt: $phi62.1 = $60for_iter.2
2025-01-31 15:31:42,464 - DEBUG - on stmt: branch $60for_iter.3, 62, 104
2025-01-31 15:31:42,464 - DEBUG - ==== SSA block rewrite pass on 62
2025-01-31 15:31:42,464 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e8928e50>
2025-01-31 15:31:42,464 - DEBUG - on stmt: view = $phi62.1
2025-01-31 15:31:42,464 - DEBUG - on stmt: $66load_method.3 = getattr(value=view, attr=item)
2025-01-31 15:31:42,464 - DEBUG - on stmt: v = call $66load_method.3(func=$66load_method.3, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,464 - DEBUG - on stmt: $72load_deref.5 = freevar(pre_return_func: <function return_false at 0x7c89f0822950>)
2025-01-31 15:31:42,464 - DEBUG - on stmt: $76call_function.7 = call $72load_deref.5(v, func=$72load_deref.5, args=[Var(v, arraymath.py:581)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,464 - DEBUG - on stmt: bool78 = global(bool: <class 'bool'>)
2025-01-31 15:31:42,464 - DEBUG - on stmt: $78pred = call bool78($76call_function.7, func=bool78, args=(Var($76call_function.7, arraymath.py:582),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,464 - DEBUG - on stmt: branch $78pred, 80, 88
2025-01-31 15:31:42,464 - DEBUG - ==== SSA block rewrite pass on 80
2025-01-31 15:31:42,464 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e8928e50>
2025-01-31 15:31:42,464 - DEBUG - on stmt: $86return_value.2 = cast(value=v)
2025-01-31 15:31:42,464 - DEBUG - on stmt: return $86return_value.2
2025-01-31 15:31:42,464 - DEBUG - ==== SSA block rewrite pass on 88
2025-01-31 15:31:42,464 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e8928e50>
2025-01-31 15:31:42,464 - DEBUG - on stmt: $88load_deref.1 = freevar(comparator: <function max_comparator at 0x7c89f0822440>)
2025-01-31 15:31:42,464 - DEBUG - on stmt: $94call_function.4 = call $88load_deref.1(v, max_value, func=$88load_deref.1, args=[Var(v, arraymath.py:581), Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,464 - DEBUG - find_def var='max_value' stmt=$94call_function.4 = call $88load_deref.1(v, max_value, func=$88load_deref.1, args=[Var(v, arraymath.py:581), Var(max_value, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,464 - DEBUG - find_def_from_top label 88
2025-01-31 15:31:42,465 - DEBUG - idom 62 from label 88
2025-01-31 15:31:42,465 - DEBUG - find_def_from_bottom label 62
2025-01-31 15:31:42,465 - DEBUG - find_def_from_top label 62
2025-01-31 15:31:42,465 - DEBUG - idom 60 from label 62
2025-01-31 15:31:42,465 - DEBUG - find_def_from_bottom label 60
2025-01-31 15:31:42,465 - DEBUG - find_def_from_top label 60
2025-01-31 15:31:42,465 - DEBUG - insert phi node max_value.2 = phi(incoming_values=[], incoming_blocks=[]) at 60
2025-01-31 15:31:42,465 - DEBUG - find_def_from_bottom label 56
2025-01-31 15:31:42,465 - DEBUG - find_def_from_top label 56
2025-01-31 15:31:42,465 - DEBUG - idom 20 from label 56
2025-01-31 15:31:42,465 - DEBUG - find_def_from_bottom label 20
2025-01-31 15:31:42,465 - DEBUG - incoming_def max_value = call $36load_method.7($const38.8, func=$36load_method.7, args=[Var($const38.8, arraymath.py:576)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,465 - DEBUG - find_def_from_bottom label 102
2025-01-31 15:31:42,465 - DEBUG - find_def_from_top label 102
2025-01-31 15:31:42,465 - DEBUG - insert phi node max_value.3 = phi(incoming_values=[], incoming_blocks=[]) at 102
2025-01-31 15:31:42,465 - DEBUG - find_def_from_bottom label 88
2025-01-31 15:31:42,465 - DEBUG - find_def_from_top label 88
2025-01-31 15:31:42,465 - DEBUG - idom 62 from label 88
2025-01-31 15:31:42,465 - DEBUG - find_def_from_bottom label 62
2025-01-31 15:31:42,465 - DEBUG - find_def_from_top label 62
2025-01-31 15:31:42,465 - DEBUG - idom 60 from label 62
2025-01-31 15:31:42,465 - DEBUG - find_def_from_bottom label 60
2025-01-31 15:31:42,465 - DEBUG - incoming_def max_value.2 = phi(incoming_values=[Var(max_value, arraymath.py:576)], incoming_blocks=[56])
2025-01-31 15:31:42,465 - DEBUG - find_def_from_bottom label 98
2025-01-31 15:31:42,465 - DEBUG - incoming_def max_value.1 = v
2025-01-31 15:31:42,465 - DEBUG - incoming_def max_value.3 = phi(incoming_values=[Var(max_value.2, arraymath.py:584), Var(max_value.1, arraymath.py:585)], incoming_blocks=[88, 98])
2025-01-31 15:31:42,465 - DEBUG - replaced with: $94call_function.4 = call $88load_deref.1(v, max_value.2, func=$88load_deref.1, args=[Var(v, arraymath.py:581), Var(max_value.2, arraymath.py:584)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,465 - DEBUG - on stmt: bool96 = global(bool: <class 'bool'>)
2025-01-31 15:31:42,465 - DEBUG - on stmt: $96pred = call bool96($94call_function.4, func=bool96, args=(Var($94call_function.4, arraymath.py:584),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,466 - DEBUG - on stmt: branch $96pred, 98, 102
2025-01-31 15:31:42,466 - DEBUG - ==== SSA block rewrite pass on 98
2025-01-31 15:31:42,466 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e8928e50>
2025-01-31 15:31:42,466 - DEBUG - on stmt: max_value.1 = v
2025-01-31 15:31:42,466 - DEBUG - on stmt: jump 102
2025-01-31 15:31:42,466 - DEBUG - ==== SSA block rewrite pass on 102
2025-01-31 15:31:42,466 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e8928e50>
2025-01-31 15:31:42,466 - DEBUG - on stmt: jump 60
2025-01-31 15:31:42,466 - DEBUG - ==== SSA block rewrite pass on 104
2025-01-31 15:31:42,466 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e8928e50>
2025-01-31 15:31:42,466 - DEBUG - on stmt: $106return_value.1 = cast(value=max_value)
2025-01-31 15:31:42,466 - DEBUG - find_def var='max_value' stmt=$106return_value.1 = cast(value=max_value)
2025-01-31 15:31:42,466 - DEBUG - find_def_from_top label 104
2025-01-31 15:31:42,466 - DEBUG - idom 60 from label 104
2025-01-31 15:31:42,466 - DEBUG - find_def_from_bottom label 60
2025-01-31 15:31:42,466 - DEBUG - replaced with: $106return_value.1 = cast(value=max_value.2)
2025-01-31 15:31:42,466 - DEBUG - on stmt: return $106return_value.1
2025-01-31 15:31:42,470 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=4691)
           2	LOAD_FAST(arg=1, lineno=4692)
           4	LOAD_FAST(arg=0, lineno=4692)
           6	LOAD_ATTR(arg=0, lineno=4692)
           8	LOAD_CONST(arg=1, lineno=4692)
          10	BINARY_SUBTRACT(arg=None, lineno=4692)
          12	COMPARE_OP(arg=4, lineno=4692)
          14	POP_JUMP_IF_TRUE(arg=15, lineno=4692)
          16	LOAD_FAST(arg=1, lineno=4692)
          18	LOAD_FAST(arg=0, lineno=4692)
          20	LOAD_ATTR(arg=0, lineno=4692)
          22	UNARY_NEGATIVE(arg=None, lineno=4692)
          24	COMPARE_OP(arg=0, lineno=4692)
          26	POP_JUMP_IF_FALSE(arg=19, lineno=4692)
>         28	LOAD_GLOBAL(arg=1, lineno=4693)
          30	LOAD_CONST(arg=2, lineno=4693)
          32	CALL_FUNCTION(arg=1, lineno=4693)
          34	RAISE_VARARGS(arg=1, lineno=4693)
>         36	LOAD_FAST(arg=0, lineno=4694)
          38	LOAD_METHOD(arg=2, lineno=4694)
          40	CALL_METHOD(arg=0, lineno=4694)
          42	LOAD_FAST(arg=1, lineno=4694)
          44	BINARY_SUBSCR(arg=None, lineno=4694)
          46	RETURN_VALUE(arg=None, lineno=4694)
2025-01-31 15:31:42,470 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:31:42,470 - DEBUG - stack: []
2025-01-31 15:31:42,470 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:31:42,471 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=4691)
2025-01-31 15:31:42,471 - DEBUG - stack []
2025-01-31 15:31:42,471 - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=4692)
2025-01-31 15:31:42,471 - DEBUG - stack []
2025-01-31 15:31:42,471 - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=4692)
2025-01-31 15:31:42,471 - DEBUG - stack ['$indices2.0']
2025-01-31 15:31:42,471 - DEBUG - dispatch pc=6, inst=LOAD_ATTR(arg=0, lineno=4692)
2025-01-31 15:31:42,471 - DEBUG - stack ['$indices2.0', '$a4.1']
2025-01-31 15:31:42,471 - DEBUG - dispatch pc=8, inst=LOAD_CONST(arg=1, lineno=4692)
2025-01-31 15:31:42,471 - DEBUG - stack ['$indices2.0', '$6load_attr.2']
2025-01-31 15:31:42,471 - DEBUG - dispatch pc=10, inst=BINARY_SUBTRACT(arg=None, lineno=4692)
2025-01-31 15:31:42,471 - DEBUG - stack ['$indices2.0', '$6load_attr.2', '$const8.3']
2025-01-31 15:31:42,471 - DEBUG - dispatch pc=12, inst=COMPARE_OP(arg=4, lineno=4692)
2025-01-31 15:31:42,471 - DEBUG - stack ['$indices2.0', '$10binary_subtract.4']
2025-01-31 15:31:42,471 - DEBUG - dispatch pc=14, inst=POP_JUMP_IF_TRUE(arg=15, lineno=4692)
2025-01-31 15:31:42,471 - DEBUG - stack ['$12compare_op.5']
2025-01-31 15:31:42,471 - DEBUG - end state. edges=[Edge(pc=16, stack=(), blockstack=(), npush=0), Edge(pc=28, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:42,471 - DEBUG - pending: deque([State(pc_initial=16 nstack_initial=0), State(pc_initial=28 nstack_initial=0)])
2025-01-31 15:31:42,471 - DEBUG - stack: []
2025-01-31 15:31:42,471 - DEBUG - state.pc_initial: State(pc_initial=16 nstack_initial=0)
2025-01-31 15:31:42,471 - DEBUG - dispatch pc=16, inst=LOAD_FAST(arg=1, lineno=4692)
2025-01-31 15:31:42,471 - DEBUG - stack []
2025-01-31 15:31:42,471 - DEBUG - dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=4692)
2025-01-31 15:31:42,471 - DEBUG - stack ['$indices16.0']
2025-01-31 15:31:42,471 - DEBUG - dispatch pc=20, inst=LOAD_ATTR(arg=0, lineno=4692)
2025-01-31 15:31:42,471 - DEBUG - stack ['$indices16.0', '$a18.1']
2025-01-31 15:31:42,471 - DEBUG - dispatch pc=22, inst=UNARY_NEGATIVE(arg=None, lineno=4692)
2025-01-31 15:31:42,471 - DEBUG - stack ['$indices16.0', '$20load_attr.2']
2025-01-31 15:31:42,472 - DEBUG - dispatch pc=24, inst=COMPARE_OP(arg=0, lineno=4692)
2025-01-31 15:31:42,472 - DEBUG - stack ['$indices16.0', '$22unary_negative.3']
2025-01-31 15:31:42,472 - DEBUG - dispatch pc=26, inst=POP_JUMP_IF_FALSE(arg=19, lineno=4692)
2025-01-31 15:31:42,472 - DEBUG - stack ['$24compare_op.4']
2025-01-31 15:31:42,472 - DEBUG - end state. edges=[Edge(pc=28, stack=(), blockstack=(), npush=0), Edge(pc=36, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:42,472 - DEBUG - pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2025-01-31 15:31:42,472 - DEBUG - stack: []
2025-01-31 15:31:42,472 - DEBUG - state.pc_initial: State(pc_initial=28 nstack_initial=0)
2025-01-31 15:31:42,472 - DEBUG - dispatch pc=28, inst=LOAD_GLOBAL(arg=1, lineno=4693)
2025-01-31 15:31:42,472 - DEBUG - stack []
2025-01-31 15:31:42,472 - DEBUG - dispatch pc=30, inst=LOAD_CONST(arg=2, lineno=4693)
2025-01-31 15:31:42,472 - DEBUG - stack ['$28load_global.0']
2025-01-31 15:31:42,472 - DEBUG - dispatch pc=32, inst=CALL_FUNCTION(arg=1, lineno=4693)
2025-01-31 15:31:42,472 - DEBUG - stack ['$28load_global.0', '$const30.1']
2025-01-31 15:31:42,472 - DEBUG - dispatch pc=34, inst=RAISE_VARARGS(arg=1, lineno=4693)
2025-01-31 15:31:42,472 - DEBUG - stack ['$32call_function.2']
2025-01-31 15:31:42,472 - DEBUG - end state. edges=[]
2025-01-31 15:31:42,472 - DEBUG - pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2025-01-31 15:31:42,472 - DEBUG - pending: deque([State(pc_initial=36 nstack_initial=0)])
2025-01-31 15:31:42,472 - DEBUG - stack: []
2025-01-31 15:31:42,472 - DEBUG - state.pc_initial: State(pc_initial=36 nstack_initial=0)
2025-01-31 15:31:42,472 - DEBUG - dispatch pc=36, inst=LOAD_FAST(arg=0, lineno=4694)
2025-01-31 15:31:42,472 - DEBUG - stack []
2025-01-31 15:31:42,472 - DEBUG - dispatch pc=38, inst=LOAD_METHOD(arg=2, lineno=4694)
2025-01-31 15:31:42,472 - DEBUG - stack ['$a36.0']
2025-01-31 15:31:42,472 - DEBUG - dispatch pc=40, inst=CALL_METHOD(arg=0, lineno=4694)
2025-01-31 15:31:42,472 - DEBUG - stack ['$38load_method.1']
2025-01-31 15:31:42,472 - DEBUG - dispatch pc=42, inst=LOAD_FAST(arg=1, lineno=4694)
2025-01-31 15:31:42,472 - DEBUG - stack ['$40call_method.2']
2025-01-31 15:31:42,473 - DEBUG - dispatch pc=44, inst=BINARY_SUBSCR(arg=None, lineno=4694)
2025-01-31 15:31:42,473 - DEBUG - stack ['$40call_method.2', '$indices42.3']
2025-01-31 15:31:42,473 - DEBUG - dispatch pc=46, inst=RETURN_VALUE(arg=None, lineno=4694)
2025-01-31 15:31:42,473 - DEBUG - stack ['$44binary_subscr.4']
2025-01-31 15:31:42,473 - DEBUG - end state. edges=[]
2025-01-31 15:31:42,473 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:31:42,473 - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=16 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set()})
2025-01-31 15:31:42,473 - DEBUG - defmap: {}
2025-01-31 15:31:42,473 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:42,473 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:42,473 - DEBUG - keep phismap: {}
2025-01-31 15:31:42,473 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-01-31 15:31:42,473 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:31:42,473 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$indices2.0'}), (4, {'res': '$a4.1'}), (6, {'item': '$a4.1', 'res': '$6load_attr.2'}), (8, {'res': '$const8.3'}), (10, {'lhs': '$6load_attr.2', 'rhs': '$const8.3', 'res': '$10binary_subtract.4'}), (12, {'lhs': '$indices2.0', 'rhs': '$10binary_subtract.4', 'res': '$12compare_op.5'}), (14, {'pred': '$12compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={16: (), 28: ()})
2025-01-31 15:31:42,473 - DEBUG - block_infos State(pc_initial=16 nstack_initial=0):
AdaptBlockInfo(insts=((16, {'res': '$indices16.0'}), (18, {'res': '$a18.1'}), (20, {'item': '$a18.1', 'res': '$20load_attr.2'}), (22, {'value': '$20load_attr.2', 'res': '$22unary_negative.3'}), (24, {'lhs': '$indices16.0', 'rhs': '$22unary_negative.3', 'res': '$24compare_op.4'}), (26, {'pred': '$24compare_op.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: (), 36: ()})
2025-01-31 15:31:42,473 - DEBUG - block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$28load_global.0'}), (30, {'res': '$const30.1'}), (32, {'func': '$28load_global.0', 'args': ['$const30.1'], 'res': '$32call_function.2'}), (34, {'exc': '$32call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:42,473 - DEBUG - block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$a36.0'}), (38, {'item': '$a36.0', 'res': '$38load_method.1'}), (40, {'func': '$38load_method.1', 'args': [], 'res': '$40call_method.2'}), (42, {'res': '$indices42.3'}), (44, {'index': '$indices42.3', 'target': '$40call_method.2', 'res': '$44binary_subscr.4'}), (46, {'retval': '$44binary_subscr.4', 'castval': '$46return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:42,474 - DEBUG - label 0:
    a = arg(0, name=a)                       ['a']
    indices = arg(1, name=indices)           ['indices']
    $6load_attr.2 = getattr(value=a, attr=size) ['$6load_attr.2', 'a']
    $const8.3 = const(int, 1)                ['$const8.3']
    $10binary_subtract.4 = $6load_attr.2 - $const8.3 ['$10binary_subtract.4', '$6load_attr.2', '$const8.3']
    $12compare_op.5 = indices > $10binary_subtract.4 ['$10binary_subtract.4', '$12compare_op.5', 'indices']
    bool14 = global(bool: <class 'bool'>)    ['bool14']
    $14pred = call bool14($12compare_op.5, func=bool14, args=(Var($12compare_op.5, arrayobj.py:4692),), kws=(), vararg=None, varkwarg=None, target=None) ['$12compare_op.5', '$14pred', 'bool14']
    branch $14pred, 28, 16                   ['$14pred']
label 16:
    $20load_attr.2 = getattr(value=a, attr=size) ['$20load_attr.2', 'a']
    $22unary_negative.3 = unary(fn=<built-in function neg>, value=$20load_attr.2) ['$20load_attr.2', '$22unary_negative.3']
    $24compare_op.4 = indices < $22unary_negative.3 ['$22unary_negative.3', '$24compare_op.4', 'indices']
    bool26 = global(bool: <class 'bool'>)    ['bool26']
    $26pred = call bool26($24compare_op.4, func=bool26, args=(Var($24compare_op.4, arrayobj.py:4692),), kws=(), vararg=None, varkwarg=None, target=None) ['$24compare_op.4', '$26pred', 'bool26']
    branch $26pred, 28, 36                   ['$26pred']
label 28:
    $28load_global.0 = global(IndexError: <class 'IndexError'>) ['$28load_global.0']
    $const30.1 = const(str, Index out of bounds) ['$const30.1']
    $32call_function.2 = call $28load_global.0($const30.1, func=$28load_global.0, args=[Var($const30.1, arrayobj.py:4693)], kws=(), vararg=None, varkwarg=None, target=None) ['$28load_global.0', '$32call_function.2', '$const30.1']
    raise $32call_function.2                 ['$32call_function.2']
label 36:
    $38load_method.1 = getattr(value=a, attr=ravel) ['$38load_method.1', 'a']
    $40call_method.2 = call $38load_method.1(func=$38load_method.1, args=[], kws=(), vararg=None, varkwarg=None, target=None) ['$38load_method.1', '$40call_method.2']
    $44binary_subscr.4 = getitem(value=$40call_method.2, index=indices, fn=<built-in function getitem>) ['$40call_method.2', '$44binary_subscr.4', 'indices']
    $46return_value.5 = cast(value=$44binary_subscr.4) ['$44binary_subscr.4', '$46return_value.5']
    return $46return_value.5                 ['$46return_value.5']

2025-01-31 15:31:42,479 - DEBUG - ==== SSA block analysis pass on 0
2025-01-31 15:31:42,479 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e89a8df0>
2025-01-31 15:31:42,479 - DEBUG - on stmt: a = arg(0, name=a)
2025-01-31 15:31:42,479 - DEBUG - on stmt: indices = arg(1, name=indices)
2025-01-31 15:31:42,479 - DEBUG - on stmt: $6load_attr.2 = getattr(value=a, attr=size)
2025-01-31 15:31:42,479 - DEBUG - on stmt: $const8.3 = const(int, 1)
2025-01-31 15:31:42,479 - DEBUG - on stmt: $10binary_subtract.4 = $6load_attr.2 - $const8.3
2025-01-31 15:31:42,479 - DEBUG - on stmt: $12compare_op.5 = indices > $10binary_subtract.4
2025-01-31 15:31:42,479 - DEBUG - on stmt: bool14 = global(bool: <class 'bool'>)
2025-01-31 15:31:42,479 - DEBUG - on stmt: $14pred = call bool14($12compare_op.5, func=bool14, args=(Var($12compare_op.5, arrayobj.py:4692),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,479 - DEBUG - on stmt: branch $14pred, 28, 16
2025-01-31 15:31:42,479 - DEBUG - ==== SSA block analysis pass on 16
2025-01-31 15:31:42,479 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e89a8df0>
2025-01-31 15:31:42,479 - DEBUG - on stmt: $20load_attr.2 = getattr(value=a, attr=size)
2025-01-31 15:31:42,479 - DEBUG - on stmt: $22unary_negative.3 = unary(fn=<built-in function neg>, value=$20load_attr.2)
2025-01-31 15:31:42,479 - DEBUG - on stmt: $24compare_op.4 = indices < $22unary_negative.3
2025-01-31 15:31:42,479 - DEBUG - on stmt: bool26 = global(bool: <class 'bool'>)
2025-01-31 15:31:42,480 - DEBUG - on stmt: $26pred = call bool26($24compare_op.4, func=bool26, args=(Var($24compare_op.4, arrayobj.py:4692),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,480 - DEBUG - on stmt: branch $26pred, 28, 36
2025-01-31 15:31:42,480 - DEBUG - ==== SSA block analysis pass on 28
2025-01-31 15:31:42,480 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e89a8df0>
2025-01-31 15:31:42,480 - DEBUG - on stmt: $28load_global.0 = global(IndexError: <class 'IndexError'>)
2025-01-31 15:31:42,480 - DEBUG - on stmt: $const30.1 = const(str, Index out of bounds)
2025-01-31 15:31:42,480 - DEBUG - on stmt: $32call_function.2 = call $28load_global.0($const30.1, func=$28load_global.0, args=[Var($const30.1, arrayobj.py:4693)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,480 - DEBUG - on stmt: <static> raise <class 'IndexError'>('Index out of bounds')
2025-01-31 15:31:42,480 - DEBUG - ==== SSA block analysis pass on 36
2025-01-31 15:31:42,480 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e89a8df0>
2025-01-31 15:31:42,480 - DEBUG - on stmt: $38load_method.1 = getattr(value=a, attr=ravel)
2025-01-31 15:31:42,480 - DEBUG - on stmt: $40call_method.2 = call $38load_method.1(func=$38load_method.1, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,480 - DEBUG - on stmt: $44binary_subscr.4 = getitem(value=$40call_method.2, index=indices, fn=<built-in function getitem>)
2025-01-31 15:31:42,480 - DEBUG - on stmt: $46return_value.5 = cast(value=$44binary_subscr.4)
2025-01-31 15:31:42,480 - DEBUG - on stmt: return $46return_value.5
2025-01-31 15:31:42,480 - DEBUG - defs defaultdict(<class 'list'>,
            {'$10binary_subtract.4': [(<numba.core.ir.Assign object at 0x7c89e89aa110>,
                                       0)],
             '$12compare_op.5': [(<numba.core.ir.Assign object at 0x7c89e89aa290>,
                                  0)],
             '$14pred': [(<numba.core.ir.Assign object at 0x7c89e89aa500>, 0)],
             '$20load_attr.2': [(<numba.core.ir.Assign object at 0x7c89e89aa920>,
                                 16)],
             '$22unary_negative.3': [(<numba.core.ir.Assign object at 0x7c89e89aaaa0>,
                                      16)],
             '$24compare_op.4': [(<numba.core.ir.Assign object at 0x7c89e89aac50>,
                                  16)],
             '$26pred': [(<numba.core.ir.Assign object at 0x7c89e89aaec0>, 16)],
             '$28load_global.0': [(<numba.core.ir.Assign object at 0x7c89e89ab0a0>,
                                   28)],
             '$32call_function.2': [(<numba.core.ir.Assign object at 0x7c89e89ab400>,
                                     28)],
             '$38load_method.1': [(<numba.core.ir.Assign object at 0x7c89e89ab7c0>,
                                   36)],
             '$40call_method.2': [(<numba.core.ir.Assign object at 0x7c89e89ab9d0>,
                                   36)],
             '$44binary_subscr.4': [(<numba.core.ir.Assign object at 0x7c89e89abc10>,
                                     36)],
             '$46return_value.5': [(<numba.core.ir.Assign object at 0x7c89e89abd60>,
                                    36)],
             '$6load_attr.2': [(<numba.core.ir.Assign object at 0x7c89e89a9de0>,
                                0)],
             '$const30.1': [(<numba.core.ir.Assign object at 0x7c89e89ab220>,
                             28)],
             '$const8.3': [(<numba.core.ir.Assign object at 0x7c89e89a9f60>,
                            0)],
             'a': [(<numba.core.ir.Assign object at 0x7c89e89a8910>, 0)],
             'bool14': [(<numba.core.ir.Assign object at 0x7c89e89aa3e0>, 0)],
             'bool26': [(<numba.core.ir.Assign object at 0x7c89e89aada0>, 16)],
             'indices': [(<numba.core.ir.Assign object at 0x7c89e89a9a20>, 0)]})
2025-01-31 15:31:42,481 - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x7c89e89a8df0>
2025-01-31 15:31:42,495 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=2230)
           2	LOAD_FAST(arg=0, lineno=2232)
           4	LOAD_METHOD(arg=0, lineno=2232)
           6	LOAD_FAST(arg=0, lineno=2232)
           8	LOAD_ATTR(arg=1, lineno=2232)
          10	CALL_METHOD(arg=1, lineno=2232)
          12	RETURN_VALUE(arg=None, lineno=2232)
2025-01-31 15:31:42,495 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:31:42,495 - DEBUG - stack: []
2025-01-31 15:31:42,495 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:31:42,495 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=2230)
2025-01-31 15:31:42,495 - DEBUG - stack []
2025-01-31 15:31:42,495 - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=2232)
2025-01-31 15:31:42,495 - DEBUG - stack []
2025-01-31 15:31:42,495 - DEBUG - dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=2232)
2025-01-31 15:31:42,495 - DEBUG - stack ['$ary2.0']
2025-01-31 15:31:42,495 - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=2232)
2025-01-31 15:31:42,496 - DEBUG - stack ['$4load_method.1']
2025-01-31 15:31:42,496 - DEBUG - dispatch pc=8, inst=LOAD_ATTR(arg=1, lineno=2232)
2025-01-31 15:31:42,496 - DEBUG - stack ['$4load_method.1', '$ary6.2']
2025-01-31 15:31:42,496 - DEBUG - dispatch pc=10, inst=CALL_METHOD(arg=1, lineno=2232)
2025-01-31 15:31:42,496 - DEBUG - stack ['$4load_method.1', '$8load_attr.3']
2025-01-31 15:31:42,496 - DEBUG - dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=2232)
2025-01-31 15:31:42,496 - DEBUG - stack ['$10call_method.4']
2025-01-31 15:31:42,496 - DEBUG - end state. edges=[]
2025-01-31 15:31:42,496 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:31:42,496 - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-01-31 15:31:42,496 - DEBUG - defmap: {}
2025-01-31 15:31:42,496 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:42,496 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:42,496 - DEBUG - keep phismap: {}
2025-01-31 15:31:42,496 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-01-31 15:31:42,496 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:31:42,496 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$ary2.0'}), (4, {'item': '$ary2.0', 'res': '$4load_method.1'}), (6, {'res': '$ary6.2'}), (8, {'item': '$ary6.2', 'res': '$8load_attr.3'}), (10, {'func': '$4load_method.1', 'args': ['$8load_attr.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:42,499 - DEBUG - label 0:
    ary = arg(0, name=ary)                   ['ary']
    $4load_method.1 = getattr(value=ary, attr=reshape) ['$4load_method.1', 'ary']
    $8load_attr.3 = getattr(value=ary, attr=size) ['$8load_attr.3', 'ary']
    $10call_method.4 = call $4load_method.1($8load_attr.3, func=$4load_method.1, args=[Var($8load_attr.3, arrayobj.py:2232)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_method.4', '$4load_method.1', '$8load_attr.3']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

2025-01-31 15:31:42,502 - DEBUG - ==== SSA block analysis pass on 0
2025-01-31 15:31:42,502 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e897cee0>
2025-01-31 15:31:42,502 - DEBUG - on stmt: ary = arg(0, name=ary)
2025-01-31 15:31:42,502 - DEBUG - on stmt: $4load_method.1 = getattr(value=ary, attr=reshape)
2025-01-31 15:31:42,502 - DEBUG - on stmt: $8load_attr.3 = getattr(value=ary, attr=size)
2025-01-31 15:31:42,502 - DEBUG - on stmt: $10call_method.4 = call $4load_method.1($8load_attr.3, func=$4load_method.1, args=[Var($8load_attr.3, arrayobj.py:2232)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,502 - DEBUG - on stmt: $12return_value.5 = cast(value=$10call_method.4)
2025-01-31 15:31:42,502 - DEBUG - on stmt: return $12return_value.5
2025-01-31 15:31:42,502 - DEBUG - defs defaultdict(<class 'list'>,
            {'$10call_method.4': [(<numba.core.ir.Assign object at 0x7c89e897d5a0>,
                                   0)],
             '$12return_value.5': [(<numba.core.ir.Assign object at 0x7c89e897d690>,
                                    0)],
             '$4load_method.1': [(<numba.core.ir.Assign object at 0x7c89e897c670>,
                                  0)],
             '$8load_attr.3': [(<numba.core.ir.Assign object at 0x7c89e897cc70>,
                                0)],
             'ary': [(<numba.core.ir.Assign object at 0x7c89e897ce50>, 0)]})
2025-01-31 15:31:42,503 - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x7c89e897cee0>
2025-01-31 15:31:42,567 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=486)
           2	LOAD_CONST(arg=1, lineno=488)
           4	RETURN_VALUE(arg=None, lineno=488)
2025-01-31 15:31:42,568 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:31:42,568 - DEBUG - stack: []
2025-01-31 15:31:42,568 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:31:42,568 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=486)
2025-01-31 15:31:42,568 - DEBUG - stack []
2025-01-31 15:31:42,568 - DEBUG - dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=488)
2025-01-31 15:31:42,568 - DEBUG - stack []
2025-01-31 15:31:42,568 - DEBUG - dispatch pc=4, inst=RETURN_VALUE(arg=None, lineno=488)
2025-01-31 15:31:42,568 - DEBUG - stack ['$const2.0']
2025-01-31 15:31:42,568 - DEBUG - end state. edges=[]
2025-01-31 15:31:42,568 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:31:42,568 - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-01-31 15:31:42,568 - DEBUG - defmap: {}
2025-01-31 15:31:42,568 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:42,568 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:42,568 - DEBUG - keep phismap: {}
2025-01-31 15:31:42,568 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-01-31 15:31:42,568 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:31:42,568 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'retval': '$const2.0', 'castval': '$4return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:42,569 - DEBUG - label 0:
    a = arg(0, name=a)                       ['a']
    $const2.0 = const(bool, False)           ['$const2.0']
    $4return_value.1 = cast(value=$const2.0) ['$4return_value.1', '$const2.0']
    return $4return_value.1                  ['$4return_value.1']

2025-01-31 15:31:42,572 - DEBUG - ==== SSA block analysis pass on 0
2025-01-31 15:31:42,572 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8940520>
2025-01-31 15:31:42,572 - DEBUG - on stmt: a = arg(0, name=a)
2025-01-31 15:31:42,572 - DEBUG - on stmt: $const2.0 = const(bool, False)
2025-01-31 15:31:42,572 - DEBUG - on stmt: $4return_value.1 = cast(value=$const2.0)
2025-01-31 15:31:42,572 - DEBUG - on stmt: return $4return_value.1
2025-01-31 15:31:42,572 - DEBUG - defs defaultdict(<class 'list'>,
            {'$4return_value.1': [(<numba.core.ir.Assign object at 0x7c89e897e380>,
                                   0)],
             '$const2.0': [(<numba.core.ir.Assign object at 0x7c89e897e590>,
                            0)],
             'a': [(<numba.core.ir.Assign object at 0x7c89e897e110>, 0)]})
2025-01-31 15:31:42,572 - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x7c89e8940520>
2025-01-31 15:31:42,587 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=481)
           2	LOAD_FAST(arg=0, lineno=483)
           4	LOAD_FAST(arg=1, lineno=483)
           6	COMPARE_OP(arg=4, lineno=483)
           8	RETURN_VALUE(arg=None, lineno=483)
2025-01-31 15:31:42,587 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:31:42,587 - DEBUG - stack: []
2025-01-31 15:31:42,588 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:31:42,588 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=481)
2025-01-31 15:31:42,588 - DEBUG - stack []
2025-01-31 15:31:42,588 - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=483)
2025-01-31 15:31:42,588 - DEBUG - stack []
2025-01-31 15:31:42,588 - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=483)
2025-01-31 15:31:42,588 - DEBUG - stack ['$a2.0']
2025-01-31 15:31:42,588 - DEBUG - dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=483)
2025-01-31 15:31:42,588 - DEBUG - stack ['$a2.0', '$min_val4.1']
2025-01-31 15:31:42,588 - DEBUG - dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=483)
2025-01-31 15:31:42,588 - DEBUG - stack ['$6compare_op.2']
2025-01-31 15:31:42,588 - DEBUG - end state. edges=[]
2025-01-31 15:31:42,588 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:31:42,588 - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-01-31 15:31:42,588 - DEBUG - defmap: {}
2025-01-31 15:31:42,588 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:42,588 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:42,588 - DEBUG - keep phismap: {}
2025-01-31 15:31:42,588 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-01-31 15:31:42,588 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:31:42,588 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'res': '$min_val4.1'}), (6, {'lhs': '$a2.0', 'rhs': '$min_val4.1', 'res': '$6compare_op.2'}), (8, {'retval': '$6compare_op.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:42,589 - DEBUG - label 0:
    a = arg(0, name=a)                       ['a']
    min_val = arg(1, name=min_val)           ['min_val']
    $6compare_op.2 = a > min_val             ['$6compare_op.2', 'a', 'min_val']
    $8return_value.3 = cast(value=$6compare_op.2) ['$6compare_op.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

2025-01-31 15:31:42,592 - DEBUG - ==== SSA block analysis pass on 0
2025-01-31 15:31:42,592 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e822b430>
2025-01-31 15:31:42,592 - DEBUG - on stmt: a = arg(0, name=a)
2025-01-31 15:31:42,592 - DEBUG - on stmt: min_val = arg(1, name=min_val)
2025-01-31 15:31:42,592 - DEBUG - on stmt: $6compare_op.2 = a > min_val
2025-01-31 15:31:42,592 - DEBUG - on stmt: $8return_value.3 = cast(value=$6compare_op.2)
2025-01-31 15:31:42,592 - DEBUG - on stmt: return $8return_value.3
2025-01-31 15:31:42,592 - DEBUG - defs defaultdict(<class 'list'>,
            {'$6compare_op.2': [(<numba.core.ir.Assign object at 0x7c89e8234550>,
                                 0)],
             '$8return_value.3': [(<numba.core.ir.Assign object at 0x7c89e82346a0>,
                                   0)],
             'a': [(<numba.core.ir.Assign object at 0x7c89e822b760>, 0)],
             'min_val': [(<numba.core.ir.Assign object at 0x7c89e822b280>, 0)]})
2025-01-31 15:31:42,592 - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x7c89e822b430>
2025-01-31 15:31:42,684 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=437)
           2	LOAD_DEREF(arg=0, lineno=440)
           4	STORE_FAST(arg=1, lineno=440)
           6	LOAD_GLOBAL(arg=0, lineno=441)
           8	LOAD_METHOD(arg=1, lineno=441)
          10	LOAD_FAST(arg=0, lineno=441)
          12	CALL_METHOD(arg=1, lineno=441)
          14	GET_ITER(arg=None, lineno=441)
>         16	FOR_ITER(arg=8, lineno=441)
          18	STORE_FAST(arg=2, lineno=441)
          20	LOAD_FAST(arg=1, lineno=442)
          22	LOAD_FAST(arg=2, lineno=442)
          24	LOAD_METHOD(arg=2, lineno=442)
          26	CALL_METHOD(arg=0, lineno=442)
          28	INPLACE_ADD(arg=None, lineno=442)
          30	STORE_FAST(arg=1, lineno=442)
          32	JUMP_ABSOLUTE(arg=9, lineno=442)
>         34	LOAD_FAST(arg=1, lineno=443)
          36	LOAD_FAST(arg=0, lineno=443)
          38	LOAD_ATTR(arg=3, lineno=443)
          40	BINARY_TRUE_DIVIDE(arg=None, lineno=443)
          42	RETURN_VALUE(arg=None, lineno=443)
2025-01-31 15:31:42,684 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:31:42,684 - DEBUG - stack: []
2025-01-31 15:31:42,684 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:31:42,684 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=437)
2025-01-31 15:31:42,684 - DEBUG - stack []
2025-01-31 15:31:42,684 - DEBUG - dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=440)
2025-01-31 15:31:42,684 - DEBUG - stack []
2025-01-31 15:31:42,684 - DEBUG - dispatch pc=4, inst=STORE_FAST(arg=1, lineno=440)
2025-01-31 15:31:42,684 - DEBUG - stack ['$2load_deref.0']
2025-01-31 15:31:42,684 - DEBUG - dispatch pc=6, inst=LOAD_GLOBAL(arg=0, lineno=441)
2025-01-31 15:31:42,684 - DEBUG - stack []
2025-01-31 15:31:42,684 - DEBUG - dispatch pc=8, inst=LOAD_METHOD(arg=1, lineno=441)
2025-01-31 15:31:42,684 - DEBUG - stack ['$6load_global.1']
2025-01-31 15:31:42,684 - DEBUG - dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=441)
2025-01-31 15:31:42,684 - DEBUG - stack ['$8load_method.2']
2025-01-31 15:31:42,684 - DEBUG - dispatch pc=12, inst=CALL_METHOD(arg=1, lineno=441)
2025-01-31 15:31:42,684 - DEBUG - stack ['$8load_method.2', '$a10.3']
2025-01-31 15:31:42,684 - DEBUG - dispatch pc=14, inst=GET_ITER(arg=None, lineno=441)
2025-01-31 15:31:42,684 - DEBUG - stack ['$12call_method.4']
2025-01-31 15:31:42,684 - DEBUG - end state. edges=[Edge(pc=16, stack=('$14get_iter.5',), blockstack=(), npush=0)]
2025-01-31 15:31:42,684 - DEBUG - pending: deque([State(pc_initial=16 nstack_initial=1)])
2025-01-31 15:31:42,684 - DEBUG - stack: ['$phi16.0']
2025-01-31 15:31:42,685 - DEBUG - state.pc_initial: State(pc_initial=16 nstack_initial=1)
2025-01-31 15:31:42,685 - DEBUG - dispatch pc=16, inst=FOR_ITER(arg=8, lineno=441)
2025-01-31 15:31:42,685 - DEBUG - stack ['$phi16.0']
2025-01-31 15:31:42,685 - DEBUG - end state. edges=[Edge(pc=34, stack=(), blockstack=(), npush=0), Edge(pc=18, stack=('$phi16.0', '$16for_iter.2'), blockstack=(), npush=0)]
2025-01-31 15:31:42,685 - DEBUG - pending: deque([State(pc_initial=34 nstack_initial=0), State(pc_initial=18 nstack_initial=2)])
2025-01-31 15:31:42,685 - DEBUG - stack: []
2025-01-31 15:31:42,685 - DEBUG - state.pc_initial: State(pc_initial=34 nstack_initial=0)
2025-01-31 15:31:42,685 - DEBUG - dispatch pc=34, inst=LOAD_FAST(arg=1, lineno=443)
2025-01-31 15:31:42,685 - DEBUG - stack []
2025-01-31 15:31:42,685 - DEBUG - dispatch pc=36, inst=LOAD_FAST(arg=0, lineno=443)
2025-01-31 15:31:42,685 - DEBUG - stack ['$c34.0']
2025-01-31 15:31:42,685 - DEBUG - dispatch pc=38, inst=LOAD_ATTR(arg=3, lineno=443)
2025-01-31 15:31:42,685 - DEBUG - stack ['$c34.0', '$a36.1']
2025-01-31 15:31:42,685 - DEBUG - dispatch pc=40, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=443)
2025-01-31 15:31:42,685 - DEBUG - stack ['$c34.0', '$38load_attr.2']
2025-01-31 15:31:42,685 - DEBUG - dispatch pc=42, inst=RETURN_VALUE(arg=None, lineno=443)
2025-01-31 15:31:42,685 - DEBUG - stack ['$40binary_true_divide.3']
2025-01-31 15:31:42,685 - DEBUG - end state. edges=[]
2025-01-31 15:31:42,685 - DEBUG - pending: deque([State(pc_initial=18 nstack_initial=2)])
2025-01-31 15:31:42,685 - DEBUG - stack: ['$phi18.0', '$phi18.1']
2025-01-31 15:31:42,685 - DEBUG - state.pc_initial: State(pc_initial=18 nstack_initial=2)
2025-01-31 15:31:42,685 - DEBUG - dispatch pc=18, inst=STORE_FAST(arg=2, lineno=441)
2025-01-31 15:31:42,685 - DEBUG - stack ['$phi18.0', '$phi18.1']
2025-01-31 15:31:42,685 - DEBUG - dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=442)
2025-01-31 15:31:42,685 - DEBUG - stack ['$phi18.0']
2025-01-31 15:31:42,685 - DEBUG - dispatch pc=22, inst=LOAD_FAST(arg=2, lineno=442)
2025-01-31 15:31:42,685 - DEBUG - stack ['$phi18.0', '$c20.2']
2025-01-31 15:31:42,685 - DEBUG - dispatch pc=24, inst=LOAD_METHOD(arg=2, lineno=442)
2025-01-31 15:31:42,686 - DEBUG - stack ['$phi18.0', '$c20.2', '$v22.3']
2025-01-31 15:31:42,686 - DEBUG - dispatch pc=26, inst=CALL_METHOD(arg=0, lineno=442)
2025-01-31 15:31:42,686 - DEBUG - stack ['$phi18.0', '$c20.2', '$24load_method.4']
2025-01-31 15:31:42,686 - DEBUG - dispatch pc=28, inst=INPLACE_ADD(arg=None, lineno=442)
2025-01-31 15:31:42,686 - DEBUG - stack ['$phi18.0', '$c20.2', '$26call_method.5']
2025-01-31 15:31:42,686 - DEBUG - dispatch pc=30, inst=STORE_FAST(arg=1, lineno=442)
2025-01-31 15:31:42,686 - DEBUG - stack ['$phi18.0', '$28inplace_add.6']
2025-01-31 15:31:42,686 - DEBUG - dispatch pc=32, inst=JUMP_ABSOLUTE(arg=9, lineno=442)
2025-01-31 15:31:42,686 - DEBUG - stack ['$phi18.0']
2025-01-31 15:31:42,686 - DEBUG - end state. edges=[Edge(pc=16, stack=('$phi18.0',), blockstack=(), npush=0)]
2025-01-31 15:31:42,686 - DEBUG - pending: deque([State(pc_initial=16 nstack_initial=1)])
2025-01-31 15:31:42,686 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:31:42,686 - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=16 nstack_initial=1): {'$phi16.0'},
             State(pc_initial=18 nstack_initial=2): {'$phi18.1'},
             State(pc_initial=34 nstack_initial=0): set()})
2025-01-31 15:31:42,686 - DEBUG - defmap: {'$phi16.0': State(pc_initial=0 nstack_initial=0),
 '$phi18.1': State(pc_initial=16 nstack_initial=1)}
2025-01-31 15:31:42,686 - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi18.0', State(pc_initial=18 nstack_initial=2))},
             '$phi18.0': {('$phi16.0', State(pc_initial=16 nstack_initial=1))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
2025-01-31 15:31:42,686 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi16.0', State(pc_initial=16 nstack_initial=1))},
             '$phi18.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
2025-01-31 15:31:42,687 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
2025-01-31 15:31:42,687 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.0': {('$14get_iter.5',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi18.1': {('$16for_iter.2',
                           State(pc_initial=16 nstack_initial=1))}})
2025-01-31 15:31:42,687 - DEBUG - keep phismap: {'$phi16.0': {('$14get_iter.5', State(pc_initial=0 nstack_initial=0))},
 '$phi18.1': {('$16for_iter.2', State(pc_initial=16 nstack_initial=1))}}
2025-01-31 15:31:42,687 - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi16.0': '$14get_iter.5'},
             State(pc_initial=16 nstack_initial=1): {'$phi18.1': '$16for_iter.2'}})
2025-01-31 15:31:42,687 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:31:42,687 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'value': '$2load_deref.0'}), (6, {'res': '$6load_global.1'}), (8, {'item': '$6load_global.1', 'res': '$8load_method.2'}), (10, {'res': '$a10.3'}), (12, {'func': '$8load_method.2', 'args': ['$a10.3'], 'res': '$12call_method.4'}), (14, {'value': '$12call_method.4', 'res': '$14get_iter.5'})), outgoing_phis={'$phi16.0': '$14get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={16: ('$14get_iter.5',)})
2025-01-31 15:31:42,687 - DEBUG - block_infos State(pc_initial=16 nstack_initial=1):
AdaptBlockInfo(insts=((16, {'iterator': '$phi16.0', 'pair': '$16for_iter.1', 'indval': '$16for_iter.2', 'pred': '$16for_iter.3'}),), outgoing_phis={'$phi18.1': '$16for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: (), 18: ('$phi16.0', '$16for_iter.2')})
2025-01-31 15:31:42,688 - DEBUG - block_infos State(pc_initial=18 nstack_initial=2):
AdaptBlockInfo(insts=((18, {'value': '$phi18.1'}), (20, {'res': '$c20.2'}), (22, {'res': '$v22.3'}), (24, {'item': '$v22.3', 'res': '$24load_method.4'}), (26, {'func': '$24load_method.4', 'args': [], 'res': '$26call_method.5'}), (28, {'lhs': '$c20.2', 'rhs': '$26call_method.5', 'res': '$28inplace_add.6'}), (30, {'value': '$28inplace_add.6'}), (32, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={16: ('$phi18.0',)})
2025-01-31 15:31:42,688 - DEBUG - block_infos State(pc_initial=34 nstack_initial=0):
AdaptBlockInfo(insts=((34, {'res': '$c34.0'}), (36, {'res': '$a36.1'}), (38, {'item': '$a36.1', 'res': '$38load_attr.2'}), (40, {'lhs': '$c34.0', 'rhs': '$38load_attr.2', 'res': '$40binary_true_divide.3'}), (42, {'retval': '$40binary_true_divide.3', 'castval': '$42return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:42,688 - DEBUG - label 0:
    a = arg(0, name=a)                       ['a']
    c = freevar(acc_init: 0.0)               ['c']
    $6load_global.1 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>) ['$6load_global.1']
    $8load_method.2 = getattr(value=$6load_global.1, attr=nditer) ['$6load_global.1', '$8load_method.2']
    $12call_method.4 = call $8load_method.2(a, func=$8load_method.2, args=[Var(a, arraymath.py:437)], kws=(), vararg=None, varkwarg=None, target=None) ['$12call_method.4', '$8load_method.2', 'a']
    $14get_iter.5 = getiter(value=$12call_method.4) ['$12call_method.4', '$14get_iter.5']
    $phi16.0 = $14get_iter.5                 ['$14get_iter.5', '$phi16.0']
    jump 16                                  []
label 16:
    $16for_iter.1 = iternext(value=$phi16.0) ['$16for_iter.1', '$phi16.0']
    $16for_iter.2 = pair_first(value=$16for_iter.1) ['$16for_iter.1', '$16for_iter.2']
    $16for_iter.3 = pair_second(value=$16for_iter.1) ['$16for_iter.1', '$16for_iter.3']
    $phi18.1 = $16for_iter.2                 ['$16for_iter.2', '$phi18.1']
    branch $16for_iter.3, 18, 34             ['$16for_iter.3']
label 18:
    v = $phi18.1                             ['$phi18.1', 'v']
    $24load_method.4 = getattr(value=v, attr=item) ['$24load_method.4', 'v']
    $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None, varkwarg=None, target=None) ['$24load_method.4', '$26call_method.5']
    $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined) ['$26call_method.5', '$28inplace_add.6', 'c']
    c = $28inplace_add.6                     ['$28inplace_add.6', 'c']
    jump 16                                  []
label 34:
    $38load_attr.2 = getattr(value=a, attr=size) ['$38load_attr.2', 'a']
    $40binary_true_divide.3 = c / $38load_attr.2 ['$38load_attr.2', '$40binary_true_divide.3', 'c']
    $42return_value.4 = cast(value=$40binary_true_divide.3) ['$40binary_true_divide.3', '$42return_value.4']
    return $42return_value.4                 ['$42return_value.4']

2025-01-31 15:31:42,693 - DEBUG - ==== SSA block analysis pass on 0
2025-01-31 15:31:42,693 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e82f1f90>
2025-01-31 15:31:42,693 - DEBUG - on stmt: a = arg(0, name=a)
2025-01-31 15:31:42,693 - DEBUG - on stmt: c = freevar(acc_init: 0.0)
2025-01-31 15:31:42,693 - DEBUG - on stmt: $6load_global.1 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:42,693 - DEBUG - on stmt: $8load_method.2 = getattr(value=$6load_global.1, attr=nditer)
2025-01-31 15:31:42,693 - DEBUG - on stmt: $12call_method.4 = call $8load_method.2(a, func=$8load_method.2, args=[Var(a, arraymath.py:437)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,693 - DEBUG - on stmt: $14get_iter.5 = getiter(value=$12call_method.4)
2025-01-31 15:31:42,693 - DEBUG - on stmt: $phi16.0 = $14get_iter.5
2025-01-31 15:31:42,693 - DEBUG - on stmt: jump 16
2025-01-31 15:31:42,693 - DEBUG - ==== SSA block analysis pass on 16
2025-01-31 15:31:42,693 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e82f1f90>
2025-01-31 15:31:42,693 - DEBUG - on stmt: $16for_iter.1 = iternext(value=$phi16.0)
2025-01-31 15:31:42,693 - DEBUG - on stmt: $16for_iter.2 = pair_first(value=$16for_iter.1)
2025-01-31 15:31:42,693 - DEBUG - on stmt: $16for_iter.3 = pair_second(value=$16for_iter.1)
2025-01-31 15:31:42,694 - DEBUG - on stmt: $phi18.1 = $16for_iter.2
2025-01-31 15:31:42,694 - DEBUG - on stmt: branch $16for_iter.3, 18, 34
2025-01-31 15:31:42,694 - DEBUG - ==== SSA block analysis pass on 18
2025-01-31 15:31:42,694 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e82f1f90>
2025-01-31 15:31:42,694 - DEBUG - on stmt: v = $phi18.1
2025-01-31 15:31:42,694 - DEBUG - on stmt: $24load_method.4 = getattr(value=v, attr=item)
2025-01-31 15:31:42,694 - DEBUG - on stmt: $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,694 - DEBUG - on stmt: $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:42,694 - DEBUG - on stmt: c = $28inplace_add.6
2025-01-31 15:31:42,694 - DEBUG - on stmt: jump 16
2025-01-31 15:31:42,694 - DEBUG - ==== SSA block analysis pass on 34
2025-01-31 15:31:42,694 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e82f1f90>
2025-01-31 15:31:42,694 - DEBUG - on stmt: $38load_attr.2 = getattr(value=a, attr=size)
2025-01-31 15:31:42,694 - DEBUG - on stmt: $40binary_true_divide.3 = c / $38load_attr.2
2025-01-31 15:31:42,694 - DEBUG - on stmt: $42return_value.4 = cast(value=$40binary_true_divide.3)
2025-01-31 15:31:42,694 - DEBUG - on stmt: return $42return_value.4
2025-01-31 15:31:42,694 - DEBUG - defs defaultdict(<class 'list'>,
            {'$12call_method.4': [(<numba.core.ir.Assign object at 0x7c89e825a3b0>,
                                   0)],
             '$14get_iter.5': [(<numba.core.ir.Assign object at 0x7c89e825b010>,
                                0)],
             '$16for_iter.1': [(<numba.core.ir.Assign object at 0x7c89e82f0430>,
                                16)],
             '$16for_iter.2': [(<numba.core.ir.Assign object at 0x7c89e82f0a60>,
                                16)],
             '$16for_iter.3': [(<numba.core.ir.Assign object at 0x7c89e82f0b50>,
                                16)],
             '$24load_method.4': [(<numba.core.ir.Assign object at 0x7c89e82f11e0>,
                                   18)],
             '$26call_method.5': [(<numba.core.ir.Assign object at 0x7c89e82f13f0>,
                                   18)],
             '$28inplace_add.6': [(<numba.core.ir.Assign object at 0x7c89e82f1510>,
                                   18)],
             '$38load_attr.2': [(<numba.core.ir.Assign object at 0x7c89e82f1a20>,
                                 34)],
             '$40binary_true_divide.3': [(<numba.core.ir.Assign object at 0x7c89e82f1bd0>,
                                          34)],
             '$42return_value.4': [(<numba.core.ir.Assign object at 0x7c89e82f1d20>,
                                    34)],
             '$6load_global.1': [(<numba.core.ir.Assign object at 0x7c89e8928a90>,
                                  0)],
             '$8load_method.2': [(<numba.core.ir.Assign object at 0x7c89e8928040>,
                                  0)],
             '$phi16.0': [(<numba.core.ir.Assign object at 0x7c89e89294e0>, 0)],
             '$phi18.1': [(<numba.core.ir.Assign object at 0x7c89e8223310>,
                           16)],
             'a': [(<numba.core.ir.Assign object at 0x7c89e8928640>, 0)],
             'c': [(<numba.core.ir.Assign object at 0x7c89e89286d0>, 0),
                   (<numba.core.ir.Assign object at 0x7c89e82f15d0>, 18)],
             'v': [(<numba.core.ir.Assign object at 0x7c89e82f0e20>, 18)]})
2025-01-31 15:31:42,695 - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x7c89e82f1f90>
2025-01-31 15:31:42,695 - DEBUG - Fix SSA violator on var c
2025-01-31 15:31:42,695 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-31 15:31:42,695 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e82f2110>
2025-01-31 15:31:42,695 - DEBUG - on stmt: a = arg(0, name=a)
2025-01-31 15:31:42,695 - DEBUG - on stmt: c = freevar(acc_init: 0.0)
2025-01-31 15:31:42,695 - DEBUG - first assign: c
2025-01-31 15:31:42,695 - DEBUG - replaced with: c = freevar(acc_init: 0.0)
2025-01-31 15:31:42,695 - DEBUG - on stmt: $6load_global.1 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:42,695 - DEBUG - on stmt: $8load_method.2 = getattr(value=$6load_global.1, attr=nditer)
2025-01-31 15:31:42,695 - DEBUG - on stmt: $12call_method.4 = call $8load_method.2(a, func=$8load_method.2, args=[Var(a, arraymath.py:437)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,695 - DEBUG - on stmt: $14get_iter.5 = getiter(value=$12call_method.4)
2025-01-31 15:31:42,695 - DEBUG - on stmt: $phi16.0 = $14get_iter.5
2025-01-31 15:31:42,695 - DEBUG - on stmt: jump 16
2025-01-31 15:31:42,695 - DEBUG - ==== SSA block rewrite pass on 16
2025-01-31 15:31:42,695 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e82f2110>
2025-01-31 15:31:42,695 - DEBUG - on stmt: $16for_iter.1 = iternext(value=$phi16.0)
2025-01-31 15:31:42,695 - DEBUG - on stmt: $16for_iter.2 = pair_first(value=$16for_iter.1)
2025-01-31 15:31:42,695 - DEBUG - on stmt: $16for_iter.3 = pair_second(value=$16for_iter.1)
2025-01-31 15:31:42,695 - DEBUG - on stmt: $phi18.1 = $16for_iter.2
2025-01-31 15:31:42,695 - DEBUG - on stmt: branch $16for_iter.3, 18, 34
2025-01-31 15:31:42,695 - DEBUG - ==== SSA block rewrite pass on 18
2025-01-31 15:31:42,695 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e82f2110>
2025-01-31 15:31:42,695 - DEBUG - on stmt: v = $phi18.1
2025-01-31 15:31:42,695 - DEBUG - on stmt: $24load_method.4 = getattr(value=v, attr=item)
2025-01-31 15:31:42,695 - DEBUG - on stmt: $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,695 - DEBUG - on stmt: $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:42,695 - DEBUG - on stmt: c = $28inplace_add.6
2025-01-31 15:31:42,696 - DEBUG - replaced with: c.1 = $28inplace_add.6
2025-01-31 15:31:42,696 - DEBUG - on stmt: jump 16
2025-01-31 15:31:42,696 - DEBUG - ==== SSA block rewrite pass on 34
2025-01-31 15:31:42,696 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e82f2110>
2025-01-31 15:31:42,696 - DEBUG - on stmt: $38load_attr.2 = getattr(value=a, attr=size)
2025-01-31 15:31:42,696 - DEBUG - on stmt: $40binary_true_divide.3 = c / $38load_attr.2
2025-01-31 15:31:42,696 - DEBUG - on stmt: $42return_value.4 = cast(value=$40binary_true_divide.3)
2025-01-31 15:31:42,696 - DEBUG - on stmt: return $42return_value.4
2025-01-31 15:31:42,696 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7c89e82f10f0>],
             18: [<numba.core.ir.Assign object at 0x7c89e82f2470>]})
2025-01-31 15:31:42,696 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-31 15:31:42,696 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e82f2110>
2025-01-31 15:31:42,696 - DEBUG - on stmt: a = arg(0, name=a)
2025-01-31 15:31:42,696 - DEBUG - on stmt: c = freevar(acc_init: 0.0)
2025-01-31 15:31:42,696 - DEBUG - on stmt: $6load_global.1 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:42,696 - DEBUG - on stmt: $8load_method.2 = getattr(value=$6load_global.1, attr=nditer)
2025-01-31 15:31:42,696 - DEBUG - on stmt: $12call_method.4 = call $8load_method.2(a, func=$8load_method.2, args=[Var(a, arraymath.py:437)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,696 - DEBUG - on stmt: $14get_iter.5 = getiter(value=$12call_method.4)
2025-01-31 15:31:42,696 - DEBUG - on stmt: $phi16.0 = $14get_iter.5
2025-01-31 15:31:42,696 - DEBUG - on stmt: jump 16
2025-01-31 15:31:42,696 - DEBUG - ==== SSA block rewrite pass on 16
2025-01-31 15:31:42,696 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e82f2110>
2025-01-31 15:31:42,696 - DEBUG - on stmt: $16for_iter.1 = iternext(value=$phi16.0)
2025-01-31 15:31:42,696 - DEBUG - on stmt: $16for_iter.2 = pair_first(value=$16for_iter.1)
2025-01-31 15:31:42,696 - DEBUG - on stmt: $16for_iter.3 = pair_second(value=$16for_iter.1)
2025-01-31 15:31:42,696 - DEBUG - on stmt: $phi18.1 = $16for_iter.2
2025-01-31 15:31:42,696 - DEBUG - on stmt: branch $16for_iter.3, 18, 34
2025-01-31 15:31:42,696 - DEBUG - ==== SSA block rewrite pass on 18
2025-01-31 15:31:42,696 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e82f2110>
2025-01-31 15:31:42,697 - DEBUG - on stmt: v = $phi18.1
2025-01-31 15:31:42,697 - DEBUG - on stmt: $24load_method.4 = getattr(value=v, attr=item)
2025-01-31 15:31:42,697 - DEBUG - on stmt: $26call_method.5 = call $24load_method.4(func=$24load_method.4, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:42,697 - DEBUG - on stmt: $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:42,697 - DEBUG - find_def var='c' stmt=$28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:42,697 - DEBUG - find_def_from_top label 18
2025-01-31 15:31:42,697 - DEBUG - idom 16 from label 18
2025-01-31 15:31:42,697 - DEBUG - find_def_from_bottom label 16
2025-01-31 15:31:42,697 - DEBUG - find_def_from_top label 16
2025-01-31 15:31:42,697 - DEBUG - insert phi node c.2 = phi(incoming_values=[], incoming_blocks=[]) at 16
2025-01-31 15:31:42,697 - DEBUG - find_def_from_bottom label 0
2025-01-31 15:31:42,697 - DEBUG - incoming_def c = freevar(acc_init: 0.0)
2025-01-31 15:31:42,697 - DEBUG - find_def_from_bottom label 18
2025-01-31 15:31:42,697 - DEBUG - incoming_def c.1 = $28inplace_add.6
2025-01-31 15:31:42,697 - DEBUG - replaced with: $28inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c.2, rhs=$26call_method.5, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:42,697 - DEBUG - on stmt: c.1 = $28inplace_add.6
2025-01-31 15:31:42,697 - DEBUG - on stmt: jump 16
2025-01-31 15:31:42,697 - DEBUG - ==== SSA block rewrite pass on 34
2025-01-31 15:31:42,697 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e82f2110>
2025-01-31 15:31:42,697 - DEBUG - on stmt: $38load_attr.2 = getattr(value=a, attr=size)
2025-01-31 15:31:42,697 - DEBUG - on stmt: $40binary_true_divide.3 = c / $38load_attr.2
2025-01-31 15:31:42,697 - DEBUG - find_def var='c' stmt=$40binary_true_divide.3 = c / $38load_attr.2
2025-01-31 15:31:42,697 - DEBUG - find_def_from_top label 34
2025-01-31 15:31:42,697 - DEBUG - idom 16 from label 34
2025-01-31 15:31:42,697 - DEBUG - find_def_from_bottom label 16
2025-01-31 15:31:42,697 - DEBUG - replaced with: $40binary_true_divide.3 = c.2 / $38load_attr.2
2025-01-31 15:31:42,698 - DEBUG - on stmt: $42return_value.4 = cast(value=$40binary_true_divide.3)
2025-01-31 15:31:42,698 - DEBUG - on stmt: return $42return_value.4
2025-01-31 15:31:43,371 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=2452)
           2	LOAD_FAST(arg=0, lineno=2457)
           4	LOAD_ATTR(arg=0, lineno=2457)
           6	LOAD_CONST(arg=1, lineno=2457)
           8	BINARY_POWER(arg=None, lineno=2457)
          10	LOAD_FAST(arg=0, lineno=2457)
          12	LOAD_ATTR(arg=1, lineno=2457)
          14	LOAD_CONST(arg=1, lineno=2457)
          16	BINARY_POWER(arg=None, lineno=2457)
          18	BINARY_ADD(arg=None, lineno=2457)
          20	RETURN_VALUE(arg=None, lineno=2457)
2025-01-31 15:31:43,371 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:31:43,371 - DEBUG - stack: []
2025-01-31 15:31:43,371 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:31:43,371 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=2452)
2025-01-31 15:31:43,371 - DEBUG - stack []
2025-01-31 15:31:43,371 - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=2457)
2025-01-31 15:31:43,371 - DEBUG - stack []
2025-01-31 15:31:43,371 - DEBUG - dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=2457)
2025-01-31 15:31:43,371 - DEBUG - stack ['$x2.0']
2025-01-31 15:31:43,371 - DEBUG - dispatch pc=6, inst=LOAD_CONST(arg=1, lineno=2457)
2025-01-31 15:31:43,371 - DEBUG - stack ['$4load_attr.1']
2025-01-31 15:31:43,371 - DEBUG - dispatch pc=8, inst=BINARY_POWER(arg=None, lineno=2457)
2025-01-31 15:31:43,372 - DEBUG - stack ['$4load_attr.1', '$const6.2']
2025-01-31 15:31:43,372 - DEBUG - dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=2457)
2025-01-31 15:31:43,372 - DEBUG - stack ['$8binary_power.3']
2025-01-31 15:31:43,372 - DEBUG - dispatch pc=12, inst=LOAD_ATTR(arg=1, lineno=2457)
2025-01-31 15:31:43,372 - DEBUG - stack ['$8binary_power.3', '$x10.4']
2025-01-31 15:31:43,372 - DEBUG - dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=2457)
2025-01-31 15:31:43,372 - DEBUG - stack ['$8binary_power.3', '$12load_attr.5']
2025-01-31 15:31:43,372 - DEBUG - dispatch pc=16, inst=BINARY_POWER(arg=None, lineno=2457)
2025-01-31 15:31:43,372 - DEBUG - stack ['$8binary_power.3', '$12load_attr.5', '$const14.6']
2025-01-31 15:31:43,372 - DEBUG - dispatch pc=18, inst=BINARY_ADD(arg=None, lineno=2457)
2025-01-31 15:31:43,372 - DEBUG - stack ['$8binary_power.3', '$16binary_power.7']
2025-01-31 15:31:43,372 - DEBUG - dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=2457)
2025-01-31 15:31:43,372 - DEBUG - stack ['$18binary_add.8']
2025-01-31 15:31:43,372 - DEBUG - end state. edges=[]
2025-01-31 15:31:43,372 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:31:43,372 - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-01-31 15:31:43,372 - DEBUG - defmap: {}
2025-01-31 15:31:43,372 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:43,372 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:43,372 - DEBUG - keep phismap: {}
2025-01-31 15:31:43,372 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-01-31 15:31:43,372 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:31:43,372 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'item': '$x2.0', 'res': '$4load_attr.1'}), (6, {'res': '$const6.2'}), (8, {'lhs': '$4load_attr.1', 'rhs': '$const6.2', 'res': '$8binary_power.3'}), (10, {'res': '$x10.4'}), (12, {'item': '$x10.4', 'res': '$12load_attr.5'}), (14, {'res': '$const14.6'}), (16, {'lhs': '$12load_attr.5', 'rhs': '$const14.6', 'res': '$16binary_power.7'}), (18, {'lhs': '$8binary_power.3', 'rhs': '$16binary_power.7', 'res': '$18binary_add.8'}), (20, {'retval': '$18binary_add.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:43,373 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    $4load_attr.1 = getattr(value=x, attr=real) ['$4load_attr.1', 'x']
    $const6.2 = const(int, 2)                ['$const6.2']
    $8binary_power.3 = $4load_attr.1 ** $const6.2 ['$4load_attr.1', '$8binary_power.3', '$const6.2']
    $12load_attr.5 = getattr(value=x, attr=imag) ['$12load_attr.5', 'x']
    $const14.6 = const(int, 2)               ['$const14.6']
    $16binary_power.7 = $12load_attr.5 ** $const14.6 ['$12load_attr.5', '$16binary_power.7', '$const14.6']
    $18binary_add.8 = $8binary_power.3 + $16binary_power.7 ['$16binary_power.7', '$18binary_add.8', '$8binary_power.3']
    $20return_value.9 = cast(value=$18binary_add.8) ['$18binary_add.8', '$20return_value.9']
    return $20return_value.9                 ['$20return_value.9']

2025-01-31 15:31:43,376 - DEBUG - ==== SSA block analysis pass on 0
2025-01-31 15:31:43,376 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e871df60>
2025-01-31 15:31:43,376 - DEBUG - on stmt: x = arg(0, name=x)
2025-01-31 15:31:43,376 - DEBUG - on stmt: $4load_attr.1 = getattr(value=x, attr=real)
2025-01-31 15:31:43,376 - DEBUG - on stmt: $const6.2 = const(int, 2)
2025-01-31 15:31:43,376 - DEBUG - on stmt: $8binary_power.3 = $4load_attr.1 ** $const6.2
2025-01-31 15:31:43,376 - DEBUG - on stmt: $12load_attr.5 = getattr(value=x, attr=imag)
2025-01-31 15:31:43,376 - DEBUG - on stmt: $const14.6 = const(int, 2)
2025-01-31 15:31:43,376 - DEBUG - on stmt: $16binary_power.7 = $12load_attr.5 ** $const14.6
2025-01-31 15:31:43,376 - DEBUG - on stmt: $18binary_add.8 = $8binary_power.3 + $16binary_power.7
2025-01-31 15:31:43,376 - DEBUG - on stmt: $20return_value.9 = cast(value=$18binary_add.8)
2025-01-31 15:31:43,376 - DEBUG - on stmt: return $20return_value.9
2025-01-31 15:31:43,377 - DEBUG - defs defaultdict(<class 'list'>,
            {'$12load_attr.5': [(<numba.core.ir.Assign object at 0x7c89e871d600>,
                                 0)],
             '$16binary_power.7': [(<numba.core.ir.Assign object at 0x7c89e871d9c0>,
                                    0)],
             '$18binary_add.8': [(<numba.core.ir.Assign object at 0x7c89e871e110>,
                                  0)],
             '$20return_value.9': [(<numba.core.ir.Assign object at 0x7c89e871f760>,
                                    0)],
             '$4load_attr.1': [(<numba.core.ir.Assign object at 0x7c89e871d270>,
                                0)],
             '$8binary_power.3': [(<numba.core.ir.Assign object at 0x7c89e871c9a0>,
                                   0)],
             '$const14.6': [(<numba.core.ir.Assign object at 0x7c89e871d5d0>,
                             0)],
             '$const6.2': [(<numba.core.ir.Assign object at 0x7c89e871d0c0>,
                            0)],
             'x': [(<numba.core.ir.Assign object at 0x7c89e871e530>, 0)]})
2025-01-31 15:31:43,377 - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x7c89e871df60>
2025-01-31 15:31:43,384 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=214)
           2	LOAD_DEREF(arg=1, lineno=216)
           4	LOAD_CONST(arg=1, lineno=216)
           6	CALL_FUNCTION(arg=1, lineno=216)
           8	STORE_FAST(arg=2, lineno=216)
          10	LOAD_DEREF(arg=1, lineno=217)
          12	LOAD_FAST(arg=0, lineno=217)
          14	CALL_FUNCTION(arg=1, lineno=217)
          16	STORE_FAST(arg=0, lineno=217)
          18	LOAD_FAST(arg=1, lineno=218)
          20	LOAD_CONST(arg=2, lineno=218)
          22	COMPARE_OP(arg=0, lineno=218)
          24	POP_JUMP_IF_FALSE(arg=50, lineno=218)
          26	LOAD_CONST(arg=3, lineno=219)
          28	STORE_FAST(arg=3, lineno=219)
          30	LOAD_FAST(arg=1, lineno=220)
          32	UNARY_NEGATIVE(arg=None, lineno=220)
          34	STORE_FAST(arg=4, lineno=220)
          36	LOAD_FAST(arg=4, lineno=221)
          38	LOAD_CONST(arg=2, lineno=221)
          40	COMPARE_OP(arg=0, lineno=221)
          42	POP_JUMP_IF_FALSE(arg=25, lineno=221)
          44	LOAD_GLOBAL(arg=0, lineno=222)
          46	RAISE_VARARGS(arg=1, lineno=222)
>         48	LOAD_DEREF(arg=0, lineno=223)
          50	POP_JUMP_IF_FALSE(arg=49, lineno=223)
          52	LOAD_FAST(arg=0, lineno=224)
          54	LOAD_CONST(arg=2, lineno=224)
          56	COMPARE_OP(arg=2, lineno=224)
          58	POP_JUMP_IF_FALSE(arg=39, lineno=224)
          60	LOAD_DEREF(arg=2, lineno=225)
          62	POP_JUMP_IF_FALSE(arg=35, lineno=225)
          64	LOAD_DEREF(arg=2, lineno=226)
          66	RETURN_VALUE(arg=None, lineno=226)
>         68	LOAD_GLOBAL(arg=1, lineno=228)
          70	LOAD_CONST(arg=4, lineno=228)
          72	CALL_FUNCTION(arg=1, lineno=228)
          74	RAISE_VARARGS(arg=1, lineno=228)
>         76	LOAD_FAST(arg=0, lineno=229)
          78	LOAD_CONST(arg=1, lineno=229)
          80	COMPARE_OP(arg=3, lineno=229)
          82	POP_JUMP_IF_FALSE(arg=49, lineno=229)
          84	LOAD_FAST(arg=0, lineno=229)
          86	LOAD_CONST(arg=5, lineno=229)
          88	COMPARE_OP(arg=3, lineno=229)
          90	POP_JUMP_IF_FALSE(arg=49, lineno=229)
          92	LOAD_CONST(arg=2, lineno=230)
          94	RETURN_VALUE(arg=None, lineno=230)
>         96	JUMP_FORWARD(arg=4, lineno=230)
>         98	LOAD_CONST(arg=6, lineno=232)
         100	STORE_FAST(arg=3, lineno=232)
         102	LOAD_FAST(arg=1, lineno=233)
         104	STORE_FAST(arg=4, lineno=233)
>        106	LOAD_FAST(arg=4, lineno=234)
         108	LOAD_CONST(arg=7, lineno=234)
         110	COMPARE_OP(arg=4, lineno=234)
         112	POP_JUMP_IF_FALSE(arg=66, lineno=234)
         114	LOAD_GLOBAL(arg=2, lineno=236)
         116	LOAD_METHOD(arg=3, lineno=236)
         118	LOAD_FAST(arg=0, lineno=236)
         120	LOAD_GLOBAL(arg=4, lineno=236)
         122	LOAD_FAST(arg=1, lineno=236)
         124	CALL_FUNCTION(arg=1, lineno=236)
         126	CALL_METHOD(arg=2, lineno=236)
         128	RETURN_VALUE(arg=None, lineno=236)
>        130	LOAD_FAST(arg=4, lineno=237)
         132	LOAD_CONST(arg=2, lineno=237)
         134	COMPARE_OP(arg=3, lineno=237)
         136	POP_JUMP_IF_FALSE(arg=90, lineno=237)
>        138	LOAD_FAST(arg=4, lineno=238)
         140	LOAD_CONST(arg=1, lineno=238)
         142	BINARY_AND(arg=None, lineno=238)
         144	POP_JUMP_IF_FALSE(arg=78, lineno=238)
         146	LOAD_FAST(arg=2, lineno=239)
         148	LOAD_FAST(arg=0, lineno=239)
         150	INPLACE_MULTIPLY(arg=None, lineno=239)
         152	STORE_FAST(arg=2, lineno=239)
>        154	LOAD_FAST(arg=4, lineno=240)
         156	LOAD_CONST(arg=1, lineno=240)
         158	INPLACE_RSHIFT(arg=None, lineno=240)
         160	STORE_FAST(arg=4, lineno=240)
         162	LOAD_FAST(arg=0, lineno=241)
         164	LOAD_FAST(arg=0, lineno=241)
         166	INPLACE_MULTIPLY(arg=None, lineno=241)
         168	STORE_FAST(arg=0, lineno=241)
         170	LOAD_FAST(arg=4, lineno=237)
         172	LOAD_CONST(arg=2, lineno=237)
         174	COMPARE_OP(arg=3, lineno=237)
         176	POP_JUMP_IF_TRUE(arg=70, lineno=237)
>        178	LOAD_FAST(arg=3, lineno=243)
         180	POP_JUMP_IF_FALSE(arg=96, lineno=243)
         182	LOAD_CONST(arg=8, lineno=243)
         184	LOAD_FAST(arg=2, lineno=243)
         186	BINARY_TRUE_DIVIDE(arg=None, lineno=243)
         188	RETURN_VALUE(arg=None, lineno=243)
>        190	LOAD_FAST(arg=2, lineno=243)
         192	RETURN_VALUE(arg=None, lineno=243)
2025-01-31 15:31:43,384 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:31:43,384 - DEBUG - stack: []
2025-01-31 15:31:43,384 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:31:43,384 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=214)
2025-01-31 15:31:43,384 - DEBUG - stack []
2025-01-31 15:31:43,384 - DEBUG - dispatch pc=2, inst=LOAD_DEREF(arg=1, lineno=216)
2025-01-31 15:31:43,384 - DEBUG - stack []
2025-01-31 15:31:43,384 - DEBUG - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=216)
2025-01-31 15:31:43,384 - DEBUG - stack ['$2load_deref.0']
2025-01-31 15:31:43,384 - DEBUG - dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=216)
2025-01-31 15:31:43,384 - DEBUG - stack ['$2load_deref.0', '$const4.1']
2025-01-31 15:31:43,384 - DEBUG - dispatch pc=8, inst=STORE_FAST(arg=2, lineno=216)
2025-01-31 15:31:43,385 - DEBUG - stack ['$6call_function.2']
2025-01-31 15:31:43,385 - DEBUG - dispatch pc=10, inst=LOAD_DEREF(arg=1, lineno=217)
2025-01-31 15:31:43,385 - DEBUG - stack []
2025-01-31 15:31:43,385 - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=217)
2025-01-31 15:31:43,385 - DEBUG - stack ['$10load_deref.3']
2025-01-31 15:31:43,385 - DEBUG - dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=217)
2025-01-31 15:31:43,385 - DEBUG - stack ['$10load_deref.3', '$a12.4']
2025-01-31 15:31:43,385 - DEBUG - dispatch pc=16, inst=STORE_FAST(arg=0, lineno=217)
2025-01-31 15:31:43,385 - DEBUG - stack ['$14call_function.5']
2025-01-31 15:31:43,385 - DEBUG - dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=218)
2025-01-31 15:31:43,385 - DEBUG - stack []
2025-01-31 15:31:43,385 - DEBUG - dispatch pc=20, inst=LOAD_CONST(arg=2, lineno=218)
2025-01-31 15:31:43,385 - DEBUG - stack ['$b18.6']
2025-01-31 15:31:43,385 - DEBUG - dispatch pc=22, inst=COMPARE_OP(arg=0, lineno=218)
2025-01-31 15:31:43,385 - DEBUG - stack ['$b18.6', '$const20.7']
2025-01-31 15:31:43,385 - DEBUG - dispatch pc=24, inst=POP_JUMP_IF_FALSE(arg=50, lineno=218)
2025-01-31 15:31:43,385 - DEBUG - stack ['$22compare_op.8']
2025-01-31 15:31:43,385 - DEBUG - end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0), Edge(pc=98, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:43,385 - DEBUG - pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=98 nstack_initial=0)])
2025-01-31 15:31:43,385 - DEBUG - stack: []
2025-01-31 15:31:43,385 - DEBUG - state.pc_initial: State(pc_initial=26 nstack_initial=0)
2025-01-31 15:31:43,385 - DEBUG - dispatch pc=26, inst=LOAD_CONST(arg=3, lineno=219)
2025-01-31 15:31:43,385 - DEBUG - stack []
2025-01-31 15:31:43,385 - DEBUG - dispatch pc=28, inst=STORE_FAST(arg=3, lineno=219)
2025-01-31 15:31:43,385 - DEBUG - stack ['$const26.0']
2025-01-31 15:31:43,385 - DEBUG - dispatch pc=30, inst=LOAD_FAST(arg=1, lineno=220)
2025-01-31 15:31:43,385 - DEBUG - stack []
2025-01-31 15:31:43,385 - DEBUG - dispatch pc=32, inst=UNARY_NEGATIVE(arg=None, lineno=220)
2025-01-31 15:31:43,385 - DEBUG - stack ['$b30.1']
2025-01-31 15:31:43,386 - DEBUG - dispatch pc=34, inst=STORE_FAST(arg=4, lineno=220)
2025-01-31 15:31:43,386 - DEBUG - stack ['$32unary_negative.2']
2025-01-31 15:31:43,386 - DEBUG - dispatch pc=36, inst=LOAD_FAST(arg=4, lineno=221)
2025-01-31 15:31:43,386 - DEBUG - stack []
2025-01-31 15:31:43,386 - DEBUG - dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=221)
2025-01-31 15:31:43,386 - DEBUG - stack ['$exp36.3']
2025-01-31 15:31:43,386 - DEBUG - dispatch pc=40, inst=COMPARE_OP(arg=0, lineno=221)
2025-01-31 15:31:43,386 - DEBUG - stack ['$exp36.3', '$const38.4']
2025-01-31 15:31:43,386 - DEBUG - dispatch pc=42, inst=POP_JUMP_IF_FALSE(arg=25, lineno=221)
2025-01-31 15:31:43,386 - DEBUG - stack ['$40compare_op.5']
2025-01-31 15:31:43,386 - DEBUG - end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0), Edge(pc=48, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:43,386 - DEBUG - pending: deque([State(pc_initial=98 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=48 nstack_initial=0)])
2025-01-31 15:31:43,386 - DEBUG - stack: []
2025-01-31 15:31:43,386 - DEBUG - state.pc_initial: State(pc_initial=98 nstack_initial=0)
2025-01-31 15:31:43,386 - DEBUG - dispatch pc=98, inst=LOAD_CONST(arg=6, lineno=232)
2025-01-31 15:31:43,386 - DEBUG - stack []
2025-01-31 15:31:43,386 - DEBUG - dispatch pc=100, inst=STORE_FAST(arg=3, lineno=232)
2025-01-31 15:31:43,386 - DEBUG - stack ['$const98.0']
2025-01-31 15:31:43,386 - DEBUG - dispatch pc=102, inst=LOAD_FAST(arg=1, lineno=233)
2025-01-31 15:31:43,386 - DEBUG - stack []
2025-01-31 15:31:43,386 - DEBUG - dispatch pc=104, inst=STORE_FAST(arg=4, lineno=233)
2025-01-31 15:31:43,386 - DEBUG - stack ['$b102.1']
2025-01-31 15:31:43,386 - DEBUG - end state. edges=[Edge(pc=106, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:43,386 - DEBUG - pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=48 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
2025-01-31 15:31:43,386 - DEBUG - stack: []
2025-01-31 15:31:43,386 - DEBUG - state.pc_initial: State(pc_initial=44 nstack_initial=0)
2025-01-31 15:31:43,386 - DEBUG - dispatch pc=44, inst=LOAD_GLOBAL(arg=0, lineno=222)
2025-01-31 15:31:43,386 - DEBUG - stack []
2025-01-31 15:31:43,386 - DEBUG - dispatch pc=46, inst=RAISE_VARARGS(arg=1, lineno=222)
2025-01-31 15:31:43,386 - DEBUG - stack ['$44load_global.0']
2025-01-31 15:31:43,387 - DEBUG - end state. edges=[]
2025-01-31 15:31:43,387 - DEBUG - pending: deque([State(pc_initial=48 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
2025-01-31 15:31:43,387 - DEBUG - stack: []
2025-01-31 15:31:43,387 - DEBUG - state.pc_initial: State(pc_initial=48 nstack_initial=0)
2025-01-31 15:31:43,387 - DEBUG - dispatch pc=48, inst=LOAD_DEREF(arg=0, lineno=223)
2025-01-31 15:31:43,387 - DEBUG - stack []
2025-01-31 15:31:43,387 - DEBUG - dispatch pc=50, inst=POP_JUMP_IF_FALSE(arg=49, lineno=223)
2025-01-31 15:31:43,387 - DEBUG - stack ['$48load_deref.0']
2025-01-31 15:31:43,387 - DEBUG - end state. edges=[Edge(pc=52, stack=(), blockstack=(), npush=0), Edge(pc=96, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:43,387 - DEBUG - pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=52 nstack_initial=0), State(pc_initial=96 nstack_initial=0)])
2025-01-31 15:31:43,387 - DEBUG - stack: []
2025-01-31 15:31:43,387 - DEBUG - state.pc_initial: State(pc_initial=106 nstack_initial=0)
2025-01-31 15:31:43,387 - DEBUG - dispatch pc=106, inst=LOAD_FAST(arg=4, lineno=234)
2025-01-31 15:31:43,387 - DEBUG - stack []
2025-01-31 15:31:43,387 - DEBUG - dispatch pc=108, inst=LOAD_CONST(arg=7, lineno=234)
2025-01-31 15:31:43,387 - DEBUG - stack ['$exp106.0']
2025-01-31 15:31:43,387 - DEBUG - dispatch pc=110, inst=COMPARE_OP(arg=4, lineno=234)
2025-01-31 15:31:43,387 - DEBUG - stack ['$exp106.0', '$const108.1']
2025-01-31 15:31:43,387 - DEBUG - dispatch pc=112, inst=POP_JUMP_IF_FALSE(arg=66, lineno=234)
2025-01-31 15:31:43,387 - DEBUG - stack ['$110compare_op.2']
2025-01-31 15:31:43,387 - DEBUG - end state. edges=[Edge(pc=114, stack=(), blockstack=(), npush=0), Edge(pc=130, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:43,387 - DEBUG - pending: deque([State(pc_initial=52 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
2025-01-31 15:31:43,387 - DEBUG - stack: []
2025-01-31 15:31:43,387 - DEBUG - state.pc_initial: State(pc_initial=52 nstack_initial=0)
2025-01-31 15:31:43,387 - DEBUG - dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=224)
2025-01-31 15:31:43,387 - DEBUG - stack []
2025-01-31 15:31:43,387 - DEBUG - dispatch pc=54, inst=LOAD_CONST(arg=2, lineno=224)
2025-01-31 15:31:43,387 - DEBUG - stack ['$a52.0']
2025-01-31 15:31:43,387 - DEBUG - dispatch pc=56, inst=COMPARE_OP(arg=2, lineno=224)
2025-01-31 15:31:43,388 - DEBUG - stack ['$a52.0', '$const54.1']
2025-01-31 15:31:43,388 - DEBUG - dispatch pc=58, inst=POP_JUMP_IF_FALSE(arg=39, lineno=224)
2025-01-31 15:31:43,388 - DEBUG - stack ['$56compare_op.2']
2025-01-31 15:31:43,388 - DEBUG - end state. edges=[Edge(pc=60, stack=(), blockstack=(), npush=0), Edge(pc=76, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:43,388 - DEBUG - pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
2025-01-31 15:31:43,388 - DEBUG - stack: []
2025-01-31 15:31:43,388 - DEBUG - state.pc_initial: State(pc_initial=96 nstack_initial=0)
2025-01-31 15:31:43,388 - DEBUG - dispatch pc=96, inst=JUMP_FORWARD(arg=4, lineno=230)
2025-01-31 15:31:43,388 - DEBUG - stack []
2025-01-31 15:31:43,388 - DEBUG - end state. edges=[Edge(pc=106, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:43,388 - DEBUG - pending: deque([State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
2025-01-31 15:31:43,388 - DEBUG - stack: []
2025-01-31 15:31:43,388 - DEBUG - state.pc_initial: State(pc_initial=114 nstack_initial=0)
2025-01-31 15:31:43,388 - DEBUG - dispatch pc=114, inst=LOAD_GLOBAL(arg=2, lineno=236)
2025-01-31 15:31:43,388 - DEBUG - stack []
2025-01-31 15:31:43,388 - DEBUG - dispatch pc=116, inst=LOAD_METHOD(arg=3, lineno=236)
2025-01-31 15:31:43,388 - DEBUG - stack ['$114load_global.0']
2025-01-31 15:31:43,388 - DEBUG - dispatch pc=118, inst=LOAD_FAST(arg=0, lineno=236)
2025-01-31 15:31:43,388 - DEBUG - stack ['$116load_method.1']
2025-01-31 15:31:43,388 - DEBUG - dispatch pc=120, inst=LOAD_GLOBAL(arg=4, lineno=236)
2025-01-31 15:31:43,388 - DEBUG - stack ['$116load_method.1', '$a118.2']
2025-01-31 15:31:43,388 - DEBUG - dispatch pc=122, inst=LOAD_FAST(arg=1, lineno=236)
2025-01-31 15:31:43,388 - DEBUG - stack ['$116load_method.1', '$a118.2', '$120load_global.3']
2025-01-31 15:31:43,388 - DEBUG - dispatch pc=124, inst=CALL_FUNCTION(arg=1, lineno=236)
2025-01-31 15:31:43,388 - DEBUG - stack ['$116load_method.1', '$a118.2', '$120load_global.3', '$b122.4']
2025-01-31 15:31:43,388 - DEBUG - dispatch pc=126, inst=CALL_METHOD(arg=2, lineno=236)
2025-01-31 15:31:43,388 - DEBUG - stack ['$116load_method.1', '$a118.2', '$124call_function.5']
2025-01-31 15:31:43,388 - DEBUG - dispatch pc=128, inst=RETURN_VALUE(arg=None, lineno=236)
2025-01-31 15:31:43,388 - DEBUG - stack ['$126call_method.6']
2025-01-31 15:31:43,389 - DEBUG - end state. edges=[]
2025-01-31 15:31:43,389 - DEBUG - pending: deque([State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
2025-01-31 15:31:43,389 - DEBUG - stack: []
2025-01-31 15:31:43,389 - DEBUG - state.pc_initial: State(pc_initial=130 nstack_initial=0)
2025-01-31 15:31:43,389 - DEBUG - dispatch pc=130, inst=LOAD_FAST(arg=4, lineno=237)
2025-01-31 15:31:43,389 - DEBUG - stack []
2025-01-31 15:31:43,389 - DEBUG - dispatch pc=132, inst=LOAD_CONST(arg=2, lineno=237)
2025-01-31 15:31:43,389 - DEBUG - stack ['$exp130.0']
2025-01-31 15:31:43,389 - DEBUG - dispatch pc=134, inst=COMPARE_OP(arg=3, lineno=237)
2025-01-31 15:31:43,389 - DEBUG - stack ['$exp130.0', '$const132.1']
2025-01-31 15:31:43,389 - DEBUG - dispatch pc=136, inst=POP_JUMP_IF_FALSE(arg=90, lineno=237)
2025-01-31 15:31:43,389 - DEBUG - stack ['$134compare_op.2']
2025-01-31 15:31:43,389 - DEBUG - end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0), Edge(pc=178, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:43,389 - DEBUG - pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=138 nstack_initial=0), State(pc_initial=178 nstack_initial=0)])
2025-01-31 15:31:43,389 - DEBUG - stack: []
2025-01-31 15:31:43,389 - DEBUG - state.pc_initial: State(pc_initial=60 nstack_initial=0)
2025-01-31 15:31:43,389 - DEBUG - dispatch pc=60, inst=LOAD_DEREF(arg=2, lineno=225)
2025-01-31 15:31:43,389 - DEBUG - stack []
2025-01-31 15:31:43,389 - DEBUG - dispatch pc=62, inst=POP_JUMP_IF_FALSE(arg=35, lineno=225)
2025-01-31 15:31:43,389 - DEBUG - stack ['$60load_deref.0']
2025-01-31 15:31:43,389 - DEBUG - end state. edges=[Edge(pc=64, stack=(), blockstack=(), npush=0), Edge(pc=68, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:43,389 - DEBUG - pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=138 nstack_initial=0), State(pc_initial=178 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0)])
2025-01-31 15:31:43,389 - DEBUG - stack: []
2025-01-31 15:31:43,389 - DEBUG - state.pc_initial: State(pc_initial=76 nstack_initial=0)
2025-01-31 15:31:43,389 - DEBUG - dispatch pc=76, inst=LOAD_FAST(arg=0, lineno=229)
2025-01-31 15:31:43,389 - DEBUG - stack []
2025-01-31 15:31:43,389 - DEBUG - dispatch pc=78, inst=LOAD_CONST(arg=1, lineno=229)
2025-01-31 15:31:43,389 - DEBUG - stack ['$a76.0']
2025-01-31 15:31:43,389 - DEBUG - dispatch pc=80, inst=COMPARE_OP(arg=3, lineno=229)
2025-01-31 15:31:43,390 - DEBUG - stack ['$a76.0', '$const78.1']
2025-01-31 15:31:43,390 - DEBUG - dispatch pc=82, inst=POP_JUMP_IF_FALSE(arg=49, lineno=229)
2025-01-31 15:31:43,390 - DEBUG - stack ['$80compare_op.2']
2025-01-31 15:31:43,390 - DEBUG - end state. edges=[Edge(pc=84, stack=(), blockstack=(), npush=0), Edge(pc=96, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:43,390 - DEBUG - pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=138 nstack_initial=0), State(pc_initial=178 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=96 nstack_initial=0)])
2025-01-31 15:31:43,390 - DEBUG - pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=178 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=96 nstack_initial=0)])
2025-01-31 15:31:43,390 - DEBUG - stack: []
2025-01-31 15:31:43,390 - DEBUG - state.pc_initial: State(pc_initial=138 nstack_initial=0)
2025-01-31 15:31:43,390 - DEBUG - dispatch pc=138, inst=LOAD_FAST(arg=4, lineno=238)
2025-01-31 15:31:43,390 - DEBUG - stack []
2025-01-31 15:31:43,390 - DEBUG - dispatch pc=140, inst=LOAD_CONST(arg=1, lineno=238)
2025-01-31 15:31:43,390 - DEBUG - stack ['$exp138.0']
2025-01-31 15:31:43,390 - DEBUG - dispatch pc=142, inst=BINARY_AND(arg=None, lineno=238)
2025-01-31 15:31:43,390 - DEBUG - stack ['$exp138.0', '$const140.1']
2025-01-31 15:31:43,390 - DEBUG - dispatch pc=144, inst=POP_JUMP_IF_FALSE(arg=78, lineno=238)
2025-01-31 15:31:43,390 - DEBUG - stack ['$142binary_and.2']
2025-01-31 15:31:43,390 - DEBUG - end state. edges=[Edge(pc=146, stack=(), blockstack=(), npush=0), Edge(pc=154, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:43,390 - DEBUG - pending: deque([State(pc_initial=178 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0)])
2025-01-31 15:31:43,390 - DEBUG - stack: []
2025-01-31 15:31:43,390 - DEBUG - state.pc_initial: State(pc_initial=178 nstack_initial=0)
2025-01-31 15:31:43,390 - DEBUG - dispatch pc=178, inst=LOAD_FAST(arg=3, lineno=243)
2025-01-31 15:31:43,390 - DEBUG - stack []
2025-01-31 15:31:43,390 - DEBUG - dispatch pc=180, inst=POP_JUMP_IF_FALSE(arg=96, lineno=243)
2025-01-31 15:31:43,390 - DEBUG - stack ['$invert178.0']
2025-01-31 15:31:43,390 - DEBUG - end state. edges=[Edge(pc=182, stack=(), blockstack=(), npush=0), Edge(pc=190, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:43,390 - DEBUG - pending: deque([State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=182 nstack_initial=0), State(pc_initial=190 nstack_initial=0)])
2025-01-31 15:31:43,390 - DEBUG - stack: []
2025-01-31 15:31:43,390 - DEBUG - state.pc_initial: State(pc_initial=64 nstack_initial=0)
2025-01-31 15:31:43,391 - DEBUG - dispatch pc=64, inst=LOAD_DEREF(arg=2, lineno=226)
2025-01-31 15:31:43,391 - DEBUG - stack []
2025-01-31 15:31:43,391 - DEBUG - dispatch pc=66, inst=RETURN_VALUE(arg=None, lineno=226)
2025-01-31 15:31:43,391 - DEBUG - stack ['$64load_deref.0']
2025-01-31 15:31:43,391 - DEBUG - end state. edges=[]
2025-01-31 15:31:43,391 - DEBUG - pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=182 nstack_initial=0), State(pc_initial=190 nstack_initial=0)])
2025-01-31 15:31:43,391 - DEBUG - stack: []
2025-01-31 15:31:43,391 - DEBUG - state.pc_initial: State(pc_initial=68 nstack_initial=0)
2025-01-31 15:31:43,391 - DEBUG - dispatch pc=68, inst=LOAD_GLOBAL(arg=1, lineno=228)
2025-01-31 15:31:43,391 - DEBUG - stack []
2025-01-31 15:31:43,391 - DEBUG - dispatch pc=70, inst=LOAD_CONST(arg=4, lineno=228)
2025-01-31 15:31:43,391 - DEBUG - stack ['$68load_global.0']
2025-01-31 15:31:43,391 - DEBUG - dispatch pc=72, inst=CALL_FUNCTION(arg=1, lineno=228)
2025-01-31 15:31:43,391 - DEBUG - stack ['$68load_global.0', '$const70.1']
2025-01-31 15:31:43,391 - DEBUG - dispatch pc=74, inst=RAISE_VARARGS(arg=1, lineno=228)
2025-01-31 15:31:43,391 - DEBUG - stack ['$72call_function.2']
2025-01-31 15:31:43,391 - DEBUG - end state. edges=[]
2025-01-31 15:31:43,391 - DEBUG - pending: deque([State(pc_initial=84 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=182 nstack_initial=0), State(pc_initial=190 nstack_initial=0)])
2025-01-31 15:31:43,391 - DEBUG - stack: []
2025-01-31 15:31:43,391 - DEBUG - state.pc_initial: State(pc_initial=84 nstack_initial=0)
2025-01-31 15:31:43,391 - DEBUG - dispatch pc=84, inst=LOAD_FAST(arg=0, lineno=229)
2025-01-31 15:31:43,391 - DEBUG - stack []
2025-01-31 15:31:43,391 - DEBUG - dispatch pc=86, inst=LOAD_CONST(arg=5, lineno=229)
2025-01-31 15:31:43,391 - DEBUG - stack ['$a84.0']
2025-01-31 15:31:43,391 - DEBUG - dispatch pc=88, inst=COMPARE_OP(arg=3, lineno=229)
2025-01-31 15:31:43,391 - DEBUG - stack ['$a84.0', '$const86.1']
2025-01-31 15:31:43,391 - DEBUG - dispatch pc=90, inst=POP_JUMP_IF_FALSE(arg=49, lineno=229)
2025-01-31 15:31:43,391 - DEBUG - stack ['$88compare_op.2']
2025-01-31 15:31:43,391 - DEBUG - end state. edges=[Edge(pc=92, stack=(), blockstack=(), npush=0), Edge(pc=96, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:43,391 - DEBUG - pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=182 nstack_initial=0), State(pc_initial=190 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=96 nstack_initial=0)])
2025-01-31 15:31:43,392 - DEBUG - pending: deque([State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=182 nstack_initial=0), State(pc_initial=190 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=96 nstack_initial=0)])
2025-01-31 15:31:43,392 - DEBUG - stack: []
2025-01-31 15:31:43,392 - DEBUG - state.pc_initial: State(pc_initial=146 nstack_initial=0)
2025-01-31 15:31:43,392 - DEBUG - dispatch pc=146, inst=LOAD_FAST(arg=2, lineno=239)
2025-01-31 15:31:43,392 - DEBUG - stack []
2025-01-31 15:31:43,392 - DEBUG - dispatch pc=148, inst=LOAD_FAST(arg=0, lineno=239)
2025-01-31 15:31:43,392 - DEBUG - stack ['$r146.0']
2025-01-31 15:31:43,392 - DEBUG - dispatch pc=150, inst=INPLACE_MULTIPLY(arg=None, lineno=239)
2025-01-31 15:31:43,392 - DEBUG - stack ['$r146.0', '$a148.1']
2025-01-31 15:31:43,392 - DEBUG - dispatch pc=152, inst=STORE_FAST(arg=2, lineno=239)
2025-01-31 15:31:43,392 - DEBUG - stack ['$150inplace_multiply.2']
2025-01-31 15:31:43,392 - DEBUG - end state. edges=[Edge(pc=154, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:43,393 - DEBUG - pending: deque([State(pc_initial=154 nstack_initial=0), State(pc_initial=182 nstack_initial=0), State(pc_initial=190 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=154 nstack_initial=0)])
2025-01-31 15:31:43,393 - DEBUG - stack: []
2025-01-31 15:31:43,393 - DEBUG - state.pc_initial: State(pc_initial=154 nstack_initial=0)
2025-01-31 15:31:43,393 - DEBUG - dispatch pc=154, inst=LOAD_FAST(arg=4, lineno=240)
2025-01-31 15:31:43,393 - DEBUG - stack []
2025-01-31 15:31:43,393 - DEBUG - dispatch pc=156, inst=LOAD_CONST(arg=1, lineno=240)
2025-01-31 15:31:43,393 - DEBUG - stack ['$exp154.0']
2025-01-31 15:31:43,393 - DEBUG - dispatch pc=158, inst=INPLACE_RSHIFT(arg=None, lineno=240)
2025-01-31 15:31:43,393 - DEBUG - stack ['$exp154.0', '$const156.1']
2025-01-31 15:31:43,393 - DEBUG - dispatch pc=160, inst=STORE_FAST(arg=4, lineno=240)
2025-01-31 15:31:43,393 - DEBUG - stack ['$158inplace_rshift.2']
2025-01-31 15:31:43,393 - DEBUG - dispatch pc=162, inst=LOAD_FAST(arg=0, lineno=241)
2025-01-31 15:31:43,393 - DEBUG - stack []
2025-01-31 15:31:43,394 - DEBUG - dispatch pc=164, inst=LOAD_FAST(arg=0, lineno=241)
2025-01-31 15:31:43,394 - DEBUG - stack ['$a162.3']
2025-01-31 15:31:43,394 - DEBUG - dispatch pc=166, inst=INPLACE_MULTIPLY(arg=None, lineno=241)
2025-01-31 15:31:43,394 - DEBUG - stack ['$a162.3', '$a164.4']
2025-01-31 15:31:43,394 - DEBUG - dispatch pc=168, inst=STORE_FAST(arg=0, lineno=241)
2025-01-31 15:31:43,394 - DEBUG - stack ['$166inplace_multiply.5']
2025-01-31 15:31:43,394 - DEBUG - dispatch pc=170, inst=LOAD_FAST(arg=4, lineno=237)
2025-01-31 15:31:43,394 - DEBUG - stack []
2025-01-31 15:31:43,394 - DEBUG - dispatch pc=172, inst=LOAD_CONST(arg=2, lineno=237)
2025-01-31 15:31:43,394 - DEBUG - stack ['$exp170.6']
2025-01-31 15:31:43,394 - DEBUG - dispatch pc=174, inst=COMPARE_OP(arg=3, lineno=237)
2025-01-31 15:31:43,394 - DEBUG - stack ['$exp170.6', '$const172.7']
2025-01-31 15:31:43,394 - DEBUG - dispatch pc=176, inst=POP_JUMP_IF_TRUE(arg=70, lineno=237)
2025-01-31 15:31:43,394 - DEBUG - stack ['$174compare_op.8']
2025-01-31 15:31:43,394 - DEBUG - end state. edges=[Edge(pc=178, stack=(), blockstack=(), npush=0), Edge(pc=138, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:43,394 - DEBUG - pending: deque([State(pc_initial=182 nstack_initial=0), State(pc_initial=190 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=178 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
2025-01-31 15:31:43,394 - DEBUG - stack: []
2025-01-31 15:31:43,394 - DEBUG - state.pc_initial: State(pc_initial=182 nstack_initial=0)
2025-01-31 15:31:43,394 - DEBUG - dispatch pc=182, inst=LOAD_CONST(arg=8, lineno=243)
2025-01-31 15:31:43,394 - DEBUG - stack []
2025-01-31 15:31:43,394 - DEBUG - dispatch pc=184, inst=LOAD_FAST(arg=2, lineno=243)
2025-01-31 15:31:43,394 - DEBUG - stack ['$const182.0']
2025-01-31 15:31:43,394 - DEBUG - dispatch pc=186, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=243)
2025-01-31 15:31:43,394 - DEBUG - stack ['$const182.0', '$r184.1']
2025-01-31 15:31:43,394 - DEBUG - dispatch pc=188, inst=RETURN_VALUE(arg=None, lineno=243)
2025-01-31 15:31:43,394 - DEBUG - stack ['$186binary_true_divide.2']
2025-01-31 15:31:43,394 - DEBUG - end state. edges=[]
2025-01-31 15:31:43,394 - DEBUG - pending: deque([State(pc_initial=190 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=178 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
2025-01-31 15:31:43,394 - DEBUG - stack: []
2025-01-31 15:31:43,395 - DEBUG - state.pc_initial: State(pc_initial=190 nstack_initial=0)
2025-01-31 15:31:43,395 - DEBUG - dispatch pc=190, inst=LOAD_FAST(arg=2, lineno=243)
2025-01-31 15:31:43,395 - DEBUG - stack []
2025-01-31 15:31:43,395 - DEBUG - dispatch pc=192, inst=RETURN_VALUE(arg=None, lineno=243)
2025-01-31 15:31:43,395 - DEBUG - stack ['$r190.0']
2025-01-31 15:31:43,395 - DEBUG - end state. edges=[]
2025-01-31 15:31:43,395 - DEBUG - pending: deque([State(pc_initial=92 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=178 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
2025-01-31 15:31:43,395 - DEBUG - stack: []
2025-01-31 15:31:43,395 - DEBUG - state.pc_initial: State(pc_initial=92 nstack_initial=0)
2025-01-31 15:31:43,395 - DEBUG - dispatch pc=92, inst=LOAD_CONST(arg=2, lineno=230)
2025-01-31 15:31:43,395 - DEBUG - stack []
2025-01-31 15:31:43,395 - DEBUG - dispatch pc=94, inst=RETURN_VALUE(arg=None, lineno=230)
2025-01-31 15:31:43,395 - DEBUG - stack ['$const92.0']
2025-01-31 15:31:43,395 - DEBUG - end state. edges=[]
2025-01-31 15:31:43,395 - DEBUG - pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=178 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
2025-01-31 15:31:43,395 - DEBUG - pending: deque([State(pc_initial=154 nstack_initial=0), State(pc_initial=178 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
2025-01-31 15:31:43,395 - DEBUG - pending: deque([State(pc_initial=178 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
2025-01-31 15:31:43,395 - DEBUG - pending: deque([State(pc_initial=138 nstack_initial=0)])
2025-01-31 15:31:43,395 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:31:43,395 - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set(),
             State(pc_initial=48 nstack_initial=0): set(),
             State(pc_initial=52 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=64 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set(),
             State(pc_initial=84 nstack_initial=0): set(),
             State(pc_initial=92 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=98 nstack_initial=0): set(),
             State(pc_initial=106 nstack_initial=0): set(),
             State(pc_initial=114 nstack_initial=0): set(),
             State(pc_initial=130 nstack_initial=0): set(),
             State(pc_initial=138 nstack_initial=0): set(),
             State(pc_initial=146 nstack_initial=0): set(),
             State(pc_initial=154 nstack_initial=0): set(),
             State(pc_initial=178 nstack_initial=0): set(),
             State(pc_initial=182 nstack_initial=0): set(),
             State(pc_initial=190 nstack_initial=0): set()})
2025-01-31 15:31:43,396 - DEBUG - defmap: {}
2025-01-31 15:31:43,396 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:43,396 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:43,396 - DEBUG - keep phismap: {}
2025-01-31 15:31:43,396 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-01-31 15:31:43,396 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:31:43,396 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$const4.1'}), (6, {'func': '$2load_deref.0', 'args': ['$const4.1'], 'res': '$6call_function.2'}), (8, {'value': '$6call_function.2'}), (10, {'res': '$10load_deref.3'}), (12, {'res': '$a12.4'}), (14, {'func': '$10load_deref.3', 'args': ['$a12.4'], 'res': '$14call_function.5'}), (16, {'value': '$14call_function.5'}), (18, {'res': '$b18.6'}), (20, {'res': '$const20.7'}), (22, {'lhs': '$b18.6', 'rhs': '$const20.7', 'res': '$22compare_op.8'}), (24, {'pred': '$22compare_op.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: (), 98: ()})
2025-01-31 15:31:43,396 - DEBUG - block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$const26.0'}), (28, {'value': '$const26.0'}), (30, {'res': '$b30.1'}), (32, {'value': '$b30.1', 'res': '$32unary_negative.2'}), (34, {'value': '$32unary_negative.2'}), (36, {'res': '$exp36.3'}), (38, {'res': '$const38.4'}), (40, {'lhs': '$exp36.3', 'rhs': '$const38.4', 'res': '$40compare_op.5'}), (42, {'pred': '$40compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: (), 48: ()})
2025-01-31 15:31:43,396 - DEBUG - block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$44load_global.0'}), (46, {'exc': '$44load_global.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:43,396 - DEBUG - block_infos State(pc_initial=48 nstack_initial=0):
AdaptBlockInfo(insts=((48, {'res': '$48load_deref.0'}), (50, {'pred': '$48load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={52: (), 96: ()})
2025-01-31 15:31:43,396 - DEBUG - block_infos State(pc_initial=52 nstack_initial=0):
AdaptBlockInfo(insts=((52, {'res': '$a52.0'}), (54, {'res': '$const54.1'}), (56, {'lhs': '$a52.0', 'rhs': '$const54.1', 'res': '$56compare_op.2'}), (58, {'pred': '$56compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: (), 76: ()})
2025-01-31 15:31:43,396 - DEBUG - block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$60load_deref.0'}), (62, {'pred': '$60load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={64: (), 68: ()})
2025-01-31 15:31:43,396 - DEBUG - block_infos State(pc_initial=64 nstack_initial=0):
AdaptBlockInfo(insts=((64, {'res': '$64load_deref.0'}), (66, {'retval': '$64load_deref.0', 'castval': '$66return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:43,396 - DEBUG - block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$68load_global.0'}), (70, {'res': '$const70.1'}), (72, {'func': '$68load_global.0', 'args': ['$const70.1'], 'res': '$72call_function.2'}), (74, {'exc': '$72call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:43,396 - DEBUG - block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$a76.0'}), (78, {'res': '$const78.1'}), (80, {'lhs': '$a76.0', 'rhs': '$const78.1', 'res': '$80compare_op.2'}), (82, {'pred': '$80compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={84: (), 96: ()})
2025-01-31 15:31:43,396 - DEBUG - block_infos State(pc_initial=84 nstack_initial=0):
AdaptBlockInfo(insts=((84, {'res': '$a84.0'}), (86, {'res': '$const86.1'}), (88, {'lhs': '$a84.0', 'rhs': '$const86.1', 'res': '$88compare_op.2'}), (90, {'pred': '$88compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={92: (), 96: ()})
2025-01-31 15:31:43,396 - DEBUG - block_infos State(pc_initial=92 nstack_initial=0):
AdaptBlockInfo(insts=((92, {'res': '$const92.0'}), (94, {'retval': '$const92.0', 'castval': '$94return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:43,396 - DEBUG - block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={106: ()})
2025-01-31 15:31:43,396 - DEBUG - block_infos State(pc_initial=98 nstack_initial=0):
AdaptBlockInfo(insts=((98, {'res': '$const98.0'}), (100, {'value': '$const98.0'}), (102, {'res': '$b102.1'}), (104, {'value': '$b102.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={106: ()})
2025-01-31 15:31:43,396 - DEBUG - block_infos State(pc_initial=106 nstack_initial=0):
AdaptBlockInfo(insts=((106, {'res': '$exp106.0'}), (108, {'res': '$const108.1'}), (110, {'lhs': '$exp106.0', 'rhs': '$const108.1', 'res': '$110compare_op.2'}), (112, {'pred': '$110compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={114: (), 130: ()})
2025-01-31 15:31:43,397 - DEBUG - block_infos State(pc_initial=114 nstack_initial=0):
AdaptBlockInfo(insts=((114, {'res': '$114load_global.0'}), (116, {'item': '$114load_global.0', 'res': '$116load_method.1'}), (118, {'res': '$a118.2'}), (120, {'res': '$120load_global.3'}), (122, {'res': '$b122.4'}), (124, {'func': '$120load_global.3', 'args': ['$b122.4'], 'res': '$124call_function.5'}), (126, {'func': '$116load_method.1', 'args': ['$a118.2', '$124call_function.5'], 'res': '$126call_method.6'}), (128, {'retval': '$126call_method.6', 'castval': '$128return_value.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:43,397 - DEBUG - block_infos State(pc_initial=130 nstack_initial=0):
AdaptBlockInfo(insts=((130, {'res': '$exp130.0'}), (132, {'res': '$const132.1'}), (134, {'lhs': '$exp130.0', 'rhs': '$const132.1', 'res': '$134compare_op.2'}), (136, {'pred': '$134compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: (), 178: ()})
2025-01-31 15:31:43,397 - DEBUG - block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$exp138.0'}), (140, {'res': '$const140.1'}), (142, {'lhs': '$exp138.0', 'rhs': '$const140.1', 'res': '$142binary_and.2'}), (144, {'pred': '$142binary_and.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={146: (), 154: ()})
2025-01-31 15:31:43,397 - DEBUG - block_infos State(pc_initial=146 nstack_initial=0):
AdaptBlockInfo(insts=((146, {'res': '$r146.0'}), (148, {'res': '$a148.1'}), (150, {'lhs': '$r146.0', 'rhs': '$a148.1', 'res': '$150inplace_multiply.2'}), (152, {'value': '$150inplace_multiply.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={154: ()})
2025-01-31 15:31:43,397 - DEBUG - block_infos State(pc_initial=154 nstack_initial=0):
AdaptBlockInfo(insts=((154, {'res': '$exp154.0'}), (156, {'res': '$const156.1'}), (158, {'lhs': '$exp154.0', 'rhs': '$const156.1', 'res': '$158inplace_rshift.2'}), (160, {'value': '$158inplace_rshift.2'}), (162, {'res': '$a162.3'}), (164, {'res': '$a164.4'}), (166, {'lhs': '$a162.3', 'rhs': '$a164.4', 'res': '$166inplace_multiply.5'}), (168, {'value': '$166inplace_multiply.5'}), (170, {'res': '$exp170.6'}), (172, {'res': '$const172.7'}), (174, {'lhs': '$exp170.6', 'rhs': '$const172.7', 'res': '$174compare_op.8'}), (176, {'pred': '$174compare_op.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={178: (), 138: ()})
2025-01-31 15:31:43,397 - DEBUG - block_infos State(pc_initial=178 nstack_initial=0):
AdaptBlockInfo(insts=((178, {'res': '$invert178.0'}), (180, {'pred': '$invert178.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={182: (), 190: ()})
2025-01-31 15:31:43,397 - DEBUG - block_infos State(pc_initial=182 nstack_initial=0):
AdaptBlockInfo(insts=((182, {'res': '$const182.0'}), (184, {'res': '$r184.1'}), (186, {'lhs': '$const182.0', 'rhs': '$r184.1', 'res': '$186binary_true_divide.2'}), (188, {'retval': '$186binary_true_divide.2', 'castval': '$188return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:43,397 - DEBUG - block_infos State(pc_initial=190 nstack_initial=0):
AdaptBlockInfo(insts=((190, {'res': '$r190.0'}), (192, {'retval': '$r190.0', 'castval': '$192return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:43,399 - DEBUG - label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    $2load_deref.0 = freevar(tp: float32)    ['$2load_deref.0']
    $const4.1 = const(int, 1)                ['$const4.1']
    r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_deref.0', '$const4.1', 'r']
    $10load_deref.3 = freevar(tp: float32)   ['$10load_deref.3']
    a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None) ['$10load_deref.3', 'a', 'a.1']
    $const20.7 = const(int, 0)               ['$const20.7']
    $22compare_op.8 = b < $const20.7         ['$22compare_op.8', '$const20.7', 'b']
    bool24 = global(bool: <class 'bool'>)    ['bool24']
    $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None) ['$22compare_op.8', '$24pred', 'bool24']
    branch $24pred, 26, 98                   ['$24pred']
label 26:
    invert = const(bool, True)               ['invert']
    exp = unary(fn=<built-in function neg>, value=b) ['b', 'exp']
    $const38.4 = const(int, 0)               ['$const38.4']
    $40compare_op.5 = exp < $const38.4       ['$40compare_op.5', '$const38.4', 'exp']
    bool42 = global(bool: <class 'bool'>)    ['bool42']
    $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None) ['$40compare_op.5', '$42pred', 'bool42']
    branch $42pred, 44, 48                   ['$42pred']
label 44:
    $44load_global.0 = global(OverflowError: <class 'OverflowError'>) ['$44load_global.0']
    raise $44load_global.0                   ['$44load_global.0']
label 48:
    $48load_deref.0 = freevar(is_integer: False) ['$48load_deref.0']
    bool50 = global(bool: <class 'bool'>)    ['bool50']
    $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None) ['$48load_deref.0', '$50pred', 'bool50']
    branch $50pred, 52, 96                   ['$50pred']
label 52:
    $const54.1 = const(int, 0)               ['$const54.1']
    $56compare_op.2 = a.1 == $const54.1      ['$56compare_op.2', '$const54.1', 'a.1']
    bool58 = global(bool: <class 'bool'>)    ['bool58']
    $58pred = call bool58($56compare_op.2, func=bool58, args=(Var($56compare_op.2, numbers.py:224),), kws=(), vararg=None, varkwarg=None, target=None) ['$56compare_op.2', '$58pred', 'bool58']
    branch $58pred, 60, 76                   ['$58pred']
label 60:
    $60load_deref.0 = freevar(zerodiv_return: False) ['$60load_deref.0']
    bool62 = global(bool: <class 'bool'>)    ['bool62']
    $62pred = call bool62($60load_deref.0, func=bool62, args=(Var($60load_deref.0, numbers.py:225),), kws=(), vararg=None, varkwarg=None, target=None) ['$60load_deref.0', '$62pred', 'bool62']
    branch $62pred, 64, 68                   ['$62pred']
label 64:
    $64load_deref.0 = freevar(zerodiv_return: False) ['$64load_deref.0']
    $66return_value.1 = cast(value=$64load_deref.0) ['$64load_deref.0', '$66return_value.1']
    return $66return_value.1                 ['$66return_value.1']
label 68:
    $68load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>) ['$68load_global.0']
    $const70.1 = const(str, 0 cannot be raised to a negative power) ['$const70.1']
    $72call_function.2 = call $68load_global.0($const70.1, func=$68load_global.0, args=[Var($const70.1, numbers.py:228)], kws=(), vararg=None, varkwarg=None, target=None) ['$68load_global.0', '$72call_function.2', '$const70.1']
    raise $72call_function.2                 ['$72call_function.2']
label 76:
    $const78.1 = const(int, 1)               ['$const78.1']
    $80compare_op.2 = a.1 != $const78.1      ['$80compare_op.2', '$const78.1', 'a.1']
    bool82 = global(bool: <class 'bool'>)    ['bool82']
    $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None) ['$80compare_op.2', '$82pred', 'bool82']
    branch $82pred, 84, 96                   ['$82pred']
label 84:
    $const86.1 = const(int, -1)              ['$const86.1']
    $88compare_op.2 = a.1 != $const86.1      ['$88compare_op.2', '$const86.1', 'a.1']
    bool90 = global(bool: <class 'bool'>)    ['bool90']
    $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None) ['$88compare_op.2', '$90pred', 'bool90']
    branch $90pred, 92, 96                   ['$90pred']
label 92:
    $const92.0 = const(int, 0)               ['$const92.0']
    $94return_value.1 = cast(value=$const92.0) ['$94return_value.1', '$const92.0']
    return $94return_value.1                 ['$94return_value.1']
label 96:
    jump 106                                 []
label 98:
    invert = const(bool, False)              ['invert']
    exp = b                                  ['b', 'exp']
    jump 106                                 []
label 106:
    $const108.1 = const(int, 65536)          ['$const108.1']
    $110compare_op.2 = exp > $const108.1     ['$110compare_op.2', '$const108.1', 'exp']
    bool112 = global(bool: <class 'bool'>)   ['bool112']
    $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None) ['$110compare_op.2', '$112pred', 'bool112']
    branch $112pred, 114, 130                ['$112pred']
label 114:
    $114load_global.0 = global(math: <module 'math' from '/home/strain/miniconda3/envs/applio/lib/python3.10/lib-dynload/math.cpython-310-x86_64-linux-gnu.so'>) ['$114load_global.0']
    $116load_method.1 = getattr(value=$114load_global.0, attr=pow) ['$114load_global.0', '$116load_method.1']
    $120load_global.3 = global(float: <class 'float'>) ['$120load_global.3']
    $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None) ['$120load_global.3', '$124call_function.5', 'b']
    $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None) ['$116load_method.1', '$124call_function.5', '$126call_method.6', 'a.1']
    $128return_value.7 = cast(value=$126call_method.6) ['$126call_method.6', '$128return_value.7']
    return $128return_value.7                ['$128return_value.7']
label 130:
    $const132.1 = const(int, 0)              ['$const132.1']
    $134compare_op.2 = exp != $const132.1    ['$134compare_op.2', '$const132.1', 'exp']
    bool136 = global(bool: <class 'bool'>)   ['bool136']
    $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None) ['$134compare_op.2', '$136pred', 'bool136']
    branch $136pred, 138, 178                ['$136pred']
label 138:
    $const140.1 = const(int, 1)              ['$const140.1']
    $142binary_and.2 = exp & $const140.1     ['$142binary_and.2', '$const140.1', 'exp']
    bool144 = global(bool: <class 'bool'>)   ['bool144']
    $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None) ['$142binary_and.2', '$144pred', 'bool144']
    branch $144pred, 146, 154                ['$144pred']
label 146:
    $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined) ['$150inplace_multiply.2', 'a.1', 'r']
    r = $150inplace_multiply.2               ['$150inplace_multiply.2', 'r']
    jump 154                                 []
label 154:
    $const156.1 = const(int, 1)              ['$const156.1']
    $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined) ['$158inplace_rshift.2', '$const156.1', 'exp']
    exp = $158inplace_rshift.2               ['$158inplace_rshift.2', 'exp']
    $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined) ['$166inplace_multiply.5', 'a.1', 'a.1']
    a.1 = $166inplace_multiply.5             ['$166inplace_multiply.5', 'a.1']
    $const172.7 = const(int, 0)              ['$const172.7']
    $174compare_op.8 = exp != $const172.7    ['$174compare_op.8', '$const172.7', 'exp']
    bool176 = global(bool: <class 'bool'>)   ['bool176']
    $176pred = call bool176($174compare_op.8, func=bool176, args=(Var($174compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None) ['$174compare_op.8', '$176pred', 'bool176']
    branch $176pred, 138, 178                ['$176pred']
label 178:
    bool180 = global(bool: <class 'bool'>)   ['bool180']
    $180pred = call bool180(invert, func=bool180, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None) ['$180pred', 'bool180', 'invert']
    branch $180pred, 182, 190                ['$180pred']
label 182:
    $const182.0 = const(float, 1.0)          ['$const182.0']
    $186binary_true_divide.2 = $const182.0 / r ['$186binary_true_divide.2', '$const182.0', 'r']
    $188return_value.3 = cast(value=$186binary_true_divide.2) ['$186binary_true_divide.2', '$188return_value.3']
    return $188return_value.3                ['$188return_value.3']
label 190:
    $192return_value.1 = cast(value=r)       ['$192return_value.1', 'r']
    return $192return_value.1                ['$192return_value.1']

2025-01-31 15:31:43,409 - DEBUG - ==== SSA block analysis pass on 0
2025-01-31 15:31:43,409 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e895b1c0>
2025-01-31 15:31:43,409 - DEBUG - on stmt: a = arg(0, name=a)
2025-01-31 15:31:43,410 - DEBUG - on stmt: b = arg(1, name=b)
2025-01-31 15:31:43,410 - DEBUG - on stmt: $2load_deref.0 = freevar(tp: float32)
2025-01-31 15:31:43,410 - DEBUG - on stmt: $const4.1 = const(int, 1)
2025-01-31 15:31:43,410 - DEBUG - on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,410 - DEBUG - on stmt: $10load_deref.3 = freevar(tp: float32)
2025-01-31 15:31:43,410 - DEBUG - on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,410 - DEBUG - on stmt: $const20.7 = const(int, 0)
2025-01-31 15:31:43,410 - DEBUG - on stmt: $22compare_op.8 = b < $const20.7
2025-01-31 15:31:43,410 - DEBUG - on stmt: bool24 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,410 - DEBUG - on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,410 - DEBUG - on stmt: branch $24pred, 26, 98
2025-01-31 15:31:43,410 - DEBUG - ==== SSA block analysis pass on 26
2025-01-31 15:31:43,410 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e895b1c0>
2025-01-31 15:31:43,410 - DEBUG - on stmt: invert = const(bool, True)
2025-01-31 15:31:43,410 - DEBUG - on stmt: exp = unary(fn=<built-in function neg>, value=b)
2025-01-31 15:31:43,410 - DEBUG - on stmt: $const38.4 = const(int, 0)
2025-01-31 15:31:43,410 - DEBUG - on stmt: $40compare_op.5 = exp < $const38.4
2025-01-31 15:31:43,410 - DEBUG - on stmt: bool42 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,410 - DEBUG - on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,410 - DEBUG - on stmt: branch $42pred, 44, 48
2025-01-31 15:31:43,410 - DEBUG - ==== SSA block analysis pass on 44
2025-01-31 15:31:43,410 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e895b1c0>
2025-01-31 15:31:43,410 - DEBUG - on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
2025-01-31 15:31:43,410 - DEBUG - on stmt: <static> raise <class 'OverflowError'>
2025-01-31 15:31:43,410 - DEBUG - ==== SSA block analysis pass on 48
2025-01-31 15:31:43,411 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e895b1c0>
2025-01-31 15:31:43,411 - DEBUG - on stmt: $48load_deref.0 = freevar(is_integer: False)
2025-01-31 15:31:43,411 - DEBUG - on stmt: bool50 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,411 - DEBUG - on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,411 - DEBUG - on stmt: jump 96
2025-01-31 15:31:43,411 - DEBUG - ==== SSA block analysis pass on 96
2025-01-31 15:31:43,411 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e895b1c0>
2025-01-31 15:31:43,411 - DEBUG - on stmt: jump 106
2025-01-31 15:31:43,411 - DEBUG - ==== SSA block analysis pass on 98
2025-01-31 15:31:43,411 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e895b1c0>
2025-01-31 15:31:43,411 - DEBUG - on stmt: invert = const(bool, False)
2025-01-31 15:31:43,411 - DEBUG - on stmt: exp = b
2025-01-31 15:31:43,411 - DEBUG - on stmt: jump 106
2025-01-31 15:31:43,411 - DEBUG - ==== SSA block analysis pass on 106
2025-01-31 15:31:43,411 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e895b1c0>
2025-01-31 15:31:43,411 - DEBUG - on stmt: $const108.1 = const(int, 65536)
2025-01-31 15:31:43,411 - DEBUG - on stmt: $110compare_op.2 = exp > $const108.1
2025-01-31 15:31:43,411 - DEBUG - on stmt: bool112 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,411 - DEBUG - on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,411 - DEBUG - on stmt: branch $112pred, 114, 130
2025-01-31 15:31:43,411 - DEBUG - ==== SSA block analysis pass on 114
2025-01-31 15:31:43,411 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e895b1c0>
2025-01-31 15:31:43,411 - DEBUG - on stmt: $114load_global.0 = global(math: <module 'math' from '/home/strain/miniconda3/envs/applio/lib/python3.10/lib-dynload/math.cpython-310-x86_64-linux-gnu.so'>)
2025-01-31 15:31:43,411 - DEBUG - on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
2025-01-31 15:31:43,411 - DEBUG - on stmt: $120load_global.3 = global(float: <class 'float'>)
2025-01-31 15:31:43,411 - DEBUG - on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,411 - DEBUG - on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,412 - DEBUG - on stmt: $128return_value.7 = cast(value=$126call_method.6)
2025-01-31 15:31:43,412 - DEBUG - on stmt: return $128return_value.7
2025-01-31 15:31:43,412 - DEBUG - ==== SSA block analysis pass on 130
2025-01-31 15:31:43,412 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e895b1c0>
2025-01-31 15:31:43,412 - DEBUG - on stmt: $const132.1 = const(int, 0)
2025-01-31 15:31:43,412 - DEBUG - on stmt: $134compare_op.2 = exp != $const132.1
2025-01-31 15:31:43,412 - DEBUG - on stmt: bool136 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,412 - DEBUG - on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,412 - DEBUG - on stmt: branch $136pred, 138, 178
2025-01-31 15:31:43,412 - DEBUG - ==== SSA block analysis pass on 138
2025-01-31 15:31:43,412 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e895b1c0>
2025-01-31 15:31:43,412 - DEBUG - on stmt: $const140.1 = const(int, 1)
2025-01-31 15:31:43,412 - DEBUG - on stmt: $142binary_and.2 = exp & $const140.1
2025-01-31 15:31:43,412 - DEBUG - on stmt: bool144 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,412 - DEBUG - on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,412 - DEBUG - on stmt: branch $144pred, 146, 154
2025-01-31 15:31:43,412 - DEBUG - ==== SSA block analysis pass on 146
2025-01-31 15:31:43,412 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e895b1c0>
2025-01-31 15:31:43,412 - DEBUG - on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,412 - DEBUG - on stmt: r = $150inplace_multiply.2
2025-01-31 15:31:43,412 - DEBUG - on stmt: jump 154
2025-01-31 15:31:43,412 - DEBUG - ==== SSA block analysis pass on 154
2025-01-31 15:31:43,412 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e895b1c0>
2025-01-31 15:31:43,412 - DEBUG - on stmt: $const156.1 = const(int, 1)
2025-01-31 15:31:43,412 - DEBUG - on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,412 - DEBUG - on stmt: exp = $158inplace_rshift.2
2025-01-31 15:31:43,413 - DEBUG - on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,413 - DEBUG - on stmt: a.1 = $166inplace_multiply.5
2025-01-31 15:31:43,413 - DEBUG - on stmt: $const172.7 = const(int, 0)
2025-01-31 15:31:43,413 - DEBUG - on stmt: $174compare_op.8 = exp != $const172.7
2025-01-31 15:31:43,413 - DEBUG - on stmt: bool176 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,413 - DEBUG - on stmt: $176pred = call bool176($174compare_op.8, func=bool176, args=(Var($174compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,413 - DEBUG - on stmt: branch $176pred, 138, 178
2025-01-31 15:31:43,413 - DEBUG - ==== SSA block analysis pass on 178
2025-01-31 15:31:43,413 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e895b1c0>
2025-01-31 15:31:43,413 - DEBUG - on stmt: bool180 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,413 - DEBUG - on stmt: $180pred = call bool180(invert, func=bool180, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,413 - DEBUG - on stmt: branch $180pred, 182, 190
2025-01-31 15:31:43,413 - DEBUG - ==== SSA block analysis pass on 182
2025-01-31 15:31:43,413 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e895b1c0>
2025-01-31 15:31:43,413 - DEBUG - on stmt: $const182.0 = const(float, 1.0)
2025-01-31 15:31:43,413 - DEBUG - on stmt: $186binary_true_divide.2 = $const182.0 / r
2025-01-31 15:31:43,413 - DEBUG - on stmt: $188return_value.3 = cast(value=$186binary_true_divide.2)
2025-01-31 15:31:43,413 - DEBUG - on stmt: return $188return_value.3
2025-01-31 15:31:43,413 - DEBUG - ==== SSA block analysis pass on 190
2025-01-31 15:31:43,413 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e895b1c0>
2025-01-31 15:31:43,413 - DEBUG - on stmt: $192return_value.1 = cast(value=r)
2025-01-31 15:31:43,413 - DEBUG - on stmt: return $192return_value.1
2025-01-31 15:31:43,414 - DEBUG - defs defaultdict(<class 'list'>,
            {'$10load_deref.3': [(<numba.core.ir.Assign object at 0x7c89e895b940>,
                                  0)],
             '$110compare_op.2': [(<numba.core.ir.Assign object at 0x7c89e855c550>,
                                   106)],
             '$112pred': [(<numba.core.ir.Assign object at 0x7c89e855d0c0>,
                           106)],
             '$114load_global.0': [(<numba.core.ir.Assign object at 0x7c89e855d8a0>,
                                    114)],
             '$116load_method.1': [(<numba.core.ir.Assign object at 0x7c89e855d600>,
                                    114)],
             '$120load_global.3': [(<numba.core.ir.Assign object at 0x7c89e855db40>,
                                    114)],
             '$124call_function.5': [(<numba.core.ir.Assign object at 0x7c89e855d300>,
                                      114)],
             '$126call_method.6': [(<numba.core.ir.Assign object at 0x7c89e855d210>,
                                    114)],
             '$128return_value.7': [(<numba.core.ir.Assign object at 0x7c89e855dde0>,
                                     114)],
             '$134compare_op.2': [(<numba.core.ir.Assign object at 0x7c89e855e3b0>,
                                   130)],
             '$136pred': [(<numba.core.ir.Assign object at 0x7c89e855e620>,
                           130)],
             '$142binary_and.2': [(<numba.core.ir.Assign object at 0x7c89e855ec80>,
                                   138)],
             '$144pred': [(<numba.core.ir.Assign object at 0x7c89e855eb30>,
                           138)],
             '$150inplace_multiply.2': [(<numba.core.ir.Assign object at 0x7c89e855f2e0>,
                                         146)],
             '$158inplace_rshift.2': [(<numba.core.ir.Assign object at 0x7c89e855d750>,
                                       154)],
             '$166inplace_multiply.5': [(<numba.core.ir.Assign object at 0x7c89e822bd90>,
                                         154)],
             '$174compare_op.8': [(<numba.core.ir.Assign object at 0x7c89e8229ae0>,
                                   154)],
             '$176pred': [(<numba.core.ir.Assign object at 0x7c89e822a0e0>,
                           154)],
             '$180pred': [(<numba.core.ir.Assign object at 0x7c89e82fdff0>,
                           178)],
             '$186binary_true_divide.2': [(<numba.core.ir.Assign object at 0x7c89e8942320>,
                                           182)],
             '$188return_value.3': [(<numba.core.ir.Assign object at 0x7c89e8943400>,
                                     182)],
             '$192return_value.1': [(<numba.core.ir.Assign object at 0x7c89e89405e0>,
                                     190)],
             '$22compare_op.8': [(<numba.core.ir.Assign object at 0x7c89e8959960>,
                                  0)],
             '$24pred': [(<numba.core.ir.Assign object at 0x7c89e8959780>, 0)],
             '$2load_deref.0': [(<numba.core.ir.Assign object at 0x7c89e8958ee0>,
                                 0)],
             '$40compare_op.5': [(<numba.core.ir.Assign object at 0x7c89e895bd90>,
                                  26)],
             '$42pred': [(<numba.core.ir.Assign object at 0x7c89e895a9e0>, 26)],
             '$44load_global.0': [(<numba.core.ir.Assign object at 0x7c89e8959360>,
                                   44)],
             '$48load_deref.0': [(<numba.core.ir.Assign object at 0x7c89e87a4640>,
                                  48)],
             '$50pred': [(<numba.core.ir.Assign object at 0x7c89e87a77c0>, 48)],
             '$const108.1': [(<numba.core.ir.Assign object at 0x7c89e855c670>,
                              106)],
             '$const132.1': [(<numba.core.ir.Assign object at 0x7c89e855cf10>,
                              130)],
             '$const140.1': [(<numba.core.ir.Assign object at 0x7c89e855ed70>,
                              138)],
             '$const156.1': [(<numba.core.ir.Assign object at 0x7c89e855fbe0>,
                              154)],
             '$const172.7': [(<numba.core.ir.Assign object at 0x7c89e8229300>,
                              154)],
             '$const182.0': [(<numba.core.ir.Assign object at 0x7c89e8940220>,
                              182)],
             '$const20.7': [(<numba.core.ir.Assign object at 0x7c89e895a050>,
                             0)],
             '$const38.4': [(<numba.core.ir.Assign object at 0x7c89e89590c0>,
                             26)],
             '$const4.1': [(<numba.core.ir.Assign object at 0x7c89e895b760>,
                            0)],
             'a': [(<numba.core.ir.Assign object at 0x7c89e895a950>, 0)],
             'a.1': [(<numba.core.ir.Assign object at 0x7c89e895a200>, 0),
                     (<numba.core.ir.Assign object at 0x7c89e822b160>, 154)],
             'b': [(<numba.core.ir.Assign object at 0x7c89e8958100>, 0)],
             'bool112': [(<numba.core.ir.Assign object at 0x7c89e855c340>,
                          106)],
             'bool136': [(<numba.core.ir.Assign object at 0x7c89e855e440>,
                          130)],
             'bool144': [(<numba.core.ir.Assign object at 0x7c89e855eaa0>,
                          138)],
             'bool176': [(<numba.core.ir.Assign object at 0x7c89e82282e0>,
                          154)],
             'bool180': [(<numba.core.ir.Assign object at 0x7c89e82fd420>,
                          178)],
             'bool24': [(<numba.core.ir.Assign object at 0x7c89e8959f00>, 0)],
             'bool42': [(<numba.core.ir.Assign object at 0x7c89e89594b0>, 26)],
             'bool50': [(<numba.core.ir.Assign object at 0x7c89e87a7940>, 48)],
             'exp': [(<numba.core.ir.Assign object at 0x7c89e895ba00>, 26),
                     (<numba.core.ir.Assign object at 0x7c89e855cbe0>, 98),
                     (<numba.core.ir.Assign object at 0x7c89e8263640>, 154)],
             'invert': [(<numba.core.ir.Assign object at 0x7c89e89596f0>, 26),
                        (<numba.core.ir.Assign object at 0x7c89e855cc40>, 98)],
             'r': [(<numba.core.ir.Assign object at 0x7c89e895b550>, 0),
                   (<numba.core.ir.Assign object at 0x7c89e855f010>, 146)]})
2025-01-31 15:31:43,414 - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x7c89e895b1c0>
2025-01-31 15:31:43,414 - DEBUG - Fix SSA violator on var r
2025-01-31 15:31:43,414 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-31 15:31:43,415 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871f4f0>
2025-01-31 15:31:43,415 - DEBUG - on stmt: a = arg(0, name=a)
2025-01-31 15:31:43,415 - DEBUG - on stmt: b = arg(1, name=b)
2025-01-31 15:31:43,415 - DEBUG - on stmt: $2load_deref.0 = freevar(tp: float32)
2025-01-31 15:31:43,415 - DEBUG - on stmt: $const4.1 = const(int, 1)
2025-01-31 15:31:43,415 - DEBUG - on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,415 - DEBUG - first assign: r
2025-01-31 15:31:43,415 - DEBUG - replaced with: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,415 - DEBUG - on stmt: $10load_deref.3 = freevar(tp: float32)
2025-01-31 15:31:43,415 - DEBUG - on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,415 - DEBUG - on stmt: $const20.7 = const(int, 0)
2025-01-31 15:31:43,415 - DEBUG - on stmt: $22compare_op.8 = b < $const20.7
2025-01-31 15:31:43,415 - DEBUG - on stmt: bool24 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,415 - DEBUG - on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,415 - DEBUG - on stmt: branch $24pred, 26, 98
2025-01-31 15:31:43,415 - DEBUG - ==== SSA block rewrite pass on 26
2025-01-31 15:31:43,415 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871f4f0>
2025-01-31 15:31:43,415 - DEBUG - on stmt: invert = const(bool, True)
2025-01-31 15:31:43,415 - DEBUG - on stmt: exp = unary(fn=<built-in function neg>, value=b)
2025-01-31 15:31:43,415 - DEBUG - on stmt: $const38.4 = const(int, 0)
2025-01-31 15:31:43,415 - DEBUG - on stmt: $40compare_op.5 = exp < $const38.4
2025-01-31 15:31:43,415 - DEBUG - on stmt: bool42 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,415 - DEBUG - on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,415 - DEBUG - on stmt: branch $42pred, 44, 48
2025-01-31 15:31:43,415 - DEBUG - ==== SSA block rewrite pass on 44
2025-01-31 15:31:43,415 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871f4f0>
2025-01-31 15:31:43,415 - DEBUG - on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
2025-01-31 15:31:43,416 - DEBUG - on stmt: <static> raise <class 'OverflowError'>
2025-01-31 15:31:43,416 - DEBUG - ==== SSA block rewrite pass on 48
2025-01-31 15:31:43,416 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871f4f0>
2025-01-31 15:31:43,416 - DEBUG - on stmt: $48load_deref.0 = freevar(is_integer: False)
2025-01-31 15:31:43,416 - DEBUG - on stmt: bool50 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,416 - DEBUG - on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,416 - DEBUG - on stmt: jump 96
2025-01-31 15:31:43,416 - DEBUG - ==== SSA block rewrite pass on 96
2025-01-31 15:31:43,416 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871f4f0>
2025-01-31 15:31:43,416 - DEBUG - on stmt: jump 106
2025-01-31 15:31:43,416 - DEBUG - ==== SSA block rewrite pass on 98
2025-01-31 15:31:43,416 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871f4f0>
2025-01-31 15:31:43,416 - DEBUG - on stmt: invert = const(bool, False)
2025-01-31 15:31:43,416 - DEBUG - on stmt: exp = b
2025-01-31 15:31:43,416 - DEBUG - on stmt: jump 106
2025-01-31 15:31:43,416 - DEBUG - ==== SSA block rewrite pass on 106
2025-01-31 15:31:43,416 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871f4f0>
2025-01-31 15:31:43,416 - DEBUG - on stmt: $const108.1 = const(int, 65536)
2025-01-31 15:31:43,416 - DEBUG - on stmt: $110compare_op.2 = exp > $const108.1
2025-01-31 15:31:43,416 - DEBUG - on stmt: bool112 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,416 - DEBUG - on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,416 - DEBUG - on stmt: branch $112pred, 114, 130
2025-01-31 15:31:43,416 - DEBUG - ==== SSA block rewrite pass on 114
2025-01-31 15:31:43,416 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871f4f0>
2025-01-31 15:31:43,416 - DEBUG - on stmt: $114load_global.0 = global(math: <module 'math' from '/home/strain/miniconda3/envs/applio/lib/python3.10/lib-dynload/math.cpython-310-x86_64-linux-gnu.so'>)
2025-01-31 15:31:43,416 - DEBUG - on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
2025-01-31 15:31:43,416 - DEBUG - on stmt: $120load_global.3 = global(float: <class 'float'>)
2025-01-31 15:31:43,416 - DEBUG - on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,416 - DEBUG - on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,417 - DEBUG - on stmt: $128return_value.7 = cast(value=$126call_method.6)
2025-01-31 15:31:43,417 - DEBUG - on stmt: return $128return_value.7
2025-01-31 15:31:43,417 - DEBUG - ==== SSA block rewrite pass on 130
2025-01-31 15:31:43,417 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871f4f0>
2025-01-31 15:31:43,417 - DEBUG - on stmt: $const132.1 = const(int, 0)
2025-01-31 15:31:43,417 - DEBUG - on stmt: $134compare_op.2 = exp != $const132.1
2025-01-31 15:31:43,417 - DEBUG - on stmt: bool136 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,417 - DEBUG - on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,417 - DEBUG - on stmt: branch $136pred, 138, 178
2025-01-31 15:31:43,417 - DEBUG - ==== SSA block rewrite pass on 138
2025-01-31 15:31:43,417 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871f4f0>
2025-01-31 15:31:43,417 - DEBUG - on stmt: $const140.1 = const(int, 1)
2025-01-31 15:31:43,417 - DEBUG - on stmt: $142binary_and.2 = exp & $const140.1
2025-01-31 15:31:43,417 - DEBUG - on stmt: bool144 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,417 - DEBUG - on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,417 - DEBUG - on stmt: branch $144pred, 146, 154
2025-01-31 15:31:43,417 - DEBUG - ==== SSA block rewrite pass on 146
2025-01-31 15:31:43,417 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871f4f0>
2025-01-31 15:31:43,417 - DEBUG - on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,417 - DEBUG - on stmt: r = $150inplace_multiply.2
2025-01-31 15:31:43,417 - DEBUG - replaced with: r.1 = $150inplace_multiply.2
2025-01-31 15:31:43,417 - DEBUG - on stmt: jump 154
2025-01-31 15:31:43,417 - DEBUG - ==== SSA block rewrite pass on 154
2025-01-31 15:31:43,417 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871f4f0>
2025-01-31 15:31:43,417 - DEBUG - on stmt: $const156.1 = const(int, 1)
2025-01-31 15:31:43,417 - DEBUG - on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,417 - DEBUG - on stmt: exp = $158inplace_rshift.2
2025-01-31 15:31:43,417 - DEBUG - on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,417 - DEBUG - on stmt: a.1 = $166inplace_multiply.5
2025-01-31 15:31:43,418 - DEBUG - on stmt: $const172.7 = const(int, 0)
2025-01-31 15:31:43,418 - DEBUG - on stmt: $174compare_op.8 = exp != $const172.7
2025-01-31 15:31:43,418 - DEBUG - on stmt: bool176 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,418 - DEBUG - on stmt: $176pred = call bool176($174compare_op.8, func=bool176, args=(Var($174compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,418 - DEBUG - on stmt: branch $176pred, 138, 178
2025-01-31 15:31:43,418 - DEBUG - ==== SSA block rewrite pass on 178
2025-01-31 15:31:43,418 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871f4f0>
2025-01-31 15:31:43,418 - DEBUG - on stmt: bool180 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,418 - DEBUG - on stmt: $180pred = call bool180(invert, func=bool180, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,418 - DEBUG - on stmt: branch $180pred, 182, 190
2025-01-31 15:31:43,418 - DEBUG - ==== SSA block rewrite pass on 182
2025-01-31 15:31:43,418 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871f4f0>
2025-01-31 15:31:43,418 - DEBUG - on stmt: $const182.0 = const(float, 1.0)
2025-01-31 15:31:43,418 - DEBUG - on stmt: $186binary_true_divide.2 = $const182.0 / r
2025-01-31 15:31:43,418 - DEBUG - on stmt: $188return_value.3 = cast(value=$186binary_true_divide.2)
2025-01-31 15:31:43,418 - DEBUG - on stmt: return $188return_value.3
2025-01-31 15:31:43,418 - DEBUG - ==== SSA block rewrite pass on 190
2025-01-31 15:31:43,418 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871f4f0>
2025-01-31 15:31:43,418 - DEBUG - on stmt: $192return_value.1 = cast(value=r)
2025-01-31 15:31:43,418 - DEBUG - on stmt: return $192return_value.1
2025-01-31 15:31:43,418 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7c89e871dc00>],
             146: [<numba.core.ir.Assign object at 0x7c89e8942e00>]})
2025-01-31 15:31:43,418 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-31 15:31:43,418 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871f4f0>
2025-01-31 15:31:43,418 - DEBUG - on stmt: a = arg(0, name=a)
2025-01-31 15:31:43,418 - DEBUG - on stmt: b = arg(1, name=b)
2025-01-31 15:31:43,418 - DEBUG - on stmt: $2load_deref.0 = freevar(tp: float32)
2025-01-31 15:31:43,418 - DEBUG - on stmt: $const4.1 = const(int, 1)
2025-01-31 15:31:43,418 - DEBUG - on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,419 - DEBUG - on stmt: $10load_deref.3 = freevar(tp: float32)
2025-01-31 15:31:43,419 - DEBUG - on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,419 - DEBUG - on stmt: $const20.7 = const(int, 0)
2025-01-31 15:31:43,419 - DEBUG - on stmt: $22compare_op.8 = b < $const20.7
2025-01-31 15:31:43,419 - DEBUG - on stmt: bool24 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,419 - DEBUG - on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,419 - DEBUG - on stmt: branch $24pred, 26, 98
2025-01-31 15:31:43,419 - DEBUG - ==== SSA block rewrite pass on 26
2025-01-31 15:31:43,419 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871f4f0>
2025-01-31 15:31:43,419 - DEBUG - on stmt: invert = const(bool, True)
2025-01-31 15:31:43,419 - DEBUG - on stmt: exp = unary(fn=<built-in function neg>, value=b)
2025-01-31 15:31:43,419 - DEBUG - on stmt: $const38.4 = const(int, 0)
2025-01-31 15:31:43,419 - DEBUG - on stmt: $40compare_op.5 = exp < $const38.4
2025-01-31 15:31:43,419 - DEBUG - on stmt: bool42 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,419 - DEBUG - on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,419 - DEBUG - on stmt: branch $42pred, 44, 48
2025-01-31 15:31:43,419 - DEBUG - ==== SSA block rewrite pass on 44
2025-01-31 15:31:43,419 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871f4f0>
2025-01-31 15:31:43,419 - DEBUG - on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
2025-01-31 15:31:43,419 - DEBUG - on stmt: <static> raise <class 'OverflowError'>
2025-01-31 15:31:43,419 - DEBUG - ==== SSA block rewrite pass on 48
2025-01-31 15:31:43,419 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871f4f0>
2025-01-31 15:31:43,419 - DEBUG - on stmt: $48load_deref.0 = freevar(is_integer: False)
2025-01-31 15:31:43,419 - DEBUG - on stmt: bool50 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,419 - DEBUG - on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,420 - DEBUG - on stmt: jump 96
2025-01-31 15:31:43,420 - DEBUG - ==== SSA block rewrite pass on 96
2025-01-31 15:31:43,420 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871f4f0>
2025-01-31 15:31:43,420 - DEBUG - on stmt: jump 106
2025-01-31 15:31:43,420 - DEBUG - ==== SSA block rewrite pass on 98
2025-01-31 15:31:43,420 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871f4f0>
2025-01-31 15:31:43,420 - DEBUG - on stmt: invert = const(bool, False)
2025-01-31 15:31:43,420 - DEBUG - on stmt: exp = b
2025-01-31 15:31:43,420 - DEBUG - on stmt: jump 106
2025-01-31 15:31:43,420 - DEBUG - ==== SSA block rewrite pass on 106
2025-01-31 15:31:43,420 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871f4f0>
2025-01-31 15:31:43,420 - DEBUG - on stmt: $const108.1 = const(int, 65536)
2025-01-31 15:31:43,420 - DEBUG - on stmt: $110compare_op.2 = exp > $const108.1
2025-01-31 15:31:43,420 - DEBUG - on stmt: bool112 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,420 - DEBUG - on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,420 - DEBUG - on stmt: branch $112pred, 114, 130
2025-01-31 15:31:43,420 - DEBUG - ==== SSA block rewrite pass on 114
2025-01-31 15:31:43,420 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871f4f0>
2025-01-31 15:31:43,420 - DEBUG - on stmt: $114load_global.0 = global(math: <module 'math' from '/home/strain/miniconda3/envs/applio/lib/python3.10/lib-dynload/math.cpython-310-x86_64-linux-gnu.so'>)
2025-01-31 15:31:43,420 - DEBUG - on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
2025-01-31 15:31:43,420 - DEBUG - on stmt: $120load_global.3 = global(float: <class 'float'>)
2025-01-31 15:31:43,420 - DEBUG - on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,420 - DEBUG - on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,420 - DEBUG - on stmt: $128return_value.7 = cast(value=$126call_method.6)
2025-01-31 15:31:43,420 - DEBUG - on stmt: return $128return_value.7
2025-01-31 15:31:43,420 - DEBUG - ==== SSA block rewrite pass on 130
2025-01-31 15:31:43,420 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871f4f0>
2025-01-31 15:31:43,421 - DEBUG - on stmt: $const132.1 = const(int, 0)
2025-01-31 15:31:43,421 - DEBUG - on stmt: $134compare_op.2 = exp != $const132.1
2025-01-31 15:31:43,421 - DEBUG - on stmt: bool136 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,421 - DEBUG - on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,421 - DEBUG - on stmt: branch $136pred, 138, 178
2025-01-31 15:31:43,421 - DEBUG - ==== SSA block rewrite pass on 138
2025-01-31 15:31:43,421 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871f4f0>
2025-01-31 15:31:43,421 - DEBUG - on stmt: $const140.1 = const(int, 1)
2025-01-31 15:31:43,421 - DEBUG - on stmt: $142binary_and.2 = exp & $const140.1
2025-01-31 15:31:43,421 - DEBUG - on stmt: bool144 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,421 - DEBUG - on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,421 - DEBUG - on stmt: branch $144pred, 146, 154
2025-01-31 15:31:43,421 - DEBUG - ==== SSA block rewrite pass on 146
2025-01-31 15:31:43,421 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871f4f0>
2025-01-31 15:31:43,421 - DEBUG - on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,421 - DEBUG - find_def var='r' stmt=$150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,421 - DEBUG - find_def_from_top label 146
2025-01-31 15:31:43,421 - DEBUG - idom 138 from label 146
2025-01-31 15:31:43,421 - DEBUG - find_def_from_bottom label 138
2025-01-31 15:31:43,421 - DEBUG - find_def_from_top label 138
2025-01-31 15:31:43,421 - DEBUG - insert phi node r.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
2025-01-31 15:31:43,421 - DEBUG - find_def_from_bottom label 130
2025-01-31 15:31:43,421 - DEBUG - find_def_from_top label 130
2025-01-31 15:31:43,421 - DEBUG - idom 106 from label 130
2025-01-31 15:31:43,421 - DEBUG - find_def_from_bottom label 106
2025-01-31 15:31:43,421 - DEBUG - find_def_from_top label 106
2025-01-31 15:31:43,421 - DEBUG - idom 0 from label 106
2025-01-31 15:31:43,421 - DEBUG - find_def_from_bottom label 0
2025-01-31 15:31:43,422 - DEBUG - incoming_def r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,422 - DEBUG - find_def_from_bottom label 154
2025-01-31 15:31:43,422 - DEBUG - find_def_from_top label 154
2025-01-31 15:31:43,422 - DEBUG - insert phi node r.3 = phi(incoming_values=[], incoming_blocks=[]) at 154
2025-01-31 15:31:43,422 - DEBUG - find_def_from_bottom label 138
2025-01-31 15:31:43,422 - DEBUG - incoming_def r.2 = phi(incoming_values=[Var(r, numbers.py:216)], incoming_blocks=[130])
2025-01-31 15:31:43,422 - DEBUG - find_def_from_bottom label 146
2025-01-31 15:31:43,422 - DEBUG - incoming_def r.1 = $150inplace_multiply.2
2025-01-31 15:31:43,422 - DEBUG - incoming_def r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
2025-01-31 15:31:43,422 - DEBUG - replaced with: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,422 - DEBUG - on stmt: r.1 = $150inplace_multiply.2
2025-01-31 15:31:43,422 - DEBUG - on stmt: jump 154
2025-01-31 15:31:43,422 - DEBUG - ==== SSA block rewrite pass on 154
2025-01-31 15:31:43,422 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871f4f0>
2025-01-31 15:31:43,422 - DEBUG - on stmt: $const156.1 = const(int, 1)
2025-01-31 15:31:43,422 - DEBUG - on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,422 - DEBUG - on stmt: exp = $158inplace_rshift.2
2025-01-31 15:31:43,422 - DEBUG - on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,422 - DEBUG - on stmt: a.1 = $166inplace_multiply.5
2025-01-31 15:31:43,422 - DEBUG - on stmt: $const172.7 = const(int, 0)
2025-01-31 15:31:43,422 - DEBUG - on stmt: $174compare_op.8 = exp != $const172.7
2025-01-31 15:31:43,422 - DEBUG - on stmt: bool176 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,422 - DEBUG - on stmt: $176pred = call bool176($174compare_op.8, func=bool176, args=(Var($174compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,422 - DEBUG - on stmt: branch $176pred, 138, 178
2025-01-31 15:31:43,422 - DEBUG - ==== SSA block rewrite pass on 178
2025-01-31 15:31:43,422 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871f4f0>
2025-01-31 15:31:43,423 - DEBUG - on stmt: bool180 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,423 - DEBUG - on stmt: $180pred = call bool180(invert, func=bool180, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,423 - DEBUG - on stmt: branch $180pred, 182, 190
2025-01-31 15:31:43,423 - DEBUG - ==== SSA block rewrite pass on 182
2025-01-31 15:31:43,423 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871f4f0>
2025-01-31 15:31:43,423 - DEBUG - on stmt: $const182.0 = const(float, 1.0)
2025-01-31 15:31:43,423 - DEBUG - on stmt: $186binary_true_divide.2 = $const182.0 / r
2025-01-31 15:31:43,423 - DEBUG - find_def var='r' stmt=$186binary_true_divide.2 = $const182.0 / r
2025-01-31 15:31:43,423 - DEBUG - find_def_from_top label 182
2025-01-31 15:31:43,423 - DEBUG - idom 178 from label 182
2025-01-31 15:31:43,423 - DEBUG - find_def_from_bottom label 178
2025-01-31 15:31:43,423 - DEBUG - find_def_from_top label 178
2025-01-31 15:31:43,423 - DEBUG - insert phi node r.4 = phi(incoming_values=[], incoming_blocks=[]) at 178
2025-01-31 15:31:43,423 - DEBUG - find_def_from_bottom label 130
2025-01-31 15:31:43,423 - DEBUG - find_def_from_top label 130
2025-01-31 15:31:43,423 - DEBUG - idom 106 from label 130
2025-01-31 15:31:43,423 - DEBUG - find_def_from_bottom label 106
2025-01-31 15:31:43,423 - DEBUG - find_def_from_top label 106
2025-01-31 15:31:43,423 - DEBUG - idom 0 from label 106
2025-01-31 15:31:43,423 - DEBUG - find_def_from_bottom label 0
2025-01-31 15:31:43,423 - DEBUG - incoming_def r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,423 - DEBUG - find_def_from_bottom label 154
2025-01-31 15:31:43,423 - DEBUG - incoming_def r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
2025-01-31 15:31:43,423 - DEBUG - replaced with: $186binary_true_divide.2 = $const182.0 / r.4
2025-01-31 15:31:43,423 - DEBUG - on stmt: $188return_value.3 = cast(value=$186binary_true_divide.2)
2025-01-31 15:31:43,423 - DEBUG - on stmt: return $188return_value.3
2025-01-31 15:31:43,423 - DEBUG - ==== SSA block rewrite pass on 190
2025-01-31 15:31:43,423 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871f4f0>
2025-01-31 15:31:43,424 - DEBUG - on stmt: $192return_value.1 = cast(value=r)
2025-01-31 15:31:43,424 - DEBUG - find_def var='r' stmt=$192return_value.1 = cast(value=r)
2025-01-31 15:31:43,424 - DEBUG - find_def_from_top label 190
2025-01-31 15:31:43,424 - DEBUG - idom 178 from label 190
2025-01-31 15:31:43,424 - DEBUG - find_def_from_bottom label 178
2025-01-31 15:31:43,424 - DEBUG - replaced with: $192return_value.1 = cast(value=r.4)
2025-01-31 15:31:43,424 - DEBUG - on stmt: return $192return_value.1
2025-01-31 15:31:43,424 - DEBUG - Fix SSA violator on var a.1
2025-01-31 15:31:43,424 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-31 15:31:43,424 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871e5c0>
2025-01-31 15:31:43,424 - DEBUG - on stmt: a = arg(0, name=a)
2025-01-31 15:31:43,424 - DEBUG - on stmt: b = arg(1, name=b)
2025-01-31 15:31:43,424 - DEBUG - on stmt: $2load_deref.0 = freevar(tp: float32)
2025-01-31 15:31:43,424 - DEBUG - on stmt: $const4.1 = const(int, 1)
2025-01-31 15:31:43,424 - DEBUG - on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,424 - DEBUG - on stmt: $10load_deref.3 = freevar(tp: float32)
2025-01-31 15:31:43,424 - DEBUG - on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,424 - DEBUG - first assign: a.1
2025-01-31 15:31:43,424 - DEBUG - replaced with: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,424 - DEBUG - on stmt: $const20.7 = const(int, 0)
2025-01-31 15:31:43,424 - DEBUG - on stmt: $22compare_op.8 = b < $const20.7
2025-01-31 15:31:43,424 - DEBUG - on stmt: bool24 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,424 - DEBUG - on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,424 - DEBUG - on stmt: branch $24pred, 26, 98
2025-01-31 15:31:43,424 - DEBUG - ==== SSA block rewrite pass on 26
2025-01-31 15:31:43,424 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871e5c0>
2025-01-31 15:31:43,424 - DEBUG - on stmt: invert = const(bool, True)
2025-01-31 15:31:43,425 - DEBUG - on stmt: exp = unary(fn=<built-in function neg>, value=b)
2025-01-31 15:31:43,425 - DEBUG - on stmt: $const38.4 = const(int, 0)
2025-01-31 15:31:43,425 - DEBUG - on stmt: $40compare_op.5 = exp < $const38.4
2025-01-31 15:31:43,425 - DEBUG - on stmt: bool42 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,425 - DEBUG - on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,425 - DEBUG - on stmt: branch $42pred, 44, 48
2025-01-31 15:31:43,425 - DEBUG - ==== SSA block rewrite pass on 44
2025-01-31 15:31:43,425 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871e5c0>
2025-01-31 15:31:43,425 - DEBUG - on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
2025-01-31 15:31:43,425 - DEBUG - on stmt: <static> raise <class 'OverflowError'>
2025-01-31 15:31:43,425 - DEBUG - ==== SSA block rewrite pass on 48
2025-01-31 15:31:43,425 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871e5c0>
2025-01-31 15:31:43,425 - DEBUG - on stmt: $48load_deref.0 = freevar(is_integer: False)
2025-01-31 15:31:43,425 - DEBUG - on stmt: bool50 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,425 - DEBUG - on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,425 - DEBUG - on stmt: jump 96
2025-01-31 15:31:43,425 - DEBUG - ==== SSA block rewrite pass on 96
2025-01-31 15:31:43,425 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871e5c0>
2025-01-31 15:31:43,425 - DEBUG - on stmt: jump 106
2025-01-31 15:31:43,425 - DEBUG - ==== SSA block rewrite pass on 98
2025-01-31 15:31:43,425 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871e5c0>
2025-01-31 15:31:43,425 - DEBUG - on stmt: invert = const(bool, False)
2025-01-31 15:31:43,425 - DEBUG - on stmt: exp = b
2025-01-31 15:31:43,425 - DEBUG - on stmt: jump 106
2025-01-31 15:31:43,425 - DEBUG - ==== SSA block rewrite pass on 106
2025-01-31 15:31:43,425 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871e5c0>
2025-01-31 15:31:43,425 - DEBUG - on stmt: $const108.1 = const(int, 65536)
2025-01-31 15:31:43,425 - DEBUG - on stmt: $110compare_op.2 = exp > $const108.1
2025-01-31 15:31:43,425 - DEBUG - on stmt: bool112 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,425 - DEBUG - on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,426 - DEBUG - on stmt: branch $112pred, 114, 130
2025-01-31 15:31:43,426 - DEBUG - ==== SSA block rewrite pass on 114
2025-01-31 15:31:43,426 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871e5c0>
2025-01-31 15:31:43,426 - DEBUG - on stmt: $114load_global.0 = global(math: <module 'math' from '/home/strain/miniconda3/envs/applio/lib/python3.10/lib-dynload/math.cpython-310-x86_64-linux-gnu.so'>)
2025-01-31 15:31:43,426 - DEBUG - on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
2025-01-31 15:31:43,426 - DEBUG - on stmt: $120load_global.3 = global(float: <class 'float'>)
2025-01-31 15:31:43,426 - DEBUG - on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,426 - DEBUG - on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,426 - DEBUG - on stmt: $128return_value.7 = cast(value=$126call_method.6)
2025-01-31 15:31:43,426 - DEBUG - on stmt: return $128return_value.7
2025-01-31 15:31:43,426 - DEBUG - ==== SSA block rewrite pass on 130
2025-01-31 15:31:43,426 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871e5c0>
2025-01-31 15:31:43,426 - DEBUG - on stmt: $const132.1 = const(int, 0)
2025-01-31 15:31:43,426 - DEBUG - on stmt: $134compare_op.2 = exp != $const132.1
2025-01-31 15:31:43,426 - DEBUG - on stmt: bool136 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,426 - DEBUG - on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,426 - DEBUG - on stmt: branch $136pred, 138, 178
2025-01-31 15:31:43,426 - DEBUG - ==== SSA block rewrite pass on 138
2025-01-31 15:31:43,426 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871e5c0>
2025-01-31 15:31:43,426 - DEBUG - on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[130, 154])
2025-01-31 15:31:43,426 - DEBUG - on stmt: $const140.1 = const(int, 1)
2025-01-31 15:31:43,426 - DEBUG - on stmt: $142binary_and.2 = exp & $const140.1
2025-01-31 15:31:43,426 - DEBUG - on stmt: bool144 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,426 - DEBUG - on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,426 - DEBUG - on stmt: branch $144pred, 146, 154
2025-01-31 15:31:43,426 - DEBUG - ==== SSA block rewrite pass on 146
2025-01-31 15:31:43,426 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871e5c0>
2025-01-31 15:31:43,426 - DEBUG - on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,427 - DEBUG - on stmt: r.1 = $150inplace_multiply.2
2025-01-31 15:31:43,427 - DEBUG - on stmt: jump 154
2025-01-31 15:31:43,427 - DEBUG - ==== SSA block rewrite pass on 154
2025-01-31 15:31:43,427 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871e5c0>
2025-01-31 15:31:43,427 - DEBUG - on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
2025-01-31 15:31:43,427 - DEBUG - on stmt: $const156.1 = const(int, 1)
2025-01-31 15:31:43,427 - DEBUG - on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,427 - DEBUG - on stmt: exp = $158inplace_rshift.2
2025-01-31 15:31:43,427 - DEBUG - on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,427 - DEBUG - on stmt: a.1 = $166inplace_multiply.5
2025-01-31 15:31:43,427 - DEBUG - replaced with: a.1.1 = $166inplace_multiply.5
2025-01-31 15:31:43,427 - DEBUG - on stmt: $const172.7 = const(int, 0)
2025-01-31 15:31:43,427 - DEBUG - on stmt: $174compare_op.8 = exp != $const172.7
2025-01-31 15:31:43,427 - DEBUG - on stmt: bool176 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,427 - DEBUG - on stmt: $176pred = call bool176($174compare_op.8, func=bool176, args=(Var($174compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,427 - DEBUG - on stmt: branch $176pred, 138, 178
2025-01-31 15:31:43,427 - DEBUG - ==== SSA block rewrite pass on 178
2025-01-31 15:31:43,427 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871e5c0>
2025-01-31 15:31:43,427 - DEBUG - on stmt: r.4 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[130, 154])
2025-01-31 15:31:43,427 - DEBUG - on stmt: bool180 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,427 - DEBUG - on stmt: $180pred = call bool180(invert, func=bool180, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,427 - DEBUG - on stmt: branch $180pred, 182, 190
2025-01-31 15:31:43,427 - DEBUG - ==== SSA block rewrite pass on 182
2025-01-31 15:31:43,427 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871e5c0>
2025-01-31 15:31:43,427 - DEBUG - on stmt: $const182.0 = const(float, 1.0)
2025-01-31 15:31:43,427 - DEBUG - on stmt: $186binary_true_divide.2 = $const182.0 / r.4
2025-01-31 15:31:43,427 - DEBUG - on stmt: $188return_value.3 = cast(value=$186binary_true_divide.2)
2025-01-31 15:31:43,427 - DEBUG - on stmt: return $188return_value.3
2025-01-31 15:31:43,428 - DEBUG - ==== SSA block rewrite pass on 190
2025-01-31 15:31:43,428 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871e5c0>
2025-01-31 15:31:43,428 - DEBUG - on stmt: $192return_value.1 = cast(value=r.4)
2025-01-31 15:31:43,428 - DEBUG - on stmt: return $192return_value.1
2025-01-31 15:31:43,428 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7c89e871f340>],
             154: [<numba.core.ir.Assign object at 0x7c89e89418d0>]})
2025-01-31 15:31:43,428 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-31 15:31:43,428 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871f4f0>
2025-01-31 15:31:43,428 - DEBUG - on stmt: a = arg(0, name=a)
2025-01-31 15:31:43,428 - DEBUG - on stmt: b = arg(1, name=b)
2025-01-31 15:31:43,428 - DEBUG - on stmt: $2load_deref.0 = freevar(tp: float32)
2025-01-31 15:31:43,428 - DEBUG - on stmt: $const4.1 = const(int, 1)
2025-01-31 15:31:43,428 - DEBUG - on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,428 - DEBUG - on stmt: $10load_deref.3 = freevar(tp: float32)
2025-01-31 15:31:43,428 - DEBUG - on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,428 - DEBUG - on stmt: $const20.7 = const(int, 0)
2025-01-31 15:31:43,428 - DEBUG - on stmt: $22compare_op.8 = b < $const20.7
2025-01-31 15:31:43,428 - DEBUG - on stmt: bool24 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,428 - DEBUG - on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,428 - DEBUG - on stmt: branch $24pred, 26, 98
2025-01-31 15:31:43,428 - DEBUG - ==== SSA block rewrite pass on 26
2025-01-31 15:31:43,428 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871f4f0>
2025-01-31 15:31:43,428 - DEBUG - on stmt: invert = const(bool, True)
2025-01-31 15:31:43,428 - DEBUG - on stmt: exp = unary(fn=<built-in function neg>, value=b)
2025-01-31 15:31:43,428 - DEBUG - on stmt: $const38.4 = const(int, 0)
2025-01-31 15:31:43,428 - DEBUG - on stmt: $40compare_op.5 = exp < $const38.4
2025-01-31 15:31:43,428 - DEBUG - on stmt: bool42 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,428 - DEBUG - on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,429 - DEBUG - on stmt: branch $42pred, 44, 48
2025-01-31 15:31:43,429 - DEBUG - ==== SSA block rewrite pass on 44
2025-01-31 15:31:43,429 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871f4f0>
2025-01-31 15:31:43,429 - DEBUG - on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
2025-01-31 15:31:43,429 - DEBUG - on stmt: <static> raise <class 'OverflowError'>
2025-01-31 15:31:43,429 - DEBUG - ==== SSA block rewrite pass on 48
2025-01-31 15:31:43,429 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871f4f0>
2025-01-31 15:31:43,429 - DEBUG - on stmt: $48load_deref.0 = freevar(is_integer: False)
2025-01-31 15:31:43,429 - DEBUG - on stmt: bool50 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,429 - DEBUG - on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,429 - DEBUG - on stmt: jump 96
2025-01-31 15:31:43,429 - DEBUG - ==== SSA block rewrite pass on 96
2025-01-31 15:31:43,429 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871f4f0>
2025-01-31 15:31:43,429 - DEBUG - on stmt: jump 106
2025-01-31 15:31:43,429 - DEBUG - ==== SSA block rewrite pass on 98
2025-01-31 15:31:43,429 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871f4f0>
2025-01-31 15:31:43,429 - DEBUG - on stmt: invert = const(bool, False)
2025-01-31 15:31:43,429 - DEBUG - on stmt: exp = b
2025-01-31 15:31:43,429 - DEBUG - on stmt: jump 106
2025-01-31 15:31:43,429 - DEBUG - ==== SSA block rewrite pass on 106
2025-01-31 15:31:43,429 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871f4f0>
2025-01-31 15:31:43,531 - DEBUG - on stmt: $const108.1 = const(int, 65536)
2025-01-31 15:31:43,531 - DEBUG - on stmt: $110compare_op.2 = exp > $const108.1
2025-01-31 15:31:43,531 - DEBUG - on stmt: bool112 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,532 - DEBUG - on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,532 - DEBUG - on stmt: branch $112pred, 114, 130
2025-01-31 15:31:43,532 - DEBUG - ==== SSA block rewrite pass on 114
2025-01-31 15:31:43,532 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871f4f0>
2025-01-31 15:31:43,533 - DEBUG - on stmt: $114load_global.0 = global(math: <module 'math' from '/home/strain/miniconda3/envs/applio/lib/python3.10/lib-dynload/math.cpython-310-x86_64-linux-gnu.so'>)
2025-01-31 15:31:43,533 - DEBUG - on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
2025-01-31 15:31:43,533 - DEBUG - on stmt: $120load_global.3 = global(float: <class 'float'>)
2025-01-31 15:31:43,533 - DEBUG - on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,534 - DEBUG - on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,534 - DEBUG - find_def var='a.1' stmt=$126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,534 - DEBUG - find_def_from_top label 114
2025-01-31 15:31:43,534 - DEBUG - idom 106 from label 114
2025-01-31 15:31:43,534 - DEBUG - find_def_from_bottom label 106
2025-01-31 15:31:43,535 - DEBUG - find_def_from_top label 106
2025-01-31 15:31:43,535 - DEBUG - idom 0 from label 106
2025-01-31 15:31:43,535 - DEBUG - find_def_from_bottom label 0
2025-01-31 15:31:43,535 - DEBUG - on stmt: $128return_value.7 = cast(value=$126call_method.6)
2025-01-31 15:31:43,535 - DEBUG - on stmt: return $128return_value.7
2025-01-31 15:31:43,535 - DEBUG - ==== SSA block rewrite pass on 130
2025-01-31 15:31:43,536 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871f4f0>
2025-01-31 15:31:43,536 - DEBUG - on stmt: $const132.1 = const(int, 0)
2025-01-31 15:31:43,536 - DEBUG - on stmt: $134compare_op.2 = exp != $const132.1
2025-01-31 15:31:43,536 - DEBUG - on stmt: bool136 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,536 - DEBUG - on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,536 - DEBUG - on stmt: branch $136pred, 138, 178
2025-01-31 15:31:43,536 - DEBUG - ==== SSA block rewrite pass on 138
2025-01-31 15:31:43,536 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871f4f0>
2025-01-31 15:31:43,536 - DEBUG - on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[130, 154])
2025-01-31 15:31:43,536 - DEBUG - on stmt: $const140.1 = const(int, 1)
2025-01-31 15:31:43,536 - DEBUG - on stmt: $142binary_and.2 = exp & $const140.1
2025-01-31 15:31:43,536 - DEBUG - on stmt: bool144 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,536 - DEBUG - on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,536 - DEBUG - on stmt: branch $144pred, 146, 154
2025-01-31 15:31:43,536 - DEBUG - ==== SSA block rewrite pass on 146
2025-01-31 15:31:43,536 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871f4f0>
2025-01-31 15:31:43,536 - DEBUG - on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,536 - DEBUG - find_def var='a.1' stmt=$150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,537 - DEBUG - find_def_from_top label 146
2025-01-31 15:31:43,537 - DEBUG - idom 138 from label 146
2025-01-31 15:31:43,537 - DEBUG - find_def_from_bottom label 138
2025-01-31 15:31:43,537 - DEBUG - find_def_from_top label 138
2025-01-31 15:31:43,537 - DEBUG - insert phi node a.1.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
2025-01-31 15:31:43,537 - DEBUG - find_def_from_bottom label 130
2025-01-31 15:31:43,537 - DEBUG - find_def_from_top label 130
2025-01-31 15:31:43,537 - DEBUG - idom 106 from label 130
2025-01-31 15:31:43,537 - DEBUG - find_def_from_bottom label 106
2025-01-31 15:31:43,537 - DEBUG - find_def_from_top label 106
2025-01-31 15:31:43,537 - DEBUG - idom 0 from label 106
2025-01-31 15:31:43,537 - DEBUG - find_def_from_bottom label 0
2025-01-31 15:31:43,537 - DEBUG - incoming_def a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,537 - DEBUG - find_def_from_bottom label 154
2025-01-31 15:31:43,537 - DEBUG - incoming_def a.1.1 = $166inplace_multiply.5
2025-01-31 15:31:43,537 - DEBUG - replaced with: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,537 - DEBUG - on stmt: r.1 = $150inplace_multiply.2
2025-01-31 15:31:43,537 - DEBUG - on stmt: jump 154
2025-01-31 15:31:43,537 - DEBUG - ==== SSA block rewrite pass on 154
2025-01-31 15:31:43,537 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871f4f0>
2025-01-31 15:31:43,537 - DEBUG - on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
2025-01-31 15:31:43,537 - DEBUG - on stmt: $const156.1 = const(int, 1)
2025-01-31 15:31:43,537 - DEBUG - on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,537 - DEBUG - on stmt: exp = $158inplace_rshift.2
2025-01-31 15:31:43,537 - DEBUG - on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,537 - DEBUG - find_def var='a.1' stmt=$166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,537 - DEBUG - find_def_from_top label 154
2025-01-31 15:31:43,537 - DEBUG - idom 138 from label 154
2025-01-31 15:31:43,538 - DEBUG - find_def_from_bottom label 138
2025-01-31 15:31:43,538 - DEBUG - replaced with: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,538 - DEBUG - on stmt: a.1.1 = $166inplace_multiply.5
2025-01-31 15:31:43,538 - DEBUG - on stmt: $const172.7 = const(int, 0)
2025-01-31 15:31:43,538 - DEBUG - on stmt: $174compare_op.8 = exp != $const172.7
2025-01-31 15:31:43,538 - DEBUG - on stmt: bool176 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,538 - DEBUG - on stmt: $176pred = call bool176($174compare_op.8, func=bool176, args=(Var($174compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,538 - DEBUG - on stmt: branch $176pred, 138, 178
2025-01-31 15:31:43,538 - DEBUG - ==== SSA block rewrite pass on 178
2025-01-31 15:31:43,538 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871f4f0>
2025-01-31 15:31:43,538 - DEBUG - on stmt: r.4 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[130, 154])
2025-01-31 15:31:43,538 - DEBUG - on stmt: bool180 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,538 - DEBUG - on stmt: $180pred = call bool180(invert, func=bool180, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,538 - DEBUG - on stmt: branch $180pred, 182, 190
2025-01-31 15:31:43,538 - DEBUG - ==== SSA block rewrite pass on 182
2025-01-31 15:31:43,538 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871f4f0>
2025-01-31 15:31:43,538 - DEBUG - on stmt: $const182.0 = const(float, 1.0)
2025-01-31 15:31:43,538 - DEBUG - on stmt: $186binary_true_divide.2 = $const182.0 / r.4
2025-01-31 15:31:43,538 - DEBUG - on stmt: $188return_value.3 = cast(value=$186binary_true_divide.2)
2025-01-31 15:31:43,538 - DEBUG - on stmt: return $188return_value.3
2025-01-31 15:31:43,538 - DEBUG - ==== SSA block rewrite pass on 190
2025-01-31 15:31:43,538 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871f4f0>
2025-01-31 15:31:43,538 - DEBUG - on stmt: $192return_value.1 = cast(value=r.4)
2025-01-31 15:31:43,538 - DEBUG - on stmt: return $192return_value.1
2025-01-31 15:31:43,538 - DEBUG - Fix SSA violator on var invert
2025-01-31 15:31:43,538 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-31 15:31:43,538 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871e3b0>
2025-01-31 15:31:43,539 - DEBUG - on stmt: a = arg(0, name=a)
2025-01-31 15:31:43,539 - DEBUG - on stmt: b = arg(1, name=b)
2025-01-31 15:31:43,539 - DEBUG - on stmt: $2load_deref.0 = freevar(tp: float32)
2025-01-31 15:31:43,539 - DEBUG - on stmt: $const4.1 = const(int, 1)
2025-01-31 15:31:43,539 - DEBUG - on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,539 - DEBUG - on stmt: $10load_deref.3 = freevar(tp: float32)
2025-01-31 15:31:43,539 - DEBUG - on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,539 - DEBUG - on stmt: $const20.7 = const(int, 0)
2025-01-31 15:31:43,539 - DEBUG - on stmt: $22compare_op.8 = b < $const20.7
2025-01-31 15:31:43,539 - DEBUG - on stmt: bool24 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,539 - DEBUG - on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,539 - DEBUG - on stmt: branch $24pred, 26, 98
2025-01-31 15:31:43,539 - DEBUG - ==== SSA block rewrite pass on 26
2025-01-31 15:31:43,539 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871e3b0>
2025-01-31 15:31:43,539 - DEBUG - on stmt: invert = const(bool, True)
2025-01-31 15:31:43,539 - DEBUG - first assign: invert
2025-01-31 15:31:43,539 - DEBUG - replaced with: invert = const(bool, True)
2025-01-31 15:31:43,539 - DEBUG - on stmt: exp = unary(fn=<built-in function neg>, value=b)
2025-01-31 15:31:43,539 - DEBUG - on stmt: $const38.4 = const(int, 0)
2025-01-31 15:31:43,539 - DEBUG - on stmt: $40compare_op.5 = exp < $const38.4
2025-01-31 15:31:43,539 - DEBUG - on stmt: bool42 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,539 - DEBUG - on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,539 - DEBUG - on stmt: branch $42pred, 44, 48
2025-01-31 15:31:43,539 - DEBUG - ==== SSA block rewrite pass on 44
2025-01-31 15:31:43,539 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871e3b0>
2025-01-31 15:31:43,539 - DEBUG - on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
2025-01-31 15:31:43,539 - DEBUG - on stmt: <static> raise <class 'OverflowError'>
2025-01-31 15:31:43,539 - DEBUG - ==== SSA block rewrite pass on 48
2025-01-31 15:31:43,540 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871e3b0>
2025-01-31 15:31:43,540 - DEBUG - on stmt: $48load_deref.0 = freevar(is_integer: False)
2025-01-31 15:31:43,540 - DEBUG - on stmt: bool50 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,540 - DEBUG - on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,540 - DEBUG - on stmt: jump 96
2025-01-31 15:31:43,540 - DEBUG - ==== SSA block rewrite pass on 96
2025-01-31 15:31:43,540 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871e3b0>
2025-01-31 15:31:43,540 - DEBUG - on stmt: jump 106
2025-01-31 15:31:43,540 - DEBUG - ==== SSA block rewrite pass on 98
2025-01-31 15:31:43,540 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871e3b0>
2025-01-31 15:31:43,540 - DEBUG - on stmt: invert = const(bool, False)
2025-01-31 15:31:43,540 - DEBUG - replaced with: invert.1 = const(bool, False)
2025-01-31 15:31:43,540 - DEBUG - on stmt: exp = b
2025-01-31 15:31:43,540 - DEBUG - on stmt: jump 106
2025-01-31 15:31:43,540 - DEBUG - ==== SSA block rewrite pass on 106
2025-01-31 15:31:43,540 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871e3b0>
2025-01-31 15:31:43,540 - DEBUG - on stmt: $const108.1 = const(int, 65536)
2025-01-31 15:31:43,540 - DEBUG - on stmt: $110compare_op.2 = exp > $const108.1
2025-01-31 15:31:43,540 - DEBUG - on stmt: bool112 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,540 - DEBUG - on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,540 - DEBUG - on stmt: branch $112pred, 114, 130
2025-01-31 15:31:43,540 - DEBUG - ==== SSA block rewrite pass on 114
2025-01-31 15:31:43,540 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871e3b0>
2025-01-31 15:31:43,540 - DEBUG - on stmt: $114load_global.0 = global(math: <module 'math' from '/home/strain/miniconda3/envs/applio/lib/python3.10/lib-dynload/math.cpython-310-x86_64-linux-gnu.so'>)
2025-01-31 15:31:43,540 - DEBUG - on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
2025-01-31 15:31:43,540 - DEBUG - on stmt: $120load_global.3 = global(float: <class 'float'>)
2025-01-31 15:31:43,540 - DEBUG - on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,540 - DEBUG - on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,541 - DEBUG - on stmt: $128return_value.7 = cast(value=$126call_method.6)
2025-01-31 15:31:43,541 - DEBUG - on stmt: return $128return_value.7
2025-01-31 15:31:43,541 - DEBUG - ==== SSA block rewrite pass on 130
2025-01-31 15:31:43,541 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871e3b0>
2025-01-31 15:31:43,541 - DEBUG - on stmt: $const132.1 = const(int, 0)
2025-01-31 15:31:43,541 - DEBUG - on stmt: $134compare_op.2 = exp != $const132.1
2025-01-31 15:31:43,541 - DEBUG - on stmt: bool136 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,541 - DEBUG - on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,541 - DEBUG - on stmt: branch $136pred, 138, 178
2025-01-31 15:31:43,541 - DEBUG - ==== SSA block rewrite pass on 138
2025-01-31 15:31:43,541 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871e3b0>
2025-01-31 15:31:43,541 - DEBUG - on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:217), Var(a.1.1, numbers.py:241)], incoming_blocks=[130, 154])
2025-01-31 15:31:43,541 - DEBUG - on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[130, 154])
2025-01-31 15:31:43,541 - DEBUG - on stmt: $const140.1 = const(int, 1)
2025-01-31 15:31:43,541 - DEBUG - on stmt: $142binary_and.2 = exp & $const140.1
2025-01-31 15:31:43,541 - DEBUG - on stmt: bool144 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,541 - DEBUG - on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,541 - DEBUG - on stmt: branch $144pred, 146, 154
2025-01-31 15:31:43,541 - DEBUG - ==== SSA block rewrite pass on 146
2025-01-31 15:31:43,541 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871e3b0>
2025-01-31 15:31:43,541 - DEBUG - on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,541 - DEBUG - on stmt: r.1 = $150inplace_multiply.2
2025-01-31 15:31:43,541 - DEBUG - on stmt: jump 154
2025-01-31 15:31:43,541 - DEBUG - ==== SSA block rewrite pass on 154
2025-01-31 15:31:43,541 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871e3b0>
2025-01-31 15:31:43,541 - DEBUG - on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
2025-01-31 15:31:43,541 - DEBUG - on stmt: $const156.1 = const(int, 1)
2025-01-31 15:31:43,541 - DEBUG - on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,542 - DEBUG - on stmt: exp = $158inplace_rshift.2
2025-01-31 15:31:43,542 - DEBUG - on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,542 - DEBUG - on stmt: a.1.1 = $166inplace_multiply.5
2025-01-31 15:31:43,542 - DEBUG - on stmt: $const172.7 = const(int, 0)
2025-01-31 15:31:43,542 - DEBUG - on stmt: $174compare_op.8 = exp != $const172.7
2025-01-31 15:31:43,542 - DEBUG - on stmt: bool176 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,542 - DEBUG - on stmt: $176pred = call bool176($174compare_op.8, func=bool176, args=(Var($174compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,542 - DEBUG - on stmt: branch $176pred, 138, 178
2025-01-31 15:31:43,542 - DEBUG - ==== SSA block rewrite pass on 178
2025-01-31 15:31:43,542 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871e3b0>
2025-01-31 15:31:43,542 - DEBUG - on stmt: r.4 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[130, 154])
2025-01-31 15:31:43,542 - DEBUG - on stmt: bool180 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,542 - DEBUG - on stmt: $180pred = call bool180(invert, func=bool180, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,542 - DEBUG - on stmt: branch $180pred, 182, 190
2025-01-31 15:31:43,542 - DEBUG - ==== SSA block rewrite pass on 182
2025-01-31 15:31:43,542 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871e3b0>
2025-01-31 15:31:43,542 - DEBUG - on stmt: $const182.0 = const(float, 1.0)
2025-01-31 15:31:43,542 - DEBUG - on stmt: $186binary_true_divide.2 = $const182.0 / r.4
2025-01-31 15:31:43,542 - DEBUG - on stmt: $188return_value.3 = cast(value=$186binary_true_divide.2)
2025-01-31 15:31:43,542 - DEBUG - on stmt: return $188return_value.3
2025-01-31 15:31:43,542 - DEBUG - ==== SSA block rewrite pass on 190
2025-01-31 15:31:43,542 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871e3b0>
2025-01-31 15:31:43,542 - DEBUG - on stmt: $192return_value.1 = cast(value=r.4)
2025-01-31 15:31:43,542 - DEBUG - on stmt: return $192return_value.1
2025-01-31 15:31:43,542 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x7c89e871f6a0>],
             98: [<numba.core.ir.Assign object at 0x7c89e8941060>]})
2025-01-31 15:31:43,542 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-31 15:31:43,542 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e3b0>
2025-01-31 15:31:43,542 - DEBUG - on stmt: a = arg(0, name=a)
2025-01-31 15:31:43,543 - DEBUG - on stmt: b = arg(1, name=b)
2025-01-31 15:31:43,543 - DEBUG - on stmt: $2load_deref.0 = freevar(tp: float32)
2025-01-31 15:31:43,543 - DEBUG - on stmt: $const4.1 = const(int, 1)
2025-01-31 15:31:43,543 - DEBUG - on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,543 - DEBUG - on stmt: $10load_deref.3 = freevar(tp: float32)
2025-01-31 15:31:43,543 - DEBUG - on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,543 - DEBUG - on stmt: $const20.7 = const(int, 0)
2025-01-31 15:31:43,543 - DEBUG - on stmt: $22compare_op.8 = b < $const20.7
2025-01-31 15:31:43,543 - DEBUG - on stmt: bool24 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,543 - DEBUG - on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,543 - DEBUG - on stmt: branch $24pred, 26, 98
2025-01-31 15:31:43,543 - DEBUG - ==== SSA block rewrite pass on 26
2025-01-31 15:31:43,543 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e3b0>
2025-01-31 15:31:43,543 - DEBUG - on stmt: invert = const(bool, True)
2025-01-31 15:31:43,543 - DEBUG - on stmt: exp = unary(fn=<built-in function neg>, value=b)
2025-01-31 15:31:43,543 - DEBUG - on stmt: $const38.4 = const(int, 0)
2025-01-31 15:31:43,543 - DEBUG - on stmt: $40compare_op.5 = exp < $const38.4
2025-01-31 15:31:43,543 - DEBUG - on stmt: bool42 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,543 - DEBUG - on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,543 - DEBUG - on stmt: branch $42pred, 44, 48
2025-01-31 15:31:43,543 - DEBUG - ==== SSA block rewrite pass on 44
2025-01-31 15:31:43,543 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e3b0>
2025-01-31 15:31:43,543 - DEBUG - on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
2025-01-31 15:31:43,543 - DEBUG - on stmt: <static> raise <class 'OverflowError'>
2025-01-31 15:31:43,543 - DEBUG - ==== SSA block rewrite pass on 48
2025-01-31 15:31:43,543 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e3b0>
2025-01-31 15:31:43,543 - DEBUG - on stmt: $48load_deref.0 = freevar(is_integer: False)
2025-01-31 15:31:43,544 - DEBUG - on stmt: bool50 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,544 - DEBUG - on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,544 - DEBUG - on stmt: jump 96
2025-01-31 15:31:43,544 - DEBUG - ==== SSA block rewrite pass on 96
2025-01-31 15:31:43,544 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e3b0>
2025-01-31 15:31:43,544 - DEBUG - on stmt: jump 106
2025-01-31 15:31:43,544 - DEBUG - ==== SSA block rewrite pass on 98
2025-01-31 15:31:43,544 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e3b0>
2025-01-31 15:31:43,544 - DEBUG - on stmt: invert.1 = const(bool, False)
2025-01-31 15:31:43,544 - DEBUG - on stmt: exp = b
2025-01-31 15:31:43,544 - DEBUG - on stmt: jump 106
2025-01-31 15:31:43,544 - DEBUG - ==== SSA block rewrite pass on 106
2025-01-31 15:31:43,544 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e3b0>
2025-01-31 15:31:43,544 - DEBUG - on stmt: $const108.1 = const(int, 65536)
2025-01-31 15:31:43,544 - DEBUG - on stmt: $110compare_op.2 = exp > $const108.1
2025-01-31 15:31:43,544 - DEBUG - on stmt: bool112 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,544 - DEBUG - on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,544 - DEBUG - on stmt: branch $112pred, 114, 130
2025-01-31 15:31:43,544 - DEBUG - ==== SSA block rewrite pass on 114
2025-01-31 15:31:43,544 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e3b0>
2025-01-31 15:31:43,544 - DEBUG - on stmt: $114load_global.0 = global(math: <module 'math' from '/home/strain/miniconda3/envs/applio/lib/python3.10/lib-dynload/math.cpython-310-x86_64-linux-gnu.so'>)
2025-01-31 15:31:43,544 - DEBUG - on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
2025-01-31 15:31:43,544 - DEBUG - on stmt: $120load_global.3 = global(float: <class 'float'>)
2025-01-31 15:31:43,544 - DEBUG - on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,544 - DEBUG - on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,544 - DEBUG - on stmt: $128return_value.7 = cast(value=$126call_method.6)
2025-01-31 15:31:43,544 - DEBUG - on stmt: return $128return_value.7
2025-01-31 15:31:43,544 - DEBUG - ==== SSA block rewrite pass on 130
2025-01-31 15:31:43,545 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e3b0>
2025-01-31 15:31:43,545 - DEBUG - on stmt: $const132.1 = const(int, 0)
2025-01-31 15:31:43,545 - DEBUG - on stmt: $134compare_op.2 = exp != $const132.1
2025-01-31 15:31:43,545 - DEBUG - on stmt: bool136 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,545 - DEBUG - on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,545 - DEBUG - on stmt: branch $136pred, 138, 178
2025-01-31 15:31:43,545 - DEBUG - ==== SSA block rewrite pass on 138
2025-01-31 15:31:43,545 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e3b0>
2025-01-31 15:31:43,545 - DEBUG - on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:217), Var(a.1.1, numbers.py:241)], incoming_blocks=[130, 154])
2025-01-31 15:31:43,545 - DEBUG - on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[130, 154])
2025-01-31 15:31:43,545 - DEBUG - on stmt: $const140.1 = const(int, 1)
2025-01-31 15:31:43,545 - DEBUG - on stmt: $142binary_and.2 = exp & $const140.1
2025-01-31 15:31:43,545 - DEBUG - on stmt: bool144 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,545 - DEBUG - on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,545 - DEBUG - on stmt: branch $144pred, 146, 154
2025-01-31 15:31:43,545 - DEBUG - ==== SSA block rewrite pass on 146
2025-01-31 15:31:43,545 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e3b0>
2025-01-31 15:31:43,545 - DEBUG - on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,545 - DEBUG - on stmt: r.1 = $150inplace_multiply.2
2025-01-31 15:31:43,545 - DEBUG - on stmt: jump 154
2025-01-31 15:31:43,545 - DEBUG - ==== SSA block rewrite pass on 154
2025-01-31 15:31:43,545 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e3b0>
2025-01-31 15:31:43,545 - DEBUG - on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
2025-01-31 15:31:43,545 - DEBUG - on stmt: $const156.1 = const(int, 1)
2025-01-31 15:31:43,545 - DEBUG - on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,545 - DEBUG - on stmt: exp = $158inplace_rshift.2
2025-01-31 15:31:43,545 - DEBUG - on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,546 - DEBUG - on stmt: a.1.1 = $166inplace_multiply.5
2025-01-31 15:31:43,546 - DEBUG - on stmt: $const172.7 = const(int, 0)
2025-01-31 15:31:43,546 - DEBUG - on stmt: $174compare_op.8 = exp != $const172.7
2025-01-31 15:31:43,546 - DEBUG - on stmt: bool176 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,546 - DEBUG - on stmt: $176pred = call bool176($174compare_op.8, func=bool176, args=(Var($174compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,546 - DEBUG - on stmt: branch $176pred, 138, 178
2025-01-31 15:31:43,546 - DEBUG - ==== SSA block rewrite pass on 178
2025-01-31 15:31:43,546 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e3b0>
2025-01-31 15:31:43,546 - DEBUG - on stmt: r.4 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[130, 154])
2025-01-31 15:31:43,546 - DEBUG - on stmt: bool180 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,546 - DEBUG - on stmt: $180pred = call bool180(invert, func=bool180, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,546 - DEBUG - find_def var='invert' stmt=$180pred = call bool180(invert, func=bool180, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,546 - DEBUG - find_def_from_top label 178
2025-01-31 15:31:43,546 - DEBUG - idom 130 from label 178
2025-01-31 15:31:43,546 - DEBUG - find_def_from_bottom label 130
2025-01-31 15:31:43,546 - DEBUG - find_def_from_top label 130
2025-01-31 15:31:43,546 - DEBUG - idom 106 from label 130
2025-01-31 15:31:43,546 - DEBUG - find_def_from_bottom label 106
2025-01-31 15:31:43,546 - DEBUG - find_def_from_top label 106
2025-01-31 15:31:43,546 - DEBUG - insert phi node invert.2 = phi(incoming_values=[], incoming_blocks=[]) at 106
2025-01-31 15:31:43,546 - DEBUG - find_def_from_bottom label 96
2025-01-31 15:31:43,546 - DEBUG - find_def_from_top label 96
2025-01-31 15:31:43,546 - DEBUG - idom 48 from label 96
2025-01-31 15:31:43,546 - DEBUG - find_def_from_bottom label 48
2025-01-31 15:31:43,546 - DEBUG - find_def_from_top label 48
2025-01-31 15:31:43,546 - DEBUG - idom 26 from label 48
2025-01-31 15:31:43,546 - DEBUG - find_def_from_bottom label 26
2025-01-31 15:31:43,546 - DEBUG - incoming_def invert = const(bool, True)
2025-01-31 15:31:43,546 - DEBUG - find_def_from_bottom label 98
2025-01-31 15:31:43,547 - DEBUG - incoming_def invert.1 = const(bool, False)
2025-01-31 15:31:43,547 - DEBUG - replaced with: $180pred = call bool180(invert.2, func=bool180, args=(Var(invert.2, numbers.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,547 - DEBUG - on stmt: branch $180pred, 182, 190
2025-01-31 15:31:43,547 - DEBUG - ==== SSA block rewrite pass on 182
2025-01-31 15:31:43,547 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e3b0>
2025-01-31 15:31:43,547 - DEBUG - on stmt: $const182.0 = const(float, 1.0)
2025-01-31 15:31:43,547 - DEBUG - on stmt: $186binary_true_divide.2 = $const182.0 / r.4
2025-01-31 15:31:43,547 - DEBUG - on stmt: $188return_value.3 = cast(value=$186binary_true_divide.2)
2025-01-31 15:31:43,547 - DEBUG - on stmt: return $188return_value.3
2025-01-31 15:31:43,547 - DEBUG - ==== SSA block rewrite pass on 190
2025-01-31 15:31:43,547 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e3b0>
2025-01-31 15:31:43,547 - DEBUG - on stmt: $192return_value.1 = cast(value=r.4)
2025-01-31 15:31:43,547 - DEBUG - on stmt: return $192return_value.1
2025-01-31 15:31:43,547 - DEBUG - Fix SSA violator on var exp
2025-01-31 15:31:43,547 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-31 15:31:43,547 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871f4f0>
2025-01-31 15:31:43,547 - DEBUG - on stmt: a = arg(0, name=a)
2025-01-31 15:31:43,547 - DEBUG - on stmt: b = arg(1, name=b)
2025-01-31 15:31:43,547 - DEBUG - on stmt: $2load_deref.0 = freevar(tp: float32)
2025-01-31 15:31:43,547 - DEBUG - on stmt: $const4.1 = const(int, 1)
2025-01-31 15:31:43,547 - DEBUG - on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,547 - DEBUG - on stmt: $10load_deref.3 = freevar(tp: float32)
2025-01-31 15:31:43,547 - DEBUG - on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,547 - DEBUG - on stmt: $const20.7 = const(int, 0)
2025-01-31 15:31:43,547 - DEBUG - on stmt: $22compare_op.8 = b < $const20.7
2025-01-31 15:31:43,547 - DEBUG - on stmt: bool24 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,547 - DEBUG - on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,548 - DEBUG - on stmt: branch $24pred, 26, 98
2025-01-31 15:31:43,548 - DEBUG - ==== SSA block rewrite pass on 26
2025-01-31 15:31:43,548 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871f4f0>
2025-01-31 15:31:43,548 - DEBUG - on stmt: invert = const(bool, True)
2025-01-31 15:31:43,548 - DEBUG - on stmt: exp = unary(fn=<built-in function neg>, value=b)
2025-01-31 15:31:43,548 - DEBUG - first assign: exp
2025-01-31 15:31:43,548 - DEBUG - replaced with: exp = unary(fn=<built-in function neg>, value=b)
2025-01-31 15:31:43,548 - DEBUG - on stmt: $const38.4 = const(int, 0)
2025-01-31 15:31:43,548 - DEBUG - on stmt: $40compare_op.5 = exp < $const38.4
2025-01-31 15:31:43,548 - DEBUG - on stmt: bool42 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,548 - DEBUG - on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,548 - DEBUG - on stmt: branch $42pred, 44, 48
2025-01-31 15:31:43,548 - DEBUG - ==== SSA block rewrite pass on 44
2025-01-31 15:31:43,548 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871f4f0>
2025-01-31 15:31:43,548 - DEBUG - on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
2025-01-31 15:31:43,548 - DEBUG - on stmt: <static> raise <class 'OverflowError'>
2025-01-31 15:31:43,548 - DEBUG - ==== SSA block rewrite pass on 48
2025-01-31 15:31:43,548 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871f4f0>
2025-01-31 15:31:43,548 - DEBUG - on stmt: $48load_deref.0 = freevar(is_integer: False)
2025-01-31 15:31:43,548 - DEBUG - on stmt: bool50 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,548 - DEBUG - on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,548 - DEBUG - on stmt: jump 96
2025-01-31 15:31:43,548 - DEBUG - ==== SSA block rewrite pass on 96
2025-01-31 15:31:43,548 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871f4f0>
2025-01-31 15:31:43,548 - DEBUG - on stmt: jump 106
2025-01-31 15:31:43,548 - DEBUG - ==== SSA block rewrite pass on 98
2025-01-31 15:31:43,548 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871f4f0>
2025-01-31 15:31:43,548 - DEBUG - on stmt: invert.1 = const(bool, False)
2025-01-31 15:31:43,548 - DEBUG - on stmt: exp = b
2025-01-31 15:31:43,549 - DEBUG - replaced with: exp.1 = b
2025-01-31 15:31:43,549 - DEBUG - on stmt: jump 106
2025-01-31 15:31:43,549 - DEBUG - ==== SSA block rewrite pass on 106
2025-01-31 15:31:43,549 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871f4f0>
2025-01-31 15:31:43,549 - DEBUG - on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:219), Var(invert.1, numbers.py:232)], incoming_blocks=[96, 98])
2025-01-31 15:31:43,549 - DEBUG - on stmt: $const108.1 = const(int, 65536)
2025-01-31 15:31:43,549 - DEBUG - on stmt: $110compare_op.2 = exp > $const108.1
2025-01-31 15:31:43,549 - DEBUG - on stmt: bool112 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,549 - DEBUG - on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,549 - DEBUG - on stmt: branch $112pred, 114, 130
2025-01-31 15:31:43,549 - DEBUG - ==== SSA block rewrite pass on 114
2025-01-31 15:31:43,549 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871f4f0>
2025-01-31 15:31:43,549 - DEBUG - on stmt: $114load_global.0 = global(math: <module 'math' from '/home/strain/miniconda3/envs/applio/lib/python3.10/lib-dynload/math.cpython-310-x86_64-linux-gnu.so'>)
2025-01-31 15:31:43,549 - DEBUG - on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
2025-01-31 15:31:43,549 - DEBUG - on stmt: $120load_global.3 = global(float: <class 'float'>)
2025-01-31 15:31:43,549 - DEBUG - on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,549 - DEBUG - on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,549 - DEBUG - on stmt: $128return_value.7 = cast(value=$126call_method.6)
2025-01-31 15:31:43,549 - DEBUG - on stmt: return $128return_value.7
2025-01-31 15:31:43,549 - DEBUG - ==== SSA block rewrite pass on 130
2025-01-31 15:31:43,549 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871f4f0>
2025-01-31 15:31:43,549 - DEBUG - on stmt: $const132.1 = const(int, 0)
2025-01-31 15:31:43,549 - DEBUG - on stmt: $134compare_op.2 = exp != $const132.1
2025-01-31 15:31:43,549 - DEBUG - on stmt: bool136 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,549 - DEBUG - on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,549 - DEBUG - on stmt: branch $136pred, 138, 178
2025-01-31 15:31:43,549 - DEBUG - ==== SSA block rewrite pass on 138
2025-01-31 15:31:43,549 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871f4f0>
2025-01-31 15:31:43,550 - DEBUG - on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:217), Var(a.1.1, numbers.py:241)], incoming_blocks=[130, 154])
2025-01-31 15:31:43,550 - DEBUG - on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[130, 154])
2025-01-31 15:31:43,550 - DEBUG - on stmt: $const140.1 = const(int, 1)
2025-01-31 15:31:43,550 - DEBUG - on stmt: $142binary_and.2 = exp & $const140.1
2025-01-31 15:31:43,550 - DEBUG - on stmt: bool144 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,550 - DEBUG - on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,550 - DEBUG - on stmt: branch $144pred, 146, 154
2025-01-31 15:31:43,550 - DEBUG - ==== SSA block rewrite pass on 146
2025-01-31 15:31:43,550 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871f4f0>
2025-01-31 15:31:43,550 - DEBUG - on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,550 - DEBUG - on stmt: r.1 = $150inplace_multiply.2
2025-01-31 15:31:43,550 - DEBUG - on stmt: jump 154
2025-01-31 15:31:43,550 - DEBUG - ==== SSA block rewrite pass on 154
2025-01-31 15:31:43,550 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871f4f0>
2025-01-31 15:31:43,550 - DEBUG - on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
2025-01-31 15:31:43,550 - DEBUG - on stmt: $const156.1 = const(int, 1)
2025-01-31 15:31:43,550 - DEBUG - on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,550 - DEBUG - on stmt: exp = $158inplace_rshift.2
2025-01-31 15:31:43,550 - DEBUG - replaced with: exp.2 = $158inplace_rshift.2
2025-01-31 15:31:43,550 - DEBUG - on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,550 - DEBUG - on stmt: a.1.1 = $166inplace_multiply.5
2025-01-31 15:31:43,550 - DEBUG - on stmt: $const172.7 = const(int, 0)
2025-01-31 15:31:43,550 - DEBUG - on stmt: $174compare_op.8 = exp != $const172.7
2025-01-31 15:31:43,550 - DEBUG - on stmt: bool176 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,550 - DEBUG - on stmt: $176pred = call bool176($174compare_op.8, func=bool176, args=(Var($174compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,550 - DEBUG - on stmt: branch $176pred, 138, 178
2025-01-31 15:31:43,550 - DEBUG - ==== SSA block rewrite pass on 178
2025-01-31 15:31:43,550 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871f4f0>
2025-01-31 15:31:43,551 - DEBUG - on stmt: r.4 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[130, 154])
2025-01-31 15:31:43,551 - DEBUG - on stmt: bool180 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,551 - DEBUG - on stmt: $180pred = call bool180(invert.2, func=bool180, args=(Var(invert.2, numbers.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,551 - DEBUG - on stmt: branch $180pred, 182, 190
2025-01-31 15:31:43,551 - DEBUG - ==== SSA block rewrite pass on 182
2025-01-31 15:31:43,551 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871f4f0>
2025-01-31 15:31:43,551 - DEBUG - on stmt: $const182.0 = const(float, 1.0)
2025-01-31 15:31:43,551 - DEBUG - on stmt: $186binary_true_divide.2 = $const182.0 / r.4
2025-01-31 15:31:43,551 - DEBUG - on stmt: $188return_value.3 = cast(value=$186binary_true_divide.2)
2025-01-31 15:31:43,551 - DEBUG - on stmt: return $188return_value.3
2025-01-31 15:31:43,551 - DEBUG - ==== SSA block rewrite pass on 190
2025-01-31 15:31:43,551 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871f4f0>
2025-01-31 15:31:43,551 - DEBUG - on stmt: $192return_value.1 = cast(value=r.4)
2025-01-31 15:31:43,551 - DEBUG - on stmt: return $192return_value.1
2025-01-31 15:31:43,551 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x7c89e871c5e0>],
             98: [<numba.core.ir.Assign object at 0x7c89e8942fe0>],
             154: [<numba.core.ir.Assign object at 0x7c89e8940040>]})
2025-01-31 15:31:43,551 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-31 15:31:43,551 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e3b0>
2025-01-31 15:31:43,551 - DEBUG - on stmt: a = arg(0, name=a)
2025-01-31 15:31:43,551 - DEBUG - on stmt: b = arg(1, name=b)
2025-01-31 15:31:43,551 - DEBUG - on stmt: $2load_deref.0 = freevar(tp: float32)
2025-01-31 15:31:43,551 - DEBUG - on stmt: $const4.1 = const(int, 1)
2025-01-31 15:31:43,551 - DEBUG - on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,551 - DEBUG - on stmt: $10load_deref.3 = freevar(tp: float32)
2025-01-31 15:31:43,551 - DEBUG - on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,551 - DEBUG - on stmt: $const20.7 = const(int, 0)
2025-01-31 15:31:43,551 - DEBUG - on stmt: $22compare_op.8 = b < $const20.7
2025-01-31 15:31:43,552 - DEBUG - on stmt: bool24 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,552 - DEBUG - on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,552 - DEBUG - on stmt: branch $24pred, 26, 98
2025-01-31 15:31:43,552 - DEBUG - ==== SSA block rewrite pass on 26
2025-01-31 15:31:43,552 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e3b0>
2025-01-31 15:31:43,552 - DEBUG - on stmt: invert = const(bool, True)
2025-01-31 15:31:43,552 - DEBUG - on stmt: exp = unary(fn=<built-in function neg>, value=b)
2025-01-31 15:31:43,552 - DEBUG - on stmt: $const38.4 = const(int, 0)
2025-01-31 15:31:43,552 - DEBUG - on stmt: $40compare_op.5 = exp < $const38.4
2025-01-31 15:31:43,552 - DEBUG - find_def var='exp' stmt=$40compare_op.5 = exp < $const38.4
2025-01-31 15:31:43,552 - DEBUG - on stmt: bool42 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,552 - DEBUG - on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,552 - DEBUG - on stmt: branch $42pred, 44, 48
2025-01-31 15:31:43,552 - DEBUG - ==== SSA block rewrite pass on 44
2025-01-31 15:31:43,552 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e3b0>
2025-01-31 15:31:43,552 - DEBUG - on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
2025-01-31 15:31:43,552 - DEBUG - on stmt: <static> raise <class 'OverflowError'>
2025-01-31 15:31:43,552 - DEBUG - ==== SSA block rewrite pass on 48
2025-01-31 15:31:43,552 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e3b0>
2025-01-31 15:31:43,552 - DEBUG - on stmt: $48load_deref.0 = freevar(is_integer: False)
2025-01-31 15:31:43,552 - DEBUG - on stmt: bool50 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,552 - DEBUG - on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,552 - DEBUG - on stmt: jump 96
2025-01-31 15:31:43,552 - DEBUG - ==== SSA block rewrite pass on 96
2025-01-31 15:31:43,552 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e3b0>
2025-01-31 15:31:43,552 - DEBUG - on stmt: jump 106
2025-01-31 15:31:43,552 - DEBUG - ==== SSA block rewrite pass on 98
2025-01-31 15:31:43,552 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e3b0>
2025-01-31 15:31:43,553 - DEBUG - on stmt: invert.1 = const(bool, False)
2025-01-31 15:31:43,553 - DEBUG - on stmt: exp.1 = b
2025-01-31 15:31:43,553 - DEBUG - on stmt: jump 106
2025-01-31 15:31:43,553 - DEBUG - ==== SSA block rewrite pass on 106
2025-01-31 15:31:43,553 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e3b0>
2025-01-31 15:31:43,553 - DEBUG - on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:219), Var(invert.1, numbers.py:232)], incoming_blocks=[96, 98])
2025-01-31 15:31:43,553 - DEBUG - on stmt: $const108.1 = const(int, 65536)
2025-01-31 15:31:43,553 - DEBUG - on stmt: $110compare_op.2 = exp > $const108.1
2025-01-31 15:31:43,553 - DEBUG - find_def var='exp' stmt=$110compare_op.2 = exp > $const108.1
2025-01-31 15:31:43,553 - DEBUG - find_def_from_top label 106
2025-01-31 15:31:43,553 - DEBUG - insert phi node exp.3 = phi(incoming_values=[], incoming_blocks=[]) at 106
2025-01-31 15:31:43,553 - DEBUG - find_def_from_bottom label 96
2025-01-31 15:31:43,553 - DEBUG - find_def_from_top label 96
2025-01-31 15:31:43,553 - DEBUG - idom 48 from label 96
2025-01-31 15:31:43,553 - DEBUG - find_def_from_bottom label 48
2025-01-31 15:31:43,553 - DEBUG - find_def_from_top label 48
2025-01-31 15:31:43,553 - DEBUG - idom 26 from label 48
2025-01-31 15:31:43,553 - DEBUG - find_def_from_bottom label 26
2025-01-31 15:31:43,553 - DEBUG - incoming_def exp = unary(fn=<built-in function neg>, value=b)
2025-01-31 15:31:43,553 - DEBUG - find_def_from_bottom label 98
2025-01-31 15:31:43,553 - DEBUG - incoming_def exp.1 = b
2025-01-31 15:31:43,553 - DEBUG - replaced with: $110compare_op.2 = exp.3 > $const108.1
2025-01-31 15:31:43,553 - DEBUG - on stmt: bool112 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,553 - DEBUG - on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,553 - DEBUG - on stmt: branch $112pred, 114, 130
2025-01-31 15:31:43,553 - DEBUG - ==== SSA block rewrite pass on 114
2025-01-31 15:31:43,553 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e3b0>
2025-01-31 15:31:43,553 - DEBUG - on stmt: $114load_global.0 = global(math: <module 'math' from '/home/strain/miniconda3/envs/applio/lib/python3.10/lib-dynload/math.cpython-310-x86_64-linux-gnu.so'>)
2025-01-31 15:31:43,554 - DEBUG - on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
2025-01-31 15:31:43,554 - DEBUG - on stmt: $120load_global.3 = global(float: <class 'float'>)
2025-01-31 15:31:43,554 - DEBUG - on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,554 - DEBUG - on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,554 - DEBUG - on stmt: $128return_value.7 = cast(value=$126call_method.6)
2025-01-31 15:31:43,554 - DEBUG - on stmt: return $128return_value.7
2025-01-31 15:31:43,554 - DEBUG - ==== SSA block rewrite pass on 130
2025-01-31 15:31:43,554 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e3b0>
2025-01-31 15:31:43,554 - DEBUG - on stmt: $const132.1 = const(int, 0)
2025-01-31 15:31:43,554 - DEBUG - on stmt: $134compare_op.2 = exp != $const132.1
2025-01-31 15:31:43,554 - DEBUG - find_def var='exp' stmt=$134compare_op.2 = exp != $const132.1
2025-01-31 15:31:43,554 - DEBUG - find_def_from_top label 130
2025-01-31 15:31:43,554 - DEBUG - idom 106 from label 130
2025-01-31 15:31:43,554 - DEBUG - find_def_from_bottom label 106
2025-01-31 15:31:43,554 - DEBUG - replaced with: $134compare_op.2 = exp.3 != $const132.1
2025-01-31 15:31:43,554 - DEBUG - on stmt: bool136 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,554 - DEBUG - on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,554 - DEBUG - on stmt: branch $136pred, 138, 178
2025-01-31 15:31:43,554 - DEBUG - ==== SSA block rewrite pass on 138
2025-01-31 15:31:43,554 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e3b0>
2025-01-31 15:31:43,554 - DEBUG - on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:217), Var(a.1.1, numbers.py:241)], incoming_blocks=[130, 154])
2025-01-31 15:31:43,554 - DEBUG - on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[130, 154])
2025-01-31 15:31:43,554 - DEBUG - on stmt: $const140.1 = const(int, 1)
2025-01-31 15:31:43,554 - DEBUG - on stmt: $142binary_and.2 = exp & $const140.1
2025-01-31 15:31:43,554 - DEBUG - find_def var='exp' stmt=$142binary_and.2 = exp & $const140.1
2025-01-31 15:31:43,554 - DEBUG - find_def_from_top label 138
2025-01-31 15:31:43,555 - DEBUG - insert phi node exp.4 = phi(incoming_values=[], incoming_blocks=[]) at 138
2025-01-31 15:31:43,555 - DEBUG - find_def_from_bottom label 130
2025-01-31 15:31:43,555 - DEBUG - find_def_from_top label 130
2025-01-31 15:31:43,555 - DEBUG - idom 106 from label 130
2025-01-31 15:31:43,555 - DEBUG - find_def_from_bottom label 106
2025-01-31 15:31:43,555 - DEBUG - incoming_def exp.3 = phi(incoming_values=[Var(exp, numbers.py:220), Var(exp.1, numbers.py:233)], incoming_blocks=[96, 98])
2025-01-31 15:31:43,555 - DEBUG - find_def_from_bottom label 154
2025-01-31 15:31:43,555 - DEBUG - incoming_def exp.2 = $158inplace_rshift.2
2025-01-31 15:31:43,555 - DEBUG - replaced with: $142binary_and.2 = exp.4 & $const140.1
2025-01-31 15:31:43,555 - DEBUG - on stmt: bool144 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,555 - DEBUG - on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,555 - DEBUG - on stmt: branch $144pred, 146, 154
2025-01-31 15:31:43,555 - DEBUG - ==== SSA block rewrite pass on 146
2025-01-31 15:31:43,555 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e3b0>
2025-01-31 15:31:43,555 - DEBUG - on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,555 - DEBUG - on stmt: r.1 = $150inplace_multiply.2
2025-01-31 15:31:43,555 - DEBUG - on stmt: jump 154
2025-01-31 15:31:43,555 - DEBUG - ==== SSA block rewrite pass on 154
2025-01-31 15:31:43,555 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e3b0>
2025-01-31 15:31:43,555 - DEBUG - on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
2025-01-31 15:31:43,555 - DEBUG - on stmt: $const156.1 = const(int, 1)
2025-01-31 15:31:43,555 - DEBUG - on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,555 - DEBUG - find_def var='exp' stmt=$158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,555 - DEBUG - find_def_from_top label 154
2025-01-31 15:31:43,555 - DEBUG - idom 138 from label 154
2025-01-31 15:31:43,555 - DEBUG - find_def_from_bottom label 138
2025-01-31 15:31:43,555 - DEBUG - replaced with: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,556 - DEBUG - on stmt: exp.2 = $158inplace_rshift.2
2025-01-31 15:31:43,556 - DEBUG - on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,556 - DEBUG - on stmt: a.1.1 = $166inplace_multiply.5
2025-01-31 15:31:43,556 - DEBUG - on stmt: $const172.7 = const(int, 0)
2025-01-31 15:31:43,556 - DEBUG - on stmt: $174compare_op.8 = exp != $const172.7
2025-01-31 15:31:43,556 - DEBUG - find_def var='exp' stmt=$174compare_op.8 = exp != $const172.7
2025-01-31 15:31:43,556 - DEBUG - replaced with: $174compare_op.8 = exp.2 != $const172.7
2025-01-31 15:31:43,556 - DEBUG - on stmt: bool176 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,556 - DEBUG - on stmt: $176pred = call bool176($174compare_op.8, func=bool176, args=(Var($174compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,556 - DEBUG - on stmt: branch $176pred, 138, 178
2025-01-31 15:31:43,556 - DEBUG - ==== SSA block rewrite pass on 178
2025-01-31 15:31:43,556 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e3b0>
2025-01-31 15:31:43,556 - DEBUG - on stmt: r.4 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[130, 154])
2025-01-31 15:31:43,556 - DEBUG - on stmt: bool180 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,556 - DEBUG - on stmt: $180pred = call bool180(invert.2, func=bool180, args=(Var(invert.2, numbers.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,556 - DEBUG - on stmt: branch $180pred, 182, 190
2025-01-31 15:31:43,556 - DEBUG - ==== SSA block rewrite pass on 182
2025-01-31 15:31:43,556 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e3b0>
2025-01-31 15:31:43,556 - DEBUG - on stmt: $const182.0 = const(float, 1.0)
2025-01-31 15:31:43,556 - DEBUG - on stmt: $186binary_true_divide.2 = $const182.0 / r.4
2025-01-31 15:31:43,556 - DEBUG - on stmt: $188return_value.3 = cast(value=$186binary_true_divide.2)
2025-01-31 15:31:43,556 - DEBUG - on stmt: return $188return_value.3
2025-01-31 15:31:43,557 - DEBUG - ==== SSA block rewrite pass on 190
2025-01-31 15:31:43,557 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e3b0>
2025-01-31 15:31:43,557 - DEBUG - on stmt: $192return_value.1 = cast(value=r.4)
2025-01-31 15:31:43,557 - DEBUG - on stmt: return $192return_value.1
2025-01-31 15:31:43,643 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=2452)
           2	LOAD_FAST(arg=0, lineno=2457)
           4	LOAD_ATTR(arg=0, lineno=2457)
           6	LOAD_CONST(arg=1, lineno=2457)
           8	BINARY_POWER(arg=None, lineno=2457)
          10	LOAD_FAST(arg=0, lineno=2457)
          12	LOAD_ATTR(arg=1, lineno=2457)
          14	LOAD_CONST(arg=1, lineno=2457)
          16	BINARY_POWER(arg=None, lineno=2457)
          18	BINARY_ADD(arg=None, lineno=2457)
          20	RETURN_VALUE(arg=None, lineno=2457)
2025-01-31 15:31:43,643 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:31:43,643 - DEBUG - stack: []
2025-01-31 15:31:43,643 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:31:43,643 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=2452)
2025-01-31 15:31:43,643 - DEBUG - stack []
2025-01-31 15:31:43,643 - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=2457)
2025-01-31 15:31:43,643 - DEBUG - stack []
2025-01-31 15:31:43,643 - DEBUG - dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=2457)
2025-01-31 15:31:43,643 - DEBUG - stack ['$x2.0']
2025-01-31 15:31:43,643 - DEBUG - dispatch pc=6, inst=LOAD_CONST(arg=1, lineno=2457)
2025-01-31 15:31:43,643 - DEBUG - stack ['$4load_attr.1']
2025-01-31 15:31:43,643 - DEBUG - dispatch pc=8, inst=BINARY_POWER(arg=None, lineno=2457)
2025-01-31 15:31:43,643 - DEBUG - stack ['$4load_attr.1', '$const6.2']
2025-01-31 15:31:43,643 - DEBUG - dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=2457)
2025-01-31 15:31:43,644 - DEBUG - stack ['$8binary_power.3']
2025-01-31 15:31:43,644 - DEBUG - dispatch pc=12, inst=LOAD_ATTR(arg=1, lineno=2457)
2025-01-31 15:31:43,644 - DEBUG - stack ['$8binary_power.3', '$x10.4']
2025-01-31 15:31:43,644 - DEBUG - dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=2457)
2025-01-31 15:31:43,644 - DEBUG - stack ['$8binary_power.3', '$12load_attr.5']
2025-01-31 15:31:43,644 - DEBUG - dispatch pc=16, inst=BINARY_POWER(arg=None, lineno=2457)
2025-01-31 15:31:43,644 - DEBUG - stack ['$8binary_power.3', '$12load_attr.5', '$const14.6']
2025-01-31 15:31:43,644 - DEBUG - dispatch pc=18, inst=BINARY_ADD(arg=None, lineno=2457)
2025-01-31 15:31:43,644 - DEBUG - stack ['$8binary_power.3', '$16binary_power.7']
2025-01-31 15:31:43,644 - DEBUG - dispatch pc=20, inst=RETURN_VALUE(arg=None, lineno=2457)
2025-01-31 15:31:43,644 - DEBUG - stack ['$18binary_add.8']
2025-01-31 15:31:43,644 - DEBUG - end state. edges=[]
2025-01-31 15:31:43,644 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:31:43,644 - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-01-31 15:31:43,644 - DEBUG - defmap: {}
2025-01-31 15:31:43,644 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:43,644 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:43,644 - DEBUG - keep phismap: {}
2025-01-31 15:31:43,644 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-01-31 15:31:43,644 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:31:43,644 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'item': '$x2.0', 'res': '$4load_attr.1'}), (6, {'res': '$const6.2'}), (8, {'lhs': '$4load_attr.1', 'rhs': '$const6.2', 'res': '$8binary_power.3'}), (10, {'res': '$x10.4'}), (12, {'item': '$x10.4', 'res': '$12load_attr.5'}), (14, {'res': '$const14.6'}), (16, {'lhs': '$12load_attr.5', 'rhs': '$const14.6', 'res': '$16binary_power.7'}), (18, {'lhs': '$8binary_power.3', 'rhs': '$16binary_power.7', 'res': '$18binary_add.8'}), (20, {'retval': '$18binary_add.8', 'castval': '$20return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:43,645 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    $4load_attr.1 = getattr(value=x, attr=real) ['$4load_attr.1', 'x']
    $const6.2 = const(int, 2)                ['$const6.2']
    $8binary_power.3 = $4load_attr.1 ** $const6.2 ['$4load_attr.1', '$8binary_power.3', '$const6.2']
    $12load_attr.5 = getattr(value=x, attr=imag) ['$12load_attr.5', 'x']
    $const14.6 = const(int, 2)               ['$const14.6']
    $16binary_power.7 = $12load_attr.5 ** $const14.6 ['$12load_attr.5', '$16binary_power.7', '$const14.6']
    $18binary_add.8 = $8binary_power.3 + $16binary_power.7 ['$16binary_power.7', '$18binary_add.8', '$8binary_power.3']
    $20return_value.9 = cast(value=$18binary_add.8) ['$18binary_add.8', '$20return_value.9']
    return $20return_value.9                 ['$20return_value.9']

2025-01-31 15:31:43,648 - DEBUG - ==== SSA block analysis pass on 0
2025-01-31 15:31:43,648 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8518100>
2025-01-31 15:31:43,648 - DEBUG - on stmt: x = arg(0, name=x)
2025-01-31 15:31:43,648 - DEBUG - on stmt: $4load_attr.1 = getattr(value=x, attr=real)
2025-01-31 15:31:43,648 - DEBUG - on stmt: $const6.2 = const(int, 2)
2025-01-31 15:31:43,648 - DEBUG - on stmt: $8binary_power.3 = $4load_attr.1 ** $const6.2
2025-01-31 15:31:43,648 - DEBUG - on stmt: $12load_attr.5 = getattr(value=x, attr=imag)
2025-01-31 15:31:43,648 - DEBUG - on stmt: $const14.6 = const(int, 2)
2025-01-31 15:31:43,648 - DEBUG - on stmt: $16binary_power.7 = $12load_attr.5 ** $const14.6
2025-01-31 15:31:43,648 - DEBUG - on stmt: $18binary_add.8 = $8binary_power.3 + $16binary_power.7
2025-01-31 15:31:43,648 - DEBUG - on stmt: $20return_value.9 = cast(value=$18binary_add.8)
2025-01-31 15:31:43,648 - DEBUG - on stmt: return $20return_value.9
2025-01-31 15:31:43,649 - DEBUG - defs defaultdict(<class 'list'>,
            {'$12load_attr.5': [(<numba.core.ir.Assign object at 0x7c89e8518ac0>,
                                 0)],
             '$16binary_power.7': [(<numba.core.ir.Assign object at 0x7c89e8518550>,
                                    0)],
             '$18binary_add.8': [(<numba.core.ir.Assign object at 0x7c89e85187c0>,
                                  0)],
             '$20return_value.9': [(<numba.core.ir.Assign object at 0x7c89e85181c0>,
                                    0)],
             '$4load_attr.1': [(<numba.core.ir.Assign object at 0x7c89e8518f10>,
                                0)],
             '$8binary_power.3': [(<numba.core.ir.Assign object at 0x7c89e8518c40>,
                                   0)],
             '$const14.6': [(<numba.core.ir.Assign object at 0x7c89e8518640>,
                             0)],
             '$const6.2': [(<numba.core.ir.Assign object at 0x7c89e851be50>,
                            0)],
             'x': [(<numba.core.ir.Assign object at 0x7c89e851b1c0>, 0)]})
2025-01-31 15:31:43,649 - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x7c89e8518100>
2025-01-31 15:31:43,657 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=214)
           2	LOAD_DEREF(arg=1, lineno=216)
           4	LOAD_CONST(arg=1, lineno=216)
           6	CALL_FUNCTION(arg=1, lineno=216)
           8	STORE_FAST(arg=2, lineno=216)
          10	LOAD_DEREF(arg=1, lineno=217)
          12	LOAD_FAST(arg=0, lineno=217)
          14	CALL_FUNCTION(arg=1, lineno=217)
          16	STORE_FAST(arg=0, lineno=217)
          18	LOAD_FAST(arg=1, lineno=218)
          20	LOAD_CONST(arg=2, lineno=218)
          22	COMPARE_OP(arg=0, lineno=218)
          24	POP_JUMP_IF_FALSE(arg=50, lineno=218)
          26	LOAD_CONST(arg=3, lineno=219)
          28	STORE_FAST(arg=3, lineno=219)
          30	LOAD_FAST(arg=1, lineno=220)
          32	UNARY_NEGATIVE(arg=None, lineno=220)
          34	STORE_FAST(arg=4, lineno=220)
          36	LOAD_FAST(arg=4, lineno=221)
          38	LOAD_CONST(arg=2, lineno=221)
          40	COMPARE_OP(arg=0, lineno=221)
          42	POP_JUMP_IF_FALSE(arg=25, lineno=221)
          44	LOAD_GLOBAL(arg=0, lineno=222)
          46	RAISE_VARARGS(arg=1, lineno=222)
>         48	LOAD_DEREF(arg=0, lineno=223)
          50	POP_JUMP_IF_FALSE(arg=49, lineno=223)
          52	LOAD_FAST(arg=0, lineno=224)
          54	LOAD_CONST(arg=2, lineno=224)
          56	COMPARE_OP(arg=2, lineno=224)
          58	POP_JUMP_IF_FALSE(arg=39, lineno=224)
          60	LOAD_DEREF(arg=2, lineno=225)
          62	POP_JUMP_IF_FALSE(arg=35, lineno=225)
          64	LOAD_DEREF(arg=2, lineno=226)
          66	RETURN_VALUE(arg=None, lineno=226)
>         68	LOAD_GLOBAL(arg=1, lineno=228)
          70	LOAD_CONST(arg=4, lineno=228)
          72	CALL_FUNCTION(arg=1, lineno=228)
          74	RAISE_VARARGS(arg=1, lineno=228)
>         76	LOAD_FAST(arg=0, lineno=229)
          78	LOAD_CONST(arg=1, lineno=229)
          80	COMPARE_OP(arg=3, lineno=229)
          82	POP_JUMP_IF_FALSE(arg=49, lineno=229)
          84	LOAD_FAST(arg=0, lineno=229)
          86	LOAD_CONST(arg=5, lineno=229)
          88	COMPARE_OP(arg=3, lineno=229)
          90	POP_JUMP_IF_FALSE(arg=49, lineno=229)
          92	LOAD_CONST(arg=2, lineno=230)
          94	RETURN_VALUE(arg=None, lineno=230)
>         96	JUMP_FORWARD(arg=4, lineno=230)
>         98	LOAD_CONST(arg=6, lineno=232)
         100	STORE_FAST(arg=3, lineno=232)
         102	LOAD_FAST(arg=1, lineno=233)
         104	STORE_FAST(arg=4, lineno=233)
>        106	LOAD_FAST(arg=4, lineno=234)
         108	LOAD_CONST(arg=7, lineno=234)
         110	COMPARE_OP(arg=4, lineno=234)
         112	POP_JUMP_IF_FALSE(arg=66, lineno=234)
         114	LOAD_GLOBAL(arg=2, lineno=236)
         116	LOAD_METHOD(arg=3, lineno=236)
         118	LOAD_FAST(arg=0, lineno=236)
         120	LOAD_GLOBAL(arg=4, lineno=236)
         122	LOAD_FAST(arg=1, lineno=236)
         124	CALL_FUNCTION(arg=1, lineno=236)
         126	CALL_METHOD(arg=2, lineno=236)
         128	RETURN_VALUE(arg=None, lineno=236)
>        130	LOAD_FAST(arg=4, lineno=237)
         132	LOAD_CONST(arg=2, lineno=237)
         134	COMPARE_OP(arg=3, lineno=237)
         136	POP_JUMP_IF_FALSE(arg=90, lineno=237)
>        138	LOAD_FAST(arg=4, lineno=238)
         140	LOAD_CONST(arg=1, lineno=238)
         142	BINARY_AND(arg=None, lineno=238)
         144	POP_JUMP_IF_FALSE(arg=78, lineno=238)
         146	LOAD_FAST(arg=2, lineno=239)
         148	LOAD_FAST(arg=0, lineno=239)
         150	INPLACE_MULTIPLY(arg=None, lineno=239)
         152	STORE_FAST(arg=2, lineno=239)
>        154	LOAD_FAST(arg=4, lineno=240)
         156	LOAD_CONST(arg=1, lineno=240)
         158	INPLACE_RSHIFT(arg=None, lineno=240)
         160	STORE_FAST(arg=4, lineno=240)
         162	LOAD_FAST(arg=0, lineno=241)
         164	LOAD_FAST(arg=0, lineno=241)
         166	INPLACE_MULTIPLY(arg=None, lineno=241)
         168	STORE_FAST(arg=0, lineno=241)
         170	LOAD_FAST(arg=4, lineno=237)
         172	LOAD_CONST(arg=2, lineno=237)
         174	COMPARE_OP(arg=3, lineno=237)
         176	POP_JUMP_IF_TRUE(arg=70, lineno=237)
>        178	LOAD_FAST(arg=3, lineno=243)
         180	POP_JUMP_IF_FALSE(arg=96, lineno=243)
         182	LOAD_CONST(arg=8, lineno=243)
         184	LOAD_FAST(arg=2, lineno=243)
         186	BINARY_TRUE_DIVIDE(arg=None, lineno=243)
         188	RETURN_VALUE(arg=None, lineno=243)
>        190	LOAD_FAST(arg=2, lineno=243)
         192	RETURN_VALUE(arg=None, lineno=243)
2025-01-31 15:31:43,657 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:31:43,657 - DEBUG - stack: []
2025-01-31 15:31:43,657 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:31:43,657 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=214)
2025-01-31 15:31:43,657 - DEBUG - stack []
2025-01-31 15:31:43,657 - DEBUG - dispatch pc=2, inst=LOAD_DEREF(arg=1, lineno=216)
2025-01-31 15:31:43,657 - DEBUG - stack []
2025-01-31 15:31:43,657 - DEBUG - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=216)
2025-01-31 15:31:43,657 - DEBUG - stack ['$2load_deref.0']
2025-01-31 15:31:43,657 - DEBUG - dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=216)
2025-01-31 15:31:43,657 - DEBUG - stack ['$2load_deref.0', '$const4.1']
2025-01-31 15:31:43,657 - DEBUG - dispatch pc=8, inst=STORE_FAST(arg=2, lineno=216)
2025-01-31 15:31:43,657 - DEBUG - stack ['$6call_function.2']
2025-01-31 15:31:43,657 - DEBUG - dispatch pc=10, inst=LOAD_DEREF(arg=1, lineno=217)
2025-01-31 15:31:43,657 - DEBUG - stack []
2025-01-31 15:31:43,657 - DEBUG - dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=217)
2025-01-31 15:31:43,657 - DEBUG - stack ['$10load_deref.3']
2025-01-31 15:31:43,657 - DEBUG - dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=217)
2025-01-31 15:31:43,657 - DEBUG - stack ['$10load_deref.3', '$a12.4']
2025-01-31 15:31:43,658 - DEBUG - dispatch pc=16, inst=STORE_FAST(arg=0, lineno=217)
2025-01-31 15:31:43,658 - DEBUG - stack ['$14call_function.5']
2025-01-31 15:31:43,658 - DEBUG - dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=218)
2025-01-31 15:31:43,658 - DEBUG - stack []
2025-01-31 15:31:43,658 - DEBUG - dispatch pc=20, inst=LOAD_CONST(arg=2, lineno=218)
2025-01-31 15:31:43,658 - DEBUG - stack ['$b18.6']
2025-01-31 15:31:43,658 - DEBUG - dispatch pc=22, inst=COMPARE_OP(arg=0, lineno=218)
2025-01-31 15:31:43,658 - DEBUG - stack ['$b18.6', '$const20.7']
2025-01-31 15:31:43,658 - DEBUG - dispatch pc=24, inst=POP_JUMP_IF_FALSE(arg=50, lineno=218)
2025-01-31 15:31:43,658 - DEBUG - stack ['$22compare_op.8']
2025-01-31 15:31:43,658 - DEBUG - end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0), Edge(pc=98, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:43,658 - DEBUG - pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=98 nstack_initial=0)])
2025-01-31 15:31:43,658 - DEBUG - stack: []
2025-01-31 15:31:43,658 - DEBUG - state.pc_initial: State(pc_initial=26 nstack_initial=0)
2025-01-31 15:31:43,658 - DEBUG - dispatch pc=26, inst=LOAD_CONST(arg=3, lineno=219)
2025-01-31 15:31:43,658 - DEBUG - stack []
2025-01-31 15:31:43,658 - DEBUG - dispatch pc=28, inst=STORE_FAST(arg=3, lineno=219)
2025-01-31 15:31:43,658 - DEBUG - stack ['$const26.0']
2025-01-31 15:31:43,658 - DEBUG - dispatch pc=30, inst=LOAD_FAST(arg=1, lineno=220)
2025-01-31 15:31:43,658 - DEBUG - stack []
2025-01-31 15:31:43,658 - DEBUG - dispatch pc=32, inst=UNARY_NEGATIVE(arg=None, lineno=220)
2025-01-31 15:31:43,658 - DEBUG - stack ['$b30.1']
2025-01-31 15:31:43,658 - DEBUG - dispatch pc=34, inst=STORE_FAST(arg=4, lineno=220)
2025-01-31 15:31:43,658 - DEBUG - stack ['$32unary_negative.2']
2025-01-31 15:31:43,658 - DEBUG - dispatch pc=36, inst=LOAD_FAST(arg=4, lineno=221)
2025-01-31 15:31:43,658 - DEBUG - stack []
2025-01-31 15:31:43,658 - DEBUG - dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=221)
2025-01-31 15:31:43,658 - DEBUG - stack ['$exp36.3']
2025-01-31 15:31:43,659 - DEBUG - dispatch pc=40, inst=COMPARE_OP(arg=0, lineno=221)
2025-01-31 15:31:43,659 - DEBUG - stack ['$exp36.3', '$const38.4']
2025-01-31 15:31:43,659 - DEBUG - dispatch pc=42, inst=POP_JUMP_IF_FALSE(arg=25, lineno=221)
2025-01-31 15:31:43,659 - DEBUG - stack ['$40compare_op.5']
2025-01-31 15:31:43,659 - DEBUG - end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0), Edge(pc=48, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:43,659 - DEBUG - pending: deque([State(pc_initial=98 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=48 nstack_initial=0)])
2025-01-31 15:31:43,659 - DEBUG - stack: []
2025-01-31 15:31:43,659 - DEBUG - state.pc_initial: State(pc_initial=98 nstack_initial=0)
2025-01-31 15:31:43,659 - DEBUG - dispatch pc=98, inst=LOAD_CONST(arg=6, lineno=232)
2025-01-31 15:31:43,659 - DEBUG - stack []
2025-01-31 15:31:43,659 - DEBUG - dispatch pc=100, inst=STORE_FAST(arg=3, lineno=232)
2025-01-31 15:31:43,659 - DEBUG - stack ['$const98.0']
2025-01-31 15:31:43,659 - DEBUG - dispatch pc=102, inst=LOAD_FAST(arg=1, lineno=233)
2025-01-31 15:31:43,659 - DEBUG - stack []
2025-01-31 15:31:43,659 - DEBUG - dispatch pc=104, inst=STORE_FAST(arg=4, lineno=233)
2025-01-31 15:31:43,659 - DEBUG - stack ['$b102.1']
2025-01-31 15:31:43,659 - DEBUG - end state. edges=[Edge(pc=106, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:43,659 - DEBUG - pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=48 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
2025-01-31 15:31:43,659 - DEBUG - stack: []
2025-01-31 15:31:43,659 - DEBUG - state.pc_initial: State(pc_initial=44 nstack_initial=0)
2025-01-31 15:31:43,659 - DEBUG - dispatch pc=44, inst=LOAD_GLOBAL(arg=0, lineno=222)
2025-01-31 15:31:43,659 - DEBUG - stack []
2025-01-31 15:31:43,659 - DEBUG - dispatch pc=46, inst=RAISE_VARARGS(arg=1, lineno=222)
2025-01-31 15:31:43,659 - DEBUG - stack ['$44load_global.0']
2025-01-31 15:31:43,659 - DEBUG - end state. edges=[]
2025-01-31 15:31:43,659 - DEBUG - pending: deque([State(pc_initial=48 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
2025-01-31 15:31:43,659 - DEBUG - stack: []
2025-01-31 15:31:43,659 - DEBUG - state.pc_initial: State(pc_initial=48 nstack_initial=0)
2025-01-31 15:31:43,659 - DEBUG - dispatch pc=48, inst=LOAD_DEREF(arg=0, lineno=223)
2025-01-31 15:31:43,659 - DEBUG - stack []
2025-01-31 15:31:43,660 - DEBUG - dispatch pc=50, inst=POP_JUMP_IF_FALSE(arg=49, lineno=223)
2025-01-31 15:31:43,660 - DEBUG - stack ['$48load_deref.0']
2025-01-31 15:31:43,660 - DEBUG - end state. edges=[Edge(pc=52, stack=(), blockstack=(), npush=0), Edge(pc=96, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:43,660 - DEBUG - pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=52 nstack_initial=0), State(pc_initial=96 nstack_initial=0)])
2025-01-31 15:31:43,660 - DEBUG - stack: []
2025-01-31 15:31:43,660 - DEBUG - state.pc_initial: State(pc_initial=106 nstack_initial=0)
2025-01-31 15:31:43,660 - DEBUG - dispatch pc=106, inst=LOAD_FAST(arg=4, lineno=234)
2025-01-31 15:31:43,660 - DEBUG - stack []
2025-01-31 15:31:43,660 - DEBUG - dispatch pc=108, inst=LOAD_CONST(arg=7, lineno=234)
2025-01-31 15:31:43,660 - DEBUG - stack ['$exp106.0']
2025-01-31 15:31:43,660 - DEBUG - dispatch pc=110, inst=COMPARE_OP(arg=4, lineno=234)
2025-01-31 15:31:43,660 - DEBUG - stack ['$exp106.0', '$const108.1']
2025-01-31 15:31:43,660 - DEBUG - dispatch pc=112, inst=POP_JUMP_IF_FALSE(arg=66, lineno=234)
2025-01-31 15:31:43,660 - DEBUG - stack ['$110compare_op.2']
2025-01-31 15:31:43,660 - DEBUG - end state. edges=[Edge(pc=114, stack=(), blockstack=(), npush=0), Edge(pc=130, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:43,660 - DEBUG - pending: deque([State(pc_initial=52 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
2025-01-31 15:31:43,660 - DEBUG - stack: []
2025-01-31 15:31:43,660 - DEBUG - state.pc_initial: State(pc_initial=52 nstack_initial=0)
2025-01-31 15:31:43,660 - DEBUG - dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=224)
2025-01-31 15:31:43,660 - DEBUG - stack []
2025-01-31 15:31:43,660 - DEBUG - dispatch pc=54, inst=LOAD_CONST(arg=2, lineno=224)
2025-01-31 15:31:43,660 - DEBUG - stack ['$a52.0']
2025-01-31 15:31:43,660 - DEBUG - dispatch pc=56, inst=COMPARE_OP(arg=2, lineno=224)
2025-01-31 15:31:43,660 - DEBUG - stack ['$a52.0', '$const54.1']
2025-01-31 15:31:43,660 - DEBUG - dispatch pc=58, inst=POP_JUMP_IF_FALSE(arg=39, lineno=224)
2025-01-31 15:31:43,660 - DEBUG - stack ['$56compare_op.2']
2025-01-31 15:31:43,660 - DEBUG - end state. edges=[Edge(pc=60, stack=(), blockstack=(), npush=0), Edge(pc=76, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:43,660 - DEBUG - pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
2025-01-31 15:31:43,661 - DEBUG - stack: []
2025-01-31 15:31:43,661 - DEBUG - state.pc_initial: State(pc_initial=96 nstack_initial=0)
2025-01-31 15:31:43,661 - DEBUG - dispatch pc=96, inst=JUMP_FORWARD(arg=4, lineno=230)
2025-01-31 15:31:43,661 - DEBUG - stack []
2025-01-31 15:31:43,661 - DEBUG - end state. edges=[Edge(pc=106, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:43,661 - DEBUG - pending: deque([State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
2025-01-31 15:31:43,661 - DEBUG - stack: []
2025-01-31 15:31:43,661 - DEBUG - state.pc_initial: State(pc_initial=114 nstack_initial=0)
2025-01-31 15:31:43,661 - DEBUG - dispatch pc=114, inst=LOAD_GLOBAL(arg=2, lineno=236)
2025-01-31 15:31:43,661 - DEBUG - stack []
2025-01-31 15:31:43,661 - DEBUG - dispatch pc=116, inst=LOAD_METHOD(arg=3, lineno=236)
2025-01-31 15:31:43,661 - DEBUG - stack ['$114load_global.0']
2025-01-31 15:31:43,661 - DEBUG - dispatch pc=118, inst=LOAD_FAST(arg=0, lineno=236)
2025-01-31 15:31:43,661 - DEBUG - stack ['$116load_method.1']
2025-01-31 15:31:43,661 - DEBUG - dispatch pc=120, inst=LOAD_GLOBAL(arg=4, lineno=236)
2025-01-31 15:31:43,661 - DEBUG - stack ['$116load_method.1', '$a118.2']
2025-01-31 15:31:43,661 - DEBUG - dispatch pc=122, inst=LOAD_FAST(arg=1, lineno=236)
2025-01-31 15:31:43,661 - DEBUG - stack ['$116load_method.1', '$a118.2', '$120load_global.3']
2025-01-31 15:31:43,661 - DEBUG - dispatch pc=124, inst=CALL_FUNCTION(arg=1, lineno=236)
2025-01-31 15:31:43,661 - DEBUG - stack ['$116load_method.1', '$a118.2', '$120load_global.3', '$b122.4']
2025-01-31 15:31:43,661 - DEBUG - dispatch pc=126, inst=CALL_METHOD(arg=2, lineno=236)
2025-01-31 15:31:43,661 - DEBUG - stack ['$116load_method.1', '$a118.2', '$124call_function.5']
2025-01-31 15:31:43,661 - DEBUG - dispatch pc=128, inst=RETURN_VALUE(arg=None, lineno=236)
2025-01-31 15:31:43,661 - DEBUG - stack ['$126call_method.6']
2025-01-31 15:31:43,661 - DEBUG - end state. edges=[]
2025-01-31 15:31:43,661 - DEBUG - pending: deque([State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
2025-01-31 15:31:43,661 - DEBUG - stack: []
2025-01-31 15:31:43,661 - DEBUG - state.pc_initial: State(pc_initial=130 nstack_initial=0)
2025-01-31 15:31:43,661 - DEBUG - dispatch pc=130, inst=LOAD_FAST(arg=4, lineno=237)
2025-01-31 15:31:43,662 - DEBUG - stack []
2025-01-31 15:31:43,662 - DEBUG - dispatch pc=132, inst=LOAD_CONST(arg=2, lineno=237)
2025-01-31 15:31:43,662 - DEBUG - stack ['$exp130.0']
2025-01-31 15:31:43,662 - DEBUG - dispatch pc=134, inst=COMPARE_OP(arg=3, lineno=237)
2025-01-31 15:31:43,662 - DEBUG - stack ['$exp130.0', '$const132.1']
2025-01-31 15:31:43,662 - DEBUG - dispatch pc=136, inst=POP_JUMP_IF_FALSE(arg=90, lineno=237)
2025-01-31 15:31:43,662 - DEBUG - stack ['$134compare_op.2']
2025-01-31 15:31:43,662 - DEBUG - end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0), Edge(pc=178, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:43,662 - DEBUG - pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=138 nstack_initial=0), State(pc_initial=178 nstack_initial=0)])
2025-01-31 15:31:43,662 - DEBUG - stack: []
2025-01-31 15:31:43,662 - DEBUG - state.pc_initial: State(pc_initial=60 nstack_initial=0)
2025-01-31 15:31:43,662 - DEBUG - dispatch pc=60, inst=LOAD_DEREF(arg=2, lineno=225)
2025-01-31 15:31:43,662 - DEBUG - stack []
2025-01-31 15:31:43,662 - DEBUG - dispatch pc=62, inst=POP_JUMP_IF_FALSE(arg=35, lineno=225)
2025-01-31 15:31:43,662 - DEBUG - stack ['$60load_deref.0']
2025-01-31 15:31:43,662 - DEBUG - end state. edges=[Edge(pc=64, stack=(), blockstack=(), npush=0), Edge(pc=68, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:43,662 - DEBUG - pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=138 nstack_initial=0), State(pc_initial=178 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0)])
2025-01-31 15:31:43,662 - DEBUG - stack: []
2025-01-31 15:31:43,662 - DEBUG - state.pc_initial: State(pc_initial=76 nstack_initial=0)
2025-01-31 15:31:43,662 - DEBUG - dispatch pc=76, inst=LOAD_FAST(arg=0, lineno=229)
2025-01-31 15:31:43,662 - DEBUG - stack []
2025-01-31 15:31:43,662 - DEBUG - dispatch pc=78, inst=LOAD_CONST(arg=1, lineno=229)
2025-01-31 15:31:43,662 - DEBUG - stack ['$a76.0']
2025-01-31 15:31:43,662 - DEBUG - dispatch pc=80, inst=COMPARE_OP(arg=3, lineno=229)
2025-01-31 15:31:43,662 - DEBUG - stack ['$a76.0', '$const78.1']
2025-01-31 15:31:43,662 - DEBUG - dispatch pc=82, inst=POP_JUMP_IF_FALSE(arg=49, lineno=229)
2025-01-31 15:31:43,662 - DEBUG - stack ['$80compare_op.2']
2025-01-31 15:31:43,662 - DEBUG - end state. edges=[Edge(pc=84, stack=(), blockstack=(), npush=0), Edge(pc=96, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:43,663 - DEBUG - pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=138 nstack_initial=0), State(pc_initial=178 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=96 nstack_initial=0)])
2025-01-31 15:31:43,663 - DEBUG - pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=178 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=96 nstack_initial=0)])
2025-01-31 15:31:43,663 - DEBUG - stack: []
2025-01-31 15:31:43,663 - DEBUG - state.pc_initial: State(pc_initial=138 nstack_initial=0)
2025-01-31 15:31:43,663 - DEBUG - dispatch pc=138, inst=LOAD_FAST(arg=4, lineno=238)
2025-01-31 15:31:43,663 - DEBUG - stack []
2025-01-31 15:31:43,663 - DEBUG - dispatch pc=140, inst=LOAD_CONST(arg=1, lineno=238)
2025-01-31 15:31:43,663 - DEBUG - stack ['$exp138.0']
2025-01-31 15:31:43,663 - DEBUG - dispatch pc=142, inst=BINARY_AND(arg=None, lineno=238)
2025-01-31 15:31:43,663 - DEBUG - stack ['$exp138.0', '$const140.1']
2025-01-31 15:31:43,663 - DEBUG - dispatch pc=144, inst=POP_JUMP_IF_FALSE(arg=78, lineno=238)
2025-01-31 15:31:43,663 - DEBUG - stack ['$142binary_and.2']
2025-01-31 15:31:43,663 - DEBUG - end state. edges=[Edge(pc=146, stack=(), blockstack=(), npush=0), Edge(pc=154, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:43,663 - DEBUG - pending: deque([State(pc_initial=178 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0)])
2025-01-31 15:31:43,663 - DEBUG - stack: []
2025-01-31 15:31:43,663 - DEBUG - state.pc_initial: State(pc_initial=178 nstack_initial=0)
2025-01-31 15:31:43,663 - DEBUG - dispatch pc=178, inst=LOAD_FAST(arg=3, lineno=243)
2025-01-31 15:31:43,663 - DEBUG - stack []
2025-01-31 15:31:43,663 - DEBUG - dispatch pc=180, inst=POP_JUMP_IF_FALSE(arg=96, lineno=243)
2025-01-31 15:31:43,663 - DEBUG - stack ['$invert178.0']
2025-01-31 15:31:43,663 - DEBUG - end state. edges=[Edge(pc=182, stack=(), blockstack=(), npush=0), Edge(pc=190, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:43,663 - DEBUG - pending: deque([State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=182 nstack_initial=0), State(pc_initial=190 nstack_initial=0)])
2025-01-31 15:31:43,663 - DEBUG - stack: []
2025-01-31 15:31:43,663 - DEBUG - state.pc_initial: State(pc_initial=64 nstack_initial=0)
2025-01-31 15:31:43,663 - DEBUG - dispatch pc=64, inst=LOAD_DEREF(arg=2, lineno=226)
2025-01-31 15:31:43,663 - DEBUG - stack []
2025-01-31 15:31:43,663 - DEBUG - dispatch pc=66, inst=RETURN_VALUE(arg=None, lineno=226)
2025-01-31 15:31:43,663 - DEBUG - stack ['$64load_deref.0']
2025-01-31 15:31:43,663 - DEBUG - end state. edges=[]
2025-01-31 15:31:43,664 - DEBUG - pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=182 nstack_initial=0), State(pc_initial=190 nstack_initial=0)])
2025-01-31 15:31:43,664 - DEBUG - stack: []
2025-01-31 15:31:43,664 - DEBUG - state.pc_initial: State(pc_initial=68 nstack_initial=0)
2025-01-31 15:31:43,664 - DEBUG - dispatch pc=68, inst=LOAD_GLOBAL(arg=1, lineno=228)
2025-01-31 15:31:43,664 - DEBUG - stack []
2025-01-31 15:31:43,664 - DEBUG - dispatch pc=70, inst=LOAD_CONST(arg=4, lineno=228)
2025-01-31 15:31:43,664 - DEBUG - stack ['$68load_global.0']
2025-01-31 15:31:43,664 - DEBUG - dispatch pc=72, inst=CALL_FUNCTION(arg=1, lineno=228)
2025-01-31 15:31:43,664 - DEBUG - stack ['$68load_global.0', '$const70.1']
2025-01-31 15:31:43,664 - DEBUG - dispatch pc=74, inst=RAISE_VARARGS(arg=1, lineno=228)
2025-01-31 15:31:43,664 - DEBUG - stack ['$72call_function.2']
2025-01-31 15:31:43,664 - DEBUG - end state. edges=[]
2025-01-31 15:31:43,664 - DEBUG - pending: deque([State(pc_initial=84 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=182 nstack_initial=0), State(pc_initial=190 nstack_initial=0)])
2025-01-31 15:31:43,664 - DEBUG - stack: []
2025-01-31 15:31:43,664 - DEBUG - state.pc_initial: State(pc_initial=84 nstack_initial=0)
2025-01-31 15:31:43,664 - DEBUG - dispatch pc=84, inst=LOAD_FAST(arg=0, lineno=229)
2025-01-31 15:31:43,664 - DEBUG - stack []
2025-01-31 15:31:43,664 - DEBUG - dispatch pc=86, inst=LOAD_CONST(arg=5, lineno=229)
2025-01-31 15:31:43,664 - DEBUG - stack ['$a84.0']
2025-01-31 15:31:43,664 - DEBUG - dispatch pc=88, inst=COMPARE_OP(arg=3, lineno=229)
2025-01-31 15:31:43,664 - DEBUG - stack ['$a84.0', '$const86.1']
2025-01-31 15:31:43,664 - DEBUG - dispatch pc=90, inst=POP_JUMP_IF_FALSE(arg=49, lineno=229)
2025-01-31 15:31:43,664 - DEBUG - stack ['$88compare_op.2']
2025-01-31 15:31:43,664 - DEBUG - end state. edges=[Edge(pc=92, stack=(), blockstack=(), npush=0), Edge(pc=96, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:43,664 - DEBUG - pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=182 nstack_initial=0), State(pc_initial=190 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=96 nstack_initial=0)])
2025-01-31 15:31:43,664 - DEBUG - pending: deque([State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=182 nstack_initial=0), State(pc_initial=190 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=96 nstack_initial=0)])
2025-01-31 15:31:43,664 - DEBUG - stack: []
2025-01-31 15:31:43,664 - DEBUG - state.pc_initial: State(pc_initial=146 nstack_initial=0)
2025-01-31 15:31:43,665 - DEBUG - dispatch pc=146, inst=LOAD_FAST(arg=2, lineno=239)
2025-01-31 15:31:43,665 - DEBUG - stack []
2025-01-31 15:31:43,665 - DEBUG - dispatch pc=148, inst=LOAD_FAST(arg=0, lineno=239)
2025-01-31 15:31:43,665 - DEBUG - stack ['$r146.0']
2025-01-31 15:31:43,665 - DEBUG - dispatch pc=150, inst=INPLACE_MULTIPLY(arg=None, lineno=239)
2025-01-31 15:31:43,665 - DEBUG - stack ['$r146.0', '$a148.1']
2025-01-31 15:31:43,665 - DEBUG - dispatch pc=152, inst=STORE_FAST(arg=2, lineno=239)
2025-01-31 15:31:43,665 - DEBUG - stack ['$150inplace_multiply.2']
2025-01-31 15:31:43,665 - DEBUG - end state. edges=[Edge(pc=154, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:43,665 - DEBUG - pending: deque([State(pc_initial=154 nstack_initial=0), State(pc_initial=182 nstack_initial=0), State(pc_initial=190 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=154 nstack_initial=0)])
2025-01-31 15:31:43,665 - DEBUG - stack: []
2025-01-31 15:31:43,665 - DEBUG - state.pc_initial: State(pc_initial=154 nstack_initial=0)
2025-01-31 15:31:43,665 - DEBUG - dispatch pc=154, inst=LOAD_FAST(arg=4, lineno=240)
2025-01-31 15:31:43,665 - DEBUG - stack []
2025-01-31 15:31:43,665 - DEBUG - dispatch pc=156, inst=LOAD_CONST(arg=1, lineno=240)
2025-01-31 15:31:43,665 - DEBUG - stack ['$exp154.0']
2025-01-31 15:31:43,665 - DEBUG - dispatch pc=158, inst=INPLACE_RSHIFT(arg=None, lineno=240)
2025-01-31 15:31:43,665 - DEBUG - stack ['$exp154.0', '$const156.1']
2025-01-31 15:31:43,665 - DEBUG - dispatch pc=160, inst=STORE_FAST(arg=4, lineno=240)
2025-01-31 15:31:43,665 - DEBUG - stack ['$158inplace_rshift.2']
2025-01-31 15:31:43,665 - DEBUG - dispatch pc=162, inst=LOAD_FAST(arg=0, lineno=241)
2025-01-31 15:31:43,665 - DEBUG - stack []
2025-01-31 15:31:43,665 - DEBUG - dispatch pc=164, inst=LOAD_FAST(arg=0, lineno=241)
2025-01-31 15:31:43,665 - DEBUG - stack ['$a162.3']
2025-01-31 15:31:43,665 - DEBUG - dispatch pc=166, inst=INPLACE_MULTIPLY(arg=None, lineno=241)
2025-01-31 15:31:43,665 - DEBUG - stack ['$a162.3', '$a164.4']
2025-01-31 15:31:43,665 - DEBUG - dispatch pc=168, inst=STORE_FAST(arg=0, lineno=241)
2025-01-31 15:31:43,665 - DEBUG - stack ['$166inplace_multiply.5']
2025-01-31 15:31:43,665 - DEBUG - dispatch pc=170, inst=LOAD_FAST(arg=4, lineno=237)
2025-01-31 15:31:43,665 - DEBUG - stack []
2025-01-31 15:31:43,666 - DEBUG - dispatch pc=172, inst=LOAD_CONST(arg=2, lineno=237)
2025-01-31 15:31:43,666 - DEBUG - stack ['$exp170.6']
2025-01-31 15:31:43,666 - DEBUG - dispatch pc=174, inst=COMPARE_OP(arg=3, lineno=237)
2025-01-31 15:31:43,666 - DEBUG - stack ['$exp170.6', '$const172.7']
2025-01-31 15:31:43,666 - DEBUG - dispatch pc=176, inst=POP_JUMP_IF_TRUE(arg=70, lineno=237)
2025-01-31 15:31:43,666 - DEBUG - stack ['$174compare_op.8']
2025-01-31 15:31:43,666 - DEBUG - end state. edges=[Edge(pc=178, stack=(), blockstack=(), npush=0), Edge(pc=138, stack=(), blockstack=(), npush=0)]
2025-01-31 15:31:43,666 - DEBUG - pending: deque([State(pc_initial=182 nstack_initial=0), State(pc_initial=190 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=178 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
2025-01-31 15:31:43,666 - DEBUG - stack: []
2025-01-31 15:31:43,666 - DEBUG - state.pc_initial: State(pc_initial=182 nstack_initial=0)
2025-01-31 15:31:43,666 - DEBUG - dispatch pc=182, inst=LOAD_CONST(arg=8, lineno=243)
2025-01-31 15:31:43,666 - DEBUG - stack []
2025-01-31 15:31:43,666 - DEBUG - dispatch pc=184, inst=LOAD_FAST(arg=2, lineno=243)
2025-01-31 15:31:43,666 - DEBUG - stack ['$const182.0']
2025-01-31 15:31:43,666 - DEBUG - dispatch pc=186, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=243)
2025-01-31 15:31:43,666 - DEBUG - stack ['$const182.0', '$r184.1']
2025-01-31 15:31:43,666 - DEBUG - dispatch pc=188, inst=RETURN_VALUE(arg=None, lineno=243)
2025-01-31 15:31:43,666 - DEBUG - stack ['$186binary_true_divide.2']
2025-01-31 15:31:43,666 - DEBUG - end state. edges=[]
2025-01-31 15:31:43,666 - DEBUG - pending: deque([State(pc_initial=190 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=178 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
2025-01-31 15:31:43,666 - DEBUG - stack: []
2025-01-31 15:31:43,666 - DEBUG - state.pc_initial: State(pc_initial=190 nstack_initial=0)
2025-01-31 15:31:43,666 - DEBUG - dispatch pc=190, inst=LOAD_FAST(arg=2, lineno=243)
2025-01-31 15:31:43,666 - DEBUG - stack []
2025-01-31 15:31:43,666 - DEBUG - dispatch pc=192, inst=RETURN_VALUE(arg=None, lineno=243)
2025-01-31 15:31:43,666 - DEBUG - stack ['$r190.0']
2025-01-31 15:31:43,666 - DEBUG - end state. edges=[]
2025-01-31 15:31:43,666 - DEBUG - pending: deque([State(pc_initial=92 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=178 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
2025-01-31 15:31:43,667 - DEBUG - stack: []
2025-01-31 15:31:43,667 - DEBUG - state.pc_initial: State(pc_initial=92 nstack_initial=0)
2025-01-31 15:31:43,667 - DEBUG - dispatch pc=92, inst=LOAD_CONST(arg=2, lineno=230)
2025-01-31 15:31:43,667 - DEBUG - stack []
2025-01-31 15:31:43,667 - DEBUG - dispatch pc=94, inst=RETURN_VALUE(arg=None, lineno=230)
2025-01-31 15:31:43,667 - DEBUG - stack ['$const92.0']
2025-01-31 15:31:43,667 - DEBUG - end state. edges=[]
2025-01-31 15:31:43,667 - DEBUG - pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=178 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
2025-01-31 15:31:43,667 - DEBUG - pending: deque([State(pc_initial=154 nstack_initial=0), State(pc_initial=178 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
2025-01-31 15:31:43,667 - DEBUG - pending: deque([State(pc_initial=178 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
2025-01-31 15:31:43,667 - DEBUG - pending: deque([State(pc_initial=138 nstack_initial=0)])
2025-01-31 15:31:43,667 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:31:43,667 - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set(),
             State(pc_initial=48 nstack_initial=0): set(),
             State(pc_initial=52 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=64 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set(),
             State(pc_initial=84 nstack_initial=0): set(),
             State(pc_initial=92 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=98 nstack_initial=0): set(),
             State(pc_initial=106 nstack_initial=0): set(),
             State(pc_initial=114 nstack_initial=0): set(),
             State(pc_initial=130 nstack_initial=0): set(),
             State(pc_initial=138 nstack_initial=0): set(),
             State(pc_initial=146 nstack_initial=0): set(),
             State(pc_initial=154 nstack_initial=0): set(),
             State(pc_initial=178 nstack_initial=0): set(),
             State(pc_initial=182 nstack_initial=0): set(),
             State(pc_initial=190 nstack_initial=0): set()})
2025-01-31 15:31:43,667 - DEBUG - defmap: {}
2025-01-31 15:31:43,667 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:43,668 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:43,668 - DEBUG - keep phismap: {}
2025-01-31 15:31:43,668 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-01-31 15:31:43,668 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:31:43,668 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$const4.1'}), (6, {'func': '$2load_deref.0', 'args': ['$const4.1'], 'res': '$6call_function.2'}), (8, {'value': '$6call_function.2'}), (10, {'res': '$10load_deref.3'}), (12, {'res': '$a12.4'}), (14, {'func': '$10load_deref.3', 'args': ['$a12.4'], 'res': '$14call_function.5'}), (16, {'value': '$14call_function.5'}), (18, {'res': '$b18.6'}), (20, {'res': '$const20.7'}), (22, {'lhs': '$b18.6', 'rhs': '$const20.7', 'res': '$22compare_op.8'}), (24, {'pred': '$22compare_op.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: (), 98: ()})
2025-01-31 15:31:43,668 - DEBUG - block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$const26.0'}), (28, {'value': '$const26.0'}), (30, {'res': '$b30.1'}), (32, {'value': '$b30.1', 'res': '$32unary_negative.2'}), (34, {'value': '$32unary_negative.2'}), (36, {'res': '$exp36.3'}), (38, {'res': '$const38.4'}), (40, {'lhs': '$exp36.3', 'rhs': '$const38.4', 'res': '$40compare_op.5'}), (42, {'pred': '$40compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: (), 48: ()})
2025-01-31 15:31:43,668 - DEBUG - block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$44load_global.0'}), (46, {'exc': '$44load_global.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:43,668 - DEBUG - block_infos State(pc_initial=48 nstack_initial=0):
AdaptBlockInfo(insts=((48, {'res': '$48load_deref.0'}), (50, {'pred': '$48load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={52: (), 96: ()})
2025-01-31 15:31:43,668 - DEBUG - block_infos State(pc_initial=52 nstack_initial=0):
AdaptBlockInfo(insts=((52, {'res': '$a52.0'}), (54, {'res': '$const54.1'}), (56, {'lhs': '$a52.0', 'rhs': '$const54.1', 'res': '$56compare_op.2'}), (58, {'pred': '$56compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: (), 76: ()})
2025-01-31 15:31:43,668 - DEBUG - block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$60load_deref.0'}), (62, {'pred': '$60load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={64: (), 68: ()})
2025-01-31 15:31:43,668 - DEBUG - block_infos State(pc_initial=64 nstack_initial=0):
AdaptBlockInfo(insts=((64, {'res': '$64load_deref.0'}), (66, {'retval': '$64load_deref.0', 'castval': '$66return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:43,668 - DEBUG - block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$68load_global.0'}), (70, {'res': '$const70.1'}), (72, {'func': '$68load_global.0', 'args': ['$const70.1'], 'res': '$72call_function.2'}), (74, {'exc': '$72call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:43,668 - DEBUG - block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$a76.0'}), (78, {'res': '$const78.1'}), (80, {'lhs': '$a76.0', 'rhs': '$const78.1', 'res': '$80compare_op.2'}), (82, {'pred': '$80compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={84: (), 96: ()})
2025-01-31 15:31:43,668 - DEBUG - block_infos State(pc_initial=84 nstack_initial=0):
AdaptBlockInfo(insts=((84, {'res': '$a84.0'}), (86, {'res': '$const86.1'}), (88, {'lhs': '$a84.0', 'rhs': '$const86.1', 'res': '$88compare_op.2'}), (90, {'pred': '$88compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={92: (), 96: ()})
2025-01-31 15:31:43,668 - DEBUG - block_infos State(pc_initial=92 nstack_initial=0):
AdaptBlockInfo(insts=((92, {'res': '$const92.0'}), (94, {'retval': '$const92.0', 'castval': '$94return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:43,668 - DEBUG - block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={106: ()})
2025-01-31 15:31:43,668 - DEBUG - block_infos State(pc_initial=98 nstack_initial=0):
AdaptBlockInfo(insts=((98, {'res': '$const98.0'}), (100, {'value': '$const98.0'}), (102, {'res': '$b102.1'}), (104, {'value': '$b102.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={106: ()})
2025-01-31 15:31:43,668 - DEBUG - block_infos State(pc_initial=106 nstack_initial=0):
AdaptBlockInfo(insts=((106, {'res': '$exp106.0'}), (108, {'res': '$const108.1'}), (110, {'lhs': '$exp106.0', 'rhs': '$const108.1', 'res': '$110compare_op.2'}), (112, {'pred': '$110compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={114: (), 130: ()})
2025-01-31 15:31:43,668 - DEBUG - block_infos State(pc_initial=114 nstack_initial=0):
AdaptBlockInfo(insts=((114, {'res': '$114load_global.0'}), (116, {'item': '$114load_global.0', 'res': '$116load_method.1'}), (118, {'res': '$a118.2'}), (120, {'res': '$120load_global.3'}), (122, {'res': '$b122.4'}), (124, {'func': '$120load_global.3', 'args': ['$b122.4'], 'res': '$124call_function.5'}), (126, {'func': '$116load_method.1', 'args': ['$a118.2', '$124call_function.5'], 'res': '$126call_method.6'}), (128, {'retval': '$126call_method.6', 'castval': '$128return_value.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:43,668 - DEBUG - block_infos State(pc_initial=130 nstack_initial=0):
AdaptBlockInfo(insts=((130, {'res': '$exp130.0'}), (132, {'res': '$const132.1'}), (134, {'lhs': '$exp130.0', 'rhs': '$const132.1', 'res': '$134compare_op.2'}), (136, {'pred': '$134compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: (), 178: ()})
2025-01-31 15:31:43,668 - DEBUG - block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$exp138.0'}), (140, {'res': '$const140.1'}), (142, {'lhs': '$exp138.0', 'rhs': '$const140.1', 'res': '$142binary_and.2'}), (144, {'pred': '$142binary_and.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={146: (), 154: ()})
2025-01-31 15:31:43,669 - DEBUG - block_infos State(pc_initial=146 nstack_initial=0):
AdaptBlockInfo(insts=((146, {'res': '$r146.0'}), (148, {'res': '$a148.1'}), (150, {'lhs': '$r146.0', 'rhs': '$a148.1', 'res': '$150inplace_multiply.2'}), (152, {'value': '$150inplace_multiply.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={154: ()})
2025-01-31 15:31:43,669 - DEBUG - block_infos State(pc_initial=154 nstack_initial=0):
AdaptBlockInfo(insts=((154, {'res': '$exp154.0'}), (156, {'res': '$const156.1'}), (158, {'lhs': '$exp154.0', 'rhs': '$const156.1', 'res': '$158inplace_rshift.2'}), (160, {'value': '$158inplace_rshift.2'}), (162, {'res': '$a162.3'}), (164, {'res': '$a164.4'}), (166, {'lhs': '$a162.3', 'rhs': '$a164.4', 'res': '$166inplace_multiply.5'}), (168, {'value': '$166inplace_multiply.5'}), (170, {'res': '$exp170.6'}), (172, {'res': '$const172.7'}), (174, {'lhs': '$exp170.6', 'rhs': '$const172.7', 'res': '$174compare_op.8'}), (176, {'pred': '$174compare_op.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={178: (), 138: ()})
2025-01-31 15:31:43,669 - DEBUG - block_infos State(pc_initial=178 nstack_initial=0):
AdaptBlockInfo(insts=((178, {'res': '$invert178.0'}), (180, {'pred': '$invert178.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={182: (), 190: ()})
2025-01-31 15:31:43,669 - DEBUG - block_infos State(pc_initial=182 nstack_initial=0):
AdaptBlockInfo(insts=((182, {'res': '$const182.0'}), (184, {'res': '$r184.1'}), (186, {'lhs': '$const182.0', 'rhs': '$r184.1', 'res': '$186binary_true_divide.2'}), (188, {'retval': '$186binary_true_divide.2', 'castval': '$188return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:43,669 - DEBUG - block_infos State(pc_initial=190 nstack_initial=0):
AdaptBlockInfo(insts=((190, {'res': '$r190.0'}), (192, {'retval': '$r190.0', 'castval': '$192return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:43,671 - DEBUG - label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    $2load_deref.0 = freevar(tp: float64)    ['$2load_deref.0']
    $const4.1 = const(int, 1)                ['$const4.1']
    r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_deref.0', '$const4.1', 'r']
    $10load_deref.3 = freevar(tp: float64)   ['$10load_deref.3']
    a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None) ['$10load_deref.3', 'a', 'a.1']
    $const20.7 = const(int, 0)               ['$const20.7']
    $22compare_op.8 = b < $const20.7         ['$22compare_op.8', '$const20.7', 'b']
    bool24 = global(bool: <class 'bool'>)    ['bool24']
    $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None) ['$22compare_op.8', '$24pred', 'bool24']
    branch $24pred, 26, 98                   ['$24pred']
label 26:
    invert = const(bool, True)               ['invert']
    exp = unary(fn=<built-in function neg>, value=b) ['b', 'exp']
    $const38.4 = const(int, 0)               ['$const38.4']
    $40compare_op.5 = exp < $const38.4       ['$40compare_op.5', '$const38.4', 'exp']
    bool42 = global(bool: <class 'bool'>)    ['bool42']
    $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None) ['$40compare_op.5', '$42pred', 'bool42']
    branch $42pred, 44, 48                   ['$42pred']
label 44:
    $44load_global.0 = global(OverflowError: <class 'OverflowError'>) ['$44load_global.0']
    raise $44load_global.0                   ['$44load_global.0']
label 48:
    $48load_deref.0 = freevar(is_integer: False) ['$48load_deref.0']
    bool50 = global(bool: <class 'bool'>)    ['bool50']
    $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None) ['$48load_deref.0', '$50pred', 'bool50']
    branch $50pred, 52, 96                   ['$50pred']
label 52:
    $const54.1 = const(int, 0)               ['$const54.1']
    $56compare_op.2 = a.1 == $const54.1      ['$56compare_op.2', '$const54.1', 'a.1']
    bool58 = global(bool: <class 'bool'>)    ['bool58']
    $58pred = call bool58($56compare_op.2, func=bool58, args=(Var($56compare_op.2, numbers.py:224),), kws=(), vararg=None, varkwarg=None, target=None) ['$56compare_op.2', '$58pred', 'bool58']
    branch $58pred, 60, 76                   ['$58pred']
label 60:
    $60load_deref.0 = freevar(zerodiv_return: False) ['$60load_deref.0']
    bool62 = global(bool: <class 'bool'>)    ['bool62']
    $62pred = call bool62($60load_deref.0, func=bool62, args=(Var($60load_deref.0, numbers.py:225),), kws=(), vararg=None, varkwarg=None, target=None) ['$60load_deref.0', '$62pred', 'bool62']
    branch $62pred, 64, 68                   ['$62pred']
label 64:
    $64load_deref.0 = freevar(zerodiv_return: False) ['$64load_deref.0']
    $66return_value.1 = cast(value=$64load_deref.0) ['$64load_deref.0', '$66return_value.1']
    return $66return_value.1                 ['$66return_value.1']
label 68:
    $68load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>) ['$68load_global.0']
    $const70.1 = const(str, 0 cannot be raised to a negative power) ['$const70.1']
    $72call_function.2 = call $68load_global.0($const70.1, func=$68load_global.0, args=[Var($const70.1, numbers.py:228)], kws=(), vararg=None, varkwarg=None, target=None) ['$68load_global.0', '$72call_function.2', '$const70.1']
    raise $72call_function.2                 ['$72call_function.2']
label 76:
    $const78.1 = const(int, 1)               ['$const78.1']
    $80compare_op.2 = a.1 != $const78.1      ['$80compare_op.2', '$const78.1', 'a.1']
    bool82 = global(bool: <class 'bool'>)    ['bool82']
    $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None) ['$80compare_op.2', '$82pred', 'bool82']
    branch $82pred, 84, 96                   ['$82pred']
label 84:
    $const86.1 = const(int, -1)              ['$const86.1']
    $88compare_op.2 = a.1 != $const86.1      ['$88compare_op.2', '$const86.1', 'a.1']
    bool90 = global(bool: <class 'bool'>)    ['bool90']
    $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None) ['$88compare_op.2', '$90pred', 'bool90']
    branch $90pred, 92, 96                   ['$90pred']
label 92:
    $const92.0 = const(int, 0)               ['$const92.0']
    $94return_value.1 = cast(value=$const92.0) ['$94return_value.1', '$const92.0']
    return $94return_value.1                 ['$94return_value.1']
label 96:
    jump 106                                 []
label 98:
    invert = const(bool, False)              ['invert']
    exp = b                                  ['b', 'exp']
    jump 106                                 []
label 106:
    $const108.1 = const(int, 65536)          ['$const108.1']
    $110compare_op.2 = exp > $const108.1     ['$110compare_op.2', '$const108.1', 'exp']
    bool112 = global(bool: <class 'bool'>)   ['bool112']
    $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None) ['$110compare_op.2', '$112pred', 'bool112']
    branch $112pred, 114, 130                ['$112pred']
label 114:
    $114load_global.0 = global(math: <module 'math' from '/home/strain/miniconda3/envs/applio/lib/python3.10/lib-dynload/math.cpython-310-x86_64-linux-gnu.so'>) ['$114load_global.0']
    $116load_method.1 = getattr(value=$114load_global.0, attr=pow) ['$114load_global.0', '$116load_method.1']
    $120load_global.3 = global(float: <class 'float'>) ['$120load_global.3']
    $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None) ['$120load_global.3', '$124call_function.5', 'b']
    $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None) ['$116load_method.1', '$124call_function.5', '$126call_method.6', 'a.1']
    $128return_value.7 = cast(value=$126call_method.6) ['$126call_method.6', '$128return_value.7']
    return $128return_value.7                ['$128return_value.7']
label 130:
    $const132.1 = const(int, 0)              ['$const132.1']
    $134compare_op.2 = exp != $const132.1    ['$134compare_op.2', '$const132.1', 'exp']
    bool136 = global(bool: <class 'bool'>)   ['bool136']
    $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None) ['$134compare_op.2', '$136pred', 'bool136']
    branch $136pred, 138, 178                ['$136pred']
label 138:
    $const140.1 = const(int, 1)              ['$const140.1']
    $142binary_and.2 = exp & $const140.1     ['$142binary_and.2', '$const140.1', 'exp']
    bool144 = global(bool: <class 'bool'>)   ['bool144']
    $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None) ['$142binary_and.2', '$144pred', 'bool144']
    branch $144pred, 146, 154                ['$144pred']
label 146:
    $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined) ['$150inplace_multiply.2', 'a.1', 'r']
    r = $150inplace_multiply.2               ['$150inplace_multiply.2', 'r']
    jump 154                                 []
label 154:
    $const156.1 = const(int, 1)              ['$const156.1']
    $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined) ['$158inplace_rshift.2', '$const156.1', 'exp']
    exp = $158inplace_rshift.2               ['$158inplace_rshift.2', 'exp']
    $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined) ['$166inplace_multiply.5', 'a.1', 'a.1']
    a.1 = $166inplace_multiply.5             ['$166inplace_multiply.5', 'a.1']
    $const172.7 = const(int, 0)              ['$const172.7']
    $174compare_op.8 = exp != $const172.7    ['$174compare_op.8', '$const172.7', 'exp']
    bool176 = global(bool: <class 'bool'>)   ['bool176']
    $176pred = call bool176($174compare_op.8, func=bool176, args=(Var($174compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None) ['$174compare_op.8', '$176pred', 'bool176']
    branch $176pred, 138, 178                ['$176pred']
label 178:
    bool180 = global(bool: <class 'bool'>)   ['bool180']
    $180pred = call bool180(invert, func=bool180, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None) ['$180pred', 'bool180', 'invert']
    branch $180pred, 182, 190                ['$180pred']
label 182:
    $const182.0 = const(float, 1.0)          ['$const182.0']
    $186binary_true_divide.2 = $const182.0 / r ['$186binary_true_divide.2', '$const182.0', 'r']
    $188return_value.3 = cast(value=$186binary_true_divide.2) ['$186binary_true_divide.2', '$188return_value.3']
    return $188return_value.3                ['$188return_value.3']
label 190:
    $192return_value.1 = cast(value=r)       ['$192return_value.1', 'r']
    return $192return_value.1                ['$192return_value.1']

2025-01-31 15:31:43,681 - DEBUG - ==== SSA block analysis pass on 0
2025-01-31 15:31:43,681 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e851a4a0>
2025-01-31 15:31:43,681 - DEBUG - on stmt: a = arg(0, name=a)
2025-01-31 15:31:43,681 - DEBUG - on stmt: b = arg(1, name=b)
2025-01-31 15:31:43,681 - DEBUG - on stmt: $2load_deref.0 = freevar(tp: float64)
2025-01-31 15:31:43,681 - DEBUG - on stmt: $const4.1 = const(int, 1)
2025-01-31 15:31:43,681 - DEBUG - on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,681 - DEBUG - on stmt: $10load_deref.3 = freevar(tp: float64)
2025-01-31 15:31:43,681 - DEBUG - on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,681 - DEBUG - on stmt: $const20.7 = const(int, 0)
2025-01-31 15:31:43,681 - DEBUG - on stmt: $22compare_op.8 = b < $const20.7
2025-01-31 15:31:43,681 - DEBUG - on stmt: bool24 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,681 - DEBUG - on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,681 - DEBUG - on stmt: branch $24pred, 26, 98
2025-01-31 15:31:43,681 - DEBUG - ==== SSA block analysis pass on 26
2025-01-31 15:31:43,681 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e851a4a0>
2025-01-31 15:31:43,681 - DEBUG - on stmt: invert = const(bool, True)
2025-01-31 15:31:43,681 - DEBUG - on stmt: exp = unary(fn=<built-in function neg>, value=b)
2025-01-31 15:31:43,681 - DEBUG - on stmt: $const38.4 = const(int, 0)
2025-01-31 15:31:43,681 - DEBUG - on stmt: $40compare_op.5 = exp < $const38.4
2025-01-31 15:31:43,681 - DEBUG - on stmt: bool42 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,681 - DEBUG - on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,682 - DEBUG - on stmt: branch $42pred, 44, 48
2025-01-31 15:31:43,682 - DEBUG - ==== SSA block analysis pass on 44
2025-01-31 15:31:43,682 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e851a4a0>
2025-01-31 15:31:43,682 - DEBUG - on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
2025-01-31 15:31:43,682 - DEBUG - on stmt: <static> raise <class 'OverflowError'>
2025-01-31 15:31:43,682 - DEBUG - ==== SSA block analysis pass on 48
2025-01-31 15:31:43,682 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e851a4a0>
2025-01-31 15:31:43,682 - DEBUG - on stmt: $48load_deref.0 = freevar(is_integer: False)
2025-01-31 15:31:43,682 - DEBUG - on stmt: bool50 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,682 - DEBUG - on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,682 - DEBUG - on stmt: jump 96
2025-01-31 15:31:43,682 - DEBUG - ==== SSA block analysis pass on 96
2025-01-31 15:31:43,682 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e851a4a0>
2025-01-31 15:31:43,682 - DEBUG - on stmt: jump 106
2025-01-31 15:31:43,682 - DEBUG - ==== SSA block analysis pass on 98
2025-01-31 15:31:43,682 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e851a4a0>
2025-01-31 15:31:43,682 - DEBUG - on stmt: invert = const(bool, False)
2025-01-31 15:31:43,682 - DEBUG - on stmt: exp = b
2025-01-31 15:31:43,682 - DEBUG - on stmt: jump 106
2025-01-31 15:31:43,682 - DEBUG - ==== SSA block analysis pass on 106
2025-01-31 15:31:43,682 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e851a4a0>
2025-01-31 15:31:43,682 - DEBUG - on stmt: $const108.1 = const(int, 65536)
2025-01-31 15:31:43,682 - DEBUG - on stmt: $110compare_op.2 = exp > $const108.1
2025-01-31 15:31:43,682 - DEBUG - on stmt: bool112 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,682 - DEBUG - on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,682 - DEBUG - on stmt: branch $112pred, 114, 130
2025-01-31 15:31:43,682 - DEBUG - ==== SSA block analysis pass on 114
2025-01-31 15:31:43,683 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e851a4a0>
2025-01-31 15:31:43,683 - DEBUG - on stmt: $114load_global.0 = global(math: <module 'math' from '/home/strain/miniconda3/envs/applio/lib/python3.10/lib-dynload/math.cpython-310-x86_64-linux-gnu.so'>)
2025-01-31 15:31:43,683 - DEBUG - on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
2025-01-31 15:31:43,683 - DEBUG - on stmt: $120load_global.3 = global(float: <class 'float'>)
2025-01-31 15:31:43,683 - DEBUG - on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,683 - DEBUG - on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,683 - DEBUG - on stmt: $128return_value.7 = cast(value=$126call_method.6)
2025-01-31 15:31:43,683 - DEBUG - on stmt: return $128return_value.7
2025-01-31 15:31:43,683 - DEBUG - ==== SSA block analysis pass on 130
2025-01-31 15:31:43,683 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e851a4a0>
2025-01-31 15:31:43,683 - DEBUG - on stmt: $const132.1 = const(int, 0)
2025-01-31 15:31:43,683 - DEBUG - on stmt: $134compare_op.2 = exp != $const132.1
2025-01-31 15:31:43,683 - DEBUG - on stmt: bool136 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,683 - DEBUG - on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,683 - DEBUG - on stmt: branch $136pred, 138, 178
2025-01-31 15:31:43,683 - DEBUG - ==== SSA block analysis pass on 138
2025-01-31 15:31:43,683 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e851a4a0>
2025-01-31 15:31:43,683 - DEBUG - on stmt: $const140.1 = const(int, 1)
2025-01-31 15:31:43,683 - DEBUG - on stmt: $142binary_and.2 = exp & $const140.1
2025-01-31 15:31:43,683 - DEBUG - on stmt: bool144 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,683 - DEBUG - on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,683 - DEBUG - on stmt: branch $144pred, 146, 154
2025-01-31 15:31:43,683 - DEBUG - ==== SSA block analysis pass on 146
2025-01-31 15:31:43,683 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e851a4a0>
2025-01-31 15:31:43,683 - DEBUG - on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,684 - DEBUG - on stmt: r = $150inplace_multiply.2
2025-01-31 15:31:43,684 - DEBUG - on stmt: jump 154
2025-01-31 15:31:43,684 - DEBUG - ==== SSA block analysis pass on 154
2025-01-31 15:31:43,684 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e851a4a0>
2025-01-31 15:31:43,684 - DEBUG - on stmt: $const156.1 = const(int, 1)
2025-01-31 15:31:43,684 - DEBUG - on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,684 - DEBUG - on stmt: exp = $158inplace_rshift.2
2025-01-31 15:31:43,684 - DEBUG - on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,684 - DEBUG - on stmt: a.1 = $166inplace_multiply.5
2025-01-31 15:31:43,684 - DEBUG - on stmt: $const172.7 = const(int, 0)
2025-01-31 15:31:43,684 - DEBUG - on stmt: $174compare_op.8 = exp != $const172.7
2025-01-31 15:31:43,684 - DEBUG - on stmt: bool176 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,684 - DEBUG - on stmt: $176pred = call bool176($174compare_op.8, func=bool176, args=(Var($174compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,684 - DEBUG - on stmt: branch $176pred, 138, 178
2025-01-31 15:31:43,684 - DEBUG - ==== SSA block analysis pass on 178
2025-01-31 15:31:43,684 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e851a4a0>
2025-01-31 15:31:43,684 - DEBUG - on stmt: bool180 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,684 - DEBUG - on stmt: $180pred = call bool180(invert, func=bool180, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,684 - DEBUG - on stmt: branch $180pred, 182, 190
2025-01-31 15:31:43,684 - DEBUG - ==== SSA block analysis pass on 182
2025-01-31 15:31:43,684 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e851a4a0>
2025-01-31 15:31:43,684 - DEBUG - on stmt: $const182.0 = const(float, 1.0)
2025-01-31 15:31:43,684 - DEBUG - on stmt: $186binary_true_divide.2 = $const182.0 / r
2025-01-31 15:31:43,684 - DEBUG - on stmt: $188return_value.3 = cast(value=$186binary_true_divide.2)
2025-01-31 15:31:43,684 - DEBUG - on stmt: return $188return_value.3
2025-01-31 15:31:43,685 - DEBUG - ==== SSA block analysis pass on 190
2025-01-31 15:31:43,685 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e851a4a0>
2025-01-31 15:31:43,685 - DEBUG - on stmt: $192return_value.1 = cast(value=r)
2025-01-31 15:31:43,685 - DEBUG - on stmt: return $192return_value.1
2025-01-31 15:31:43,685 - DEBUG - defs defaultdict(<class 'list'>,
            {'$10load_deref.3': [(<numba.core.ir.Assign object at 0x7c89e8759930>,
                                  0)],
             '$110compare_op.2': [(<numba.core.ir.Assign object at 0x7c89e87bd690>,
                                   106)],
             '$112pred': [(<numba.core.ir.Assign object at 0x7c89e87bca30>,
                           106)],
             '$114load_global.0': [(<numba.core.ir.Assign object at 0x7c89e87be7a0>,
                                    114)],
             '$116load_method.1': [(<numba.core.ir.Assign object at 0x7c89e87be2f0>,
                                    114)],
             '$120load_global.3': [(<numba.core.ir.Assign object at 0x7c89e87bdc00>,
                                    114)],
             '$124call_function.5': [(<numba.core.ir.Assign object at 0x7c89e87bef20>,
                                      114)],
             '$126call_method.6': [(<numba.core.ir.Assign object at 0x7c89e87bdcf0>,
                                    114)],
             '$128return_value.7': [(<numba.core.ir.Assign object at 0x7c89e87bf550>,
                                     114)],
             '$134compare_op.2': [(<numba.core.ir.Assign object at 0x7c89e87bf9a0>,
                                   130)],
             '$136pred': [(<numba.core.ir.Assign object at 0x7c89e87bf700>,
                           130)],
             '$142binary_and.2': [(<numba.core.ir.Assign object at 0x7c89e87bf670>,
                                   138)],
             '$144pred': [(<numba.core.ir.Assign object at 0x7c89e87bf8b0>,
                           138)],
             '$150inplace_multiply.2': [(<numba.core.ir.Assign object at 0x7c89e8228f40>,
                                         146)],
             '$158inplace_rshift.2': [(<numba.core.ir.Assign object at 0x7c89e874b8b0>,
                                       154)],
             '$166inplace_multiply.5': [(<numba.core.ir.Assign object at 0x7c89e874bf10>,
                                         154)],
             '$174compare_op.8': [(<numba.core.ir.Assign object at 0x7c89e8749ea0>,
                                   154)],
             '$176pred': [(<numba.core.ir.Assign object at 0x7c89e874aad0>,
                           154)],
             '$180pred': [(<numba.core.ir.Assign object at 0x7c89e8749f60>,
                           178)],
             '$186binary_true_divide.2': [(<numba.core.ir.Assign object at 0x7c89e87493c0>,
                                           182)],
             '$188return_value.3': [(<numba.core.ir.Assign object at 0x7c89e8749240>,
                                     182)],
             '$192return_value.1': [(<numba.core.ir.Assign object at 0x7c89e8748c70>,
                                     190)],
             '$22compare_op.8': [(<numba.core.ir.Assign object at 0x7c89e875ac50>,
                                  0)],
             '$24pred': [(<numba.core.ir.Assign object at 0x7c89e87592a0>, 0)],
             '$2load_deref.0': [(<numba.core.ir.Assign object at 0x7c89e8759480>,
                                 0)],
             '$40compare_op.5': [(<numba.core.ir.Assign object at 0x7c89e8758fd0>,
                                  26)],
             '$42pred': [(<numba.core.ir.Assign object at 0x7c89e875ba60>, 26)],
             '$44load_global.0': [(<numba.core.ir.Assign object at 0x7c89e875b970>,
                                   44)],
             '$48load_deref.0': [(<numba.core.ir.Assign object at 0x7c89e875a1a0>,
                                  48)],
             '$50pred': [(<numba.core.ir.Assign object at 0x7c89e8758eb0>, 48)],
             '$const108.1': [(<numba.core.ir.Assign object at 0x7c89e87bc580>,
                              106)],
             '$const132.1': [(<numba.core.ir.Assign object at 0x7c89e87bf5b0>,
                              130)],
             '$const140.1': [(<numba.core.ir.Assign object at 0x7c89e87bf640>,
                              138)],
             '$const156.1': [(<numba.core.ir.Assign object at 0x7c89e874bee0>,
                              154)],
             '$const172.7': [(<numba.core.ir.Assign object at 0x7c89e874a2f0>,
                              154)],
             '$const182.0': [(<numba.core.ir.Assign object at 0x7c89e8749450>,
                              182)],
             '$const20.7': [(<numba.core.ir.Assign object at 0x7c89e87595d0>,
                             0)],
             '$const38.4': [(<numba.core.ir.Assign object at 0x7c89e875bcd0>,
                             26)],
             '$const4.1': [(<numba.core.ir.Assign object at 0x7c89e875b9d0>,
                            0)],
             'a': [(<numba.core.ir.Assign object at 0x7c89e851b040>, 0)],
             'a.1': [(<numba.core.ir.Assign object at 0x7c89e8759bd0>, 0),
                     (<numba.core.ir.Assign object at 0x7c89e874abc0>, 154)],
             'b': [(<numba.core.ir.Assign object at 0x7c89e851a470>, 0)],
             'bool112': [(<numba.core.ir.Assign object at 0x7c89e87bc640>,
                          106)],
             'bool136': [(<numba.core.ir.Assign object at 0x7c89e87bece0>,
                          130)],
             'bool144': [(<numba.core.ir.Assign object at 0x7c89e87be770>,
                          138)],
             'bool176': [(<numba.core.ir.Assign object at 0x7c89e874a9e0>,
                          154)],
             'bool180': [(<numba.core.ir.Assign object at 0x7c89e8749810>,
                          178)],
             'bool24': [(<numba.core.ir.Assign object at 0x7c89e875b0a0>, 0)],
             'bool42': [(<numba.core.ir.Assign object at 0x7c89e875b8e0>, 26)],
             'bool50': [(<numba.core.ir.Assign object at 0x7c89e87587c0>, 48)],
             'exp': [(<numba.core.ir.Assign object at 0x7c89e8759600>, 26),
                     (<numba.core.ir.Assign object at 0x7c89e87bd570>, 98),
                     (<numba.core.ir.Assign object at 0x7c89e874a7a0>, 154)],
             'invert': [(<numba.core.ir.Assign object at 0x7c89e8759000>, 26),
                        (<numba.core.ir.Assign object at 0x7c89e87bca00>, 98)],
             'r': [(<numba.core.ir.Assign object at 0x7c89e87591e0>, 0),
                   (<numba.core.ir.Assign object at 0x7c89e87a6d70>, 146)]})
2025-01-31 15:31:43,686 - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x7c89e851a4a0>
2025-01-31 15:31:43,686 - DEBUG - Fix SSA violator on var r
2025-01-31 15:31:43,686 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-31 15:31:43,686 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871e4a0>
2025-01-31 15:31:43,686 - DEBUG - on stmt: a = arg(0, name=a)
2025-01-31 15:31:43,686 - DEBUG - on stmt: b = arg(1, name=b)
2025-01-31 15:31:43,686 - DEBUG - on stmt: $2load_deref.0 = freevar(tp: float64)
2025-01-31 15:31:43,686 - DEBUG - on stmt: $const4.1 = const(int, 1)
2025-01-31 15:31:43,686 - DEBUG - on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,686 - DEBUG - first assign: r
2025-01-31 15:31:43,686 - DEBUG - replaced with: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,686 - DEBUG - on stmt: $10load_deref.3 = freevar(tp: float64)
2025-01-31 15:31:43,686 - DEBUG - on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,686 - DEBUG - on stmt: $const20.7 = const(int, 0)
2025-01-31 15:31:43,686 - DEBUG - on stmt: $22compare_op.8 = b < $const20.7
2025-01-31 15:31:43,686 - DEBUG - on stmt: bool24 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,686 - DEBUG - on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,686 - DEBUG - on stmt: branch $24pred, 26, 98
2025-01-31 15:31:43,686 - DEBUG - ==== SSA block rewrite pass on 26
2025-01-31 15:31:43,686 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871e4a0>
2025-01-31 15:31:43,686 - DEBUG - on stmt: invert = const(bool, True)
2025-01-31 15:31:43,687 - DEBUG - on stmt: exp = unary(fn=<built-in function neg>, value=b)
2025-01-31 15:31:43,687 - DEBUG - on stmt: $const38.4 = const(int, 0)
2025-01-31 15:31:43,687 - DEBUG - on stmt: $40compare_op.5 = exp < $const38.4
2025-01-31 15:31:43,687 - DEBUG - on stmt: bool42 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,687 - DEBUG - on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,687 - DEBUG - on stmt: branch $42pred, 44, 48
2025-01-31 15:31:43,687 - DEBUG - ==== SSA block rewrite pass on 44
2025-01-31 15:31:43,687 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871e4a0>
2025-01-31 15:31:43,687 - DEBUG - on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
2025-01-31 15:31:43,687 - DEBUG - on stmt: <static> raise <class 'OverflowError'>
2025-01-31 15:31:43,687 - DEBUG - ==== SSA block rewrite pass on 48
2025-01-31 15:31:43,687 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871e4a0>
2025-01-31 15:31:43,687 - DEBUG - on stmt: $48load_deref.0 = freevar(is_integer: False)
2025-01-31 15:31:43,687 - DEBUG - on stmt: bool50 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,687 - DEBUG - on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,687 - DEBUG - on stmt: jump 96
2025-01-31 15:31:43,687 - DEBUG - ==== SSA block rewrite pass on 96
2025-01-31 15:31:43,687 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871e4a0>
2025-01-31 15:31:43,687 - DEBUG - on stmt: jump 106
2025-01-31 15:31:43,687 - DEBUG - ==== SSA block rewrite pass on 98
2025-01-31 15:31:43,687 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871e4a0>
2025-01-31 15:31:43,687 - DEBUG - on stmt: invert = const(bool, False)
2025-01-31 15:31:43,687 - DEBUG - on stmt: exp = b
2025-01-31 15:31:43,687 - DEBUG - on stmt: jump 106
2025-01-31 15:31:43,687 - DEBUG - ==== SSA block rewrite pass on 106
2025-01-31 15:31:43,687 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871e4a0>
2025-01-31 15:31:43,687 - DEBUG - on stmt: $const108.1 = const(int, 65536)
2025-01-31 15:31:43,687 - DEBUG - on stmt: $110compare_op.2 = exp > $const108.1
2025-01-31 15:31:43,687 - DEBUG - on stmt: bool112 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,687 - DEBUG - on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,688 - DEBUG - on stmt: branch $112pred, 114, 130
2025-01-31 15:31:43,688 - DEBUG - ==== SSA block rewrite pass on 114
2025-01-31 15:31:43,688 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871e4a0>
2025-01-31 15:31:43,688 - DEBUG - on stmt: $114load_global.0 = global(math: <module 'math' from '/home/strain/miniconda3/envs/applio/lib/python3.10/lib-dynload/math.cpython-310-x86_64-linux-gnu.so'>)
2025-01-31 15:31:43,688 - DEBUG - on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
2025-01-31 15:31:43,688 - DEBUG - on stmt: $120load_global.3 = global(float: <class 'float'>)
2025-01-31 15:31:43,688 - DEBUG - on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,688 - DEBUG - on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,688 - DEBUG - on stmt: $128return_value.7 = cast(value=$126call_method.6)
2025-01-31 15:31:43,688 - DEBUG - on stmt: return $128return_value.7
2025-01-31 15:31:43,688 - DEBUG - ==== SSA block rewrite pass on 130
2025-01-31 15:31:43,688 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871e4a0>
2025-01-31 15:31:43,688 - DEBUG - on stmt: $const132.1 = const(int, 0)
2025-01-31 15:31:43,688 - DEBUG - on stmt: $134compare_op.2 = exp != $const132.1
2025-01-31 15:31:43,688 - DEBUG - on stmt: bool136 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,688 - DEBUG - on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,688 - DEBUG - on stmt: branch $136pred, 138, 178
2025-01-31 15:31:43,688 - DEBUG - ==== SSA block rewrite pass on 138
2025-01-31 15:31:43,688 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871e4a0>
2025-01-31 15:31:43,688 - DEBUG - on stmt: $const140.1 = const(int, 1)
2025-01-31 15:31:43,688 - DEBUG - on stmt: $142binary_and.2 = exp & $const140.1
2025-01-31 15:31:43,688 - DEBUG - on stmt: bool144 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,688 - DEBUG - on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,688 - DEBUG - on stmt: branch $144pred, 146, 154
2025-01-31 15:31:43,688 - DEBUG - ==== SSA block rewrite pass on 146
2025-01-31 15:31:43,688 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871e4a0>
2025-01-31 15:31:43,688 - DEBUG - on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,688 - DEBUG - on stmt: r = $150inplace_multiply.2
2025-01-31 15:31:43,689 - DEBUG - replaced with: r.1 = $150inplace_multiply.2
2025-01-31 15:31:43,689 - DEBUG - on stmt: jump 154
2025-01-31 15:31:43,689 - DEBUG - ==== SSA block rewrite pass on 154
2025-01-31 15:31:43,689 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871e4a0>
2025-01-31 15:31:43,689 - DEBUG - on stmt: $const156.1 = const(int, 1)
2025-01-31 15:31:43,689 - DEBUG - on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,689 - DEBUG - on stmt: exp = $158inplace_rshift.2
2025-01-31 15:31:43,689 - DEBUG - on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,689 - DEBUG - on stmt: a.1 = $166inplace_multiply.5
2025-01-31 15:31:43,689 - DEBUG - on stmt: $const172.7 = const(int, 0)
2025-01-31 15:31:43,689 - DEBUG - on stmt: $174compare_op.8 = exp != $const172.7
2025-01-31 15:31:43,689 - DEBUG - on stmt: bool176 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,689 - DEBUG - on stmt: $176pred = call bool176($174compare_op.8, func=bool176, args=(Var($174compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,689 - DEBUG - on stmt: branch $176pred, 138, 178
2025-01-31 15:31:43,689 - DEBUG - ==== SSA block rewrite pass on 178
2025-01-31 15:31:43,689 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871e4a0>
2025-01-31 15:31:43,689 - DEBUG - on stmt: bool180 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,689 - DEBUG - on stmt: $180pred = call bool180(invert, func=bool180, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,689 - DEBUG - on stmt: branch $180pred, 182, 190
2025-01-31 15:31:43,689 - DEBUG - ==== SSA block rewrite pass on 182
2025-01-31 15:31:43,689 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871e4a0>
2025-01-31 15:31:43,689 - DEBUG - on stmt: $const182.0 = const(float, 1.0)
2025-01-31 15:31:43,689 - DEBUG - on stmt: $186binary_true_divide.2 = $const182.0 / r
2025-01-31 15:31:43,689 - DEBUG - on stmt: $188return_value.3 = cast(value=$186binary_true_divide.2)
2025-01-31 15:31:43,689 - DEBUG - on stmt: return $188return_value.3
2025-01-31 15:31:43,689 - DEBUG - ==== SSA block rewrite pass on 190
2025-01-31 15:31:43,689 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871e4a0>
2025-01-31 15:31:43,689 - DEBUG - on stmt: $192return_value.1 = cast(value=r)
2025-01-31 15:31:43,689 - DEBUG - on stmt: return $192return_value.1
2025-01-31 15:31:43,690 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7c89e871e020>],
             146: [<numba.core.ir.Assign object at 0x7c89e8749c00>]})
2025-01-31 15:31:43,690 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-31 15:31:43,690 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e4a0>
2025-01-31 15:31:43,690 - DEBUG - on stmt: a = arg(0, name=a)
2025-01-31 15:31:43,690 - DEBUG - on stmt: b = arg(1, name=b)
2025-01-31 15:31:43,690 - DEBUG - on stmt: $2load_deref.0 = freevar(tp: float64)
2025-01-31 15:31:43,690 - DEBUG - on stmt: $const4.1 = const(int, 1)
2025-01-31 15:31:43,690 - DEBUG - on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,690 - DEBUG - on stmt: $10load_deref.3 = freevar(tp: float64)
2025-01-31 15:31:43,690 - DEBUG - on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,690 - DEBUG - on stmt: $const20.7 = const(int, 0)
2025-01-31 15:31:43,690 - DEBUG - on stmt: $22compare_op.8 = b < $const20.7
2025-01-31 15:31:43,690 - DEBUG - on stmt: bool24 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,690 - DEBUG - on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,690 - DEBUG - on stmt: branch $24pred, 26, 98
2025-01-31 15:31:43,690 - DEBUG - ==== SSA block rewrite pass on 26
2025-01-31 15:31:43,690 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e4a0>
2025-01-31 15:31:43,690 - DEBUG - on stmt: invert = const(bool, True)
2025-01-31 15:31:43,690 - DEBUG - on stmt: exp = unary(fn=<built-in function neg>, value=b)
2025-01-31 15:31:43,690 - DEBUG - on stmt: $const38.4 = const(int, 0)
2025-01-31 15:31:43,690 - DEBUG - on stmt: $40compare_op.5 = exp < $const38.4
2025-01-31 15:31:43,690 - DEBUG - on stmt: bool42 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,690 - DEBUG - on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,690 - DEBUG - on stmt: branch $42pred, 44, 48
2025-01-31 15:31:43,691 - DEBUG - ==== SSA block rewrite pass on 44
2025-01-31 15:31:43,691 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e4a0>
2025-01-31 15:31:43,691 - DEBUG - on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
2025-01-31 15:31:43,691 - DEBUG - on stmt: <static> raise <class 'OverflowError'>
2025-01-31 15:31:43,691 - DEBUG - ==== SSA block rewrite pass on 48
2025-01-31 15:31:43,691 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e4a0>
2025-01-31 15:31:43,691 - DEBUG - on stmt: $48load_deref.0 = freevar(is_integer: False)
2025-01-31 15:31:43,691 - DEBUG - on stmt: bool50 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,691 - DEBUG - on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,691 - DEBUG - on stmt: jump 96
2025-01-31 15:31:43,691 - DEBUG - ==== SSA block rewrite pass on 96
2025-01-31 15:31:43,691 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e4a0>
2025-01-31 15:31:43,691 - DEBUG - on stmt: jump 106
2025-01-31 15:31:43,691 - DEBUG - ==== SSA block rewrite pass on 98
2025-01-31 15:31:43,691 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e4a0>
2025-01-31 15:31:43,691 - DEBUG - on stmt: invert = const(bool, False)
2025-01-31 15:31:43,691 - DEBUG - on stmt: exp = b
2025-01-31 15:31:43,691 - DEBUG - on stmt: jump 106
2025-01-31 15:31:43,691 - DEBUG - ==== SSA block rewrite pass on 106
2025-01-31 15:31:43,691 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e4a0>
2025-01-31 15:31:43,691 - DEBUG - on stmt: $const108.1 = const(int, 65536)
2025-01-31 15:31:43,691 - DEBUG - on stmt: $110compare_op.2 = exp > $const108.1
2025-01-31 15:31:43,691 - DEBUG - on stmt: bool112 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,691 - DEBUG - on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,691 - DEBUG - on stmt: branch $112pred, 114, 130
2025-01-31 15:31:43,691 - DEBUG - ==== SSA block rewrite pass on 114
2025-01-31 15:31:43,691 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e4a0>
2025-01-31 15:31:43,691 - DEBUG - on stmt: $114load_global.0 = global(math: <module 'math' from '/home/strain/miniconda3/envs/applio/lib/python3.10/lib-dynload/math.cpython-310-x86_64-linux-gnu.so'>)
2025-01-31 15:31:43,692 - DEBUG - on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
2025-01-31 15:31:43,692 - DEBUG - on stmt: $120load_global.3 = global(float: <class 'float'>)
2025-01-31 15:31:43,692 - DEBUG - on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,692 - DEBUG - on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,692 - DEBUG - on stmt: $128return_value.7 = cast(value=$126call_method.6)
2025-01-31 15:31:43,692 - DEBUG - on stmt: return $128return_value.7
2025-01-31 15:31:43,692 - DEBUG - ==== SSA block rewrite pass on 130
2025-01-31 15:31:43,692 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e4a0>
2025-01-31 15:31:43,692 - DEBUG - on stmt: $const132.1 = const(int, 0)
2025-01-31 15:31:43,692 - DEBUG - on stmt: $134compare_op.2 = exp != $const132.1
2025-01-31 15:31:43,692 - DEBUG - on stmt: bool136 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,692 - DEBUG - on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,692 - DEBUG - on stmt: branch $136pred, 138, 178
2025-01-31 15:31:43,692 - DEBUG - ==== SSA block rewrite pass on 138
2025-01-31 15:31:43,692 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e4a0>
2025-01-31 15:31:43,692 - DEBUG - on stmt: $const140.1 = const(int, 1)
2025-01-31 15:31:43,692 - DEBUG - on stmt: $142binary_and.2 = exp & $const140.1
2025-01-31 15:31:43,692 - DEBUG - on stmt: bool144 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,692 - DEBUG - on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,692 - DEBUG - on stmt: branch $144pred, 146, 154
2025-01-31 15:31:43,692 - DEBUG - ==== SSA block rewrite pass on 146
2025-01-31 15:31:43,692 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e4a0>
2025-01-31 15:31:43,692 - DEBUG - on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,692 - DEBUG - find_def var='r' stmt=$150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,692 - DEBUG - find_def_from_top label 146
2025-01-31 15:31:43,693 - DEBUG - idom 138 from label 146
2025-01-31 15:31:43,693 - DEBUG - find_def_from_bottom label 138
2025-01-31 15:31:43,693 - DEBUG - find_def_from_top label 138
2025-01-31 15:31:43,693 - DEBUG - insert phi node r.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
2025-01-31 15:31:43,693 - DEBUG - find_def_from_bottom label 130
2025-01-31 15:31:43,693 - DEBUG - find_def_from_top label 130
2025-01-31 15:31:43,693 - DEBUG - idom 106 from label 130
2025-01-31 15:31:43,693 - DEBUG - find_def_from_bottom label 106
2025-01-31 15:31:43,693 - DEBUG - find_def_from_top label 106
2025-01-31 15:31:43,693 - DEBUG - idom 0 from label 106
2025-01-31 15:31:43,693 - DEBUG - find_def_from_bottom label 0
2025-01-31 15:31:43,693 - DEBUG - incoming_def r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,693 - DEBUG - find_def_from_bottom label 154
2025-01-31 15:31:43,693 - DEBUG - find_def_from_top label 154
2025-01-31 15:31:43,693 - DEBUG - insert phi node r.3 = phi(incoming_values=[], incoming_blocks=[]) at 154
2025-01-31 15:31:43,693 - DEBUG - find_def_from_bottom label 138
2025-01-31 15:31:43,693 - DEBUG - incoming_def r.2 = phi(incoming_values=[Var(r, numbers.py:216)], incoming_blocks=[130])
2025-01-31 15:31:43,693 - DEBUG - find_def_from_bottom label 146
2025-01-31 15:31:43,693 - DEBUG - incoming_def r.1 = $150inplace_multiply.2
2025-01-31 15:31:43,693 - DEBUG - incoming_def r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
2025-01-31 15:31:43,693 - DEBUG - replaced with: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,693 - DEBUG - on stmt: r.1 = $150inplace_multiply.2
2025-01-31 15:31:43,693 - DEBUG - on stmt: jump 154
2025-01-31 15:31:43,693 - DEBUG - ==== SSA block rewrite pass on 154
2025-01-31 15:31:43,693 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e4a0>
2025-01-31 15:31:43,693 - DEBUG - on stmt: $const156.1 = const(int, 1)
2025-01-31 15:31:43,693 - DEBUG - on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,693 - DEBUG - on stmt: exp = $158inplace_rshift.2
2025-01-31 15:31:43,694 - DEBUG - on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,694 - DEBUG - on stmt: a.1 = $166inplace_multiply.5
2025-01-31 15:31:43,694 - DEBUG - on stmt: $const172.7 = const(int, 0)
2025-01-31 15:31:43,694 - DEBUG - on stmt: $174compare_op.8 = exp != $const172.7
2025-01-31 15:31:43,694 - DEBUG - on stmt: bool176 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,694 - DEBUG - on stmt: $176pred = call bool176($174compare_op.8, func=bool176, args=(Var($174compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,694 - DEBUG - on stmt: branch $176pred, 138, 178
2025-01-31 15:31:43,694 - DEBUG - ==== SSA block rewrite pass on 178
2025-01-31 15:31:43,694 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e4a0>
2025-01-31 15:31:43,694 - DEBUG - on stmt: bool180 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,694 - DEBUG - on stmt: $180pred = call bool180(invert, func=bool180, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,694 - DEBUG - on stmt: branch $180pred, 182, 190
2025-01-31 15:31:43,694 - DEBUG - ==== SSA block rewrite pass on 182
2025-01-31 15:31:43,694 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e4a0>
2025-01-31 15:31:43,694 - DEBUG - on stmt: $const182.0 = const(float, 1.0)
2025-01-31 15:31:43,694 - DEBUG - on stmt: $186binary_true_divide.2 = $const182.0 / r
2025-01-31 15:31:43,694 - DEBUG - find_def var='r' stmt=$186binary_true_divide.2 = $const182.0 / r
2025-01-31 15:31:43,694 - DEBUG - find_def_from_top label 182
2025-01-31 15:31:43,694 - DEBUG - idom 178 from label 182
2025-01-31 15:31:43,694 - DEBUG - find_def_from_bottom label 178
2025-01-31 15:31:43,694 - DEBUG - find_def_from_top label 178
2025-01-31 15:31:43,694 - DEBUG - insert phi node r.4 = phi(incoming_values=[], incoming_blocks=[]) at 178
2025-01-31 15:31:43,694 - DEBUG - find_def_from_bottom label 130
2025-01-31 15:31:43,694 - DEBUG - find_def_from_top label 130
2025-01-31 15:31:43,694 - DEBUG - idom 106 from label 130
2025-01-31 15:31:43,694 - DEBUG - find_def_from_bottom label 106
2025-01-31 15:31:43,694 - DEBUG - find_def_from_top label 106
2025-01-31 15:31:43,695 - DEBUG - idom 0 from label 106
2025-01-31 15:31:43,695 - DEBUG - find_def_from_bottom label 0
2025-01-31 15:31:43,695 - DEBUG - incoming_def r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,695 - DEBUG - find_def_from_bottom label 154
2025-01-31 15:31:43,695 - DEBUG - incoming_def r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
2025-01-31 15:31:43,695 - DEBUG - replaced with: $186binary_true_divide.2 = $const182.0 / r.4
2025-01-31 15:31:43,695 - DEBUG - on stmt: $188return_value.3 = cast(value=$186binary_true_divide.2)
2025-01-31 15:31:43,695 - DEBUG - on stmt: return $188return_value.3
2025-01-31 15:31:43,695 - DEBUG - ==== SSA block rewrite pass on 190
2025-01-31 15:31:43,695 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e4a0>
2025-01-31 15:31:43,695 - DEBUG - on stmt: $192return_value.1 = cast(value=r)
2025-01-31 15:31:43,695 - DEBUG - find_def var='r' stmt=$192return_value.1 = cast(value=r)
2025-01-31 15:31:43,695 - DEBUG - find_def_from_top label 190
2025-01-31 15:31:43,695 - DEBUG - idom 178 from label 190
2025-01-31 15:31:43,695 - DEBUG - find_def_from_bottom label 178
2025-01-31 15:31:43,695 - DEBUG - replaced with: $192return_value.1 = cast(value=r.4)
2025-01-31 15:31:43,695 - DEBUG - on stmt: return $192return_value.1
2025-01-31 15:31:43,695 - DEBUG - Fix SSA violator on var a.1
2025-01-31 15:31:43,695 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-31 15:31:43,695 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871dea0>
2025-01-31 15:31:43,695 - DEBUG - on stmt: a = arg(0, name=a)
2025-01-31 15:31:43,695 - DEBUG - on stmt: b = arg(1, name=b)
2025-01-31 15:31:43,695 - DEBUG - on stmt: $2load_deref.0 = freevar(tp: float64)
2025-01-31 15:31:43,695 - DEBUG - on stmt: $const4.1 = const(int, 1)
2025-01-31 15:31:43,695 - DEBUG - on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,695 - DEBUG - on stmt: $10load_deref.3 = freevar(tp: float64)
2025-01-31 15:31:43,695 - DEBUG - on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,696 - DEBUG - first assign: a.1
2025-01-31 15:31:43,696 - DEBUG - replaced with: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,696 - DEBUG - on stmt: $const20.7 = const(int, 0)
2025-01-31 15:31:43,696 - DEBUG - on stmt: $22compare_op.8 = b < $const20.7
2025-01-31 15:31:43,696 - DEBUG - on stmt: bool24 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,696 - DEBUG - on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,696 - DEBUG - on stmt: branch $24pred, 26, 98
2025-01-31 15:31:43,696 - DEBUG - ==== SSA block rewrite pass on 26
2025-01-31 15:31:43,696 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871dea0>
2025-01-31 15:31:43,696 - DEBUG - on stmt: invert = const(bool, True)
2025-01-31 15:31:43,696 - DEBUG - on stmt: exp = unary(fn=<built-in function neg>, value=b)
2025-01-31 15:31:43,696 - DEBUG - on stmt: $const38.4 = const(int, 0)
2025-01-31 15:31:43,696 - DEBUG - on stmt: $40compare_op.5 = exp < $const38.4
2025-01-31 15:31:43,696 - DEBUG - on stmt: bool42 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,696 - DEBUG - on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,696 - DEBUG - on stmt: branch $42pred, 44, 48
2025-01-31 15:31:43,696 - DEBUG - ==== SSA block rewrite pass on 44
2025-01-31 15:31:43,696 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871dea0>
2025-01-31 15:31:43,696 - DEBUG - on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
2025-01-31 15:31:43,696 - DEBUG - on stmt: <static> raise <class 'OverflowError'>
2025-01-31 15:31:43,696 - DEBUG - ==== SSA block rewrite pass on 48
2025-01-31 15:31:43,696 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871dea0>
2025-01-31 15:31:43,696 - DEBUG - on stmt: $48load_deref.0 = freevar(is_integer: False)
2025-01-31 15:31:43,696 - DEBUG - on stmt: bool50 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,696 - DEBUG - on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,696 - DEBUG - on stmt: jump 96
2025-01-31 15:31:43,696 - DEBUG - ==== SSA block rewrite pass on 96
2025-01-31 15:31:43,697 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871dea0>
2025-01-31 15:31:43,697 - DEBUG - on stmt: jump 106
2025-01-31 15:31:43,697 - DEBUG - ==== SSA block rewrite pass on 98
2025-01-31 15:31:43,697 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871dea0>
2025-01-31 15:31:43,697 - DEBUG - on stmt: invert = const(bool, False)
2025-01-31 15:31:43,697 - DEBUG - on stmt: exp = b
2025-01-31 15:31:43,697 - DEBUG - on stmt: jump 106
2025-01-31 15:31:43,697 - DEBUG - ==== SSA block rewrite pass on 106
2025-01-31 15:31:43,697 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871dea0>
2025-01-31 15:31:43,697 - DEBUG - on stmt: $const108.1 = const(int, 65536)
2025-01-31 15:31:43,697 - DEBUG - on stmt: $110compare_op.2 = exp > $const108.1
2025-01-31 15:31:43,697 - DEBUG - on stmt: bool112 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,697 - DEBUG - on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,697 - DEBUG - on stmt: branch $112pred, 114, 130
2025-01-31 15:31:43,697 - DEBUG - ==== SSA block rewrite pass on 114
2025-01-31 15:31:43,697 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871dea0>
2025-01-31 15:31:43,697 - DEBUG - on stmt: $114load_global.0 = global(math: <module 'math' from '/home/strain/miniconda3/envs/applio/lib/python3.10/lib-dynload/math.cpython-310-x86_64-linux-gnu.so'>)
2025-01-31 15:31:43,697 - DEBUG - on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
2025-01-31 15:31:43,697 - DEBUG - on stmt: $120load_global.3 = global(float: <class 'float'>)
2025-01-31 15:31:43,697 - DEBUG - on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,697 - DEBUG - on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,697 - DEBUG - on stmt: $128return_value.7 = cast(value=$126call_method.6)
2025-01-31 15:31:43,697 - DEBUG - on stmt: return $128return_value.7
2025-01-31 15:31:43,697 - DEBUG - ==== SSA block rewrite pass on 130
2025-01-31 15:31:43,697 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871dea0>
2025-01-31 15:31:43,697 - DEBUG - on stmt: $const132.1 = const(int, 0)
2025-01-31 15:31:43,697 - DEBUG - on stmt: $134compare_op.2 = exp != $const132.1
2025-01-31 15:31:43,697 - DEBUG - on stmt: bool136 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,697 - DEBUG - on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,698 - DEBUG - on stmt: branch $136pred, 138, 178
2025-01-31 15:31:43,698 - DEBUG - ==== SSA block rewrite pass on 138
2025-01-31 15:31:43,698 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871dea0>
2025-01-31 15:31:43,698 - DEBUG - on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[130, 154])
2025-01-31 15:31:43,698 - DEBUG - on stmt: $const140.1 = const(int, 1)
2025-01-31 15:31:43,698 - DEBUG - on stmt: $142binary_and.2 = exp & $const140.1
2025-01-31 15:31:43,698 - DEBUG - on stmt: bool144 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,698 - DEBUG - on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,698 - DEBUG - on stmt: branch $144pred, 146, 154
2025-01-31 15:31:43,698 - DEBUG - ==== SSA block rewrite pass on 146
2025-01-31 15:31:43,698 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871dea0>
2025-01-31 15:31:43,698 - DEBUG - on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,698 - DEBUG - on stmt: r.1 = $150inplace_multiply.2
2025-01-31 15:31:43,698 - DEBUG - on stmt: jump 154
2025-01-31 15:31:43,698 - DEBUG - ==== SSA block rewrite pass on 154
2025-01-31 15:31:43,698 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871dea0>
2025-01-31 15:31:43,698 - DEBUG - on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
2025-01-31 15:31:43,698 - DEBUG - on stmt: $const156.1 = const(int, 1)
2025-01-31 15:31:43,698 - DEBUG - on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,698 - DEBUG - on stmt: exp = $158inplace_rshift.2
2025-01-31 15:31:43,698 - DEBUG - on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,698 - DEBUG - on stmt: a.1 = $166inplace_multiply.5
2025-01-31 15:31:43,698 - DEBUG - replaced with: a.1.1 = $166inplace_multiply.5
2025-01-31 15:31:43,698 - DEBUG - on stmt: $const172.7 = const(int, 0)
2025-01-31 15:31:43,698 - DEBUG - on stmt: $174compare_op.8 = exp != $const172.7
2025-01-31 15:31:43,698 - DEBUG - on stmt: bool176 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,698 - DEBUG - on stmt: $176pred = call bool176($174compare_op.8, func=bool176, args=(Var($174compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,698 - DEBUG - on stmt: branch $176pred, 138, 178
2025-01-31 15:31:43,699 - DEBUG - ==== SSA block rewrite pass on 178
2025-01-31 15:31:43,699 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871dea0>
2025-01-31 15:31:43,699 - DEBUG - on stmt: r.4 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[130, 154])
2025-01-31 15:31:43,699 - DEBUG - on stmt: bool180 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,699 - DEBUG - on stmt: $180pred = call bool180(invert, func=bool180, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,699 - DEBUG - on stmt: branch $180pred, 182, 190
2025-01-31 15:31:43,699 - DEBUG - ==== SSA block rewrite pass on 182
2025-01-31 15:31:43,699 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871dea0>
2025-01-31 15:31:43,699 - DEBUG - on stmt: $const182.0 = const(float, 1.0)
2025-01-31 15:31:43,699 - DEBUG - on stmt: $186binary_true_divide.2 = $const182.0 / r.4
2025-01-31 15:31:43,699 - DEBUG - on stmt: $188return_value.3 = cast(value=$186binary_true_divide.2)
2025-01-31 15:31:43,699 - DEBUG - on stmt: return $188return_value.3
2025-01-31 15:31:43,699 - DEBUG - ==== SSA block rewrite pass on 190
2025-01-31 15:31:43,699 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871dea0>
2025-01-31 15:31:43,699 - DEBUG - on stmt: $192return_value.1 = cast(value=r.4)
2025-01-31 15:31:43,699 - DEBUG - on stmt: return $192return_value.1
2025-01-31 15:31:43,699 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7c89e871f010>],
             154: [<numba.core.ir.Assign object at 0x7c89e8749090>]})
2025-01-31 15:31:43,699 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-31 15:31:43,699 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e4a0>
2025-01-31 15:31:43,699 - DEBUG - on stmt: a = arg(0, name=a)
2025-01-31 15:31:43,699 - DEBUG - on stmt: b = arg(1, name=b)
2025-01-31 15:31:43,699 - DEBUG - on stmt: $2load_deref.0 = freevar(tp: float64)
2025-01-31 15:31:43,699 - DEBUG - on stmt: $const4.1 = const(int, 1)
2025-01-31 15:31:43,699 - DEBUG - on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,699 - DEBUG - on stmt: $10load_deref.3 = freevar(tp: float64)
2025-01-31 15:31:43,699 - DEBUG - on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,700 - DEBUG - on stmt: $const20.7 = const(int, 0)
2025-01-31 15:31:43,700 - DEBUG - on stmt: $22compare_op.8 = b < $const20.7
2025-01-31 15:31:43,700 - DEBUG - on stmt: bool24 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,700 - DEBUG - on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,700 - DEBUG - on stmt: branch $24pred, 26, 98
2025-01-31 15:31:43,700 - DEBUG - ==== SSA block rewrite pass on 26
2025-01-31 15:31:43,700 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e4a0>
2025-01-31 15:31:43,700 - DEBUG - on stmt: invert = const(bool, True)
2025-01-31 15:31:43,700 - DEBUG - on stmt: exp = unary(fn=<built-in function neg>, value=b)
2025-01-31 15:31:43,700 - DEBUG - on stmt: $const38.4 = const(int, 0)
2025-01-31 15:31:43,700 - DEBUG - on stmt: $40compare_op.5 = exp < $const38.4
2025-01-31 15:31:43,700 - DEBUG - on stmt: bool42 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,700 - DEBUG - on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,700 - DEBUG - on stmt: branch $42pred, 44, 48
2025-01-31 15:31:43,700 - DEBUG - ==== SSA block rewrite pass on 44
2025-01-31 15:31:43,700 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e4a0>
2025-01-31 15:31:43,700 - DEBUG - on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
2025-01-31 15:31:43,700 - DEBUG - on stmt: <static> raise <class 'OverflowError'>
2025-01-31 15:31:43,700 - DEBUG - ==== SSA block rewrite pass on 48
2025-01-31 15:31:43,700 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e4a0>
2025-01-31 15:31:43,700 - DEBUG - on stmt: $48load_deref.0 = freevar(is_integer: False)
2025-01-31 15:31:43,700 - DEBUG - on stmt: bool50 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,700 - DEBUG - on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,700 - DEBUG - on stmt: jump 96
2025-01-31 15:31:43,700 - DEBUG - ==== SSA block rewrite pass on 96
2025-01-31 15:31:43,700 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e4a0>
2025-01-31 15:31:43,700 - DEBUG - on stmt: jump 106
2025-01-31 15:31:43,700 - DEBUG - ==== SSA block rewrite pass on 98
2025-01-31 15:31:43,701 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e4a0>
2025-01-31 15:31:43,701 - DEBUG - on stmt: invert = const(bool, False)
2025-01-31 15:31:43,701 - DEBUG - on stmt: exp = b
2025-01-31 15:31:43,701 - DEBUG - on stmt: jump 106
2025-01-31 15:31:43,701 - DEBUG - ==== SSA block rewrite pass on 106
2025-01-31 15:31:43,701 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e4a0>
2025-01-31 15:31:43,701 - DEBUG - on stmt: $const108.1 = const(int, 65536)
2025-01-31 15:31:43,701 - DEBUG - on stmt: $110compare_op.2 = exp > $const108.1
2025-01-31 15:31:43,701 - DEBUG - on stmt: bool112 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,701 - DEBUG - on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,701 - DEBUG - on stmt: branch $112pred, 114, 130
2025-01-31 15:31:43,701 - DEBUG - ==== SSA block rewrite pass on 114
2025-01-31 15:31:43,701 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e4a0>
2025-01-31 15:31:43,701 - DEBUG - on stmt: $114load_global.0 = global(math: <module 'math' from '/home/strain/miniconda3/envs/applio/lib/python3.10/lib-dynload/math.cpython-310-x86_64-linux-gnu.so'>)
2025-01-31 15:31:43,701 - DEBUG - on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
2025-01-31 15:31:43,701 - DEBUG - on stmt: $120load_global.3 = global(float: <class 'float'>)
2025-01-31 15:31:43,701 - DEBUG - on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,701 - DEBUG - on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,701 - DEBUG - find_def var='a.1' stmt=$126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,701 - DEBUG - find_def_from_top label 114
2025-01-31 15:31:43,701 - DEBUG - idom 106 from label 114
2025-01-31 15:31:43,701 - DEBUG - find_def_from_bottom label 106
2025-01-31 15:31:43,701 - DEBUG - find_def_from_top label 106
2025-01-31 15:31:43,701 - DEBUG - idom 0 from label 106
2025-01-31 15:31:43,701 - DEBUG - find_def_from_bottom label 0
2025-01-31 15:31:43,701 - DEBUG - on stmt: $128return_value.7 = cast(value=$126call_method.6)
2025-01-31 15:31:43,701 - DEBUG - on stmt: return $128return_value.7
2025-01-31 15:31:43,701 - DEBUG - ==== SSA block rewrite pass on 130
2025-01-31 15:31:43,702 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e4a0>
2025-01-31 15:31:43,702 - DEBUG - on stmt: $const132.1 = const(int, 0)
2025-01-31 15:31:43,702 - DEBUG - on stmt: $134compare_op.2 = exp != $const132.1
2025-01-31 15:31:43,702 - DEBUG - on stmt: bool136 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,702 - DEBUG - on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,702 - DEBUG - on stmt: branch $136pred, 138, 178
2025-01-31 15:31:43,702 - DEBUG - ==== SSA block rewrite pass on 138
2025-01-31 15:31:43,702 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e4a0>
2025-01-31 15:31:43,702 - DEBUG - on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[130, 154])
2025-01-31 15:31:43,702 - DEBUG - on stmt: $const140.1 = const(int, 1)
2025-01-31 15:31:43,702 - DEBUG - on stmt: $142binary_and.2 = exp & $const140.1
2025-01-31 15:31:43,702 - DEBUG - on stmt: bool144 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,702 - DEBUG - on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,702 - DEBUG - on stmt: branch $144pred, 146, 154
2025-01-31 15:31:43,702 - DEBUG - ==== SSA block rewrite pass on 146
2025-01-31 15:31:43,702 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e4a0>
2025-01-31 15:31:43,702 - DEBUG - on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,702 - DEBUG - find_def var='a.1' stmt=$150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,702 - DEBUG - find_def_from_top label 146
2025-01-31 15:31:43,702 - DEBUG - idom 138 from label 146
2025-01-31 15:31:43,702 - DEBUG - find_def_from_bottom label 138
2025-01-31 15:31:43,702 - DEBUG - find_def_from_top label 138
2025-01-31 15:31:43,702 - DEBUG - insert phi node a.1.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
2025-01-31 15:31:43,702 - DEBUG - find_def_from_bottom label 130
2025-01-31 15:31:43,702 - DEBUG - find_def_from_top label 130
2025-01-31 15:31:43,702 - DEBUG - idom 106 from label 130
2025-01-31 15:31:43,702 - DEBUG - find_def_from_bottom label 106
2025-01-31 15:31:43,702 - DEBUG - find_def_from_top label 106
2025-01-31 15:31:43,703 - DEBUG - idom 0 from label 106
2025-01-31 15:31:43,703 - DEBUG - find_def_from_bottom label 0
2025-01-31 15:31:43,703 - DEBUG - incoming_def a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,703 - DEBUG - find_def_from_bottom label 154
2025-01-31 15:31:43,703 - DEBUG - incoming_def a.1.1 = $166inplace_multiply.5
2025-01-31 15:31:43,703 - DEBUG - replaced with: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,703 - DEBUG - on stmt: r.1 = $150inplace_multiply.2
2025-01-31 15:31:43,703 - DEBUG - on stmt: jump 154
2025-01-31 15:31:43,703 - DEBUG - ==== SSA block rewrite pass on 154
2025-01-31 15:31:43,703 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e4a0>
2025-01-31 15:31:43,703 - DEBUG - on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
2025-01-31 15:31:43,703 - DEBUG - on stmt: $const156.1 = const(int, 1)
2025-01-31 15:31:43,703 - DEBUG - on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,703 - DEBUG - on stmt: exp = $158inplace_rshift.2
2025-01-31 15:31:43,703 - DEBUG - on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,703 - DEBUG - find_def var='a.1' stmt=$166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,703 - DEBUG - find_def_from_top label 154
2025-01-31 15:31:43,703 - DEBUG - idom 138 from label 154
2025-01-31 15:31:43,703 - DEBUG - find_def_from_bottom label 138
2025-01-31 15:31:43,703 - DEBUG - replaced with: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,703 - DEBUG - on stmt: a.1.1 = $166inplace_multiply.5
2025-01-31 15:31:43,703 - DEBUG - on stmt: $const172.7 = const(int, 0)
2025-01-31 15:31:43,703 - DEBUG - on stmt: $174compare_op.8 = exp != $const172.7
2025-01-31 15:31:43,703 - DEBUG - on stmt: bool176 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,703 - DEBUG - on stmt: $176pred = call bool176($174compare_op.8, func=bool176, args=(Var($174compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,704 - DEBUG - on stmt: branch $176pred, 138, 178
2025-01-31 15:31:43,704 - DEBUG - ==== SSA block rewrite pass on 178
2025-01-31 15:31:43,704 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e4a0>
2025-01-31 15:31:43,704 - DEBUG - on stmt: r.4 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[130, 154])
2025-01-31 15:31:43,704 - DEBUG - on stmt: bool180 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,704 - DEBUG - on stmt: $180pred = call bool180(invert, func=bool180, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,704 - DEBUG - on stmt: branch $180pred, 182, 190
2025-01-31 15:31:43,704 - DEBUG - ==== SSA block rewrite pass on 182
2025-01-31 15:31:43,704 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e4a0>
2025-01-31 15:31:43,704 - DEBUG - on stmt: $const182.0 = const(float, 1.0)
2025-01-31 15:31:43,704 - DEBUG - on stmt: $186binary_true_divide.2 = $const182.0 / r.4
2025-01-31 15:31:43,704 - DEBUG - on stmt: $188return_value.3 = cast(value=$186binary_true_divide.2)
2025-01-31 15:31:43,704 - DEBUG - on stmt: return $188return_value.3
2025-01-31 15:31:43,704 - DEBUG - ==== SSA block rewrite pass on 190
2025-01-31 15:31:43,704 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e4a0>
2025-01-31 15:31:43,704 - DEBUG - on stmt: $192return_value.1 = cast(value=r.4)
2025-01-31 15:31:43,704 - DEBUG - on stmt: return $192return_value.1
2025-01-31 15:31:43,704 - DEBUG - Fix SSA violator on var invert
2025-01-31 15:31:43,704 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-31 15:31:43,704 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871e1a0>
2025-01-31 15:31:43,704 - DEBUG - on stmt: a = arg(0, name=a)
2025-01-31 15:31:43,704 - DEBUG - on stmt: b = arg(1, name=b)
2025-01-31 15:31:43,704 - DEBUG - on stmt: $2load_deref.0 = freevar(tp: float64)
2025-01-31 15:31:43,704 - DEBUG - on stmt: $const4.1 = const(int, 1)
2025-01-31 15:31:43,704 - DEBUG - on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,704 - DEBUG - on stmt: $10load_deref.3 = freevar(tp: float64)
2025-01-31 15:31:43,704 - DEBUG - on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,704 - DEBUG - on stmt: $const20.7 = const(int, 0)
2025-01-31 15:31:43,705 - DEBUG - on stmt: $22compare_op.8 = b < $const20.7
2025-01-31 15:31:43,705 - DEBUG - on stmt: bool24 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,705 - DEBUG - on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,705 - DEBUG - on stmt: branch $24pred, 26, 98
2025-01-31 15:31:43,705 - DEBUG - ==== SSA block rewrite pass on 26
2025-01-31 15:31:43,705 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871e1a0>
2025-01-31 15:31:43,705 - DEBUG - on stmt: invert = const(bool, True)
2025-01-31 15:31:43,705 - DEBUG - first assign: invert
2025-01-31 15:31:43,705 - DEBUG - replaced with: invert = const(bool, True)
2025-01-31 15:31:43,705 - DEBUG - on stmt: exp = unary(fn=<built-in function neg>, value=b)
2025-01-31 15:31:43,705 - DEBUG - on stmt: $const38.4 = const(int, 0)
2025-01-31 15:31:43,705 - DEBUG - on stmt: $40compare_op.5 = exp < $const38.4
2025-01-31 15:31:43,705 - DEBUG - on stmt: bool42 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,705 - DEBUG - on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,705 - DEBUG - on stmt: branch $42pred, 44, 48
2025-01-31 15:31:43,705 - DEBUG - ==== SSA block rewrite pass on 44
2025-01-31 15:31:43,705 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871e1a0>
2025-01-31 15:31:43,705 - DEBUG - on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
2025-01-31 15:31:43,705 - DEBUG - on stmt: <static> raise <class 'OverflowError'>
2025-01-31 15:31:43,705 - DEBUG - ==== SSA block rewrite pass on 48
2025-01-31 15:31:43,705 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871e1a0>
2025-01-31 15:31:43,705 - DEBUG - on stmt: $48load_deref.0 = freevar(is_integer: False)
2025-01-31 15:31:43,705 - DEBUG - on stmt: bool50 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,705 - DEBUG - on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,705 - DEBUG - on stmt: jump 96
2025-01-31 15:31:43,705 - DEBUG - ==== SSA block rewrite pass on 96
2025-01-31 15:31:43,705 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871e1a0>
2025-01-31 15:31:43,705 - DEBUG - on stmt: jump 106
2025-01-31 15:31:43,705 - DEBUG - ==== SSA block rewrite pass on 98
2025-01-31 15:31:43,706 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871e1a0>
2025-01-31 15:31:43,706 - DEBUG - on stmt: invert = const(bool, False)
2025-01-31 15:31:43,706 - DEBUG - replaced with: invert.1 = const(bool, False)
2025-01-31 15:31:43,706 - DEBUG - on stmt: exp = b
2025-01-31 15:31:43,706 - DEBUG - on stmt: jump 106
2025-01-31 15:31:43,706 - DEBUG - ==== SSA block rewrite pass on 106
2025-01-31 15:31:43,706 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871e1a0>
2025-01-31 15:31:43,706 - DEBUG - on stmt: $const108.1 = const(int, 65536)
2025-01-31 15:31:43,706 - DEBUG - on stmt: $110compare_op.2 = exp > $const108.1
2025-01-31 15:31:43,706 - DEBUG - on stmt: bool112 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,706 - DEBUG - on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,706 - DEBUG - on stmt: branch $112pred, 114, 130
2025-01-31 15:31:43,706 - DEBUG - ==== SSA block rewrite pass on 114
2025-01-31 15:31:43,706 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871e1a0>
2025-01-31 15:31:43,706 - DEBUG - on stmt: $114load_global.0 = global(math: <module 'math' from '/home/strain/miniconda3/envs/applio/lib/python3.10/lib-dynload/math.cpython-310-x86_64-linux-gnu.so'>)
2025-01-31 15:31:43,706 - DEBUG - on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
2025-01-31 15:31:43,706 - DEBUG - on stmt: $120load_global.3 = global(float: <class 'float'>)
2025-01-31 15:31:43,706 - DEBUG - on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,706 - DEBUG - on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,706 - DEBUG - on stmt: $128return_value.7 = cast(value=$126call_method.6)
2025-01-31 15:31:43,706 - DEBUG - on stmt: return $128return_value.7
2025-01-31 15:31:43,706 - DEBUG - ==== SSA block rewrite pass on 130
2025-01-31 15:31:43,706 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871e1a0>
2025-01-31 15:31:43,706 - DEBUG - on stmt: $const132.1 = const(int, 0)
2025-01-31 15:31:43,706 - DEBUG - on stmt: $134compare_op.2 = exp != $const132.1
2025-01-31 15:31:43,706 - DEBUG - on stmt: bool136 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,706 - DEBUG - on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,706 - DEBUG - on stmt: branch $136pred, 138, 178
2025-01-31 15:31:43,707 - DEBUG - ==== SSA block rewrite pass on 138
2025-01-31 15:31:43,707 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871e1a0>
2025-01-31 15:31:43,707 - DEBUG - on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:217), Var(a.1.1, numbers.py:241)], incoming_blocks=[130, 154])
2025-01-31 15:31:43,707 - DEBUG - on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[130, 154])
2025-01-31 15:31:43,707 - DEBUG - on stmt: $const140.1 = const(int, 1)
2025-01-31 15:31:43,707 - DEBUG - on stmt: $142binary_and.2 = exp & $const140.1
2025-01-31 15:31:43,707 - DEBUG - on stmt: bool144 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,707 - DEBUG - on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,707 - DEBUG - on stmt: branch $144pred, 146, 154
2025-01-31 15:31:43,707 - DEBUG - ==== SSA block rewrite pass on 146
2025-01-31 15:31:43,707 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871e1a0>
2025-01-31 15:31:43,707 - DEBUG - on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,707 - DEBUG - on stmt: r.1 = $150inplace_multiply.2
2025-01-31 15:31:43,707 - DEBUG - on stmt: jump 154
2025-01-31 15:31:43,707 - DEBUG - ==== SSA block rewrite pass on 154
2025-01-31 15:31:43,707 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871e1a0>
2025-01-31 15:31:43,707 - DEBUG - on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
2025-01-31 15:31:43,707 - DEBUG - on stmt: $const156.1 = const(int, 1)
2025-01-31 15:31:43,707 - DEBUG - on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,707 - DEBUG - on stmt: exp = $158inplace_rshift.2
2025-01-31 15:31:43,707 - DEBUG - on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,707 - DEBUG - on stmt: a.1.1 = $166inplace_multiply.5
2025-01-31 15:31:43,707 - DEBUG - on stmt: $const172.7 = const(int, 0)
2025-01-31 15:31:43,707 - DEBUG - on stmt: $174compare_op.8 = exp != $const172.7
2025-01-31 15:31:43,707 - DEBUG - on stmt: bool176 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,707 - DEBUG - on stmt: $176pred = call bool176($174compare_op.8, func=bool176, args=(Var($174compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,707 - DEBUG - on stmt: branch $176pred, 138, 178
2025-01-31 15:31:43,707 - DEBUG - ==== SSA block rewrite pass on 178
2025-01-31 15:31:43,708 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871e1a0>
2025-01-31 15:31:43,708 - DEBUG - on stmt: r.4 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[130, 154])
2025-01-31 15:31:43,708 - DEBUG - on stmt: bool180 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,708 - DEBUG - on stmt: $180pred = call bool180(invert, func=bool180, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,708 - DEBUG - on stmt: branch $180pred, 182, 190
2025-01-31 15:31:43,708 - DEBUG - ==== SSA block rewrite pass on 182
2025-01-31 15:31:43,708 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871e1a0>
2025-01-31 15:31:43,708 - DEBUG - on stmt: $const182.0 = const(float, 1.0)
2025-01-31 15:31:43,708 - DEBUG - on stmt: $186binary_true_divide.2 = $const182.0 / r.4
2025-01-31 15:31:43,708 - DEBUG - on stmt: $188return_value.3 = cast(value=$186binary_true_divide.2)
2025-01-31 15:31:43,708 - DEBUG - on stmt: return $188return_value.3
2025-01-31 15:31:43,708 - DEBUG - ==== SSA block rewrite pass on 190
2025-01-31 15:31:43,708 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871e1a0>
2025-01-31 15:31:43,708 - DEBUG - on stmt: $192return_value.1 = cast(value=r.4)
2025-01-31 15:31:43,708 - DEBUG - on stmt: return $192return_value.1
2025-01-31 15:31:43,708 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x7c89e871fd60>],
             98: [<numba.core.ir.Assign object at 0x7c89e871dea0>]})
2025-01-31 15:31:43,708 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-31 15:31:43,708 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e1a0>
2025-01-31 15:31:43,708 - DEBUG - on stmt: a = arg(0, name=a)
2025-01-31 15:31:43,708 - DEBUG - on stmt: b = arg(1, name=b)
2025-01-31 15:31:43,708 - DEBUG - on stmt: $2load_deref.0 = freevar(tp: float64)
2025-01-31 15:31:43,708 - DEBUG - on stmt: $const4.1 = const(int, 1)
2025-01-31 15:31:43,708 - DEBUG - on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,708 - DEBUG - on stmt: $10load_deref.3 = freevar(tp: float64)
2025-01-31 15:31:43,708 - DEBUG - on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,708 - DEBUG - on stmt: $const20.7 = const(int, 0)
2025-01-31 15:31:43,709 - DEBUG - on stmt: $22compare_op.8 = b < $const20.7
2025-01-31 15:31:43,709 - DEBUG - on stmt: bool24 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,709 - DEBUG - on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,709 - DEBUG - on stmt: branch $24pred, 26, 98
2025-01-31 15:31:43,709 - DEBUG - ==== SSA block rewrite pass on 26
2025-01-31 15:31:43,709 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e1a0>
2025-01-31 15:31:43,709 - DEBUG - on stmt: invert = const(bool, True)
2025-01-31 15:31:43,709 - DEBUG - on stmt: exp = unary(fn=<built-in function neg>, value=b)
2025-01-31 15:31:43,709 - DEBUG - on stmt: $const38.4 = const(int, 0)
2025-01-31 15:31:43,709 - DEBUG - on stmt: $40compare_op.5 = exp < $const38.4
2025-01-31 15:31:43,709 - DEBUG - on stmt: bool42 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,709 - DEBUG - on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,709 - DEBUG - on stmt: branch $42pred, 44, 48
2025-01-31 15:31:43,709 - DEBUG - ==== SSA block rewrite pass on 44
2025-01-31 15:31:43,709 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e1a0>
2025-01-31 15:31:43,709 - DEBUG - on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
2025-01-31 15:31:43,709 - DEBUG - on stmt: <static> raise <class 'OverflowError'>
2025-01-31 15:31:43,709 - DEBUG - ==== SSA block rewrite pass on 48
2025-01-31 15:31:43,709 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e1a0>
2025-01-31 15:31:43,709 - DEBUG - on stmt: $48load_deref.0 = freevar(is_integer: False)
2025-01-31 15:31:43,709 - DEBUG - on stmt: bool50 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,709 - DEBUG - on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,709 - DEBUG - on stmt: jump 96
2025-01-31 15:31:43,709 - DEBUG - ==== SSA block rewrite pass on 96
2025-01-31 15:31:43,709 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e1a0>
2025-01-31 15:31:43,709 - DEBUG - on stmt: jump 106
2025-01-31 15:31:43,709 - DEBUG - ==== SSA block rewrite pass on 98
2025-01-31 15:31:43,709 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e1a0>
2025-01-31 15:31:43,710 - DEBUG - on stmt: invert.1 = const(bool, False)
2025-01-31 15:31:43,710 - DEBUG - on stmt: exp = b
2025-01-31 15:31:43,710 - DEBUG - on stmt: jump 106
2025-01-31 15:31:43,710 - DEBUG - ==== SSA block rewrite pass on 106
2025-01-31 15:31:43,710 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e1a0>
2025-01-31 15:31:43,710 - DEBUG - on stmt: $const108.1 = const(int, 65536)
2025-01-31 15:31:43,710 - DEBUG - on stmt: $110compare_op.2 = exp > $const108.1
2025-01-31 15:31:43,710 - DEBUG - on stmt: bool112 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,710 - DEBUG - on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,710 - DEBUG - on stmt: branch $112pred, 114, 130
2025-01-31 15:31:43,710 - DEBUG - ==== SSA block rewrite pass on 114
2025-01-31 15:31:43,710 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e1a0>
2025-01-31 15:31:43,710 - DEBUG - on stmt: $114load_global.0 = global(math: <module 'math' from '/home/strain/miniconda3/envs/applio/lib/python3.10/lib-dynload/math.cpython-310-x86_64-linux-gnu.so'>)
2025-01-31 15:31:43,710 - DEBUG - on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
2025-01-31 15:31:43,710 - DEBUG - on stmt: $120load_global.3 = global(float: <class 'float'>)
2025-01-31 15:31:43,710 - DEBUG - on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,710 - DEBUG - on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,710 - DEBUG - on stmt: $128return_value.7 = cast(value=$126call_method.6)
2025-01-31 15:31:43,710 - DEBUG - on stmt: return $128return_value.7
2025-01-31 15:31:43,710 - DEBUG - ==== SSA block rewrite pass on 130
2025-01-31 15:31:43,710 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e1a0>
2025-01-31 15:31:43,710 - DEBUG - on stmt: $const132.1 = const(int, 0)
2025-01-31 15:31:43,710 - DEBUG - on stmt: $134compare_op.2 = exp != $const132.1
2025-01-31 15:31:43,710 - DEBUG - on stmt: bool136 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,710 - DEBUG - on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,710 - DEBUG - on stmt: branch $136pred, 138, 178
2025-01-31 15:31:43,710 - DEBUG - ==== SSA block rewrite pass on 138
2025-01-31 15:31:43,711 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e1a0>
2025-01-31 15:31:43,711 - DEBUG - on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:217), Var(a.1.1, numbers.py:241)], incoming_blocks=[130, 154])
2025-01-31 15:31:43,711 - DEBUG - on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[130, 154])
2025-01-31 15:31:43,711 - DEBUG - on stmt: $const140.1 = const(int, 1)
2025-01-31 15:31:43,711 - DEBUG - on stmt: $142binary_and.2 = exp & $const140.1
2025-01-31 15:31:43,711 - DEBUG - on stmt: bool144 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,711 - DEBUG - on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,711 - DEBUG - on stmt: branch $144pred, 146, 154
2025-01-31 15:31:43,711 - DEBUG - ==== SSA block rewrite pass on 146
2025-01-31 15:31:43,711 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e1a0>
2025-01-31 15:31:43,711 - DEBUG - on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,711 - DEBUG - on stmt: r.1 = $150inplace_multiply.2
2025-01-31 15:31:43,711 - DEBUG - on stmt: jump 154
2025-01-31 15:31:43,711 - DEBUG - ==== SSA block rewrite pass on 154
2025-01-31 15:31:43,711 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e1a0>
2025-01-31 15:31:43,711 - DEBUG - on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
2025-01-31 15:31:43,711 - DEBUG - on stmt: $const156.1 = const(int, 1)
2025-01-31 15:31:43,711 - DEBUG - on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,711 - DEBUG - on stmt: exp = $158inplace_rshift.2
2025-01-31 15:31:43,711 - DEBUG - on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,711 - DEBUG - on stmt: a.1.1 = $166inplace_multiply.5
2025-01-31 15:31:43,711 - DEBUG - on stmt: $const172.7 = const(int, 0)
2025-01-31 15:31:43,711 - DEBUG - on stmt: $174compare_op.8 = exp != $const172.7
2025-01-31 15:31:43,711 - DEBUG - on stmt: bool176 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,711 - DEBUG - on stmt: $176pred = call bool176($174compare_op.8, func=bool176, args=(Var($174compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,711 - DEBUG - on stmt: branch $176pred, 138, 178
2025-01-31 15:31:43,711 - DEBUG - ==== SSA block rewrite pass on 178
2025-01-31 15:31:43,712 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e1a0>
2025-01-31 15:31:43,712 - DEBUG - on stmt: r.4 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[130, 154])
2025-01-31 15:31:43,712 - DEBUG - on stmt: bool180 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,712 - DEBUG - on stmt: $180pred = call bool180(invert, func=bool180, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,712 - DEBUG - find_def var='invert' stmt=$180pred = call bool180(invert, func=bool180, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,712 - DEBUG - find_def_from_top label 178
2025-01-31 15:31:43,712 - DEBUG - idom 130 from label 178
2025-01-31 15:31:43,712 - DEBUG - find_def_from_bottom label 130
2025-01-31 15:31:43,712 - DEBUG - find_def_from_top label 130
2025-01-31 15:31:43,712 - DEBUG - idom 106 from label 130
2025-01-31 15:31:43,712 - DEBUG - find_def_from_bottom label 106
2025-01-31 15:31:43,712 - DEBUG - find_def_from_top label 106
2025-01-31 15:31:43,712 - DEBUG - insert phi node invert.2 = phi(incoming_values=[], incoming_blocks=[]) at 106
2025-01-31 15:31:43,712 - DEBUG - find_def_from_bottom label 96
2025-01-31 15:31:43,712 - DEBUG - find_def_from_top label 96
2025-01-31 15:31:43,712 - DEBUG - idom 48 from label 96
2025-01-31 15:31:43,712 - DEBUG - find_def_from_bottom label 48
2025-01-31 15:31:43,712 - DEBUG - find_def_from_top label 48
2025-01-31 15:31:43,712 - DEBUG - idom 26 from label 48
2025-01-31 15:31:43,712 - DEBUG - find_def_from_bottom label 26
2025-01-31 15:31:43,712 - DEBUG - incoming_def invert = const(bool, True)
2025-01-31 15:31:43,712 - DEBUG - find_def_from_bottom label 98
2025-01-31 15:31:43,712 - DEBUG - incoming_def invert.1 = const(bool, False)
2025-01-31 15:31:43,712 - DEBUG - replaced with: $180pred = call bool180(invert.2, func=bool180, args=(Var(invert.2, numbers.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,712 - DEBUG - on stmt: branch $180pred, 182, 190
2025-01-31 15:31:43,712 - DEBUG - ==== SSA block rewrite pass on 182
2025-01-31 15:31:43,712 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e1a0>
2025-01-31 15:31:43,712 - DEBUG - on stmt: $const182.0 = const(float, 1.0)
2025-01-31 15:31:43,713 - DEBUG - on stmt: $186binary_true_divide.2 = $const182.0 / r.4
2025-01-31 15:31:43,713 - DEBUG - on stmt: $188return_value.3 = cast(value=$186binary_true_divide.2)
2025-01-31 15:31:43,713 - DEBUG - on stmt: return $188return_value.3
2025-01-31 15:31:43,713 - DEBUG - ==== SSA block rewrite pass on 190
2025-01-31 15:31:43,713 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e1a0>
2025-01-31 15:31:43,713 - DEBUG - on stmt: $192return_value.1 = cast(value=r.4)
2025-01-31 15:31:43,713 - DEBUG - on stmt: return $192return_value.1
2025-01-31 15:31:43,713 - DEBUG - Fix SSA violator on var exp
2025-01-31 15:31:43,713 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-31 15:31:43,713 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871eaa0>
2025-01-31 15:31:43,713 - DEBUG - on stmt: a = arg(0, name=a)
2025-01-31 15:31:43,713 - DEBUG - on stmt: b = arg(1, name=b)
2025-01-31 15:31:43,713 - DEBUG - on stmt: $2load_deref.0 = freevar(tp: float64)
2025-01-31 15:31:43,713 - DEBUG - on stmt: $const4.1 = const(int, 1)
2025-01-31 15:31:43,713 - DEBUG - on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,713 - DEBUG - on stmt: $10load_deref.3 = freevar(tp: float64)
2025-01-31 15:31:43,713 - DEBUG - on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,713 - DEBUG - on stmt: $const20.7 = const(int, 0)
2025-01-31 15:31:43,713 - DEBUG - on stmt: $22compare_op.8 = b < $const20.7
2025-01-31 15:31:43,713 - DEBUG - on stmt: bool24 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,713 - DEBUG - on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,713 - DEBUG - on stmt: branch $24pred, 26, 98
2025-01-31 15:31:43,713 - DEBUG - ==== SSA block rewrite pass on 26
2025-01-31 15:31:43,713 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871eaa0>
2025-01-31 15:31:43,713 - DEBUG - on stmt: invert = const(bool, True)
2025-01-31 15:31:43,713 - DEBUG - on stmt: exp = unary(fn=<built-in function neg>, value=b)
2025-01-31 15:31:43,713 - DEBUG - first assign: exp
2025-01-31 15:31:43,713 - DEBUG - replaced with: exp = unary(fn=<built-in function neg>, value=b)
2025-01-31 15:31:43,714 - DEBUG - on stmt: $const38.4 = const(int, 0)
2025-01-31 15:31:43,714 - DEBUG - on stmt: $40compare_op.5 = exp < $const38.4
2025-01-31 15:31:43,714 - DEBUG - on stmt: bool42 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,714 - DEBUG - on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,714 - DEBUG - on stmt: branch $42pred, 44, 48
2025-01-31 15:31:43,714 - DEBUG - ==== SSA block rewrite pass on 44
2025-01-31 15:31:43,714 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871eaa0>
2025-01-31 15:31:43,714 - DEBUG - on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
2025-01-31 15:31:43,714 - DEBUG - on stmt: <static> raise <class 'OverflowError'>
2025-01-31 15:31:43,714 - DEBUG - ==== SSA block rewrite pass on 48
2025-01-31 15:31:43,714 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871eaa0>
2025-01-31 15:31:43,714 - DEBUG - on stmt: $48load_deref.0 = freevar(is_integer: False)
2025-01-31 15:31:43,714 - DEBUG - on stmt: bool50 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,714 - DEBUG - on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,714 - DEBUG - on stmt: jump 96
2025-01-31 15:31:43,714 - DEBUG - ==== SSA block rewrite pass on 96
2025-01-31 15:31:43,714 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871eaa0>
2025-01-31 15:31:43,714 - DEBUG - on stmt: jump 106
2025-01-31 15:31:43,714 - DEBUG - ==== SSA block rewrite pass on 98
2025-01-31 15:31:43,714 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871eaa0>
2025-01-31 15:31:43,714 - DEBUG - on stmt: invert.1 = const(bool, False)
2025-01-31 15:31:43,714 - DEBUG - on stmt: exp = b
2025-01-31 15:31:43,714 - DEBUG - replaced with: exp.1 = b
2025-01-31 15:31:43,714 - DEBUG - on stmt: jump 106
2025-01-31 15:31:43,714 - DEBUG - ==== SSA block rewrite pass on 106
2025-01-31 15:31:43,714 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871eaa0>
2025-01-31 15:31:43,714 - DEBUG - on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:219), Var(invert.1, numbers.py:232)], incoming_blocks=[96, 98])
2025-01-31 15:31:43,714 - DEBUG - on stmt: $const108.1 = const(int, 65536)
2025-01-31 15:31:43,714 - DEBUG - on stmt: $110compare_op.2 = exp > $const108.1
2025-01-31 15:31:43,715 - DEBUG - on stmt: bool112 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,715 - DEBUG - on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,715 - DEBUG - on stmt: branch $112pred, 114, 130
2025-01-31 15:31:43,715 - DEBUG - ==== SSA block rewrite pass on 114
2025-01-31 15:31:43,715 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871eaa0>
2025-01-31 15:31:43,715 - DEBUG - on stmt: $114load_global.0 = global(math: <module 'math' from '/home/strain/miniconda3/envs/applio/lib/python3.10/lib-dynload/math.cpython-310-x86_64-linux-gnu.so'>)
2025-01-31 15:31:43,715 - DEBUG - on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
2025-01-31 15:31:43,715 - DEBUG - on stmt: $120load_global.3 = global(float: <class 'float'>)
2025-01-31 15:31:43,715 - DEBUG - on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,715 - DEBUG - on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,715 - DEBUG - on stmt: $128return_value.7 = cast(value=$126call_method.6)
2025-01-31 15:31:43,715 - DEBUG - on stmt: return $128return_value.7
2025-01-31 15:31:43,715 - DEBUG - ==== SSA block rewrite pass on 130
2025-01-31 15:31:43,715 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871eaa0>
2025-01-31 15:31:43,715 - DEBUG - on stmt: $const132.1 = const(int, 0)
2025-01-31 15:31:43,715 - DEBUG - on stmt: $134compare_op.2 = exp != $const132.1
2025-01-31 15:31:43,715 - DEBUG - on stmt: bool136 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,715 - DEBUG - on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,715 - DEBUG - on stmt: branch $136pred, 138, 178
2025-01-31 15:31:43,715 - DEBUG - ==== SSA block rewrite pass on 138
2025-01-31 15:31:43,715 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871eaa0>
2025-01-31 15:31:43,715 - DEBUG - on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:217), Var(a.1.1, numbers.py:241)], incoming_blocks=[130, 154])
2025-01-31 15:31:43,715 - DEBUG - on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[130, 154])
2025-01-31 15:31:43,715 - DEBUG - on stmt: $const140.1 = const(int, 1)
2025-01-31 15:31:43,715 - DEBUG - on stmt: $142binary_and.2 = exp & $const140.1
2025-01-31 15:31:43,715 - DEBUG - on stmt: bool144 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,715 - DEBUG - on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,716 - DEBUG - on stmt: branch $144pred, 146, 154
2025-01-31 15:31:43,716 - DEBUG - ==== SSA block rewrite pass on 146
2025-01-31 15:31:43,716 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871eaa0>
2025-01-31 15:31:43,716 - DEBUG - on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,716 - DEBUG - on stmt: r.1 = $150inplace_multiply.2
2025-01-31 15:31:43,716 - DEBUG - on stmt: jump 154
2025-01-31 15:31:43,716 - DEBUG - ==== SSA block rewrite pass on 154
2025-01-31 15:31:43,716 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871eaa0>
2025-01-31 15:31:43,716 - DEBUG - on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
2025-01-31 15:31:43,716 - DEBUG - on stmt: $const156.1 = const(int, 1)
2025-01-31 15:31:43,716 - DEBUG - on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,716 - DEBUG - on stmt: exp = $158inplace_rshift.2
2025-01-31 15:31:43,716 - DEBUG - replaced with: exp.2 = $158inplace_rshift.2
2025-01-31 15:31:43,716 - DEBUG - on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,716 - DEBUG - on stmt: a.1.1 = $166inplace_multiply.5
2025-01-31 15:31:43,716 - DEBUG - on stmt: $const172.7 = const(int, 0)
2025-01-31 15:31:43,716 - DEBUG - on stmt: $174compare_op.8 = exp != $const172.7
2025-01-31 15:31:43,716 - DEBUG - on stmt: bool176 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,716 - DEBUG - on stmt: $176pred = call bool176($174compare_op.8, func=bool176, args=(Var($174compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,716 - DEBUG - on stmt: branch $176pred, 138, 178
2025-01-31 15:31:43,716 - DEBUG - ==== SSA block rewrite pass on 178
2025-01-31 15:31:43,716 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871eaa0>
2025-01-31 15:31:43,716 - DEBUG - on stmt: r.4 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[130, 154])
2025-01-31 15:31:43,716 - DEBUG - on stmt: bool180 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,716 - DEBUG - on stmt: $180pred = call bool180(invert.2, func=bool180, args=(Var(invert.2, numbers.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,716 - DEBUG - on stmt: branch $180pred, 182, 190
2025-01-31 15:31:43,716 - DEBUG - ==== SSA block rewrite pass on 182
2025-01-31 15:31:43,716 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871eaa0>
2025-01-31 15:31:43,717 - DEBUG - on stmt: $const182.0 = const(float, 1.0)
2025-01-31 15:31:43,717 - DEBUG - on stmt: $186binary_true_divide.2 = $const182.0 / r.4
2025-01-31 15:31:43,717 - DEBUG - on stmt: $188return_value.3 = cast(value=$186binary_true_divide.2)
2025-01-31 15:31:43,717 - DEBUG - on stmt: return $188return_value.3
2025-01-31 15:31:43,717 - DEBUG - ==== SSA block rewrite pass on 190
2025-01-31 15:31:43,717 - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x7c89e871eaa0>
2025-01-31 15:31:43,717 - DEBUG - on stmt: $192return_value.1 = cast(value=r.4)
2025-01-31 15:31:43,717 - DEBUG - on stmt: return $192return_value.1
2025-01-31 15:31:43,717 - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x7c89e871f2b0>],
             98: [<numba.core.ir.Assign object at 0x7c89e874ba00>],
             154: [<numba.core.ir.Assign object at 0x7c89e87482b0>]})
2025-01-31 15:31:43,717 - DEBUG - ==== SSA block rewrite pass on 0
2025-01-31 15:31:43,717 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e1a0>
2025-01-31 15:31:43,717 - DEBUG - on stmt: a = arg(0, name=a)
2025-01-31 15:31:43,717 - DEBUG - on stmt: b = arg(1, name=b)
2025-01-31 15:31:43,717 - DEBUG - on stmt: $2load_deref.0 = freevar(tp: float64)
2025-01-31 15:31:43,717 - DEBUG - on stmt: $const4.1 = const(int, 1)
2025-01-31 15:31:43,717 - DEBUG - on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,717 - DEBUG - on stmt: $10load_deref.3 = freevar(tp: float64)
2025-01-31 15:31:43,717 - DEBUG - on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,717 - DEBUG - on stmt: $const20.7 = const(int, 0)
2025-01-31 15:31:43,717 - DEBUG - on stmt: $22compare_op.8 = b < $const20.7
2025-01-31 15:31:43,717 - DEBUG - on stmt: bool24 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,717 - DEBUG - on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,717 - DEBUG - on stmt: branch $24pred, 26, 98
2025-01-31 15:31:43,717 - DEBUG - ==== SSA block rewrite pass on 26
2025-01-31 15:31:43,717 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e1a0>
2025-01-31 15:31:43,717 - DEBUG - on stmt: invert = const(bool, True)
2025-01-31 15:31:43,718 - DEBUG - on stmt: exp = unary(fn=<built-in function neg>, value=b)
2025-01-31 15:31:43,718 - DEBUG - on stmt: $const38.4 = const(int, 0)
2025-01-31 15:31:43,718 - DEBUG - on stmt: $40compare_op.5 = exp < $const38.4
2025-01-31 15:31:43,718 - DEBUG - find_def var='exp' stmt=$40compare_op.5 = exp < $const38.4
2025-01-31 15:31:43,718 - DEBUG - on stmt: bool42 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,718 - DEBUG - on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,718 - DEBUG - on stmt: branch $42pred, 44, 48
2025-01-31 15:31:43,718 - DEBUG - ==== SSA block rewrite pass on 44
2025-01-31 15:31:43,718 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e1a0>
2025-01-31 15:31:43,718 - DEBUG - on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
2025-01-31 15:31:43,718 - DEBUG - on stmt: <static> raise <class 'OverflowError'>
2025-01-31 15:31:43,718 - DEBUG - ==== SSA block rewrite pass on 48
2025-01-31 15:31:43,718 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e1a0>
2025-01-31 15:31:43,718 - DEBUG - on stmt: $48load_deref.0 = freevar(is_integer: False)
2025-01-31 15:31:43,718 - DEBUG - on stmt: bool50 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,718 - DEBUG - on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,718 - DEBUG - on stmt: jump 96
2025-01-31 15:31:43,718 - DEBUG - ==== SSA block rewrite pass on 96
2025-01-31 15:31:43,718 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e1a0>
2025-01-31 15:31:43,718 - DEBUG - on stmt: jump 106
2025-01-31 15:31:43,718 - DEBUG - ==== SSA block rewrite pass on 98
2025-01-31 15:31:43,718 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e1a0>
2025-01-31 15:31:43,718 - DEBUG - on stmt: invert.1 = const(bool, False)
2025-01-31 15:31:43,718 - DEBUG - on stmt: exp.1 = b
2025-01-31 15:31:43,718 - DEBUG - on stmt: jump 106
2025-01-31 15:31:43,718 - DEBUG - ==== SSA block rewrite pass on 106
2025-01-31 15:31:43,718 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e1a0>
2025-01-31 15:31:43,718 - DEBUG - on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:219), Var(invert.1, numbers.py:232)], incoming_blocks=[96, 98])
2025-01-31 15:31:43,718 - DEBUG - on stmt: $const108.1 = const(int, 65536)
2025-01-31 15:31:43,719 - DEBUG - on stmt: $110compare_op.2 = exp > $const108.1
2025-01-31 15:31:43,719 - DEBUG - find_def var='exp' stmt=$110compare_op.2 = exp > $const108.1
2025-01-31 15:31:43,719 - DEBUG - find_def_from_top label 106
2025-01-31 15:31:43,719 - DEBUG - insert phi node exp.3 = phi(incoming_values=[], incoming_blocks=[]) at 106
2025-01-31 15:31:43,719 - DEBUG - find_def_from_bottom label 96
2025-01-31 15:31:43,719 - DEBUG - find_def_from_top label 96
2025-01-31 15:31:43,719 - DEBUG - idom 48 from label 96
2025-01-31 15:31:43,719 - DEBUG - find_def_from_bottom label 48
2025-01-31 15:31:43,719 - DEBUG - find_def_from_top label 48
2025-01-31 15:31:43,719 - DEBUG - idom 26 from label 48
2025-01-31 15:31:43,719 - DEBUG - find_def_from_bottom label 26
2025-01-31 15:31:43,719 - DEBUG - incoming_def exp = unary(fn=<built-in function neg>, value=b)
2025-01-31 15:31:43,719 - DEBUG - find_def_from_bottom label 98
2025-01-31 15:31:43,719 - DEBUG - incoming_def exp.1 = b
2025-01-31 15:31:43,719 - DEBUG - replaced with: $110compare_op.2 = exp.3 > $const108.1
2025-01-31 15:31:43,719 - DEBUG - on stmt: bool112 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,719 - DEBUG - on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,719 - DEBUG - on stmt: branch $112pred, 114, 130
2025-01-31 15:31:43,719 - DEBUG - ==== SSA block rewrite pass on 114
2025-01-31 15:31:43,719 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e1a0>
2025-01-31 15:31:43,719 - DEBUG - on stmt: $114load_global.0 = global(math: <module 'math' from '/home/strain/miniconda3/envs/applio/lib/python3.10/lib-dynload/math.cpython-310-x86_64-linux-gnu.so'>)
2025-01-31 15:31:43,719 - DEBUG - on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
2025-01-31 15:31:43,719 - DEBUG - on stmt: $120load_global.3 = global(float: <class 'float'>)
2025-01-31 15:31:43,719 - DEBUG - on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,719 - DEBUG - on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,719 - DEBUG - on stmt: $128return_value.7 = cast(value=$126call_method.6)
2025-01-31 15:31:43,720 - DEBUG - on stmt: return $128return_value.7
2025-01-31 15:31:43,720 - DEBUG - ==== SSA block rewrite pass on 130
2025-01-31 15:31:43,720 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e1a0>
2025-01-31 15:31:43,720 - DEBUG - on stmt: $const132.1 = const(int, 0)
2025-01-31 15:31:43,720 - DEBUG - on stmt: $134compare_op.2 = exp != $const132.1
2025-01-31 15:31:43,720 - DEBUG - find_def var='exp' stmt=$134compare_op.2 = exp != $const132.1
2025-01-31 15:31:43,720 - DEBUG - find_def_from_top label 130
2025-01-31 15:31:43,720 - DEBUG - idom 106 from label 130
2025-01-31 15:31:43,720 - DEBUG - find_def_from_bottom label 106
2025-01-31 15:31:43,720 - DEBUG - replaced with: $134compare_op.2 = exp.3 != $const132.1
2025-01-31 15:31:43,720 - DEBUG - on stmt: bool136 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,720 - DEBUG - on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,720 - DEBUG - on stmt: branch $136pred, 138, 178
2025-01-31 15:31:43,720 - DEBUG - ==== SSA block rewrite pass on 138
2025-01-31 15:31:43,720 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e1a0>
2025-01-31 15:31:43,720 - DEBUG - on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:217), Var(a.1.1, numbers.py:241)], incoming_blocks=[130, 154])
2025-01-31 15:31:43,720 - DEBUG - on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[130, 154])
2025-01-31 15:31:43,720 - DEBUG - on stmt: $const140.1 = const(int, 1)
2025-01-31 15:31:43,720 - DEBUG - on stmt: $142binary_and.2 = exp & $const140.1
2025-01-31 15:31:43,720 - DEBUG - find_def var='exp' stmt=$142binary_and.2 = exp & $const140.1
2025-01-31 15:31:43,720 - DEBUG - find_def_from_top label 138
2025-01-31 15:31:43,720 - DEBUG - insert phi node exp.4 = phi(incoming_values=[], incoming_blocks=[]) at 138
2025-01-31 15:31:43,720 - DEBUG - find_def_from_bottom label 130
2025-01-31 15:31:43,720 - DEBUG - find_def_from_top label 130
2025-01-31 15:31:43,720 - DEBUG - idom 106 from label 130
2025-01-31 15:31:43,720 - DEBUG - find_def_from_bottom label 106
2025-01-31 15:31:43,720 - DEBUG - incoming_def exp.3 = phi(incoming_values=[Var(exp, numbers.py:220), Var(exp.1, numbers.py:233)], incoming_blocks=[96, 98])
2025-01-31 15:31:43,720 - DEBUG - find_def_from_bottom label 154
2025-01-31 15:31:43,721 - DEBUG - incoming_def exp.2 = $158inplace_rshift.2
2025-01-31 15:31:43,721 - DEBUG - replaced with: $142binary_and.2 = exp.4 & $const140.1
2025-01-31 15:31:43,721 - DEBUG - on stmt: bool144 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,721 - DEBUG - on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,721 - DEBUG - on stmt: branch $144pred, 146, 154
2025-01-31 15:31:43,721 - DEBUG - ==== SSA block rewrite pass on 146
2025-01-31 15:31:43,721 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e1a0>
2025-01-31 15:31:43,721 - DEBUG - on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,721 - DEBUG - on stmt: r.1 = $150inplace_multiply.2
2025-01-31 15:31:43,721 - DEBUG - on stmt: jump 154
2025-01-31 15:31:43,721 - DEBUG - ==== SSA block rewrite pass on 154
2025-01-31 15:31:43,721 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e1a0>
2025-01-31 15:31:43,721 - DEBUG - on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
2025-01-31 15:31:43,721 - DEBUG - on stmt: $const156.1 = const(int, 1)
2025-01-31 15:31:43,721 - DEBUG - on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,721 - DEBUG - find_def var='exp' stmt=$158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,721 - DEBUG - find_def_from_top label 154
2025-01-31 15:31:43,721 - DEBUG - idom 138 from label 154
2025-01-31 15:31:43,721 - DEBUG - find_def_from_bottom label 138
2025-01-31 15:31:43,721 - DEBUG - replaced with: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,721 - DEBUG - on stmt: exp.2 = $158inplace_rshift.2
2025-01-31 15:31:43,721 - DEBUG - on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2025-01-31 15:31:43,721 - DEBUG - on stmt: a.1.1 = $166inplace_multiply.5
2025-01-31 15:31:43,721 - DEBUG - on stmt: $const172.7 = const(int, 0)
2025-01-31 15:31:43,721 - DEBUG - on stmt: $174compare_op.8 = exp != $const172.7
2025-01-31 15:31:43,721 - DEBUG - find_def var='exp' stmt=$174compare_op.8 = exp != $const172.7
2025-01-31 15:31:43,722 - DEBUG - replaced with: $174compare_op.8 = exp.2 != $const172.7
2025-01-31 15:31:43,722 - DEBUG - on stmt: bool176 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,722 - DEBUG - on stmt: $176pred = call bool176($174compare_op.8, func=bool176, args=(Var($174compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,722 - DEBUG - on stmt: branch $176pred, 138, 178
2025-01-31 15:31:43,722 - DEBUG - ==== SSA block rewrite pass on 178
2025-01-31 15:31:43,722 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e1a0>
2025-01-31 15:31:43,722 - DEBUG - on stmt: r.4 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[130, 154])
2025-01-31 15:31:43,722 - DEBUG - on stmt: bool180 = global(bool: <class 'bool'>)
2025-01-31 15:31:43,722 - DEBUG - on stmt: $180pred = call bool180(invert.2, func=bool180, args=(Var(invert.2, numbers.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,722 - DEBUG - on stmt: branch $180pred, 182, 190
2025-01-31 15:31:43,722 - DEBUG - ==== SSA block rewrite pass on 182
2025-01-31 15:31:43,722 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e1a0>
2025-01-31 15:31:43,722 - DEBUG - on stmt: $const182.0 = const(float, 1.0)
2025-01-31 15:31:43,722 - DEBUG - on stmt: $186binary_true_divide.2 = $const182.0 / r.4
2025-01-31 15:31:43,722 - DEBUG - on stmt: $188return_value.3 = cast(value=$186binary_true_divide.2)
2025-01-31 15:31:43,722 - DEBUG - on stmt: return $188return_value.3
2025-01-31 15:31:43,722 - DEBUG - ==== SSA block rewrite pass on 190
2025-01-31 15:31:43,722 - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x7c89e871e1a0>
2025-01-31 15:31:43,722 - DEBUG - on stmt: $192return_value.1 = cast(value=r.4)
2025-01-31 15:31:43,722 - DEBUG - on stmt: return $192return_value.1
2025-01-31 15:31:43,808 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=2504)
           2	LOAD_GLOBAL(arg=0, lineno=2508)
           4	LOAD_METHOD(arg=1, lineno=2508)
           6	LOAD_FAST(arg=0, lineno=2508)
           8	CALL_METHOD(arg=1, lineno=2508)
          10	LOAD_CONST(arg=1, lineno=2508)
          12	LOAD_GLOBAL(arg=0, lineno=2508)
          14	LOAD_METHOD(arg=2, lineno=2508)
          16	LOAD_FAST(arg=0, lineno=2508)
          18	CALL_METHOD(arg=1, lineno=2508)
          20	BINARY_MULTIPLY(arg=None, lineno=2508)
          22	BINARY_ADD(arg=None, lineno=2508)
          24	RETURN_VALUE(arg=None, lineno=2508)
2025-01-31 15:31:43,808 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:31:43,809 - DEBUG - stack: []
2025-01-31 15:31:43,809 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:31:43,809 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=2504)
2025-01-31 15:31:43,809 - DEBUG - stack []
2025-01-31 15:31:43,809 - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=2508)
2025-01-31 15:31:43,809 - DEBUG - stack []
2025-01-31 15:31:43,809 - DEBUG - dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=2508)
2025-01-31 15:31:43,809 - DEBUG - stack ['$2load_global.0']
2025-01-31 15:31:43,809 - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=2508)
2025-01-31 15:31:43,809 - DEBUG - stack ['$4load_method.1']
2025-01-31 15:31:43,809 - DEBUG - dispatch pc=8, inst=CALL_METHOD(arg=1, lineno=2508)
2025-01-31 15:31:43,809 - DEBUG - stack ['$4load_method.1', '$x6.2']
2025-01-31 15:31:43,809 - DEBUG - dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=2508)
2025-01-31 15:31:43,809 - DEBUG - stack ['$8call_method.3']
2025-01-31 15:31:43,809 - DEBUG - dispatch pc=12, inst=LOAD_GLOBAL(arg=0, lineno=2508)
2025-01-31 15:31:43,809 - DEBUG - stack ['$8call_method.3', '$const10.4']
2025-01-31 15:31:43,809 - DEBUG - dispatch pc=14, inst=LOAD_METHOD(arg=2, lineno=2508)
2025-01-31 15:31:43,809 - DEBUG - stack ['$8call_method.3', '$const10.4', '$12load_global.5']
2025-01-31 15:31:43,809 - DEBUG - dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=2508)
2025-01-31 15:31:43,809 - DEBUG - stack ['$8call_method.3', '$const10.4', '$14load_method.6']
2025-01-31 15:31:43,809 - DEBUG - dispatch pc=18, inst=CALL_METHOD(arg=1, lineno=2508)
2025-01-31 15:31:43,809 - DEBUG - stack ['$8call_method.3', '$const10.4', '$14load_method.6', '$x16.7']
2025-01-31 15:31:43,809 - DEBUG - dispatch pc=20, inst=BINARY_MULTIPLY(arg=None, lineno=2508)
2025-01-31 15:31:43,809 - DEBUG - stack ['$8call_method.3', '$const10.4', '$18call_method.8']
2025-01-31 15:31:43,809 - DEBUG - dispatch pc=22, inst=BINARY_ADD(arg=None, lineno=2508)
2025-01-31 15:31:43,809 - DEBUG - stack ['$8call_method.3', '$20binary_multiply.9']
2025-01-31 15:31:43,809 - DEBUG - dispatch pc=24, inst=RETURN_VALUE(arg=None, lineno=2508)
2025-01-31 15:31:43,809 - DEBUG - stack ['$22binary_add.10']
2025-01-31 15:31:43,810 - DEBUG - end state. edges=[]
2025-01-31 15:31:43,810 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:31:43,810 - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-01-31 15:31:43,810 - DEBUG - defmap: {}
2025-01-31 15:31:43,810 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:43,810 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:43,810 - DEBUG - keep phismap: {}
2025-01-31 15:31:43,810 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-01-31 15:31:43,810 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:31:43,810 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$x6.2'}), (8, {'func': '$4load_method.1', 'args': ['$x6.2'], 'res': '$8call_method.3'}), (10, {'res': '$const10.4'}), (12, {'res': '$12load_global.5'}), (14, {'item': '$12load_global.5', 'res': '$14load_method.6'}), (16, {'res': '$x16.7'}), (18, {'func': '$14load_method.6', 'args': ['$x16.7'], 'res': '$18call_method.8'}), (20, {'lhs': '$const10.4', 'rhs': '$18call_method.8', 'res': '$20binary_multiply.9'}), (22, {'lhs': '$8call_method.3', 'rhs': '$20binary_multiply.9', 'res': '$22binary_add.10'}), (24, {'retval': '$22binary_add.10', 'castval': '$24return_value.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:43,811 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    $2load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=cos) ['$2load_global.0', '$4load_method.1']
    $8call_method.3 = call $4load_method.1(x, func=$4load_method.1, args=[Var(x, utils.py:2504)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_method.1', '$8call_method.3', 'x']
    $const10.4 = const(complex, 1j)          ['$const10.4']
    $12load_global.5 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>) ['$12load_global.5']
    $14load_method.6 = getattr(value=$12load_global.5, attr=sin) ['$12load_global.5', '$14load_method.6']
    $18call_method.8 = call $14load_method.6(x, func=$14load_method.6, args=[Var(x, utils.py:2504)], kws=(), vararg=None, varkwarg=None, target=None) ['$14load_method.6', '$18call_method.8', 'x']
    $20binary_multiply.9 = $const10.4 * $18call_method.8 ['$18call_method.8', '$20binary_multiply.9', '$const10.4']
    $22binary_add.10 = $8call_method.3 + $20binary_multiply.9 ['$20binary_multiply.9', '$22binary_add.10', '$8call_method.3']
    $24return_value.11 = cast(value=$22binary_add.10) ['$22binary_add.10', '$24return_value.11']
    return $24return_value.11                ['$24return_value.11']

2025-01-31 15:31:43,815 - DEBUG - ==== SSA block analysis pass on 0
2025-01-31 15:31:43,815 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e856e440>
2025-01-31 15:31:43,815 - DEBUG - on stmt: x = arg(0, name=x)
2025-01-31 15:31:43,815 - DEBUG - on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:43,815 - DEBUG - on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=cos)
2025-01-31 15:31:43,815 - DEBUG - on stmt: $8call_method.3 = call $4load_method.1(x, func=$4load_method.1, args=[Var(x, utils.py:2504)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,815 - DEBUG - on stmt: $const10.4 = const(complex, 1j)
2025-01-31 15:31:43,815 - DEBUG - on stmt: $12load_global.5 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:43,815 - DEBUG - on stmt: $14load_method.6 = getattr(value=$12load_global.5, attr=sin)
2025-01-31 15:31:43,815 - DEBUG - on stmt: $18call_method.8 = call $14load_method.6(x, func=$14load_method.6, args=[Var(x, utils.py:2504)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,815 - DEBUG - on stmt: $20binary_multiply.9 = $const10.4 * $18call_method.8
2025-01-31 15:31:43,816 - DEBUG - on stmt: $22binary_add.10 = $8call_method.3 + $20binary_multiply.9
2025-01-31 15:31:43,816 - DEBUG - on stmt: $24return_value.11 = cast(value=$22binary_add.10)
2025-01-31 15:31:43,816 - DEBUG - on stmt: return $24return_value.11
2025-01-31 15:31:43,816 - DEBUG - defs defaultdict(<class 'list'>,
            {'$12load_global.5': [(<numba.core.ir.Assign object at 0x7c89e8768d30>,
                                   0)],
             '$14load_method.6': [(<numba.core.ir.Assign object at 0x7c89e87681c0>,
                                   0)],
             '$18call_method.8': [(<numba.core.ir.Assign object at 0x7c89e856d360>,
                                   0)],
             '$20binary_multiply.9': [(<numba.core.ir.Assign object at 0x7c89e856ce50>,
                                       0)],
             '$22binary_add.10': [(<numba.core.ir.Assign object at 0x7c89e856f490>,
                                   0)],
             '$24return_value.11': [(<numba.core.ir.Assign object at 0x7c89e856f910>,
                                     0)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x7c89e876b6d0>,
                                  0)],
             '$4load_method.1': [(<numba.core.ir.Assign object at 0x7c89e87687f0>,
                                  0)],
             '$8call_method.3': [(<numba.core.ir.Assign object at 0x7c89e8768460>,
                                  0)],
             '$const10.4': [(<numba.core.ir.Assign object at 0x7c89e8768490>,
                             0)],
             'x': [(<numba.core.ir.Assign object at 0x7c89e876a8f0>, 0)]})
2025-01-31 15:31:43,816 - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x7c89e856e440>
2025-01-31 15:31:43,863 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=2504)
           2	LOAD_GLOBAL(arg=0, lineno=2508)
           4	LOAD_METHOD(arg=1, lineno=2508)
           6	LOAD_FAST(arg=0, lineno=2508)
           8	CALL_METHOD(arg=1, lineno=2508)
          10	LOAD_CONST(arg=1, lineno=2508)
          12	LOAD_GLOBAL(arg=0, lineno=2508)
          14	LOAD_METHOD(arg=2, lineno=2508)
          16	LOAD_FAST(arg=0, lineno=2508)
          18	CALL_METHOD(arg=1, lineno=2508)
          20	BINARY_MULTIPLY(arg=None, lineno=2508)
          22	BINARY_ADD(arg=None, lineno=2508)
          24	RETURN_VALUE(arg=None, lineno=2508)
2025-01-31 15:31:43,863 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:31:43,863 - DEBUG - stack: []
2025-01-31 15:31:43,863 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:31:43,863 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=2504)
2025-01-31 15:31:43,863 - DEBUG - stack []
2025-01-31 15:31:43,863 - DEBUG - dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=2508)
2025-01-31 15:31:43,863 - DEBUG - stack []
2025-01-31 15:31:43,863 - DEBUG - dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=2508)
2025-01-31 15:31:43,863 - DEBUG - stack ['$2load_global.0']
2025-01-31 15:31:43,863 - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=2508)
2025-01-31 15:31:43,864 - DEBUG - stack ['$4load_method.1']
2025-01-31 15:31:43,864 - DEBUG - dispatch pc=8, inst=CALL_METHOD(arg=1, lineno=2508)
2025-01-31 15:31:43,864 - DEBUG - stack ['$4load_method.1', '$x6.2']
2025-01-31 15:31:43,864 - DEBUG - dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=2508)
2025-01-31 15:31:43,864 - DEBUG - stack ['$8call_method.3']
2025-01-31 15:31:43,864 - DEBUG - dispatch pc=12, inst=LOAD_GLOBAL(arg=0, lineno=2508)
2025-01-31 15:31:43,864 - DEBUG - stack ['$8call_method.3', '$const10.4']
2025-01-31 15:31:43,864 - DEBUG - dispatch pc=14, inst=LOAD_METHOD(arg=2, lineno=2508)
2025-01-31 15:31:43,864 - DEBUG - stack ['$8call_method.3', '$const10.4', '$12load_global.5']
2025-01-31 15:31:43,864 - DEBUG - dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=2508)
2025-01-31 15:31:43,864 - DEBUG - stack ['$8call_method.3', '$const10.4', '$14load_method.6']
2025-01-31 15:31:43,864 - DEBUG - dispatch pc=18, inst=CALL_METHOD(arg=1, lineno=2508)
2025-01-31 15:31:43,864 - DEBUG - stack ['$8call_method.3', '$const10.4', '$14load_method.6', '$x16.7']
2025-01-31 15:31:43,864 - DEBUG - dispatch pc=20, inst=BINARY_MULTIPLY(arg=None, lineno=2508)
2025-01-31 15:31:43,864 - DEBUG - stack ['$8call_method.3', '$const10.4', '$18call_method.8']
2025-01-31 15:31:43,864 - DEBUG - dispatch pc=22, inst=BINARY_ADD(arg=None, lineno=2508)
2025-01-31 15:31:43,864 - DEBUG - stack ['$8call_method.3', '$20binary_multiply.9']
2025-01-31 15:31:43,864 - DEBUG - dispatch pc=24, inst=RETURN_VALUE(arg=None, lineno=2508)
2025-01-31 15:31:43,864 - DEBUG - stack ['$22binary_add.10']
2025-01-31 15:31:43,864 - DEBUG - end state. edges=[]
2025-01-31 15:31:43,864 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:31:43,864 - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-01-31 15:31:43,864 - DEBUG - defmap: {}
2025-01-31 15:31:43,864 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:43,864 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:31:43,864 - DEBUG - keep phismap: {}
2025-01-31 15:31:43,865 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-01-31 15:31:43,865 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:31:43,865 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$x6.2'}), (8, {'func': '$4load_method.1', 'args': ['$x6.2'], 'res': '$8call_method.3'}), (10, {'res': '$const10.4'}), (12, {'res': '$12load_global.5'}), (14, {'item': '$12load_global.5', 'res': '$14load_method.6'}), (16, {'res': '$x16.7'}), (18, {'func': '$14load_method.6', 'args': ['$x16.7'], 'res': '$18call_method.8'}), (20, {'lhs': '$const10.4', 'rhs': '$18call_method.8', 'res': '$20binary_multiply.9'}), (22, {'lhs': '$8call_method.3', 'rhs': '$20binary_multiply.9', 'res': '$22binary_add.10'}), (24, {'retval': '$22binary_add.10', 'castval': '$24return_value.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:31:43,865 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    $2load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=cos) ['$2load_global.0', '$4load_method.1']
    $8call_method.3 = call $4load_method.1(x, func=$4load_method.1, args=[Var(x, utils.py:2504)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_method.1', '$8call_method.3', 'x']
    $const10.4 = const(complex, 1j)          ['$const10.4']
    $12load_global.5 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>) ['$12load_global.5']
    $14load_method.6 = getattr(value=$12load_global.5, attr=sin) ['$12load_global.5', '$14load_method.6']
    $18call_method.8 = call $14load_method.6(x, func=$14load_method.6, args=[Var(x, utils.py:2504)], kws=(), vararg=None, varkwarg=None, target=None) ['$14load_method.6', '$18call_method.8', 'x']
    $20binary_multiply.9 = $const10.4 * $18call_method.8 ['$18call_method.8', '$20binary_multiply.9', '$const10.4']
    $22binary_add.10 = $8call_method.3 + $20binary_multiply.9 ['$20binary_multiply.9', '$22binary_add.10', '$8call_method.3']
    $24return_value.11 = cast(value=$22binary_add.10) ['$22binary_add.10', '$24return_value.11']
    return $24return_value.11                ['$24return_value.11']

2025-01-31 15:31:43,869 - DEBUG - ==== SSA block analysis pass on 0
2025-01-31 15:31:43,869 - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x7c89e8769e40>
2025-01-31 15:31:43,869 - DEBUG - on stmt: x = arg(0, name=x)
2025-01-31 15:31:43,869 - DEBUG - on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:43,869 - DEBUG - on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=cos)
2025-01-31 15:31:43,869 - DEBUG - on stmt: $8call_method.3 = call $4load_method.1(x, func=$4load_method.1, args=[Var(x, utils.py:2504)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,869 - DEBUG - on stmt: $const10.4 = const(complex, 1j)
2025-01-31 15:31:43,869 - DEBUG - on stmt: $12load_global.5 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>)
2025-01-31 15:31:43,869 - DEBUG - on stmt: $14load_method.6 = getattr(value=$12load_global.5, attr=sin)
2025-01-31 15:31:43,869 - DEBUG - on stmt: $18call_method.8 = call $14load_method.6(x, func=$14load_method.6, args=[Var(x, utils.py:2504)], kws=(), vararg=None, varkwarg=None, target=None)
2025-01-31 15:31:43,869 - DEBUG - on stmt: $20binary_multiply.9 = $const10.4 * $18call_method.8
2025-01-31 15:31:43,869 - DEBUG - on stmt: $22binary_add.10 = $8call_method.3 + $20binary_multiply.9
2025-01-31 15:31:43,869 - DEBUG - on stmt: $24return_value.11 = cast(value=$22binary_add.10)
2025-01-31 15:31:43,869 - DEBUG - on stmt: return $24return_value.11
2025-01-31 15:31:43,870 - DEBUG - defs defaultdict(<class 'list'>,
            {'$12load_global.5': [(<numba.core.ir.Assign object at 0x7c89e876a9e0>,
                                   0)],
             '$14load_method.6': [(<numba.core.ir.Assign object at 0x7c89e876bb50>,
                                   0)],
             '$18call_method.8': [(<numba.core.ir.Assign object at 0x7c89e876aad0>,
                                   0)],
             '$20binary_multiply.9': [(<numba.core.ir.Assign object at 0x7c89e8769630>,
                                       0)],
             '$22binary_add.10': [(<numba.core.ir.Assign object at 0x7c89e8769d20>,
                                   0)],
             '$24return_value.11': [(<numba.core.ir.Assign object at 0x7c89e8768e80>,
                                     0)],
             '$2load_global.0': [(<numba.core.ir.Assign object at 0x7c89e876a6b0>,
                                  0)],
             '$4load_method.1': [(<numba.core.ir.Assign object at 0x7c89e8768730>,
                                  0)],
             '$8call_method.3': [(<numba.core.ir.Assign object at 0x7c89e876b400>,
                                  0)],
             '$const10.4': [(<numba.core.ir.Assign object at 0x7c89e876af20>,
                             0)],
             'x': [(<numba.core.ir.Assign object at 0x7c89e8769ed0>, 0)]})
2025-01-31 15:31:43,870 - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x7c89e8769e40>
2025-01-31 15:33:06,603 - INFO - Saving Vocals stem to La Feve - Comme des enfants_(Vocals)_UVR-MDX-NET-Inst_HQ_3.wav...
2025-01-31 15:33:06,656 - INFO - Audio duration is 0.04 hours (128.52 seconds).
2025-01-31 15:33:06,656 - INFO - Using pydub for writing.
2025-01-31 15:33:06,711 - INFO - Saving Instrumental stem to La Feve - Comme des enfants_(Instrumental)_UVR-MDX-NET-Inst_HQ_3.wav...
2025-01-31 15:33:06,712 - INFO - Audio duration is 0.04 hours (128.52 seconds).
2025-01-31 15:33:06,712 - INFO - Using pydub for writing.
2025-01-31 15:33:06,854 - INFO - Clearing input audio file paths, sources and stems...
2025-01-31 15:33:06,854 - INFO - Separation duration: 00:01:31
2025-01-31 15:33:06,855 - INFO - Split audio into ./split_audios/vocal_La Feve - Comme des enfants.wav and ./split_audios/instrument_La Feve - Comme des enfants.wav
2025-01-31 15:33:06,855 - ERROR - An error occurred during processing
Traceback (most recent call last):
  File "/home/strain/deepVoice/Applio/server.py", line 126, in home
    raise Exception(f"Model {selected_model} not found")
Exception: Model Damso not found
2025-01-31 15:33:06,978 - INFO - 127.0.0.1 - - [31/Jan/2025 15:33:06] "POST / HTTP/1.1" 200 -
2025-01-31 15:36:26,709 - INFO -  * Detected change in '/home/strain/deepVoice/Applio/logs/model/rename.py', reloading
2025-01-31 15:36:27,265 - INFO -  * Restarting with stat
2025-01-31 15:36:29,110 - WARNING -  * Debugger is active!
2025-01-31 15:36:29,110 - INFO -  * Debugger PIN: 142-961-790
2025-01-31 15:38:48,921 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2025-01-31 15:38:48,921 - INFO - [33mPress CTRL+C to quit[0m
2025-01-31 15:38:48,921 - INFO -  * Restarting with stat
2025-01-31 15:38:50,720 - WARNING -  * Debugger is active!
2025-01-31 15:38:50,721 - INFO -  * Debugger PIN: 142-961-790
2025-01-31 15:38:55,226 - INFO - Retrieved models: ['Ninho', 'Damso', 'Vald600', 'CharlesAznavour', 'MarineLepen', 'JUL_Interview', 'LaFeve', 'Nekfeu250', 'MickeyMouse', 'SCHInterview', 'SCH1000', 'NicolasSarkozy_v2_500e', 'Maes_600', 'KAARIS', 'ClaudeFrancoisV2', 'Josman', 'SoLaLune', 'JohnnyHallyday800', 'Titeuf600', 'Kylian-Mbapp√©', 'Lacrim', 'OrelsanV1', 'Booba', 'EricCartman', 'kaarism', 'Ademo', 'rick', 'Bassem', 'Wejdene_310Epochs', 'Laylow1000', 'PhilippeEtchebest', 'EricZemmour', 'FreezeCorleone', 'macron', 'gazo700', 'Angele', 'AlphaWann', 'Laylow', 'hamzaai500v2', 'homerSimpson']
2025-01-31 15:38:55,232 - INFO - 127.0.0.1 - - [31/Jan/2025 15:38:55] "GET / HTTP/1.1" 200 -
2025-01-31 15:39:04,172 - INFO - Retrieved models: ['Ninho', 'Damso', 'Vald600', 'CharlesAznavour', 'MarineLepen', 'JUL_Interview', 'LaFeve', 'Nekfeu250', 'MickeyMouse', 'SCHInterview', 'SCH1000', 'NicolasSarkozy_v2_500e', 'Maes_600', 'KAARIS', 'ClaudeFrancoisV2', 'Josman', 'SoLaLune', 'JohnnyHallyday800', 'Titeuf600', 'Kylian-Mbapp√©', 'Lacrim', 'OrelsanV1', 'Booba', 'EricCartman', 'kaarism', 'Ademo', 'rick', 'Bassem', 'Wejdene_310Epochs', 'Laylow1000', 'PhilippeEtchebest', 'EricZemmour', 'FreezeCorleone', 'macron', 'gazo700', 'Angele', 'AlphaWann', 'Laylow', 'hamzaai500v2', 'homerSimpson']
2025-01-31 15:39:04,174 - INFO - Received YouTube URL for processing: https://www.youtube.com/watch?v=Jq-LrzeABss
2025-01-31 15:39:04,175 - DEBUG - matched regex search: (?:v=|\/)([0-9A-Za-z_-]{11}).*
2025-01-31 15:39:05,188 - DEBUG - finding initial function name
2025-01-31 15:39:05,189 - DEBUG - Pattern failed: ytplayer\.config\s*=\s*
2025-01-31 15:39:05,189 - DEBUG - Could not parse object.
2025-01-31 15:39:05,209 - DEBUG - finished regex search, matched: (/s/player/[\w\d]+/[\w\d_/.]+/base\.js)
2025-01-31 15:39:05,585 - DEBUG - matched regex search: signatureTimestamp:(\d*)
2025-01-31 15:39:05,585 - DEBUG - The WEB client requires poToken to obtain functional streams
2025-01-31 15:39:05,585 - DEBUG - Automatically generating poToken
2025-01-31 15:39:05,586 - DEBUG - Looking for visitorData in initial_data
2025-01-31 15:39:05,688 - DEBUG - matched regex search: visitor_data[',\"\s]+value['\"]:\s?['\"]([a-zA-Z0-9_%-]+)['\"]
2025-01-31 15:39:05,688 - DEBUG - VisitorData obtained successfully
2025-01-31 15:39:05,689 - DEBUG - Invoking botGuard
2025-01-31 15:39:06,413 - DEBUG - PoToken generated successfully
2025-01-31 15:39:06,808 - DEBUG - Found title in vid_info
2025-01-31 15:39:06,808 - DEBUG - applying descrambler
2025-01-31 15:39:06,808 - DEBUG - Applying poToken
2025-01-31 15:39:06,829 - DEBUG - finding initial function name
2025-01-31 15:39:06,892 - DEBUG - finished regex search, matched: (?P<sig>[a-zA-Z0-9_$]+)\s*=\s*function\(\s*(?P<arg>[a-zA-Z0-9_$]+)\s*\)\s*{\s*(?P=arg)\s*=\s*(?P=arg)\.split\(\s*""\s*\)\s*;\s*[^}]+;\s*return\s+(?P=arg)\.join\(\s*""\s*\)
2025-01-31 15:39:06,892 - DEBUG - Signature cipher function name: ouU
2025-01-31 15:39:06,892 - DEBUG - Finding throttling function name
2025-01-31 15:39:06,962 - DEBUG - finished regex search, matched: (?x)
            (?:
                \.get\("n"\)\)&&\(b=|
                (?:
                    b=String\.fromCharCode\(110\)|
                    (?P<str_idx>[a-zA-Z0-9_$.]+)&&\(b="nn"\[\+(?P=str_idx)\]
                )
                (?:
                    ,[a-zA-Z0-9_$]+\(a\))?,c=a\.
                    (?:
                        get\(b\)|
                        [a-zA-Z0-9_$]+\[b\]\|\|null
                    )\)&&\(c=|
                \b(?P<var>[a-zA-Z0-9_$]+)=
            )(?P<nfunc>[a-zA-Z0-9_$]+)(?:\[(?P<idx>\d+)\])?\([a-zA-Z]\)
            (?(var),[a-zA-Z0-9_$]+\.set\((?:"n+"|[a-zA-Z0-9_$]+)\,(?P=var)\))
2025-01-31 15:39:06,962 - DEBUG - func is: b_N
2025-01-31 15:39:06,962 - DEBUG - idx is: 0
2025-01-31 15:39:06,962 - DEBUG - Checking throttling function name
2025-01-31 15:39:06,963 - DEBUG - Throttling function name is: xyN
2025-01-31 15:39:06,964 - DEBUG - signature found, skip decipher
2025-01-31 15:39:06,964 - DEBUG - Parameter n is: UAH66nzpmvg7SbPM2
2025-01-31 15:39:07,469 - DEBUG - Parameter n deciphered: 5FCEZbeZ3yVv0w
2025-01-31 15:39:07,469 - DEBUG - signature found, skip decipher
2025-01-31 15:39:07,469 - DEBUG - Parameter n is: RKh3-9FgZvxral4YX
2025-01-31 15:39:07,956 - DEBUG - Parameter n deciphered: 5obhPUaUkS3hUw
2025-01-31 15:39:07,956 - DEBUG - signature found, skip decipher
2025-01-31 15:39:07,956 - DEBUG - Parameter n is: RKh3-9FgZvxral4YX
2025-01-31 15:39:07,956 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:39:07,956 - DEBUG - Parameter n deciphered: 5obhPUaUkS3hUw
2025-01-31 15:39:07,956 - DEBUG - signature found, skip decipher
2025-01-31 15:39:07,957 - DEBUG - Parameter n is: RKh3-9FgZvxral4YX
2025-01-31 15:39:07,957 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:39:07,957 - DEBUG - Parameter n deciphered: 5obhPUaUkS3hUw
2025-01-31 15:39:07,957 - DEBUG - signature found, skip decipher
2025-01-31 15:39:07,957 - DEBUG - Parameter n is: RKh3-9FgZvxral4YX
2025-01-31 15:39:07,957 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:39:07,957 - DEBUG - Parameter n deciphered: 5obhPUaUkS3hUw
2025-01-31 15:39:07,957 - DEBUG - signature found, skip decipher
2025-01-31 15:39:07,957 - DEBUG - Parameter n is: RKh3-9FgZvxral4YX
2025-01-31 15:39:07,957 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:39:07,957 - DEBUG - Parameter n deciphered: 5obhPUaUkS3hUw
2025-01-31 15:39:07,958 - DEBUG - signature found, skip decipher
2025-01-31 15:39:07,958 - DEBUG - Parameter n is: RKh3-9FgZvxral4YX
2025-01-31 15:39:07,958 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:39:07,958 - DEBUG - Parameter n deciphered: 5obhPUaUkS3hUw
2025-01-31 15:39:07,958 - DEBUG - signature found, skip decipher
2025-01-31 15:39:07,958 - DEBUG - Parameter n is: RKh3-9FgZvxral4YX
2025-01-31 15:39:07,958 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:39:07,958 - DEBUG - Parameter n deciphered: 5obhPUaUkS3hUw
2025-01-31 15:39:07,959 - DEBUG - signature found, skip decipher
2025-01-31 15:39:07,959 - DEBUG - Parameter n is: RKh3-9FgZvxral4YX
2025-01-31 15:39:07,959 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:39:07,959 - DEBUG - Parameter n deciphered: 5obhPUaUkS3hUw
2025-01-31 15:39:07,959 - DEBUG - signature found, skip decipher
2025-01-31 15:39:07,959 - DEBUG - Parameter n is: RKh3-9FgZvxral4YX
2025-01-31 15:39:07,959 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:39:07,959 - DEBUG - Parameter n deciphered: 5obhPUaUkS3hUw
2025-01-31 15:39:07,960 - DEBUG - signature found, skip decipher
2025-01-31 15:39:07,960 - DEBUG - Parameter n is: RKh3-9FgZvxral4YX
2025-01-31 15:39:07,960 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:39:07,960 - DEBUG - Parameter n deciphered: 5obhPUaUkS3hUw
2025-01-31 15:39:07,960 - DEBUG - signature found, skip decipher
2025-01-31 15:39:07,960 - DEBUG - Parameter n is: RKh3-9FgZvxral4YX
2025-01-31 15:39:07,960 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:39:07,960 - DEBUG - Parameter n deciphered: 5obhPUaUkS3hUw
2025-01-31 15:39:07,961 - DEBUG - signature found, skip decipher
2025-01-31 15:39:07,961 - DEBUG - Parameter n is: RKh3-9FgZvxral4YX
2025-01-31 15:39:07,961 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:39:07,961 - DEBUG - Parameter n deciphered: 5obhPUaUkS3hUw
2025-01-31 15:39:07,961 - DEBUG - signature found, skip decipher
2025-01-31 15:39:07,961 - DEBUG - Parameter n is: RKh3-9FgZvxral4YX
2025-01-31 15:39:07,961 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:39:07,961 - DEBUG - Parameter n deciphered: 5obhPUaUkS3hUw
2025-01-31 15:39:07,962 - DEBUG - signature found, skip decipher
2025-01-31 15:39:07,962 - DEBUG - Parameter n is: RKh3-9FgZvxral4YX
2025-01-31 15:39:07,962 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:39:07,962 - DEBUG - Parameter n deciphered: 5obhPUaUkS3hUw
2025-01-31 15:39:07,962 - DEBUG - signature found, skip decipher
2025-01-31 15:39:07,962 - DEBUG - Parameter n is: RKh3-9FgZvxral4YX
2025-01-31 15:39:07,962 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:39:07,962 - DEBUG - Parameter n deciphered: 5obhPUaUkS3hUw
2025-01-31 15:39:07,963 - DEBUG - signature found, skip decipher
2025-01-31 15:39:07,963 - DEBUG - Parameter n is: RKh3-9FgZvxral4YX
2025-01-31 15:39:07,963 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:39:07,963 - DEBUG - Parameter n deciphered: 5obhPUaUkS3hUw
2025-01-31 15:39:07,963 - DEBUG - signature found, skip decipher
2025-01-31 15:39:07,963 - DEBUG - Parameter n is: RKh3-9FgZvxral4YX
2025-01-31 15:39:07,963 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:39:07,963 - DEBUG - Parameter n deciphered: 5obhPUaUkS3hUw
2025-01-31 15:39:07,963 - DEBUG - signature found, skip decipher
2025-01-31 15:39:07,963 - DEBUG - Parameter n is: RKh3-9FgZvxral4YX
2025-01-31 15:39:07,964 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:39:07,964 - DEBUG - Parameter n deciphered: 5obhPUaUkS3hUw
2025-01-31 15:39:07,964 - DEBUG - signature found, skip decipher
2025-01-31 15:39:07,964 - DEBUG - Parameter n is: RKh3-9FgZvxral4YX
2025-01-31 15:39:07,964 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:39:07,964 - DEBUG - Parameter n deciphered: 5obhPUaUkS3hUw
2025-01-31 15:39:07,964 - DEBUG - signature found, skip decipher
2025-01-31 15:39:07,964 - DEBUG - Parameter n is: RKh3-9FgZvxral4YX
2025-01-31 15:39:07,964 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:39:07,964 - DEBUG - Parameter n deciphered: 5obhPUaUkS3hUw
2025-01-31 15:39:07,965 - DEBUG - signature found, skip decipher
2025-01-31 15:39:07,965 - DEBUG - Parameter n is: RKh3-9FgZvxral4YX
2025-01-31 15:39:07,965 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:39:07,965 - DEBUG - Parameter n deciphered: 5obhPUaUkS3hUw
2025-01-31 15:39:07,965 - DEBUG - signature found, skip decipher
2025-01-31 15:39:07,965 - DEBUG - Parameter n is: RKh3-9FgZvxral4YX
2025-01-31 15:39:07,965 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:39:07,965 - DEBUG - Parameter n deciphered: 5obhPUaUkS3hUw
2025-01-31 15:39:07,966 - DEBUG - downloading (2080762 total bytes) file to /home/strain/deepVoice/Applio/temp_audio
2025-01-31 15:39:08,291 - DEBUG - download remaining: 0
2025-01-31 15:39:08,295 - DEBUG - download finished
2025-01-31 15:39:08,379 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', '/home/strain/deepVoice/Applio/temp_audio', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-31 15:39:08,679 - INFO - YouTube audio downloaded and converted to WAV: La Feve - Comme des enfants
2025-01-31 15:39:08,679 - INFO - Splitting audio for: La Feve - Comme des enfants
2025-01-31 15:39:08,684 - INFO - Separator version 0.28.5 instantiating with output_dir: None, output_format: WAV
2025-01-31 15:39:08,684 - INFO - Output directory not specified. Using current working directory.
2025-01-31 15:39:08,684 - INFO - Operating System: Linux #53-Ubuntu SMP PREEMPT_DYNAMIC Sat Jan 11 00:06:25 UTC 2025
2025-01-31 15:39:08,688 - INFO - System: Linux Node: server Release: 6.8.0-52-generic Machine: x86_64 Proc: x86_64
2025-01-31 15:39:08,688 - INFO - Python Version: 3.10.16
2025-01-31 15:39:08,688 - INFO - PyTorch Version: 2.3.1+cu121
2025-01-31 15:39:08,767 - INFO - FFmpeg installed: ffmpeg version 6.1.1-3ubuntu5 Copyright (c) 2000-2023 the FFmpeg developers
2025-01-31 15:39:08,768 - INFO - ONNX Runtime CPU package installed with version: 1.20.1
2025-01-31 15:39:08,768 - INFO - No hardware acceleration could be configured, running in CPU mode
2025-01-31 15:39:08,768 - INFO - Loading model UVR-MDX-NET-Inst_HQ_3.onnx...
2025-01-31 15:39:09,108 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Erf', version=13)
2025-01-31 15:39:09,108 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Erf', version=9)
2025-01-31 15:39:09,108 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='HardSigmoid', version=6)
2025-01-31 15:39:09,108 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='HardSigmoid', version=1)
2025-01-31 15:39:09,108 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='HardSwish', version=14)
2025-01-31 15:39:09,108 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='LeakyRelu', version=16)
2025-01-31 15:39:09,108 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='LeakyRelu', version=6)
2025-01-31 15:39:09,108 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='LeakyRelu', version=1)
2025-01-31 15:39:09,108 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='LogSoftmax', version=13)
2025-01-31 15:39:09,108 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='LogSoftmax', version=11)
2025-01-31 15:39:09,109 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='LogSoftmax', version=1)
2025-01-31 15:39:09,109 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Relu', version=14)
2025-01-31 15:39:09,109 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Relu', version=13)
2025-01-31 15:39:09,109 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Relu', version=6)
2025-01-31 15:39:09,109 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='PRelu', version=16)
2025-01-31 15:39:09,109 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='PRelu', version=9)
2025-01-31 15:39:09,109 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='PRelu', version=7)
2025-01-31 15:39:09,109 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Elu', version=6)
2025-01-31 15:39:09,109 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Celu', version=12)
2025-01-31 15:39:09,109 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Selu', version=6)
2025-01-31 15:39:09,109 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sigmoid', version=13)
2025-01-31 15:39:09,109 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sigmoid', version=6)
2025-01-31 15:39:09,109 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sigmoid', version=1)
2025-01-31 15:39:09,109 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Softmax', version=11)
2025-01-31 15:39:09,109 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Softmax', version=1)
2025-01-31 15:39:09,109 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Softmax', version=13)
2025-01-31 15:39:09,109 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Softsign', version=1)
2025-01-31 15:39:09,109 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Softplus', version=1)
2025-01-31 15:39:09,110 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ArgMin', version=13)
2025-01-31 15:39:09,110 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ArgMin', version=12)
2025-01-31 15:39:09,110 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ArgMax', version=13)
2025-01-31 15:39:09,110 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ArgMax', version=12)
2025-01-31 15:39:09,110 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ArgMin', version=11)
2025-01-31 15:39:09,110 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ArgMax', version=11)
2025-01-31 15:39:09,111 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Pad', version=13)
2025-01-31 15:39:09,111 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Pad', version=11)
2025-01-31 15:39:09,111 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Pad', version=2)
2025-01-31 15:39:09,111 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='AveragePool', version=11)
2025-01-31 15:39:09,111 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='AveragePool', version=10)
2025-01-31 15:39:09,111 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='AveragePool', version=7)
2025-01-31 15:39:09,111 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='BatchNormalization', version=9)
2025-01-31 15:39:09,111 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='BatchNormalization', version=14)
2025-01-31 15:39:09,111 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='BatchNormalization', version=15)
2025-01-31 15:39:09,112 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Div', version=14)
2025-01-31 15:39:09,112 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Div', version=13)
2025-01-31 15:39:09,112 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Div', version=7)
2025-01-31 15:39:09,112 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Div', version=6)
2025-01-31 15:39:09,112 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Div', version=1)
2025-01-31 15:39:09,112 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Mul', version=14)
2025-01-31 15:39:09,112 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Mul', version=13)
2025-01-31 15:39:09,112 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Mul', version=7)
2025-01-31 15:39:09,112 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Mul', version=6)
2025-01-31 15:39:09,112 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Mul', version=1)
2025-01-31 15:39:09,112 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sub', version=14)
2025-01-31 15:39:09,112 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sub', version=13)
2025-01-31 15:39:09,112 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sub', version=7)
2025-01-31 15:39:09,112 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sub', version=6)
2025-01-31 15:39:09,112 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sub', version=1)
2025-01-31 15:39:09,112 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Add', version=14)
2025-01-31 15:39:09,112 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Add', version=13)
2025-01-31 15:39:09,113 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Add', version=7)
2025-01-31 15:39:09,113 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Add', version=6)
2025-01-31 15:39:09,113 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Add', version=1)
2025-01-31 15:39:09,113 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Cast', version=13)
2025-01-31 15:39:09,113 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Cast', version=9)
2025-01-31 15:39:09,113 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Clip', version=13)
2025-01-31 15:39:09,113 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Clip', version=12)
2025-01-31 15:39:09,113 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Clip', version=11)
2025-01-31 15:39:09,113 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Clip', version=6)
2025-01-31 15:39:09,114 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='GreaterOrEqual', version=12)
2025-01-31 15:39:09,114 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='LessOrEqual', version=12)
2025-01-31 15:39:09,114 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Greater', version=13)
2025-01-31 15:39:09,114 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Greater', version=9)
2025-01-31 15:39:09,114 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Greater', version=7)
2025-01-31 15:39:09,114 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Less', version=13)
2025-01-31 15:39:09,114 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Less', version=9)
2025-01-31 15:39:09,114 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Less', version=7)
2025-01-31 15:39:09,114 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Equal', version=13)
2025-01-31 15:39:09,114 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Equal', version=11)
2025-01-31 15:39:09,114 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Equal', version=7)
2025-01-31 15:39:09,114 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Concat', version=13)
2025-01-31 15:39:09,115 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Concat', version=11)
2025-01-31 15:39:09,115 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Concat', version=4)
2025-01-31 15:39:09,115 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Constant', version=13)
2025-01-31 15:39:09,115 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Constant', version=12)
2025-01-31 15:39:09,115 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Constant', version=11)
2025-01-31 15:39:09,115 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Constant', version=9)
2025-01-31 15:39:09,115 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ConstantOfShape', version=9)
2025-01-31 15:39:09,116 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ConvTranspose', version=11)
2025-01-31 15:39:09,116 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ConvTranspose', version=1)
2025-01-31 15:39:09,116 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Conv', version=11)
2025-01-31 15:39:09,116 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Conv', version=1)
2025-01-31 15:39:09,116 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='CumSum', version=14)
2025-01-31 15:39:09,116 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='CumSum', version=11)
2025-01-31 15:39:09,116 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='DepthToSpace', version=13)
2025-01-31 15:39:09,116 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='DepthToSpace', version=11)
2025-01-31 15:39:09,117 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Dropout', version=10)
2025-01-31 15:39:09,117 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Dropout', version=13)
2025-01-31 15:39:09,117 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Dropout', version=12)
2025-01-31 15:39:09,117 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Einsum', version=12)
2025-01-31 15:39:09,117 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Expand', version=13)
2025-01-31 15:39:09,117 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Expand', version=8)
2025-01-31 15:39:09,118 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='EyeLike', version=9)
2025-01-31 15:39:09,118 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Flatten', version=9)
2025-01-31 15:39:09,118 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Flatten', version=11)
2025-01-31 15:39:09,118 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Flatten', version=13)
2025-01-31 15:39:09,118 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Tanh', version=6)
2025-01-31 15:39:09,118 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Tanh', version=13)
2025-01-31 15:39:09,118 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Tan', version=7)
2025-01-31 15:39:09,119 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sin', version=7)
2025-01-31 15:39:09,119 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sign', version=9)
2025-01-31 15:39:09,119 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sign', version=13)
2025-01-31 15:39:09,119 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Log', version=6)
2025-01-31 15:39:09,119 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Log', version=13)
2025-01-31 15:39:09,119 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Exp', version=13)
2025-01-31 15:39:09,119 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Exp', version=6)
2025-01-31 15:39:09,119 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Cos', version=7)
2025-01-31 15:39:09,119 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Atan', version=7)
2025-01-31 15:39:09,119 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Asin', version=7)
2025-01-31 15:39:09,119 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Acos', version=7)
2025-01-31 15:39:09,119 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Abs', version=6)
2025-01-31 15:39:09,119 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Abs', version=13)
2025-01-31 15:39:09,120 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Gather', version=13)
2025-01-31 15:39:09,120 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Gather', version=11)
2025-01-31 15:39:09,120 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Gather', version=1)
2025-01-31 15:39:09,120 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='GatherElements', version=13)
2025-01-31 15:39:09,120 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='GatherElements', version=11)
2025-01-31 15:39:09,120 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='GatherND', version=13)
2025-01-31 15:39:09,120 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='GatherND', version=12)
2025-01-31 15:39:09,120 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='GatherND', version=11)
2025-01-31 15:39:09,120 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Gemm', version=13)
2025-01-31 15:39:09,121 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Gemm', version=11)
2025-01-31 15:39:09,121 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Gemm', version=9)
2025-01-31 15:39:09,121 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='GlobalAveragePool', version=1)
2025-01-31 15:39:09,121 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Identity', version=1)
2025-01-31 15:39:09,121 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Identity', version=13)
2025-01-31 15:39:09,121 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Identity', version=14)
2025-01-31 15:39:09,121 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Identity', version=16)
2025-01-31 15:39:09,122 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='InstanceNormalization', version=6)
2025-01-31 15:39:09,122 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='InstanceNormalization', version=1)
2025-01-31 15:39:09,122 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='IsInf', version=10)
2025-01-31 15:39:09,122 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='IsNaN', version=13)
2025-01-31 15:39:09,122 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='LayerNormalization', version=17)
2025-01-31 15:39:09,123 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Or', version=7)
2025-01-31 15:39:09,123 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Or', version=1)
2025-01-31 15:39:09,123 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='And', version=7)
2025-01-31 15:39:09,123 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='And', version=1)
2025-01-31 15:39:09,123 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Xor', version=7)
2025-01-31 15:39:09,123 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Xor', version=1)
2025-01-31 15:39:09,123 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Not', version=1)
2025-01-31 15:39:09,123 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='LRN', version=1)
2025-01-31 15:39:09,123 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='LRN', version=13)
2025-01-31 15:39:09,123 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='MatMul', version=13)
2025-01-31 15:39:09,123 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='MatMul', version=9)
2025-01-31 15:39:09,123 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='MatMul', version=1)
2025-01-31 15:39:09,124 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='MaxPool', version=8)
2025-01-31 15:39:09,124 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='MaxPool', version=10)
2025-01-31 15:39:09,124 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='MaxPool', version=11)
2025-01-31 15:39:09,124 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='MaxPool', version=12)
2025-01-31 15:39:09,124 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Mean', version=13)
2025-01-31 15:39:09,124 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Mean', version=8)
2025-01-31 15:39:09,125 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Max', version=13)
2025-01-31 15:39:09,125 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Max', version=12)
2025-01-31 15:39:09,125 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Max', version=8)
2025-01-31 15:39:09,125 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Min', version=13)
2025-01-31 15:39:09,125 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Min', version=12)
2025-01-31 15:39:09,125 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Min', version=8)
2025-01-31 15:39:09,125 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Mod', version=13)
2025-01-31 15:39:09,125 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Mod', version=10)
2025-01-31 15:39:09,126 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Neg', version=13)
2025-01-31 15:39:09,126 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Neg', version=6)
2025-01-31 15:39:09,126 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Neg', version=1)
2025-01-31 15:39:09,490 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='NonMaxSuppression', version=11)
2025-01-31 15:39:09,490 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='NonMaxSuppression', version=10)
2025-01-31 15:39:09,490 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='NonZero', version=13)
2025-01-31 15:39:09,490 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Pow', version=15)
2025-01-31 15:39:09,490 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Pow', version=13)
2025-01-31 15:39:09,490 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Pow', version=12)
2025-01-31 15:39:09,490 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Pow', version=7)
2025-01-31 15:39:09,490 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Pow', version=1)
2025-01-31 15:39:09,490 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sqrt', version=13)
2025-01-31 15:39:09,490 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sqrt', version=6)
2025-01-31 15:39:09,490 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sqrt', version=1)
2025-01-31 15:39:09,491 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Range', version=11)
2025-01-31 15:39:09,491 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Reciprocal', version=13)
2025-01-31 15:39:09,491 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Reciprocal', version=6)
2025-01-31 15:39:09,491 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Reciprocal', version=1)
2025-01-31 15:39:09,491 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceSumSquare', version=13)
2025-01-31 15:39:09,491 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceSumSquare', version=11)
2025-01-31 15:39:09,491 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceSumSquare', version=1)
2025-01-31 15:39:09,491 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceSum', version=11)
2025-01-31 15:39:09,491 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceSum', version=1)
2025-01-31 15:39:09,491 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceProd', version=13)
2025-01-31 15:39:09,492 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceProd', version=11)
2025-01-31 15:39:09,492 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceProd', version=1)
2025-01-31 15:39:09,492 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceMin', version=13)
2025-01-31 15:39:09,492 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceMin', version=12)
2025-01-31 15:39:09,492 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceMin', version=11)
2025-01-31 15:39:09,492 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceMin', version=1)
2025-01-31 15:39:09,492 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceMean', version=13)
2025-01-31 15:39:09,492 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceMean', version=11)
2025-01-31 15:39:09,492 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceMean', version=1)
2025-01-31 15:39:09,492 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceMax', version=13)
2025-01-31 15:39:09,492 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceMax', version=12)
2025-01-31 15:39:09,492 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceMax', version=11)
2025-01-31 15:39:09,492 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceMax', version=1)
2025-01-31 15:39:09,492 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceLogSumExp', version=13)
2025-01-31 15:39:09,492 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceLogSumExp', version=11)
2025-01-31 15:39:09,492 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceLogSumExp', version=1)
2025-01-31 15:39:09,492 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceLogSum', version=13)
2025-01-31 15:39:09,492 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceLogSum', version=11)
2025-01-31 15:39:09,492 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceLogSum', version=1)
2025-01-31 15:39:09,492 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceL2', version=13)
2025-01-31 15:39:09,492 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceL2', version=11)
2025-01-31 15:39:09,492 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceL2', version=1)
2025-01-31 15:39:09,492 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceL1', version=13)
2025-01-31 15:39:09,492 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceL1', version=11)
2025-01-31 15:39:09,492 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceL1', version=1)
2025-01-31 15:39:09,492 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceSum', version=13)
2025-01-31 15:39:09,492 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Reshape', version=14)
2025-01-31 15:39:09,492 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Reshape', version=13)
2025-01-31 15:39:09,492 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Reshape', version=5)
2025-01-31 15:39:09,493 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Resize', version=10)
2025-01-31 15:39:09,493 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Resize', version=13)
2025-01-31 15:39:09,493 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Resize', version=11)
2025-01-31 15:39:09,493 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='RoiAlign', version=10)
2025-01-31 15:39:09,493 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='RoiAlign', version=16)
2025-01-31 15:39:09,493 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Round', version=11)
2025-01-31 15:39:09,493 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Floor', version=6)
2025-01-31 15:39:09,493 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Floor', version=13)
2025-01-31 15:39:09,493 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Ceil', version=6)
2025-01-31 15:39:09,493 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Ceil', version=13)
2025-01-31 15:39:09,494 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ScatterND', version=16)
2025-01-31 15:39:09,494 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ScatterND', version=13)
2025-01-31 15:39:09,494 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ScatterND', version=11)
2025-01-31 15:39:09,494 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Shape', version=15)
2025-01-31 15:39:09,494 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Shape', version=13)
2025-01-31 15:39:09,494 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Shape', version=1)
2025-01-31 15:39:09,494 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Slice', version=9)
2025-01-31 15:39:09,494 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Slice', version=13)
2025-01-31 15:39:09,494 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Slice', version=11)
2025-01-31 15:39:09,494 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Slice', version=10)
2025-01-31 15:39:09,495 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Split', version=13)
2025-01-31 15:39:09,495 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Split', version=2)
2025-01-31 15:39:09,495 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Split', version=11)
2025-01-31 15:39:09,495 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Squeeze', version=11)
2025-01-31 15:39:09,495 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Squeeze', version=1)
2025-01-31 15:39:09,495 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Squeeze', version=21)
2025-01-31 15:39:09,495 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Squeeze', version=13)
2025-01-31 15:39:09,495 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sum', version=13)
2025-01-31 15:39:09,495 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sum', version=8)
2025-01-31 15:39:09,495 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Tile', version=13)
2025-01-31 15:39:09,495 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Tile', version=6)
2025-01-31 15:39:09,496 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='TopK', version=11)
2025-01-31 15:39:09,496 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='TopK', version=10)
2025-01-31 15:39:09,496 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='TopK', version=1)
2025-01-31 15:39:09,496 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Transpose', version=13)
2025-01-31 15:39:09,496 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Transpose', version=1)
2025-01-31 15:39:09,496 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Unsqueeze', version=11)
2025-01-31 15:39:09,496 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Unsqueeze', version=1)
2025-01-31 15:39:09,496 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Unsqueeze', version=13)
2025-01-31 15:39:09,496 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Where', version=16)
2025-01-31 15:39:09,496 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Where', version=9)
2025-01-31 15:39:09,905 - INFO - Load model duration: 00:00:01
2025-01-31 15:39:09,905 - INFO - Starting separation process for audio_file_path: yt_audios/La Feve - Comme des enfants
2025-01-31 15:39:10,004 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=1141)
           2	LOAD_FAST(arg=0, lineno=1144)
           4	LOAD_CONST(arg=1, lineno=1144)
           6	BINARY_SUBSCR(arg=None, lineno=1144)
           8	STORE_FAST(arg=3, lineno=1144)
          10	LOAD_FAST(arg=1, lineno=1145)
          12	UNARY_NEGATIVE(arg=None, lineno=1145)
          14	LOAD_FAST(arg=3, lineno=1145)
          16	DUP_TOP(arg=None, lineno=1145)
          18	ROT_THREE(arg=None, lineno=1145)
          20	COMPARE_OP(arg=1, lineno=1145)
          22	POP_JUMP_IF_FALSE(arg=17, lineno=1145)
          24	LOAD_FAST(arg=1, lineno=1145)
          26	COMPARE_OP(arg=1, lineno=1145)
          28	POP_JUMP_IF_FALSE(arg=21, lineno=1145)
          30	JUMP_FORWARD(arg=2, lineno=1145)
>         32	POP_TOP(arg=None, lineno=1145)
          34	JUMP_FORWARD(arg=2, lineno=1145)
>         36	LOAD_CONST(arg=1, lineno=1146)
          38	STORE_FAST(arg=3, lineno=1146)
>         40	LOAD_FAST(arg=0, lineno=1148)
          42	LOAD_CONST(arg=2, lineno=1148)
          44	BINARY_SUBSCR(arg=None, lineno=1148)
          46	STORE_FAST(arg=4, lineno=1148)
          48	LOAD_FAST(arg=1, lineno=1149)
          50	UNARY_NEGATIVE(arg=None, lineno=1149)
          52	LOAD_FAST(arg=4, lineno=1149)
          54	DUP_TOP(arg=None, lineno=1149)
          56	ROT_THREE(arg=None, lineno=1149)
          58	COMPARE_OP(arg=1, lineno=1149)
          60	POP_JUMP_IF_FALSE(arg=36, lineno=1149)
          62	LOAD_FAST(arg=1, lineno=1149)
          64	COMPARE_OP(arg=1, lineno=1149)
          66	POP_JUMP_IF_FALSE(arg=40, lineno=1149)
          68	JUMP_FORWARD(arg=2, lineno=1149)
>         70	POP_TOP(arg=None, lineno=1149)
          72	JUMP_FORWARD(arg=2, lineno=1149)
>         74	LOAD_CONST(arg=1, lineno=1150)
          76	STORE_FAST(arg=4, lineno=1150)
>         78	LOAD_FAST(arg=2, lineno=1152)
          80	POP_JUMP_IF_FALSE(arg=52, lineno=1152)
          82	LOAD_GLOBAL(arg=0, lineno=1153)
          84	LOAD_METHOD(arg=1, lineno=1153)
          86	LOAD_FAST(arg=3, lineno=1153)
          88	CALL_METHOD(arg=1, lineno=1153)
          90	LOAD_GLOBAL(arg=0, lineno=1153)
          92	LOAD_METHOD(arg=1, lineno=1153)
          94	LOAD_FAST(arg=4, lineno=1153)
          96	CALL_METHOD(arg=1, lineno=1153)
          98	COMPARE_OP(arg=3, lineno=1153)
         100	RETURN_VALUE(arg=None, lineno=1153)
>        102	LOAD_GLOBAL(arg=0, lineno=1155)
         104	LOAD_METHOD(arg=2, lineno=1155)
         106	LOAD_FAST(arg=3, lineno=1155)
         108	CALL_METHOD(arg=1, lineno=1155)
         110	LOAD_GLOBAL(arg=0, lineno=1155)
         112	LOAD_METHOD(arg=2, lineno=1155)
         114	LOAD_FAST(arg=4, lineno=1155)
         116	CALL_METHOD(arg=1, lineno=1155)
         118	COMPARE_OP(arg=3, lineno=1155)
         120	RETURN_VALUE(arg=None, lineno=1155)
2025-01-31 15:39:10,005 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:39:10,005 - DEBUG - stack: []
2025-01-31 15:39:10,005 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:39:10,005 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=1141)
2025-01-31 15:39:10,005 - DEBUG - stack []
2025-01-31 15:39:10,005 - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1144)
2025-01-31 15:39:10,005 - DEBUG - stack []
2025-01-31 15:39:10,005 - DEBUG - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1144)
2025-01-31 15:39:10,005 - DEBUG - stack ['$x2.0']
2025-01-31 15:39:10,005 - DEBUG - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=1144)
2025-01-31 15:39:10,005 - DEBUG - stack ['$x2.0', '$const4.1']
2025-01-31 15:39:10,005 - DEBUG - dispatch pc=8, inst=STORE_FAST(arg=3, lineno=1144)
2025-01-31 15:39:10,005 - DEBUG - stack ['$6binary_subscr.2']
2025-01-31 15:39:10,005 - DEBUG - dispatch pc=10, inst=LOAD_FAST(arg=1, lineno=1145)
2025-01-31 15:39:10,005 - DEBUG - stack []
2025-01-31 15:39:10,005 - DEBUG - dispatch pc=12, inst=UNARY_NEGATIVE(arg=None, lineno=1145)
2025-01-31 15:39:10,005 - DEBUG - stack ['$threshold10.3']
2025-01-31 15:39:10,005 - DEBUG - dispatch pc=14, inst=LOAD_FAST(arg=3, lineno=1145)
2025-01-31 15:39:10,005 - DEBUG - stack ['$12unary_negative.4']
2025-01-31 15:39:10,005 - DEBUG - dispatch pc=16, inst=DUP_TOP(arg=None, lineno=1145)
2025-01-31 15:39:10,005 - DEBUG - stack ['$12unary_negative.4', '$x014.5']
2025-01-31 15:39:10,005 - DEBUG - dispatch pc=18, inst=ROT_THREE(arg=None, lineno=1145)
2025-01-31 15:39:10,006 - DEBUG - stack ['$12unary_negative.4', '$x014.5', '$16dup_top.6']
2025-01-31 15:39:10,006 - DEBUG - dispatch pc=20, inst=COMPARE_OP(arg=1, lineno=1145)
2025-01-31 15:39:10,006 - DEBUG - stack ['$16dup_top.6', '$12unary_negative.4', '$x014.5']
2025-01-31 15:39:10,006 - DEBUG - dispatch pc=22, inst=POP_JUMP_IF_FALSE(arg=17, lineno=1145)
2025-01-31 15:39:10,006 - DEBUG - stack ['$16dup_top.6', '$20compare_op.7']
2025-01-31 15:39:10,006 - DEBUG - end state. edges=[Edge(pc=24, stack=('$16dup_top.6',), blockstack=(), npush=0), Edge(pc=32, stack=('$16dup_top.6',), blockstack=(), npush=0)]
2025-01-31 15:39:10,006 - DEBUG - pending: deque([State(pc_initial=24 nstack_initial=1), State(pc_initial=32 nstack_initial=1)])
2025-01-31 15:39:10,006 - DEBUG - stack: ['$phi24.0']
2025-01-31 15:39:10,006 - DEBUG - state.pc_initial: State(pc_initial=24 nstack_initial=1)
2025-01-31 15:39:10,006 - DEBUG - dispatch pc=24, inst=LOAD_FAST(arg=1, lineno=1145)
2025-01-31 15:39:10,006 - DEBUG - stack ['$phi24.0']
2025-01-31 15:39:10,006 - DEBUG - dispatch pc=26, inst=COMPARE_OP(arg=1, lineno=1145)
2025-01-31 15:39:10,006 - DEBUG - stack ['$phi24.0', '$threshold24.1']
2025-01-31 15:39:10,006 - DEBUG - dispatch pc=28, inst=POP_JUMP_IF_FALSE(arg=21, lineno=1145)
2025-01-31 15:39:10,006 - DEBUG - stack ['$26compare_op.2']
2025-01-31 15:39:10,006 - DEBUG - end state. edges=[Edge(pc=30, stack=(), blockstack=(), npush=0), Edge(pc=40, stack=(), blockstack=(), npush=0)]
2025-01-31 15:39:10,006 - DEBUG - pending: deque([State(pc_initial=32 nstack_initial=1), State(pc_initial=30 nstack_initial=0), State(pc_initial=40 nstack_initial=0)])
2025-01-31 15:39:10,006 - DEBUG - stack: ['$phi32.0']
2025-01-31 15:39:10,006 - DEBUG - state.pc_initial: State(pc_initial=32 nstack_initial=1)
2025-01-31 15:39:10,006 - DEBUG - dispatch pc=32, inst=POP_TOP(arg=None, lineno=1145)
2025-01-31 15:39:10,006 - DEBUG - stack ['$phi32.0']
2025-01-31 15:39:10,006 - DEBUG - dispatch pc=34, inst=JUMP_FORWARD(arg=2, lineno=1145)
2025-01-31 15:39:10,006 - DEBUG - stack []
2025-01-31 15:39:10,006 - DEBUG - end state. edges=[Edge(pc=40, stack=(), blockstack=(), npush=0)]
2025-01-31 15:39:10,006 - DEBUG - pending: deque([State(pc_initial=30 nstack_initial=0), State(pc_initial=40 nstack_initial=0), State(pc_initial=40 nstack_initial=0)])
2025-01-31 15:39:10,006 - DEBUG - stack: []
2025-01-31 15:39:10,006 - DEBUG - state.pc_initial: State(pc_initial=30 nstack_initial=0)
2025-01-31 15:39:10,007 - DEBUG - dispatch pc=30, inst=JUMP_FORWARD(arg=2, lineno=1145)
2025-01-31 15:39:10,007 - DEBUG - stack []
2025-01-31 15:39:10,007 - DEBUG - end state. edges=[Edge(pc=36, stack=(), blockstack=(), npush=0)]
2025-01-31 15:39:10,007 - DEBUG - pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=40 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2025-01-31 15:39:10,007 - DEBUG - stack: []
2025-01-31 15:39:10,007 - DEBUG - state.pc_initial: State(pc_initial=40 nstack_initial=0)
2025-01-31 15:39:10,007 - DEBUG - dispatch pc=40, inst=LOAD_FAST(arg=0, lineno=1148)
2025-01-31 15:39:10,007 - DEBUG - stack []
2025-01-31 15:39:10,007 - DEBUG - dispatch pc=42, inst=LOAD_CONST(arg=2, lineno=1148)
2025-01-31 15:39:10,007 - DEBUG - stack ['$x40.0']
2025-01-31 15:39:10,007 - DEBUG - dispatch pc=44, inst=BINARY_SUBSCR(arg=None, lineno=1148)
2025-01-31 15:39:10,007 - DEBUG - stack ['$x40.0', '$const42.1']
2025-01-31 15:39:10,007 - DEBUG - dispatch pc=46, inst=STORE_FAST(arg=4, lineno=1148)
2025-01-31 15:39:10,007 - DEBUG - stack ['$44binary_subscr.2']
2025-01-31 15:39:10,007 - DEBUG - dispatch pc=48, inst=LOAD_FAST(arg=1, lineno=1149)
2025-01-31 15:39:10,007 - DEBUG - stack []
2025-01-31 15:39:10,007 - DEBUG - dispatch pc=50, inst=UNARY_NEGATIVE(arg=None, lineno=1149)
2025-01-31 15:39:10,007 - DEBUG - stack ['$threshold48.3']
2025-01-31 15:39:10,007 - DEBUG - dispatch pc=52, inst=LOAD_FAST(arg=4, lineno=1149)
2025-01-31 15:39:10,007 - DEBUG - stack ['$50unary_negative.4']
2025-01-31 15:39:10,007 - DEBUG - dispatch pc=54, inst=DUP_TOP(arg=None, lineno=1149)
2025-01-31 15:39:10,007 - DEBUG - stack ['$50unary_negative.4', '$x152.5']
2025-01-31 15:39:10,007 - DEBUG - dispatch pc=56, inst=ROT_THREE(arg=None, lineno=1149)
2025-01-31 15:39:10,007 - DEBUG - stack ['$50unary_negative.4', '$x152.5', '$54dup_top.6']
2025-01-31 15:39:10,007 - DEBUG - dispatch pc=58, inst=COMPARE_OP(arg=1, lineno=1149)
2025-01-31 15:39:10,007 - DEBUG - stack ['$54dup_top.6', '$50unary_negative.4', '$x152.5']
2025-01-31 15:39:10,007 - DEBUG - dispatch pc=60, inst=POP_JUMP_IF_FALSE(arg=36, lineno=1149)
2025-01-31 15:39:10,007 - DEBUG - stack ['$54dup_top.6', '$58compare_op.7']
2025-01-31 15:39:10,008 - DEBUG - end state. edges=[Edge(pc=62, stack=('$54dup_top.6',), blockstack=(), npush=0), Edge(pc=70, stack=('$54dup_top.6',), blockstack=(), npush=0)]
2025-01-31 15:39:10,008 - DEBUG - pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=36 nstack_initial=0), State(pc_initial=62 nstack_initial=1), State(pc_initial=70 nstack_initial=1)])
2025-01-31 15:39:10,008 - DEBUG - pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=62 nstack_initial=1), State(pc_initial=70 nstack_initial=1)])
2025-01-31 15:39:10,008 - DEBUG - stack: []
2025-01-31 15:39:10,008 - DEBUG - state.pc_initial: State(pc_initial=36 nstack_initial=0)
2025-01-31 15:39:10,008 - DEBUG - dispatch pc=36, inst=LOAD_CONST(arg=1, lineno=1146)
2025-01-31 15:39:10,008 - DEBUG - stack []
2025-01-31 15:39:10,008 - DEBUG - dispatch pc=38, inst=STORE_FAST(arg=3, lineno=1146)
2025-01-31 15:39:10,008 - DEBUG - stack ['$const36.0']
2025-01-31 15:39:10,008 - DEBUG - end state. edges=[Edge(pc=40, stack=(), blockstack=(), npush=0)]
2025-01-31 15:39:10,008 - DEBUG - pending: deque([State(pc_initial=62 nstack_initial=1), State(pc_initial=70 nstack_initial=1), State(pc_initial=40 nstack_initial=0)])
2025-01-31 15:39:10,008 - DEBUG - stack: ['$phi62.0']
2025-01-31 15:39:10,008 - DEBUG - state.pc_initial: State(pc_initial=62 nstack_initial=1)
2025-01-31 15:39:10,008 - DEBUG - dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=1149)
2025-01-31 15:39:10,008 - DEBUG - stack ['$phi62.0']
2025-01-31 15:39:10,008 - DEBUG - dispatch pc=64, inst=COMPARE_OP(arg=1, lineno=1149)
2025-01-31 15:39:10,008 - DEBUG - stack ['$phi62.0', '$threshold62.1']
2025-01-31 15:39:10,008 - DEBUG - dispatch pc=66, inst=POP_JUMP_IF_FALSE(arg=40, lineno=1149)
2025-01-31 15:39:10,008 - DEBUG - stack ['$64compare_op.2']
2025-01-31 15:39:10,008 - DEBUG - end state. edges=[Edge(pc=68, stack=(), blockstack=(), npush=0), Edge(pc=78, stack=(), blockstack=(), npush=0)]
2025-01-31 15:39:10,008 - DEBUG - pending: deque([State(pc_initial=70 nstack_initial=1), State(pc_initial=40 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2025-01-31 15:39:10,008 - DEBUG - stack: ['$phi70.0']
2025-01-31 15:39:10,008 - DEBUG - state.pc_initial: State(pc_initial=70 nstack_initial=1)
2025-01-31 15:39:10,008 - DEBUG - dispatch pc=70, inst=POP_TOP(arg=None, lineno=1149)
2025-01-31 15:39:10,008 - DEBUG - stack ['$phi70.0']
2025-01-31 15:39:10,008 - DEBUG - dispatch pc=72, inst=JUMP_FORWARD(arg=2, lineno=1149)
2025-01-31 15:39:10,008 - DEBUG - stack []
2025-01-31 15:39:10,008 - DEBUG - end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0)]
2025-01-31 15:39:10,009 - DEBUG - pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=78 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2025-01-31 15:39:10,009 - DEBUG - pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=78 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2025-01-31 15:39:10,009 - DEBUG - stack: []
2025-01-31 15:39:10,009 - DEBUG - state.pc_initial: State(pc_initial=68 nstack_initial=0)
2025-01-31 15:39:10,009 - DEBUG - dispatch pc=68, inst=JUMP_FORWARD(arg=2, lineno=1149)
2025-01-31 15:39:10,009 - DEBUG - stack []
2025-01-31 15:39:10,009 - DEBUG - end state. edges=[Edge(pc=74, stack=(), blockstack=(), npush=0)]
2025-01-31 15:39:10,009 - DEBUG - pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=78 nstack_initial=0), State(pc_initial=74 nstack_initial=0)])
2025-01-31 15:39:10,009 - DEBUG - stack: []
2025-01-31 15:39:10,009 - DEBUG - state.pc_initial: State(pc_initial=78 nstack_initial=0)
2025-01-31 15:39:10,009 - DEBUG - dispatch pc=78, inst=LOAD_FAST(arg=2, lineno=1152)
2025-01-31 15:39:10,009 - DEBUG - stack []
2025-01-31 15:39:10,009 - DEBUG - dispatch pc=80, inst=POP_JUMP_IF_FALSE(arg=52, lineno=1152)
2025-01-31 15:39:10,009 - DEBUG - stack ['$zero_pos78.0']
2025-01-31 15:39:10,009 - DEBUG - end state. edges=[Edge(pc=82, stack=(), blockstack=(), npush=0), Edge(pc=102, stack=(), blockstack=(), npush=0)]
2025-01-31 15:39:10,009 - DEBUG - pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=82 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
2025-01-31 15:39:10,009 - DEBUG - pending: deque([State(pc_initial=74 nstack_initial=0), State(pc_initial=82 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
2025-01-31 15:39:10,009 - DEBUG - stack: []
2025-01-31 15:39:10,009 - DEBUG - state.pc_initial: State(pc_initial=74 nstack_initial=0)
2025-01-31 15:39:10,009 - DEBUG - dispatch pc=74, inst=LOAD_CONST(arg=1, lineno=1150)
2025-01-31 15:39:10,009 - DEBUG - stack []
2025-01-31 15:39:10,009 - DEBUG - dispatch pc=76, inst=STORE_FAST(arg=4, lineno=1150)
2025-01-31 15:39:10,009 - DEBUG - stack ['$const74.0']
2025-01-31 15:39:10,009 - DEBUG - end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0)]
2025-01-31 15:39:10,009 - DEBUG - pending: deque([State(pc_initial=82 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2025-01-31 15:39:10,009 - DEBUG - stack: []
2025-01-31 15:39:10,009 - DEBUG - state.pc_initial: State(pc_initial=82 nstack_initial=0)
2025-01-31 15:39:10,009 - DEBUG - dispatch pc=82, inst=LOAD_GLOBAL(arg=0, lineno=1153)
2025-01-31 15:39:10,010 - DEBUG - stack []
2025-01-31 15:39:10,010 - DEBUG - dispatch pc=84, inst=LOAD_METHOD(arg=1, lineno=1153)
2025-01-31 15:39:10,010 - DEBUG - stack ['$82load_global.0']
2025-01-31 15:39:10,010 - DEBUG - dispatch pc=86, inst=LOAD_FAST(arg=3, lineno=1153)
2025-01-31 15:39:10,010 - DEBUG - stack ['$84load_method.1']
2025-01-31 15:39:10,010 - DEBUG - dispatch pc=88, inst=CALL_METHOD(arg=1, lineno=1153)
2025-01-31 15:39:10,010 - DEBUG - stack ['$84load_method.1', '$x086.2']
2025-01-31 15:39:10,010 - DEBUG - dispatch pc=90, inst=LOAD_GLOBAL(arg=0, lineno=1153)
2025-01-31 15:39:10,010 - DEBUG - stack ['$88call_method.3']
2025-01-31 15:39:10,010 - DEBUG - dispatch pc=92, inst=LOAD_METHOD(arg=1, lineno=1153)
2025-01-31 15:39:10,010 - DEBUG - stack ['$88call_method.3', '$90load_global.4']
2025-01-31 15:39:10,010 - DEBUG - dispatch pc=94, inst=LOAD_FAST(arg=4, lineno=1153)
2025-01-31 15:39:10,010 - DEBUG - stack ['$88call_method.3', '$92load_method.5']
2025-01-31 15:39:10,010 - DEBUG - dispatch pc=96, inst=CALL_METHOD(arg=1, lineno=1153)
2025-01-31 15:39:10,010 - DEBUG - stack ['$88call_method.3', '$92load_method.5', '$x194.6']
2025-01-31 15:39:10,010 - DEBUG - dispatch pc=98, inst=COMPARE_OP(arg=3, lineno=1153)
2025-01-31 15:39:10,010 - DEBUG - stack ['$88call_method.3', '$96call_method.7']
2025-01-31 15:39:10,010 - DEBUG - dispatch pc=100, inst=RETURN_VALUE(arg=None, lineno=1153)
2025-01-31 15:39:10,010 - DEBUG - stack ['$98compare_op.8']
2025-01-31 15:39:10,010 - DEBUG - end state. edges=[]
2025-01-31 15:39:10,010 - DEBUG - pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2025-01-31 15:39:10,010 - DEBUG - stack: []
2025-01-31 15:39:10,010 - DEBUG - state.pc_initial: State(pc_initial=102 nstack_initial=0)
2025-01-31 15:39:10,010 - DEBUG - dispatch pc=102, inst=LOAD_GLOBAL(arg=0, lineno=1155)
2025-01-31 15:39:10,010 - DEBUG - stack []
2025-01-31 15:39:10,010 - DEBUG - dispatch pc=104, inst=LOAD_METHOD(arg=2, lineno=1155)
2025-01-31 15:39:10,010 - DEBUG - stack ['$102load_global.0']
2025-01-31 15:39:10,010 - DEBUG - dispatch pc=106, inst=LOAD_FAST(arg=3, lineno=1155)
2025-01-31 15:39:10,011 - DEBUG - stack ['$104load_method.1']
2025-01-31 15:39:10,011 - DEBUG - dispatch pc=108, inst=CALL_METHOD(arg=1, lineno=1155)
2025-01-31 15:39:10,011 - DEBUG - stack ['$104load_method.1', '$x0106.2']
2025-01-31 15:39:10,011 - DEBUG - dispatch pc=110, inst=LOAD_GLOBAL(arg=0, lineno=1155)
2025-01-31 15:39:10,011 - DEBUG - stack ['$108call_method.3']
2025-01-31 15:39:10,011 - DEBUG - dispatch pc=112, inst=LOAD_METHOD(arg=2, lineno=1155)
2025-01-31 15:39:10,011 - DEBUG - stack ['$108call_method.3', '$110load_global.4']
2025-01-31 15:39:10,011 - DEBUG - dispatch pc=114, inst=LOAD_FAST(arg=4, lineno=1155)
2025-01-31 15:39:10,011 - DEBUG - stack ['$108call_method.3', '$112load_method.5']
2025-01-31 15:39:10,011 - DEBUG - dispatch pc=116, inst=CALL_METHOD(arg=1, lineno=1155)
2025-01-31 15:39:10,011 - DEBUG - stack ['$108call_method.3', '$112load_method.5', '$x1114.6']
2025-01-31 15:39:10,011 - DEBUG - dispatch pc=118, inst=COMPARE_OP(arg=3, lineno=1155)
2025-01-31 15:39:10,011 - DEBUG - stack ['$108call_method.3', '$116call_method.7']
2025-01-31 15:39:10,011 - DEBUG - dispatch pc=120, inst=RETURN_VALUE(arg=None, lineno=1155)
2025-01-31 15:39:10,011 - DEBUG - stack ['$118compare_op.8']
2025-01-31 15:39:10,011 - DEBUG - end state. edges=[]
2025-01-31 15:39:10,011 - DEBUG - pending: deque([State(pc_initial=78 nstack_initial=0)])
2025-01-31 15:39:10,011 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:39:10,011 - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=24 nstack_initial=1): {'$phi24.0'},
             State(pc_initial=30 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=1): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=40 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=1): {'$phi62.0'},
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=1): set(),
             State(pc_initial=74 nstack_initial=0): set(),
             State(pc_initial=78 nstack_initial=0): set(),
             State(pc_initial=82 nstack_initial=0): set(),
             State(pc_initial=102 nstack_initial=0): set()})
2025-01-31 15:39:10,012 - DEBUG - defmap: {'$phi24.0': State(pc_initial=0 nstack_initial=0),
 '$phi32.0': State(pc_initial=0 nstack_initial=0),
 '$phi62.0': State(pc_initial=40 nstack_initial=0),
 '$phi70.0': State(pc_initial=40 nstack_initial=0)}
2025-01-31 15:39:10,012 - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi24.0': {('$16dup_top.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.0': {('$16dup_top.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$54dup_top.6',
                           State(pc_initial=40 nstack_initial=0))},
             '$phi70.0': {('$54dup_top.6',
                           State(pc_initial=40 nstack_initial=0))}})
2025-01-31 15:39:10,012 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi24.0': {('$16dup_top.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.0': {('$16dup_top.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$54dup_top.6',
                           State(pc_initial=40 nstack_initial=0))},
             '$phi70.0': {('$54dup_top.6',
                           State(pc_initial=40 nstack_initial=0))}})
2025-01-31 15:39:10,012 - DEBUG - keep phismap: {'$phi24.0': {('$16dup_top.6', State(pc_initial=0 nstack_initial=0))},
 '$phi62.0': {('$54dup_top.6', State(pc_initial=40 nstack_initial=0))}}
2025-01-31 15:39:10,012 - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi24.0': '$16dup_top.6'},
             State(pc_initial=40 nstack_initial=0): {'$phi62.0': '$54dup_top.6'}})
2025-01-31 15:39:10,012 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:39:10,013 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'value': '$6binary_subscr.2'}), (10, {'res': '$threshold10.3'}), (12, {'value': '$threshold10.3', 'res': '$12unary_negative.4'}), (14, {'res': '$x014.5'}), (16, {'orig': ['$x014.5'], 'duped': ['$16dup_top.6']}), (20, {'lhs': '$12unary_negative.4', 'rhs': '$x014.5', 'res': '$20compare_op.7'}), (22, {'pred': '$20compare_op.7'})), outgoing_phis={'$phi24.0': '$16dup_top.6'}, blockstack=(), active_try_block=None, outgoing_edgepushed={24: ('$16dup_top.6',), 32: ('$16dup_top.6',)})
2025-01-31 15:39:10,013 - DEBUG - block_infos State(pc_initial=24 nstack_initial=1):
AdaptBlockInfo(insts=((24, {'res': '$threshold24.1'}), (26, {'lhs': '$phi24.0', 'rhs': '$threshold24.1', 'res': '$26compare_op.2'}), (28, {'pred': '$26compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: (), 40: ()})
2025-01-31 15:39:10,013 - DEBUG - block_infos State(pc_initial=30 nstack_initial=0):
AdaptBlockInfo(insts=((30, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: ()})
2025-01-31 15:39:10,013 - DEBUG - block_infos State(pc_initial=32 nstack_initial=1):
AdaptBlockInfo(insts=((34, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: ()})
2025-01-31 15:39:10,013 - DEBUG - block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$const36.0'}), (38, {'value': '$const36.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: ()})
2025-01-31 15:39:10,013 - DEBUG - block_infos State(pc_initial=40 nstack_initial=0):
AdaptBlockInfo(insts=((40, {'res': '$x40.0'}), (42, {'res': '$const42.1'}), (44, {'index': '$const42.1', 'target': '$x40.0', 'res': '$44binary_subscr.2'}), (46, {'value': '$44binary_subscr.2'}), (48, {'res': '$threshold48.3'}), (50, {'value': '$threshold48.3', 'res': '$50unary_negative.4'}), (52, {'res': '$x152.5'}), (54, {'orig': ['$x152.5'], 'duped': ['$54dup_top.6']}), (58, {'lhs': '$50unary_negative.4', 'rhs': '$x152.5', 'res': '$58compare_op.7'}), (60, {'pred': '$58compare_op.7'})), outgoing_phis={'$phi62.0': '$54dup_top.6'}, blockstack=(), active_try_block=None, outgoing_edgepushed={62: ('$54dup_top.6',), 70: ('$54dup_top.6',)})
2025-01-31 15:39:10,013 - DEBUG - block_infos State(pc_initial=62 nstack_initial=1):
AdaptBlockInfo(insts=((62, {'res': '$threshold62.1'}), (64, {'lhs': '$phi62.0', 'rhs': '$threshold62.1', 'res': '$64compare_op.2'}), (66, {'pred': '$64compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={68: (), 78: ()})
2025-01-31 15:39:10,013 - DEBUG - block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={74: ()})
2025-01-31 15:39:10,013 - DEBUG - block_infos State(pc_initial=70 nstack_initial=1):
AdaptBlockInfo(insts=((72, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: ()})
2025-01-31 15:39:10,013 - DEBUG - block_infos State(pc_initial=74 nstack_initial=0):
AdaptBlockInfo(insts=((74, {'res': '$const74.0'}), (76, {'value': '$const74.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: ()})
2025-01-31 15:39:10,013 - DEBUG - block_infos State(pc_initial=78 nstack_initial=0):
AdaptBlockInfo(insts=((78, {'res': '$zero_pos78.0'}), (80, {'pred': '$zero_pos78.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={82: (), 102: ()})
2025-01-31 15:39:10,013 - DEBUG - block_infos State(pc_initial=82 nstack_initial=0):
AdaptBlockInfo(insts=((82, {'res': '$82load_global.0'}), (84, {'item': '$82load_global.0', 'res': '$84load_method.1'}), (86, {'res': '$x086.2'}), (88, {'func': '$84load_method.1', 'args': ['$x086.2'], 'res': '$88call_method.3'}), (90, {'res': '$90load_global.4'}), (92, {'item': '$90load_global.4', 'res': '$92load_method.5'}), (94, {'res': '$x194.6'}), (96, {'func': '$92load_method.5', 'args': ['$x194.6'], 'res': '$96call_method.7'}), (98, {'lhs': '$88call_method.3', 'rhs': '$96call_method.7', 'res': '$98compare_op.8'}), (100, {'retval': '$98compare_op.8', 'castval': '$100return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:39:10,013 - DEBUG - block_infos State(pc_initial=102 nstack_initial=0):
AdaptBlockInfo(insts=((102, {'res': '$102load_global.0'}), (104, {'item': '$102load_global.0', 'res': '$104load_method.1'}), (106, {'res': '$x0106.2'}), (108, {'func': '$104load_method.1', 'args': ['$x0106.2'], 'res': '$108call_method.3'}), (110, {'res': '$110load_global.4'}), (112, {'item': '$110load_global.4', 'res': '$112load_method.5'}), (114, {'res': '$x1114.6'}), (116, {'func': '$112load_method.5', 'args': ['$x1114.6'], 'res': '$116call_method.7'}), (118, {'lhs': '$108call_method.3', 'rhs': '$116call_method.7', 'res': '$118compare_op.8'}), (120, {'retval': '$118compare_op.8', 'castval': '$120return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:39:10,015 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    threshold = arg(1, name=threshold)       ['threshold']
    zero_pos = arg(2, name=zero_pos)         ['zero_pos']
    $const4.1 = const(int, 0)                ['$const4.1']
    x0 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$const4.1', 'x', 'x0']
    $12unary_negative.4 = unary(fn=<built-in function neg>, value=threshold) ['$12unary_negative.4', 'threshold']
    $20compare_op.7 = $12unary_negative.4 <= x0 ['$12unary_negative.4', '$20compare_op.7', 'x0']
    bool22 = global(bool: <class 'bool'>)    ['bool22']
    $22pred = call bool22($20compare_op.7, func=bool22, args=(Var($20compare_op.7, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None) ['$20compare_op.7', '$22pred', 'bool22']
    $phi24.0 = x0                            ['$phi24.0', 'x0']
    branch $22pred, 24, 32                   ['$22pred']
label 24:
    $26compare_op.2 = $phi24.0 <= threshold  ['$26compare_op.2', '$phi24.0', 'threshold']
    bool28 = global(bool: <class 'bool'>)    ['bool28']
    $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None) ['$26compare_op.2', '$28pred', 'bool28']
    branch $28pred, 30, 40                   ['$28pred']
label 30:
    jump 36                                  []
label 32:
    jump 40                                  []
label 36:
    x0 = const(int, 0)                       ['x0']
    jump 40                                  []
label 40:
    $const42.1 = const(int, -1)              ['$const42.1']
    x1 = getitem(value=x, index=$const42.1, fn=<built-in function getitem>) ['$const42.1', 'x', 'x1']
    $50unary_negative.4 = unary(fn=<built-in function neg>, value=threshold) ['$50unary_negative.4', 'threshold']
    $58compare_op.7 = $50unary_negative.4 <= x1 ['$50unary_negative.4', '$58compare_op.7', 'x1']
    bool60 = global(bool: <class 'bool'>)    ['bool60']
    $60pred = call bool60($58compare_op.7, func=bool60, args=(Var($58compare_op.7, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None) ['$58compare_op.7', '$60pred', 'bool60']
    $phi62.0 = x1                            ['$phi62.0', 'x1']
    branch $60pred, 62, 70                   ['$60pred']
label 62:
    $64compare_op.2 = $phi62.0 <= threshold  ['$64compare_op.2', '$phi62.0', 'threshold']
    bool66 = global(bool: <class 'bool'>)    ['bool66']
    $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None) ['$64compare_op.2', '$66pred', 'bool66']
    branch $66pred, 68, 78                   ['$66pred']
label 68:
    jump 74                                  []
label 70:
    jump 78                                  []
label 74:
    x1 = const(int, 0)                       ['x1']
    jump 78                                  []
label 78:
    bool80 = global(bool: <class 'bool'>)    ['bool80']
    $80pred = call bool80(zero_pos, func=bool80, args=(Var(zero_pos, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None) ['$80pred', 'bool80', 'zero_pos']
    branch $80pred, 82, 102                  ['$80pred']
label 82:
    $82load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>) ['$82load_global.0']
    $84load_method.1 = getattr(value=$82load_global.0, attr=signbit) ['$82load_global.0', '$84load_method.1']
    $88call_method.3 = call $84load_method.1(x0, func=$84load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None) ['$84load_method.1', '$88call_method.3', 'x0']
    $90load_global.4 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>) ['$90load_global.4']
    $92load_method.5 = getattr(value=$90load_global.4, attr=signbit) ['$90load_global.4', '$92load_method.5']
    $96call_method.7 = call $92load_method.5(x1, func=$92load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None) ['$92load_method.5', '$96call_method.7', 'x1']
    $98compare_op.8 = $88call_method.3 != $96call_method.7 ['$88call_method.3', '$96call_method.7', '$98compare_op.8']
    $100return_value.9 = cast(value=$98compare_op.8) ['$100return_value.9', '$98compare_op.8']
    return $100return_value.9                ['$100return_value.9']
label 102:
    $102load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>) ['$102load_global.0']
    $104load_method.1 = getattr(value=$102load_global.0, attr=sign) ['$102load_global.0', '$104load_method.1']
    $108call_method.3 = call $104load_method.1(x0, func=$104load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None) ['$104load_method.1', '$108call_method.3', 'x0']
    $110load_global.4 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>) ['$110load_global.4']
    $112load_method.5 = getattr(value=$110load_global.4, attr=sign) ['$110load_global.4', '$112load_method.5']
    $116call_method.7 = call $112load_method.5(x1, func=$112load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None) ['$112load_method.5', '$116call_method.7', 'x1']
    $118compare_op.8 = $108call_method.3 != $116call_method.7 ['$108call_method.3', '$116call_method.7', '$118compare_op.8']
    $120return_value.9 = cast(value=$118compare_op.8) ['$118compare_op.8', '$120return_value.9']
    return $120return_value.9                ['$120return_value.9']

2025-01-31 15:39:10,288 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=1039)
           2	LOAD_FAST(arg=0, lineno=1042)
           4	LOAD_CONST(arg=1, lineno=1042)
           6	BINARY_SUBSCR(arg=None, lineno=1042)
           8	LOAD_FAST(arg=0, lineno=1042)
          10	LOAD_CONST(arg=2, lineno=1042)
          12	BINARY_SUBSCR(arg=None, lineno=1042)
          14	COMPARE_OP(arg=4, lineno=1042)
          16	LOAD_FAST(arg=0, lineno=1042)
          18	LOAD_CONST(arg=1, lineno=1042)
          20	BINARY_SUBSCR(arg=None, lineno=1042)
          22	LOAD_FAST(arg=0, lineno=1042)
          24	LOAD_CONST(arg=3, lineno=1042)
          26	BINARY_SUBSCR(arg=None, lineno=1042)
          28	COMPARE_OP(arg=5, lineno=1042)
          30	BINARY_AND(arg=None, lineno=1042)
          32	RETURN_VALUE(arg=None, lineno=1042)
2025-01-31 15:39:10,288 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:39:10,288 - DEBUG - stack: []
2025-01-31 15:39:10,288 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:39:10,288 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=1039)
2025-01-31 15:39:10,288 - DEBUG - stack []
2025-01-31 15:39:10,288 - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1042)
2025-01-31 15:39:10,288 - DEBUG - stack []
2025-01-31 15:39:10,288 - DEBUG - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1042)
2025-01-31 15:39:10,288 - DEBUG - stack ['$x2.0']
2025-01-31 15:39:10,288 - DEBUG - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=1042)
2025-01-31 15:39:10,288 - DEBUG - stack ['$x2.0', '$const4.1']
2025-01-31 15:39:10,288 - DEBUG - dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=1042)
2025-01-31 15:39:10,288 - DEBUG - stack ['$6binary_subscr.2']
2025-01-31 15:39:10,288 - DEBUG - dispatch pc=10, inst=LOAD_CONST(arg=2, lineno=1042)
2025-01-31 15:39:10,288 - DEBUG - stack ['$6binary_subscr.2', '$x8.3']
2025-01-31 15:39:10,288 - DEBUG - dispatch pc=12, inst=BINARY_SUBSCR(arg=None, lineno=1042)
2025-01-31 15:39:10,288 - DEBUG - stack ['$6binary_subscr.2', '$x8.3', '$const10.4']
2025-01-31 15:39:10,289 - DEBUG - dispatch pc=14, inst=COMPARE_OP(arg=4, lineno=1042)
2025-01-31 15:39:10,289 - DEBUG - stack ['$6binary_subscr.2', '$12binary_subscr.5']
2025-01-31 15:39:10,289 - DEBUG - dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=1042)
2025-01-31 15:39:10,289 - DEBUG - stack ['$14compare_op.6']
2025-01-31 15:39:10,289 - DEBUG - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1042)
2025-01-31 15:39:10,289 - DEBUG - stack ['$14compare_op.6', '$x16.7']
2025-01-31 15:39:10,289 - DEBUG - dispatch pc=20, inst=BINARY_SUBSCR(arg=None, lineno=1042)
2025-01-31 15:39:10,289 - DEBUG - stack ['$14compare_op.6', '$x16.7', '$const18.8']
2025-01-31 15:39:10,289 - DEBUG - dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=1042)
2025-01-31 15:39:10,289 - DEBUG - stack ['$14compare_op.6', '$20binary_subscr.9']
2025-01-31 15:39:10,289 - DEBUG - dispatch pc=24, inst=LOAD_CONST(arg=3, lineno=1042)
2025-01-31 15:39:10,289 - DEBUG - stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10']
2025-01-31 15:39:10,289 - DEBUG - dispatch pc=26, inst=BINARY_SUBSCR(arg=None, lineno=1042)
2025-01-31 15:39:10,289 - DEBUG - stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10', '$const24.11']
2025-01-31 15:39:10,289 - DEBUG - dispatch pc=28, inst=COMPARE_OP(arg=5, lineno=1042)
2025-01-31 15:39:10,289 - DEBUG - stack ['$14compare_op.6', '$20binary_subscr.9', '$26binary_subscr.12']
2025-01-31 15:39:10,289 - DEBUG - dispatch pc=30, inst=BINARY_AND(arg=None, lineno=1042)
2025-01-31 15:39:10,289 - DEBUG - stack ['$14compare_op.6', '$28compare_op.13']
2025-01-31 15:39:10,289 - DEBUG - dispatch pc=32, inst=RETURN_VALUE(arg=None, lineno=1042)
2025-01-31 15:39:10,289 - DEBUG - stack ['$30binary_and.14']
2025-01-31 15:39:10,289 - DEBUG - end state. edges=[]
2025-01-31 15:39:10,289 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:39:10,289 - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-01-31 15:39:10,289 - DEBUG - defmap: {}
2025-01-31 15:39:10,289 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:39:10,289 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:39:10,289 - DEBUG - keep phismap: {}
2025-01-31 15:39:10,290 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-01-31 15:39:10,290 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:39:10,290 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'res': '$x8.3'}), (10, {'res': '$const10.4'}), (12, {'index': '$const10.4', 'target': '$x8.3', 'res': '$12binary_subscr.5'}), (14, {'lhs': '$6binary_subscr.2', 'rhs': '$12binary_subscr.5', 'res': '$14compare_op.6'}), (16, {'res': '$x16.7'}), (18, {'res': '$const18.8'}), (20, {'index': '$const18.8', 'target': '$x16.7', 'res': '$20binary_subscr.9'}), (22, {'res': '$x22.10'}), (24, {'res': '$const24.11'}), (26, {'index': '$const24.11', 'target': '$x22.10', 'res': '$26binary_subscr.12'}), (28, {'lhs': '$20binary_subscr.9', 'rhs': '$26binary_subscr.12', 'res': '$28compare_op.13'}), (30, {'lhs': '$14compare_op.6', 'rhs': '$28compare_op.13', 'res': '$30binary_and.14'}), (32, {'retval': '$30binary_and.14', 'castval': '$32return_value.15'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:39:10,290 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6binary_subscr.2 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$6binary_subscr.2', '$const4.1', 'x']
    $const10.4 = const(int, -1)              ['$const10.4']
    $12binary_subscr.5 = getitem(value=x, index=$const10.4, fn=<built-in function getitem>) ['$12binary_subscr.5', '$const10.4', 'x']
    $14compare_op.6 = $6binary_subscr.2 > $12binary_subscr.5 ['$12binary_subscr.5', '$14compare_op.6', '$6binary_subscr.2']
    $const18.8 = const(int, 0)               ['$const18.8']
    $20binary_subscr.9 = getitem(value=x, index=$const18.8, fn=<built-in function getitem>) ['$20binary_subscr.9', '$const18.8', 'x']
    $const24.11 = const(int, 1)              ['$const24.11']
    $26binary_subscr.12 = getitem(value=x, index=$const24.11, fn=<built-in function getitem>) ['$26binary_subscr.12', '$const24.11', 'x']
    $28compare_op.13 = $20binary_subscr.9 >= $26binary_subscr.12 ['$20binary_subscr.9', '$26binary_subscr.12', '$28compare_op.13']
    $30binary_and.14 = $14compare_op.6 & $28compare_op.13 ['$14compare_op.6', '$28compare_op.13', '$30binary_and.14']
    $32return_value.15 = cast(value=$30binary_and.14) ['$30binary_and.14', '$32return_value.15']
    return $32return_value.15                ['$32return_value.15']

2025-01-31 15:39:10,291 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=1045)
           2	LOAD_FAST(arg=0, lineno=1048)
           4	LOAD_CONST(arg=1, lineno=1048)
           6	BINARY_SUBSCR(arg=None, lineno=1048)
           8	LOAD_FAST(arg=0, lineno=1048)
          10	LOAD_CONST(arg=2, lineno=1048)
          12	BINARY_SUBSCR(arg=None, lineno=1048)
          14	COMPARE_OP(arg=0, lineno=1048)
          16	LOAD_FAST(arg=0, lineno=1048)
          18	LOAD_CONST(arg=1, lineno=1048)
          20	BINARY_SUBSCR(arg=None, lineno=1048)
          22	LOAD_FAST(arg=0, lineno=1048)
          24	LOAD_CONST(arg=3, lineno=1048)
          26	BINARY_SUBSCR(arg=None, lineno=1048)
          28	COMPARE_OP(arg=1, lineno=1048)
          30	BINARY_AND(arg=None, lineno=1048)
          32	RETURN_VALUE(arg=None, lineno=1048)
2025-01-31 15:39:10,291 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:39:10,291 - DEBUG - stack: []
2025-01-31 15:39:10,291 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:39:10,291 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=1045)
2025-01-31 15:39:10,291 - DEBUG - stack []
2025-01-31 15:39:10,291 - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1048)
2025-01-31 15:39:10,291 - DEBUG - stack []
2025-01-31 15:39:10,291 - DEBUG - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1048)
2025-01-31 15:39:10,291 - DEBUG - stack ['$x2.0']
2025-01-31 15:39:10,291 - DEBUG - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=1048)
2025-01-31 15:39:10,291 - DEBUG - stack ['$x2.0', '$const4.1']
2025-01-31 15:39:10,291 - DEBUG - dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=1048)
2025-01-31 15:39:10,291 - DEBUG - stack ['$6binary_subscr.2']
2025-01-31 15:39:10,291 - DEBUG - dispatch pc=10, inst=LOAD_CONST(arg=2, lineno=1048)
2025-01-31 15:39:10,291 - DEBUG - stack ['$6binary_subscr.2', '$x8.3']
2025-01-31 15:39:10,291 - DEBUG - dispatch pc=12, inst=BINARY_SUBSCR(arg=None, lineno=1048)
2025-01-31 15:39:10,291 - DEBUG - stack ['$6binary_subscr.2', '$x8.3', '$const10.4']
2025-01-31 15:39:10,291 - DEBUG - dispatch pc=14, inst=COMPARE_OP(arg=0, lineno=1048)
2025-01-31 15:39:10,291 - DEBUG - stack ['$6binary_subscr.2', '$12binary_subscr.5']
2025-01-31 15:39:10,291 - DEBUG - dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=1048)
2025-01-31 15:39:10,291 - DEBUG - stack ['$14compare_op.6']
2025-01-31 15:39:10,291 - DEBUG - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1048)
2025-01-31 15:39:10,292 - DEBUG - stack ['$14compare_op.6', '$x16.7']
2025-01-31 15:39:10,292 - DEBUG - dispatch pc=20, inst=BINARY_SUBSCR(arg=None, lineno=1048)
2025-01-31 15:39:10,292 - DEBUG - stack ['$14compare_op.6', '$x16.7', '$const18.8']
2025-01-31 15:39:10,292 - DEBUG - dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=1048)
2025-01-31 15:39:10,292 - DEBUG - stack ['$14compare_op.6', '$20binary_subscr.9']
2025-01-31 15:39:10,292 - DEBUG - dispatch pc=24, inst=LOAD_CONST(arg=3, lineno=1048)
2025-01-31 15:39:10,292 - DEBUG - stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10']
2025-01-31 15:39:10,292 - DEBUG - dispatch pc=26, inst=BINARY_SUBSCR(arg=None, lineno=1048)
2025-01-31 15:39:10,292 - DEBUG - stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10', '$const24.11']
2025-01-31 15:39:10,292 - DEBUG - dispatch pc=28, inst=COMPARE_OP(arg=1, lineno=1048)
2025-01-31 15:39:10,292 - DEBUG - stack ['$14compare_op.6', '$20binary_subscr.9', '$26binary_subscr.12']
2025-01-31 15:39:10,292 - DEBUG - dispatch pc=30, inst=BINARY_AND(arg=None, lineno=1048)
2025-01-31 15:39:10,292 - DEBUG - stack ['$14compare_op.6', '$28compare_op.13']
2025-01-31 15:39:10,292 - DEBUG - dispatch pc=32, inst=RETURN_VALUE(arg=None, lineno=1048)
2025-01-31 15:39:10,292 - DEBUG - stack ['$30binary_and.14']
2025-01-31 15:39:10,292 - DEBUG - end state. edges=[]
2025-01-31 15:39:10,292 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:39:10,292 - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-01-31 15:39:10,292 - DEBUG - defmap: {}
2025-01-31 15:39:10,292 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:39:10,292 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:39:10,292 - DEBUG - keep phismap: {}
2025-01-31 15:39:10,292 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-01-31 15:39:10,292 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:39:10,292 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'res': '$x8.3'}), (10, {'res': '$const10.4'}), (12, {'index': '$const10.4', 'target': '$x8.3', 'res': '$12binary_subscr.5'}), (14, {'lhs': '$6binary_subscr.2', 'rhs': '$12binary_subscr.5', 'res': '$14compare_op.6'}), (16, {'res': '$x16.7'}), (18, {'res': '$const18.8'}), (20, {'index': '$const18.8', 'target': '$x16.7', 'res': '$20binary_subscr.9'}), (22, {'res': '$x22.10'}), (24, {'res': '$const24.11'}), (26, {'index': '$const24.11', 'target': '$x22.10', 'res': '$26binary_subscr.12'}), (28, {'lhs': '$20binary_subscr.9', 'rhs': '$26binary_subscr.12', 'res': '$28compare_op.13'}), (30, {'lhs': '$14compare_op.6', 'rhs': '$28compare_op.13', 'res': '$30binary_and.14'}), (32, {'retval': '$30binary_and.14', 'castval': '$32return_value.15'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:39:10,293 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6binary_subscr.2 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$6binary_subscr.2', '$const4.1', 'x']
    $const10.4 = const(int, -1)              ['$const10.4']
    $12binary_subscr.5 = getitem(value=x, index=$const10.4, fn=<built-in function getitem>) ['$12binary_subscr.5', '$const10.4', 'x']
    $14compare_op.6 = $6binary_subscr.2 < $12binary_subscr.5 ['$12binary_subscr.5', '$14compare_op.6', '$6binary_subscr.2']
    $const18.8 = const(int, 0)               ['$const18.8']
    $20binary_subscr.9 = getitem(value=x, index=$const18.8, fn=<built-in function getitem>) ['$20binary_subscr.9', '$const18.8', 'x']
    $const24.11 = const(int, 1)              ['$const24.11']
    $26binary_subscr.12 = getitem(value=x, index=$const24.11, fn=<built-in function getitem>) ['$26binary_subscr.12', '$const24.11', 'x']
    $28compare_op.13 = $20binary_subscr.9 <= $26binary_subscr.12 ['$20binary_subscr.9', '$26binary_subscr.12', '$28compare_op.13']
    $30binary_and.14 = $14compare_op.6 & $28compare_op.13 ['$14compare_op.6', '$28compare_op.13', '$30binary_and.14']
    $32return_value.15 = cast(value=$30binary_and.14) ['$30binary_and.14', '$32return_value.15']
    return $32return_value.15                ['$32return_value.15']

2025-01-31 15:40:33,535 - INFO - Saving Vocals stem to La Feve - Comme des enfants_(Vocals)_UVR-MDX-NET-Inst_HQ_3.wav...
2025-01-31 15:40:33,584 - INFO - Audio duration is 0.04 hours (128.52 seconds).
2025-01-31 15:40:33,585 - INFO - Using pydub for writing.
2025-01-31 15:40:33,638 - INFO - Saving Instrumental stem to La Feve - Comme des enfants_(Instrumental)_UVR-MDX-NET-Inst_HQ_3.wav...
2025-01-31 15:40:33,639 - INFO - Audio duration is 0.04 hours (128.52 seconds).
2025-01-31 15:40:33,639 - INFO - Using pydub for writing.
2025-01-31 15:40:33,764 - INFO - Clearing input audio file paths, sources and stems...
2025-01-31 15:40:33,765 - INFO - Separation duration: 00:01:23
2025-01-31 15:40:33,854 - INFO - Split audio into ./split_audios/vocal_La Feve - Comme des enfants.wav and ./split_audios/instrument_La Feve - Comme des enfants.wav
2025-01-31 15:40:33,854 - ERROR - An error occurred during processing
Traceback (most recent call last):
  File "/home/strain/deepVoice/Applio/server.py", line 126, in home
    raise Exception(f"Model {selected_model} not found")
Exception: Model MickeyMouse not found
2025-01-31 15:40:33,998 - INFO - 127.0.0.1 - - [31/Jan/2025 15:40:33] "POST / HTTP/1.1" 200 -
2025-01-31 15:41:55,463 - INFO -  * Detected change in '/home/strain/deepVoice/Applio/server.py', reloading
2025-01-31 15:41:55,954 - INFO -  * Restarting with stat
2025-01-31 15:41:57,756 - WARNING -  * Debugger is active!
2025-01-31 15:41:57,756 - INFO -  * Debugger PIN: 142-961-790
2025-01-31 15:42:15,501 - INFO - Retrieved models: ['Ninho', 'Damso', 'Vald600', 'CharlesAznavour', 'MarineLepen', 'JUL_Interview', 'LaFeve', 'Nekfeu250', 'MickeyMouse', 'SCHInterview', 'SCH1000', 'NicolasSarkozy_v2_500e', 'Maes_600', 'KAARIS', 'ClaudeFrancoisV2', 'Josman', 'SoLaLune', 'JohnnyHallyday800', 'Titeuf600', 'Kylian-Mbapp√©', 'Lacrim', 'OrelsanV1', 'Booba', 'EricCartman', 'kaarism', 'Ademo', 'rick', 'Bassem', 'Wejdene_310Epochs', 'Laylow1000', 'PhilippeEtchebest', 'EricZemmour', 'FreezeCorleone', 'macron', 'gazo700', 'Angele', 'AlphaWann', 'Laylow', 'hamzaai500v2', 'homerSimpson']
2025-01-31 15:42:15,503 - INFO - Received YouTube URL for processing: https://www.youtube.com/watch?v=Jq-LrzeABss
2025-01-31 15:42:15,503 - DEBUG - matched regex search: (?:v=|\/)([0-9A-Za-z_-]{11}).*
2025-01-31 15:42:16,426 - DEBUG - finding initial function name
2025-01-31 15:42:16,431 - DEBUG - Pattern failed: ytplayer\.config\s*=\s*
2025-01-31 15:42:16,431 - DEBUG - Could not parse object.
2025-01-31 15:42:16,465 - DEBUG - finished regex search, matched: (/s/player/[\w\d]+/[\w\d_/.]+/base\.js)
2025-01-31 15:42:16,718 - DEBUG - matched regex search: signatureTimestamp:(\d*)
2025-01-31 15:42:16,718 - DEBUG - The WEB client requires poToken to obtain functional streams
2025-01-31 15:42:16,718 - DEBUG - Automatically generating poToken
2025-01-31 15:42:16,718 - DEBUG - Looking for visitorData in initial_data
2025-01-31 15:42:16,792 - DEBUG - matched regex search: visitor_data[',\"\s]+value['\"]:\s?['\"]([a-zA-Z0-9_%-]+)['\"]
2025-01-31 15:42:16,793 - DEBUG - VisitorData obtained successfully
2025-01-31 15:42:16,793 - DEBUG - Invoking botGuard
2025-01-31 15:42:17,534 - DEBUG - PoToken generated successfully
2025-01-31 15:42:17,853 - DEBUG - Found title in vid_info
2025-01-31 15:42:17,853 - DEBUG - applying descrambler
2025-01-31 15:42:17,854 - DEBUG - Applying poToken
2025-01-31 15:42:17,859 - DEBUG - finding initial function name
2025-01-31 15:42:17,913 - DEBUG - finished regex search, matched: (?P<sig>[a-zA-Z0-9_$]+)\s*=\s*function\(\s*(?P<arg>[a-zA-Z0-9_$]+)\s*\)\s*{\s*(?P=arg)\s*=\s*(?P=arg)\.split\(\s*""\s*\)\s*;\s*[^}]+;\s*return\s+(?P=arg)\.join\(\s*""\s*\)
2025-01-31 15:42:17,913 - DEBUG - Signature cipher function name: ouU
2025-01-31 15:42:17,914 - DEBUG - Finding throttling function name
2025-01-31 15:42:17,983 - DEBUG - finished regex search, matched: (?x)
            (?:
                \.get\("n"\)\)&&\(b=|
                (?:
                    b=String\.fromCharCode\(110\)|
                    (?P<str_idx>[a-zA-Z0-9_$.]+)&&\(b="nn"\[\+(?P=str_idx)\]
                )
                (?:
                    ,[a-zA-Z0-9_$]+\(a\))?,c=a\.
                    (?:
                        get\(b\)|
                        [a-zA-Z0-9_$]+\[b\]\|\|null
                    )\)&&\(c=|
                \b(?P<var>[a-zA-Z0-9_$]+)=
            )(?P<nfunc>[a-zA-Z0-9_$]+)(?:\[(?P<idx>\d+)\])?\([a-zA-Z]\)
            (?(var),[a-zA-Z0-9_$]+\.set\((?:"n+"|[a-zA-Z0-9_$]+)\,(?P=var)\))
2025-01-31 15:42:17,983 - DEBUG - func is: b_N
2025-01-31 15:42:17,983 - DEBUG - idx is: 0
2025-01-31 15:42:17,983 - DEBUG - Checking throttling function name
2025-01-31 15:42:17,984 - DEBUG - Throttling function name is: xyN
2025-01-31 15:42:17,984 - DEBUG - signature found, skip decipher
2025-01-31 15:42:17,984 - DEBUG - Parameter n is: CGe5zYw_Ou4vw1nQL
2025-01-31 15:42:18,490 - DEBUG - Parameter n deciphered: 95bJ7-k-TcL4qg
2025-01-31 15:42:18,490 - DEBUG - signature found, skip decipher
2025-01-31 15:42:18,490 - DEBUG - Parameter n is: qFBvfqA_pyNbF1k8O
2025-01-31 15:42:18,979 - DEBUG - Parameter n deciphered: Cnikd1KaAlLsBw
2025-01-31 15:42:18,980 - DEBUG - signature found, skip decipher
2025-01-31 15:42:18,980 - DEBUG - Parameter n is: qFBvfqA_pyNbF1k8O
2025-01-31 15:42:18,980 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:42:18,980 - DEBUG - Parameter n deciphered: Cnikd1KaAlLsBw
2025-01-31 15:42:18,980 - DEBUG - signature found, skip decipher
2025-01-31 15:42:18,980 - DEBUG - Parameter n is: qFBvfqA_pyNbF1k8O
2025-01-31 15:42:18,980 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:42:18,980 - DEBUG - Parameter n deciphered: Cnikd1KaAlLsBw
2025-01-31 15:42:18,981 - DEBUG - signature found, skip decipher
2025-01-31 15:42:18,981 - DEBUG - Parameter n is: qFBvfqA_pyNbF1k8O
2025-01-31 15:42:18,981 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:42:18,981 - DEBUG - Parameter n deciphered: Cnikd1KaAlLsBw
2025-01-31 15:42:18,981 - DEBUG - signature found, skip decipher
2025-01-31 15:42:18,981 - DEBUG - Parameter n is: qFBvfqA_pyNbF1k8O
2025-01-31 15:42:18,981 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:42:18,981 - DEBUG - Parameter n deciphered: Cnikd1KaAlLsBw
2025-01-31 15:42:18,981 - DEBUG - signature found, skip decipher
2025-01-31 15:42:18,981 - DEBUG - Parameter n is: qFBvfqA_pyNbF1k8O
2025-01-31 15:42:18,981 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:42:18,982 - DEBUG - Parameter n deciphered: Cnikd1KaAlLsBw
2025-01-31 15:42:18,982 - DEBUG - signature found, skip decipher
2025-01-31 15:42:18,982 - DEBUG - Parameter n is: qFBvfqA_pyNbF1k8O
2025-01-31 15:42:18,982 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:42:18,982 - DEBUG - Parameter n deciphered: Cnikd1KaAlLsBw
2025-01-31 15:42:18,982 - DEBUG - signature found, skip decipher
2025-01-31 15:42:18,982 - DEBUG - Parameter n is: qFBvfqA_pyNbF1k8O
2025-01-31 15:42:18,982 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:42:18,982 - DEBUG - Parameter n deciphered: Cnikd1KaAlLsBw
2025-01-31 15:42:18,983 - DEBUG - signature found, skip decipher
2025-01-31 15:42:18,983 - DEBUG - Parameter n is: qFBvfqA_pyNbF1k8O
2025-01-31 15:42:18,983 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:42:18,983 - DEBUG - Parameter n deciphered: Cnikd1KaAlLsBw
2025-01-31 15:42:18,983 - DEBUG - signature found, skip decipher
2025-01-31 15:42:18,983 - DEBUG - Parameter n is: qFBvfqA_pyNbF1k8O
2025-01-31 15:42:18,983 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:42:18,983 - DEBUG - Parameter n deciphered: Cnikd1KaAlLsBw
2025-01-31 15:42:18,984 - DEBUG - signature found, skip decipher
2025-01-31 15:42:18,984 - DEBUG - Parameter n is: qFBvfqA_pyNbF1k8O
2025-01-31 15:42:18,984 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:42:18,984 - DEBUG - Parameter n deciphered: Cnikd1KaAlLsBw
2025-01-31 15:42:18,984 - DEBUG - signature found, skip decipher
2025-01-31 15:42:18,984 - DEBUG - Parameter n is: qFBvfqA_pyNbF1k8O
2025-01-31 15:42:18,984 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:42:18,984 - DEBUG - Parameter n deciphered: Cnikd1KaAlLsBw
2025-01-31 15:42:18,984 - DEBUG - signature found, skip decipher
2025-01-31 15:42:18,985 - DEBUG - Parameter n is: qFBvfqA_pyNbF1k8O
2025-01-31 15:42:18,985 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:42:18,985 - DEBUG - Parameter n deciphered: Cnikd1KaAlLsBw
2025-01-31 15:42:18,985 - DEBUG - signature found, skip decipher
2025-01-31 15:42:18,985 - DEBUG - Parameter n is: qFBvfqA_pyNbF1k8O
2025-01-31 15:42:18,985 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:42:18,985 - DEBUG - Parameter n deciphered: Cnikd1KaAlLsBw
2025-01-31 15:42:18,985 - DEBUG - signature found, skip decipher
2025-01-31 15:42:18,985 - DEBUG - Parameter n is: qFBvfqA_pyNbF1k8O
2025-01-31 15:42:18,986 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:42:18,986 - DEBUG - Parameter n deciphered: Cnikd1KaAlLsBw
2025-01-31 15:42:18,986 - DEBUG - signature found, skip decipher
2025-01-31 15:42:18,986 - DEBUG - Parameter n is: qFBvfqA_pyNbF1k8O
2025-01-31 15:42:18,986 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:42:18,986 - DEBUG - Parameter n deciphered: Cnikd1KaAlLsBw
2025-01-31 15:42:18,986 - DEBUG - signature found, skip decipher
2025-01-31 15:42:18,987 - DEBUG - Parameter n is: qFBvfqA_pyNbF1k8O
2025-01-31 15:42:18,987 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:42:18,987 - DEBUG - Parameter n deciphered: Cnikd1KaAlLsBw
2025-01-31 15:42:18,987 - DEBUG - signature found, skip decipher
2025-01-31 15:42:18,987 - DEBUG - Parameter n is: qFBvfqA_pyNbF1k8O
2025-01-31 15:42:18,987 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:42:18,987 - DEBUG - Parameter n deciphered: Cnikd1KaAlLsBw
2025-01-31 15:42:18,987 - DEBUG - signature found, skip decipher
2025-01-31 15:42:18,987 - DEBUG - Parameter n is: qFBvfqA_pyNbF1k8O
2025-01-31 15:42:18,988 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:42:18,988 - DEBUG - Parameter n deciphered: Cnikd1KaAlLsBw
2025-01-31 15:42:18,988 - DEBUG - signature found, skip decipher
2025-01-31 15:42:18,988 - DEBUG - Parameter n is: qFBvfqA_pyNbF1k8O
2025-01-31 15:42:18,988 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:42:18,988 - DEBUG - Parameter n deciphered: Cnikd1KaAlLsBw
2025-01-31 15:42:18,988 - DEBUG - signature found, skip decipher
2025-01-31 15:42:18,988 - DEBUG - Parameter n is: qFBvfqA_pyNbF1k8O
2025-01-31 15:42:18,988 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:42:18,988 - DEBUG - Parameter n deciphered: Cnikd1KaAlLsBw
2025-01-31 15:42:18,989 - DEBUG - signature found, skip decipher
2025-01-31 15:42:18,989 - DEBUG - Parameter n is: qFBvfqA_pyNbF1k8O
2025-01-31 15:42:18,989 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:42:18,989 - DEBUG - Parameter n deciphered: Cnikd1KaAlLsBw
2025-01-31 15:42:18,989 - DEBUG - downloading (2080762 total bytes) file to /home/strain/deepVoice/Applio/temp_audio
2025-01-31 15:42:19,355 - DEBUG - download remaining: 0
2025-01-31 15:42:19,359 - DEBUG - download finished
2025-01-31 15:42:19,442 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', '/home/strain/deepVoice/Applio/temp_audio', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-31 15:42:19,724 - INFO - YouTube audio downloaded and converted to WAV: La Feve - Comme des enfants
2025-01-31 15:42:19,724 - INFO - Splitting audio for: La Feve - Comme des enfants
2025-01-31 15:42:19,725 - INFO - Separator version 0.28.5 instantiating with output_dir: None, output_format: WAV
2025-01-31 15:42:19,725 - INFO - Output directory not specified. Using current working directory.
2025-01-31 15:42:19,725 - INFO - Operating System: Linux #53-Ubuntu SMP PREEMPT_DYNAMIC Sat Jan 11 00:06:25 UTC 2025
2025-01-31 15:42:19,726 - INFO - System: Linux Node: server Release: 6.8.0-52-generic Machine: x86_64 Proc: x86_64
2025-01-31 15:42:19,726 - INFO - Python Version: 3.10.16
2025-01-31 15:42:19,726 - INFO - PyTorch Version: 2.3.1+cu121
2025-01-31 15:42:19,769 - INFO - FFmpeg installed: ffmpeg version 6.1.1-3ubuntu5 Copyright (c) 2000-2023 the FFmpeg developers
2025-01-31 15:42:19,770 - INFO - ONNX Runtime CPU package installed with version: 1.20.1
2025-01-31 15:42:19,770 - INFO - No hardware acceleration could be configured, running in CPU mode
2025-01-31 15:42:19,770 - INFO - Loading model UVR-MDX-NET-Inst_HQ_3.onnx...
2025-01-31 15:42:20,094 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Erf', version=13)
2025-01-31 15:42:20,094 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Erf', version=9)
2025-01-31 15:42:20,094 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='HardSigmoid', version=6)
2025-01-31 15:42:20,094 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='HardSigmoid', version=1)
2025-01-31 15:42:20,094 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='HardSwish', version=14)
2025-01-31 15:42:20,094 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='LeakyRelu', version=16)
2025-01-31 15:42:20,094 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='LeakyRelu', version=6)
2025-01-31 15:42:20,094 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='LeakyRelu', version=1)
2025-01-31 15:42:20,094 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='LogSoftmax', version=13)
2025-01-31 15:42:20,095 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='LogSoftmax', version=11)
2025-01-31 15:42:20,095 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='LogSoftmax', version=1)
2025-01-31 15:42:20,095 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Relu', version=14)
2025-01-31 15:42:20,095 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Relu', version=13)
2025-01-31 15:42:20,095 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Relu', version=6)
2025-01-31 15:42:20,095 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='PRelu', version=16)
2025-01-31 15:42:20,095 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='PRelu', version=9)
2025-01-31 15:42:20,095 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='PRelu', version=7)
2025-01-31 15:42:20,095 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Elu', version=6)
2025-01-31 15:42:20,095 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Celu', version=12)
2025-01-31 15:42:20,095 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Selu', version=6)
2025-01-31 15:42:20,095 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sigmoid', version=13)
2025-01-31 15:42:20,095 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sigmoid', version=6)
2025-01-31 15:42:20,095 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sigmoid', version=1)
2025-01-31 15:42:20,095 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Softmax', version=11)
2025-01-31 15:42:20,095 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Softmax', version=1)
2025-01-31 15:42:20,095 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Softmax', version=13)
2025-01-31 15:42:20,095 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Softsign', version=1)
2025-01-31 15:42:20,096 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Softplus', version=1)
2025-01-31 15:42:20,096 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ArgMin', version=13)
2025-01-31 15:42:20,096 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ArgMin', version=12)
2025-01-31 15:42:20,096 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ArgMax', version=13)
2025-01-31 15:42:20,096 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ArgMax', version=12)
2025-01-31 15:42:20,096 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ArgMin', version=11)
2025-01-31 15:42:20,096 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ArgMax', version=11)
2025-01-31 15:42:20,097 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Pad', version=13)
2025-01-31 15:42:20,097 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Pad', version=11)
2025-01-31 15:42:20,097 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Pad', version=2)
2025-01-31 15:42:20,097 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='AveragePool', version=11)
2025-01-31 15:42:20,097 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='AveragePool', version=10)
2025-01-31 15:42:20,097 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='AveragePool', version=7)
2025-01-31 15:42:20,097 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='BatchNormalization', version=9)
2025-01-31 15:42:20,097 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='BatchNormalization', version=14)
2025-01-31 15:42:20,098 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='BatchNormalization', version=15)
2025-01-31 15:42:20,098 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Div', version=14)
2025-01-31 15:42:20,098 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Div', version=13)
2025-01-31 15:42:20,098 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Div', version=7)
2025-01-31 15:42:20,098 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Div', version=6)
2025-01-31 15:42:20,098 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Div', version=1)
2025-01-31 15:42:20,098 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Mul', version=14)
2025-01-31 15:42:20,098 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Mul', version=13)
2025-01-31 15:42:20,098 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Mul', version=7)
2025-01-31 15:42:20,098 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Mul', version=6)
2025-01-31 15:42:20,098 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Mul', version=1)
2025-01-31 15:42:20,098 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sub', version=14)
2025-01-31 15:42:20,098 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sub', version=13)
2025-01-31 15:42:20,099 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sub', version=7)
2025-01-31 15:42:20,099 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sub', version=6)
2025-01-31 15:42:20,099 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sub', version=1)
2025-01-31 15:42:20,099 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Add', version=14)
2025-01-31 15:42:20,099 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Add', version=13)
2025-01-31 15:42:20,099 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Add', version=7)
2025-01-31 15:42:20,099 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Add', version=6)
2025-01-31 15:42:20,099 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Add', version=1)
2025-01-31 15:42:20,099 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Cast', version=13)
2025-01-31 15:42:20,099 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Cast', version=9)
2025-01-31 15:42:20,100 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Clip', version=13)
2025-01-31 15:42:20,100 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Clip', version=12)
2025-01-31 15:42:20,100 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Clip', version=11)
2025-01-31 15:42:20,100 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Clip', version=6)
2025-01-31 15:42:20,100 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='GreaterOrEqual', version=12)
2025-01-31 15:42:20,100 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='LessOrEqual', version=12)
2025-01-31 15:42:20,100 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Greater', version=13)
2025-01-31 15:42:20,100 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Greater', version=9)
2025-01-31 15:42:20,100 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Greater', version=7)
2025-01-31 15:42:20,100 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Less', version=13)
2025-01-31 15:42:20,100 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Less', version=9)
2025-01-31 15:42:20,100 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Less', version=7)
2025-01-31 15:42:20,100 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Equal', version=13)
2025-01-31 15:42:20,100 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Equal', version=11)
2025-01-31 15:42:20,100 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Equal', version=7)
2025-01-31 15:42:20,101 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Concat', version=13)
2025-01-31 15:42:20,101 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Concat', version=11)
2025-01-31 15:42:20,101 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Concat', version=4)
2025-01-31 15:42:20,101 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Constant', version=13)
2025-01-31 15:42:20,101 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Constant', version=12)
2025-01-31 15:42:20,101 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Constant', version=11)
2025-01-31 15:42:20,101 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Constant', version=9)
2025-01-31 15:42:20,102 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ConstantOfShape', version=9)
2025-01-31 15:42:20,102 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ConvTranspose', version=11)
2025-01-31 15:42:20,102 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ConvTranspose', version=1)
2025-01-31 15:42:20,102 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Conv', version=11)
2025-01-31 15:42:20,102 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Conv', version=1)
2025-01-31 15:42:20,102 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='CumSum', version=14)
2025-01-31 15:42:20,102 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='CumSum', version=11)
2025-01-31 15:42:20,103 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='DepthToSpace', version=13)
2025-01-31 15:42:20,103 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='DepthToSpace', version=11)
2025-01-31 15:42:20,103 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Dropout', version=10)
2025-01-31 15:42:20,103 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Dropout', version=13)
2025-01-31 15:42:20,103 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Dropout', version=12)
2025-01-31 15:42:20,103 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Einsum', version=12)
2025-01-31 15:42:20,103 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Expand', version=13)
2025-01-31 15:42:20,103 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Expand', version=8)
2025-01-31 15:42:20,104 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='EyeLike', version=9)
2025-01-31 15:42:20,104 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Flatten', version=9)
2025-01-31 15:42:20,104 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Flatten', version=11)
2025-01-31 15:42:20,104 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Flatten', version=13)
2025-01-31 15:42:20,105 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Tanh', version=6)
2025-01-31 15:42:20,105 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Tanh', version=13)
2025-01-31 15:42:20,105 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Tan', version=7)
2025-01-31 15:42:20,105 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sin', version=7)
2025-01-31 15:42:20,105 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sign', version=9)
2025-01-31 15:42:20,105 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sign', version=13)
2025-01-31 15:42:20,105 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Log', version=6)
2025-01-31 15:42:20,105 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Log', version=13)
2025-01-31 15:42:20,105 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Exp', version=13)
2025-01-31 15:42:20,105 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Exp', version=6)
2025-01-31 15:42:20,105 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Cos', version=7)
2025-01-31 15:42:20,105 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Atan', version=7)
2025-01-31 15:42:20,105 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Asin', version=7)
2025-01-31 15:42:20,105 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Acos', version=7)
2025-01-31 15:42:20,105 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Abs', version=6)
2025-01-31 15:42:20,105 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Abs', version=13)
2025-01-31 15:42:20,106 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Gather', version=13)
2025-01-31 15:42:20,106 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Gather', version=11)
2025-01-31 15:42:20,106 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Gather', version=1)
2025-01-31 15:42:20,106 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='GatherElements', version=13)
2025-01-31 15:42:20,106 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='GatherElements', version=11)
2025-01-31 15:42:20,106 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='GatherND', version=13)
2025-01-31 15:42:20,106 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='GatherND', version=12)
2025-01-31 15:42:20,106 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='GatherND', version=11)
2025-01-31 15:42:20,106 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Gemm', version=13)
2025-01-31 15:42:20,106 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Gemm', version=11)
2025-01-31 15:42:20,106 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Gemm', version=9)
2025-01-31 15:42:20,107 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='GlobalAveragePool', version=1)
2025-01-31 15:42:20,107 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Identity', version=1)
2025-01-31 15:42:20,107 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Identity', version=13)
2025-01-31 15:42:20,107 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Identity', version=14)
2025-01-31 15:42:20,107 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Identity', version=16)
2025-01-31 15:42:20,107 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='InstanceNormalization', version=6)
2025-01-31 15:42:20,107 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='InstanceNormalization', version=1)
2025-01-31 15:42:20,108 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='IsInf', version=10)
2025-01-31 15:42:20,108 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='IsNaN', version=13)
2025-01-31 15:42:20,108 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='LayerNormalization', version=17)
2025-01-31 15:42:20,108 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Or', version=7)
2025-01-31 15:42:20,108 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Or', version=1)
2025-01-31 15:42:20,109 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='And', version=7)
2025-01-31 15:42:20,109 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='And', version=1)
2025-01-31 15:42:20,109 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Xor', version=7)
2025-01-31 15:42:20,109 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Xor', version=1)
2025-01-31 15:42:20,109 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Not', version=1)
2025-01-31 15:42:20,109 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='LRN', version=1)
2025-01-31 15:42:20,109 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='LRN', version=13)
2025-01-31 15:42:20,109 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='MatMul', version=13)
2025-01-31 15:42:20,109 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='MatMul', version=9)
2025-01-31 15:42:20,109 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='MatMul', version=1)
2025-01-31 15:42:20,110 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='MaxPool', version=8)
2025-01-31 15:42:20,110 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='MaxPool', version=10)
2025-01-31 15:42:20,110 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='MaxPool', version=11)
2025-01-31 15:42:20,110 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='MaxPool', version=12)
2025-01-31 15:42:20,110 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Mean', version=13)
2025-01-31 15:42:20,110 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Mean', version=8)
2025-01-31 15:42:20,110 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Max', version=13)
2025-01-31 15:42:20,111 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Max', version=12)
2025-01-31 15:42:20,111 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Max', version=8)
2025-01-31 15:42:20,111 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Min', version=13)
2025-01-31 15:42:20,111 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Min', version=12)
2025-01-31 15:42:20,111 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Min', version=8)
2025-01-31 15:42:20,111 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Mod', version=13)
2025-01-31 15:42:20,111 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Mod', version=10)
2025-01-31 15:42:20,111 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Neg', version=13)
2025-01-31 15:42:20,111 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Neg', version=6)
2025-01-31 15:42:20,111 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Neg', version=1)
2025-01-31 15:42:20,441 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='NonMaxSuppression', version=11)
2025-01-31 15:42:20,442 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='NonMaxSuppression', version=10)
2025-01-31 15:42:20,442 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='NonZero', version=13)
2025-01-31 15:42:20,442 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Pow', version=15)
2025-01-31 15:42:20,442 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Pow', version=13)
2025-01-31 15:42:20,442 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Pow', version=12)
2025-01-31 15:42:20,442 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Pow', version=7)
2025-01-31 15:42:20,442 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Pow', version=1)
2025-01-31 15:42:20,442 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sqrt', version=13)
2025-01-31 15:42:20,442 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sqrt', version=6)
2025-01-31 15:42:20,442 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sqrt', version=1)
2025-01-31 15:42:20,442 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Range', version=11)
2025-01-31 15:42:20,443 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Reciprocal', version=13)
2025-01-31 15:42:20,443 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Reciprocal', version=6)
2025-01-31 15:42:20,443 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Reciprocal', version=1)
2025-01-31 15:42:20,443 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceSumSquare', version=13)
2025-01-31 15:42:20,443 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceSumSquare', version=11)
2025-01-31 15:42:20,443 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceSumSquare', version=1)
2025-01-31 15:42:20,443 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceSum', version=11)
2025-01-31 15:42:20,443 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceSum', version=1)
2025-01-31 15:42:20,443 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceProd', version=13)
2025-01-31 15:42:20,443 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceProd', version=11)
2025-01-31 15:42:20,443 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceProd', version=1)
2025-01-31 15:42:20,443 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceMin', version=13)
2025-01-31 15:42:20,443 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceMin', version=12)
2025-01-31 15:42:20,443 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceMin', version=11)
2025-01-31 15:42:20,443 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceMin', version=1)
2025-01-31 15:42:20,443 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceMean', version=13)
2025-01-31 15:42:20,443 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceMean', version=11)
2025-01-31 15:42:20,443 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceMean', version=1)
2025-01-31 15:42:20,443 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceMax', version=13)
2025-01-31 15:42:20,444 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceMax', version=12)
2025-01-31 15:42:20,444 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceMax', version=11)
2025-01-31 15:42:20,444 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceMax', version=1)
2025-01-31 15:42:20,444 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceLogSumExp', version=13)
2025-01-31 15:42:20,444 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceLogSumExp', version=11)
2025-01-31 15:42:20,444 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceLogSumExp', version=1)
2025-01-31 15:42:20,444 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceLogSum', version=13)
2025-01-31 15:42:20,444 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceLogSum', version=11)
2025-01-31 15:42:20,444 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceLogSum', version=1)
2025-01-31 15:42:20,444 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceL2', version=13)
2025-01-31 15:42:20,444 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceL2', version=11)
2025-01-31 15:42:20,444 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceL2', version=1)
2025-01-31 15:42:20,444 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceL1', version=13)
2025-01-31 15:42:20,444 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceL1', version=11)
2025-01-31 15:42:20,444 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceL1', version=1)
2025-01-31 15:42:20,444 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceSum', version=13)
2025-01-31 15:42:20,444 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Reshape', version=14)
2025-01-31 15:42:20,444 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Reshape', version=13)
2025-01-31 15:42:20,444 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Reshape', version=5)
2025-01-31 15:42:20,444 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Resize', version=10)
2025-01-31 15:42:20,444 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Resize', version=13)
2025-01-31 15:42:20,444 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Resize', version=11)
2025-01-31 15:42:20,445 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='RoiAlign', version=10)
2025-01-31 15:42:20,445 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='RoiAlign', version=16)
2025-01-31 15:42:20,445 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Round', version=11)
2025-01-31 15:42:20,445 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Floor', version=6)
2025-01-31 15:42:20,445 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Floor', version=13)
2025-01-31 15:42:20,445 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Ceil', version=6)
2025-01-31 15:42:20,445 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Ceil', version=13)
2025-01-31 15:42:20,445 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ScatterND', version=16)
2025-01-31 15:42:20,446 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ScatterND', version=13)
2025-01-31 15:42:20,446 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ScatterND', version=11)
2025-01-31 15:42:20,446 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Shape', version=15)
2025-01-31 15:42:20,446 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Shape', version=13)
2025-01-31 15:42:20,446 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Shape', version=1)
2025-01-31 15:42:20,446 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Slice', version=9)
2025-01-31 15:42:20,446 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Slice', version=13)
2025-01-31 15:42:20,446 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Slice', version=11)
2025-01-31 15:42:20,446 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Slice', version=10)
2025-01-31 15:42:20,446 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Split', version=13)
2025-01-31 15:42:20,446 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Split', version=2)
2025-01-31 15:42:20,446 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Split', version=11)
2025-01-31 15:42:20,447 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Squeeze', version=11)
2025-01-31 15:42:20,447 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Squeeze', version=1)
2025-01-31 15:42:20,447 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Squeeze', version=21)
2025-01-31 15:42:20,447 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Squeeze', version=13)
2025-01-31 15:42:20,447 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sum', version=13)
2025-01-31 15:42:20,447 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sum', version=8)
2025-01-31 15:42:20,447 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Tile', version=13)
2025-01-31 15:42:20,447 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Tile', version=6)
2025-01-31 15:42:20,447 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='TopK', version=11)
2025-01-31 15:42:20,447 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='TopK', version=10)
2025-01-31 15:42:20,447 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='TopK', version=1)
2025-01-31 15:42:20,448 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Transpose', version=13)
2025-01-31 15:42:20,448 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Transpose', version=1)
2025-01-31 15:42:20,448 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Unsqueeze', version=11)
2025-01-31 15:42:20,448 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Unsqueeze', version=1)
2025-01-31 15:42:20,448 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Unsqueeze', version=13)
2025-01-31 15:42:20,448 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Where', version=16)
2025-01-31 15:42:20,448 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Where', version=9)
2025-01-31 15:42:20,859 - INFO - Load model duration: 00:00:01
2025-01-31 15:42:20,859 - INFO - Starting separation process for audio_file_path: yt_audios/La Feve - Comme des enfants
2025-01-31 15:42:20,958 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=1141)
           2	LOAD_FAST(arg=0, lineno=1144)
           4	LOAD_CONST(arg=1, lineno=1144)
           6	BINARY_SUBSCR(arg=None, lineno=1144)
           8	STORE_FAST(arg=3, lineno=1144)
          10	LOAD_FAST(arg=1, lineno=1145)
          12	UNARY_NEGATIVE(arg=None, lineno=1145)
          14	LOAD_FAST(arg=3, lineno=1145)
          16	DUP_TOP(arg=None, lineno=1145)
          18	ROT_THREE(arg=None, lineno=1145)
          20	COMPARE_OP(arg=1, lineno=1145)
          22	POP_JUMP_IF_FALSE(arg=17, lineno=1145)
          24	LOAD_FAST(arg=1, lineno=1145)
          26	COMPARE_OP(arg=1, lineno=1145)
          28	POP_JUMP_IF_FALSE(arg=21, lineno=1145)
          30	JUMP_FORWARD(arg=2, lineno=1145)
>         32	POP_TOP(arg=None, lineno=1145)
          34	JUMP_FORWARD(arg=2, lineno=1145)
>         36	LOAD_CONST(arg=1, lineno=1146)
          38	STORE_FAST(arg=3, lineno=1146)
>         40	LOAD_FAST(arg=0, lineno=1148)
          42	LOAD_CONST(arg=2, lineno=1148)
          44	BINARY_SUBSCR(arg=None, lineno=1148)
          46	STORE_FAST(arg=4, lineno=1148)
          48	LOAD_FAST(arg=1, lineno=1149)
          50	UNARY_NEGATIVE(arg=None, lineno=1149)
          52	LOAD_FAST(arg=4, lineno=1149)
          54	DUP_TOP(arg=None, lineno=1149)
          56	ROT_THREE(arg=None, lineno=1149)
          58	COMPARE_OP(arg=1, lineno=1149)
          60	POP_JUMP_IF_FALSE(arg=36, lineno=1149)
          62	LOAD_FAST(arg=1, lineno=1149)
          64	COMPARE_OP(arg=1, lineno=1149)
          66	POP_JUMP_IF_FALSE(arg=40, lineno=1149)
          68	JUMP_FORWARD(arg=2, lineno=1149)
>         70	POP_TOP(arg=None, lineno=1149)
          72	JUMP_FORWARD(arg=2, lineno=1149)
>         74	LOAD_CONST(arg=1, lineno=1150)
          76	STORE_FAST(arg=4, lineno=1150)
>         78	LOAD_FAST(arg=2, lineno=1152)
          80	POP_JUMP_IF_FALSE(arg=52, lineno=1152)
          82	LOAD_GLOBAL(arg=0, lineno=1153)
          84	LOAD_METHOD(arg=1, lineno=1153)
          86	LOAD_FAST(arg=3, lineno=1153)
          88	CALL_METHOD(arg=1, lineno=1153)
          90	LOAD_GLOBAL(arg=0, lineno=1153)
          92	LOAD_METHOD(arg=1, lineno=1153)
          94	LOAD_FAST(arg=4, lineno=1153)
          96	CALL_METHOD(arg=1, lineno=1153)
          98	COMPARE_OP(arg=3, lineno=1153)
         100	RETURN_VALUE(arg=None, lineno=1153)
>        102	LOAD_GLOBAL(arg=0, lineno=1155)
         104	LOAD_METHOD(arg=2, lineno=1155)
         106	LOAD_FAST(arg=3, lineno=1155)
         108	CALL_METHOD(arg=1, lineno=1155)
         110	LOAD_GLOBAL(arg=0, lineno=1155)
         112	LOAD_METHOD(arg=2, lineno=1155)
         114	LOAD_FAST(arg=4, lineno=1155)
         116	CALL_METHOD(arg=1, lineno=1155)
         118	COMPARE_OP(arg=3, lineno=1155)
         120	RETURN_VALUE(arg=None, lineno=1155)
2025-01-31 15:42:20,958 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:42:20,958 - DEBUG - stack: []
2025-01-31 15:42:20,958 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:42:20,958 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=1141)
2025-01-31 15:42:20,958 - DEBUG - stack []
2025-01-31 15:42:20,958 - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1144)
2025-01-31 15:42:20,958 - DEBUG - stack []
2025-01-31 15:42:20,958 - DEBUG - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1144)
2025-01-31 15:42:20,958 - DEBUG - stack ['$x2.0']
2025-01-31 15:42:20,958 - DEBUG - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=1144)
2025-01-31 15:42:20,958 - DEBUG - stack ['$x2.0', '$const4.1']
2025-01-31 15:42:20,959 - DEBUG - dispatch pc=8, inst=STORE_FAST(arg=3, lineno=1144)
2025-01-31 15:42:20,959 - DEBUG - stack ['$6binary_subscr.2']
2025-01-31 15:42:20,959 - DEBUG - dispatch pc=10, inst=LOAD_FAST(arg=1, lineno=1145)
2025-01-31 15:42:20,959 - DEBUG - stack []
2025-01-31 15:42:20,959 - DEBUG - dispatch pc=12, inst=UNARY_NEGATIVE(arg=None, lineno=1145)
2025-01-31 15:42:20,959 - DEBUG - stack ['$threshold10.3']
2025-01-31 15:42:20,959 - DEBUG - dispatch pc=14, inst=LOAD_FAST(arg=3, lineno=1145)
2025-01-31 15:42:20,959 - DEBUG - stack ['$12unary_negative.4']
2025-01-31 15:42:20,959 - DEBUG - dispatch pc=16, inst=DUP_TOP(arg=None, lineno=1145)
2025-01-31 15:42:20,959 - DEBUG - stack ['$12unary_negative.4', '$x014.5']
2025-01-31 15:42:20,959 - DEBUG - dispatch pc=18, inst=ROT_THREE(arg=None, lineno=1145)
2025-01-31 15:42:20,959 - DEBUG - stack ['$12unary_negative.4', '$x014.5', '$16dup_top.6']
2025-01-31 15:42:20,959 - DEBUG - dispatch pc=20, inst=COMPARE_OP(arg=1, lineno=1145)
2025-01-31 15:42:20,959 - DEBUG - stack ['$16dup_top.6', '$12unary_negative.4', '$x014.5']
2025-01-31 15:42:20,959 - DEBUG - dispatch pc=22, inst=POP_JUMP_IF_FALSE(arg=17, lineno=1145)
2025-01-31 15:42:20,959 - DEBUG - stack ['$16dup_top.6', '$20compare_op.7']
2025-01-31 15:42:20,959 - DEBUG - end state. edges=[Edge(pc=24, stack=('$16dup_top.6',), blockstack=(), npush=0), Edge(pc=32, stack=('$16dup_top.6',), blockstack=(), npush=0)]
2025-01-31 15:42:20,959 - DEBUG - pending: deque([State(pc_initial=24 nstack_initial=1), State(pc_initial=32 nstack_initial=1)])
2025-01-31 15:42:20,959 - DEBUG - stack: ['$phi24.0']
2025-01-31 15:42:20,959 - DEBUG - state.pc_initial: State(pc_initial=24 nstack_initial=1)
2025-01-31 15:42:20,959 - DEBUG - dispatch pc=24, inst=LOAD_FAST(arg=1, lineno=1145)
2025-01-31 15:42:20,959 - DEBUG - stack ['$phi24.0']
2025-01-31 15:42:20,959 - DEBUG - dispatch pc=26, inst=COMPARE_OP(arg=1, lineno=1145)
2025-01-31 15:42:20,959 - DEBUG - stack ['$phi24.0', '$threshold24.1']
2025-01-31 15:42:20,959 - DEBUG - dispatch pc=28, inst=POP_JUMP_IF_FALSE(arg=21, lineno=1145)
2025-01-31 15:42:20,959 - DEBUG - stack ['$26compare_op.2']
2025-01-31 15:42:20,960 - DEBUG - end state. edges=[Edge(pc=30, stack=(), blockstack=(), npush=0), Edge(pc=40, stack=(), blockstack=(), npush=0)]
2025-01-31 15:42:20,960 - DEBUG - pending: deque([State(pc_initial=32 nstack_initial=1), State(pc_initial=30 nstack_initial=0), State(pc_initial=40 nstack_initial=0)])
2025-01-31 15:42:20,960 - DEBUG - stack: ['$phi32.0']
2025-01-31 15:42:20,960 - DEBUG - state.pc_initial: State(pc_initial=32 nstack_initial=1)
2025-01-31 15:42:20,960 - DEBUG - dispatch pc=32, inst=POP_TOP(arg=None, lineno=1145)
2025-01-31 15:42:20,960 - DEBUG - stack ['$phi32.0']
2025-01-31 15:42:20,960 - DEBUG - dispatch pc=34, inst=JUMP_FORWARD(arg=2, lineno=1145)
2025-01-31 15:42:20,960 - DEBUG - stack []
2025-01-31 15:42:20,960 - DEBUG - end state. edges=[Edge(pc=40, stack=(), blockstack=(), npush=0)]
2025-01-31 15:42:20,960 - DEBUG - pending: deque([State(pc_initial=30 nstack_initial=0), State(pc_initial=40 nstack_initial=0), State(pc_initial=40 nstack_initial=0)])
2025-01-31 15:42:20,960 - DEBUG - stack: []
2025-01-31 15:42:20,960 - DEBUG - state.pc_initial: State(pc_initial=30 nstack_initial=0)
2025-01-31 15:42:20,960 - DEBUG - dispatch pc=30, inst=JUMP_FORWARD(arg=2, lineno=1145)
2025-01-31 15:42:20,960 - DEBUG - stack []
2025-01-31 15:42:20,960 - DEBUG - end state. edges=[Edge(pc=36, stack=(), blockstack=(), npush=0)]
2025-01-31 15:42:20,960 - DEBUG - pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=40 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2025-01-31 15:42:20,960 - DEBUG - stack: []
2025-01-31 15:42:20,960 - DEBUG - state.pc_initial: State(pc_initial=40 nstack_initial=0)
2025-01-31 15:42:20,960 - DEBUG - dispatch pc=40, inst=LOAD_FAST(arg=0, lineno=1148)
2025-01-31 15:42:20,960 - DEBUG - stack []
2025-01-31 15:42:20,960 - DEBUG - dispatch pc=42, inst=LOAD_CONST(arg=2, lineno=1148)
2025-01-31 15:42:20,960 - DEBUG - stack ['$x40.0']
2025-01-31 15:42:20,960 - DEBUG - dispatch pc=44, inst=BINARY_SUBSCR(arg=None, lineno=1148)
2025-01-31 15:42:20,960 - DEBUG - stack ['$x40.0', '$const42.1']
2025-01-31 15:42:20,960 - DEBUG - dispatch pc=46, inst=STORE_FAST(arg=4, lineno=1148)
2025-01-31 15:42:20,960 - DEBUG - stack ['$44binary_subscr.2']
2025-01-31 15:42:20,960 - DEBUG - dispatch pc=48, inst=LOAD_FAST(arg=1, lineno=1149)
2025-01-31 15:42:20,960 - DEBUG - stack []
2025-01-31 15:42:20,960 - DEBUG - dispatch pc=50, inst=UNARY_NEGATIVE(arg=None, lineno=1149)
2025-01-31 15:42:20,961 - DEBUG - stack ['$threshold48.3']
2025-01-31 15:42:20,961 - DEBUG - dispatch pc=52, inst=LOAD_FAST(arg=4, lineno=1149)
2025-01-31 15:42:20,961 - DEBUG - stack ['$50unary_negative.4']
2025-01-31 15:42:20,961 - DEBUG - dispatch pc=54, inst=DUP_TOP(arg=None, lineno=1149)
2025-01-31 15:42:20,961 - DEBUG - stack ['$50unary_negative.4', '$x152.5']
2025-01-31 15:42:20,961 - DEBUG - dispatch pc=56, inst=ROT_THREE(arg=None, lineno=1149)
2025-01-31 15:42:20,961 - DEBUG - stack ['$50unary_negative.4', '$x152.5', '$54dup_top.6']
2025-01-31 15:42:20,961 - DEBUG - dispatch pc=58, inst=COMPARE_OP(arg=1, lineno=1149)
2025-01-31 15:42:20,961 - DEBUG - stack ['$54dup_top.6', '$50unary_negative.4', '$x152.5']
2025-01-31 15:42:20,961 - DEBUG - dispatch pc=60, inst=POP_JUMP_IF_FALSE(arg=36, lineno=1149)
2025-01-31 15:42:20,961 - DEBUG - stack ['$54dup_top.6', '$58compare_op.7']
2025-01-31 15:42:20,961 - DEBUG - end state. edges=[Edge(pc=62, stack=('$54dup_top.6',), blockstack=(), npush=0), Edge(pc=70, stack=('$54dup_top.6',), blockstack=(), npush=0)]
2025-01-31 15:42:20,961 - DEBUG - pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=36 nstack_initial=0), State(pc_initial=62 nstack_initial=1), State(pc_initial=70 nstack_initial=1)])
2025-01-31 15:42:20,961 - DEBUG - pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=62 nstack_initial=1), State(pc_initial=70 nstack_initial=1)])
2025-01-31 15:42:20,961 - DEBUG - stack: []
2025-01-31 15:42:20,961 - DEBUG - state.pc_initial: State(pc_initial=36 nstack_initial=0)
2025-01-31 15:42:20,961 - DEBUG - dispatch pc=36, inst=LOAD_CONST(arg=1, lineno=1146)
2025-01-31 15:42:20,961 - DEBUG - stack []
2025-01-31 15:42:20,961 - DEBUG - dispatch pc=38, inst=STORE_FAST(arg=3, lineno=1146)
2025-01-31 15:42:20,961 - DEBUG - stack ['$const36.0']
2025-01-31 15:42:20,961 - DEBUG - end state. edges=[Edge(pc=40, stack=(), blockstack=(), npush=0)]
2025-01-31 15:42:20,961 - DEBUG - pending: deque([State(pc_initial=62 nstack_initial=1), State(pc_initial=70 nstack_initial=1), State(pc_initial=40 nstack_initial=0)])
2025-01-31 15:42:20,961 - DEBUG - stack: ['$phi62.0']
2025-01-31 15:42:20,961 - DEBUG - state.pc_initial: State(pc_initial=62 nstack_initial=1)
2025-01-31 15:42:20,961 - DEBUG - dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=1149)
2025-01-31 15:42:20,961 - DEBUG - stack ['$phi62.0']
2025-01-31 15:42:20,962 - DEBUG - dispatch pc=64, inst=COMPARE_OP(arg=1, lineno=1149)
2025-01-31 15:42:20,962 - DEBUG - stack ['$phi62.0', '$threshold62.1']
2025-01-31 15:42:20,962 - DEBUG - dispatch pc=66, inst=POP_JUMP_IF_FALSE(arg=40, lineno=1149)
2025-01-31 15:42:20,962 - DEBUG - stack ['$64compare_op.2']
2025-01-31 15:42:20,962 - DEBUG - end state. edges=[Edge(pc=68, stack=(), blockstack=(), npush=0), Edge(pc=78, stack=(), blockstack=(), npush=0)]
2025-01-31 15:42:20,962 - DEBUG - pending: deque([State(pc_initial=70 nstack_initial=1), State(pc_initial=40 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2025-01-31 15:42:20,962 - DEBUG - stack: ['$phi70.0']
2025-01-31 15:42:20,962 - DEBUG - state.pc_initial: State(pc_initial=70 nstack_initial=1)
2025-01-31 15:42:20,962 - DEBUG - dispatch pc=70, inst=POP_TOP(arg=None, lineno=1149)
2025-01-31 15:42:20,962 - DEBUG - stack ['$phi70.0']
2025-01-31 15:42:20,962 - DEBUG - dispatch pc=72, inst=JUMP_FORWARD(arg=2, lineno=1149)
2025-01-31 15:42:20,962 - DEBUG - stack []
2025-01-31 15:42:20,962 - DEBUG - end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0)]
2025-01-31 15:42:20,962 - DEBUG - pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=78 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2025-01-31 15:42:20,962 - DEBUG - pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=78 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2025-01-31 15:42:20,962 - DEBUG - stack: []
2025-01-31 15:42:20,962 - DEBUG - state.pc_initial: State(pc_initial=68 nstack_initial=0)
2025-01-31 15:42:20,962 - DEBUG - dispatch pc=68, inst=JUMP_FORWARD(arg=2, lineno=1149)
2025-01-31 15:42:20,962 - DEBUG - stack []
2025-01-31 15:42:20,962 - DEBUG - end state. edges=[Edge(pc=74, stack=(), blockstack=(), npush=0)]
2025-01-31 15:42:20,962 - DEBUG - pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=78 nstack_initial=0), State(pc_initial=74 nstack_initial=0)])
2025-01-31 15:42:20,962 - DEBUG - stack: []
2025-01-31 15:42:20,962 - DEBUG - state.pc_initial: State(pc_initial=78 nstack_initial=0)
2025-01-31 15:42:20,962 - DEBUG - dispatch pc=78, inst=LOAD_FAST(arg=2, lineno=1152)
2025-01-31 15:42:20,962 - DEBUG - stack []
2025-01-31 15:42:20,962 - DEBUG - dispatch pc=80, inst=POP_JUMP_IF_FALSE(arg=52, lineno=1152)
2025-01-31 15:42:20,962 - DEBUG - stack ['$zero_pos78.0']
2025-01-31 15:42:20,962 - DEBUG - end state. edges=[Edge(pc=82, stack=(), blockstack=(), npush=0), Edge(pc=102, stack=(), blockstack=(), npush=0)]
2025-01-31 15:42:20,963 - DEBUG - pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=82 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
2025-01-31 15:42:20,963 - DEBUG - pending: deque([State(pc_initial=74 nstack_initial=0), State(pc_initial=82 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
2025-01-31 15:42:20,963 - DEBUG - stack: []
2025-01-31 15:42:20,963 - DEBUG - state.pc_initial: State(pc_initial=74 nstack_initial=0)
2025-01-31 15:42:20,963 - DEBUG - dispatch pc=74, inst=LOAD_CONST(arg=1, lineno=1150)
2025-01-31 15:42:20,963 - DEBUG - stack []
2025-01-31 15:42:20,963 - DEBUG - dispatch pc=76, inst=STORE_FAST(arg=4, lineno=1150)
2025-01-31 15:42:20,963 - DEBUG - stack ['$const74.0']
2025-01-31 15:42:20,963 - DEBUG - end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0)]
2025-01-31 15:42:20,963 - DEBUG - pending: deque([State(pc_initial=82 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2025-01-31 15:42:20,963 - DEBUG - stack: []
2025-01-31 15:42:20,963 - DEBUG - state.pc_initial: State(pc_initial=82 nstack_initial=0)
2025-01-31 15:42:20,963 - DEBUG - dispatch pc=82, inst=LOAD_GLOBAL(arg=0, lineno=1153)
2025-01-31 15:42:20,963 - DEBUG - stack []
2025-01-31 15:42:20,963 - DEBUG - dispatch pc=84, inst=LOAD_METHOD(arg=1, lineno=1153)
2025-01-31 15:42:20,963 - DEBUG - stack ['$82load_global.0']
2025-01-31 15:42:20,963 - DEBUG - dispatch pc=86, inst=LOAD_FAST(arg=3, lineno=1153)
2025-01-31 15:42:20,963 - DEBUG - stack ['$84load_method.1']
2025-01-31 15:42:20,963 - DEBUG - dispatch pc=88, inst=CALL_METHOD(arg=1, lineno=1153)
2025-01-31 15:42:20,963 - DEBUG - stack ['$84load_method.1', '$x086.2']
2025-01-31 15:42:20,963 - DEBUG - dispatch pc=90, inst=LOAD_GLOBAL(arg=0, lineno=1153)
2025-01-31 15:42:20,963 - DEBUG - stack ['$88call_method.3']
2025-01-31 15:42:20,963 - DEBUG - dispatch pc=92, inst=LOAD_METHOD(arg=1, lineno=1153)
2025-01-31 15:42:20,963 - DEBUG - stack ['$88call_method.3', '$90load_global.4']
2025-01-31 15:42:20,963 - DEBUG - dispatch pc=94, inst=LOAD_FAST(arg=4, lineno=1153)
2025-01-31 15:42:20,963 - DEBUG - stack ['$88call_method.3', '$92load_method.5']
2025-01-31 15:42:20,963 - DEBUG - dispatch pc=96, inst=CALL_METHOD(arg=1, lineno=1153)
2025-01-31 15:42:20,963 - DEBUG - stack ['$88call_method.3', '$92load_method.5', '$x194.6']
2025-01-31 15:42:20,964 - DEBUG - dispatch pc=98, inst=COMPARE_OP(arg=3, lineno=1153)
2025-01-31 15:42:20,964 - DEBUG - stack ['$88call_method.3', '$96call_method.7']
2025-01-31 15:42:20,964 - DEBUG - dispatch pc=100, inst=RETURN_VALUE(arg=None, lineno=1153)
2025-01-31 15:42:20,964 - DEBUG - stack ['$98compare_op.8']
2025-01-31 15:42:20,964 - DEBUG - end state. edges=[]
2025-01-31 15:42:20,964 - DEBUG - pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2025-01-31 15:42:20,964 - DEBUG - stack: []
2025-01-31 15:42:20,964 - DEBUG - state.pc_initial: State(pc_initial=102 nstack_initial=0)
2025-01-31 15:42:20,964 - DEBUG - dispatch pc=102, inst=LOAD_GLOBAL(arg=0, lineno=1155)
2025-01-31 15:42:20,964 - DEBUG - stack []
2025-01-31 15:42:20,964 - DEBUG - dispatch pc=104, inst=LOAD_METHOD(arg=2, lineno=1155)
2025-01-31 15:42:20,964 - DEBUG - stack ['$102load_global.0']
2025-01-31 15:42:20,964 - DEBUG - dispatch pc=106, inst=LOAD_FAST(arg=3, lineno=1155)
2025-01-31 15:42:20,964 - DEBUG - stack ['$104load_method.1']
2025-01-31 15:42:20,964 - DEBUG - dispatch pc=108, inst=CALL_METHOD(arg=1, lineno=1155)
2025-01-31 15:42:20,964 - DEBUG - stack ['$104load_method.1', '$x0106.2']
2025-01-31 15:42:20,964 - DEBUG - dispatch pc=110, inst=LOAD_GLOBAL(arg=0, lineno=1155)
2025-01-31 15:42:20,964 - DEBUG - stack ['$108call_method.3']
2025-01-31 15:42:20,964 - DEBUG - dispatch pc=112, inst=LOAD_METHOD(arg=2, lineno=1155)
2025-01-31 15:42:20,964 - DEBUG - stack ['$108call_method.3', '$110load_global.4']
2025-01-31 15:42:20,964 - DEBUG - dispatch pc=114, inst=LOAD_FAST(arg=4, lineno=1155)
2025-01-31 15:42:20,964 - DEBUG - stack ['$108call_method.3', '$112load_method.5']
2025-01-31 15:42:20,964 - DEBUG - dispatch pc=116, inst=CALL_METHOD(arg=1, lineno=1155)
2025-01-31 15:42:20,964 - DEBUG - stack ['$108call_method.3', '$112load_method.5', '$x1114.6']
2025-01-31 15:42:20,964 - DEBUG - dispatch pc=118, inst=COMPARE_OP(arg=3, lineno=1155)
2025-01-31 15:42:20,964 - DEBUG - stack ['$108call_method.3', '$116call_method.7']
2025-01-31 15:42:20,964 - DEBUG - dispatch pc=120, inst=RETURN_VALUE(arg=None, lineno=1155)
2025-01-31 15:42:20,965 - DEBUG - stack ['$118compare_op.8']
2025-01-31 15:42:20,965 - DEBUG - end state. edges=[]
2025-01-31 15:42:20,965 - DEBUG - pending: deque([State(pc_initial=78 nstack_initial=0)])
2025-01-31 15:42:20,965 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:42:20,965 - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=24 nstack_initial=1): {'$phi24.0'},
             State(pc_initial=30 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=1): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=40 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=1): {'$phi62.0'},
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=1): set(),
             State(pc_initial=74 nstack_initial=0): set(),
             State(pc_initial=78 nstack_initial=0): set(),
             State(pc_initial=82 nstack_initial=0): set(),
             State(pc_initial=102 nstack_initial=0): set()})
2025-01-31 15:42:20,965 - DEBUG - defmap: {'$phi24.0': State(pc_initial=0 nstack_initial=0),
 '$phi32.0': State(pc_initial=0 nstack_initial=0),
 '$phi62.0': State(pc_initial=40 nstack_initial=0),
 '$phi70.0': State(pc_initial=40 nstack_initial=0)}
2025-01-31 15:42:20,965 - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi24.0': {('$16dup_top.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.0': {('$16dup_top.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$54dup_top.6',
                           State(pc_initial=40 nstack_initial=0))},
             '$phi70.0': {('$54dup_top.6',
                           State(pc_initial=40 nstack_initial=0))}})
2025-01-31 15:42:20,965 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi24.0': {('$16dup_top.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.0': {('$16dup_top.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$54dup_top.6',
                           State(pc_initial=40 nstack_initial=0))},
             '$phi70.0': {('$54dup_top.6',
                           State(pc_initial=40 nstack_initial=0))}})
2025-01-31 15:42:20,966 - DEBUG - keep phismap: {'$phi24.0': {('$16dup_top.6', State(pc_initial=0 nstack_initial=0))},
 '$phi62.0': {('$54dup_top.6', State(pc_initial=40 nstack_initial=0))}}
2025-01-31 15:42:20,966 - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi24.0': '$16dup_top.6'},
             State(pc_initial=40 nstack_initial=0): {'$phi62.0': '$54dup_top.6'}})
2025-01-31 15:42:20,966 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:42:20,966 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'value': '$6binary_subscr.2'}), (10, {'res': '$threshold10.3'}), (12, {'value': '$threshold10.3', 'res': '$12unary_negative.4'}), (14, {'res': '$x014.5'}), (16, {'orig': ['$x014.5'], 'duped': ['$16dup_top.6']}), (20, {'lhs': '$12unary_negative.4', 'rhs': '$x014.5', 'res': '$20compare_op.7'}), (22, {'pred': '$20compare_op.7'})), outgoing_phis={'$phi24.0': '$16dup_top.6'}, blockstack=(), active_try_block=None, outgoing_edgepushed={24: ('$16dup_top.6',), 32: ('$16dup_top.6',)})
2025-01-31 15:42:20,966 - DEBUG - block_infos State(pc_initial=24 nstack_initial=1):
AdaptBlockInfo(insts=((24, {'res': '$threshold24.1'}), (26, {'lhs': '$phi24.0', 'rhs': '$threshold24.1', 'res': '$26compare_op.2'}), (28, {'pred': '$26compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: (), 40: ()})
2025-01-31 15:42:20,966 - DEBUG - block_infos State(pc_initial=30 nstack_initial=0):
AdaptBlockInfo(insts=((30, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: ()})
2025-01-31 15:42:20,966 - DEBUG - block_infos State(pc_initial=32 nstack_initial=1):
AdaptBlockInfo(insts=((34, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: ()})
2025-01-31 15:42:20,966 - DEBUG - block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$const36.0'}), (38, {'value': '$const36.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: ()})
2025-01-31 15:42:20,966 - DEBUG - block_infos State(pc_initial=40 nstack_initial=0):
AdaptBlockInfo(insts=((40, {'res': '$x40.0'}), (42, {'res': '$const42.1'}), (44, {'index': '$const42.1', 'target': '$x40.0', 'res': '$44binary_subscr.2'}), (46, {'value': '$44binary_subscr.2'}), (48, {'res': '$threshold48.3'}), (50, {'value': '$threshold48.3', 'res': '$50unary_negative.4'}), (52, {'res': '$x152.5'}), (54, {'orig': ['$x152.5'], 'duped': ['$54dup_top.6']}), (58, {'lhs': '$50unary_negative.4', 'rhs': '$x152.5', 'res': '$58compare_op.7'}), (60, {'pred': '$58compare_op.7'})), outgoing_phis={'$phi62.0': '$54dup_top.6'}, blockstack=(), active_try_block=None, outgoing_edgepushed={62: ('$54dup_top.6',), 70: ('$54dup_top.6',)})
2025-01-31 15:42:20,966 - DEBUG - block_infos State(pc_initial=62 nstack_initial=1):
AdaptBlockInfo(insts=((62, {'res': '$threshold62.1'}), (64, {'lhs': '$phi62.0', 'rhs': '$threshold62.1', 'res': '$64compare_op.2'}), (66, {'pred': '$64compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={68: (), 78: ()})
2025-01-31 15:42:20,966 - DEBUG - block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={74: ()})
2025-01-31 15:42:20,966 - DEBUG - block_infos State(pc_initial=70 nstack_initial=1):
AdaptBlockInfo(insts=((72, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: ()})
2025-01-31 15:42:20,966 - DEBUG - block_infos State(pc_initial=74 nstack_initial=0):
AdaptBlockInfo(insts=((74, {'res': '$const74.0'}), (76, {'value': '$const74.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: ()})
2025-01-31 15:42:20,966 - DEBUG - block_infos State(pc_initial=78 nstack_initial=0):
AdaptBlockInfo(insts=((78, {'res': '$zero_pos78.0'}), (80, {'pred': '$zero_pos78.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={82: (), 102: ()})
2025-01-31 15:42:20,966 - DEBUG - block_infos State(pc_initial=82 nstack_initial=0):
AdaptBlockInfo(insts=((82, {'res': '$82load_global.0'}), (84, {'item': '$82load_global.0', 'res': '$84load_method.1'}), (86, {'res': '$x086.2'}), (88, {'func': '$84load_method.1', 'args': ['$x086.2'], 'res': '$88call_method.3'}), (90, {'res': '$90load_global.4'}), (92, {'item': '$90load_global.4', 'res': '$92load_method.5'}), (94, {'res': '$x194.6'}), (96, {'func': '$92load_method.5', 'args': ['$x194.6'], 'res': '$96call_method.7'}), (98, {'lhs': '$88call_method.3', 'rhs': '$96call_method.7', 'res': '$98compare_op.8'}), (100, {'retval': '$98compare_op.8', 'castval': '$100return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:42:20,967 - DEBUG - block_infos State(pc_initial=102 nstack_initial=0):
AdaptBlockInfo(insts=((102, {'res': '$102load_global.0'}), (104, {'item': '$102load_global.0', 'res': '$104load_method.1'}), (106, {'res': '$x0106.2'}), (108, {'func': '$104load_method.1', 'args': ['$x0106.2'], 'res': '$108call_method.3'}), (110, {'res': '$110load_global.4'}), (112, {'item': '$110load_global.4', 'res': '$112load_method.5'}), (114, {'res': '$x1114.6'}), (116, {'func': '$112load_method.5', 'args': ['$x1114.6'], 'res': '$116call_method.7'}), (118, {'lhs': '$108call_method.3', 'rhs': '$116call_method.7', 'res': '$118compare_op.8'}), (120, {'retval': '$118compare_op.8', 'castval': '$120return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:42:20,968 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    threshold = arg(1, name=threshold)       ['threshold']
    zero_pos = arg(2, name=zero_pos)         ['zero_pos']
    $const4.1 = const(int, 0)                ['$const4.1']
    x0 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$const4.1', 'x', 'x0']
    $12unary_negative.4 = unary(fn=<built-in function neg>, value=threshold) ['$12unary_negative.4', 'threshold']
    $20compare_op.7 = $12unary_negative.4 <= x0 ['$12unary_negative.4', '$20compare_op.7', 'x0']
    bool22 = global(bool: <class 'bool'>)    ['bool22']
    $22pred = call bool22($20compare_op.7, func=bool22, args=(Var($20compare_op.7, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None) ['$20compare_op.7', '$22pred', 'bool22']
    $phi24.0 = x0                            ['$phi24.0', 'x0']
    branch $22pred, 24, 32                   ['$22pred']
label 24:
    $26compare_op.2 = $phi24.0 <= threshold  ['$26compare_op.2', '$phi24.0', 'threshold']
    bool28 = global(bool: <class 'bool'>)    ['bool28']
    $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None) ['$26compare_op.2', '$28pred', 'bool28']
    branch $28pred, 30, 40                   ['$28pred']
label 30:
    jump 36                                  []
label 32:
    jump 40                                  []
label 36:
    x0 = const(int, 0)                       ['x0']
    jump 40                                  []
label 40:
    $const42.1 = const(int, -1)              ['$const42.1']
    x1 = getitem(value=x, index=$const42.1, fn=<built-in function getitem>) ['$const42.1', 'x', 'x1']
    $50unary_negative.4 = unary(fn=<built-in function neg>, value=threshold) ['$50unary_negative.4', 'threshold']
    $58compare_op.7 = $50unary_negative.4 <= x1 ['$50unary_negative.4', '$58compare_op.7', 'x1']
    bool60 = global(bool: <class 'bool'>)    ['bool60']
    $60pred = call bool60($58compare_op.7, func=bool60, args=(Var($58compare_op.7, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None) ['$58compare_op.7', '$60pred', 'bool60']
    $phi62.0 = x1                            ['$phi62.0', 'x1']
    branch $60pred, 62, 70                   ['$60pred']
label 62:
    $64compare_op.2 = $phi62.0 <= threshold  ['$64compare_op.2', '$phi62.0', 'threshold']
    bool66 = global(bool: <class 'bool'>)    ['bool66']
    $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None) ['$64compare_op.2', '$66pred', 'bool66']
    branch $66pred, 68, 78                   ['$66pred']
label 68:
    jump 74                                  []
label 70:
    jump 78                                  []
label 74:
    x1 = const(int, 0)                       ['x1']
    jump 78                                  []
label 78:
    bool80 = global(bool: <class 'bool'>)    ['bool80']
    $80pred = call bool80(zero_pos, func=bool80, args=(Var(zero_pos, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None) ['$80pred', 'bool80', 'zero_pos']
    branch $80pred, 82, 102                  ['$80pred']
label 82:
    $82load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>) ['$82load_global.0']
    $84load_method.1 = getattr(value=$82load_global.0, attr=signbit) ['$82load_global.0', '$84load_method.1']
    $88call_method.3 = call $84load_method.1(x0, func=$84load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None) ['$84load_method.1', '$88call_method.3', 'x0']
    $90load_global.4 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>) ['$90load_global.4']
    $92load_method.5 = getattr(value=$90load_global.4, attr=signbit) ['$90load_global.4', '$92load_method.5']
    $96call_method.7 = call $92load_method.5(x1, func=$92load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None) ['$92load_method.5', '$96call_method.7', 'x1']
    $98compare_op.8 = $88call_method.3 != $96call_method.7 ['$88call_method.3', '$96call_method.7', '$98compare_op.8']
    $100return_value.9 = cast(value=$98compare_op.8) ['$100return_value.9', '$98compare_op.8']
    return $100return_value.9                ['$100return_value.9']
label 102:
    $102load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>) ['$102load_global.0']
    $104load_method.1 = getattr(value=$102load_global.0, attr=sign) ['$102load_global.0', '$104load_method.1']
    $108call_method.3 = call $104load_method.1(x0, func=$104load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None) ['$104load_method.1', '$108call_method.3', 'x0']
    $110load_global.4 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>) ['$110load_global.4']
    $112load_method.5 = getattr(value=$110load_global.4, attr=sign) ['$110load_global.4', '$112load_method.5']
    $116call_method.7 = call $112load_method.5(x1, func=$112load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None) ['$112load_method.5', '$116call_method.7', 'x1']
    $118compare_op.8 = $108call_method.3 != $116call_method.7 ['$108call_method.3', '$116call_method.7', '$118compare_op.8']
    $120return_value.9 = cast(value=$118compare_op.8) ['$118compare_op.8', '$120return_value.9']
    return $120return_value.9                ['$120return_value.9']

2025-01-31 15:42:21,237 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=1039)
           2	LOAD_FAST(arg=0, lineno=1042)
           4	LOAD_CONST(arg=1, lineno=1042)
           6	BINARY_SUBSCR(arg=None, lineno=1042)
           8	LOAD_FAST(arg=0, lineno=1042)
          10	LOAD_CONST(arg=2, lineno=1042)
          12	BINARY_SUBSCR(arg=None, lineno=1042)
          14	COMPARE_OP(arg=4, lineno=1042)
          16	LOAD_FAST(arg=0, lineno=1042)
          18	LOAD_CONST(arg=1, lineno=1042)
          20	BINARY_SUBSCR(arg=None, lineno=1042)
          22	LOAD_FAST(arg=0, lineno=1042)
          24	LOAD_CONST(arg=3, lineno=1042)
          26	BINARY_SUBSCR(arg=None, lineno=1042)
          28	COMPARE_OP(arg=5, lineno=1042)
          30	BINARY_AND(arg=None, lineno=1042)
          32	RETURN_VALUE(arg=None, lineno=1042)
2025-01-31 15:42:21,237 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:42:21,237 - DEBUG - stack: []
2025-01-31 15:42:21,237 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:42:21,237 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=1039)
2025-01-31 15:42:21,237 - DEBUG - stack []
2025-01-31 15:42:21,237 - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1042)
2025-01-31 15:42:21,237 - DEBUG - stack []
2025-01-31 15:42:21,237 - DEBUG - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1042)
2025-01-31 15:42:21,237 - DEBUG - stack ['$x2.0']
2025-01-31 15:42:21,237 - DEBUG - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=1042)
2025-01-31 15:42:21,237 - DEBUG - stack ['$x2.0', '$const4.1']
2025-01-31 15:42:21,237 - DEBUG - dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=1042)
2025-01-31 15:42:21,237 - DEBUG - stack ['$6binary_subscr.2']
2025-01-31 15:42:21,237 - DEBUG - dispatch pc=10, inst=LOAD_CONST(arg=2, lineno=1042)
2025-01-31 15:42:21,237 - DEBUG - stack ['$6binary_subscr.2', '$x8.3']
2025-01-31 15:42:21,238 - DEBUG - dispatch pc=12, inst=BINARY_SUBSCR(arg=None, lineno=1042)
2025-01-31 15:42:21,238 - DEBUG - stack ['$6binary_subscr.2', '$x8.3', '$const10.4']
2025-01-31 15:42:21,238 - DEBUG - dispatch pc=14, inst=COMPARE_OP(arg=4, lineno=1042)
2025-01-31 15:42:21,238 - DEBUG - stack ['$6binary_subscr.2', '$12binary_subscr.5']
2025-01-31 15:42:21,238 - DEBUG - dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=1042)
2025-01-31 15:42:21,238 - DEBUG - stack ['$14compare_op.6']
2025-01-31 15:42:21,238 - DEBUG - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1042)
2025-01-31 15:42:21,238 - DEBUG - stack ['$14compare_op.6', '$x16.7']
2025-01-31 15:42:21,238 - DEBUG - dispatch pc=20, inst=BINARY_SUBSCR(arg=None, lineno=1042)
2025-01-31 15:42:21,238 - DEBUG - stack ['$14compare_op.6', '$x16.7', '$const18.8']
2025-01-31 15:42:21,238 - DEBUG - dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=1042)
2025-01-31 15:42:21,238 - DEBUG - stack ['$14compare_op.6', '$20binary_subscr.9']
2025-01-31 15:42:21,238 - DEBUG - dispatch pc=24, inst=LOAD_CONST(arg=3, lineno=1042)
2025-01-31 15:42:21,238 - DEBUG - stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10']
2025-01-31 15:42:21,238 - DEBUG - dispatch pc=26, inst=BINARY_SUBSCR(arg=None, lineno=1042)
2025-01-31 15:42:21,238 - DEBUG - stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10', '$const24.11']
2025-01-31 15:42:21,238 - DEBUG - dispatch pc=28, inst=COMPARE_OP(arg=5, lineno=1042)
2025-01-31 15:42:21,238 - DEBUG - stack ['$14compare_op.6', '$20binary_subscr.9', '$26binary_subscr.12']
2025-01-31 15:42:21,238 - DEBUG - dispatch pc=30, inst=BINARY_AND(arg=None, lineno=1042)
2025-01-31 15:42:21,238 - DEBUG - stack ['$14compare_op.6', '$28compare_op.13']
2025-01-31 15:42:21,238 - DEBUG - dispatch pc=32, inst=RETURN_VALUE(arg=None, lineno=1042)
2025-01-31 15:42:21,238 - DEBUG - stack ['$30binary_and.14']
2025-01-31 15:42:21,238 - DEBUG - end state. edges=[]
2025-01-31 15:42:21,238 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:42:21,238 - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-01-31 15:42:21,238 - DEBUG - defmap: {}
2025-01-31 15:42:21,238 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:42:21,239 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:42:21,239 - DEBUG - keep phismap: {}
2025-01-31 15:42:21,239 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-01-31 15:42:21,239 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:42:21,239 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'res': '$x8.3'}), (10, {'res': '$const10.4'}), (12, {'index': '$const10.4', 'target': '$x8.3', 'res': '$12binary_subscr.5'}), (14, {'lhs': '$6binary_subscr.2', 'rhs': '$12binary_subscr.5', 'res': '$14compare_op.6'}), (16, {'res': '$x16.7'}), (18, {'res': '$const18.8'}), (20, {'index': '$const18.8', 'target': '$x16.7', 'res': '$20binary_subscr.9'}), (22, {'res': '$x22.10'}), (24, {'res': '$const24.11'}), (26, {'index': '$const24.11', 'target': '$x22.10', 'res': '$26binary_subscr.12'}), (28, {'lhs': '$20binary_subscr.9', 'rhs': '$26binary_subscr.12', 'res': '$28compare_op.13'}), (30, {'lhs': '$14compare_op.6', 'rhs': '$28compare_op.13', 'res': '$30binary_and.14'}), (32, {'retval': '$30binary_and.14', 'castval': '$32return_value.15'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:42:21,239 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6binary_subscr.2 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$6binary_subscr.2', '$const4.1', 'x']
    $const10.4 = const(int, -1)              ['$const10.4']
    $12binary_subscr.5 = getitem(value=x, index=$const10.4, fn=<built-in function getitem>) ['$12binary_subscr.5', '$const10.4', 'x']
    $14compare_op.6 = $6binary_subscr.2 > $12binary_subscr.5 ['$12binary_subscr.5', '$14compare_op.6', '$6binary_subscr.2']
    $const18.8 = const(int, 0)               ['$const18.8']
    $20binary_subscr.9 = getitem(value=x, index=$const18.8, fn=<built-in function getitem>) ['$20binary_subscr.9', '$const18.8', 'x']
    $const24.11 = const(int, 1)              ['$const24.11']
    $26binary_subscr.12 = getitem(value=x, index=$const24.11, fn=<built-in function getitem>) ['$26binary_subscr.12', '$const24.11', 'x']
    $28compare_op.13 = $20binary_subscr.9 >= $26binary_subscr.12 ['$20binary_subscr.9', '$26binary_subscr.12', '$28compare_op.13']
    $30binary_and.14 = $14compare_op.6 & $28compare_op.13 ['$14compare_op.6', '$28compare_op.13', '$30binary_and.14']
    $32return_value.15 = cast(value=$30binary_and.14) ['$30binary_and.14', '$32return_value.15']
    return $32return_value.15                ['$32return_value.15']

2025-01-31 15:42:21,240 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=1045)
           2	LOAD_FAST(arg=0, lineno=1048)
           4	LOAD_CONST(arg=1, lineno=1048)
           6	BINARY_SUBSCR(arg=None, lineno=1048)
           8	LOAD_FAST(arg=0, lineno=1048)
          10	LOAD_CONST(arg=2, lineno=1048)
          12	BINARY_SUBSCR(arg=None, lineno=1048)
          14	COMPARE_OP(arg=0, lineno=1048)
          16	LOAD_FAST(arg=0, lineno=1048)
          18	LOAD_CONST(arg=1, lineno=1048)
          20	BINARY_SUBSCR(arg=None, lineno=1048)
          22	LOAD_FAST(arg=0, lineno=1048)
          24	LOAD_CONST(arg=3, lineno=1048)
          26	BINARY_SUBSCR(arg=None, lineno=1048)
          28	COMPARE_OP(arg=1, lineno=1048)
          30	BINARY_AND(arg=None, lineno=1048)
          32	RETURN_VALUE(arg=None, lineno=1048)
2025-01-31 15:42:21,240 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:42:21,240 - DEBUG - stack: []
2025-01-31 15:42:21,240 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:42:21,240 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=1045)
2025-01-31 15:42:21,240 - DEBUG - stack []
2025-01-31 15:42:21,240 - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1048)
2025-01-31 15:42:21,240 - DEBUG - stack []
2025-01-31 15:42:21,240 - DEBUG - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1048)
2025-01-31 15:42:21,240 - DEBUG - stack ['$x2.0']
2025-01-31 15:42:21,240 - DEBUG - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=1048)
2025-01-31 15:42:21,240 - DEBUG - stack ['$x2.0', '$const4.1']
2025-01-31 15:42:21,240 - DEBUG - dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=1048)
2025-01-31 15:42:21,240 - DEBUG - stack ['$6binary_subscr.2']
2025-01-31 15:42:21,240 - DEBUG - dispatch pc=10, inst=LOAD_CONST(arg=2, lineno=1048)
2025-01-31 15:42:21,240 - DEBUG - stack ['$6binary_subscr.2', '$x8.3']
2025-01-31 15:42:21,240 - DEBUG - dispatch pc=12, inst=BINARY_SUBSCR(arg=None, lineno=1048)
2025-01-31 15:42:21,240 - DEBUG - stack ['$6binary_subscr.2', '$x8.3', '$const10.4']
2025-01-31 15:42:21,240 - DEBUG - dispatch pc=14, inst=COMPARE_OP(arg=0, lineno=1048)
2025-01-31 15:42:21,240 - DEBUG - stack ['$6binary_subscr.2', '$12binary_subscr.5']
2025-01-31 15:42:21,240 - DEBUG - dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=1048)
2025-01-31 15:42:21,241 - DEBUG - stack ['$14compare_op.6']
2025-01-31 15:42:21,241 - DEBUG - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1048)
2025-01-31 15:42:21,241 - DEBUG - stack ['$14compare_op.6', '$x16.7']
2025-01-31 15:42:21,241 - DEBUG - dispatch pc=20, inst=BINARY_SUBSCR(arg=None, lineno=1048)
2025-01-31 15:42:21,241 - DEBUG - stack ['$14compare_op.6', '$x16.7', '$const18.8']
2025-01-31 15:42:21,241 - DEBUG - dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=1048)
2025-01-31 15:42:21,241 - DEBUG - stack ['$14compare_op.6', '$20binary_subscr.9']
2025-01-31 15:42:21,241 - DEBUG - dispatch pc=24, inst=LOAD_CONST(arg=3, lineno=1048)
2025-01-31 15:42:21,241 - DEBUG - stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10']
2025-01-31 15:42:21,241 - DEBUG - dispatch pc=26, inst=BINARY_SUBSCR(arg=None, lineno=1048)
2025-01-31 15:42:21,241 - DEBUG - stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10', '$const24.11']
2025-01-31 15:42:21,241 - DEBUG - dispatch pc=28, inst=COMPARE_OP(arg=1, lineno=1048)
2025-01-31 15:42:21,241 - DEBUG - stack ['$14compare_op.6', '$20binary_subscr.9', '$26binary_subscr.12']
2025-01-31 15:42:21,241 - DEBUG - dispatch pc=30, inst=BINARY_AND(arg=None, lineno=1048)
2025-01-31 15:42:21,241 - DEBUG - stack ['$14compare_op.6', '$28compare_op.13']
2025-01-31 15:42:21,241 - DEBUG - dispatch pc=32, inst=RETURN_VALUE(arg=None, lineno=1048)
2025-01-31 15:42:21,241 - DEBUG - stack ['$30binary_and.14']
2025-01-31 15:42:21,241 - DEBUG - end state. edges=[]
2025-01-31 15:42:21,241 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:42:21,241 - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-01-31 15:42:21,241 - DEBUG - defmap: {}
2025-01-31 15:42:21,241 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:42:21,241 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:42:21,241 - DEBUG - keep phismap: {}
2025-01-31 15:42:21,241 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-01-31 15:42:21,241 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:42:21,242 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'res': '$x8.3'}), (10, {'res': '$const10.4'}), (12, {'index': '$const10.4', 'target': '$x8.3', 'res': '$12binary_subscr.5'}), (14, {'lhs': '$6binary_subscr.2', 'rhs': '$12binary_subscr.5', 'res': '$14compare_op.6'}), (16, {'res': '$x16.7'}), (18, {'res': '$const18.8'}), (20, {'index': '$const18.8', 'target': '$x16.7', 'res': '$20binary_subscr.9'}), (22, {'res': '$x22.10'}), (24, {'res': '$const24.11'}), (26, {'index': '$const24.11', 'target': '$x22.10', 'res': '$26binary_subscr.12'}), (28, {'lhs': '$20binary_subscr.9', 'rhs': '$26binary_subscr.12', 'res': '$28compare_op.13'}), (30, {'lhs': '$14compare_op.6', 'rhs': '$28compare_op.13', 'res': '$30binary_and.14'}), (32, {'retval': '$30binary_and.14', 'castval': '$32return_value.15'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:42:21,242 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6binary_subscr.2 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$6binary_subscr.2', '$const4.1', 'x']
    $const10.4 = const(int, -1)              ['$const10.4']
    $12binary_subscr.5 = getitem(value=x, index=$const10.4, fn=<built-in function getitem>) ['$12binary_subscr.5', '$const10.4', 'x']
    $14compare_op.6 = $6binary_subscr.2 < $12binary_subscr.5 ['$12binary_subscr.5', '$14compare_op.6', '$6binary_subscr.2']
    $const18.8 = const(int, 0)               ['$const18.8']
    $20binary_subscr.9 = getitem(value=x, index=$const18.8, fn=<built-in function getitem>) ['$20binary_subscr.9', '$const18.8', 'x']
    $const24.11 = const(int, 1)              ['$const24.11']
    $26binary_subscr.12 = getitem(value=x, index=$const24.11, fn=<built-in function getitem>) ['$26binary_subscr.12', '$const24.11', 'x']
    $28compare_op.13 = $20binary_subscr.9 <= $26binary_subscr.12 ['$20binary_subscr.9', '$26binary_subscr.12', '$28compare_op.13']
    $30binary_and.14 = $14compare_op.6 & $28compare_op.13 ['$14compare_op.6', '$28compare_op.13', '$30binary_and.14']
    $32return_value.15 = cast(value=$30binary_and.14) ['$30binary_and.14', '$32return_value.15']
    return $32return_value.15                ['$32return_value.15']

2025-01-31 15:43:43,807 - INFO - Saving Vocals stem to La Feve - Comme des enfants_(Vocals)_UVR-MDX-NET-Inst_HQ_3.wav...
2025-01-31 15:43:43,856 - INFO - Audio duration is 0.04 hours (128.52 seconds).
2025-01-31 15:43:43,856 - INFO - Using pydub for writing.
2025-01-31 15:43:43,912 - INFO - Saving Instrumental stem to La Feve - Comme des enfants_(Instrumental)_UVR-MDX-NET-Inst_HQ_3.wav...
2025-01-31 15:43:43,913 - INFO - Audio duration is 0.04 hours (128.52 seconds).
2025-01-31 15:43:43,913 - INFO - Using pydub for writing.
2025-01-31 15:43:44,039 - INFO - Clearing input audio file paths, sources and stems...
2025-01-31 15:43:44,040 - INFO - Separation duration: 00:01:23
2025-01-31 15:43:44,137 - INFO - Split audio into ./split_audios/vocal_La Feve - Comme des enfants.wav and ./split_audios/instrument_La Feve - Comme des enfants.wav
2025-01-31 15:43:44,138 - INFO - Changing voice with model: logs/model/MickeyMouse
2025-01-31 15:43:44,138 - ERROR - An error occurred during processing
Traceback (most recent call last):
  File "/home/strain/deepVoice/Applio/server.py", line 139, in home
    output_path=output_path,
NameError: name 'output_path' is not defined
2025-01-31 15:43:44,281 - INFO - 127.0.0.1 - - [31/Jan/2025 15:43:44] "POST / HTTP/1.1" 200 -
2025-01-31 15:44:43,271 - INFO -  * Detected change in '/home/strain/deepVoice/Applio/server.py', reloading
2025-01-31 15:44:43,775 - INFO -  * Restarting with stat
2025-01-31 15:44:45,574 - WARNING -  * Debugger is active!
2025-01-31 15:44:45,574 - INFO -  * Debugger PIN: 142-961-790
2025-01-31 15:44:49,837 - INFO - Retrieved models: ['Ninho', 'Damso', 'Vald600', 'CharlesAznavour', 'MarineLepen', 'JUL_Interview', 'LaFeve', 'Nekfeu250', 'MickeyMouse', 'SCHInterview', 'SCH1000', 'NicolasSarkozy_v2_500e', 'Maes_600', 'KAARIS', 'ClaudeFrancoisV2', 'Josman', 'SoLaLune', 'JohnnyHallyday800', 'Titeuf600', 'Kylian-Mbapp√©', 'Lacrim', 'OrelsanV1', 'Booba', 'EricCartman', 'kaarism', 'Ademo', 'rick', 'Bassem', 'Wejdene_310Epochs', 'Laylow1000', 'PhilippeEtchebest', 'EricZemmour', 'FreezeCorleone', 'macron', 'gazo700', 'Angele', 'AlphaWann', 'Laylow', 'hamzaai500v2', 'homerSimpson']
2025-01-31 15:44:49,840 - INFO - Received YouTube URL for processing: https://www.youtube.com/watch?v=Jq-LrzeABss
2025-01-31 15:44:49,840 - DEBUG - matched regex search: (?:v=|\/)([0-9A-Za-z_-]{11}).*
2025-01-31 15:44:50,750 - DEBUG - finding initial function name
2025-01-31 15:44:50,751 - DEBUG - Pattern failed: ytplayer\.config\s*=\s*
2025-01-31 15:44:50,752 - DEBUG - Could not parse object.
2025-01-31 15:44:50,773 - DEBUG - finished regex search, matched: (/s/player/[\w\d]+/[\w\d_/.]+/base\.js)
2025-01-31 15:44:51,030 - DEBUG - matched regex search: signatureTimestamp:(\d*)
2025-01-31 15:44:51,031 - DEBUG - The WEB client requires poToken to obtain functional streams
2025-01-31 15:44:51,031 - DEBUG - Automatically generating poToken
2025-01-31 15:44:51,031 - DEBUG - Looking for visitorData in initial_data
2025-01-31 15:44:51,119 - DEBUG - matched regex search: visitor_data[',\"\s]+value['\"]:\s?['\"]([a-zA-Z0-9_%-]+)['\"]
2025-01-31 15:44:51,119 - DEBUG - VisitorData obtained successfully
2025-01-31 15:44:51,119 - DEBUG - Invoking botGuard
2025-01-31 15:44:51,837 - DEBUG - PoToken generated successfully
2025-01-31 15:44:52,274 - DEBUG - Found title in vid_info
2025-01-31 15:44:52,274 - DEBUG - applying descrambler
2025-01-31 15:44:52,275 - DEBUG - Applying poToken
2025-01-31 15:44:52,290 - DEBUG - finding initial function name
2025-01-31 15:44:52,351 - DEBUG - finished regex search, matched: (?P<sig>[a-zA-Z0-9_$]+)\s*=\s*function\(\s*(?P<arg>[a-zA-Z0-9_$]+)\s*\)\s*{\s*(?P=arg)\s*=\s*(?P=arg)\.split\(\s*""\s*\)\s*;\s*[^}]+;\s*return\s+(?P=arg)\.join\(\s*""\s*\)
2025-01-31 15:44:52,351 - DEBUG - Signature cipher function name: ouU
2025-01-31 15:44:52,352 - DEBUG - Finding throttling function name
2025-01-31 15:44:52,420 - DEBUG - finished regex search, matched: (?x)
            (?:
                \.get\("n"\)\)&&\(b=|
                (?:
                    b=String\.fromCharCode\(110\)|
                    (?P<str_idx>[a-zA-Z0-9_$.]+)&&\(b="nn"\[\+(?P=str_idx)\]
                )
                (?:
                    ,[a-zA-Z0-9_$]+\(a\))?,c=a\.
                    (?:
                        get\(b\)|
                        [a-zA-Z0-9_$]+\[b\]\|\|null
                    )\)&&\(c=|
                \b(?P<var>[a-zA-Z0-9_$]+)=
            )(?P<nfunc>[a-zA-Z0-9_$]+)(?:\[(?P<idx>\d+)\])?\([a-zA-Z]\)
            (?(var),[a-zA-Z0-9_$]+\.set\((?:"n+"|[a-zA-Z0-9_$]+)\,(?P=var)\))
2025-01-31 15:44:52,421 - DEBUG - func is: b_N
2025-01-31 15:44:52,421 - DEBUG - idx is: 0
2025-01-31 15:44:52,421 - DEBUG - Checking throttling function name
2025-01-31 15:44:52,422 - DEBUG - Throttling function name is: xyN
2025-01-31 15:44:52,422 - DEBUG - signature found, skip decipher
2025-01-31 15:44:52,422 - DEBUG - Parameter n is: F4JYYAnfRXO4GlpvK
2025-01-31 15:44:52,930 - DEBUG - Parameter n deciphered: Ath99zxwBm3mXA
2025-01-31 15:44:52,930 - DEBUG - signature found, skip decipher
2025-01-31 15:44:52,930 - DEBUG - Parameter n is: UIzIqgM971mTOUVD7
2025-01-31 15:44:53,422 - DEBUG - Parameter n deciphered: Y-XaIkOj9uCYXw
2025-01-31 15:44:53,422 - DEBUG - signature found, skip decipher
2025-01-31 15:44:53,422 - DEBUG - Parameter n is: UIzIqgM971mTOUVD7
2025-01-31 15:44:53,422 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:44:53,423 - DEBUG - Parameter n deciphered: Y-XaIkOj9uCYXw
2025-01-31 15:44:53,423 - DEBUG - signature found, skip decipher
2025-01-31 15:44:53,423 - DEBUG - Parameter n is: UIzIqgM971mTOUVD7
2025-01-31 15:44:53,423 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:44:53,423 - DEBUG - Parameter n deciphered: Y-XaIkOj9uCYXw
2025-01-31 15:44:53,423 - DEBUG - signature found, skip decipher
2025-01-31 15:44:53,423 - DEBUG - Parameter n is: UIzIqgM971mTOUVD7
2025-01-31 15:44:53,423 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:44:53,423 - DEBUG - Parameter n deciphered: Y-XaIkOj9uCYXw
2025-01-31 15:44:53,424 - DEBUG - signature found, skip decipher
2025-01-31 15:44:53,424 - DEBUG - Parameter n is: UIzIqgM971mTOUVD7
2025-01-31 15:44:53,424 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:44:53,424 - DEBUG - Parameter n deciphered: Y-XaIkOj9uCYXw
2025-01-31 15:44:53,424 - DEBUG - signature found, skip decipher
2025-01-31 15:44:53,424 - DEBUG - Parameter n is: UIzIqgM971mTOUVD7
2025-01-31 15:44:53,424 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:44:53,424 - DEBUG - Parameter n deciphered: Y-XaIkOj9uCYXw
2025-01-31 15:44:53,425 - DEBUG - signature found, skip decipher
2025-01-31 15:44:53,425 - DEBUG - Parameter n is: UIzIqgM971mTOUVD7
2025-01-31 15:44:53,425 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:44:53,425 - DEBUG - Parameter n deciphered: Y-XaIkOj9uCYXw
2025-01-31 15:44:53,425 - DEBUG - signature found, skip decipher
2025-01-31 15:44:53,425 - DEBUG - Parameter n is: UIzIqgM971mTOUVD7
2025-01-31 15:44:53,425 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:44:53,425 - DEBUG - Parameter n deciphered: Y-XaIkOj9uCYXw
2025-01-31 15:44:53,426 - DEBUG - signature found, skip decipher
2025-01-31 15:44:53,426 - DEBUG - Parameter n is: UIzIqgM971mTOUVD7
2025-01-31 15:44:53,426 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:44:53,426 - DEBUG - Parameter n deciphered: Y-XaIkOj9uCYXw
2025-01-31 15:44:53,426 - DEBUG - signature found, skip decipher
2025-01-31 15:44:53,426 - DEBUG - Parameter n is: UIzIqgM971mTOUVD7
2025-01-31 15:44:53,426 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:44:53,426 - DEBUG - Parameter n deciphered: Y-XaIkOj9uCYXw
2025-01-31 15:44:53,426 - DEBUG - signature found, skip decipher
2025-01-31 15:44:53,427 - DEBUG - Parameter n is: UIzIqgM971mTOUVD7
2025-01-31 15:44:53,427 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:44:53,427 - DEBUG - Parameter n deciphered: Y-XaIkOj9uCYXw
2025-01-31 15:44:53,427 - DEBUG - signature found, skip decipher
2025-01-31 15:44:53,427 - DEBUG - Parameter n is: UIzIqgM971mTOUVD7
2025-01-31 15:44:53,427 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:44:53,427 - DEBUG - Parameter n deciphered: Y-XaIkOj9uCYXw
2025-01-31 15:44:53,427 - DEBUG - signature found, skip decipher
2025-01-31 15:44:53,427 - DEBUG - Parameter n is: UIzIqgM971mTOUVD7
2025-01-31 15:44:53,427 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:44:53,428 - DEBUG - Parameter n deciphered: Y-XaIkOj9uCYXw
2025-01-31 15:44:53,428 - DEBUG - signature found, skip decipher
2025-01-31 15:44:53,428 - DEBUG - Parameter n is: UIzIqgM971mTOUVD7
2025-01-31 15:44:53,428 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:44:53,428 - DEBUG - Parameter n deciphered: Y-XaIkOj9uCYXw
2025-01-31 15:44:53,428 - DEBUG - signature found, skip decipher
2025-01-31 15:44:53,428 - DEBUG - Parameter n is: UIzIqgM971mTOUVD7
2025-01-31 15:44:53,428 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:44:53,428 - DEBUG - Parameter n deciphered: Y-XaIkOj9uCYXw
2025-01-31 15:44:53,429 - DEBUG - signature found, skip decipher
2025-01-31 15:44:53,429 - DEBUG - Parameter n is: UIzIqgM971mTOUVD7
2025-01-31 15:44:53,429 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:44:53,429 - DEBUG - Parameter n deciphered: Y-XaIkOj9uCYXw
2025-01-31 15:44:53,429 - DEBUG - signature found, skip decipher
2025-01-31 15:44:53,429 - DEBUG - Parameter n is: UIzIqgM971mTOUVD7
2025-01-31 15:44:53,429 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:44:53,429 - DEBUG - Parameter n deciphered: Y-XaIkOj9uCYXw
2025-01-31 15:44:53,430 - DEBUG - signature found, skip decipher
2025-01-31 15:44:53,430 - DEBUG - Parameter n is: UIzIqgM971mTOUVD7
2025-01-31 15:44:53,430 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:44:53,430 - DEBUG - Parameter n deciphered: Y-XaIkOj9uCYXw
2025-01-31 15:44:53,430 - DEBUG - signature found, skip decipher
2025-01-31 15:44:53,430 - DEBUG - Parameter n is: UIzIqgM971mTOUVD7
2025-01-31 15:44:53,430 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:44:53,430 - DEBUG - Parameter n deciphered: Y-XaIkOj9uCYXw
2025-01-31 15:44:53,431 - DEBUG - signature found, skip decipher
2025-01-31 15:44:53,431 - DEBUG - Parameter n is: UIzIqgM971mTOUVD7
2025-01-31 15:44:53,431 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:44:53,431 - DEBUG - Parameter n deciphered: Y-XaIkOj9uCYXw
2025-01-31 15:44:53,431 - DEBUG - signature found, skip decipher
2025-01-31 15:44:53,431 - DEBUG - Parameter n is: UIzIqgM971mTOUVD7
2025-01-31 15:44:53,431 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:44:53,431 - DEBUG - Parameter n deciphered: Y-XaIkOj9uCYXw
2025-01-31 15:44:53,431 - DEBUG - signature found, skip decipher
2025-01-31 15:44:53,431 - DEBUG - Parameter n is: UIzIqgM971mTOUVD7
2025-01-31 15:44:53,431 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:44:53,431 - DEBUG - Parameter n deciphered: Y-XaIkOj9uCYXw
2025-01-31 15:44:53,432 - DEBUG - downloading (2080762 total bytes) file to /home/strain/deepVoice/Applio/temp_audio
2025-01-31 15:44:53,743 - DEBUG - download remaining: 0
2025-01-31 15:44:53,748 - DEBUG - download finished
2025-01-31 15:44:53,833 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', '/home/strain/deepVoice/Applio/temp_audio', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-31 15:44:54,127 - INFO - YouTube audio downloaded and converted to WAV: La Feve - Comme des enfants
2025-01-31 15:44:54,127 - INFO - Splitting audio for: La Feve - Comme des enfants
2025-01-31 15:44:54,129 - INFO - Separator version 0.28.5 instantiating with output_dir: None, output_format: WAV
2025-01-31 15:44:54,129 - INFO - Output directory not specified. Using current working directory.
2025-01-31 15:44:54,130 - INFO - Operating System: Linux #53-Ubuntu SMP PREEMPT_DYNAMIC Sat Jan 11 00:06:25 UTC 2025
2025-01-31 15:44:54,132 - INFO - System: Linux Node: server Release: 6.8.0-52-generic Machine: x86_64 Proc: x86_64
2025-01-31 15:44:54,132 - INFO - Python Version: 3.10.16
2025-01-31 15:44:54,132 - INFO - PyTorch Version: 2.3.1+cu121
2025-01-31 15:44:54,198 - INFO - FFmpeg installed: ffmpeg version 6.1.1-3ubuntu5 Copyright (c) 2000-2023 the FFmpeg developers
2025-01-31 15:44:54,199 - INFO - ONNX Runtime CPU package installed with version: 1.20.1
2025-01-31 15:44:54,199 - INFO - No hardware acceleration could be configured, running in CPU mode
2025-01-31 15:44:54,199 - INFO - Loading model UVR-MDX-NET-Inst_HQ_3.onnx...
2025-01-31 15:44:54,522 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Erf', version=13)
2025-01-31 15:44:54,522 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Erf', version=9)
2025-01-31 15:44:54,522 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='HardSigmoid', version=6)
2025-01-31 15:44:54,523 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='HardSigmoid', version=1)
2025-01-31 15:44:54,523 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='HardSwish', version=14)
2025-01-31 15:44:54,523 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='LeakyRelu', version=16)
2025-01-31 15:44:54,523 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='LeakyRelu', version=6)
2025-01-31 15:44:54,523 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='LeakyRelu', version=1)
2025-01-31 15:44:54,523 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='LogSoftmax', version=13)
2025-01-31 15:44:54,523 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='LogSoftmax', version=11)
2025-01-31 15:44:54,523 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='LogSoftmax', version=1)
2025-01-31 15:44:54,523 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Relu', version=14)
2025-01-31 15:44:54,523 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Relu', version=13)
2025-01-31 15:44:54,523 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Relu', version=6)
2025-01-31 15:44:54,523 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='PRelu', version=16)
2025-01-31 15:44:54,523 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='PRelu', version=9)
2025-01-31 15:44:54,523 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='PRelu', version=7)
2025-01-31 15:44:54,523 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Elu', version=6)
2025-01-31 15:44:54,523 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Celu', version=12)
2025-01-31 15:44:54,523 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Selu', version=6)
2025-01-31 15:44:54,524 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sigmoid', version=13)
2025-01-31 15:44:54,524 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sigmoid', version=6)
2025-01-31 15:44:54,524 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sigmoid', version=1)
2025-01-31 15:44:54,524 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Softmax', version=11)
2025-01-31 15:44:54,524 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Softmax', version=1)
2025-01-31 15:44:54,524 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Softmax', version=13)
2025-01-31 15:44:54,524 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Softsign', version=1)
2025-01-31 15:44:54,524 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Softplus', version=1)
2025-01-31 15:44:54,524 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ArgMin', version=13)
2025-01-31 15:44:54,524 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ArgMin', version=12)
2025-01-31 15:44:54,524 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ArgMax', version=13)
2025-01-31 15:44:54,524 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ArgMax', version=12)
2025-01-31 15:44:54,524 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ArgMin', version=11)
2025-01-31 15:44:54,525 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ArgMax', version=11)
2025-01-31 15:44:54,525 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Pad', version=13)
2025-01-31 15:44:54,525 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Pad', version=11)
2025-01-31 15:44:54,525 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Pad', version=2)
2025-01-31 15:44:54,525 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='AveragePool', version=11)
2025-01-31 15:44:54,526 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='AveragePool', version=10)
2025-01-31 15:44:54,526 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='AveragePool', version=7)
2025-01-31 15:44:54,526 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='BatchNormalization', version=9)
2025-01-31 15:44:54,526 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='BatchNormalization', version=14)
2025-01-31 15:44:54,526 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='BatchNormalization', version=15)
2025-01-31 15:44:54,526 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Div', version=14)
2025-01-31 15:44:54,526 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Div', version=13)
2025-01-31 15:44:54,526 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Div', version=7)
2025-01-31 15:44:54,526 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Div', version=6)
2025-01-31 15:44:54,527 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Div', version=1)
2025-01-31 15:44:54,527 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Mul', version=14)
2025-01-31 15:44:54,527 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Mul', version=13)
2025-01-31 15:44:54,527 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Mul', version=7)
2025-01-31 15:44:54,527 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Mul', version=6)
2025-01-31 15:44:54,527 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Mul', version=1)
2025-01-31 15:44:54,527 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sub', version=14)
2025-01-31 15:44:54,527 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sub', version=13)
2025-01-31 15:44:54,527 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sub', version=7)
2025-01-31 15:44:54,527 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sub', version=6)
2025-01-31 15:44:54,527 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sub', version=1)
2025-01-31 15:44:54,527 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Add', version=14)
2025-01-31 15:44:54,527 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Add', version=13)
2025-01-31 15:44:54,527 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Add', version=7)
2025-01-31 15:44:54,527 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Add', version=6)
2025-01-31 15:44:54,527 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Add', version=1)
2025-01-31 15:44:54,528 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Cast', version=13)
2025-01-31 15:44:54,528 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Cast', version=9)
2025-01-31 15:44:54,528 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Clip', version=13)
2025-01-31 15:44:54,528 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Clip', version=12)
2025-01-31 15:44:54,528 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Clip', version=11)
2025-01-31 15:44:54,528 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Clip', version=6)
2025-01-31 15:44:54,528 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='GreaterOrEqual', version=12)
2025-01-31 15:44:54,528 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='LessOrEqual', version=12)
2025-01-31 15:44:54,529 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Greater', version=13)
2025-01-31 15:44:54,529 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Greater', version=9)
2025-01-31 15:44:54,529 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Greater', version=7)
2025-01-31 15:44:54,529 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Less', version=13)
2025-01-31 15:44:54,529 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Less', version=9)
2025-01-31 15:44:54,529 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Less', version=7)
2025-01-31 15:44:54,529 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Equal', version=13)
2025-01-31 15:44:54,529 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Equal', version=11)
2025-01-31 15:44:54,529 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Equal', version=7)
2025-01-31 15:44:54,529 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Concat', version=13)
2025-01-31 15:44:54,529 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Concat', version=11)
2025-01-31 15:44:54,529 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Concat', version=4)
2025-01-31 15:44:54,530 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Constant', version=13)
2025-01-31 15:44:54,530 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Constant', version=12)
2025-01-31 15:44:54,530 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Constant', version=11)
2025-01-31 15:44:54,530 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Constant', version=9)
2025-01-31 15:44:54,530 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ConstantOfShape', version=9)
2025-01-31 15:44:54,530 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ConvTranspose', version=11)
2025-01-31 15:44:54,530 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ConvTranspose', version=1)
2025-01-31 15:44:54,530 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Conv', version=11)
2025-01-31 15:44:54,530 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Conv', version=1)
2025-01-31 15:44:54,531 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='CumSum', version=14)
2025-01-31 15:44:54,531 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='CumSum', version=11)
2025-01-31 15:44:54,531 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='DepthToSpace', version=13)
2025-01-31 15:44:54,531 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='DepthToSpace', version=11)
2025-01-31 15:44:54,531 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Dropout', version=10)
2025-01-31 15:44:54,531 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Dropout', version=13)
2025-01-31 15:44:54,531 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Dropout', version=12)
2025-01-31 15:44:54,532 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Einsum', version=12)
2025-01-31 15:44:54,532 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Expand', version=13)
2025-01-31 15:44:54,532 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Expand', version=8)
2025-01-31 15:44:54,532 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='EyeLike', version=9)
2025-01-31 15:44:54,533 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Flatten', version=9)
2025-01-31 15:44:54,533 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Flatten', version=11)
2025-01-31 15:44:54,533 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Flatten', version=13)
2025-01-31 15:44:54,533 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Tanh', version=6)
2025-01-31 15:44:54,533 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Tanh', version=13)
2025-01-31 15:44:54,533 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Tan', version=7)
2025-01-31 15:44:54,533 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sin', version=7)
2025-01-31 15:44:54,533 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sign', version=9)
2025-01-31 15:44:54,533 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sign', version=13)
2025-01-31 15:44:54,533 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Log', version=6)
2025-01-31 15:44:54,533 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Log', version=13)
2025-01-31 15:44:54,533 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Exp', version=13)
2025-01-31 15:44:54,534 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Exp', version=6)
2025-01-31 15:44:54,534 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Cos', version=7)
2025-01-31 15:44:54,534 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Atan', version=7)
2025-01-31 15:44:54,534 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Asin', version=7)
2025-01-31 15:44:54,534 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Acos', version=7)
2025-01-31 15:44:54,534 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Abs', version=6)
2025-01-31 15:44:54,534 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Abs', version=13)
2025-01-31 15:44:54,534 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Gather', version=13)
2025-01-31 15:44:54,534 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Gather', version=11)
2025-01-31 15:44:54,535 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Gather', version=1)
2025-01-31 15:44:54,535 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='GatherElements', version=13)
2025-01-31 15:44:54,535 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='GatherElements', version=11)
2025-01-31 15:44:54,535 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='GatherND', version=13)
2025-01-31 15:44:54,535 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='GatherND', version=12)
2025-01-31 15:44:54,535 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='GatherND', version=11)
2025-01-31 15:44:54,535 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Gemm', version=13)
2025-01-31 15:44:54,535 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Gemm', version=11)
2025-01-31 15:44:54,535 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Gemm', version=9)
2025-01-31 15:44:54,535 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='GlobalAveragePool', version=1)
2025-01-31 15:44:54,536 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Identity', version=1)
2025-01-31 15:44:54,536 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Identity', version=13)
2025-01-31 15:44:54,536 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Identity', version=14)
2025-01-31 15:44:54,536 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Identity', version=16)
2025-01-31 15:44:54,536 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='InstanceNormalization', version=6)
2025-01-31 15:44:54,536 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='InstanceNormalization', version=1)
2025-01-31 15:44:54,536 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='IsInf', version=10)
2025-01-31 15:44:54,537 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='IsNaN', version=13)
2025-01-31 15:44:54,537 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='LayerNormalization', version=17)
2025-01-31 15:44:54,537 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Or', version=7)
2025-01-31 15:44:54,537 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Or', version=1)
2025-01-31 15:44:54,537 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='And', version=7)
2025-01-31 15:44:54,537 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='And', version=1)
2025-01-31 15:44:54,537 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Xor', version=7)
2025-01-31 15:44:54,537 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Xor', version=1)
2025-01-31 15:44:54,537 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Not', version=1)
2025-01-31 15:44:54,538 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='LRN', version=1)
2025-01-31 15:44:54,538 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='LRN', version=13)
2025-01-31 15:44:54,538 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='MatMul', version=13)
2025-01-31 15:44:54,538 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='MatMul', version=9)
2025-01-31 15:44:54,538 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='MatMul', version=1)
2025-01-31 15:44:54,538 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='MaxPool', version=8)
2025-01-31 15:44:54,538 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='MaxPool', version=10)
2025-01-31 15:44:54,538 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='MaxPool', version=11)
2025-01-31 15:44:54,539 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='MaxPool', version=12)
2025-01-31 15:44:54,539 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Mean', version=13)
2025-01-31 15:44:54,539 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Mean', version=8)
2025-01-31 15:44:54,539 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Max', version=13)
2025-01-31 15:44:54,539 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Max', version=12)
2025-01-31 15:44:54,539 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Max', version=8)
2025-01-31 15:44:54,539 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Min', version=13)
2025-01-31 15:44:54,539 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Min', version=12)
2025-01-31 15:44:54,540 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Min', version=8)
2025-01-31 15:44:54,540 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Mod', version=13)
2025-01-31 15:44:54,540 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Mod', version=10)
2025-01-31 15:44:54,540 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Neg', version=13)
2025-01-31 15:44:54,540 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Neg', version=6)
2025-01-31 15:44:54,540 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Neg', version=1)
2025-01-31 15:44:54,870 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='NonMaxSuppression', version=11)
2025-01-31 15:44:54,870 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='NonMaxSuppression', version=10)
2025-01-31 15:44:54,870 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='NonZero', version=13)
2025-01-31 15:44:54,870 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Pow', version=15)
2025-01-31 15:44:54,871 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Pow', version=13)
2025-01-31 15:44:54,871 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Pow', version=12)
2025-01-31 15:44:54,871 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Pow', version=7)
2025-01-31 15:44:54,871 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Pow', version=1)
2025-01-31 15:44:54,871 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sqrt', version=13)
2025-01-31 15:44:54,871 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sqrt', version=6)
2025-01-31 15:44:54,871 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sqrt', version=1)
2025-01-31 15:44:54,871 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Range', version=11)
2025-01-31 15:44:54,871 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Reciprocal', version=13)
2025-01-31 15:44:54,871 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Reciprocal', version=6)
2025-01-31 15:44:54,871 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Reciprocal', version=1)
2025-01-31 15:44:54,872 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceSumSquare', version=13)
2025-01-31 15:44:54,872 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceSumSquare', version=11)
2025-01-31 15:44:54,872 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceSumSquare', version=1)
2025-01-31 15:44:54,872 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceSum', version=11)
2025-01-31 15:44:54,872 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceSum', version=1)
2025-01-31 15:44:54,872 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceProd', version=13)
2025-01-31 15:44:54,872 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceProd', version=11)
2025-01-31 15:44:54,872 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceProd', version=1)
2025-01-31 15:44:54,872 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceMin', version=13)
2025-01-31 15:44:54,872 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceMin', version=12)
2025-01-31 15:44:54,872 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceMin', version=11)
2025-01-31 15:44:54,872 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceMin', version=1)
2025-01-31 15:44:54,872 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceMean', version=13)
2025-01-31 15:44:54,872 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceMean', version=11)
2025-01-31 15:44:54,872 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceMean', version=1)
2025-01-31 15:44:54,872 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceMax', version=13)
2025-01-31 15:44:54,872 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceMax', version=12)
2025-01-31 15:44:54,872 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceMax', version=11)
2025-01-31 15:44:54,872 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceMax', version=1)
2025-01-31 15:44:54,872 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceLogSumExp', version=13)
2025-01-31 15:44:54,872 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceLogSumExp', version=11)
2025-01-31 15:44:54,872 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceLogSumExp', version=1)
2025-01-31 15:44:54,872 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceLogSum', version=13)
2025-01-31 15:44:54,872 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceLogSum', version=11)
2025-01-31 15:44:54,872 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceLogSum', version=1)
2025-01-31 15:44:54,872 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceL2', version=13)
2025-01-31 15:44:54,872 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceL2', version=11)
2025-01-31 15:44:54,872 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceL2', version=1)
2025-01-31 15:44:54,872 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceL1', version=13)
2025-01-31 15:44:54,872 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceL1', version=11)
2025-01-31 15:44:54,872 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceL1', version=1)
2025-01-31 15:44:54,872 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceSum', version=13)
2025-01-31 15:44:54,873 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Reshape', version=14)
2025-01-31 15:44:54,873 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Reshape', version=13)
2025-01-31 15:44:54,873 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Reshape', version=5)
2025-01-31 15:44:54,873 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Resize', version=10)
2025-01-31 15:44:54,873 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Resize', version=13)
2025-01-31 15:44:54,873 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Resize', version=11)
2025-01-31 15:44:54,873 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='RoiAlign', version=10)
2025-01-31 15:44:54,873 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='RoiAlign', version=16)
2025-01-31 15:44:54,874 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Round', version=11)
2025-01-31 15:44:54,874 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Floor', version=6)
2025-01-31 15:44:54,874 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Floor', version=13)
2025-01-31 15:44:54,874 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Ceil', version=6)
2025-01-31 15:44:54,874 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Ceil', version=13)
2025-01-31 15:44:54,874 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ScatterND', version=16)
2025-01-31 15:44:54,874 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ScatterND', version=13)
2025-01-31 15:44:54,874 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ScatterND', version=11)
2025-01-31 15:44:54,874 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Shape', version=15)
2025-01-31 15:44:54,874 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Shape', version=13)
2025-01-31 15:44:54,874 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Shape', version=1)
2025-01-31 15:44:54,875 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Slice', version=9)
2025-01-31 15:44:54,875 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Slice', version=13)
2025-01-31 15:44:54,875 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Slice', version=11)
2025-01-31 15:44:54,875 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Slice', version=10)
2025-01-31 15:44:54,875 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Split', version=13)
2025-01-31 15:44:54,875 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Split', version=2)
2025-01-31 15:44:54,875 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Split', version=11)
2025-01-31 15:44:54,875 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Squeeze', version=11)
2025-01-31 15:44:54,875 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Squeeze', version=1)
2025-01-31 15:44:54,875 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Squeeze', version=21)
2025-01-31 15:44:54,875 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Squeeze', version=13)
2025-01-31 15:44:54,876 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sum', version=13)
2025-01-31 15:44:54,876 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sum', version=8)
2025-01-31 15:44:54,876 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Tile', version=13)
2025-01-31 15:44:54,876 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Tile', version=6)
2025-01-31 15:44:54,876 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='TopK', version=11)
2025-01-31 15:44:54,876 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='TopK', version=10)
2025-01-31 15:44:54,876 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='TopK', version=1)
2025-01-31 15:44:54,876 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Transpose', version=13)
2025-01-31 15:44:54,876 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Transpose', version=1)
2025-01-31 15:44:54,876 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Unsqueeze', version=11)
2025-01-31 15:44:54,876 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Unsqueeze', version=1)
2025-01-31 15:44:54,877 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Unsqueeze', version=13)
2025-01-31 15:44:54,877 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Where', version=16)
2025-01-31 15:44:54,877 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Where', version=9)
2025-01-31 15:44:55,287 - INFO - Load model duration: 00:00:01
2025-01-31 15:44:55,287 - INFO - Starting separation process for audio_file_path: yt_audios/La Feve - Comme des enfants
2025-01-31 15:44:55,387 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=1141)
           2	LOAD_FAST(arg=0, lineno=1144)
           4	LOAD_CONST(arg=1, lineno=1144)
           6	BINARY_SUBSCR(arg=None, lineno=1144)
           8	STORE_FAST(arg=3, lineno=1144)
          10	LOAD_FAST(arg=1, lineno=1145)
          12	UNARY_NEGATIVE(arg=None, lineno=1145)
          14	LOAD_FAST(arg=3, lineno=1145)
          16	DUP_TOP(arg=None, lineno=1145)
          18	ROT_THREE(arg=None, lineno=1145)
          20	COMPARE_OP(arg=1, lineno=1145)
          22	POP_JUMP_IF_FALSE(arg=17, lineno=1145)
          24	LOAD_FAST(arg=1, lineno=1145)
          26	COMPARE_OP(arg=1, lineno=1145)
          28	POP_JUMP_IF_FALSE(arg=21, lineno=1145)
          30	JUMP_FORWARD(arg=2, lineno=1145)
>         32	POP_TOP(arg=None, lineno=1145)
          34	JUMP_FORWARD(arg=2, lineno=1145)
>         36	LOAD_CONST(arg=1, lineno=1146)
          38	STORE_FAST(arg=3, lineno=1146)
>         40	LOAD_FAST(arg=0, lineno=1148)
          42	LOAD_CONST(arg=2, lineno=1148)
          44	BINARY_SUBSCR(arg=None, lineno=1148)
          46	STORE_FAST(arg=4, lineno=1148)
          48	LOAD_FAST(arg=1, lineno=1149)
          50	UNARY_NEGATIVE(arg=None, lineno=1149)
          52	LOAD_FAST(arg=4, lineno=1149)
          54	DUP_TOP(arg=None, lineno=1149)
          56	ROT_THREE(arg=None, lineno=1149)
          58	COMPARE_OP(arg=1, lineno=1149)
          60	POP_JUMP_IF_FALSE(arg=36, lineno=1149)
          62	LOAD_FAST(arg=1, lineno=1149)
          64	COMPARE_OP(arg=1, lineno=1149)
          66	POP_JUMP_IF_FALSE(arg=40, lineno=1149)
          68	JUMP_FORWARD(arg=2, lineno=1149)
>         70	POP_TOP(arg=None, lineno=1149)
          72	JUMP_FORWARD(arg=2, lineno=1149)
>         74	LOAD_CONST(arg=1, lineno=1150)
          76	STORE_FAST(arg=4, lineno=1150)
>         78	LOAD_FAST(arg=2, lineno=1152)
          80	POP_JUMP_IF_FALSE(arg=52, lineno=1152)
          82	LOAD_GLOBAL(arg=0, lineno=1153)
          84	LOAD_METHOD(arg=1, lineno=1153)
          86	LOAD_FAST(arg=3, lineno=1153)
          88	CALL_METHOD(arg=1, lineno=1153)
          90	LOAD_GLOBAL(arg=0, lineno=1153)
          92	LOAD_METHOD(arg=1, lineno=1153)
          94	LOAD_FAST(arg=4, lineno=1153)
          96	CALL_METHOD(arg=1, lineno=1153)
          98	COMPARE_OP(arg=3, lineno=1153)
         100	RETURN_VALUE(arg=None, lineno=1153)
>        102	LOAD_GLOBAL(arg=0, lineno=1155)
         104	LOAD_METHOD(arg=2, lineno=1155)
         106	LOAD_FAST(arg=3, lineno=1155)
         108	CALL_METHOD(arg=1, lineno=1155)
         110	LOAD_GLOBAL(arg=0, lineno=1155)
         112	LOAD_METHOD(arg=2, lineno=1155)
         114	LOAD_FAST(arg=4, lineno=1155)
         116	CALL_METHOD(arg=1, lineno=1155)
         118	COMPARE_OP(arg=3, lineno=1155)
         120	RETURN_VALUE(arg=None, lineno=1155)
2025-01-31 15:44:55,387 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:44:55,387 - DEBUG - stack: []
2025-01-31 15:44:55,387 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:44:55,387 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=1141)
2025-01-31 15:44:55,387 - DEBUG - stack []
2025-01-31 15:44:55,387 - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1144)
2025-01-31 15:44:55,387 - DEBUG - stack []
2025-01-31 15:44:55,387 - DEBUG - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1144)
2025-01-31 15:44:55,387 - DEBUG - stack ['$x2.0']
2025-01-31 15:44:55,387 - DEBUG - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=1144)
2025-01-31 15:44:55,387 - DEBUG - stack ['$x2.0', '$const4.1']
2025-01-31 15:44:55,387 - DEBUG - dispatch pc=8, inst=STORE_FAST(arg=3, lineno=1144)
2025-01-31 15:44:55,388 - DEBUG - stack ['$6binary_subscr.2']
2025-01-31 15:44:55,388 - DEBUG - dispatch pc=10, inst=LOAD_FAST(arg=1, lineno=1145)
2025-01-31 15:44:55,388 - DEBUG - stack []
2025-01-31 15:44:55,388 - DEBUG - dispatch pc=12, inst=UNARY_NEGATIVE(arg=None, lineno=1145)
2025-01-31 15:44:55,388 - DEBUG - stack ['$threshold10.3']
2025-01-31 15:44:55,388 - DEBUG - dispatch pc=14, inst=LOAD_FAST(arg=3, lineno=1145)
2025-01-31 15:44:55,388 - DEBUG - stack ['$12unary_negative.4']
2025-01-31 15:44:55,388 - DEBUG - dispatch pc=16, inst=DUP_TOP(arg=None, lineno=1145)
2025-01-31 15:44:55,388 - DEBUG - stack ['$12unary_negative.4', '$x014.5']
2025-01-31 15:44:55,388 - DEBUG - dispatch pc=18, inst=ROT_THREE(arg=None, lineno=1145)
2025-01-31 15:44:55,388 - DEBUG - stack ['$12unary_negative.4', '$x014.5', '$16dup_top.6']
2025-01-31 15:44:55,388 - DEBUG - dispatch pc=20, inst=COMPARE_OP(arg=1, lineno=1145)
2025-01-31 15:44:55,388 - DEBUG - stack ['$16dup_top.6', '$12unary_negative.4', '$x014.5']
2025-01-31 15:44:55,388 - DEBUG - dispatch pc=22, inst=POP_JUMP_IF_FALSE(arg=17, lineno=1145)
2025-01-31 15:44:55,388 - DEBUG - stack ['$16dup_top.6', '$20compare_op.7']
2025-01-31 15:44:55,388 - DEBUG - end state. edges=[Edge(pc=24, stack=('$16dup_top.6',), blockstack=(), npush=0), Edge(pc=32, stack=('$16dup_top.6',), blockstack=(), npush=0)]
2025-01-31 15:44:55,388 - DEBUG - pending: deque([State(pc_initial=24 nstack_initial=1), State(pc_initial=32 nstack_initial=1)])
2025-01-31 15:44:55,388 - DEBUG - stack: ['$phi24.0']
2025-01-31 15:44:55,388 - DEBUG - state.pc_initial: State(pc_initial=24 nstack_initial=1)
2025-01-31 15:44:55,388 - DEBUG - dispatch pc=24, inst=LOAD_FAST(arg=1, lineno=1145)
2025-01-31 15:44:55,388 - DEBUG - stack ['$phi24.0']
2025-01-31 15:44:55,388 - DEBUG - dispatch pc=26, inst=COMPARE_OP(arg=1, lineno=1145)
2025-01-31 15:44:55,388 - DEBUG - stack ['$phi24.0', '$threshold24.1']
2025-01-31 15:44:55,388 - DEBUG - dispatch pc=28, inst=POP_JUMP_IF_FALSE(arg=21, lineno=1145)
2025-01-31 15:44:55,388 - DEBUG - stack ['$26compare_op.2']
2025-01-31 15:44:55,388 - DEBUG - end state. edges=[Edge(pc=30, stack=(), blockstack=(), npush=0), Edge(pc=40, stack=(), blockstack=(), npush=0)]
2025-01-31 15:44:55,389 - DEBUG - pending: deque([State(pc_initial=32 nstack_initial=1), State(pc_initial=30 nstack_initial=0), State(pc_initial=40 nstack_initial=0)])
2025-01-31 15:44:55,389 - DEBUG - stack: ['$phi32.0']
2025-01-31 15:44:55,389 - DEBUG - state.pc_initial: State(pc_initial=32 nstack_initial=1)
2025-01-31 15:44:55,389 - DEBUG - dispatch pc=32, inst=POP_TOP(arg=None, lineno=1145)
2025-01-31 15:44:55,389 - DEBUG - stack ['$phi32.0']
2025-01-31 15:44:55,389 - DEBUG - dispatch pc=34, inst=JUMP_FORWARD(arg=2, lineno=1145)
2025-01-31 15:44:55,389 - DEBUG - stack []
2025-01-31 15:44:55,389 - DEBUG - end state. edges=[Edge(pc=40, stack=(), blockstack=(), npush=0)]
2025-01-31 15:44:55,389 - DEBUG - pending: deque([State(pc_initial=30 nstack_initial=0), State(pc_initial=40 nstack_initial=0), State(pc_initial=40 nstack_initial=0)])
2025-01-31 15:44:55,389 - DEBUG - stack: []
2025-01-31 15:44:55,389 - DEBUG - state.pc_initial: State(pc_initial=30 nstack_initial=0)
2025-01-31 15:44:55,389 - DEBUG - dispatch pc=30, inst=JUMP_FORWARD(arg=2, lineno=1145)
2025-01-31 15:44:55,389 - DEBUG - stack []
2025-01-31 15:44:55,389 - DEBUG - end state. edges=[Edge(pc=36, stack=(), blockstack=(), npush=0)]
2025-01-31 15:44:55,389 - DEBUG - pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=40 nstack_initial=0), State(pc_initial=36 nstack_initial=0)])
2025-01-31 15:44:55,389 - DEBUG - stack: []
2025-01-31 15:44:55,389 - DEBUG - state.pc_initial: State(pc_initial=40 nstack_initial=0)
2025-01-31 15:44:55,389 - DEBUG - dispatch pc=40, inst=LOAD_FAST(arg=0, lineno=1148)
2025-01-31 15:44:55,389 - DEBUG - stack []
2025-01-31 15:44:55,389 - DEBUG - dispatch pc=42, inst=LOAD_CONST(arg=2, lineno=1148)
2025-01-31 15:44:55,389 - DEBUG - stack ['$x40.0']
2025-01-31 15:44:55,389 - DEBUG - dispatch pc=44, inst=BINARY_SUBSCR(arg=None, lineno=1148)
2025-01-31 15:44:55,389 - DEBUG - stack ['$x40.0', '$const42.1']
2025-01-31 15:44:55,389 - DEBUG - dispatch pc=46, inst=STORE_FAST(arg=4, lineno=1148)
2025-01-31 15:44:55,389 - DEBUG - stack ['$44binary_subscr.2']
2025-01-31 15:44:55,389 - DEBUG - dispatch pc=48, inst=LOAD_FAST(arg=1, lineno=1149)
2025-01-31 15:44:55,389 - DEBUG - stack []
2025-01-31 15:44:55,389 - DEBUG - dispatch pc=50, inst=UNARY_NEGATIVE(arg=None, lineno=1149)
2025-01-31 15:44:55,389 - DEBUG - stack ['$threshold48.3']
2025-01-31 15:44:55,390 - DEBUG - dispatch pc=52, inst=LOAD_FAST(arg=4, lineno=1149)
2025-01-31 15:44:55,390 - DEBUG - stack ['$50unary_negative.4']
2025-01-31 15:44:55,390 - DEBUG - dispatch pc=54, inst=DUP_TOP(arg=None, lineno=1149)
2025-01-31 15:44:55,390 - DEBUG - stack ['$50unary_negative.4', '$x152.5']
2025-01-31 15:44:55,390 - DEBUG - dispatch pc=56, inst=ROT_THREE(arg=None, lineno=1149)
2025-01-31 15:44:55,390 - DEBUG - stack ['$50unary_negative.4', '$x152.5', '$54dup_top.6']
2025-01-31 15:44:55,390 - DEBUG - dispatch pc=58, inst=COMPARE_OP(arg=1, lineno=1149)
2025-01-31 15:44:55,390 - DEBUG - stack ['$54dup_top.6', '$50unary_negative.4', '$x152.5']
2025-01-31 15:44:55,390 - DEBUG - dispatch pc=60, inst=POP_JUMP_IF_FALSE(arg=36, lineno=1149)
2025-01-31 15:44:55,390 - DEBUG - stack ['$54dup_top.6', '$58compare_op.7']
2025-01-31 15:44:55,390 - DEBUG - end state. edges=[Edge(pc=62, stack=('$54dup_top.6',), blockstack=(), npush=0), Edge(pc=70, stack=('$54dup_top.6',), blockstack=(), npush=0)]
2025-01-31 15:44:55,390 - DEBUG - pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=36 nstack_initial=0), State(pc_initial=62 nstack_initial=1), State(pc_initial=70 nstack_initial=1)])
2025-01-31 15:44:55,390 - DEBUG - pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=62 nstack_initial=1), State(pc_initial=70 nstack_initial=1)])
2025-01-31 15:44:55,390 - DEBUG - stack: []
2025-01-31 15:44:55,390 - DEBUG - state.pc_initial: State(pc_initial=36 nstack_initial=0)
2025-01-31 15:44:55,390 - DEBUG - dispatch pc=36, inst=LOAD_CONST(arg=1, lineno=1146)
2025-01-31 15:44:55,390 - DEBUG - stack []
2025-01-31 15:44:55,390 - DEBUG - dispatch pc=38, inst=STORE_FAST(arg=3, lineno=1146)
2025-01-31 15:44:55,390 - DEBUG - stack ['$const36.0']
2025-01-31 15:44:55,390 - DEBUG - end state. edges=[Edge(pc=40, stack=(), blockstack=(), npush=0)]
2025-01-31 15:44:55,390 - DEBUG - pending: deque([State(pc_initial=62 nstack_initial=1), State(pc_initial=70 nstack_initial=1), State(pc_initial=40 nstack_initial=0)])
2025-01-31 15:44:55,390 - DEBUG - stack: ['$phi62.0']
2025-01-31 15:44:55,390 - DEBUG - state.pc_initial: State(pc_initial=62 nstack_initial=1)
2025-01-31 15:44:55,390 - DEBUG - dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=1149)
2025-01-31 15:44:55,390 - DEBUG - stack ['$phi62.0']
2025-01-31 15:44:55,390 - DEBUG - dispatch pc=64, inst=COMPARE_OP(arg=1, lineno=1149)
2025-01-31 15:44:55,390 - DEBUG - stack ['$phi62.0', '$threshold62.1']
2025-01-31 15:44:55,390 - DEBUG - dispatch pc=66, inst=POP_JUMP_IF_FALSE(arg=40, lineno=1149)
2025-01-31 15:44:55,391 - DEBUG - stack ['$64compare_op.2']
2025-01-31 15:44:55,391 - DEBUG - end state. edges=[Edge(pc=68, stack=(), blockstack=(), npush=0), Edge(pc=78, stack=(), blockstack=(), npush=0)]
2025-01-31 15:44:55,391 - DEBUG - pending: deque([State(pc_initial=70 nstack_initial=1), State(pc_initial=40 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2025-01-31 15:44:55,391 - DEBUG - stack: ['$phi70.0']
2025-01-31 15:44:55,391 - DEBUG - state.pc_initial: State(pc_initial=70 nstack_initial=1)
2025-01-31 15:44:55,391 - DEBUG - dispatch pc=70, inst=POP_TOP(arg=None, lineno=1149)
2025-01-31 15:44:55,391 - DEBUG - stack ['$phi70.0']
2025-01-31 15:44:55,391 - DEBUG - dispatch pc=72, inst=JUMP_FORWARD(arg=2, lineno=1149)
2025-01-31 15:44:55,391 - DEBUG - stack []
2025-01-31 15:44:55,391 - DEBUG - end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0)]
2025-01-31 15:44:55,391 - DEBUG - pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=78 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2025-01-31 15:44:55,391 - DEBUG - pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=78 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2025-01-31 15:44:55,391 - DEBUG - stack: []
2025-01-31 15:44:55,391 - DEBUG - state.pc_initial: State(pc_initial=68 nstack_initial=0)
2025-01-31 15:44:55,391 - DEBUG - dispatch pc=68, inst=JUMP_FORWARD(arg=2, lineno=1149)
2025-01-31 15:44:55,391 - DEBUG - stack []
2025-01-31 15:44:55,391 - DEBUG - end state. edges=[Edge(pc=74, stack=(), blockstack=(), npush=0)]
2025-01-31 15:44:55,391 - DEBUG - pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=78 nstack_initial=0), State(pc_initial=74 nstack_initial=0)])
2025-01-31 15:44:55,391 - DEBUG - stack: []
2025-01-31 15:44:55,391 - DEBUG - state.pc_initial: State(pc_initial=78 nstack_initial=0)
2025-01-31 15:44:55,391 - DEBUG - dispatch pc=78, inst=LOAD_FAST(arg=2, lineno=1152)
2025-01-31 15:44:55,391 - DEBUG - stack []
2025-01-31 15:44:55,391 - DEBUG - dispatch pc=80, inst=POP_JUMP_IF_FALSE(arg=52, lineno=1152)
2025-01-31 15:44:55,391 - DEBUG - stack ['$zero_pos78.0']
2025-01-31 15:44:55,391 - DEBUG - end state. edges=[Edge(pc=82, stack=(), blockstack=(), npush=0), Edge(pc=102, stack=(), blockstack=(), npush=0)]
2025-01-31 15:44:55,391 - DEBUG - pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=82 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
2025-01-31 15:44:55,391 - DEBUG - pending: deque([State(pc_initial=74 nstack_initial=0), State(pc_initial=82 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
2025-01-31 15:44:55,392 - DEBUG - stack: []
2025-01-31 15:44:55,392 - DEBUG - state.pc_initial: State(pc_initial=74 nstack_initial=0)
2025-01-31 15:44:55,392 - DEBUG - dispatch pc=74, inst=LOAD_CONST(arg=1, lineno=1150)
2025-01-31 15:44:55,392 - DEBUG - stack []
2025-01-31 15:44:55,392 - DEBUG - dispatch pc=76, inst=STORE_FAST(arg=4, lineno=1150)
2025-01-31 15:44:55,392 - DEBUG - stack ['$const74.0']
2025-01-31 15:44:55,392 - DEBUG - end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0)]
2025-01-31 15:44:55,392 - DEBUG - pending: deque([State(pc_initial=82 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2025-01-31 15:44:55,392 - DEBUG - stack: []
2025-01-31 15:44:55,392 - DEBUG - state.pc_initial: State(pc_initial=82 nstack_initial=0)
2025-01-31 15:44:55,392 - DEBUG - dispatch pc=82, inst=LOAD_GLOBAL(arg=0, lineno=1153)
2025-01-31 15:44:55,392 - DEBUG - stack []
2025-01-31 15:44:55,392 - DEBUG - dispatch pc=84, inst=LOAD_METHOD(arg=1, lineno=1153)
2025-01-31 15:44:55,392 - DEBUG - stack ['$82load_global.0']
2025-01-31 15:44:55,392 - DEBUG - dispatch pc=86, inst=LOAD_FAST(arg=3, lineno=1153)
2025-01-31 15:44:55,392 - DEBUG - stack ['$84load_method.1']
2025-01-31 15:44:55,392 - DEBUG - dispatch pc=88, inst=CALL_METHOD(arg=1, lineno=1153)
2025-01-31 15:44:55,392 - DEBUG - stack ['$84load_method.1', '$x086.2']
2025-01-31 15:44:55,392 - DEBUG - dispatch pc=90, inst=LOAD_GLOBAL(arg=0, lineno=1153)
2025-01-31 15:44:55,392 - DEBUG - stack ['$88call_method.3']
2025-01-31 15:44:55,392 - DEBUG - dispatch pc=92, inst=LOAD_METHOD(arg=1, lineno=1153)
2025-01-31 15:44:55,392 - DEBUG - stack ['$88call_method.3', '$90load_global.4']
2025-01-31 15:44:55,392 - DEBUG - dispatch pc=94, inst=LOAD_FAST(arg=4, lineno=1153)
2025-01-31 15:44:55,392 - DEBUG - stack ['$88call_method.3', '$92load_method.5']
2025-01-31 15:44:55,392 - DEBUG - dispatch pc=96, inst=CALL_METHOD(arg=1, lineno=1153)
2025-01-31 15:44:55,392 - DEBUG - stack ['$88call_method.3', '$92load_method.5', '$x194.6']
2025-01-31 15:44:55,392 - DEBUG - dispatch pc=98, inst=COMPARE_OP(arg=3, lineno=1153)
2025-01-31 15:44:55,392 - DEBUG - stack ['$88call_method.3', '$96call_method.7']
2025-01-31 15:44:55,393 - DEBUG - dispatch pc=100, inst=RETURN_VALUE(arg=None, lineno=1153)
2025-01-31 15:44:55,393 - DEBUG - stack ['$98compare_op.8']
2025-01-31 15:44:55,393 - DEBUG - end state. edges=[]
2025-01-31 15:44:55,393 - DEBUG - pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=78 nstack_initial=0)])
2025-01-31 15:44:55,393 - DEBUG - stack: []
2025-01-31 15:44:55,393 - DEBUG - state.pc_initial: State(pc_initial=102 nstack_initial=0)
2025-01-31 15:44:55,393 - DEBUG - dispatch pc=102, inst=LOAD_GLOBAL(arg=0, lineno=1155)
2025-01-31 15:44:55,393 - DEBUG - stack []
2025-01-31 15:44:55,393 - DEBUG - dispatch pc=104, inst=LOAD_METHOD(arg=2, lineno=1155)
2025-01-31 15:44:55,393 - DEBUG - stack ['$102load_global.0']
2025-01-31 15:44:55,393 - DEBUG - dispatch pc=106, inst=LOAD_FAST(arg=3, lineno=1155)
2025-01-31 15:44:55,393 - DEBUG - stack ['$104load_method.1']
2025-01-31 15:44:55,393 - DEBUG - dispatch pc=108, inst=CALL_METHOD(arg=1, lineno=1155)
2025-01-31 15:44:55,393 - DEBUG - stack ['$104load_method.1', '$x0106.2']
2025-01-31 15:44:55,393 - DEBUG - dispatch pc=110, inst=LOAD_GLOBAL(arg=0, lineno=1155)
2025-01-31 15:44:55,393 - DEBUG - stack ['$108call_method.3']
2025-01-31 15:44:55,393 - DEBUG - dispatch pc=112, inst=LOAD_METHOD(arg=2, lineno=1155)
2025-01-31 15:44:55,393 - DEBUG - stack ['$108call_method.3', '$110load_global.4']
2025-01-31 15:44:55,393 - DEBUG - dispatch pc=114, inst=LOAD_FAST(arg=4, lineno=1155)
2025-01-31 15:44:55,393 - DEBUG - stack ['$108call_method.3', '$112load_method.5']
2025-01-31 15:44:55,393 - DEBUG - dispatch pc=116, inst=CALL_METHOD(arg=1, lineno=1155)
2025-01-31 15:44:55,393 - DEBUG - stack ['$108call_method.3', '$112load_method.5', '$x1114.6']
2025-01-31 15:44:55,393 - DEBUG - dispatch pc=118, inst=COMPARE_OP(arg=3, lineno=1155)
2025-01-31 15:44:55,393 - DEBUG - stack ['$108call_method.3', '$116call_method.7']
2025-01-31 15:44:55,393 - DEBUG - dispatch pc=120, inst=RETURN_VALUE(arg=None, lineno=1155)
2025-01-31 15:44:55,393 - DEBUG - stack ['$118compare_op.8']
2025-01-31 15:44:55,393 - DEBUG - end state. edges=[]
2025-01-31 15:44:55,393 - DEBUG - pending: deque([State(pc_initial=78 nstack_initial=0)])
2025-01-31 15:44:55,394 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:44:55,394 - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=24 nstack_initial=1): {'$phi24.0'},
             State(pc_initial=30 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=1): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=40 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=1): {'$phi62.0'},
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=1): set(),
             State(pc_initial=74 nstack_initial=0): set(),
             State(pc_initial=78 nstack_initial=0): set(),
             State(pc_initial=82 nstack_initial=0): set(),
             State(pc_initial=102 nstack_initial=0): set()})
2025-01-31 15:44:55,394 - DEBUG - defmap: {'$phi24.0': State(pc_initial=0 nstack_initial=0),
 '$phi32.0': State(pc_initial=0 nstack_initial=0),
 '$phi62.0': State(pc_initial=40 nstack_initial=0),
 '$phi70.0': State(pc_initial=40 nstack_initial=0)}
2025-01-31 15:44:55,394 - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi24.0': {('$16dup_top.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.0': {('$16dup_top.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$54dup_top.6',
                           State(pc_initial=40 nstack_initial=0))},
             '$phi70.0': {('$54dup_top.6',
                           State(pc_initial=40 nstack_initial=0))}})
2025-01-31 15:44:55,394 - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi24.0': {('$16dup_top.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.0': {('$16dup_top.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$54dup_top.6',
                           State(pc_initial=40 nstack_initial=0))},
             '$phi70.0': {('$54dup_top.6',
                           State(pc_initial=40 nstack_initial=0))}})
2025-01-31 15:44:55,395 - DEBUG - keep phismap: {'$phi24.0': {('$16dup_top.6', State(pc_initial=0 nstack_initial=0))},
 '$phi62.0': {('$54dup_top.6', State(pc_initial=40 nstack_initial=0))}}
2025-01-31 15:44:55,395 - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi24.0': '$16dup_top.6'},
             State(pc_initial=40 nstack_initial=0): {'$phi62.0': '$54dup_top.6'}})
2025-01-31 15:44:55,395 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:44:55,395 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'value': '$6binary_subscr.2'}), (10, {'res': '$threshold10.3'}), (12, {'value': '$threshold10.3', 'res': '$12unary_negative.4'}), (14, {'res': '$x014.5'}), (16, {'orig': ['$x014.5'], 'duped': ['$16dup_top.6']}), (20, {'lhs': '$12unary_negative.4', 'rhs': '$x014.5', 'res': '$20compare_op.7'}), (22, {'pred': '$20compare_op.7'})), outgoing_phis={'$phi24.0': '$16dup_top.6'}, blockstack=(), active_try_block=None, outgoing_edgepushed={24: ('$16dup_top.6',), 32: ('$16dup_top.6',)})
2025-01-31 15:44:55,395 - DEBUG - block_infos State(pc_initial=24 nstack_initial=1):
AdaptBlockInfo(insts=((24, {'res': '$threshold24.1'}), (26, {'lhs': '$phi24.0', 'rhs': '$threshold24.1', 'res': '$26compare_op.2'}), (28, {'pred': '$26compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: (), 40: ()})
2025-01-31 15:44:55,395 - DEBUG - block_infos State(pc_initial=30 nstack_initial=0):
AdaptBlockInfo(insts=((30, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: ()})
2025-01-31 15:44:55,395 - DEBUG - block_infos State(pc_initial=32 nstack_initial=1):
AdaptBlockInfo(insts=((34, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: ()})
2025-01-31 15:44:55,395 - DEBUG - block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$const36.0'}), (38, {'value': '$const36.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: ()})
2025-01-31 15:44:55,395 - DEBUG - block_infos State(pc_initial=40 nstack_initial=0):
AdaptBlockInfo(insts=((40, {'res': '$x40.0'}), (42, {'res': '$const42.1'}), (44, {'index': '$const42.1', 'target': '$x40.0', 'res': '$44binary_subscr.2'}), (46, {'value': '$44binary_subscr.2'}), (48, {'res': '$threshold48.3'}), (50, {'value': '$threshold48.3', 'res': '$50unary_negative.4'}), (52, {'res': '$x152.5'}), (54, {'orig': ['$x152.5'], 'duped': ['$54dup_top.6']}), (58, {'lhs': '$50unary_negative.4', 'rhs': '$x152.5', 'res': '$58compare_op.7'}), (60, {'pred': '$58compare_op.7'})), outgoing_phis={'$phi62.0': '$54dup_top.6'}, blockstack=(), active_try_block=None, outgoing_edgepushed={62: ('$54dup_top.6',), 70: ('$54dup_top.6',)})
2025-01-31 15:44:55,395 - DEBUG - block_infos State(pc_initial=62 nstack_initial=1):
AdaptBlockInfo(insts=((62, {'res': '$threshold62.1'}), (64, {'lhs': '$phi62.0', 'rhs': '$threshold62.1', 'res': '$64compare_op.2'}), (66, {'pred': '$64compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={68: (), 78: ()})
2025-01-31 15:44:55,395 - DEBUG - block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={74: ()})
2025-01-31 15:44:55,395 - DEBUG - block_infos State(pc_initial=70 nstack_initial=1):
AdaptBlockInfo(insts=((72, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: ()})
2025-01-31 15:44:55,395 - DEBUG - block_infos State(pc_initial=74 nstack_initial=0):
AdaptBlockInfo(insts=((74, {'res': '$const74.0'}), (76, {'value': '$const74.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: ()})
2025-01-31 15:44:55,395 - DEBUG - block_infos State(pc_initial=78 nstack_initial=0):
AdaptBlockInfo(insts=((78, {'res': '$zero_pos78.0'}), (80, {'pred': '$zero_pos78.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={82: (), 102: ()})
2025-01-31 15:44:55,395 - DEBUG - block_infos State(pc_initial=82 nstack_initial=0):
AdaptBlockInfo(insts=((82, {'res': '$82load_global.0'}), (84, {'item': '$82load_global.0', 'res': '$84load_method.1'}), (86, {'res': '$x086.2'}), (88, {'func': '$84load_method.1', 'args': ['$x086.2'], 'res': '$88call_method.3'}), (90, {'res': '$90load_global.4'}), (92, {'item': '$90load_global.4', 'res': '$92load_method.5'}), (94, {'res': '$x194.6'}), (96, {'func': '$92load_method.5', 'args': ['$x194.6'], 'res': '$96call_method.7'}), (98, {'lhs': '$88call_method.3', 'rhs': '$96call_method.7', 'res': '$98compare_op.8'}), (100, {'retval': '$98compare_op.8', 'castval': '$100return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:44:55,396 - DEBUG - block_infos State(pc_initial=102 nstack_initial=0):
AdaptBlockInfo(insts=((102, {'res': '$102load_global.0'}), (104, {'item': '$102load_global.0', 'res': '$104load_method.1'}), (106, {'res': '$x0106.2'}), (108, {'func': '$104load_method.1', 'args': ['$x0106.2'], 'res': '$108call_method.3'}), (110, {'res': '$110load_global.4'}), (112, {'item': '$110load_global.4', 'res': '$112load_method.5'}), (114, {'res': '$x1114.6'}), (116, {'func': '$112load_method.5', 'args': ['$x1114.6'], 'res': '$116call_method.7'}), (118, {'lhs': '$108call_method.3', 'rhs': '$116call_method.7', 'res': '$118compare_op.8'}), (120, {'retval': '$118compare_op.8', 'castval': '$120return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:44:55,397 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    threshold = arg(1, name=threshold)       ['threshold']
    zero_pos = arg(2, name=zero_pos)         ['zero_pos']
    $const4.1 = const(int, 0)                ['$const4.1']
    x0 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$const4.1', 'x', 'x0']
    $12unary_negative.4 = unary(fn=<built-in function neg>, value=threshold) ['$12unary_negative.4', 'threshold']
    $20compare_op.7 = $12unary_negative.4 <= x0 ['$12unary_negative.4', '$20compare_op.7', 'x0']
    bool22 = global(bool: <class 'bool'>)    ['bool22']
    $22pred = call bool22($20compare_op.7, func=bool22, args=(Var($20compare_op.7, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None) ['$20compare_op.7', '$22pred', 'bool22']
    $phi24.0 = x0                            ['$phi24.0', 'x0']
    branch $22pred, 24, 32                   ['$22pred']
label 24:
    $26compare_op.2 = $phi24.0 <= threshold  ['$26compare_op.2', '$phi24.0', 'threshold']
    bool28 = global(bool: <class 'bool'>)    ['bool28']
    $28pred = call bool28($26compare_op.2, func=bool28, args=(Var($26compare_op.2, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None) ['$26compare_op.2', '$28pred', 'bool28']
    branch $28pred, 30, 40                   ['$28pred']
label 30:
    jump 36                                  []
label 32:
    jump 40                                  []
label 36:
    x0 = const(int, 0)                       ['x0']
    jump 40                                  []
label 40:
    $const42.1 = const(int, -1)              ['$const42.1']
    x1 = getitem(value=x, index=$const42.1, fn=<built-in function getitem>) ['$const42.1', 'x', 'x1']
    $50unary_negative.4 = unary(fn=<built-in function neg>, value=threshold) ['$50unary_negative.4', 'threshold']
    $58compare_op.7 = $50unary_negative.4 <= x1 ['$50unary_negative.4', '$58compare_op.7', 'x1']
    bool60 = global(bool: <class 'bool'>)    ['bool60']
    $60pred = call bool60($58compare_op.7, func=bool60, args=(Var($58compare_op.7, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None) ['$58compare_op.7', '$60pred', 'bool60']
    $phi62.0 = x1                            ['$phi62.0', 'x1']
    branch $60pred, 62, 70                   ['$60pred']
label 62:
    $64compare_op.2 = $phi62.0 <= threshold  ['$64compare_op.2', '$phi62.0', 'threshold']
    bool66 = global(bool: <class 'bool'>)    ['bool66']
    $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, audio.py:1149),), kws=(), vararg=None, varkwarg=None, target=None) ['$64compare_op.2', '$66pred', 'bool66']
    branch $66pred, 68, 78                   ['$66pred']
label 68:
    jump 74                                  []
label 70:
    jump 78                                  []
label 74:
    x1 = const(int, 0)                       ['x1']
    jump 78                                  []
label 78:
    bool80 = global(bool: <class 'bool'>)    ['bool80']
    $80pred = call bool80(zero_pos, func=bool80, args=(Var(zero_pos, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None) ['$80pred', 'bool80', 'zero_pos']
    branch $80pred, 82, 102                  ['$80pred']
label 82:
    $82load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>) ['$82load_global.0']
    $84load_method.1 = getattr(value=$82load_global.0, attr=signbit) ['$82load_global.0', '$84load_method.1']
    $88call_method.3 = call $84load_method.1(x0, func=$84load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None) ['$84load_method.1', '$88call_method.3', 'x0']
    $90load_global.4 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>) ['$90load_global.4']
    $92load_method.5 = getattr(value=$90load_global.4, attr=signbit) ['$90load_global.4', '$92load_method.5']
    $96call_method.7 = call $92load_method.5(x1, func=$92load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None) ['$92load_method.5', '$96call_method.7', 'x1']
    $98compare_op.8 = $88call_method.3 != $96call_method.7 ['$88call_method.3', '$96call_method.7', '$98compare_op.8']
    $100return_value.9 = cast(value=$98compare_op.8) ['$100return_value.9', '$98compare_op.8']
    return $100return_value.9                ['$100return_value.9']
label 102:
    $102load_global.0 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>) ['$102load_global.0']
    $104load_method.1 = getattr(value=$102load_global.0, attr=sign) ['$102load_global.0', '$104load_method.1']
    $108call_method.3 = call $104load_method.1(x0, func=$104load_method.1, args=[Var(x0, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None) ['$104load_method.1', '$108call_method.3', 'x0']
    $110load_global.4 = global(np: <module 'numpy' from '/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/numpy/__init__.py'>) ['$110load_global.4']
    $112load_method.5 = getattr(value=$110load_global.4, attr=sign) ['$110load_global.4', '$112load_method.5']
    $116call_method.7 = call $112load_method.5(x1, func=$112load_method.5, args=[Var(x1, audio.py:1148)], kws=(), vararg=None, varkwarg=None, target=None) ['$112load_method.5', '$116call_method.7', 'x1']
    $118compare_op.8 = $108call_method.3 != $116call_method.7 ['$108call_method.3', '$116call_method.7', '$118compare_op.8']
    $120return_value.9 = cast(value=$118compare_op.8) ['$118compare_op.8', '$120return_value.9']
    return $120return_value.9                ['$120return_value.9']

2025-01-31 15:44:55,666 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=1039)
           2	LOAD_FAST(arg=0, lineno=1042)
           4	LOAD_CONST(arg=1, lineno=1042)
           6	BINARY_SUBSCR(arg=None, lineno=1042)
           8	LOAD_FAST(arg=0, lineno=1042)
          10	LOAD_CONST(arg=2, lineno=1042)
          12	BINARY_SUBSCR(arg=None, lineno=1042)
          14	COMPARE_OP(arg=4, lineno=1042)
          16	LOAD_FAST(arg=0, lineno=1042)
          18	LOAD_CONST(arg=1, lineno=1042)
          20	BINARY_SUBSCR(arg=None, lineno=1042)
          22	LOAD_FAST(arg=0, lineno=1042)
          24	LOAD_CONST(arg=3, lineno=1042)
          26	BINARY_SUBSCR(arg=None, lineno=1042)
          28	COMPARE_OP(arg=5, lineno=1042)
          30	BINARY_AND(arg=None, lineno=1042)
          32	RETURN_VALUE(arg=None, lineno=1042)
2025-01-31 15:44:55,666 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:44:55,666 - DEBUG - stack: []
2025-01-31 15:44:55,666 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:44:55,666 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=1039)
2025-01-31 15:44:55,666 - DEBUG - stack []
2025-01-31 15:44:55,667 - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1042)
2025-01-31 15:44:55,667 - DEBUG - stack []
2025-01-31 15:44:55,667 - DEBUG - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1042)
2025-01-31 15:44:55,667 - DEBUG - stack ['$x2.0']
2025-01-31 15:44:55,667 - DEBUG - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=1042)
2025-01-31 15:44:55,667 - DEBUG - stack ['$x2.0', '$const4.1']
2025-01-31 15:44:55,667 - DEBUG - dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=1042)
2025-01-31 15:44:55,667 - DEBUG - stack ['$6binary_subscr.2']
2025-01-31 15:44:55,667 - DEBUG - dispatch pc=10, inst=LOAD_CONST(arg=2, lineno=1042)
2025-01-31 15:44:55,667 - DEBUG - stack ['$6binary_subscr.2', '$x8.3']
2025-01-31 15:44:55,667 - DEBUG - dispatch pc=12, inst=BINARY_SUBSCR(arg=None, lineno=1042)
2025-01-31 15:44:55,667 - DEBUG - stack ['$6binary_subscr.2', '$x8.3', '$const10.4']
2025-01-31 15:44:55,667 - DEBUG - dispatch pc=14, inst=COMPARE_OP(arg=4, lineno=1042)
2025-01-31 15:44:55,667 - DEBUG - stack ['$6binary_subscr.2', '$12binary_subscr.5']
2025-01-31 15:44:55,667 - DEBUG - dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=1042)
2025-01-31 15:44:55,667 - DEBUG - stack ['$14compare_op.6']
2025-01-31 15:44:55,667 - DEBUG - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1042)
2025-01-31 15:44:55,667 - DEBUG - stack ['$14compare_op.6', '$x16.7']
2025-01-31 15:44:55,667 - DEBUG - dispatch pc=20, inst=BINARY_SUBSCR(arg=None, lineno=1042)
2025-01-31 15:44:55,667 - DEBUG - stack ['$14compare_op.6', '$x16.7', '$const18.8']
2025-01-31 15:44:55,667 - DEBUG - dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=1042)
2025-01-31 15:44:55,667 - DEBUG - stack ['$14compare_op.6', '$20binary_subscr.9']
2025-01-31 15:44:55,667 - DEBUG - dispatch pc=24, inst=LOAD_CONST(arg=3, lineno=1042)
2025-01-31 15:44:55,667 - DEBUG - stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10']
2025-01-31 15:44:55,667 - DEBUG - dispatch pc=26, inst=BINARY_SUBSCR(arg=None, lineno=1042)
2025-01-31 15:44:55,667 - DEBUG - stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10', '$const24.11']
2025-01-31 15:44:55,667 - DEBUG - dispatch pc=28, inst=COMPARE_OP(arg=5, lineno=1042)
2025-01-31 15:44:55,667 - DEBUG - stack ['$14compare_op.6', '$20binary_subscr.9', '$26binary_subscr.12']
2025-01-31 15:44:55,668 - DEBUG - dispatch pc=30, inst=BINARY_AND(arg=None, lineno=1042)
2025-01-31 15:44:55,668 - DEBUG - stack ['$14compare_op.6', '$28compare_op.13']
2025-01-31 15:44:55,668 - DEBUG - dispatch pc=32, inst=RETURN_VALUE(arg=None, lineno=1042)
2025-01-31 15:44:55,668 - DEBUG - stack ['$30binary_and.14']
2025-01-31 15:44:55,668 - DEBUG - end state. edges=[]
2025-01-31 15:44:55,668 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:44:55,668 - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-01-31 15:44:55,668 - DEBUG - defmap: {}
2025-01-31 15:44:55,668 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:44:55,668 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:44:55,668 - DEBUG - keep phismap: {}
2025-01-31 15:44:55,668 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-01-31 15:44:55,668 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:44:55,668 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'res': '$x8.3'}), (10, {'res': '$const10.4'}), (12, {'index': '$const10.4', 'target': '$x8.3', 'res': '$12binary_subscr.5'}), (14, {'lhs': '$6binary_subscr.2', 'rhs': '$12binary_subscr.5', 'res': '$14compare_op.6'}), (16, {'res': '$x16.7'}), (18, {'res': '$const18.8'}), (20, {'index': '$const18.8', 'target': '$x16.7', 'res': '$20binary_subscr.9'}), (22, {'res': '$x22.10'}), (24, {'res': '$const24.11'}), (26, {'index': '$const24.11', 'target': '$x22.10', 'res': '$26binary_subscr.12'}), (28, {'lhs': '$20binary_subscr.9', 'rhs': '$26binary_subscr.12', 'res': '$28compare_op.13'}), (30, {'lhs': '$14compare_op.6', 'rhs': '$28compare_op.13', 'res': '$30binary_and.14'}), (32, {'retval': '$30binary_and.14', 'castval': '$32return_value.15'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:44:55,669 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6binary_subscr.2 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$6binary_subscr.2', '$const4.1', 'x']
    $const10.4 = const(int, -1)              ['$const10.4']
    $12binary_subscr.5 = getitem(value=x, index=$const10.4, fn=<built-in function getitem>) ['$12binary_subscr.5', '$const10.4', 'x']
    $14compare_op.6 = $6binary_subscr.2 > $12binary_subscr.5 ['$12binary_subscr.5', '$14compare_op.6', '$6binary_subscr.2']
    $const18.8 = const(int, 0)               ['$const18.8']
    $20binary_subscr.9 = getitem(value=x, index=$const18.8, fn=<built-in function getitem>) ['$20binary_subscr.9', '$const18.8', 'x']
    $const24.11 = const(int, 1)              ['$const24.11']
    $26binary_subscr.12 = getitem(value=x, index=$const24.11, fn=<built-in function getitem>) ['$26binary_subscr.12', '$const24.11', 'x']
    $28compare_op.13 = $20binary_subscr.9 >= $26binary_subscr.12 ['$20binary_subscr.9', '$26binary_subscr.12', '$28compare_op.13']
    $30binary_and.14 = $14compare_op.6 & $28compare_op.13 ['$14compare_op.6', '$28compare_op.13', '$30binary_and.14']
    $32return_value.15 = cast(value=$30binary_and.14) ['$30binary_and.14', '$32return_value.15']
    return $32return_value.15                ['$32return_value.15']

2025-01-31 15:44:55,669 - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=1045)
           2	LOAD_FAST(arg=0, lineno=1048)
           4	LOAD_CONST(arg=1, lineno=1048)
           6	BINARY_SUBSCR(arg=None, lineno=1048)
           8	LOAD_FAST(arg=0, lineno=1048)
          10	LOAD_CONST(arg=2, lineno=1048)
          12	BINARY_SUBSCR(arg=None, lineno=1048)
          14	COMPARE_OP(arg=0, lineno=1048)
          16	LOAD_FAST(arg=0, lineno=1048)
          18	LOAD_CONST(arg=1, lineno=1048)
          20	BINARY_SUBSCR(arg=None, lineno=1048)
          22	LOAD_FAST(arg=0, lineno=1048)
          24	LOAD_CONST(arg=3, lineno=1048)
          26	BINARY_SUBSCR(arg=None, lineno=1048)
          28	COMPARE_OP(arg=1, lineno=1048)
          30	BINARY_AND(arg=None, lineno=1048)
          32	RETURN_VALUE(arg=None, lineno=1048)
2025-01-31 15:44:55,669 - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-01-31 15:44:55,669 - DEBUG - stack: []
2025-01-31 15:44:55,669 - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-01-31 15:44:55,669 - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=1045)
2025-01-31 15:44:55,669 - DEBUG - stack []
2025-01-31 15:44:55,669 - DEBUG - dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1048)
2025-01-31 15:44:55,669 - DEBUG - stack []
2025-01-31 15:44:55,669 - DEBUG - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1048)
2025-01-31 15:44:55,670 - DEBUG - stack ['$x2.0']
2025-01-31 15:44:55,670 - DEBUG - dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=1048)
2025-01-31 15:44:55,670 - DEBUG - stack ['$x2.0', '$const4.1']
2025-01-31 15:44:55,670 - DEBUG - dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=1048)
2025-01-31 15:44:55,670 - DEBUG - stack ['$6binary_subscr.2']
2025-01-31 15:44:55,670 - DEBUG - dispatch pc=10, inst=LOAD_CONST(arg=2, lineno=1048)
2025-01-31 15:44:55,670 - DEBUG - stack ['$6binary_subscr.2', '$x8.3']
2025-01-31 15:44:55,670 - DEBUG - dispatch pc=12, inst=BINARY_SUBSCR(arg=None, lineno=1048)
2025-01-31 15:44:55,670 - DEBUG - stack ['$6binary_subscr.2', '$x8.3', '$const10.4']
2025-01-31 15:44:55,670 - DEBUG - dispatch pc=14, inst=COMPARE_OP(arg=0, lineno=1048)
2025-01-31 15:44:55,670 - DEBUG - stack ['$6binary_subscr.2', '$12binary_subscr.5']
2025-01-31 15:44:55,670 - DEBUG - dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=1048)
2025-01-31 15:44:55,670 - DEBUG - stack ['$14compare_op.6']
2025-01-31 15:44:55,670 - DEBUG - dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=1048)
2025-01-31 15:44:55,670 - DEBUG - stack ['$14compare_op.6', '$x16.7']
2025-01-31 15:44:55,670 - DEBUG - dispatch pc=20, inst=BINARY_SUBSCR(arg=None, lineno=1048)
2025-01-31 15:44:55,670 - DEBUG - stack ['$14compare_op.6', '$x16.7', '$const18.8']
2025-01-31 15:44:55,670 - DEBUG - dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=1048)
2025-01-31 15:44:55,670 - DEBUG - stack ['$14compare_op.6', '$20binary_subscr.9']
2025-01-31 15:44:55,670 - DEBUG - dispatch pc=24, inst=LOAD_CONST(arg=3, lineno=1048)
2025-01-31 15:44:55,670 - DEBUG - stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10']
2025-01-31 15:44:55,670 - DEBUG - dispatch pc=26, inst=BINARY_SUBSCR(arg=None, lineno=1048)
2025-01-31 15:44:55,670 - DEBUG - stack ['$14compare_op.6', '$20binary_subscr.9', '$x22.10', '$const24.11']
2025-01-31 15:44:55,670 - DEBUG - dispatch pc=28, inst=COMPARE_OP(arg=1, lineno=1048)
2025-01-31 15:44:55,670 - DEBUG - stack ['$14compare_op.6', '$20binary_subscr.9', '$26binary_subscr.12']
2025-01-31 15:44:55,670 - DEBUG - dispatch pc=30, inst=BINARY_AND(arg=None, lineno=1048)
2025-01-31 15:44:55,670 - DEBUG - stack ['$14compare_op.6', '$28compare_op.13']
2025-01-31 15:44:55,670 - DEBUG - dispatch pc=32, inst=RETURN_VALUE(arg=None, lineno=1048)
2025-01-31 15:44:55,671 - DEBUG - stack ['$30binary_and.14']
2025-01-31 15:44:55,671 - DEBUG - end state. edges=[]
2025-01-31 15:44:55,671 - DEBUG - -------------------------Prune PHIs-------------------------
2025-01-31 15:44:55,671 - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-01-31 15:44:55,671 - DEBUG - defmap: {}
2025-01-31 15:44:55,671 - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:44:55,671 - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-01-31 15:44:55,671 - DEBUG - keep phismap: {}
2025-01-31 15:44:55,671 - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-01-31 15:44:55,671 - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-01-31 15:44:55,671 - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$x2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$x2.0', 'res': '$6binary_subscr.2'}), (8, {'res': '$x8.3'}), (10, {'res': '$const10.4'}), (12, {'index': '$const10.4', 'target': '$x8.3', 'res': '$12binary_subscr.5'}), (14, {'lhs': '$6binary_subscr.2', 'rhs': '$12binary_subscr.5', 'res': '$14compare_op.6'}), (16, {'res': '$x16.7'}), (18, {'res': '$const18.8'}), (20, {'index': '$const18.8', 'target': '$x16.7', 'res': '$20binary_subscr.9'}), (22, {'res': '$x22.10'}), (24, {'res': '$const24.11'}), (26, {'index': '$const24.11', 'target': '$x22.10', 'res': '$26binary_subscr.12'}), (28, {'lhs': '$20binary_subscr.9', 'rhs': '$26binary_subscr.12', 'res': '$28compare_op.13'}), (30, {'lhs': '$14compare_op.6', 'rhs': '$28compare_op.13', 'res': '$30binary_and.14'}), (32, {'retval': '$30binary_and.14', 'castval': '$32return_value.15'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-01-31 15:44:55,671 - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6binary_subscr.2 = getitem(value=x, index=$const4.1, fn=<built-in function getitem>) ['$6binary_subscr.2', '$const4.1', 'x']
    $const10.4 = const(int, -1)              ['$const10.4']
    $12binary_subscr.5 = getitem(value=x, index=$const10.4, fn=<built-in function getitem>) ['$12binary_subscr.5', '$const10.4', 'x']
    $14compare_op.6 = $6binary_subscr.2 < $12binary_subscr.5 ['$12binary_subscr.5', '$14compare_op.6', '$6binary_subscr.2']
    $const18.8 = const(int, 0)               ['$const18.8']
    $20binary_subscr.9 = getitem(value=x, index=$const18.8, fn=<built-in function getitem>) ['$20binary_subscr.9', '$const18.8', 'x']
    $const24.11 = const(int, 1)              ['$const24.11']
    $26binary_subscr.12 = getitem(value=x, index=$const24.11, fn=<built-in function getitem>) ['$26binary_subscr.12', '$const24.11', 'x']
    $28compare_op.13 = $20binary_subscr.9 <= $26binary_subscr.12 ['$20binary_subscr.9', '$26binary_subscr.12', '$28compare_op.13']
    $30binary_and.14 = $14compare_op.6 & $28compare_op.13 ['$14compare_op.6', '$28compare_op.13', '$30binary_and.14']
    $32return_value.15 = cast(value=$30binary_and.14) ['$30binary_and.14', '$32return_value.15']
    return $32return_value.15                ['$32return_value.15']

2025-01-31 15:46:18,166 - INFO - Saving Vocals stem to La Feve - Comme des enfants_(Vocals)_UVR-MDX-NET-Inst_HQ_3.wav...
2025-01-31 15:46:18,215 - INFO - Audio duration is 0.04 hours (128.52 seconds).
2025-01-31 15:46:18,215 - INFO - Using pydub for writing.
2025-01-31 15:46:18,269 - INFO - Saving Instrumental stem to La Feve - Comme des enfants_(Instrumental)_UVR-MDX-NET-Inst_HQ_3.wav...
2025-01-31 15:46:18,269 - INFO - Audio duration is 0.04 hours (128.52 seconds).
2025-01-31 15:46:18,269 - INFO - Using pydub for writing.
2025-01-31 15:46:18,394 - INFO - Clearing input audio file paths, sources and stems...
2025-01-31 15:46:18,395 - INFO - Separation duration: 00:01:23
2025-01-31 15:46:18,473 - INFO - Split audio into ./split_audios/vocal_La Feve - Comme des enfants.wav and ./split_audios/instrument_La Feve - Comme des enfants.wav
2025-01-31 15:46:18,474 - INFO - Changing voice with model: logs/model/MickeyMouse
2025-01-31 15:46:18,545 - DEBUG - Loading FFmpeg6
2025-01-31 15:46:18,561 - DEBUG - Failed to load FFmpeg6 extension.
Traceback (most recent call last):
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/torio/_extension/utils.py", line 116, in _find_ffmpeg_extension
    ext = _find_versionsed_ffmpeg_extension(ffmpeg_ver)
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/torio/_extension/utils.py", line 108, in _find_versionsed_ffmpeg_extension
    _load_lib(lib)
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/torio/_extension/utils.py", line 94, in _load_lib
    torch.ops.load_library(path)
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/torch/_ops.py", line 1032, in load_library
    ctypes.CDLL(path)
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/ctypes/__init__.py", line 374, in __init__
    self._handle = _dlopen(self._name, mode)
OSError: /home/strain/miniconda3/envs/applio/bin/../lib/libstdc++.so.6: version `GLIBCXX_3.4.32' not found (required by /lib/x86_64-linux-gnu/libavfilter.so.9)
2025-01-31 15:46:18,562 - DEBUG - Loading FFmpeg5
2025-01-31 15:46:18,563 - DEBUG - Failed to load FFmpeg5 extension.
Traceback (most recent call last):
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/torio/_extension/utils.py", line 116, in _find_ffmpeg_extension
    ext = _find_versionsed_ffmpeg_extension(ffmpeg_ver)
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/torio/_extension/utils.py", line 108, in _find_versionsed_ffmpeg_extension
    _load_lib(lib)
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/torio/_extension/utils.py", line 94, in _load_lib
    torch.ops.load_library(path)
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/torch/_ops.py", line 1032, in load_library
    ctypes.CDLL(path)
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/ctypes/__init__.py", line 374, in __init__
    self._handle = _dlopen(self._name, mode)
OSError: libavutil.so.57: cannot open shared object file: No such file or directory
2025-01-31 15:46:18,563 - DEBUG - Loading FFmpeg4
2025-01-31 15:46:18,565 - DEBUG - Failed to load FFmpeg4 extension.
Traceback (most recent call last):
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/torio/_extension/utils.py", line 116, in _find_ffmpeg_extension
    ext = _find_versionsed_ffmpeg_extension(ffmpeg_ver)
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/torio/_extension/utils.py", line 108, in _find_versionsed_ffmpeg_extension
    _load_lib(lib)
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/torio/_extension/utils.py", line 94, in _load_lib
    torch.ops.load_library(path)
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/torch/_ops.py", line 1032, in load_library
    ctypes.CDLL(path)
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/ctypes/__init__.py", line 374, in __init__
    self._handle = _dlopen(self._name, mode)
OSError: libavutil.so.56: cannot open shared object file: No such file or directory
2025-01-31 15:46:18,565 - DEBUG - Loading FFmpeg
2025-01-31 15:46:18,565 - DEBUG - Failed to load FFmpeg extension.
Traceback (most recent call last):
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/torio/_extension/utils.py", line 116, in _find_ffmpeg_extension
    ext = _find_versionsed_ffmpeg_extension(ffmpeg_ver)
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/torio/_extension/utils.py", line 106, in _find_versionsed_ffmpeg_extension
    raise RuntimeError(f"FFmpeg{version} extension is not available.")
RuntimeError: FFmpeg extension is not available.
2025-01-31 15:49:51,238 - INFO - Inference completed for: La Feve - Comme des enfants
2025-01-31 15:49:51,238 - INFO - Mixing final audio
2025-01-31 15:49:51,286 - ERROR - An error occurred during processing
Traceback (most recent call last):
  File "/home/strain/deepVoice/Applio/server.py", line 205, in home
    mix_wav_files(
  File "/home/strain/deepVoice/Applio/join.py", line 6, in mix_wav_files
    audio2 = AudioSegment.from_wav(file2_path)
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/pydub/audio_segment.py", line 808, in from_wav
    return cls.from_file(file, 'wav', parameters=parameters)
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/pydub/audio_segment.py", line 651, in from_file
    file, close_file = _fd_or_path_or_tempfile(file, 'rb', tempfile=False)
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/pydub/utils.py", line 60, in _fd_or_path_or_tempfile
    fd = open(fd, mode=mode)
FileNotFoundError: [Errno 2] No such file or directory: 'outputs/La Feve - Comme des enfants_processed.wav'
2025-01-31 15:49:51,409 - INFO - 127.0.0.1 - - [31/Jan/2025 15:49:51] "POST / HTTP/1.1" 200 -
2025-01-31 15:51:21,015 - INFO - Retrieved models: ['Ninho', 'Damso', 'Vald600', 'CharlesAznavour', 'MarineLepen', 'JUL_Interview', 'LaFeve', 'Nekfeu250', 'MickeyMouse', 'SCHInterview', 'SCH1000', 'NicolasSarkozy_v2_500e', 'Maes_600', 'KAARIS', 'ClaudeFrancoisV2', 'Josman', 'SoLaLune', 'JohnnyHallyday800', 'Titeuf600', 'Kylian-Mbapp√©', 'Lacrim', 'OrelsanV1', 'Booba', 'EricCartman', 'kaarism', 'Ademo', 'rick', 'Bassem', 'Wejdene_310Epochs', 'Laylow1000', 'PhilippeEtchebest', 'EricZemmour', 'FreezeCorleone', 'macron', 'gazo700', 'Angele', 'AlphaWann', 'Laylow', 'hamzaai500v2', 'homerSimpson']
2025-01-31 15:51:21,017 - INFO - Received YouTube URL for processing: https://www.youtube.com/watch?v=Jq-LrzeABss
2025-01-31 15:51:21,017 - DEBUG - matched regex search: (?:v=|\/)([0-9A-Za-z_-]{11}).*
2025-01-31 15:51:21,653 - DEBUG - finding initial function name
2025-01-31 15:51:21,654 - DEBUG - Pattern failed: ytplayer\.config\s*=\s*
2025-01-31 15:51:21,654 - DEBUG - Could not parse object.
2025-01-31 15:51:21,675 - DEBUG - finished regex search, matched: (/s/player/[\w\d]+/[\w\d_/.]+/base\.js)
2025-01-31 15:51:21,676 - DEBUG - matched regex search: signatureTimestamp:(\d*)
2025-01-31 15:51:21,676 - DEBUG - The WEB client requires poToken to obtain functional streams
2025-01-31 15:51:21,676 - DEBUG - Automatically generating poToken
2025-01-31 15:51:21,676 - DEBUG - Looking for visitorData in initial_data
2025-01-31 15:51:21,751 - DEBUG - matched regex search: visitor_data[',\"\s]+value['\"]:\s?['\"]([a-zA-Z0-9_%-]+)['\"]
2025-01-31 15:51:21,751 - DEBUG - VisitorData obtained successfully
2025-01-31 15:51:21,751 - DEBUG - Invoking botGuard
2025-01-31 15:51:24,092 - DEBUG - PoToken generated successfully
2025-01-31 15:51:24,499 - DEBUG - Found title in vid_info
2025-01-31 15:51:24,500 - DEBUG - applying descrambler
2025-01-31 15:51:24,500 - DEBUG - Applying poToken
2025-01-31 15:51:24,514 - DEBUG - finding initial function name
2025-01-31 15:51:24,576 - DEBUG - finished regex search, matched: (?P<sig>[a-zA-Z0-9_$]+)\s*=\s*function\(\s*(?P<arg>[a-zA-Z0-9_$]+)\s*\)\s*{\s*(?P=arg)\s*=\s*(?P=arg)\.split\(\s*""\s*\)\s*;\s*[^}]+;\s*return\s+(?P=arg)\.join\(\s*""\s*\)
2025-01-31 15:51:24,576 - DEBUG - Signature cipher function name: ouU
2025-01-31 15:51:24,576 - DEBUG - Finding throttling function name
2025-01-31 15:51:24,644 - DEBUG - finished regex search, matched: (?x)
            (?:
                \.get\("n"\)\)&&\(b=|
                (?:
                    b=String\.fromCharCode\(110\)|
                    (?P<str_idx>[a-zA-Z0-9_$.]+)&&\(b="nn"\[\+(?P=str_idx)\]
                )
                (?:
                    ,[a-zA-Z0-9_$]+\(a\))?,c=a\.
                    (?:
                        get\(b\)|
                        [a-zA-Z0-9_$]+\[b\]\|\|null
                    )\)&&\(c=|
                \b(?P<var>[a-zA-Z0-9_$]+)=
            )(?P<nfunc>[a-zA-Z0-9_$]+)(?:\[(?P<idx>\d+)\])?\([a-zA-Z]\)
            (?(var),[a-zA-Z0-9_$]+\.set\((?:"n+"|[a-zA-Z0-9_$]+)\,(?P=var)\))
2025-01-31 15:51:24,645 - DEBUG - func is: b_N
2025-01-31 15:51:24,645 - DEBUG - idx is: 0
2025-01-31 15:51:24,645 - DEBUG - Checking throttling function name
2025-01-31 15:51:24,646 - DEBUG - Throttling function name is: xyN
2025-01-31 15:51:24,646 - DEBUG - signature found, skip decipher
2025-01-31 15:51:24,646 - DEBUG - Parameter n is: SXXJIAFcZE4kPiXQG
2025-01-31 15:51:25,134 - DEBUG - Parameter n deciphered: r5JwaOx0Tv0o7Q
2025-01-31 15:51:25,135 - DEBUG - signature found, skip decipher
2025-01-31 15:51:25,135 - DEBUG - Parameter n is: 6jRjNNe5jrfxHLy06
2025-01-31 15:51:25,625 - DEBUG - Parameter n deciphered: pRw5yYuy2ntMrg
2025-01-31 15:51:25,625 - DEBUG - signature found, skip decipher
2025-01-31 15:51:25,626 - DEBUG - Parameter n is: 6jRjNNe5jrfxHLy06
2025-01-31 15:51:25,626 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:51:25,626 - DEBUG - Parameter n deciphered: pRw5yYuy2ntMrg
2025-01-31 15:51:25,626 - DEBUG - signature found, skip decipher
2025-01-31 15:51:25,626 - DEBUG - Parameter n is: 6jRjNNe5jrfxHLy06
2025-01-31 15:51:25,626 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:51:25,626 - DEBUG - Parameter n deciphered: pRw5yYuy2ntMrg
2025-01-31 15:51:25,626 - DEBUG - signature found, skip decipher
2025-01-31 15:51:25,626 - DEBUG - Parameter n is: 6jRjNNe5jrfxHLy06
2025-01-31 15:51:25,626 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:51:25,627 - DEBUG - Parameter n deciphered: pRw5yYuy2ntMrg
2025-01-31 15:51:25,627 - DEBUG - signature found, skip decipher
2025-01-31 15:51:25,627 - DEBUG - Parameter n is: 6jRjNNe5jrfxHLy06
2025-01-31 15:51:25,627 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:51:25,627 - DEBUG - Parameter n deciphered: pRw5yYuy2ntMrg
2025-01-31 15:51:25,627 - DEBUG - signature found, skip decipher
2025-01-31 15:51:25,627 - DEBUG - Parameter n is: 6jRjNNe5jrfxHLy06
2025-01-31 15:51:25,627 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:51:25,627 - DEBUG - Parameter n deciphered: pRw5yYuy2ntMrg
2025-01-31 15:51:25,628 - DEBUG - signature found, skip decipher
2025-01-31 15:51:25,628 - DEBUG - Parameter n is: 6jRjNNe5jrfxHLy06
2025-01-31 15:51:25,628 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:51:25,628 - DEBUG - Parameter n deciphered: pRw5yYuy2ntMrg
2025-01-31 15:51:25,628 - DEBUG - signature found, skip decipher
2025-01-31 15:51:25,628 - DEBUG - Parameter n is: 6jRjNNe5jrfxHLy06
2025-01-31 15:51:25,628 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:51:25,629 - DEBUG - Parameter n deciphered: pRw5yYuy2ntMrg
2025-01-31 15:51:25,629 - DEBUG - signature found, skip decipher
2025-01-31 15:51:25,629 - DEBUG - Parameter n is: 6jRjNNe5jrfxHLy06
2025-01-31 15:51:25,629 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:51:25,629 - DEBUG - Parameter n deciphered: pRw5yYuy2ntMrg
2025-01-31 15:51:25,629 - DEBUG - signature found, skip decipher
2025-01-31 15:51:25,629 - DEBUG - Parameter n is: 6jRjNNe5jrfxHLy06
2025-01-31 15:51:25,629 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:51:25,629 - DEBUG - Parameter n deciphered: pRw5yYuy2ntMrg
2025-01-31 15:51:25,630 - DEBUG - signature found, skip decipher
2025-01-31 15:51:25,630 - DEBUG - Parameter n is: 6jRjNNe5jrfxHLy06
2025-01-31 15:51:25,630 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:51:25,630 - DEBUG - Parameter n deciphered: pRw5yYuy2ntMrg
2025-01-31 15:51:25,630 - DEBUG - signature found, skip decipher
2025-01-31 15:51:25,630 - DEBUG - Parameter n is: 6jRjNNe5jrfxHLy06
2025-01-31 15:51:25,630 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:51:25,630 - DEBUG - Parameter n deciphered: pRw5yYuy2ntMrg
2025-01-31 15:51:25,631 - DEBUG - signature found, skip decipher
2025-01-31 15:51:25,631 - DEBUG - Parameter n is: 6jRjNNe5jrfxHLy06
2025-01-31 15:51:25,631 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:51:25,631 - DEBUG - Parameter n deciphered: pRw5yYuy2ntMrg
2025-01-31 15:51:25,631 - DEBUG - signature found, skip decipher
2025-01-31 15:51:25,631 - DEBUG - Parameter n is: 6jRjNNe5jrfxHLy06
2025-01-31 15:51:25,631 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:51:25,631 - DEBUG - Parameter n deciphered: pRw5yYuy2ntMrg
2025-01-31 15:51:25,631 - DEBUG - signature found, skip decipher
2025-01-31 15:51:25,631 - DEBUG - Parameter n is: 6jRjNNe5jrfxHLy06
2025-01-31 15:51:25,631 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:51:25,631 - DEBUG - Parameter n deciphered: pRw5yYuy2ntMrg
2025-01-31 15:51:25,632 - DEBUG - signature found, skip decipher
2025-01-31 15:51:25,632 - DEBUG - Parameter n is: 6jRjNNe5jrfxHLy06
2025-01-31 15:51:25,632 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:51:25,632 - DEBUG - Parameter n deciphered: pRw5yYuy2ntMrg
2025-01-31 15:51:25,632 - DEBUG - signature found, skip decipher
2025-01-31 15:51:25,632 - DEBUG - Parameter n is: 6jRjNNe5jrfxHLy06
2025-01-31 15:51:25,632 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:51:25,632 - DEBUG - Parameter n deciphered: pRw5yYuy2ntMrg
2025-01-31 15:51:25,633 - DEBUG - signature found, skip decipher
2025-01-31 15:51:25,633 - DEBUG - Parameter n is: 6jRjNNe5jrfxHLy06
2025-01-31 15:51:25,633 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:51:25,633 - DEBUG - Parameter n deciphered: pRw5yYuy2ntMrg
2025-01-31 15:51:25,633 - DEBUG - signature found, skip decipher
2025-01-31 15:51:25,633 - DEBUG - Parameter n is: 6jRjNNe5jrfxHLy06
2025-01-31 15:51:25,633 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:51:25,633 - DEBUG - Parameter n deciphered: pRw5yYuy2ntMrg
2025-01-31 15:51:25,634 - DEBUG - signature found, skip decipher
2025-01-31 15:51:25,634 - DEBUG - Parameter n is: 6jRjNNe5jrfxHLy06
2025-01-31 15:51:25,634 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:51:25,634 - DEBUG - Parameter n deciphered: pRw5yYuy2ntMrg
2025-01-31 15:51:25,634 - DEBUG - signature found, skip decipher
2025-01-31 15:51:25,634 - DEBUG - Parameter n is: 6jRjNNe5jrfxHLy06
2025-01-31 15:51:25,634 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:51:25,634 - DEBUG - Parameter n deciphered: pRw5yYuy2ntMrg
2025-01-31 15:51:25,634 - DEBUG - signature found, skip decipher
2025-01-31 15:51:25,634 - DEBUG - Parameter n is: 6jRjNNe5jrfxHLy06
2025-01-31 15:51:25,634 - DEBUG - Parameter n found skipping decryption
2025-01-31 15:51:25,634 - DEBUG - Parameter n deciphered: pRw5yYuy2ntMrg
2025-01-31 15:51:25,635 - DEBUG - downloading (2080762 total bytes) file to /home/strain/deepVoice/Applio/temp_audio
2025-01-31 15:51:25,964 - DEBUG - download remaining: 0
2025-01-31 15:51:25,968 - DEBUG - download finished
2025-01-31 15:51:26,075 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', '/home/strain/deepVoice/Applio/temp_audio', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-31 15:51:26,338 - INFO - YouTube audio downloaded and converted to WAV: La Feve - Comme des enfants
2025-01-31 15:51:26,338 - INFO - Splitting audio for: La Feve - Comme des enfants
2025-01-31 15:51:26,341 - INFO - Separator version 0.28.5 instantiating with output_dir: None, output_format: WAV
2025-01-31 15:51:26,341 - INFO - Output directory not specified. Using current working directory.
2025-01-31 15:51:26,342 - INFO - Operating System: Linux #53-Ubuntu SMP PREEMPT_DYNAMIC Sat Jan 11 00:06:25 UTC 2025
2025-01-31 15:51:26,342 - INFO - System: Linux Node: server Release: 6.8.0-52-generic Machine: x86_64 Proc: x86_64
2025-01-31 15:51:26,342 - INFO - Python Version: 3.10.16
2025-01-31 15:51:26,342 - INFO - PyTorch Version: 2.3.1+cu121
2025-01-31 15:51:26,414 - INFO - FFmpeg installed: ffmpeg version 6.1.1-3ubuntu5 Copyright (c) 2000-2023 the FFmpeg developers
2025-01-31 15:51:26,415 - INFO - ONNX Runtime CPU package installed with version: 1.20.1
2025-01-31 15:51:26,415 - INFO - No hardware acceleration could be configured, running in CPU mode
2025-01-31 15:51:26,415 - INFO - Loading model UVR-MDX-NET-Inst_HQ_3.onnx...
2025-01-31 15:51:26,481 - INFO - Load model duration: 00:00:00
2025-01-31 15:51:26,481 - INFO - Starting separation process for audio_file_path: yt_audios/La Feve - Comme des enfants
2025-01-31 15:52:49,605 - INFO - Saving Vocals stem to La Feve - Comme des enfants_(Vocals)_UVR-MDX-NET-Inst_HQ_3.wav...
2025-01-31 15:52:49,606 - INFO - Audio duration is 0.04 hours (128.52 seconds).
2025-01-31 15:52:49,606 - INFO - Using pydub for writing.
2025-01-31 15:52:49,648 - INFO - Saving Instrumental stem to La Feve - Comme des enfants_(Instrumental)_UVR-MDX-NET-Inst_HQ_3.wav...
2025-01-31 15:52:49,649 - INFO - Audio duration is 0.04 hours (128.52 seconds).
2025-01-31 15:52:49,649 - INFO - Using pydub for writing.
2025-01-31 15:52:49,777 - INFO - Clearing input audio file paths, sources and stems...
2025-01-31 15:52:49,777 - INFO - Separation duration: 00:01:23
2025-01-31 15:52:49,875 - INFO - Split audio into ./split_audios/vocal_La Feve - Comme des enfants.wav and ./split_audios/instrument_La Feve - Comme des enfants.wav
2025-01-31 15:52:49,876 - INFO - Changing voice with model: logs/model/MickeyMouse
2025-01-31 15:54:33,267 - INFO - Inference completed for: La Feve - Comme des enfants
2025-01-31 15:54:33,267 - INFO - Mixing final audio
2025-01-31 15:54:33,272 - ERROR - An error occurred during processing
Traceback (most recent call last):
  File "/home/strain/deepVoice/Applio/server.py", line 205, in home
    mix_wav_files(
  File "/home/strain/deepVoice/Applio/join.py", line 6, in mix_wav_files
    audio2 = AudioSegment.from_wav(file2_path)
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/pydub/audio_segment.py", line 808, in from_wav
    return cls.from_file(file, 'wav', parameters=parameters)
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/pydub/audio_segment.py", line 651, in from_file
    file, close_file = _fd_or_path_or_tempfile(file, 'rb', tempfile=False)
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/pydub/utils.py", line 60, in _fd_or_path_or_tempfile
    fd = open(fd, mode=mode)
FileNotFoundError: [Errno 2] No such file or directory: 'outputs/La Feve - Comme des enfants_processed.wav'
2025-01-31 15:54:33,401 - INFO - 127.0.0.1 - - [31/Jan/2025 15:54:33] "POST / HTTP/1.1" 200 -
2025-01-31 15:56:46,965 - INFO -  * Detected change in '/home/strain/deepVoice/Applio/infer.py', reloading
2025-01-31 15:56:47,918 - INFO -  * Restarting with stat
2025-01-31 15:56:49,760 - WARNING -  * Debugger is active!
2025-01-31 15:56:49,761 - INFO -  * Debugger PIN: 142-961-790
2025-01-31 15:57:15,188 - INFO -  * Detected change in '/home/strain/deepVoice/Applio/infer.py', reloading
2025-01-31 15:57:15,504 - INFO -  * Restarting with stat
2025-01-31 15:57:17,302 - WARNING -  * Debugger is active!
2025-01-31 15:57:17,302 - INFO -  * Debugger PIN: 142-961-790
2025-01-31 16:02:23,115 - INFO -  * Detected change in '/home/strain/deepVoice/Applio/infer.py', reloading
2025-01-31 16:02:23,432 - INFO -  * Restarting with stat
2025-01-31 16:02:25,241 - WARNING -  * Debugger is active!
2025-01-31 16:02:25,242 - INFO -  * Debugger PIN: 142-961-790
2025-01-31 17:29:57,687 - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
2025-01-31 17:29:57,687 - INFO - [33mPress CTRL+C to quit[0m
2025-01-31 17:29:57,688 - INFO -  * Restarting with stat
2025-01-31 17:30:00,125 - WARNING -  * Debugger is active!
2025-01-31 17:30:00,125 - INFO -  * Debugger PIN: 142-961-790
2025-01-31 17:30:38,303 - INFO - Retrieved models: ['Ninho', 'Damso', 'Vald600', 'CharlesAznavour', 'MarineLepen', 'JUL_Interview', 'LaFeve', 'Nekfeu250', 'MickeyMouse', 'SCHInterview', 'SCH1000', 'NicolasSarkozy_v2_500e', 'Maes_600', 'KAARIS', 'ClaudeFrancoisV2', 'Josman', 'SoLaLune', 'JohnnyHallyday800', 'Titeuf600', 'Kylian-Mbapp√©', 'Lacrim', 'OrelsanV1', 'Booba', 'EricCartman', 'kaarism', 'Ademo', 'rick', 'Bassem', 'Wejdene_310Epochs', 'Laylow1000', 'PhilippeEtchebest', 'EricZemmour', 'FreezeCorleone', 'macron', 'gazo700', 'Angele', 'AlphaWann', 'Laylow', 'hamzaai500v2', 'homerSimpson']
2025-01-31 17:30:38,309 - INFO - 127.0.0.1 - - [31/Jan/2025 17:30:38] "GET / HTTP/1.1" 200 -
2025-01-31 17:31:22,602 - INFO - Retrieved models: ['Ninho', 'Damso', 'Vald600', 'CharlesAznavour', 'MarineLepen', 'JUL_Interview', 'LaFeve', 'Nekfeu250', 'MickeyMouse', 'SCHInterview', 'SCH1000', 'NicolasSarkozy_v2_500e', 'Maes_600', 'KAARIS', 'ClaudeFrancoisV2', 'Josman', 'SoLaLune', 'JohnnyHallyday800', 'Titeuf600', 'Kylian-Mbapp√©', 'Lacrim', 'OrelsanV1', 'Booba', 'EricCartman', 'kaarism', 'Ademo', 'rick', 'Bassem', 'Wejdene_310Epochs', 'Laylow1000', 'PhilippeEtchebest', 'EricZemmour', 'FreezeCorleone', 'macron', 'gazo700', 'Angele', 'AlphaWann', 'Laylow', 'hamzaai500v2', 'homerSimpson']
2025-01-31 17:31:22,604 - INFO - Received YouTube URL for processing: https://www.youtube.com/watch?v=kLKEZBI3_gU
2025-01-31 17:31:22,604 - DEBUG - matched regex search: (?:v=|\/)([0-9A-Za-z_-]{11}).*
2025-01-31 17:31:23,406 - DEBUG - finding initial function name
2025-01-31 17:31:23,407 - DEBUG - Pattern failed: ytplayer\.config\s*=\s*
2025-01-31 17:31:23,407 - DEBUG - Could not parse object.
2025-01-31 17:31:23,422 - DEBUG - finished regex search, matched: (/s/player/[\w\d]+/[\w\d_/.]+/base\.js)
2025-01-31 17:31:24,278 - DEBUG - matched regex search: signatureTimestamp:(\d*)
2025-01-31 17:31:24,279 - DEBUG - The WEB client requires poToken to obtain functional streams
2025-01-31 17:31:24,279 - DEBUG - Automatically generating poToken
2025-01-31 17:31:24,279 - DEBUG - Looking for visitorData in initial_data
2025-01-31 17:31:24,380 - DEBUG - matched regex search: visitor_data[',\"\s]+value['\"]:\s?['\"]([a-zA-Z0-9_%-]+)['\"]
2025-01-31 17:31:24,380 - DEBUG - VisitorData obtained successfully
2025-01-31 17:31:24,380 - DEBUG - Invoking botGuard
2025-01-31 17:31:25,117 - DEBUG - PoToken generated successfully
2025-01-31 17:31:25,954 - DEBUG - Found title in vid_info
2025-01-31 17:31:25,955 - DEBUG - applying descrambler
2025-01-31 17:31:25,955 - DEBUG - Applying poToken
2025-01-31 17:31:25,979 - DEBUG - finding initial function name
2025-01-31 17:31:26,044 - DEBUG - finished regex search, matched: (?P<sig>[a-zA-Z0-9_$]+)\s*=\s*function\(\s*(?P<arg>[a-zA-Z0-9_$]+)\s*\)\s*{\s*(?P=arg)\s*=\s*(?P=arg)\.split\(\s*""\s*\)\s*;\s*[^}]+;\s*return\s+(?P=arg)\.join\(\s*""\s*\)
2025-01-31 17:31:26,045 - DEBUG - Signature cipher function name: ouU
2025-01-31 17:31:26,045 - DEBUG - Finding throttling function name
2025-01-31 17:31:26,114 - DEBUG - finished regex search, matched: (?x)
            (?:
                \.get\("n"\)\)&&\(b=|
                (?:
                    b=String\.fromCharCode\(110\)|
                    (?P<str_idx>[a-zA-Z0-9_$.]+)&&\(b="nn"\[\+(?P=str_idx)\]
                )
                (?:
                    ,[a-zA-Z0-9_$]+\(a\))?,c=a\.
                    (?:
                        get\(b\)|
                        [a-zA-Z0-9_$]+\[b\]\|\|null
                    )\)&&\(c=|
                \b(?P<var>[a-zA-Z0-9_$]+)=
            )(?P<nfunc>[a-zA-Z0-9_$]+)(?:\[(?P<idx>\d+)\])?\([a-zA-Z]\)
            (?(var),[a-zA-Z0-9_$]+\.set\((?:"n+"|[a-zA-Z0-9_$]+)\,(?P=var)\))
2025-01-31 17:31:26,114 - DEBUG - func is: b_N
2025-01-31 17:31:26,114 - DEBUG - idx is: 0
2025-01-31 17:31:26,114 - DEBUG - Checking throttling function name
2025-01-31 17:31:26,115 - DEBUG - Throttling function name is: xyN
2025-01-31 17:31:26,115 - DEBUG - signature found, skip decipher
2025-01-31 17:31:26,115 - DEBUG - Parameter n is: rrgdxSIemz3LzDmjQ
2025-01-31 17:31:26,618 - DEBUG - Parameter n deciphered: Ch0qvSU_Sfl0Sg
2025-01-31 17:31:26,619 - DEBUG - signature found, skip decipher
2025-01-31 17:31:26,619 - DEBUG - Parameter n is: d0glGe2LPLIxjTjAS
2025-01-31 17:31:27,108 - DEBUG - Parameter n deciphered: 2ZYg3wsJv_BAnA
2025-01-31 17:31:27,109 - DEBUG - signature found, skip decipher
2025-01-31 17:31:27,109 - DEBUG - Parameter n is: d0glGe2LPLIxjTjAS
2025-01-31 17:31:27,109 - DEBUG - Parameter n found skipping decryption
2025-01-31 17:31:27,109 - DEBUG - Parameter n deciphered: 2ZYg3wsJv_BAnA
2025-01-31 17:31:27,109 - DEBUG - signature found, skip decipher
2025-01-31 17:31:27,109 - DEBUG - Parameter n is: d0glGe2LPLIxjTjAS
2025-01-31 17:31:27,109 - DEBUG - Parameter n found skipping decryption
2025-01-31 17:31:27,109 - DEBUG - Parameter n deciphered: 2ZYg3wsJv_BAnA
2025-01-31 17:31:27,109 - DEBUG - signature found, skip decipher
2025-01-31 17:31:27,109 - DEBUG - Parameter n is: d0glGe2LPLIxjTjAS
2025-01-31 17:31:27,109 - DEBUG - Parameter n found skipping decryption
2025-01-31 17:31:27,109 - DEBUG - Parameter n deciphered: 2ZYg3wsJv_BAnA
2025-01-31 17:31:27,110 - DEBUG - signature found, skip decipher
2025-01-31 17:31:27,110 - DEBUG - Parameter n is: d0glGe2LPLIxjTjAS
2025-01-31 17:31:27,110 - DEBUG - Parameter n found skipping decryption
2025-01-31 17:31:27,110 - DEBUG - Parameter n deciphered: 2ZYg3wsJv_BAnA
2025-01-31 17:31:27,110 - DEBUG - signature found, skip decipher
2025-01-31 17:31:27,110 - DEBUG - Parameter n is: d0glGe2LPLIxjTjAS
2025-01-31 17:31:27,110 - DEBUG - Parameter n found skipping decryption
2025-01-31 17:31:27,110 - DEBUG - Parameter n deciphered: 2ZYg3wsJv_BAnA
2025-01-31 17:31:27,111 - DEBUG - signature found, skip decipher
2025-01-31 17:31:27,111 - DEBUG - Parameter n is: d0glGe2LPLIxjTjAS
2025-01-31 17:31:27,111 - DEBUG - Parameter n found skipping decryption
2025-01-31 17:31:27,111 - DEBUG - Parameter n deciphered: 2ZYg3wsJv_BAnA
2025-01-31 17:31:27,111 - DEBUG - signature found, skip decipher
2025-01-31 17:31:27,111 - DEBUG - Parameter n is: d0glGe2LPLIxjTjAS
2025-01-31 17:31:27,111 - DEBUG - Parameter n found skipping decryption
2025-01-31 17:31:27,111 - DEBUG - Parameter n deciphered: 2ZYg3wsJv_BAnA
2025-01-31 17:31:27,111 - DEBUG - signature found, skip decipher
2025-01-31 17:31:27,112 - DEBUG - Parameter n is: d0glGe2LPLIxjTjAS
2025-01-31 17:31:27,112 - DEBUG - Parameter n found skipping decryption
2025-01-31 17:31:27,112 - DEBUG - Parameter n deciphered: 2ZYg3wsJv_BAnA
2025-01-31 17:31:27,112 - DEBUG - signature found, skip decipher
2025-01-31 17:31:27,112 - DEBUG - Parameter n is: d0glGe2LPLIxjTjAS
2025-01-31 17:31:27,112 - DEBUG - Parameter n found skipping decryption
2025-01-31 17:31:27,112 - DEBUG - Parameter n deciphered: 2ZYg3wsJv_BAnA
2025-01-31 17:31:27,112 - DEBUG - signature found, skip decipher
2025-01-31 17:31:27,112 - DEBUG - Parameter n is: d0glGe2LPLIxjTjAS
2025-01-31 17:31:27,113 - DEBUG - Parameter n found skipping decryption
2025-01-31 17:31:27,113 - DEBUG - Parameter n deciphered: 2ZYg3wsJv_BAnA
2025-01-31 17:31:27,113 - DEBUG - signature found, skip decipher
2025-01-31 17:31:27,113 - DEBUG - Parameter n is: d0glGe2LPLIxjTjAS
2025-01-31 17:31:27,113 - DEBUG - Parameter n found skipping decryption
2025-01-31 17:31:27,113 - DEBUG - Parameter n deciphered: 2ZYg3wsJv_BAnA
2025-01-31 17:31:27,113 - DEBUG - signature found, skip decipher
2025-01-31 17:31:27,113 - DEBUG - Parameter n is: d0glGe2LPLIxjTjAS
2025-01-31 17:31:27,113 - DEBUG - Parameter n found skipping decryption
2025-01-31 17:31:27,114 - DEBUG - Parameter n deciphered: 2ZYg3wsJv_BAnA
2025-01-31 17:31:27,114 - DEBUG - signature found, skip decipher
2025-01-31 17:31:27,114 - DEBUG - Parameter n is: d0glGe2LPLIxjTjAS
2025-01-31 17:31:27,114 - DEBUG - Parameter n found skipping decryption
2025-01-31 17:31:27,114 - DEBUG - Parameter n deciphered: 2ZYg3wsJv_BAnA
2025-01-31 17:31:27,114 - DEBUG - signature found, skip decipher
2025-01-31 17:31:27,114 - DEBUG - Parameter n is: d0glGe2LPLIxjTjAS
2025-01-31 17:31:27,114 - DEBUG - Parameter n found skipping decryption
2025-01-31 17:31:27,114 - DEBUG - Parameter n deciphered: 2ZYg3wsJv_BAnA
2025-01-31 17:31:27,115 - DEBUG - signature found, skip decipher
2025-01-31 17:31:27,115 - DEBUG - Parameter n is: d0glGe2LPLIxjTjAS
2025-01-31 17:31:27,115 - DEBUG - Parameter n found skipping decryption
2025-01-31 17:31:27,115 - DEBUG - Parameter n deciphered: 2ZYg3wsJv_BAnA
2025-01-31 17:31:27,115 - DEBUG - signature found, skip decipher
2025-01-31 17:31:27,115 - DEBUG - Parameter n is: d0glGe2LPLIxjTjAS
2025-01-31 17:31:27,115 - DEBUG - Parameter n found skipping decryption
2025-01-31 17:31:27,115 - DEBUG - Parameter n deciphered: 2ZYg3wsJv_BAnA
2025-01-31 17:31:27,116 - DEBUG - signature found, skip decipher
2025-01-31 17:31:27,116 - DEBUG - Parameter n is: d0glGe2LPLIxjTjAS
2025-01-31 17:31:27,116 - DEBUG - Parameter n found skipping decryption
2025-01-31 17:31:27,116 - DEBUG - Parameter n deciphered: 2ZYg3wsJv_BAnA
2025-01-31 17:31:27,116 - DEBUG - signature found, skip decipher
2025-01-31 17:31:27,116 - DEBUG - Parameter n is: d0glGe2LPLIxjTjAS
2025-01-31 17:31:27,116 - DEBUG - Parameter n found skipping decryption
2025-01-31 17:31:27,116 - DEBUG - Parameter n deciphered: 2ZYg3wsJv_BAnA
2025-01-31 17:31:27,117 - DEBUG - signature found, skip decipher
2025-01-31 17:31:27,117 - DEBUG - Parameter n is: d0glGe2LPLIxjTjAS
2025-01-31 17:31:27,117 - DEBUG - Parameter n found skipping decryption
2025-01-31 17:31:27,117 - DEBUG - Parameter n deciphered: 2ZYg3wsJv_BAnA
2025-01-31 17:31:27,117 - DEBUG - signature found, skip decipher
2025-01-31 17:31:27,117 - DEBUG - Parameter n is: d0glGe2LPLIxjTjAS
2025-01-31 17:31:27,117 - DEBUG - Parameter n found skipping decryption
2025-01-31 17:31:27,117 - DEBUG - Parameter n deciphered: 2ZYg3wsJv_BAnA
2025-01-31 17:31:27,118 - DEBUG - signature found, skip decipher
2025-01-31 17:31:27,118 - DEBUG - Parameter n is: d0glGe2LPLIxjTjAS
2025-01-31 17:31:27,118 - DEBUG - Parameter n found skipping decryption
2025-01-31 17:31:27,118 - DEBUG - Parameter n deciphered: 2ZYg3wsJv_BAnA
2025-01-31 17:31:27,118 - DEBUG - downloading (1082595 total bytes) file to /home/strain/deepVoice/Applio/temp_audio
2025-01-31 17:31:27,365 - DEBUG - download remaining: 0
2025-01-31 17:31:27,369 - DEBUG - download finished
2025-01-31 17:31:27,453 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', '/home/strain/deepVoice/Applio/temp_audio', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-31 17:31:27,598 - INFO - YouTube audio downloaded and converted to WAV: LA MARSEILLAISE - HYMNE DE LA FRANCE - PAROLES
2025-01-31 17:31:27,598 - INFO - Splitting audio for: LA MARSEILLAISE - HYMNE DE LA FRANCE - PAROLES
2025-01-31 17:31:27,599 - INFO - Separator version 0.28.5 instantiating with output_dir: None, output_format: WAV
2025-01-31 17:31:27,599 - INFO - Output directory not specified. Using current working directory.
2025-01-31 17:31:27,599 - INFO - Operating System: Linux #53-Ubuntu SMP PREEMPT_DYNAMIC Sat Jan 11 00:06:25 UTC 2025
2025-01-31 17:31:27,600 - INFO - System: Linux Node: server Release: 6.8.0-52-generic Machine: x86_64 Proc: x86_64
2025-01-31 17:31:27,600 - INFO - Python Version: 3.10.16
2025-01-31 17:31:27,600 - INFO - PyTorch Version: 2.3.1+cu121
2025-01-31 17:31:27,640 - INFO - FFmpeg installed: ffmpeg version 6.1.1-3ubuntu5 Copyright (c) 2000-2023 the FFmpeg developers
2025-01-31 17:31:27,641 - INFO - ONNX Runtime CPU package installed with version: 1.20.1
2025-01-31 17:31:27,641 - INFO - No hardware acceleration could be configured, running in CPU mode
2025-01-31 17:31:27,641 - INFO - Loading model UVR-MDX-NET-Inst_HQ_3.onnx...
2025-01-31 17:31:27,919 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Erf', version=13)
2025-01-31 17:31:27,919 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Erf', version=9)
2025-01-31 17:31:27,919 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='HardSigmoid', version=6)
2025-01-31 17:31:27,919 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='HardSigmoid', version=1)
2025-01-31 17:31:27,919 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='HardSwish', version=14)
2025-01-31 17:31:27,919 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='LeakyRelu', version=16)
2025-01-31 17:31:27,919 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='LeakyRelu', version=6)
2025-01-31 17:31:27,919 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='LeakyRelu', version=1)
2025-01-31 17:31:27,919 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='LogSoftmax', version=13)
2025-01-31 17:31:27,919 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='LogSoftmax', version=11)
2025-01-31 17:31:27,919 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='LogSoftmax', version=1)
2025-01-31 17:31:27,919 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Relu', version=14)
2025-01-31 17:31:27,919 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Relu', version=13)
2025-01-31 17:31:27,919 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Relu', version=6)
2025-01-31 17:31:27,919 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='PRelu', version=16)
2025-01-31 17:31:27,919 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='PRelu', version=9)
2025-01-31 17:31:27,919 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='PRelu', version=7)
2025-01-31 17:31:27,919 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Elu', version=6)
2025-01-31 17:31:27,919 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Celu', version=12)
2025-01-31 17:31:27,919 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Selu', version=6)
2025-01-31 17:31:27,919 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sigmoid', version=13)
2025-01-31 17:31:27,919 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sigmoid', version=6)
2025-01-31 17:31:27,919 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sigmoid', version=1)
2025-01-31 17:31:27,919 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Softmax', version=11)
2025-01-31 17:31:27,919 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Softmax', version=1)
2025-01-31 17:31:27,919 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Softmax', version=13)
2025-01-31 17:31:27,919 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Softsign', version=1)
2025-01-31 17:31:27,919 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Softplus', version=1)
2025-01-31 17:31:27,920 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ArgMin', version=13)
2025-01-31 17:31:27,920 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ArgMin', version=12)
2025-01-31 17:31:27,920 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ArgMax', version=13)
2025-01-31 17:31:27,920 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ArgMax', version=12)
2025-01-31 17:31:27,920 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ArgMin', version=11)
2025-01-31 17:31:27,920 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ArgMax', version=11)
2025-01-31 17:31:27,920 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Pad', version=13)
2025-01-31 17:31:27,920 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Pad', version=11)
2025-01-31 17:31:27,920 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Pad', version=2)
2025-01-31 17:31:27,920 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='AveragePool', version=11)
2025-01-31 17:31:27,920 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='AveragePool', version=10)
2025-01-31 17:31:27,921 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='AveragePool', version=7)
2025-01-31 17:31:27,921 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='BatchNormalization', version=9)
2025-01-31 17:31:27,921 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='BatchNormalization', version=14)
2025-01-31 17:31:27,921 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='BatchNormalization', version=15)
2025-01-31 17:31:27,921 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Div', version=14)
2025-01-31 17:31:27,921 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Div', version=13)
2025-01-31 17:31:27,921 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Div', version=7)
2025-01-31 17:31:27,921 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Div', version=6)
2025-01-31 17:31:27,921 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Div', version=1)
2025-01-31 17:31:27,921 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Mul', version=14)
2025-01-31 17:31:27,921 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Mul', version=13)
2025-01-31 17:31:27,921 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Mul', version=7)
2025-01-31 17:31:27,921 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Mul', version=6)
2025-01-31 17:31:27,921 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Mul', version=1)
2025-01-31 17:31:27,921 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sub', version=14)
2025-01-31 17:31:27,922 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sub', version=13)
2025-01-31 17:31:27,922 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sub', version=7)
2025-01-31 17:31:27,922 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sub', version=6)
2025-01-31 17:31:27,922 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sub', version=1)
2025-01-31 17:31:27,922 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Add', version=14)
2025-01-31 17:31:27,922 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Add', version=13)
2025-01-31 17:31:27,922 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Add', version=7)
2025-01-31 17:31:27,922 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Add', version=6)
2025-01-31 17:31:27,922 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Add', version=1)
2025-01-31 17:31:27,922 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Cast', version=13)
2025-01-31 17:31:27,922 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Cast', version=9)
2025-01-31 17:31:27,922 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Clip', version=13)
2025-01-31 17:31:27,922 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Clip', version=12)
2025-01-31 17:31:27,922 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Clip', version=11)
2025-01-31 17:31:27,922 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Clip', version=6)
2025-01-31 17:31:27,922 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='GreaterOrEqual', version=12)
2025-01-31 17:31:27,923 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='LessOrEqual', version=12)
2025-01-31 17:31:27,923 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Greater', version=13)
2025-01-31 17:31:27,923 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Greater', version=9)
2025-01-31 17:31:27,923 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Greater', version=7)
2025-01-31 17:31:27,923 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Less', version=13)
2025-01-31 17:31:27,923 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Less', version=9)
2025-01-31 17:31:27,923 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Less', version=7)
2025-01-31 17:31:27,923 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Equal', version=13)
2025-01-31 17:31:27,923 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Equal', version=11)
2025-01-31 17:31:27,923 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Equal', version=7)
2025-01-31 17:31:27,923 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Concat', version=13)
2025-01-31 17:31:27,923 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Concat', version=11)
2025-01-31 17:31:27,923 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Concat', version=4)
2025-01-31 17:31:27,923 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Constant', version=13)
2025-01-31 17:31:27,923 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Constant', version=12)
2025-01-31 17:31:27,923 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Constant', version=11)
2025-01-31 17:31:27,923 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Constant', version=9)
2025-01-31 17:31:27,924 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ConstantOfShape', version=9)
2025-01-31 17:31:27,924 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ConvTranspose', version=11)
2025-01-31 17:31:27,924 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ConvTranspose', version=1)
2025-01-31 17:31:27,924 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Conv', version=11)
2025-01-31 17:31:27,924 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Conv', version=1)
2025-01-31 17:31:27,924 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='CumSum', version=14)
2025-01-31 17:31:27,924 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='CumSum', version=11)
2025-01-31 17:31:27,924 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='DepthToSpace', version=13)
2025-01-31 17:31:27,924 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='DepthToSpace', version=11)
2025-01-31 17:31:27,924 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Dropout', version=10)
2025-01-31 17:31:27,924 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Dropout', version=13)
2025-01-31 17:31:27,925 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Dropout', version=12)
2025-01-31 17:31:27,925 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Einsum', version=12)
2025-01-31 17:31:27,925 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Expand', version=13)
2025-01-31 17:31:27,925 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Expand', version=8)
2025-01-31 17:31:27,925 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='EyeLike', version=9)
2025-01-31 17:31:27,925 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Flatten', version=9)
2025-01-31 17:31:27,926 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Flatten', version=11)
2025-01-31 17:31:27,926 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Flatten', version=13)
2025-01-31 17:31:27,926 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Tanh', version=6)
2025-01-31 17:31:27,926 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Tanh', version=13)
2025-01-31 17:31:27,926 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Tan', version=7)
2025-01-31 17:31:27,926 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sin', version=7)
2025-01-31 17:31:27,926 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sign', version=9)
2025-01-31 17:31:27,926 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sign', version=13)
2025-01-31 17:31:27,926 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Log', version=6)
2025-01-31 17:31:27,926 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Log', version=13)
2025-01-31 17:31:27,926 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Exp', version=13)
2025-01-31 17:31:27,926 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Exp', version=6)
2025-01-31 17:31:27,926 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Cos', version=7)
2025-01-31 17:31:27,926 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Atan', version=7)
2025-01-31 17:31:27,926 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Asin', version=7)
2025-01-31 17:31:27,926 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Acos', version=7)
2025-01-31 17:31:27,926 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Abs', version=6)
2025-01-31 17:31:27,926 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Abs', version=13)
2025-01-31 17:31:27,927 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Gather', version=13)
2025-01-31 17:31:27,927 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Gather', version=11)
2025-01-31 17:31:27,927 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Gather', version=1)
2025-01-31 17:31:27,927 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='GatherElements', version=13)
2025-01-31 17:31:27,927 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='GatherElements', version=11)
2025-01-31 17:31:27,927 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='GatherND', version=13)
2025-01-31 17:31:27,927 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='GatherND', version=12)
2025-01-31 17:31:27,927 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='GatherND', version=11)
2025-01-31 17:31:27,927 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Gemm', version=13)
2025-01-31 17:31:27,927 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Gemm', version=11)
2025-01-31 17:31:27,927 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Gemm', version=9)
2025-01-31 17:31:27,927 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='GlobalAveragePool', version=1)
2025-01-31 17:31:27,927 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Identity', version=1)
2025-01-31 17:31:27,927 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Identity', version=13)
2025-01-31 17:31:27,928 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Identity', version=14)
2025-01-31 17:31:27,928 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Identity', version=16)
2025-01-31 17:31:27,928 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='InstanceNormalization', version=6)
2025-01-31 17:31:27,928 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='InstanceNormalization', version=1)
2025-01-31 17:31:27,928 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='IsInf', version=10)
2025-01-31 17:31:27,928 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='IsNaN', version=13)
2025-01-31 17:31:27,929 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='LayerNormalization', version=17)
2025-01-31 17:31:27,929 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Or', version=7)
2025-01-31 17:31:27,929 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Or', version=1)
2025-01-31 17:31:27,929 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='And', version=7)
2025-01-31 17:31:27,929 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='And', version=1)
2025-01-31 17:31:27,929 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Xor', version=7)
2025-01-31 17:31:27,929 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Xor', version=1)
2025-01-31 17:31:27,930 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Not', version=1)
2025-01-31 17:31:27,930 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='LRN', version=1)
2025-01-31 17:31:27,930 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='LRN', version=13)
2025-01-31 17:31:27,930 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='MatMul', version=13)
2025-01-31 17:31:27,930 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='MatMul', version=9)
2025-01-31 17:31:27,930 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='MatMul', version=1)
2025-01-31 17:31:27,930 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='MaxPool', version=8)
2025-01-31 17:31:27,930 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='MaxPool', version=10)
2025-01-31 17:31:27,930 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='MaxPool', version=11)
2025-01-31 17:31:27,930 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='MaxPool', version=12)
2025-01-31 17:31:27,930 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Mean', version=13)
2025-01-31 17:31:27,931 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Mean', version=8)
2025-01-31 17:31:27,931 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Max', version=13)
2025-01-31 17:31:27,931 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Max', version=12)
2025-01-31 17:31:27,931 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Max', version=8)
2025-01-31 17:31:27,931 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Min', version=13)
2025-01-31 17:31:27,931 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Min', version=12)
2025-01-31 17:31:27,931 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Min', version=8)
2025-01-31 17:31:27,931 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Mod', version=13)
2025-01-31 17:31:27,931 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Mod', version=10)
2025-01-31 17:31:27,931 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Neg', version=13)
2025-01-31 17:31:27,931 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Neg', version=6)
2025-01-31 17:31:27,931 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Neg', version=1)
2025-01-31 17:31:28,399 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='NonMaxSuppression', version=11)
2025-01-31 17:31:28,399 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='NonMaxSuppression', version=10)
2025-01-31 17:31:28,400 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='NonZero', version=13)
2025-01-31 17:31:28,400 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Pow', version=15)
2025-01-31 17:31:28,400 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Pow', version=13)
2025-01-31 17:31:28,400 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Pow', version=12)
2025-01-31 17:31:28,400 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Pow', version=7)
2025-01-31 17:31:28,400 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Pow', version=1)
2025-01-31 17:31:28,400 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sqrt', version=13)
2025-01-31 17:31:28,400 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sqrt', version=6)
2025-01-31 17:31:28,400 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sqrt', version=1)
2025-01-31 17:31:28,401 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Range', version=11)
2025-01-31 17:31:28,401 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Reciprocal', version=13)
2025-01-31 17:31:28,401 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Reciprocal', version=6)
2025-01-31 17:31:28,401 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Reciprocal', version=1)
2025-01-31 17:31:28,401 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceSumSquare', version=13)
2025-01-31 17:31:28,401 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceSumSquare', version=11)
2025-01-31 17:31:28,402 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceSumSquare', version=1)
2025-01-31 17:31:28,402 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceSum', version=11)
2025-01-31 17:31:28,402 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceSum', version=1)
2025-01-31 17:31:28,402 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceProd', version=13)
2025-01-31 17:31:28,402 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceProd', version=11)
2025-01-31 17:31:28,402 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceProd', version=1)
2025-01-31 17:31:28,402 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceMin', version=13)
2025-01-31 17:31:28,402 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceMin', version=12)
2025-01-31 17:31:28,402 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceMin', version=11)
2025-01-31 17:31:28,402 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceMin', version=1)
2025-01-31 17:31:28,402 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceMean', version=13)
2025-01-31 17:31:28,402 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceMean', version=11)
2025-01-31 17:31:28,402 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceMean', version=1)
2025-01-31 17:31:28,402 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceMax', version=13)
2025-01-31 17:31:28,402 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceMax', version=12)
2025-01-31 17:31:28,402 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceMax', version=11)
2025-01-31 17:31:28,402 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceMax', version=1)
2025-01-31 17:31:28,403 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceLogSumExp', version=13)
2025-01-31 17:31:28,403 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceLogSumExp', version=11)
2025-01-31 17:31:28,403 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceLogSumExp', version=1)
2025-01-31 17:31:28,403 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceLogSum', version=13)
2025-01-31 17:31:28,403 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceLogSum', version=11)
2025-01-31 17:31:28,403 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceLogSum', version=1)
2025-01-31 17:31:28,403 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceL2', version=13)
2025-01-31 17:31:28,403 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceL2', version=11)
2025-01-31 17:31:28,403 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceL2', version=1)
2025-01-31 17:31:28,403 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceL1', version=13)
2025-01-31 17:31:28,403 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceL1', version=11)
2025-01-31 17:31:28,403 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceL1', version=1)
2025-01-31 17:31:28,403 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceSum', version=13)
2025-01-31 17:31:28,403 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Reshape', version=14)
2025-01-31 17:31:28,404 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Reshape', version=13)
2025-01-31 17:31:28,404 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Reshape', version=5)
2025-01-31 17:31:28,404 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Resize', version=10)
2025-01-31 17:31:28,404 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Resize', version=13)
2025-01-31 17:31:28,404 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Resize', version=11)
2025-01-31 17:31:28,404 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='RoiAlign', version=10)
2025-01-31 17:31:28,404 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='RoiAlign', version=16)
2025-01-31 17:31:28,405 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Round', version=11)
2025-01-31 17:31:28,405 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Floor', version=6)
2025-01-31 17:31:28,405 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Floor', version=13)
2025-01-31 17:31:28,405 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Ceil', version=6)
2025-01-31 17:31:28,405 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Ceil', version=13)
2025-01-31 17:31:28,405 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ScatterND', version=16)
2025-01-31 17:31:28,405 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ScatterND', version=13)
2025-01-31 17:31:28,405 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ScatterND', version=11)
2025-01-31 17:31:28,406 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Shape', version=15)
2025-01-31 17:31:28,406 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Shape', version=13)
2025-01-31 17:31:28,406 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Shape', version=1)
2025-01-31 17:31:28,406 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Slice', version=9)
2025-01-31 17:31:28,406 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Slice', version=13)
2025-01-31 17:31:28,406 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Slice', version=11)
2025-01-31 17:31:28,406 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Slice', version=10)
2025-01-31 17:31:28,407 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Split', version=13)
2025-01-31 17:31:28,407 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Split', version=2)
2025-01-31 17:31:28,407 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Split', version=11)
2025-01-31 17:31:28,407 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Squeeze', version=11)
2025-01-31 17:31:28,407 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Squeeze', version=1)
2025-01-31 17:31:28,407 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Squeeze', version=21)
2025-01-31 17:31:28,407 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Squeeze', version=13)
2025-01-31 17:31:28,408 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sum', version=13)
2025-01-31 17:31:28,408 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sum', version=8)
2025-01-31 17:31:28,408 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Tile', version=13)
2025-01-31 17:31:28,408 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Tile', version=6)
2025-01-31 17:31:28,408 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='TopK', version=11)
2025-01-31 17:31:28,408 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='TopK', version=10)
2025-01-31 17:31:28,408 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='TopK', version=1)
2025-01-31 17:31:28,408 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Transpose', version=13)
2025-01-31 17:31:28,409 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Transpose', version=1)
2025-01-31 17:31:28,409 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Unsqueeze', version=11)
2025-01-31 17:31:28,409 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Unsqueeze', version=1)
2025-01-31 17:31:28,409 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Unsqueeze', version=13)
2025-01-31 17:31:28,409 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Where', version=16)
2025-01-31 17:31:28,409 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Where', version=9)
2025-01-31 17:31:28,511 - INFO - Load model duration: 00:00:00
2025-01-31 17:31:28,511 - INFO - Starting separation process for audio_file_path: yt_audios/LA MARSEILLAISE - HYMNE DE LA FRANCE - PAROLES
2025-01-31 17:32:14,098 - INFO - Saving Vocals stem to LA MARSEILLAISE - HYMNE DE LA FRANCE - PAROLES_(Vocals)_UVR-MDX-NET-Inst_HQ_3.wav...
2025-01-31 17:32:14,098 - INFO - Audio duration is 0.02 hours (66.85 seconds).
2025-01-31 17:32:14,098 - INFO - Using pydub for writing.
2025-01-31 17:32:14,117 - INFO - Saving Instrumental stem to LA MARSEILLAISE - HYMNE DE LA FRANCE - PAROLES_(Instrumental)_UVR-MDX-NET-Inst_HQ_3.wav...
2025-01-31 17:32:14,117 - INFO - Audio duration is 0.02 hours (66.85 seconds).
2025-01-31 17:32:14,117 - INFO - Using pydub for writing.
2025-01-31 17:32:14,207 - INFO - Clearing input audio file paths, sources and stems...
2025-01-31 17:32:14,207 - INFO - Separation duration: 00:00:45
2025-01-31 17:32:14,208 - INFO - Split audio into ./split_audios/vocal_LA MARSEILLAISE - HYMNE DE LA FRANCE - PAROLES.wav and ./split_audios/instrument_LA MARSEILLAISE - HYMNE DE LA FRANCE - PAROLES.wav
2025-01-31 17:32:14,208 - INFO - Changing voice with model: logs/model/LaFeve
2025-01-31 17:32:14,223 - DEBUG - Loading FFmpeg6
2025-01-31 17:32:14,236 - DEBUG - Failed to load FFmpeg6 extension.
Traceback (most recent call last):
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/torio/_extension/utils.py", line 116, in _find_ffmpeg_extension
    ext = _find_versionsed_ffmpeg_extension(ffmpeg_ver)
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/torio/_extension/utils.py", line 108, in _find_versionsed_ffmpeg_extension
    _load_lib(lib)
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/torio/_extension/utils.py", line 94, in _load_lib
    torch.ops.load_library(path)
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/torch/_ops.py", line 1032, in load_library
    ctypes.CDLL(path)
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/ctypes/__init__.py", line 374, in __init__
    self._handle = _dlopen(self._name, mode)
OSError: /home/strain/miniconda3/envs/applio/bin/../lib/libstdc++.so.6: version `GLIBCXX_3.4.32' not found (required by /lib/x86_64-linux-gnu/libavfilter.so.9)
2025-01-31 17:32:14,239 - DEBUG - Loading FFmpeg5
2025-01-31 17:32:14,239 - DEBUG - Failed to load FFmpeg5 extension.
Traceback (most recent call last):
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/torio/_extension/utils.py", line 116, in _find_ffmpeg_extension
    ext = _find_versionsed_ffmpeg_extension(ffmpeg_ver)
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/torio/_extension/utils.py", line 108, in _find_versionsed_ffmpeg_extension
    _load_lib(lib)
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/torio/_extension/utils.py", line 94, in _load_lib
    torch.ops.load_library(path)
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/torch/_ops.py", line 1032, in load_library
    ctypes.CDLL(path)
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/ctypes/__init__.py", line 374, in __init__
    self._handle = _dlopen(self._name, mode)
OSError: libavutil.so.57: cannot open shared object file: No such file or directory
2025-01-31 17:32:14,239 - DEBUG - Loading FFmpeg4
2025-01-31 17:32:14,239 - DEBUG - Failed to load FFmpeg4 extension.
Traceback (most recent call last):
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/torio/_extension/utils.py", line 116, in _find_ffmpeg_extension
    ext = _find_versionsed_ffmpeg_extension(ffmpeg_ver)
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/torio/_extension/utils.py", line 108, in _find_versionsed_ffmpeg_extension
    _load_lib(lib)
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/torio/_extension/utils.py", line 94, in _load_lib
    torch.ops.load_library(path)
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/torch/_ops.py", line 1032, in load_library
    ctypes.CDLL(path)
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/ctypes/__init__.py", line 374, in __init__
    self._handle = _dlopen(self._name, mode)
OSError: libavutil.so.56: cannot open shared object file: No such file or directory
2025-01-31 17:32:14,240 - DEBUG - Loading FFmpeg
2025-01-31 17:32:14,240 - DEBUG - Failed to load FFmpeg extension.
Traceback (most recent call last):
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/torio/_extension/utils.py", line 116, in _find_ffmpeg_extension
    ext = _find_versionsed_ffmpeg_extension(ffmpeg_ver)
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/torio/_extension/utils.py", line 106, in _find_versionsed_ffmpeg_extension
    raise RuntimeError(f"FFmpeg{version} extension is not available.")
RuntimeError: FFmpeg extension is not available.
2025-01-31 17:34:05,265 - INFO - Inference completed for: LA MARSEILLAISE - HYMNE DE LA FRANCE - PAROLES
2025-01-31 17:34:05,265 - INFO - Mixing final audio
2025-01-31 17:34:05,267 - ERROR - An error occurred during processing
Traceback (most recent call last):
  File "/home/strain/deepVoice/Applio/server.py", line 205, in home
    mix_wav_files(
  File "/home/strain/deepVoice/Applio/join.py", line 6, in mix_wav_files
    audio2 = AudioSegment.from_wav(file2_path)
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/pydub/audio_segment.py", line 808, in from_wav
    return cls.from_file(file, 'wav', parameters=parameters)
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/pydub/audio_segment.py", line 651, in from_file
    file, close_file = _fd_or_path_or_tempfile(file, 'rb', tempfile=False)
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/pydub/utils.py", line 60, in _fd_or_path_or_tempfile
    fd = open(fd, mode=mode)
FileNotFoundError: [Errno 2] No such file or directory: 'outputs/LA MARSEILLAISE - HYMNE DE LA FRANCE - PAROLES_processed.wav'
2025-01-31 17:34:05,388 - INFO - 127.0.0.1 - - [31/Jan/2025 17:34:05] "POST / HTTP/1.1" 200 -
2025-01-31 17:35:17,516 - INFO -  * Detected change in '/home/strain/deepVoice/Applio/server.py', reloading
2025-01-31 17:35:18,264 - INFO -  * Restarting with stat
2025-01-31 17:35:20,725 - WARNING -  * Debugger is active!
2025-01-31 17:35:20,725 - INFO -  * Debugger PIN: 142-961-790
2025-01-31 17:38:10,473 - INFO -  * Detected change in '/home/strain/deepVoice/Applio/server.py', reloading
2025-01-31 17:38:10,937 - INFO -  * Restarting with stat
2025-01-31 17:38:13,378 - WARNING -  * Debugger is active!
2025-01-31 17:38:13,378 - INFO -  * Debugger PIN: 142-961-790
2025-01-31 17:39:45,062 - INFO -  * Detected change in '/home/strain/deepVoice/Applio/server.py', reloading
2025-01-31 17:39:45,482 - INFO -  * Restarting with stat
2025-01-31 17:39:47,925 - WARNING -  * Debugger is active!
2025-01-31 17:39:47,925 - INFO -  * Debugger PIN: 142-961-790
2025-01-31 17:39:50,989 - INFO -  * Detected change in '/home/strain/deepVoice/Applio/server.py', reloading
2025-01-31 17:39:51,413 - INFO -  * Restarting with stat
2025-01-31 17:39:53,855 - WARNING -  * Debugger is active!
2025-01-31 17:39:53,856 - INFO -  * Debugger PIN: 142-961-790
2025-01-31 17:40:37,804 - INFO -  * Detected change in '/home/strain/deepVoice/Applio/server.py', reloading
2025-01-31 17:40:38,226 - INFO -  * Restarting with stat
2025-01-31 17:40:40,689 - WARNING -  * Debugger is active!
2025-01-31 17:40:40,689 - INFO -  * Debugger PIN: 142-961-790
2025-01-31 17:41:00,126 - INFO -  * Detected change in '/home/strain/deepVoice/Applio/server.py', reloading
2025-01-31 17:41:00,546 - INFO -  * Restarting with stat
2025-01-31 17:41:02,985 - WARNING -  * Debugger is active!
2025-01-31 17:41:02,985 - INFO -  * Debugger PIN: 142-961-790
2025-01-31 17:41:05,617 - INFO - Retrieved models: ['Ninho', 'Damso', 'Vald600', 'CharlesAznavour', 'MarineLepen', 'JUL_Interview', 'LaFeve', 'Nekfeu250', 'MickeyMouse', 'SCHInterview', 'SCH1000', 'NicolasSarkozy_v2_500e', 'Maes_600', 'KAARIS', 'ClaudeFrancoisV2', 'Josman', 'SoLaLune', 'JohnnyHallyday800', 'Titeuf600', 'Kylian-Mbapp√©', 'Lacrim', 'OrelsanV1', 'Booba', 'EricCartman', 'kaarism', 'Ademo', 'rick', 'Bassem', 'Wejdene_310Epochs', 'Laylow1000', 'PhilippeEtchebest', 'EricZemmour', 'FreezeCorleone', 'macron', 'gazo700', 'Angele', 'AlphaWann', 'Laylow', 'hamzaai500v2', 'homerSimpson']
2025-01-31 17:41:05,619 - INFO - Received YouTube URL for processing: https://www.youtube.com/watch?v=kLKEZBI3_gU
2025-01-31 17:41:05,619 - DEBUG - matched regex search: (?:v=|\/)([0-9A-Za-z_-]{11}).*
2025-01-31 17:41:06,546 - DEBUG - finding initial function name
2025-01-31 17:41:06,547 - DEBUG - Pattern failed: ytplayer\.config\s*=\s*
2025-01-31 17:41:06,547 - DEBUG - Could not parse object.
2025-01-31 17:41:06,565 - DEBUG - finished regex search, matched: (/s/player/[\w\d]+/[\w\d_/.]+/base\.js)
2025-01-31 17:41:06,846 - DEBUG - matched regex search: signatureTimestamp:(\d*)
2025-01-31 17:41:06,846 - DEBUG - The WEB client requires poToken to obtain functional streams
2025-01-31 17:41:06,846 - DEBUG - Automatically generating poToken
2025-01-31 17:41:06,846 - DEBUG - Looking for visitorData in initial_data
2025-01-31 17:41:06,964 - DEBUG - matched regex search: visitor_data[',\"\s]+value['\"]:\s?['\"]([a-zA-Z0-9_%-]+)['\"]
2025-01-31 17:41:06,964 - DEBUG - VisitorData obtained successfully
2025-01-31 17:41:06,964 - DEBUG - Invoking botGuard
2025-01-31 17:41:07,695 - DEBUG - PoToken generated successfully
2025-01-31 17:41:08,158 - DEBUG - Found title in vid_info
2025-01-31 17:41:08,158 - DEBUG - applying descrambler
2025-01-31 17:41:08,158 - DEBUG - Applying poToken
2025-01-31 17:41:08,164 - DEBUG - finding initial function name
2025-01-31 17:41:08,220 - DEBUG - finished regex search, matched: (?P<sig>[a-zA-Z0-9_$]+)\s*=\s*function\(\s*(?P<arg>[a-zA-Z0-9_$]+)\s*\)\s*{\s*(?P=arg)\s*=\s*(?P=arg)\.split\(\s*""\s*\)\s*;\s*[^}]+;\s*return\s+(?P=arg)\.join\(\s*""\s*\)
2025-01-31 17:41:08,221 - DEBUG - Signature cipher function name: ouU
2025-01-31 17:41:08,221 - DEBUG - Finding throttling function name
2025-01-31 17:41:08,290 - DEBUG - finished regex search, matched: (?x)
            (?:
                \.get\("n"\)\)&&\(b=|
                (?:
                    b=String\.fromCharCode\(110\)|
                    (?P<str_idx>[a-zA-Z0-9_$.]+)&&\(b="nn"\[\+(?P=str_idx)\]
                )
                (?:
                    ,[a-zA-Z0-9_$]+\(a\))?,c=a\.
                    (?:
                        get\(b\)|
                        [a-zA-Z0-9_$]+\[b\]\|\|null
                    )\)&&\(c=|
                \b(?P<var>[a-zA-Z0-9_$]+)=
            )(?P<nfunc>[a-zA-Z0-9_$]+)(?:\[(?P<idx>\d+)\])?\([a-zA-Z]\)
            (?(var),[a-zA-Z0-9_$]+\.set\((?:"n+"|[a-zA-Z0-9_$]+)\,(?P=var)\))
2025-01-31 17:41:08,290 - DEBUG - func is: b_N
2025-01-31 17:41:08,290 - DEBUG - idx is: 0
2025-01-31 17:41:08,290 - DEBUG - Checking throttling function name
2025-01-31 17:41:08,291 - DEBUG - Throttling function name is: xyN
2025-01-31 17:41:08,292 - DEBUG - signature found, skip decipher
2025-01-31 17:41:08,292 - DEBUG - Parameter n is: 8thI4fobtW_ceTSys
2025-01-31 17:41:08,796 - DEBUG - Parameter n deciphered: e7D5pOMJOWBfqQ
2025-01-31 17:41:08,797 - DEBUG - signature found, skip decipher
2025-01-31 17:41:08,797 - DEBUG - Parameter n is: kpEU4ar6wJ-JIxRow
2025-01-31 17:41:09,285 - DEBUG - Parameter n deciphered: 3qa08XyuNofNOQ
2025-01-31 17:41:09,285 - DEBUG - signature found, skip decipher
2025-01-31 17:41:09,285 - DEBUG - Parameter n is: kpEU4ar6wJ-JIxRow
2025-01-31 17:41:09,286 - DEBUG - Parameter n found skipping decryption
2025-01-31 17:41:09,286 - DEBUG - Parameter n deciphered: 3qa08XyuNofNOQ
2025-01-31 17:41:09,286 - DEBUG - signature found, skip decipher
2025-01-31 17:41:09,286 - DEBUG - Parameter n is: kpEU4ar6wJ-JIxRow
2025-01-31 17:41:09,286 - DEBUG - Parameter n found skipping decryption
2025-01-31 17:41:09,286 - DEBUG - Parameter n deciphered: 3qa08XyuNofNOQ
2025-01-31 17:41:09,286 - DEBUG - signature found, skip decipher
2025-01-31 17:41:09,286 - DEBUG - Parameter n is: kpEU4ar6wJ-JIxRow
2025-01-31 17:41:09,286 - DEBUG - Parameter n found skipping decryption
2025-01-31 17:41:09,286 - DEBUG - Parameter n deciphered: 3qa08XyuNofNOQ
2025-01-31 17:41:09,287 - DEBUG - signature found, skip decipher
2025-01-31 17:41:09,287 - DEBUG - Parameter n is: kpEU4ar6wJ-JIxRow
2025-01-31 17:41:09,287 - DEBUG - Parameter n found skipping decryption
2025-01-31 17:41:09,287 - DEBUG - Parameter n deciphered: 3qa08XyuNofNOQ
2025-01-31 17:41:09,287 - DEBUG - signature found, skip decipher
2025-01-31 17:41:09,287 - DEBUG - Parameter n is: kpEU4ar6wJ-JIxRow
2025-01-31 17:41:09,287 - DEBUG - Parameter n found skipping decryption
2025-01-31 17:41:09,287 - DEBUG - Parameter n deciphered: 3qa08XyuNofNOQ
2025-01-31 17:41:09,288 - DEBUG - signature found, skip decipher
2025-01-31 17:41:09,288 - DEBUG - Parameter n is: kpEU4ar6wJ-JIxRow
2025-01-31 17:41:09,288 - DEBUG - Parameter n found skipping decryption
2025-01-31 17:41:09,288 - DEBUG - Parameter n deciphered: 3qa08XyuNofNOQ
2025-01-31 17:41:09,288 - DEBUG - signature found, skip decipher
2025-01-31 17:41:09,288 - DEBUG - Parameter n is: kpEU4ar6wJ-JIxRow
2025-01-31 17:41:09,288 - DEBUG - Parameter n found skipping decryption
2025-01-31 17:41:09,288 - DEBUG - Parameter n deciphered: 3qa08XyuNofNOQ
2025-01-31 17:41:09,288 - DEBUG - signature found, skip decipher
2025-01-31 17:41:09,288 - DEBUG - Parameter n is: kpEU4ar6wJ-JIxRow
2025-01-31 17:41:09,288 - DEBUG - Parameter n found skipping decryption
2025-01-31 17:41:09,288 - DEBUG - Parameter n deciphered: 3qa08XyuNofNOQ
2025-01-31 17:41:09,289 - DEBUG - signature found, skip decipher
2025-01-31 17:41:09,289 - DEBUG - Parameter n is: kpEU4ar6wJ-JIxRow
2025-01-31 17:41:09,289 - DEBUG - Parameter n found skipping decryption
2025-01-31 17:41:09,289 - DEBUG - Parameter n deciphered: 3qa08XyuNofNOQ
2025-01-31 17:41:09,289 - DEBUG - signature found, skip decipher
2025-01-31 17:41:09,289 - DEBUG - Parameter n is: kpEU4ar6wJ-JIxRow
2025-01-31 17:41:09,289 - DEBUG - Parameter n found skipping decryption
2025-01-31 17:41:09,289 - DEBUG - Parameter n deciphered: 3qa08XyuNofNOQ
2025-01-31 17:41:09,290 - DEBUG - signature found, skip decipher
2025-01-31 17:41:09,290 - DEBUG - Parameter n is: kpEU4ar6wJ-JIxRow
2025-01-31 17:41:09,290 - DEBUG - Parameter n found skipping decryption
2025-01-31 17:41:09,290 - DEBUG - Parameter n deciphered: 3qa08XyuNofNOQ
2025-01-31 17:41:09,290 - DEBUG - signature found, skip decipher
2025-01-31 17:41:09,290 - DEBUG - Parameter n is: kpEU4ar6wJ-JIxRow
2025-01-31 17:41:09,290 - DEBUG - Parameter n found skipping decryption
2025-01-31 17:41:09,290 - DEBUG - Parameter n deciphered: 3qa08XyuNofNOQ
2025-01-31 17:41:09,290 - DEBUG - signature found, skip decipher
2025-01-31 17:41:09,291 - DEBUG - Parameter n is: kpEU4ar6wJ-JIxRow
2025-01-31 17:41:09,291 - DEBUG - Parameter n found skipping decryption
2025-01-31 17:41:09,291 - DEBUG - Parameter n deciphered: 3qa08XyuNofNOQ
2025-01-31 17:41:09,291 - DEBUG - signature found, skip decipher
2025-01-31 17:41:09,291 - DEBUG - Parameter n is: kpEU4ar6wJ-JIxRow
2025-01-31 17:41:09,291 - DEBUG - Parameter n found skipping decryption
2025-01-31 17:41:09,291 - DEBUG - Parameter n deciphered: 3qa08XyuNofNOQ
2025-01-31 17:41:09,291 - DEBUG - signature found, skip decipher
2025-01-31 17:41:09,291 - DEBUG - Parameter n is: kpEU4ar6wJ-JIxRow
2025-01-31 17:41:09,291 - DEBUG - Parameter n found skipping decryption
2025-01-31 17:41:09,291 - DEBUG - Parameter n deciphered: 3qa08XyuNofNOQ
2025-01-31 17:41:09,292 - DEBUG - signature found, skip decipher
2025-01-31 17:41:09,292 - DEBUG - Parameter n is: kpEU4ar6wJ-JIxRow
2025-01-31 17:41:09,292 - DEBUG - Parameter n found skipping decryption
2025-01-31 17:41:09,292 - DEBUG - Parameter n deciphered: 3qa08XyuNofNOQ
2025-01-31 17:41:09,292 - DEBUG - signature found, skip decipher
2025-01-31 17:41:09,292 - DEBUG - Parameter n is: kpEU4ar6wJ-JIxRow
2025-01-31 17:41:09,292 - DEBUG - Parameter n found skipping decryption
2025-01-31 17:41:09,292 - DEBUG - Parameter n deciphered: 3qa08XyuNofNOQ
2025-01-31 17:41:09,292 - DEBUG - signature found, skip decipher
2025-01-31 17:41:09,292 - DEBUG - Parameter n is: kpEU4ar6wJ-JIxRow
2025-01-31 17:41:09,293 - DEBUG - Parameter n found skipping decryption
2025-01-31 17:41:09,293 - DEBUG - Parameter n deciphered: 3qa08XyuNofNOQ
2025-01-31 17:41:09,293 - DEBUG - signature found, skip decipher
2025-01-31 17:41:09,293 - DEBUG - Parameter n is: kpEU4ar6wJ-JIxRow
2025-01-31 17:41:09,293 - DEBUG - Parameter n found skipping decryption
2025-01-31 17:41:09,293 - DEBUG - Parameter n deciphered: 3qa08XyuNofNOQ
2025-01-31 17:41:09,293 - DEBUG - signature found, skip decipher
2025-01-31 17:41:09,293 - DEBUG - Parameter n is: kpEU4ar6wJ-JIxRow
2025-01-31 17:41:09,293 - DEBUG - Parameter n found skipping decryption
2025-01-31 17:41:09,293 - DEBUG - Parameter n deciphered: 3qa08XyuNofNOQ
2025-01-31 17:41:09,294 - DEBUG - signature found, skip decipher
2025-01-31 17:41:09,294 - DEBUG - Parameter n is: kpEU4ar6wJ-JIxRow
2025-01-31 17:41:09,294 - DEBUG - Parameter n found skipping decryption
2025-01-31 17:41:09,294 - DEBUG - Parameter n deciphered: 3qa08XyuNofNOQ
2025-01-31 17:41:09,294 - DEBUG - downloading (1082595 total bytes) file to /home/strain/deepVoice/Applio/temp_audio
2025-01-31 17:41:09,556 - DEBUG - download remaining: 0
2025-01-31 17:41:09,561 - DEBUG - download finished
2025-01-31 17:41:09,648 - DEBUG - subprocess.call(['ffmpeg', '-y', '-i', '/home/strain/deepVoice/Applio/temp_audio', '-acodec', 'pcm_s16le', '-vn', '-f', 'wav', '-'])
2025-01-31 17:41:09,793 - INFO - YouTube audio downloaded and converted to WAV: LA MARSEILLAISE - HYMNE DE LA FRANCE - PAROLES
2025-01-31 17:41:09,794 - INFO - Splitting audio for: LA MARSEILLAISE - HYMNE DE LA FRANCE - PAROLES
2025-01-31 17:41:09,795 - INFO - Separator version 0.28.5 instantiating with output_dir: None, output_format: WAV
2025-01-31 17:41:09,795 - INFO - Output directory not specified. Using current working directory.
2025-01-31 17:41:09,795 - INFO - Operating System: Linux #53-Ubuntu SMP PREEMPT_DYNAMIC Sat Jan 11 00:06:25 UTC 2025
2025-01-31 17:41:09,795 - INFO - System: Linux Node: server Release: 6.8.0-52-generic Machine: x86_64 Proc: x86_64
2025-01-31 17:41:09,795 - INFO - Python Version: 3.10.16
2025-01-31 17:41:09,796 - INFO - PyTorch Version: 2.3.1+cu121
2025-01-31 17:41:09,835 - INFO - FFmpeg installed: ffmpeg version 6.1.1-3ubuntu5 Copyright (c) 2000-2023 the FFmpeg developers
2025-01-31 17:41:09,835 - INFO - ONNX Runtime CPU package installed with version: 1.20.1
2025-01-31 17:41:09,835 - INFO - No hardware acceleration could be configured, running in CPU mode
2025-01-31 17:41:09,836 - INFO - Loading model UVR-MDX-NET-Inst_HQ_3.onnx...
2025-01-31 17:41:10,112 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Erf', version=13)
2025-01-31 17:41:10,113 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Erf', version=9)
2025-01-31 17:41:10,113 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='HardSigmoid', version=6)
2025-01-31 17:41:10,113 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='HardSigmoid', version=1)
2025-01-31 17:41:10,113 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='HardSwish', version=14)
2025-01-31 17:41:10,113 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='LeakyRelu', version=16)
2025-01-31 17:41:10,113 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='LeakyRelu', version=6)
2025-01-31 17:41:10,113 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='LeakyRelu', version=1)
2025-01-31 17:41:10,113 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='LogSoftmax', version=13)
2025-01-31 17:41:10,113 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='LogSoftmax', version=11)
2025-01-31 17:41:10,113 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='LogSoftmax', version=1)
2025-01-31 17:41:10,113 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Relu', version=14)
2025-01-31 17:41:10,113 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Relu', version=13)
2025-01-31 17:41:10,113 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Relu', version=6)
2025-01-31 17:41:10,113 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='PRelu', version=16)
2025-01-31 17:41:10,113 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='PRelu', version=9)
2025-01-31 17:41:10,113 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='PRelu', version=7)
2025-01-31 17:41:10,113 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Elu', version=6)
2025-01-31 17:41:10,113 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Celu', version=12)
2025-01-31 17:41:10,113 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Selu', version=6)
2025-01-31 17:41:10,113 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sigmoid', version=13)
2025-01-31 17:41:10,113 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sigmoid', version=6)
2025-01-31 17:41:10,113 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sigmoid', version=1)
2025-01-31 17:41:10,113 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Softmax', version=11)
2025-01-31 17:41:10,113 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Softmax', version=1)
2025-01-31 17:41:10,113 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Softmax', version=13)
2025-01-31 17:41:10,113 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Softsign', version=1)
2025-01-31 17:41:10,113 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Softplus', version=1)
2025-01-31 17:41:10,114 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ArgMin', version=13)
2025-01-31 17:41:10,114 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ArgMin', version=12)
2025-01-31 17:41:10,114 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ArgMax', version=13)
2025-01-31 17:41:10,114 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ArgMax', version=12)
2025-01-31 17:41:10,114 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ArgMin', version=11)
2025-01-31 17:41:10,114 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ArgMax', version=11)
2025-01-31 17:41:10,114 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Pad', version=13)
2025-01-31 17:41:10,114 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Pad', version=11)
2025-01-31 17:41:10,114 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Pad', version=2)
2025-01-31 17:41:10,114 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='AveragePool', version=11)
2025-01-31 17:41:10,115 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='AveragePool', version=10)
2025-01-31 17:41:10,115 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='AveragePool', version=7)
2025-01-31 17:41:10,115 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='BatchNormalization', version=9)
2025-01-31 17:41:10,115 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='BatchNormalization', version=14)
2025-01-31 17:41:10,115 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='BatchNormalization', version=15)
2025-01-31 17:41:10,115 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Div', version=14)
2025-01-31 17:41:10,115 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Div', version=13)
2025-01-31 17:41:10,115 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Div', version=7)
2025-01-31 17:41:10,115 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Div', version=6)
2025-01-31 17:41:10,115 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Div', version=1)
2025-01-31 17:41:10,115 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Mul', version=14)
2025-01-31 17:41:10,115 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Mul', version=13)
2025-01-31 17:41:10,115 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Mul', version=7)
2025-01-31 17:41:10,115 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Mul', version=6)
2025-01-31 17:41:10,115 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Mul', version=1)
2025-01-31 17:41:10,115 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sub', version=14)
2025-01-31 17:41:10,115 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sub', version=13)
2025-01-31 17:41:10,115 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sub', version=7)
2025-01-31 17:41:10,115 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sub', version=6)
2025-01-31 17:41:10,115 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sub', version=1)
2025-01-31 17:41:10,115 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Add', version=14)
2025-01-31 17:41:10,116 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Add', version=13)
2025-01-31 17:41:10,116 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Add', version=7)
2025-01-31 17:41:10,116 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Add', version=6)
2025-01-31 17:41:10,116 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Add', version=1)
2025-01-31 17:41:10,116 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Cast', version=13)
2025-01-31 17:41:10,116 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Cast', version=9)
2025-01-31 17:41:10,116 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Clip', version=13)
2025-01-31 17:41:10,116 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Clip', version=12)
2025-01-31 17:41:10,116 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Clip', version=11)
2025-01-31 17:41:10,116 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Clip', version=6)
2025-01-31 17:41:10,116 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='GreaterOrEqual', version=12)
2025-01-31 17:41:10,116 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='LessOrEqual', version=12)
2025-01-31 17:41:10,116 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Greater', version=13)
2025-01-31 17:41:10,116 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Greater', version=9)
2025-01-31 17:41:10,116 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Greater', version=7)
2025-01-31 17:41:10,116 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Less', version=13)
2025-01-31 17:41:10,117 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Less', version=9)
2025-01-31 17:41:10,117 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Less', version=7)
2025-01-31 17:41:10,117 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Equal', version=13)
2025-01-31 17:41:10,117 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Equal', version=11)
2025-01-31 17:41:10,117 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Equal', version=7)
2025-01-31 17:41:10,117 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Concat', version=13)
2025-01-31 17:41:10,117 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Concat', version=11)
2025-01-31 17:41:10,117 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Concat', version=4)
2025-01-31 17:41:10,117 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Constant', version=13)
2025-01-31 17:41:10,117 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Constant', version=12)
2025-01-31 17:41:10,117 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Constant', version=11)
2025-01-31 17:41:10,117 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Constant', version=9)
2025-01-31 17:41:10,117 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ConstantOfShape', version=9)
2025-01-31 17:41:10,117 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ConvTranspose', version=11)
2025-01-31 17:41:10,118 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ConvTranspose', version=1)
2025-01-31 17:41:10,118 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Conv', version=11)
2025-01-31 17:41:10,118 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Conv', version=1)
2025-01-31 17:41:10,118 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='CumSum', version=14)
2025-01-31 17:41:10,118 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='CumSum', version=11)
2025-01-31 17:41:10,118 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='DepthToSpace', version=13)
2025-01-31 17:41:10,118 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='DepthToSpace', version=11)
2025-01-31 17:41:10,118 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Dropout', version=10)
2025-01-31 17:41:10,118 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Dropout', version=13)
2025-01-31 17:41:10,118 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Dropout', version=12)
2025-01-31 17:41:10,119 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Einsum', version=12)
2025-01-31 17:41:10,119 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Expand', version=13)
2025-01-31 17:41:10,119 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Expand', version=8)
2025-01-31 17:41:10,119 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='EyeLike', version=9)
2025-01-31 17:41:10,119 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Flatten', version=9)
2025-01-31 17:41:10,119 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Flatten', version=11)
2025-01-31 17:41:10,119 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Flatten', version=13)
2025-01-31 17:41:10,120 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Tanh', version=6)
2025-01-31 17:41:10,120 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Tanh', version=13)
2025-01-31 17:41:10,120 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Tan', version=7)
2025-01-31 17:41:10,120 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sin', version=7)
2025-01-31 17:41:10,120 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sign', version=9)
2025-01-31 17:41:10,120 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sign', version=13)
2025-01-31 17:41:10,120 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Log', version=6)
2025-01-31 17:41:10,120 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Log', version=13)
2025-01-31 17:41:10,120 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Exp', version=13)
2025-01-31 17:41:10,120 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Exp', version=6)
2025-01-31 17:41:10,120 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Cos', version=7)
2025-01-31 17:41:10,120 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Atan', version=7)
2025-01-31 17:41:10,120 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Asin', version=7)
2025-01-31 17:41:10,120 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Acos', version=7)
2025-01-31 17:41:10,120 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Abs', version=6)
2025-01-31 17:41:10,120 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Abs', version=13)
2025-01-31 17:41:10,120 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Gather', version=13)
2025-01-31 17:41:10,120 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Gather', version=11)
2025-01-31 17:41:10,120 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Gather', version=1)
2025-01-31 17:41:10,121 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='GatherElements', version=13)
2025-01-31 17:41:10,121 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='GatherElements', version=11)
2025-01-31 17:41:10,121 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='GatherND', version=13)
2025-01-31 17:41:10,121 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='GatherND', version=12)
2025-01-31 17:41:10,121 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='GatherND', version=11)
2025-01-31 17:41:10,121 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Gemm', version=13)
2025-01-31 17:41:10,121 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Gemm', version=11)
2025-01-31 17:41:10,121 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Gemm', version=9)
2025-01-31 17:41:10,121 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='GlobalAveragePool', version=1)
2025-01-31 17:41:10,121 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Identity', version=1)
2025-01-31 17:41:10,121 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Identity', version=13)
2025-01-31 17:41:10,121 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Identity', version=14)
2025-01-31 17:41:10,121 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Identity', version=16)
2025-01-31 17:41:10,122 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='InstanceNormalization', version=6)
2025-01-31 17:41:10,122 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='InstanceNormalization', version=1)
2025-01-31 17:41:10,122 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='IsInf', version=10)
2025-01-31 17:41:10,122 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='IsNaN', version=13)
2025-01-31 17:41:10,122 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='LayerNormalization', version=17)
2025-01-31 17:41:10,122 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Or', version=7)
2025-01-31 17:41:10,122 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Or', version=1)
2025-01-31 17:41:10,122 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='And', version=7)
2025-01-31 17:41:10,122 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='And', version=1)
2025-01-31 17:41:10,123 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Xor', version=7)
2025-01-31 17:41:10,123 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Xor', version=1)
2025-01-31 17:41:10,123 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Not', version=1)
2025-01-31 17:41:10,123 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='LRN', version=1)
2025-01-31 17:41:10,123 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='LRN', version=13)
2025-01-31 17:41:10,123 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='MatMul', version=13)
2025-01-31 17:41:10,123 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='MatMul', version=9)
2025-01-31 17:41:10,123 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='MatMul', version=1)
2025-01-31 17:41:10,123 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='MaxPool', version=8)
2025-01-31 17:41:10,123 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='MaxPool', version=10)
2025-01-31 17:41:10,123 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='MaxPool', version=11)
2025-01-31 17:41:10,123 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='MaxPool', version=12)
2025-01-31 17:41:10,124 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Mean', version=13)
2025-01-31 17:41:10,124 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Mean', version=8)
2025-01-31 17:41:10,124 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Max', version=13)
2025-01-31 17:41:10,124 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Max', version=12)
2025-01-31 17:41:10,124 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Max', version=8)
2025-01-31 17:41:10,124 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Min', version=13)
2025-01-31 17:41:10,124 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Min', version=12)
2025-01-31 17:41:10,124 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Min', version=8)
2025-01-31 17:41:10,124 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Mod', version=13)
2025-01-31 17:41:10,124 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Mod', version=10)
2025-01-31 17:41:10,124 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Neg', version=13)
2025-01-31 17:41:10,124 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Neg', version=6)
2025-01-31 17:41:10,124 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Neg', version=1)
2025-01-31 17:41:10,578 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='NonMaxSuppression', version=11)
2025-01-31 17:41:10,578 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='NonMaxSuppression', version=10)
2025-01-31 17:41:10,578 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='NonZero', version=13)
2025-01-31 17:41:10,578 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Pow', version=15)
2025-01-31 17:41:10,578 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Pow', version=13)
2025-01-31 17:41:10,578 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Pow', version=12)
2025-01-31 17:41:10,578 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Pow', version=7)
2025-01-31 17:41:10,579 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Pow', version=1)
2025-01-31 17:41:10,579 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sqrt', version=13)
2025-01-31 17:41:10,579 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sqrt', version=6)
2025-01-31 17:41:10,579 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sqrt', version=1)
2025-01-31 17:41:10,579 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Range', version=11)
2025-01-31 17:41:10,579 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Reciprocal', version=13)
2025-01-31 17:41:10,579 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Reciprocal', version=6)
2025-01-31 17:41:10,579 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Reciprocal', version=1)
2025-01-31 17:41:10,580 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceSumSquare', version=13)
2025-01-31 17:41:10,580 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceSumSquare', version=11)
2025-01-31 17:41:10,580 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceSumSquare', version=1)
2025-01-31 17:41:10,580 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceSum', version=11)
2025-01-31 17:41:10,580 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceSum', version=1)
2025-01-31 17:41:10,580 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceProd', version=13)
2025-01-31 17:41:10,580 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceProd', version=11)
2025-01-31 17:41:10,580 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceProd', version=1)
2025-01-31 17:41:10,580 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceMin', version=13)
2025-01-31 17:41:10,580 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceMin', version=12)
2025-01-31 17:41:10,580 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceMin', version=11)
2025-01-31 17:41:10,580 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceMin', version=1)
2025-01-31 17:41:10,581 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceMean', version=13)
2025-01-31 17:41:10,581 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceMean', version=11)
2025-01-31 17:41:10,581 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceMean', version=1)
2025-01-31 17:41:10,581 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceMax', version=13)
2025-01-31 17:41:10,581 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceMax', version=12)
2025-01-31 17:41:10,581 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceMax', version=11)
2025-01-31 17:41:10,581 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceMax', version=1)
2025-01-31 17:41:10,581 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceLogSumExp', version=13)
2025-01-31 17:41:10,581 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceLogSumExp', version=11)
2025-01-31 17:41:10,581 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceLogSumExp', version=1)
2025-01-31 17:41:10,581 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceLogSum', version=13)
2025-01-31 17:41:10,581 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceLogSum', version=11)
2025-01-31 17:41:10,581 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceLogSum', version=1)
2025-01-31 17:41:10,581 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceL2', version=13)
2025-01-31 17:41:10,581 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceL2', version=11)
2025-01-31 17:41:10,581 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceL2', version=1)
2025-01-31 17:41:10,581 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceL1', version=13)
2025-01-31 17:41:10,581 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceL1', version=11)
2025-01-31 17:41:10,582 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceL1', version=1)
2025-01-31 17:41:10,582 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ReduceSum', version=13)
2025-01-31 17:41:10,582 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Reshape', version=14)
2025-01-31 17:41:10,582 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Reshape', version=13)
2025-01-31 17:41:10,582 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Reshape', version=5)
2025-01-31 17:41:10,582 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Resize', version=10)
2025-01-31 17:41:10,582 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Resize', version=13)
2025-01-31 17:41:10,583 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Resize', version=11)
2025-01-31 17:41:10,583 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='RoiAlign', version=10)
2025-01-31 17:41:10,583 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='RoiAlign', version=16)
2025-01-31 17:41:10,583 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Round', version=11)
2025-01-31 17:41:10,583 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Floor', version=6)
2025-01-31 17:41:10,583 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Floor', version=13)
2025-01-31 17:41:10,583 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Ceil', version=6)
2025-01-31 17:41:10,583 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Ceil', version=13)
2025-01-31 17:41:10,584 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ScatterND', version=16)
2025-01-31 17:41:10,584 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ScatterND', version=13)
2025-01-31 17:41:10,584 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='ScatterND', version=11)
2025-01-31 17:41:10,584 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Shape', version=15)
2025-01-31 17:41:10,584 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Shape', version=13)
2025-01-31 17:41:10,584 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Shape', version=1)
2025-01-31 17:41:10,585 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Slice', version=9)
2025-01-31 17:41:10,585 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Slice', version=13)
2025-01-31 17:41:10,585 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Slice', version=11)
2025-01-31 17:41:10,585 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Slice', version=10)
2025-01-31 17:41:10,585 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Split', version=13)
2025-01-31 17:41:10,585 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Split', version=2)
2025-01-31 17:41:10,585 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Split', version=11)
2025-01-31 17:41:10,586 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Squeeze', version=11)
2025-01-31 17:41:10,586 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Squeeze', version=1)
2025-01-31 17:41:10,586 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Squeeze', version=21)
2025-01-31 17:41:10,586 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Squeeze', version=13)
2025-01-31 17:41:10,586 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sum', version=13)
2025-01-31 17:41:10,586 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Sum', version=8)
2025-01-31 17:41:10,586 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Tile', version=13)
2025-01-31 17:41:10,587 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Tile', version=6)
2025-01-31 17:41:10,587 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='TopK', version=11)
2025-01-31 17:41:10,587 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='TopK', version=10)
2025-01-31 17:41:10,587 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='TopK', version=1)
2025-01-31 17:41:10,587 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Transpose', version=13)
2025-01-31 17:41:10,587 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Transpose', version=1)
2025-01-31 17:41:10,587 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Unsqueeze', version=11)
2025-01-31 17:41:10,587 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Unsqueeze', version=1)
2025-01-31 17:41:10,588 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Unsqueeze', version=13)
2025-01-31 17:41:10,588 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Where', version=16)
2025-01-31 17:41:10,588 - DEBUG - Operation converter registered OperationDescription(domain='', operation_type='Where', version=9)
2025-01-31 17:41:10,692 - INFO - Load model duration: 00:00:00
2025-01-31 17:41:10,692 - INFO - Starting separation process for audio_file_path: yt_audios/LA MARSEILLAISE - HYMNE DE LA FRANCE - PAROLES
2025-01-31 17:41:54,832 - INFO - Saving Vocals stem to LA MARSEILLAISE - HYMNE DE LA FRANCE - PAROLES_(Vocals)_UVR-MDX-NET-Inst_HQ_3.wav...
2025-01-31 17:41:54,832 - INFO - Audio duration is 0.02 hours (66.85 seconds).
2025-01-31 17:41:54,832 - INFO - Using pydub for writing.
2025-01-31 17:41:54,850 - INFO - Saving Instrumental stem to LA MARSEILLAISE - HYMNE DE LA FRANCE - PAROLES_(Instrumental)_UVR-MDX-NET-Inst_HQ_3.wav...
2025-01-31 17:41:54,850 - INFO - Audio duration is 0.02 hours (66.85 seconds).
2025-01-31 17:41:54,851 - INFO - Using pydub for writing.
2025-01-31 17:41:54,943 - INFO - Clearing input audio file paths, sources and stems...
2025-01-31 17:41:54,943 - INFO - Separation duration: 00:00:44
2025-01-31 17:41:54,993 - INFO - Split audio into ./split_audios/vocal_LA MARSEILLAISE - HYMNE DE LA FRANCE - PAROLES.wav and ./split_audios/instrument_LA MARSEILLAISE - HYMNE DE LA FRANCE - PAROLES.wav
2025-01-31 17:41:54,994 - INFO - Changing voice with model: logs/model/LaFeve
2025-01-31 17:41:55,043 - DEBUG - Loading FFmpeg6
2025-01-31 17:41:55,059 - DEBUG - Failed to load FFmpeg6 extension.
Traceback (most recent call last):
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/torio/_extension/utils.py", line 116, in _find_ffmpeg_extension
    ext = _find_versionsed_ffmpeg_extension(ffmpeg_ver)
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/torio/_extension/utils.py", line 108, in _find_versionsed_ffmpeg_extension
    _load_lib(lib)
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/torio/_extension/utils.py", line 94, in _load_lib
    torch.ops.load_library(path)
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/torch/_ops.py", line 1032, in load_library
    ctypes.CDLL(path)
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/ctypes/__init__.py", line 374, in __init__
    self._handle = _dlopen(self._name, mode)
OSError: /home/strain/miniconda3/envs/applio/bin/../lib/libstdc++.so.6: version `GLIBCXX_3.4.32' not found (required by /lib/x86_64-linux-gnu/libavfilter.so.9)
2025-01-31 17:41:55,060 - DEBUG - Loading FFmpeg5
2025-01-31 17:41:55,060 - DEBUG - Failed to load FFmpeg5 extension.
Traceback (most recent call last):
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/torio/_extension/utils.py", line 116, in _find_ffmpeg_extension
    ext = _find_versionsed_ffmpeg_extension(ffmpeg_ver)
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/torio/_extension/utils.py", line 108, in _find_versionsed_ffmpeg_extension
    _load_lib(lib)
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/torio/_extension/utils.py", line 94, in _load_lib
    torch.ops.load_library(path)
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/torch/_ops.py", line 1032, in load_library
    ctypes.CDLL(path)
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/ctypes/__init__.py", line 374, in __init__
    self._handle = _dlopen(self._name, mode)
OSError: libavutil.so.57: cannot open shared object file: No such file or directory
2025-01-31 17:41:55,061 - DEBUG - Loading FFmpeg4
2025-01-31 17:41:55,061 - DEBUG - Failed to load FFmpeg4 extension.
Traceback (most recent call last):
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/torio/_extension/utils.py", line 116, in _find_ffmpeg_extension
    ext = _find_versionsed_ffmpeg_extension(ffmpeg_ver)
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/torio/_extension/utils.py", line 108, in _find_versionsed_ffmpeg_extension
    _load_lib(lib)
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/torio/_extension/utils.py", line 94, in _load_lib
    torch.ops.load_library(path)
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/torch/_ops.py", line 1032, in load_library
    ctypes.CDLL(path)
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/ctypes/__init__.py", line 374, in __init__
    self._handle = _dlopen(self._name, mode)
OSError: libavutil.so.56: cannot open shared object file: No such file or directory
2025-01-31 17:41:55,061 - DEBUG - Loading FFmpeg
2025-01-31 17:41:55,061 - DEBUG - Failed to load FFmpeg extension.
Traceback (most recent call last):
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/torio/_extension/utils.py", line 116, in _find_ffmpeg_extension
    ext = _find_versionsed_ffmpeg_extension(ffmpeg_ver)
  File "/home/strain/miniconda3/envs/applio/lib/python3.10/site-packages/torio/_extension/utils.py", line 106, in _find_versionsed_ffmpeg_extension
    raise RuntimeError(f"FFmpeg{version} extension is not available.")
RuntimeError: FFmpeg extension is not available.
2025-01-31 17:43:46,162 - INFO - Inference completed for: LA MARSEILLAISE - HYMNE DE LA FRANCE - PAROLES
2025-01-31 17:43:46,162 - INFO - Mixing final audio
2025-01-31 17:43:46,238 - INFO - Mixing completed: LA MARSEILLAISE - HYMNE DE LA FRANCE - PAROLES
2025-01-31 17:43:46,366 - INFO - 127.0.0.1 - - [31/Jan/2025 17:43:46] "POST / HTTP/1.1" 200 -
2025-01-31 17:43:48,447 - INFO - 127.0.0.1 - - [31/Jan/2025 17:43:48] "GET /status/1738341665619417 HTTP/1.1" 200 -
2025-01-31 17:43:48,610 - INFO - 127.0.0.1 - - [31/Jan/2025 17:43:48] "GET /covers HTTP/1.1" 200 -
2025-01-31 17:43:48,686 - INFO - 127.0.0.1 - - [31/Jan/2025 17:43:48] "[35m[1mGET /play/LA%20MARSEILLAISE%20-%20HYMNE%20DE%20LA%20FRANCE%20-%20PAROLES_FEATURING_LaFeve.wav HTTP/1.1[0m" 206 -
2025-01-31 17:45:13,385 - INFO - 127.0.0.1 - - [31/Jan/2025 17:45:13] "[35m[1mGET /play/LA%20MARSEILLAISE%20-%20HYMNE%20DE%20LA%20FRANCE%20-%20PAROLES_FEATURING_LaFeve.wav HTTP/1.1[0m" 206 -
2025-01-31 17:45:13,393 - INFO - 127.0.0.1 - - [31/Jan/2025 17:45:13] "[33mGET /favicon.ico HTTP/1.1[0m" 404 -
2025-01-31 17:45:13,459 - INFO - 127.0.0.1 - - [31/Jan/2025 17:45:13] "[35m[1mGET /play/LA%20MARSEILLAISE%20-%20HYMNE%20DE%20LA%20FRANCE%20-%20PAROLES_FEATURING_LaFeve.wav HTTP/1.1[0m" 206 -
2025-01-31 17:45:19,353 - INFO - 127.0.0.1 - - [31/Jan/2025 17:45:19] "[35m[1mGET /play/LA%20MARSEILLAISE%20-%20HYMNE%20DE%20LA%20FRANCE%20-%20PAROLES_FEATURING_LaFeve.wav HTTP/1.1[0m" 206 -
2025-01-31 17:45:35,202 - INFO - Retrieved models: ['Ninho', 'Damso', 'Vald600', 'CharlesAznavour', 'MarineLepen', 'JUL_Interview', 'LaFeve', 'Nekfeu250', 'MickeyMouse', 'SCHInterview', 'SCH1000', 'NicolasSarkozy_v2_500e', 'Maes_600', 'KAARIS', 'ClaudeFrancoisV2', 'Josman', 'SoLaLune', 'JohnnyHallyday800', 'Titeuf600', 'Kylian-Mbapp√©', 'Lacrim', 'OrelsanV1', 'Booba', 'EricCartman', 'kaarism', 'Ademo', 'rick', 'Bassem', 'Wejdene_310Epochs', 'Laylow1000', 'PhilippeEtchebest', 'EricZemmour', 'FreezeCorleone', 'macron', 'gazo700', 'Angele', 'AlphaWann', 'Laylow', 'hamzaai500v2', 'homerSimpson']
2025-01-31 17:45:35,204 - INFO - 127.0.0.1 - - [31/Jan/2025 17:45:35] "GET / HTTP/1.1" 200 -
2025-01-31 17:45:36,309 - INFO - 127.0.0.1 - - [31/Jan/2025 17:45:36] "GET /covers HTTP/1.1" 200 -
2025-01-31 17:45:36,388 - INFO - 127.0.0.1 - - [31/Jan/2025 17:45:36] "[35m[1mGET /play/LA%20MARSEILLAISE%20-%20HYMNE%20DE%20LA%20FRANCE%20-%20PAROLES_FEATURING_LaFeve.wav HTTP/1.1[0m" 206 -
2025-01-31 17:45:36,468 - INFO - 127.0.0.1 - - [31/Jan/2025 17:45:36] "[35m[1mGET /play/LA%20MARSEILLAISE%20-%20HYMNE%20DE%20LA%20FRANCE%20-%20PAROLES_FEATURING_LaFeve.wav HTTP/1.1[0m" 206 -
2025-01-31 17:45:37,211 - INFO - Retrieved models: ['Ninho', 'Damso', 'Vald600', 'CharlesAznavour', 'MarineLepen', 'JUL_Interview', 'LaFeve', 'Nekfeu250', 'MickeyMouse', 'SCHInterview', 'SCH1000', 'NicolasSarkozy_v2_500e', 'Maes_600', 'KAARIS', 'ClaudeFrancoisV2', 'Josman', 'SoLaLune', 'JohnnyHallyday800', 'Titeuf600', 'Kylian-Mbapp√©', 'Lacrim', 'OrelsanV1', 'Booba', 'EricCartman', 'kaarism', 'Ademo', 'rick', 'Bassem', 'Wejdene_310Epochs', 'Laylow1000', 'PhilippeEtchebest', 'EricZemmour', 'FreezeCorleone', 'macron', 'gazo700', 'Angele', 'AlphaWann', 'Laylow', 'hamzaai500v2', 'homerSimpson']
2025-01-31 17:45:37,211 - INFO - 127.0.0.1 - - [31/Jan/2025 17:45:37] "GET / HTTP/1.1" 200 -
2025-01-31 17:45:37,890 - INFO - 127.0.0.1 - - [31/Jan/2025 17:45:37] "GET /covers HTTP/1.1" 200 -
2025-01-31 17:45:37,968 - INFO - 127.0.0.1 - - [31/Jan/2025 17:45:37] "[35m[1mGET /play/LA%20MARSEILLAISE%20-%20HYMNE%20DE%20LA%20FRANCE%20-%20PAROLES_FEATURING_LaFeve.wav HTTP/1.1[0m" 206 -
2025-01-31 17:45:38,715 - INFO - Retrieved models: ['Ninho', 'Damso', 'Vald600', 'CharlesAznavour', 'MarineLepen', 'JUL_Interview', 'LaFeve', 'Nekfeu250', 'MickeyMouse', 'SCHInterview', 'SCH1000', 'NicolasSarkozy_v2_500e', 'Maes_600', 'KAARIS', 'ClaudeFrancoisV2', 'Josman', 'SoLaLune', 'JohnnyHallyday800', 'Titeuf600', 'Kylian-Mbapp√©', 'Lacrim', 'OrelsanV1', 'Booba', 'EricCartman', 'kaarism', 'Ademo', 'rick', 'Bassem', 'Wejdene_310Epochs', 'Laylow1000', 'PhilippeEtchebest', 'EricZemmour', 'FreezeCorleone', 'macron', 'gazo700', 'Angele', 'AlphaWann', 'Laylow', 'hamzaai500v2', 'homerSimpson']
2025-01-31 17:45:38,717 - INFO - 127.0.0.1 - - [31/Jan/2025 17:45:38] "GET / HTTP/1.1" 200 -
2025-01-31 17:45:41,019 - INFO - 127.0.0.1 - - [31/Jan/2025 17:45:41] "GET /covers HTTP/1.1" 200 -
2025-01-31 17:45:41,097 - INFO - 127.0.0.1 - - [31/Jan/2025 17:45:41] "[35m[1mGET /play/LA%20MARSEILLAISE%20-%20HYMNE%20DE%20LA%20FRANCE%20-%20PAROLES_FEATURING_LaFeve.wav HTTP/1.1[0m" 206 -
2025-01-31 17:45:41,183 - INFO - 127.0.0.1 - - [31/Jan/2025 17:45:41] "[35m[1mGET /play/LA%20MARSEILLAISE%20-%20HYMNE%20DE%20LA%20FRANCE%20-%20PAROLES_FEATURING_LaFeve.wav HTTP/1.1[0m" 206 -
2025-01-31 17:45:41,764 - INFO - Retrieved models: ['Ninho', 'Damso', 'Vald600', 'CharlesAznavour', 'MarineLepen', 'JUL_Interview', 'LaFeve', 'Nekfeu250', 'MickeyMouse', 'SCHInterview', 'SCH1000', 'NicolasSarkozy_v2_500e', 'Maes_600', 'KAARIS', 'ClaudeFrancoisV2', 'Josman', 'SoLaLune', 'JohnnyHallyday800', 'Titeuf600', 'Kylian-Mbapp√©', 'Lacrim', 'OrelsanV1', 'Booba', 'EricCartman', 'kaarism', 'Ademo', 'rick', 'Bassem', 'Wejdene_310Epochs', 'Laylow1000', 'PhilippeEtchebest', 'EricZemmour', 'FreezeCorleone', 'macron', 'gazo700', 'Angele', 'AlphaWann', 'Laylow', 'hamzaai500v2', 'homerSimpson']
2025-01-31 17:45:41,766 - INFO - 127.0.0.1 - - [31/Jan/2025 17:45:41] "GET / HTTP/1.1" 200 -
2025-01-31 17:45:42,040 - INFO - 127.0.0.1 - - [31/Jan/2025 17:45:42] "GET /covers HTTP/1.1" 200 -
2025-01-31 17:45:42,175 - INFO - 127.0.0.1 - - [31/Jan/2025 17:45:42] "[35m[1mGET /play/LA%20MARSEILLAISE%20-%20HYMNE%20DE%20LA%20FRANCE%20-%20PAROLES_FEATURING_LaFeve.wav HTTP/1.1[0m" 206 -
2025-01-31 17:45:42,370 - INFO - Retrieved models: ['Ninho', 'Damso', 'Vald600', 'CharlesAznavour', 'MarineLepen', 'JUL_Interview', 'LaFeve', 'Nekfeu250', 'MickeyMouse', 'SCHInterview', 'SCH1000', 'NicolasSarkozy_v2_500e', 'Maes_600', 'KAARIS', 'ClaudeFrancoisV2', 'Josman', 'SoLaLune', 'JohnnyHallyday800', 'Titeuf600', 'Kylian-Mbapp√©', 'Lacrim', 'OrelsanV1', 'Booba', 'EricCartman', 'kaarism', 'Ademo', 'rick', 'Bassem', 'Wejdene_310Epochs', 'Laylow1000', 'PhilippeEtchebest', 'EricZemmour', 'FreezeCorleone', 'macron', 'gazo700', 'Angele', 'AlphaWann', 'Laylow', 'hamzaai500v2', 'homerSimpson']
2025-01-31 17:45:42,371 - INFO - 127.0.0.1 - - [31/Jan/2025 17:45:42] "GET / HTTP/1.1" 200 -
2025-01-31 17:45:42,653 - INFO - 127.0.0.1 - - [31/Jan/2025 17:45:42] "GET /covers HTTP/1.1" 200 -
2025-01-31 17:45:42,788 - INFO - 127.0.0.1 - - [31/Jan/2025 17:45:42] "[35m[1mGET /play/LA%20MARSEILLAISE%20-%20HYMNE%20DE%20LA%20FRANCE%20-%20PAROLES_FEATURING_LaFeve.wav HTTP/1.1[0m" 206 -
2025-01-31 17:45:42,865 - INFO - 127.0.0.1 - - [31/Jan/2025 17:45:42] "[35m[1mGET /play/LA%20MARSEILLAISE%20-%20HYMNE%20DE%20LA%20FRANCE%20-%20PAROLES_FEATURING_LaFeve.wav HTTP/1.1[0m" 206 -
2025-01-31 17:45:43,114 - INFO - Retrieved models: ['Ninho', 'Damso', 'Vald600', 'CharlesAznavour', 'MarineLepen', 'JUL_Interview', 'LaFeve', 'Nekfeu250', 'MickeyMouse', 'SCHInterview', 'SCH1000', 'NicolasSarkozy_v2_500e', 'Maes_600', 'KAARIS', 'ClaudeFrancoisV2', 'Josman', 'SoLaLune', 'JohnnyHallyday800', 'Titeuf600', 'Kylian-Mbapp√©', 'Lacrim', 'OrelsanV1', 'Booba', 'EricCartman', 'kaarism', 'Ademo', 'rick', 'Bassem', 'Wejdene_310Epochs', 'Laylow1000', 'PhilippeEtchebest', 'EricZemmour', 'FreezeCorleone', 'macron', 'gazo700', 'Angele', 'AlphaWann', 'Laylow', 'hamzaai500v2', 'homerSimpson']
2025-01-31 17:45:43,115 - INFO - 127.0.0.1 - - [31/Jan/2025 17:45:43] "GET / HTTP/1.1" 200 -
2025-01-31 17:45:43,685 - INFO - Retrieved models: ['Ninho', 'Damso', 'Vald600', 'CharlesAznavour', 'MarineLepen', 'JUL_Interview', 'LaFeve', 'Nekfeu250', 'MickeyMouse', 'SCHInterview', 'SCH1000', 'NicolasSarkozy_v2_500e', 'Maes_600', 'KAARIS', 'ClaudeFrancoisV2', 'Josman', 'SoLaLune', 'JohnnyHallyday800', 'Titeuf600', 'Kylian-Mbapp√©', 'Lacrim', 'OrelsanV1', 'Booba', 'EricCartman', 'kaarism', 'Ademo', 'rick', 'Bassem', 'Wejdene_310Epochs', 'Laylow1000', 'PhilippeEtchebest', 'EricZemmour', 'FreezeCorleone', 'macron', 'gazo700', 'Angele', 'AlphaWann', 'Laylow', 'hamzaai500v2', 'homerSimpson']
2025-01-31 17:45:43,687 - INFO - 127.0.0.1 - - [31/Jan/2025 17:45:43] "GET / HTTP/1.1" 200 -
2025-01-31 17:45:44,032 - INFO - 127.0.0.1 - - [31/Jan/2025 17:45:44] "GET /covers HTTP/1.1" 200 -
2025-01-31 17:45:44,097 - INFO - 127.0.0.1 - - [31/Jan/2025 17:45:44] "[35m[1mGET /play/LA%20MARSEILLAISE%20-%20HYMNE%20DE%20LA%20FRANCE%20-%20PAROLES_FEATURING_LaFeve.wav HTTP/1.1[0m" 206 -
2025-01-31 17:45:44,413 - INFO - 127.0.0.1 - - [31/Jan/2025 17:45:44] "GET /covers HTTP/1.1" 200 -
2025-01-31 17:45:45,624 - INFO - Retrieved models: ['Ninho', 'Damso', 'Vald600', 'CharlesAznavour', 'MarineLepen', 'JUL_Interview', 'LaFeve', 'Nekfeu250', 'MickeyMouse', 'SCHInterview', 'SCH1000', 'NicolasSarkozy_v2_500e', 'Maes_600', 'KAARIS', 'ClaudeFrancoisV2', 'Josman', 'SoLaLune', 'JohnnyHallyday800', 'Titeuf600', 'Kylian-Mbapp√©', 'Lacrim', 'OrelsanV1', 'Booba', 'EricCartman', 'kaarism', 'Ademo', 'rick', 'Bassem', 'Wejdene_310Epochs', 'Laylow1000', 'PhilippeEtchebest', 'EricZemmour', 'FreezeCorleone', 'macron', 'gazo700', 'Angele', 'AlphaWann', 'Laylow', 'hamzaai500v2', 'homerSimpson']
2025-01-31 17:45:45,626 - INFO - 127.0.0.1 - - [31/Jan/2025 17:45:45] "GET / HTTP/1.1" 200 -
2025-01-31 17:46:21,143 - INFO -  * Detected change in '/home/strain/deepVoice/Applio/server.py', reloading
2025-01-31 17:46:21,899 - INFO -  * Restarting with stat
2025-01-31 17:46:24,342 - WARNING -  * Debugger is active!
2025-01-31 17:46:24,343 - INFO -  * Debugger PIN: 142-961-790
